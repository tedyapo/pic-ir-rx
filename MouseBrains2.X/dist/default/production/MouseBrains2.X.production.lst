

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Jul 21 00:46:30 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16LF1708
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2
    55                           	psect	text31,local,class=CODE,merge=1,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	psect	text38,local,class=CODE,merge=1,delta=2
    63                           	psect	text39,local,class=CODE,merge=1,delta=2
    64                           	psect	text40,local,class=CODE,merge=1,delta=2
    65                           	psect	text41,local,class=CODE,merge=1,delta=2
    66                           	psect	text42,local,class=CODE,merge=1,delta=2
    67                           	psect	text43,local,class=CODE,merge=1,delta=2
    68                           	psect	text44,local,class=CODE,merge=1,delta=2
    69                           	psect	text45,local,class=CODE,merge=1,delta=2
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    71                           	dabs	1,0x7E,2
    72  0000                     
    73                           ; Version 2.20
    74                           ; Generated 09/04/2020 GMT
    75                           ; 
    76                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16LF1708 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  0091                     	;# 
   138  0092                     	;# 
   139  0093                     	;# 
   140  0095                     	;# 
   141  0096                     	;# 
   142  0097                     	;# 
   143  0098                     	;# 
   144  0099                     	;# 
   145  009A                     	;# 
   146  009B                     	;# 
   147  009B                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009E                     	;# 
   151  009F                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010E                     	;# 
   155  0111                     	;# 
   156  0112                     	;# 
   157  0113                     	;# 
   158  0114                     	;# 
   159  0115                     	;# 
   160  0116                     	;# 
   161  0117                     	;# 
   162  0118                     	;# 
   163  0119                     	;# 
   164  011C                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  018E                     	;# 
   168  0191                     	;# 
   169  0191                     	;# 
   170  0192                     	;# 
   171  0193                     	;# 
   172  0193                     	;# 
   173  0194                     	;# 
   174  0195                     	;# 
   175  0196                     	;# 
   176  0199                     	;# 
   177  0199                     	;# 
   178  0199                     	;# 
   179  019A                     	;# 
   180  019A                     	;# 
   181  019A                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019B                     	;# 
   186  019B                     	;# 
   187  019C                     	;# 
   188  019C                     	;# 
   189  019C                     	;# 
   190  019D                     	;# 
   191  019D                     	;# 
   192  019D                     	;# 
   193  019E                     	;# 
   194  019E                     	;# 
   195  019E                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  019F                     	;# 
   199  019F                     	;# 
   200  019F                     	;# 
   201  020C                     	;# 
   202  020D                     	;# 
   203  020E                     	;# 
   204  0211                     	;# 
   205  0211                     	;# 
   206  0212                     	;# 
   207  0212                     	;# 
   208  0213                     	;# 
   209  0213                     	;# 
   210  0214                     	;# 
   211  0214                     	;# 
   212  0215                     	;# 
   213  0215                     	;# 
   214  0215                     	;# 
   215  0215                     	;# 
   216  0216                     	;# 
   217  0216                     	;# 
   218  0217                     	;# 
   219  0217                     	;# 
   220  028C                     	;# 
   221  028D                     	;# 
   222  028E                     	;# 
   223  0291                     	;# 
   224  0291                     	;# 
   225  0292                     	;# 
   226  0293                     	;# 
   227  0293                     	;# 
   228  0298                     	;# 
   229  0298                     	;# 
   230  0299                     	;# 
   231  029A                     	;# 
   232  029A                     	;# 
   233  029E                     	;# 
   234  030C                     	;# 
   235  030D                     	;# 
   236  030E                     	;# 
   237  038C                     	;# 
   238  038D                     	;# 
   239  038E                     	;# 
   240  0391                     	;# 
   241  0392                     	;# 
   242  0393                     	;# 
   243  0394                     	;# 
   244  0395                     	;# 
   245  0396                     	;# 
   246  0397                     	;# 
   247  0398                     	;# 
   248  0399                     	;# 
   249  0415                     	;# 
   250  0416                     	;# 
   251  0417                     	;# 
   252  041C                     	;# 
   253  041D                     	;# 
   254  041E                     	;# 
   255  0511                     	;# 
   256  0515                     	;# 
   257  0617                     	;# 
   258  0618                     	;# 
   259  0619                     	;# 
   260  0619                     	;# 
   261  061A                     	;# 
   262  061B                     	;# 
   263  061C                     	;# 
   264  061C                     	;# 
   265  0691                     	;# 
   266  0692                     	;# 
   267  0693                     	;# 
   268  0694                     	;# 
   269  0695                     	;# 
   270  0696                     	;# 
   271  0697                     	;# 
   272  0698                     	;# 
   273  0699                     	;# 
   274  069A                     	;# 
   275  069B                     	;# 
   276  069C                     	;# 
   277  069D                     	;# 
   278  069E                     	;# 
   279  069F                     	;# 
   280  0E0F                     	;# 
   281  0E10                     	;# 
   282  0E11                     	;# 
   283  0E12                     	;# 
   284  0E13                     	;# 
   285  0E14                     	;# 
   286  0E15                     	;# 
   287  0E17                     	;# 
   288  0E20                     	;# 
   289  0E21                     	;# 
   290  0E22                     	;# 
   291  0E24                     	;# 
   292  0E25                     	;# 
   293  0E28                     	;# 
   294  0E29                     	;# 
   295  0E2A                     	;# 
   296  0E2B                     	;# 
   297  0E90                     	;# 
   298  0E91                     	;# 
   299  0E92                     	;# 
   300  0E94                     	;# 
   301  0E95                     	;# 
   302  0E9C                     	;# 
   303  0E9D                     	;# 
   304  0E9E                     	;# 
   305  0E9F                     	;# 
   306  0EA0                     	;# 
   307  0EA1                     	;# 
   308  0EA2                     	;# 
   309  0EA3                     	;# 
   310  0EA4                     	;# 
   311  0EA5                     	;# 
   312  0EA6                     	;# 
   313  0EA7                     	;# 
   314  0F0F                     	;# 
   315  0F10                     	;# 
   316  0F11                     	;# 
   317  0F12                     	;# 
   318  0F13                     	;# 
   319  0F14                     	;# 
   320  0F15                     	;# 
   321  0F16                     	;# 
   322  0F17                     	;# 
   323  0F18                     	;# 
   324  0F19                     	;# 
   325  0F1A                     	;# 
   326  0F1B                     	;# 
   327  0F1C                     	;# 
   328  0F1D                     	;# 
   329  0F1E                     	;# 
   330  0F1F                     	;# 
   331  0F20                     	;# 
   332  0F21                     	;# 
   333  0F22                     	;# 
   334  0F23                     	;# 
   335  0F24                     	;# 
   336  0F25                     	;# 
   337  0F26                     	;# 
   338  0F27                     	;# 
   339  0F28                     	;# 
   340  0F29                     	;# 
   341  0F2A                     	;# 
   342  0F2B                     	;# 
   343  0F2C                     	;# 
   344  0F2D                     	;# 
   345  0FE4                     	;# 
   346  0FE5                     	;# 
   347  0FE6                     	;# 
   348  0FE7                     	;# 
   349  0FE8                     	;# 
   350  0FE9                     	;# 
   351  0FEA                     	;# 
   352  0FEB                     	;# 
   353  0FED                     	;# 
   354  0FEE                     	;# 
   355  0FEF                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0008                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  0011                     	;# 
   372  0012                     	;# 
   373  0013                     	;# 
   374  0015                     	;# 
   375  0016                     	;# 
   376  0016                     	;# 
   377  0017                     	;# 
   378  0018                     	;# 
   379  0019                     	;# 
   380  001A                     	;# 
   381  001B                     	;# 
   382  001C                     	;# 
   383  008C                     	;# 
   384  008D                     	;# 
   385  008E                     	;# 
   386  0091                     	;# 
   387  0092                     	;# 
   388  0093                     	;# 
   389  0095                     	;# 
   390  0096                     	;# 
   391  0097                     	;# 
   392  0098                     	;# 
   393  0099                     	;# 
   394  009A                     	;# 
   395  009B                     	;# 
   396  009B                     	;# 
   397  009C                     	;# 
   398  009D                     	;# 
   399  009E                     	;# 
   400  009F                     	;# 
   401  010C                     	;# 
   402  010D                     	;# 
   403  010E                     	;# 
   404  0111                     	;# 
   405  0112                     	;# 
   406  0113                     	;# 
   407  0114                     	;# 
   408  0115                     	;# 
   409  0116                     	;# 
   410  0117                     	;# 
   411  0118                     	;# 
   412  0119                     	;# 
   413  011C                     	;# 
   414  018C                     	;# 
   415  018D                     	;# 
   416  018E                     	;# 
   417  0191                     	;# 
   418  0191                     	;# 
   419  0192                     	;# 
   420  0193                     	;# 
   421  0193                     	;# 
   422  0194                     	;# 
   423  0195                     	;# 
   424  0196                     	;# 
   425  0199                     	;# 
   426  0199                     	;# 
   427  0199                     	;# 
   428  019A                     	;# 
   429  019A                     	;# 
   430  019A                     	;# 
   431  019B                     	;# 
   432  019B                     	;# 
   433  019B                     	;# 
   434  019B                     	;# 
   435  019B                     	;# 
   436  019C                     	;# 
   437  019C                     	;# 
   438  019C                     	;# 
   439  019D                     	;# 
   440  019D                     	;# 
   441  019D                     	;# 
   442  019E                     	;# 
   443  019E                     	;# 
   444  019E                     	;# 
   445  019F                     	;# 
   446  019F                     	;# 
   447  019F                     	;# 
   448  019F                     	;# 
   449  019F                     	;# 
   450  020C                     	;# 
   451  020D                     	;# 
   452  020E                     	;# 
   453  0211                     	;# 
   454  0211                     	;# 
   455  0212                     	;# 
   456  0212                     	;# 
   457  0213                     	;# 
   458  0213                     	;# 
   459  0214                     	;# 
   460  0214                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0216                     	;# 
   466  0216                     	;# 
   467  0217                     	;# 
   468  0217                     	;# 
   469  028C                     	;# 
   470  028D                     	;# 
   471  028E                     	;# 
   472  0291                     	;# 
   473  0291                     	;# 
   474  0292                     	;# 
   475  0293                     	;# 
   476  0293                     	;# 
   477  0298                     	;# 
   478  0298                     	;# 
   479  0299                     	;# 
   480  029A                     	;# 
   481  029A                     	;# 
   482  029E                     	;# 
   483  030C                     	;# 
   484  030D                     	;# 
   485  030E                     	;# 
   486  038C                     	;# 
   487  038D                     	;# 
   488  038E                     	;# 
   489  0391                     	;# 
   490  0392                     	;# 
   491  0393                     	;# 
   492  0394                     	;# 
   493  0395                     	;# 
   494  0396                     	;# 
   495  0397                     	;# 
   496  0398                     	;# 
   497  0399                     	;# 
   498  0415                     	;# 
   499  0416                     	;# 
   500  0417                     	;# 
   501  041C                     	;# 
   502  041D                     	;# 
   503  041E                     	;# 
   504  0511                     	;# 
   505  0515                     	;# 
   506  0617                     	;# 
   507  0618                     	;# 
   508  0619                     	;# 
   509  0619                     	;# 
   510  061A                     	;# 
   511  061B                     	;# 
   512  061C                     	;# 
   513  061C                     	;# 
   514  0691                     	;# 
   515  0692                     	;# 
   516  0693                     	;# 
   517  0694                     	;# 
   518  0695                     	;# 
   519  0696                     	;# 
   520  0697                     	;# 
   521  0698                     	;# 
   522  0699                     	;# 
   523  069A                     	;# 
   524  069B                     	;# 
   525  069C                     	;# 
   526  069D                     	;# 
   527  069E                     	;# 
   528  069F                     	;# 
   529  0E0F                     	;# 
   530  0E10                     	;# 
   531  0E11                     	;# 
   532  0E12                     	;# 
   533  0E13                     	;# 
   534  0E14                     	;# 
   535  0E15                     	;# 
   536  0E17                     	;# 
   537  0E20                     	;# 
   538  0E21                     	;# 
   539  0E22                     	;# 
   540  0E24                     	;# 
   541  0E25                     	;# 
   542  0E28                     	;# 
   543  0E29                     	;# 
   544  0E2A                     	;# 
   545  0E2B                     	;# 
   546  0E90                     	;# 
   547  0E91                     	;# 
   548  0E92                     	;# 
   549  0E94                     	;# 
   550  0E95                     	;# 
   551  0E9C                     	;# 
   552  0E9D                     	;# 
   553  0E9E                     	;# 
   554  0E9F                     	;# 
   555  0EA0                     	;# 
   556  0EA1                     	;# 
   557  0EA2                     	;# 
   558  0EA3                     	;# 
   559  0EA4                     	;# 
   560  0EA5                     	;# 
   561  0EA6                     	;# 
   562  0EA7                     	;# 
   563  0F0F                     	;# 
   564  0F10                     	;# 
   565  0F11                     	;# 
   566  0F12                     	;# 
   567  0F13                     	;# 
   568  0F14                     	;# 
   569  0F15                     	;# 
   570  0F16                     	;# 
   571  0F17                     	;# 
   572  0F18                     	;# 
   573  0F19                     	;# 
   574  0F1A                     	;# 
   575  0F1B                     	;# 
   576  0F1C                     	;# 
   577  0F1D                     	;# 
   578  0F1E                     	;# 
   579  0F1F                     	;# 
   580  0F20                     	;# 
   581  0F21                     	;# 
   582  0F22                     	;# 
   583  0F23                     	;# 
   584  0F24                     	;# 
   585  0F25                     	;# 
   586  0F26                     	;# 
   587  0F27                     	;# 
   588  0F28                     	;# 
   589  0F29                     	;# 
   590  0F2A                     	;# 
   591  0F2B                     	;# 
   592  0F2C                     	;# 
   593  0F2D                     	;# 
   594  0FE4                     	;# 
   595  0FE5                     	;# 
   596  0FE6                     	;# 
   597  0FE7                     	;# 
   598  0FE8                     	;# 
   599  0FE9                     	;# 
   600  0FEA                     	;# 
   601  0FEB                     	;# 
   602  0FED                     	;# 
   603  0FEE                     	;# 
   604  0FEF                     	;# 
   605  0000                     	;# 
   606  0001                     	;# 
   607  0002                     	;# 
   608  0003                     	;# 
   609  0004                     	;# 
   610  0005                     	;# 
   611  0006                     	;# 
   612  0007                     	;# 
   613  0008                     	;# 
   614  0009                     	;# 
   615  000A                     	;# 
   616  000B                     	;# 
   617  000C                     	;# 
   618  000D                     	;# 
   619  000E                     	;# 
   620  0011                     	;# 
   621  0012                     	;# 
   622  0013                     	;# 
   623  0015                     	;# 
   624  0016                     	;# 
   625  0016                     	;# 
   626  0017                     	;# 
   627  0018                     	;# 
   628  0019                     	;# 
   629  001A                     	;# 
   630  001B                     	;# 
   631  001C                     	;# 
   632  008C                     	;# 
   633  008D                     	;# 
   634  008E                     	;# 
   635  0091                     	;# 
   636  0092                     	;# 
   637  0093                     	;# 
   638  0095                     	;# 
   639  0096                     	;# 
   640  0097                     	;# 
   641  0098                     	;# 
   642  0099                     	;# 
   643  009A                     	;# 
   644  009B                     	;# 
   645  009B                     	;# 
   646  009C                     	;# 
   647  009D                     	;# 
   648  009E                     	;# 
   649  009F                     	;# 
   650  010C                     	;# 
   651  010D                     	;# 
   652  010E                     	;# 
   653  0111                     	;# 
   654  0112                     	;# 
   655  0113                     	;# 
   656  0114                     	;# 
   657  0115                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  0118                     	;# 
   661  0119                     	;# 
   662  011C                     	;# 
   663  018C                     	;# 
   664  018D                     	;# 
   665  018E                     	;# 
   666  0191                     	;# 
   667  0191                     	;# 
   668  0192                     	;# 
   669  0193                     	;# 
   670  0193                     	;# 
   671  0194                     	;# 
   672  0195                     	;# 
   673  0196                     	;# 
   674  0199                     	;# 
   675  0199                     	;# 
   676  0199                     	;# 
   677  019A                     	;# 
   678  019A                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019C                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019D                     	;# 
   689  019D                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019E                     	;# 
   693  019E                     	;# 
   694  019F                     	;# 
   695  019F                     	;# 
   696  019F                     	;# 
   697  019F                     	;# 
   698  019F                     	;# 
   699  020C                     	;# 
   700  020D                     	;# 
   701  020E                     	;# 
   702  0211                     	;# 
   703  0211                     	;# 
   704  0212                     	;# 
   705  0212                     	;# 
   706  0213                     	;# 
   707  0213                     	;# 
   708  0214                     	;# 
   709  0214                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0215                     	;# 
   714  0216                     	;# 
   715  0216                     	;# 
   716  0217                     	;# 
   717  0217                     	;# 
   718  028C                     	;# 
   719  028D                     	;# 
   720  028E                     	;# 
   721  0291                     	;# 
   722  0291                     	;# 
   723  0292                     	;# 
   724  0293                     	;# 
   725  0293                     	;# 
   726  0298                     	;# 
   727  0298                     	;# 
   728  0299                     	;# 
   729  029A                     	;# 
   730  029A                     	;# 
   731  029E                     	;# 
   732  030C                     	;# 
   733  030D                     	;# 
   734  030E                     	;# 
   735  038C                     	;# 
   736  038D                     	;# 
   737  038E                     	;# 
   738  0391                     	;# 
   739  0392                     	;# 
   740  0393                     	;# 
   741  0394                     	;# 
   742  0395                     	;# 
   743  0396                     	;# 
   744  0397                     	;# 
   745  0398                     	;# 
   746  0399                     	;# 
   747  0415                     	;# 
   748  0416                     	;# 
   749  0417                     	;# 
   750  041C                     	;# 
   751  041D                     	;# 
   752  041E                     	;# 
   753  0511                     	;# 
   754  0515                     	;# 
   755  0617                     	;# 
   756  0618                     	;# 
   757  0619                     	;# 
   758  0619                     	;# 
   759  061A                     	;# 
   760  061B                     	;# 
   761  061C                     	;# 
   762  061C                     	;# 
   763  0691                     	;# 
   764  0692                     	;# 
   765  0693                     	;# 
   766  0694                     	;# 
   767  0695                     	;# 
   768  0696                     	;# 
   769  0697                     	;# 
   770  0698                     	;# 
   771  0699                     	;# 
   772  069A                     	;# 
   773  069B                     	;# 
   774  069C                     	;# 
   775  069D                     	;# 
   776  069E                     	;# 
   777  069F                     	;# 
   778  0E0F                     	;# 
   779  0E10                     	;# 
   780  0E11                     	;# 
   781  0E12                     	;# 
   782  0E13                     	;# 
   783  0E14                     	;# 
   784  0E15                     	;# 
   785  0E17                     	;# 
   786  0E20                     	;# 
   787  0E21                     	;# 
   788  0E22                     	;# 
   789  0E24                     	;# 
   790  0E25                     	;# 
   791  0E28                     	;# 
   792  0E29                     	;# 
   793  0E2A                     	;# 
   794  0E2B                     	;# 
   795  0E90                     	;# 
   796  0E91                     	;# 
   797  0E92                     	;# 
   798  0E94                     	;# 
   799  0E95                     	;# 
   800  0E9C                     	;# 
   801  0E9D                     	;# 
   802  0E9E                     	;# 
   803  0E9F                     	;# 
   804  0EA0                     	;# 
   805  0EA1                     	;# 
   806  0EA2                     	;# 
   807  0EA3                     	;# 
   808  0EA4                     	;# 
   809  0EA5                     	;# 
   810  0EA6                     	;# 
   811  0EA7                     	;# 
   812  0F0F                     	;# 
   813  0F10                     	;# 
   814  0F11                     	;# 
   815  0F12                     	;# 
   816  0F13                     	;# 
   817  0F14                     	;# 
   818  0F15                     	;# 
   819  0F16                     	;# 
   820  0F17                     	;# 
   821  0F18                     	;# 
   822  0F19                     	;# 
   823  0F1A                     	;# 
   824  0F1B                     	;# 
   825  0F1C                     	;# 
   826  0F1D                     	;# 
   827  0F1E                     	;# 
   828  0F1F                     	;# 
   829  0F20                     	;# 
   830  0F21                     	;# 
   831  0F22                     	;# 
   832  0F23                     	;# 
   833  0F24                     	;# 
   834  0F25                     	;# 
   835  0F26                     	;# 
   836  0F27                     	;# 
   837  0F28                     	;# 
   838  0F29                     	;# 
   839  0F2A                     	;# 
   840  0F2B                     	;# 
   841  0F2C                     	;# 
   842  0F2D                     	;# 
   843  0FE4                     	;# 
   844  0FE5                     	;# 
   845  0FE6                     	;# 
   846  0FE7                     	;# 
   847  0FE8                     	;# 
   848  0FE9                     	;# 
   849  0FEA                     	;# 
   850  0FEB                     	;# 
   851  0FED                     	;# 
   852  0FEE                     	;# 
   853  0FEF                     	;# 
   854  0000                     	;# 
   855  0001                     	;# 
   856  0002                     	;# 
   857  0003                     	;# 
   858  0004                     	;# 
   859  0005                     	;# 
   860  0006                     	;# 
   861  0007                     	;# 
   862  0008                     	;# 
   863  0009                     	;# 
   864  000A                     	;# 
   865  000B                     	;# 
   866  000C                     	;# 
   867  000D                     	;# 
   868  000E                     	;# 
   869  0011                     	;# 
   870  0012                     	;# 
   871  0013                     	;# 
   872  0015                     	;# 
   873  0016                     	;# 
   874  0016                     	;# 
   875  0017                     	;# 
   876  0018                     	;# 
   877  0019                     	;# 
   878  001A                     	;# 
   879  001B                     	;# 
   880  001C                     	;# 
   881  008C                     	;# 
   882  008D                     	;# 
   883  008E                     	;# 
   884  0091                     	;# 
   885  0092                     	;# 
   886  0093                     	;# 
   887  0095                     	;# 
   888  0096                     	;# 
   889  0097                     	;# 
   890  0098                     	;# 
   891  0099                     	;# 
   892  009A                     	;# 
   893  009B                     	;# 
   894  009B                     	;# 
   895  009C                     	;# 
   896  009D                     	;# 
   897  009E                     	;# 
   898  009F                     	;# 
   899  010C                     	;# 
   900  010D                     	;# 
   901  010E                     	;# 
   902  0111                     	;# 
   903  0112                     	;# 
   904  0113                     	;# 
   905  0114                     	;# 
   906  0115                     	;# 
   907  0116                     	;# 
   908  0117                     	;# 
   909  0118                     	;# 
   910  0119                     	;# 
   911  011C                     	;# 
   912  018C                     	;# 
   913  018D                     	;# 
   914  018E                     	;# 
   915  0191                     	;# 
   916  0191                     	;# 
   917  0192                     	;# 
   918  0193                     	;# 
   919  0193                     	;# 
   920  0194                     	;# 
   921  0195                     	;# 
   922  0196                     	;# 
   923  0199                     	;# 
   924  0199                     	;# 
   925  0199                     	;# 
   926  019A                     	;# 
   927  019A                     	;# 
   928  019A                     	;# 
   929  019B                     	;# 
   930  019B                     	;# 
   931  019B                     	;# 
   932  019B                     	;# 
   933  019B                     	;# 
   934  019C                     	;# 
   935  019C                     	;# 
   936  019C                     	;# 
   937  019D                     	;# 
   938  019D                     	;# 
   939  019D                     	;# 
   940  019E                     	;# 
   941  019E                     	;# 
   942  019E                     	;# 
   943  019F                     	;# 
   944  019F                     	;# 
   945  019F                     	;# 
   946  019F                     	;# 
   947  019F                     	;# 
   948  020C                     	;# 
   949  020D                     	;# 
   950  020E                     	;# 
   951  0211                     	;# 
   952  0211                     	;# 
   953  0212                     	;# 
   954  0212                     	;# 
   955  0213                     	;# 
   956  0213                     	;# 
   957  0214                     	;# 
   958  0214                     	;# 
   959  0215                     	;# 
   960  0215                     	;# 
   961  0215                     	;# 
   962  0215                     	;# 
   963  0216                     	;# 
   964  0216                     	;# 
   965  0217                     	;# 
   966  0217                     	;# 
   967  028C                     	;# 
   968  028D                     	;# 
   969  028E                     	;# 
   970  0291                     	;# 
   971  0291                     	;# 
   972  0292                     	;# 
   973  0293                     	;# 
   974  0293                     	;# 
   975  0298                     	;# 
   976  0298                     	;# 
   977  0299                     	;# 
   978  029A                     	;# 
   979  029A                     	;# 
   980  029E                     	;# 
   981  030C                     	;# 
   982  030D                     	;# 
   983  030E                     	;# 
   984  038C                     	;# 
   985  038D                     	;# 
   986  038E                     	;# 
   987  0391                     	;# 
   988  0392                     	;# 
   989  0393                     	;# 
   990  0394                     	;# 
   991  0395                     	;# 
   992  0396                     	;# 
   993  0397                     	;# 
   994  0398                     	;# 
   995  0399                     	;# 
   996  0415                     	;# 
   997  0416                     	;# 
   998  0417                     	;# 
   999  041C                     	;# 
  1000  041D                     	;# 
  1001  041E                     	;# 
  1002  0511                     	;# 
  1003  0515                     	;# 
  1004  0617                     	;# 
  1005  0618                     	;# 
  1006  0619                     	;# 
  1007  0619                     	;# 
  1008  061A                     	;# 
  1009  061B                     	;# 
  1010  061C                     	;# 
  1011  061C                     	;# 
  1012  0691                     	;# 
  1013  0692                     	;# 
  1014  0693                     	;# 
  1015  0694                     	;# 
  1016  0695                     	;# 
  1017  0696                     	;# 
  1018  0697                     	;# 
  1019  0698                     	;# 
  1020  0699                     	;# 
  1021  069A                     	;# 
  1022  069B                     	;# 
  1023  069C                     	;# 
  1024  069D                     	;# 
  1025  069E                     	;# 
  1026  069F                     	;# 
  1027  0E0F                     	;# 
  1028  0E10                     	;# 
  1029  0E11                     	;# 
  1030  0E12                     	;# 
  1031  0E13                     	;# 
  1032  0E14                     	;# 
  1033  0E15                     	;# 
  1034  0E17                     	;# 
  1035  0E20                     	;# 
  1036  0E21                     	;# 
  1037  0E22                     	;# 
  1038  0E24                     	;# 
  1039  0E25                     	;# 
  1040  0E28                     	;# 
  1041  0E29                     	;# 
  1042  0E2A                     	;# 
  1043  0E2B                     	;# 
  1044  0E90                     	;# 
  1045  0E91                     	;# 
  1046  0E92                     	;# 
  1047  0E94                     	;# 
  1048  0E95                     	;# 
  1049  0E9C                     	;# 
  1050  0E9D                     	;# 
  1051  0E9E                     	;# 
  1052  0E9F                     	;# 
  1053  0EA0                     	;# 
  1054  0EA1                     	;# 
  1055  0EA2                     	;# 
  1056  0EA3                     	;# 
  1057  0EA4                     	;# 
  1058  0EA5                     	;# 
  1059  0EA6                     	;# 
  1060  0EA7                     	;# 
  1061  0F0F                     	;# 
  1062  0F10                     	;# 
  1063  0F11                     	;# 
  1064  0F12                     	;# 
  1065  0F13                     	;# 
  1066  0F14                     	;# 
  1067  0F15                     	;# 
  1068  0F16                     	;# 
  1069  0F17                     	;# 
  1070  0F18                     	;# 
  1071  0F19                     	;# 
  1072  0F1A                     	;# 
  1073  0F1B                     	;# 
  1074  0F1C                     	;# 
  1075  0F1D                     	;# 
  1076  0F1E                     	;# 
  1077  0F1F                     	;# 
  1078  0F20                     	;# 
  1079  0F21                     	;# 
  1080  0F22                     	;# 
  1081  0F23                     	;# 
  1082  0F24                     	;# 
  1083  0F25                     	;# 
  1084  0F26                     	;# 
  1085  0F27                     	;# 
  1086  0F28                     	;# 
  1087  0F29                     	;# 
  1088  0F2A                     	;# 
  1089  0F2B                     	;# 
  1090  0F2C                     	;# 
  1091  0F2D                     	;# 
  1092  0FE4                     	;# 
  1093  0FE5                     	;# 
  1094  0FE6                     	;# 
  1095  0FE7                     	;# 
  1096  0FE8                     	;# 
  1097  0FE9                     	;# 
  1098  0FEA                     	;# 
  1099  0FEB                     	;# 
  1100  0FED                     	;# 
  1101  0FEE                     	;# 
  1102  0FEF                     	;# 
  1103  0000                     	;# 
  1104  0001                     	;# 
  1105  0002                     	;# 
  1106  0003                     	;# 
  1107  0004                     	;# 
  1108  0005                     	;# 
  1109  0006                     	;# 
  1110  0007                     	;# 
  1111  0008                     	;# 
  1112  0009                     	;# 
  1113  000A                     	;# 
  1114  000B                     	;# 
  1115  000C                     	;# 
  1116  000D                     	;# 
  1117  000E                     	;# 
  1118  0011                     	;# 
  1119  0012                     	;# 
  1120  0013                     	;# 
  1121  0015                     	;# 
  1122  0016                     	;# 
  1123  0016                     	;# 
  1124  0017                     	;# 
  1125  0018                     	;# 
  1126  0019                     	;# 
  1127  001A                     	;# 
  1128  001B                     	;# 
  1129  001C                     	;# 
  1130  008C                     	;# 
  1131  008D                     	;# 
  1132  008E                     	;# 
  1133  0091                     	;# 
  1134  0092                     	;# 
  1135  0093                     	;# 
  1136  0095                     	;# 
  1137  0096                     	;# 
  1138  0097                     	;# 
  1139  0098                     	;# 
  1140  0099                     	;# 
  1141  009A                     	;# 
  1142  009B                     	;# 
  1143  009B                     	;# 
  1144  009C                     	;# 
  1145  009D                     	;# 
  1146  009E                     	;# 
  1147  009F                     	;# 
  1148  010C                     	;# 
  1149  010D                     	;# 
  1150  010E                     	;# 
  1151  0111                     	;# 
  1152  0112                     	;# 
  1153  0113                     	;# 
  1154  0114                     	;# 
  1155  0115                     	;# 
  1156  0116                     	;# 
  1157  0117                     	;# 
  1158  0118                     	;# 
  1159  0119                     	;# 
  1160  011C                     	;# 
  1161  018C                     	;# 
  1162  018D                     	;# 
  1163  018E                     	;# 
  1164  0191                     	;# 
  1165  0191                     	;# 
  1166  0192                     	;# 
  1167  0193                     	;# 
  1168  0193                     	;# 
  1169  0194                     	;# 
  1170  0195                     	;# 
  1171  0196                     	;# 
  1172  0199                     	;# 
  1173  0199                     	;# 
  1174  0199                     	;# 
  1175  019A                     	;# 
  1176  019A                     	;# 
  1177  019A                     	;# 
  1178  019B                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019C                     	;# 
  1184  019C                     	;# 
  1185  019C                     	;# 
  1186  019D                     	;# 
  1187  019D                     	;# 
  1188  019D                     	;# 
  1189  019E                     	;# 
  1190  019E                     	;# 
  1191  019E                     	;# 
  1192  019F                     	;# 
  1193  019F                     	;# 
  1194  019F                     	;# 
  1195  019F                     	;# 
  1196  019F                     	;# 
  1197  020C                     	;# 
  1198  020D                     	;# 
  1199  020E                     	;# 
  1200  0211                     	;# 
  1201  0211                     	;# 
  1202  0212                     	;# 
  1203  0212                     	;# 
  1204  0213                     	;# 
  1205  0213                     	;# 
  1206  0214                     	;# 
  1207  0214                     	;# 
  1208  0215                     	;# 
  1209  0215                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0216                     	;# 
  1213  0216                     	;# 
  1214  0217                     	;# 
  1215  0217                     	;# 
  1216  028C                     	;# 
  1217  028D                     	;# 
  1218  028E                     	;# 
  1219  0291                     	;# 
  1220  0291                     	;# 
  1221  0292                     	;# 
  1222  0293                     	;# 
  1223  0293                     	;# 
  1224  0298                     	;# 
  1225  0298                     	;# 
  1226  0299                     	;# 
  1227  029A                     	;# 
  1228  029A                     	;# 
  1229  029E                     	;# 
  1230  030C                     	;# 
  1231  030D                     	;# 
  1232  030E                     	;# 
  1233  038C                     	;# 
  1234  038D                     	;# 
  1235  038E                     	;# 
  1236  0391                     	;# 
  1237  0392                     	;# 
  1238  0393                     	;# 
  1239  0394                     	;# 
  1240  0395                     	;# 
  1241  0396                     	;# 
  1242  0397                     	;# 
  1243  0398                     	;# 
  1244  0399                     	;# 
  1245  0415                     	;# 
  1246  0416                     	;# 
  1247  0417                     	;# 
  1248  041C                     	;# 
  1249  041D                     	;# 
  1250  041E                     	;# 
  1251  0511                     	;# 
  1252  0515                     	;# 
  1253  0617                     	;# 
  1254  0618                     	;# 
  1255  0619                     	;# 
  1256  0619                     	;# 
  1257  061A                     	;# 
  1258  061B                     	;# 
  1259  061C                     	;# 
  1260  061C                     	;# 
  1261  0691                     	;# 
  1262  0692                     	;# 
  1263  0693                     	;# 
  1264  0694                     	;# 
  1265  0695                     	;# 
  1266  0696                     	;# 
  1267  0697                     	;# 
  1268  0698                     	;# 
  1269  0699                     	;# 
  1270  069A                     	;# 
  1271  069B                     	;# 
  1272  069C                     	;# 
  1273  069D                     	;# 
  1274  069E                     	;# 
  1275  069F                     	;# 
  1276  0E0F                     	;# 
  1277  0E10                     	;# 
  1278  0E11                     	;# 
  1279  0E12                     	;# 
  1280  0E13                     	;# 
  1281  0E14                     	;# 
  1282  0E15                     	;# 
  1283  0E17                     	;# 
  1284  0E20                     	;# 
  1285  0E21                     	;# 
  1286  0E22                     	;# 
  1287  0E24                     	;# 
  1288  0E25                     	;# 
  1289  0E28                     	;# 
  1290  0E29                     	;# 
  1291  0E2A                     	;# 
  1292  0E2B                     	;# 
  1293  0E90                     	;# 
  1294  0E91                     	;# 
  1295  0E92                     	;# 
  1296  0E94                     	;# 
  1297  0E95                     	;# 
  1298  0E9C                     	;# 
  1299  0E9D                     	;# 
  1300  0E9E                     	;# 
  1301  0E9F                     	;# 
  1302  0EA0                     	;# 
  1303  0EA1                     	;# 
  1304  0EA2                     	;# 
  1305  0EA3                     	;# 
  1306  0EA4                     	;# 
  1307  0EA5                     	;# 
  1308  0EA6                     	;# 
  1309  0EA7                     	;# 
  1310  0F0F                     	;# 
  1311  0F10                     	;# 
  1312  0F11                     	;# 
  1313  0F12                     	;# 
  1314  0F13                     	;# 
  1315  0F14                     	;# 
  1316  0F15                     	;# 
  1317  0F16                     	;# 
  1318  0F17                     	;# 
  1319  0F18                     	;# 
  1320  0F19                     	;# 
  1321  0F1A                     	;# 
  1322  0F1B                     	;# 
  1323  0F1C                     	;# 
  1324  0F1D                     	;# 
  1325  0F1E                     	;# 
  1326  0F1F                     	;# 
  1327  0F20                     	;# 
  1328  0F21                     	;# 
  1329  0F22                     	;# 
  1330  0F23                     	;# 
  1331  0F24                     	;# 
  1332  0F25                     	;# 
  1333  0F26                     	;# 
  1334  0F27                     	;# 
  1335  0F28                     	;# 
  1336  0F29                     	;# 
  1337  0F2A                     	;# 
  1338  0F2B                     	;# 
  1339  0F2C                     	;# 
  1340  0F2D                     	;# 
  1341  0FE4                     	;# 
  1342  0FE5                     	;# 
  1343  0FE6                     	;# 
  1344  0FE7                     	;# 
  1345  0FE8                     	;# 
  1346  0FE9                     	;# 
  1347  0FEA                     	;# 
  1348  0FEB                     	;# 
  1349  0FED                     	;# 
  1350  0FEE                     	;# 
  1351  0FEF                     	;# 
  1352  0000                     	;# 
  1353  0001                     	;# 
  1354  0002                     	;# 
  1355  0003                     	;# 
  1356  0004                     	;# 
  1357  0005                     	;# 
  1358  0006                     	;# 
  1359  0007                     	;# 
  1360  0008                     	;# 
  1361  0009                     	;# 
  1362  000A                     	;# 
  1363  000B                     	;# 
  1364  000C                     	;# 
  1365  000D                     	;# 
  1366  000E                     	;# 
  1367  0011                     	;# 
  1368  0012                     	;# 
  1369  0013                     	;# 
  1370  0015                     	;# 
  1371  0016                     	;# 
  1372  0016                     	;# 
  1373  0017                     	;# 
  1374  0018                     	;# 
  1375  0019                     	;# 
  1376  001A                     	;# 
  1377  001B                     	;# 
  1378  001C                     	;# 
  1379  008C                     	;# 
  1380  008D                     	;# 
  1381  008E                     	;# 
  1382  0091                     	;# 
  1383  0092                     	;# 
  1384  0093                     	;# 
  1385  0095                     	;# 
  1386  0096                     	;# 
  1387  0097                     	;# 
  1388  0098                     	;# 
  1389  0099                     	;# 
  1390  009A                     	;# 
  1391  009B                     	;# 
  1392  009B                     	;# 
  1393  009C                     	;# 
  1394  009D                     	;# 
  1395  009E                     	;# 
  1396  009F                     	;# 
  1397  010C                     	;# 
  1398  010D                     	;# 
  1399  010E                     	;# 
  1400  0111                     	;# 
  1401  0112                     	;# 
  1402  0113                     	;# 
  1403  0114                     	;# 
  1404  0115                     	;# 
  1405  0116                     	;# 
  1406  0117                     	;# 
  1407  0118                     	;# 
  1408  0119                     	;# 
  1409  011C                     	;# 
  1410  018C                     	;# 
  1411  018D                     	;# 
  1412  018E                     	;# 
  1413  0191                     	;# 
  1414  0191                     	;# 
  1415  0192                     	;# 
  1416  0193                     	;# 
  1417  0193                     	;# 
  1418  0194                     	;# 
  1419  0195                     	;# 
  1420  0196                     	;# 
  1421  0199                     	;# 
  1422  0199                     	;# 
  1423  0199                     	;# 
  1424  019A                     	;# 
  1425  019A                     	;# 
  1426  019A                     	;# 
  1427  019B                     	;# 
  1428  019B                     	;# 
  1429  019B                     	;# 
  1430  019B                     	;# 
  1431  019B                     	;# 
  1432  019C                     	;# 
  1433  019C                     	;# 
  1434  019C                     	;# 
  1435  019D                     	;# 
  1436  019D                     	;# 
  1437  019D                     	;# 
  1438  019E                     	;# 
  1439  019E                     	;# 
  1440  019E                     	;# 
  1441  019F                     	;# 
  1442  019F                     	;# 
  1443  019F                     	;# 
  1444  019F                     	;# 
  1445  019F                     	;# 
  1446  020C                     	;# 
  1447  020D                     	;# 
  1448  020E                     	;# 
  1449  0211                     	;# 
  1450  0211                     	;# 
  1451  0212                     	;# 
  1452  0212                     	;# 
  1453  0213                     	;# 
  1454  0213                     	;# 
  1455  0214                     	;# 
  1456  0214                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  028C                     	;# 
  1466  028D                     	;# 
  1467  028E                     	;# 
  1468  0291                     	;# 
  1469  0291                     	;# 
  1470  0292                     	;# 
  1471  0293                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  029A                     	;# 
  1478  029E                     	;# 
  1479  030C                     	;# 
  1480  030D                     	;# 
  1481  030E                     	;# 
  1482  038C                     	;# 
  1483  038D                     	;# 
  1484  038E                     	;# 
  1485  0391                     	;# 
  1486  0392                     	;# 
  1487  0393                     	;# 
  1488  0394                     	;# 
  1489  0395                     	;# 
  1490  0396                     	;# 
  1491  0397                     	;# 
  1492  0398                     	;# 
  1493  0399                     	;# 
  1494  0415                     	;# 
  1495  0416                     	;# 
  1496  0417                     	;# 
  1497  041C                     	;# 
  1498  041D                     	;# 
  1499  041E                     	;# 
  1500  0511                     	;# 
  1501  0515                     	;# 
  1502  0617                     	;# 
  1503  0618                     	;# 
  1504  0619                     	;# 
  1505  0619                     	;# 
  1506  061A                     	;# 
  1507  061B                     	;# 
  1508  061C                     	;# 
  1509  061C                     	;# 
  1510  0691                     	;# 
  1511  0692                     	;# 
  1512  0693                     	;# 
  1513  0694                     	;# 
  1514  0695                     	;# 
  1515  0696                     	;# 
  1516  0697                     	;# 
  1517  0698                     	;# 
  1518  0699                     	;# 
  1519  069A                     	;# 
  1520  069B                     	;# 
  1521  069C                     	;# 
  1522  069D                     	;# 
  1523  069E                     	;# 
  1524  069F                     	;# 
  1525  0E0F                     	;# 
  1526  0E10                     	;# 
  1527  0E11                     	;# 
  1528  0E12                     	;# 
  1529  0E13                     	;# 
  1530  0E14                     	;# 
  1531  0E15                     	;# 
  1532  0E17                     	;# 
  1533  0E20                     	;# 
  1534  0E21                     	;# 
  1535  0E22                     	;# 
  1536  0E24                     	;# 
  1537  0E25                     	;# 
  1538  0E28                     	;# 
  1539  0E29                     	;# 
  1540  0E2A                     	;# 
  1541  0E2B                     	;# 
  1542  0E90                     	;# 
  1543  0E91                     	;# 
  1544  0E92                     	;# 
  1545  0E94                     	;# 
  1546  0E95                     	;# 
  1547  0E9C                     	;# 
  1548  0E9D                     	;# 
  1549  0E9E                     	;# 
  1550  0E9F                     	;# 
  1551  0EA0                     	;# 
  1552  0EA1                     	;# 
  1553  0EA2                     	;# 
  1554  0EA3                     	;# 
  1555  0EA4                     	;# 
  1556  0EA5                     	;# 
  1557  0EA6                     	;# 
  1558  0EA7                     	;# 
  1559  0F0F                     	;# 
  1560  0F10                     	;# 
  1561  0F11                     	;# 
  1562  0F12                     	;# 
  1563  0F13                     	;# 
  1564  0F14                     	;# 
  1565  0F15                     	;# 
  1566  0F16                     	;# 
  1567  0F17                     	;# 
  1568  0F18                     	;# 
  1569  0F19                     	;# 
  1570  0F1A                     	;# 
  1571  0F1B                     	;# 
  1572  0F1C                     	;# 
  1573  0F1D                     	;# 
  1574  0F1E                     	;# 
  1575  0F1F                     	;# 
  1576  0F20                     	;# 
  1577  0F21                     	;# 
  1578  0F22                     	;# 
  1579  0F23                     	;# 
  1580  0F24                     	;# 
  1581  0F25                     	;# 
  1582  0F26                     	;# 
  1583  0F27                     	;# 
  1584  0F28                     	;# 
  1585  0F29                     	;# 
  1586  0F2A                     	;# 
  1587  0F2B                     	;# 
  1588  0F2C                     	;# 
  1589  0F2D                     	;# 
  1590  0FE4                     	;# 
  1591  0FE5                     	;# 
  1592  0FE6                     	;# 
  1593  0FE7                     	;# 
  1594  0FE8                     	;# 
  1595  0FE9                     	;# 
  1596  0FEA                     	;# 
  1597  0FEB                     	;# 
  1598  0FED                     	;# 
  1599  0FEE                     	;# 
  1600  0FEF                     	;# 
  1601  0000                     	;# 
  1602  0001                     	;# 
  1603  0002                     	;# 
  1604  0003                     	;# 
  1605  0004                     	;# 
  1606  0005                     	;# 
  1607  0006                     	;# 
  1608  0007                     	;# 
  1609  0008                     	;# 
  1610  0009                     	;# 
  1611  000A                     	;# 
  1612  000B                     	;# 
  1613  000C                     	;# 
  1614  000D                     	;# 
  1615  000E                     	;# 
  1616  0011                     	;# 
  1617  0012                     	;# 
  1618  0013                     	;# 
  1619  0015                     	;# 
  1620  0016                     	;# 
  1621  0016                     	;# 
  1622  0017                     	;# 
  1623  0018                     	;# 
  1624  0019                     	;# 
  1625  001A                     	;# 
  1626  001B                     	;# 
  1627  001C                     	;# 
  1628  008C                     	;# 
  1629  008D                     	;# 
  1630  008E                     	;# 
  1631  0091                     	;# 
  1632  0092                     	;# 
  1633  0093                     	;# 
  1634  0095                     	;# 
  1635  0096                     	;# 
  1636  0097                     	;# 
  1637  0098                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  009F                     	;# 
  1646  010C                     	;# 
  1647  010D                     	;# 
  1648  010E                     	;# 
  1649  0111                     	;# 
  1650  0112                     	;# 
  1651  0113                     	;# 
  1652  0114                     	;# 
  1653  0115                     	;# 
  1654  0116                     	;# 
  1655  0117                     	;# 
  1656  0118                     	;# 
  1657  0119                     	;# 
  1658  011C                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0199                     	;# 
  1671  0199                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019A                     	;# 
  1675  019A                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019C                     	;# 
  1682  019C                     	;# 
  1683  019C                     	;# 
  1684  019D                     	;# 
  1685  019D                     	;# 
  1686  019D                     	;# 
  1687  019E                     	;# 
  1688  019E                     	;# 
  1689  019E                     	;# 
  1690  019F                     	;# 
  1691  019F                     	;# 
  1692  019F                     	;# 
  1693  019F                     	;# 
  1694  019F                     	;# 
  1695  020C                     	;# 
  1696  020D                     	;# 
  1697  020E                     	;# 
  1698  0211                     	;# 
  1699  0211                     	;# 
  1700  0212                     	;# 
  1701  0212                     	;# 
  1702  0213                     	;# 
  1703  0213                     	;# 
  1704  0214                     	;# 
  1705  0214                     	;# 
  1706  0215                     	;# 
  1707  0215                     	;# 
  1708  0215                     	;# 
  1709  0215                     	;# 
  1710  0216                     	;# 
  1711  0216                     	;# 
  1712  0217                     	;# 
  1713  0217                     	;# 
  1714  028C                     	;# 
  1715  028D                     	;# 
  1716  028E                     	;# 
  1717  0291                     	;# 
  1718  0291                     	;# 
  1719  0292                     	;# 
  1720  0293                     	;# 
  1721  0293                     	;# 
  1722  0298                     	;# 
  1723  0298                     	;# 
  1724  0299                     	;# 
  1725  029A                     	;# 
  1726  029A                     	;# 
  1727  029E                     	;# 
  1728  030C                     	;# 
  1729  030D                     	;# 
  1730  030E                     	;# 
  1731  038C                     	;# 
  1732  038D                     	;# 
  1733  038E                     	;# 
  1734  0391                     	;# 
  1735  0392                     	;# 
  1736  0393                     	;# 
  1737  0394                     	;# 
  1738  0395                     	;# 
  1739  0396                     	;# 
  1740  0397                     	;# 
  1741  0398                     	;# 
  1742  0399                     	;# 
  1743  0415                     	;# 
  1744  0416                     	;# 
  1745  0417                     	;# 
  1746  041C                     	;# 
  1747  041D                     	;# 
  1748  041E                     	;# 
  1749  0511                     	;# 
  1750  0515                     	;# 
  1751  0617                     	;# 
  1752  0618                     	;# 
  1753  0619                     	;# 
  1754  0619                     	;# 
  1755  061A                     	;# 
  1756  061B                     	;# 
  1757  061C                     	;# 
  1758  061C                     	;# 
  1759  0691                     	;# 
  1760  0692                     	;# 
  1761  0693                     	;# 
  1762  0694                     	;# 
  1763  0695                     	;# 
  1764  0696                     	;# 
  1765  0697                     	;# 
  1766  0698                     	;# 
  1767  0699                     	;# 
  1768  069A                     	;# 
  1769  069B                     	;# 
  1770  069C                     	;# 
  1771  069D                     	;# 
  1772  069E                     	;# 
  1773  069F                     	;# 
  1774  0E0F                     	;# 
  1775  0E10                     	;# 
  1776  0E11                     	;# 
  1777  0E12                     	;# 
  1778  0E13                     	;# 
  1779  0E14                     	;# 
  1780  0E15                     	;# 
  1781  0E17                     	;# 
  1782  0E20                     	;# 
  1783  0E21                     	;# 
  1784  0E22                     	;# 
  1785  0E24                     	;# 
  1786  0E25                     	;# 
  1787  0E28                     	;# 
  1788  0E29                     	;# 
  1789  0E2A                     	;# 
  1790  0E2B                     	;# 
  1791  0E90                     	;# 
  1792  0E91                     	;# 
  1793  0E92                     	;# 
  1794  0E94                     	;# 
  1795  0E95                     	;# 
  1796  0E9C                     	;# 
  1797  0E9D                     	;# 
  1798  0E9E                     	;# 
  1799  0E9F                     	;# 
  1800  0EA0                     	;# 
  1801  0EA1                     	;# 
  1802  0EA2                     	;# 
  1803  0EA3                     	;# 
  1804  0EA4                     	;# 
  1805  0EA5                     	;# 
  1806  0EA6                     	;# 
  1807  0EA7                     	;# 
  1808  0F0F                     	;# 
  1809  0F10                     	;# 
  1810  0F11                     	;# 
  1811  0F12                     	;# 
  1812  0F13                     	;# 
  1813  0F14                     	;# 
  1814  0F15                     	;# 
  1815  0F16                     	;# 
  1816  0F17                     	;# 
  1817  0F18                     	;# 
  1818  0F19                     	;# 
  1819  0F1A                     	;# 
  1820  0F1B                     	;# 
  1821  0F1C                     	;# 
  1822  0F1D                     	;# 
  1823  0F1E                     	;# 
  1824  0F1F                     	;# 
  1825  0F20                     	;# 
  1826  0F21                     	;# 
  1827  0F22                     	;# 
  1828  0F23                     	;# 
  1829  0F24                     	;# 
  1830  0F25                     	;# 
  1831  0F26                     	;# 
  1832  0F27                     	;# 
  1833  0F28                     	;# 
  1834  0F29                     	;# 
  1835  0F2A                     	;# 
  1836  0F2B                     	;# 
  1837  0F2C                     	;# 
  1838  0F2D                     	;# 
  1839  0FE4                     	;# 
  1840  0FE5                     	;# 
  1841  0FE6                     	;# 
  1842  0FE7                     	;# 
  1843  0FE8                     	;# 
  1844  0FE9                     	;# 
  1845  0FEA                     	;# 
  1846  0FEB                     	;# 
  1847  0FED                     	;# 
  1848  0FEE                     	;# 
  1849  0FEF                     	;# 
  1850  0000                     	;# 
  1851  0001                     	;# 
  1852  0002                     	;# 
  1853  0003                     	;# 
  1854  0004                     	;# 
  1855  0005                     	;# 
  1856  0006                     	;# 
  1857  0007                     	;# 
  1858  0008                     	;# 
  1859  0009                     	;# 
  1860  000A                     	;# 
  1861  000B                     	;# 
  1862  000C                     	;# 
  1863  000D                     	;# 
  1864  000E                     	;# 
  1865  0011                     	;# 
  1866  0012                     	;# 
  1867  0013                     	;# 
  1868  0015                     	;# 
  1869  0016                     	;# 
  1870  0016                     	;# 
  1871  0017                     	;# 
  1872  0018                     	;# 
  1873  0019                     	;# 
  1874  001A                     	;# 
  1875  001B                     	;# 
  1876  001C                     	;# 
  1877  008C                     	;# 
  1878  008D                     	;# 
  1879  008E                     	;# 
  1880  0091                     	;# 
  1881  0092                     	;# 
  1882  0093                     	;# 
  1883  0095                     	;# 
  1884  0096                     	;# 
  1885  0097                     	;# 
  1886  0098                     	;# 
  1887  0099                     	;# 
  1888  009A                     	;# 
  1889  009B                     	;# 
  1890  009B                     	;# 
  1891  009C                     	;# 
  1892  009D                     	;# 
  1893  009E                     	;# 
  1894  009F                     	;# 
  1895  010C                     	;# 
  1896  010D                     	;# 
  1897  010E                     	;# 
  1898  0111                     	;# 
  1899  0112                     	;# 
  1900  0113                     	;# 
  1901  0114                     	;# 
  1902  0115                     	;# 
  1903  0116                     	;# 
  1904  0117                     	;# 
  1905  0118                     	;# 
  1906  0119                     	;# 
  1907  011C                     	;# 
  1908  018C                     	;# 
  1909  018D                     	;# 
  1910  018E                     	;# 
  1911  0191                     	;# 
  1912  0191                     	;# 
  1913  0192                     	;# 
  1914  0193                     	;# 
  1915  0193                     	;# 
  1916  0194                     	;# 
  1917  0195                     	;# 
  1918  0196                     	;# 
  1919  0199                     	;# 
  1920  0199                     	;# 
  1921  0199                     	;# 
  1922  019A                     	;# 
  1923  019A                     	;# 
  1924  019A                     	;# 
  1925  019B                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019B                     	;# 
  1929  019B                     	;# 
  1930  019C                     	;# 
  1931  019C                     	;# 
  1932  019C                     	;# 
  1933  019D                     	;# 
  1934  019D                     	;# 
  1935  019D                     	;# 
  1936  019E                     	;# 
  1937  019E                     	;# 
  1938  019E                     	;# 
  1939  019F                     	;# 
  1940  019F                     	;# 
  1941  019F                     	;# 
  1942  019F                     	;# 
  1943  019F                     	;# 
  1944  020C                     	;# 
  1945  020D                     	;# 
  1946  020E                     	;# 
  1947  0211                     	;# 
  1948  0211                     	;# 
  1949  0212                     	;# 
  1950  0212                     	;# 
  1951  0213                     	;# 
  1952  0213                     	;# 
  1953  0214                     	;# 
  1954  0214                     	;# 
  1955  0215                     	;# 
  1956  0215                     	;# 
  1957  0215                     	;# 
  1958  0215                     	;# 
  1959  0216                     	;# 
  1960  0216                     	;# 
  1961  0217                     	;# 
  1962  0217                     	;# 
  1963  028C                     	;# 
  1964  028D                     	;# 
  1965  028E                     	;# 
  1966  0291                     	;# 
  1967  0291                     	;# 
  1968  0292                     	;# 
  1969  0293                     	;# 
  1970  0293                     	;# 
  1971  0298                     	;# 
  1972  0298                     	;# 
  1973  0299                     	;# 
  1974  029A                     	;# 
  1975  029A                     	;# 
  1976  029E                     	;# 
  1977  030C                     	;# 
  1978  030D                     	;# 
  1979  030E                     	;# 
  1980  038C                     	;# 
  1981  038D                     	;# 
  1982  038E                     	;# 
  1983  0391                     	;# 
  1984  0392                     	;# 
  1985  0393                     	;# 
  1986  0394                     	;# 
  1987  0395                     	;# 
  1988  0396                     	;# 
  1989  0397                     	;# 
  1990  0398                     	;# 
  1991  0399                     	;# 
  1992  0415                     	;# 
  1993  0416                     	;# 
  1994  0417                     	;# 
  1995  041C                     	;# 
  1996  041D                     	;# 
  1997  041E                     	;# 
  1998  0511                     	;# 
  1999  0515                     	;# 
  2000  0617                     	;# 
  2001  0618                     	;# 
  2002  0619                     	;# 
  2003  0619                     	;# 
  2004  061A                     	;# 
  2005  061B                     	;# 
  2006  061C                     	;# 
  2007  061C                     	;# 
  2008  0691                     	;# 
  2009  0692                     	;# 
  2010  0693                     	;# 
  2011  0694                     	;# 
  2012  0695                     	;# 
  2013  0696                     	;# 
  2014  0697                     	;# 
  2015  0698                     	;# 
  2016  0699                     	;# 
  2017  069A                     	;# 
  2018  069B                     	;# 
  2019  069C                     	;# 
  2020  069D                     	;# 
  2021  069E                     	;# 
  2022  069F                     	;# 
  2023  0E0F                     	;# 
  2024  0E10                     	;# 
  2025  0E11                     	;# 
  2026  0E12                     	;# 
  2027  0E13                     	;# 
  2028  0E14                     	;# 
  2029  0E15                     	;# 
  2030  0E17                     	;# 
  2031  0E20                     	;# 
  2032  0E21                     	;# 
  2033  0E22                     	;# 
  2034  0E24                     	;# 
  2035  0E25                     	;# 
  2036  0E28                     	;# 
  2037  0E29                     	;# 
  2038  0E2A                     	;# 
  2039  0E2B                     	;# 
  2040  0E90                     	;# 
  2041  0E91                     	;# 
  2042  0E92                     	;# 
  2043  0E94                     	;# 
  2044  0E95                     	;# 
  2045  0E9C                     	;# 
  2046  0E9D                     	;# 
  2047  0E9E                     	;# 
  2048  0E9F                     	;# 
  2049  0EA0                     	;# 
  2050  0EA1                     	;# 
  2051  0EA2                     	;# 
  2052  0EA3                     	;# 
  2053  0EA4                     	;# 
  2054  0EA5                     	;# 
  2055  0EA6                     	;# 
  2056  0EA7                     	;# 
  2057  0F0F                     	;# 
  2058  0F10                     	;# 
  2059  0F11                     	;# 
  2060  0F12                     	;# 
  2061  0F13                     	;# 
  2062  0F14                     	;# 
  2063  0F15                     	;# 
  2064  0F16                     	;# 
  2065  0F17                     	;# 
  2066  0F18                     	;# 
  2067  0F19                     	;# 
  2068  0F1A                     	;# 
  2069  0F1B                     	;# 
  2070  0F1C                     	;# 
  2071  0F1D                     	;# 
  2072  0F1E                     	;# 
  2073  0F1F                     	;# 
  2074  0F20                     	;# 
  2075  0F21                     	;# 
  2076  0F22                     	;# 
  2077  0F23                     	;# 
  2078  0F24                     	;# 
  2079  0F25                     	;# 
  2080  0F26                     	;# 
  2081  0F27                     	;# 
  2082  0F28                     	;# 
  2083  0F29                     	;# 
  2084  0F2A                     	;# 
  2085  0F2B                     	;# 
  2086  0F2C                     	;# 
  2087  0F2D                     	;# 
  2088  0FE4                     	;# 
  2089  0FE5                     	;# 
  2090  0FE6                     	;# 
  2091  0FE7                     	;# 
  2092  0FE8                     	;# 
  2093  0FE9                     	;# 
  2094  0FEA                     	;# 
  2095  0FEB                     	;# 
  2096  0FED                     	;# 
  2097  0FEE                     	;# 
  2098  0FEF                     	;# 
  2099  0000                     	;# 
  2100  0001                     	;# 
  2101  0002                     	;# 
  2102  0003                     	;# 
  2103  0004                     	;# 
  2104  0005                     	;# 
  2105  0006                     	;# 
  2106  0007                     	;# 
  2107  0008                     	;# 
  2108  0009                     	;# 
  2109  000A                     	;# 
  2110  000B                     	;# 
  2111  000C                     	;# 
  2112  000D                     	;# 
  2113  000E                     	;# 
  2114  0011                     	;# 
  2115  0012                     	;# 
  2116  0013                     	;# 
  2117  0015                     	;# 
  2118  0016                     	;# 
  2119  0016                     	;# 
  2120  0017                     	;# 
  2121  0018                     	;# 
  2122  0019                     	;# 
  2123  001A                     	;# 
  2124  001B                     	;# 
  2125  001C                     	;# 
  2126  008C                     	;# 
  2127  008D                     	;# 
  2128  008E                     	;# 
  2129  0091                     	;# 
  2130  0092                     	;# 
  2131  0093                     	;# 
  2132  0095                     	;# 
  2133  0096                     	;# 
  2134  0097                     	;# 
  2135  0098                     	;# 
  2136  0099                     	;# 
  2137  009A                     	;# 
  2138  009B                     	;# 
  2139  009B                     	;# 
  2140  009C                     	;# 
  2141  009D                     	;# 
  2142  009E                     	;# 
  2143  009F                     	;# 
  2144  010C                     	;# 
  2145  010D                     	;# 
  2146  010E                     	;# 
  2147  0111                     	;# 
  2148  0112                     	;# 
  2149  0113                     	;# 
  2150  0114                     	;# 
  2151  0115                     	;# 
  2152  0116                     	;# 
  2153  0117                     	;# 
  2154  0118                     	;# 
  2155  0119                     	;# 
  2156  011C                     	;# 
  2157  018C                     	;# 
  2158  018D                     	;# 
  2159  018E                     	;# 
  2160  0191                     	;# 
  2161  0191                     	;# 
  2162  0192                     	;# 
  2163  0193                     	;# 
  2164  0193                     	;# 
  2165  0194                     	;# 
  2166  0195                     	;# 
  2167  0196                     	;# 
  2168  0199                     	;# 
  2169  0199                     	;# 
  2170  0199                     	;# 
  2171  019A                     	;# 
  2172  019A                     	;# 
  2173  019A                     	;# 
  2174  019B                     	;# 
  2175  019B                     	;# 
  2176  019B                     	;# 
  2177  019B                     	;# 
  2178  019B                     	;# 
  2179  019C                     	;# 
  2180  019C                     	;# 
  2181  019C                     	;# 
  2182  019D                     	;# 
  2183  019D                     	;# 
  2184  019D                     	;# 
  2185  019E                     	;# 
  2186  019E                     	;# 
  2187  019E                     	;# 
  2188  019F                     	;# 
  2189  019F                     	;# 
  2190  019F                     	;# 
  2191  019F                     	;# 
  2192  019F                     	;# 
  2193  020C                     	;# 
  2194  020D                     	;# 
  2195  020E                     	;# 
  2196  0211                     	;# 
  2197  0211                     	;# 
  2198  0212                     	;# 
  2199  0212                     	;# 
  2200  0213                     	;# 
  2201  0213                     	;# 
  2202  0214                     	;# 
  2203  0214                     	;# 
  2204  0215                     	;# 
  2205  0215                     	;# 
  2206  0215                     	;# 
  2207  0215                     	;# 
  2208  0216                     	;# 
  2209  0216                     	;# 
  2210  0217                     	;# 
  2211  0217                     	;# 
  2212  028C                     	;# 
  2213  028D                     	;# 
  2214  028E                     	;# 
  2215  0291                     	;# 
  2216  0291                     	;# 
  2217  0292                     	;# 
  2218  0293                     	;# 
  2219  0293                     	;# 
  2220  0298                     	;# 
  2221  0298                     	;# 
  2222  0299                     	;# 
  2223  029A                     	;# 
  2224  029A                     	;# 
  2225  029E                     	;# 
  2226  030C                     	;# 
  2227  030D                     	;# 
  2228  030E                     	;# 
  2229  038C                     	;# 
  2230  038D                     	;# 
  2231  038E                     	;# 
  2232  0391                     	;# 
  2233  0392                     	;# 
  2234  0393                     	;# 
  2235  0394                     	;# 
  2236  0395                     	;# 
  2237  0396                     	;# 
  2238  0397                     	;# 
  2239  0398                     	;# 
  2240  0399                     	;# 
  2241  0415                     	;# 
  2242  0416                     	;# 
  2243  0417                     	;# 
  2244  041C                     	;# 
  2245  041D                     	;# 
  2246  041E                     	;# 
  2247  0511                     	;# 
  2248  0515                     	;# 
  2249  0617                     	;# 
  2250  0618                     	;# 
  2251  0619                     	;# 
  2252  0619                     	;# 
  2253  061A                     	;# 
  2254  061B                     	;# 
  2255  061C                     	;# 
  2256  061C                     	;# 
  2257  0691                     	;# 
  2258  0692                     	;# 
  2259  0693                     	;# 
  2260  0694                     	;# 
  2261  0695                     	;# 
  2262  0696                     	;# 
  2263  0697                     	;# 
  2264  0698                     	;# 
  2265  0699                     	;# 
  2266  069A                     	;# 
  2267  069B                     	;# 
  2268  069C                     	;# 
  2269  069D                     	;# 
  2270  069E                     	;# 
  2271  069F                     	;# 
  2272  0E0F                     	;# 
  2273  0E10                     	;# 
  2274  0E11                     	;# 
  2275  0E12                     	;# 
  2276  0E13                     	;# 
  2277  0E14                     	;# 
  2278  0E15                     	;# 
  2279  0E17                     	;# 
  2280  0E20                     	;# 
  2281  0E21                     	;# 
  2282  0E22                     	;# 
  2283  0E24                     	;# 
  2284  0E25                     	;# 
  2285  0E28                     	;# 
  2286  0E29                     	;# 
  2287  0E2A                     	;# 
  2288  0E2B                     	;# 
  2289  0E90                     	;# 
  2290  0E91                     	;# 
  2291  0E92                     	;# 
  2292  0E94                     	;# 
  2293  0E95                     	;# 
  2294  0E9C                     	;# 
  2295  0E9D                     	;# 
  2296  0E9E                     	;# 
  2297  0E9F                     	;# 
  2298  0EA0                     	;# 
  2299  0EA1                     	;# 
  2300  0EA2                     	;# 
  2301  0EA3                     	;# 
  2302  0EA4                     	;# 
  2303  0EA5                     	;# 
  2304  0EA6                     	;# 
  2305  0EA7                     	;# 
  2306  0F0F                     	;# 
  2307  0F10                     	;# 
  2308  0F11                     	;# 
  2309  0F12                     	;# 
  2310  0F13                     	;# 
  2311  0F14                     	;# 
  2312  0F15                     	;# 
  2313  0F16                     	;# 
  2314  0F17                     	;# 
  2315  0F18                     	;# 
  2316  0F19                     	;# 
  2317  0F1A                     	;# 
  2318  0F1B                     	;# 
  2319  0F1C                     	;# 
  2320  0F1D                     	;# 
  2321  0F1E                     	;# 
  2322  0F1F                     	;# 
  2323  0F20                     	;# 
  2324  0F21                     	;# 
  2325  0F22                     	;# 
  2326  0F23                     	;# 
  2327  0F24                     	;# 
  2328  0F25                     	;# 
  2329  0F26                     	;# 
  2330  0F27                     	;# 
  2331  0F28                     	;# 
  2332  0F29                     	;# 
  2333  0F2A                     	;# 
  2334  0F2B                     	;# 
  2335  0F2C                     	;# 
  2336  0F2D                     	;# 
  2337  0FE4                     	;# 
  2338  0FE5                     	;# 
  2339  0FE6                     	;# 
  2340  0FE7                     	;# 
  2341  0FE8                     	;# 
  2342  0FE9                     	;# 
  2343  0FEA                     	;# 
  2344  0FEB                     	;# 
  2345  0FED                     	;# 
  2346  0FEE                     	;# 
  2347  0FEF                     	;# 
  2348  0000                     	;# 
  2349  0001                     	;# 
  2350  0002                     	;# 
  2351  0003                     	;# 
  2352  0004                     	;# 
  2353  0005                     	;# 
  2354  0006                     	;# 
  2355  0007                     	;# 
  2356  0008                     	;# 
  2357  0009                     	;# 
  2358  000A                     	;# 
  2359  000B                     	;# 
  2360  000C                     	;# 
  2361  000D                     	;# 
  2362  000E                     	;# 
  2363  0011                     	;# 
  2364  0012                     	;# 
  2365  0013                     	;# 
  2366  0015                     	;# 
  2367  0016                     	;# 
  2368  0016                     	;# 
  2369  0017                     	;# 
  2370  0018                     	;# 
  2371  0019                     	;# 
  2372  001A                     	;# 
  2373  001B                     	;# 
  2374  001C                     	;# 
  2375  008C                     	;# 
  2376  008D                     	;# 
  2377  008E                     	;# 
  2378  0091                     	;# 
  2379  0092                     	;# 
  2380  0093                     	;# 
  2381  0095                     	;# 
  2382  0096                     	;# 
  2383  0097                     	;# 
  2384  0098                     	;# 
  2385  0099                     	;# 
  2386  009A                     	;# 
  2387  009B                     	;# 
  2388  009B                     	;# 
  2389  009C                     	;# 
  2390  009D                     	;# 
  2391  009E                     	;# 
  2392  009F                     	;# 
  2393  010C                     	;# 
  2394  010D                     	;# 
  2395  010E                     	;# 
  2396  0111                     	;# 
  2397  0112                     	;# 
  2398  0113                     	;# 
  2399  0114                     	;# 
  2400  0115                     	;# 
  2401  0116                     	;# 
  2402  0117                     	;# 
  2403  0118                     	;# 
  2404  0119                     	;# 
  2405  011C                     	;# 
  2406  018C                     	;# 
  2407  018D                     	;# 
  2408  018E                     	;# 
  2409  0191                     	;# 
  2410  0191                     	;# 
  2411  0192                     	;# 
  2412  0193                     	;# 
  2413  0193                     	;# 
  2414  0194                     	;# 
  2415  0195                     	;# 
  2416  0196                     	;# 
  2417  0199                     	;# 
  2418  0199                     	;# 
  2419  0199                     	;# 
  2420  019A                     	;# 
  2421  019A                     	;# 
  2422  019A                     	;# 
  2423  019B                     	;# 
  2424  019B                     	;# 
  2425  019B                     	;# 
  2426  019B                     	;# 
  2427  019B                     	;# 
  2428  019C                     	;# 
  2429  019C                     	;# 
  2430  019C                     	;# 
  2431  019D                     	;# 
  2432  019D                     	;# 
  2433  019D                     	;# 
  2434  019E                     	;# 
  2435  019E                     	;# 
  2436  019E                     	;# 
  2437  019F                     	;# 
  2438  019F                     	;# 
  2439  019F                     	;# 
  2440  019F                     	;# 
  2441  019F                     	;# 
  2442  020C                     	;# 
  2443  020D                     	;# 
  2444  020E                     	;# 
  2445  0211                     	;# 
  2446  0211                     	;# 
  2447  0212                     	;# 
  2448  0212                     	;# 
  2449  0213                     	;# 
  2450  0213                     	;# 
  2451  0214                     	;# 
  2452  0214                     	;# 
  2453  0215                     	;# 
  2454  0215                     	;# 
  2455  0215                     	;# 
  2456  0215                     	;# 
  2457  0216                     	;# 
  2458  0216                     	;# 
  2459  0217                     	;# 
  2460  0217                     	;# 
  2461  028C                     	;# 
  2462  028D                     	;# 
  2463  028E                     	;# 
  2464  0291                     	;# 
  2465  0291                     	;# 
  2466  0292                     	;# 
  2467  0293                     	;# 
  2468  0293                     	;# 
  2469  0298                     	;# 
  2470  0298                     	;# 
  2471  0299                     	;# 
  2472  029A                     	;# 
  2473  029A                     	;# 
  2474  029E                     	;# 
  2475  030C                     	;# 
  2476  030D                     	;# 
  2477  030E                     	;# 
  2478  038C                     	;# 
  2479  038D                     	;# 
  2480  038E                     	;# 
  2481  0391                     	;# 
  2482  0392                     	;# 
  2483  0393                     	;# 
  2484  0394                     	;# 
  2485  0395                     	;# 
  2486  0396                     	;# 
  2487  0397                     	;# 
  2488  0398                     	;# 
  2489  0399                     	;# 
  2490  0415                     	;# 
  2491  0416                     	;# 
  2492  0417                     	;# 
  2493  041C                     	;# 
  2494  041D                     	;# 
  2495  041E                     	;# 
  2496  0511                     	;# 
  2497  0515                     	;# 
  2498  0617                     	;# 
  2499  0618                     	;# 
  2500  0619                     	;# 
  2501  0619                     	;# 
  2502  061A                     	;# 
  2503  061B                     	;# 
  2504  061C                     	;# 
  2505  061C                     	;# 
  2506  0691                     	;# 
  2507  0692                     	;# 
  2508  0693                     	;# 
  2509  0694                     	;# 
  2510  0695                     	;# 
  2511  0696                     	;# 
  2512  0697                     	;# 
  2513  0698                     	;# 
  2514  0699                     	;# 
  2515  069A                     	;# 
  2516  069B                     	;# 
  2517  069C                     	;# 
  2518  069D                     	;# 
  2519  069E                     	;# 
  2520  069F                     	;# 
  2521  0E0F                     	;# 
  2522  0E10                     	;# 
  2523  0E11                     	;# 
  2524  0E12                     	;# 
  2525  0E13                     	;# 
  2526  0E14                     	;# 
  2527  0E15                     	;# 
  2528  0E17                     	;# 
  2529  0E20                     	;# 
  2530  0E21                     	;# 
  2531  0E22                     	;# 
  2532  0E24                     	;# 
  2533  0E25                     	;# 
  2534  0E28                     	;# 
  2535  0E29                     	;# 
  2536  0E2A                     	;# 
  2537  0E2B                     	;# 
  2538  0E90                     	;# 
  2539  0E91                     	;# 
  2540  0E92                     	;# 
  2541  0E94                     	;# 
  2542  0E95                     	;# 
  2543  0E9C                     	;# 
  2544  0E9D                     	;# 
  2545  0E9E                     	;# 
  2546  0E9F                     	;# 
  2547  0EA0                     	;# 
  2548  0EA1                     	;# 
  2549  0EA2                     	;# 
  2550  0EA3                     	;# 
  2551  0EA4                     	;# 
  2552  0EA5                     	;# 
  2553  0EA6                     	;# 
  2554  0EA7                     	;# 
  2555  0F0F                     	;# 
  2556  0F10                     	;# 
  2557  0F11                     	;# 
  2558  0F12                     	;# 
  2559  0F13                     	;# 
  2560  0F14                     	;# 
  2561  0F15                     	;# 
  2562  0F16                     	;# 
  2563  0F17                     	;# 
  2564  0F18                     	;# 
  2565  0F19                     	;# 
  2566  0F1A                     	;# 
  2567  0F1B                     	;# 
  2568  0F1C                     	;# 
  2569  0F1D                     	;# 
  2570  0F1E                     	;# 
  2571  0F1F                     	;# 
  2572  0F20                     	;# 
  2573  0F21                     	;# 
  2574  0F22                     	;# 
  2575  0F23                     	;# 
  2576  0F24                     	;# 
  2577  0F25                     	;# 
  2578  0F26                     	;# 
  2579  0F27                     	;# 
  2580  0F28                     	;# 
  2581  0F29                     	;# 
  2582  0F2A                     	;# 
  2583  0F2B                     	;# 
  2584  0F2C                     	;# 
  2585  0F2D                     	;# 
  2586  0FE4                     	;# 
  2587  0FE5                     	;# 
  2588  0FE6                     	;# 
  2589  0FE7                     	;# 
  2590  0FE8                     	;# 
  2591  0FE9                     	;# 
  2592  0FEA                     	;# 
  2593  0FEB                     	;# 
  2594  0FED                     	;# 
  2595  0FEE                     	;# 
  2596  0FEF                     	;# 
  2597  0000                     	;# 
  2598  0001                     	;# 
  2599  0002                     	;# 
  2600  0003                     	;# 
  2601  0004                     	;# 
  2602  0005                     	;# 
  2603  0006                     	;# 
  2604  0007                     	;# 
  2605  0008                     	;# 
  2606  0009                     	;# 
  2607  000A                     	;# 
  2608  000B                     	;# 
  2609  000C                     	;# 
  2610  000D                     	;# 
  2611  000E                     	;# 
  2612  0011                     	;# 
  2613  0012                     	;# 
  2614  0013                     	;# 
  2615  0015                     	;# 
  2616  0016                     	;# 
  2617  0016                     	;# 
  2618  0017                     	;# 
  2619  0018                     	;# 
  2620  0019                     	;# 
  2621  001A                     	;# 
  2622  001B                     	;# 
  2623  001C                     	;# 
  2624  008C                     	;# 
  2625  008D                     	;# 
  2626  008E                     	;# 
  2627  0091                     	;# 
  2628  0092                     	;# 
  2629  0093                     	;# 
  2630  0095                     	;# 
  2631  0096                     	;# 
  2632  0097                     	;# 
  2633  0098                     	;# 
  2634  0099                     	;# 
  2635  009A                     	;# 
  2636  009B                     	;# 
  2637  009B                     	;# 
  2638  009C                     	;# 
  2639  009D                     	;# 
  2640  009E                     	;# 
  2641  009F                     	;# 
  2642  010C                     	;# 
  2643  010D                     	;# 
  2644  010E                     	;# 
  2645  0111                     	;# 
  2646  0112                     	;# 
  2647  0113                     	;# 
  2648  0114                     	;# 
  2649  0115                     	;# 
  2650  0116                     	;# 
  2651  0117                     	;# 
  2652  0118                     	;# 
  2653  0119                     	;# 
  2654  011C                     	;# 
  2655  018C                     	;# 
  2656  018D                     	;# 
  2657  018E                     	;# 
  2658  0191                     	;# 
  2659  0191                     	;# 
  2660  0192                     	;# 
  2661  0193                     	;# 
  2662  0193                     	;# 
  2663  0194                     	;# 
  2664  0195                     	;# 
  2665  0196                     	;# 
  2666  0199                     	;# 
  2667  0199                     	;# 
  2668  0199                     	;# 
  2669  019A                     	;# 
  2670  019A                     	;# 
  2671  019A                     	;# 
  2672  019B                     	;# 
  2673  019B                     	;# 
  2674  019B                     	;# 
  2675  019B                     	;# 
  2676  019B                     	;# 
  2677  019C                     	;# 
  2678  019C                     	;# 
  2679  019C                     	;# 
  2680  019D                     	;# 
  2681  019D                     	;# 
  2682  019D                     	;# 
  2683  019E                     	;# 
  2684  019E                     	;# 
  2685  019E                     	;# 
  2686  019F                     	;# 
  2687  019F                     	;# 
  2688  019F                     	;# 
  2689  019F                     	;# 
  2690  019F                     	;# 
  2691  020C                     	;# 
  2692  020D                     	;# 
  2693  020E                     	;# 
  2694  0211                     	;# 
  2695  0211                     	;# 
  2696  0212                     	;# 
  2697  0212                     	;# 
  2698  0213                     	;# 
  2699  0213                     	;# 
  2700  0214                     	;# 
  2701  0214                     	;# 
  2702  0215                     	;# 
  2703  0215                     	;# 
  2704  0215                     	;# 
  2705  0215                     	;# 
  2706  0216                     	;# 
  2707  0216                     	;# 
  2708  0217                     	;# 
  2709  0217                     	;# 
  2710  028C                     	;# 
  2711  028D                     	;# 
  2712  028E                     	;# 
  2713  0291                     	;# 
  2714  0291                     	;# 
  2715  0292                     	;# 
  2716  0293                     	;# 
  2717  0293                     	;# 
  2718  0298                     	;# 
  2719  0298                     	;# 
  2720  0299                     	;# 
  2721  029A                     	;# 
  2722  029A                     	;# 
  2723  029E                     	;# 
  2724  030C                     	;# 
  2725  030D                     	;# 
  2726  030E                     	;# 
  2727  038C                     	;# 
  2728  038D                     	;# 
  2729  038E                     	;# 
  2730  0391                     	;# 
  2731  0392                     	;# 
  2732  0393                     	;# 
  2733  0394                     	;# 
  2734  0395                     	;# 
  2735  0396                     	;# 
  2736  0397                     	;# 
  2737  0398                     	;# 
  2738  0399                     	;# 
  2739  0415                     	;# 
  2740  0416                     	;# 
  2741  0417                     	;# 
  2742  041C                     	;# 
  2743  041D                     	;# 
  2744  041E                     	;# 
  2745  0511                     	;# 
  2746  0515                     	;# 
  2747  0617                     	;# 
  2748  0618                     	;# 
  2749  0619                     	;# 
  2750  0619                     	;# 
  2751  061A                     	;# 
  2752  061B                     	;# 
  2753  061C                     	;# 
  2754  061C                     	;# 
  2755  0691                     	;# 
  2756  0692                     	;# 
  2757  0693                     	;# 
  2758  0694                     	;# 
  2759  0695                     	;# 
  2760  0696                     	;# 
  2761  0697                     	;# 
  2762  0698                     	;# 
  2763  0699                     	;# 
  2764  069A                     	;# 
  2765  069B                     	;# 
  2766  069C                     	;# 
  2767  069D                     	;# 
  2768  069E                     	;# 
  2769  069F                     	;# 
  2770  0E0F                     	;# 
  2771  0E10                     	;# 
  2772  0E11                     	;# 
  2773  0E12                     	;# 
  2774  0E13                     	;# 
  2775  0E14                     	;# 
  2776  0E15                     	;# 
  2777  0E17                     	;# 
  2778  0E20                     	;# 
  2779  0E21                     	;# 
  2780  0E22                     	;# 
  2781  0E24                     	;# 
  2782  0E25                     	;# 
  2783  0E28                     	;# 
  2784  0E29                     	;# 
  2785  0E2A                     	;# 
  2786  0E2B                     	;# 
  2787  0E90                     	;# 
  2788  0E91                     	;# 
  2789  0E92                     	;# 
  2790  0E94                     	;# 
  2791  0E95                     	;# 
  2792  0E9C                     	;# 
  2793  0E9D                     	;# 
  2794  0E9E                     	;# 
  2795  0E9F                     	;# 
  2796  0EA0                     	;# 
  2797  0EA1                     	;# 
  2798  0EA2                     	;# 
  2799  0EA3                     	;# 
  2800  0EA4                     	;# 
  2801  0EA5                     	;# 
  2802  0EA6                     	;# 
  2803  0EA7                     	;# 
  2804  0F0F                     	;# 
  2805  0F10                     	;# 
  2806  0F11                     	;# 
  2807  0F12                     	;# 
  2808  0F13                     	;# 
  2809  0F14                     	;# 
  2810  0F15                     	;# 
  2811  0F16                     	;# 
  2812  0F17                     	;# 
  2813  0F18                     	;# 
  2814  0F19                     	;# 
  2815  0F1A                     	;# 
  2816  0F1B                     	;# 
  2817  0F1C                     	;# 
  2818  0F1D                     	;# 
  2819  0F1E                     	;# 
  2820  0F1F                     	;# 
  2821  0F20                     	;# 
  2822  0F21                     	;# 
  2823  0F22                     	;# 
  2824  0F23                     	;# 
  2825  0F24                     	;# 
  2826  0F25                     	;# 
  2827  0F26                     	;# 
  2828  0F27                     	;# 
  2829  0F28                     	;# 
  2830  0F29                     	;# 
  2831  0F2A                     	;# 
  2832  0F2B                     	;# 
  2833  0F2C                     	;# 
  2834  0F2D                     	;# 
  2835  0FE4                     	;# 
  2836  0FE5                     	;# 
  2837  0FE6                     	;# 
  2838  0FE7                     	;# 
  2839  0FE8                     	;# 
  2840  0FE9                     	;# 
  2841  0FEA                     	;# 
  2842  0FEB                     	;# 
  2843  0FED                     	;# 
  2844  0FEE                     	;# 
  2845  0FEF                     	;# 
  2846  0000                     	;# 
  2847  0001                     	;# 
  2848  0002                     	;# 
  2849  0003                     	;# 
  2850  0004                     	;# 
  2851  0005                     	;# 
  2852  0006                     	;# 
  2853  0007                     	;# 
  2854  0008                     	;# 
  2855  0009                     	;# 
  2856  000A                     	;# 
  2857  000B                     	;# 
  2858  000C                     	;# 
  2859  000D                     	;# 
  2860  000E                     	;# 
  2861  0011                     	;# 
  2862  0012                     	;# 
  2863  0013                     	;# 
  2864  0015                     	;# 
  2865  0016                     	;# 
  2866  0016                     	;# 
  2867  0017                     	;# 
  2868  0018                     	;# 
  2869  0019                     	;# 
  2870  001A                     	;# 
  2871  001B                     	;# 
  2872  001C                     	;# 
  2873  008C                     	;# 
  2874  008D                     	;# 
  2875  008E                     	;# 
  2876  0091                     	;# 
  2877  0092                     	;# 
  2878  0093                     	;# 
  2879  0095                     	;# 
  2880  0096                     	;# 
  2881  0097                     	;# 
  2882  0098                     	;# 
  2883  0099                     	;# 
  2884  009A                     	;# 
  2885  009B                     	;# 
  2886  009B                     	;# 
  2887  009C                     	;# 
  2888  009D                     	;# 
  2889  009E                     	;# 
  2890  009F                     	;# 
  2891  010C                     	;# 
  2892  010D                     	;# 
  2893  010E                     	;# 
  2894  0111                     	;# 
  2895  0112                     	;# 
  2896  0113                     	;# 
  2897  0114                     	;# 
  2898  0115                     	;# 
  2899  0116                     	;# 
  2900  0117                     	;# 
  2901  0118                     	;# 
  2902  0119                     	;# 
  2903  011C                     	;# 
  2904  018C                     	;# 
  2905  018D                     	;# 
  2906  018E                     	;# 
  2907  0191                     	;# 
  2908  0191                     	;# 
  2909  0192                     	;# 
  2910  0193                     	;# 
  2911  0193                     	;# 
  2912  0194                     	;# 
  2913  0195                     	;# 
  2914  0196                     	;# 
  2915  0199                     	;# 
  2916  0199                     	;# 
  2917  0199                     	;# 
  2918  019A                     	;# 
  2919  019A                     	;# 
  2920  019A                     	;# 
  2921  019B                     	;# 
  2922  019B                     	;# 
  2923  019B                     	;# 
  2924  019B                     	;# 
  2925  019B                     	;# 
  2926  019C                     	;# 
  2927  019C                     	;# 
  2928  019C                     	;# 
  2929  019D                     	;# 
  2930  019D                     	;# 
  2931  019D                     	;# 
  2932  019E                     	;# 
  2933  019E                     	;# 
  2934  019E                     	;# 
  2935  019F                     	;# 
  2936  019F                     	;# 
  2937  019F                     	;# 
  2938  019F                     	;# 
  2939  019F                     	;# 
  2940  020C                     	;# 
  2941  020D                     	;# 
  2942  020E                     	;# 
  2943  0211                     	;# 
  2944  0211                     	;# 
  2945  0212                     	;# 
  2946  0212                     	;# 
  2947  0213                     	;# 
  2948  0213                     	;# 
  2949  0214                     	;# 
  2950  0214                     	;# 
  2951  0215                     	;# 
  2952  0215                     	;# 
  2953  0215                     	;# 
  2954  0215                     	;# 
  2955  0216                     	;# 
  2956  0216                     	;# 
  2957  0217                     	;# 
  2958  0217                     	;# 
  2959  028C                     	;# 
  2960  028D                     	;# 
  2961  028E                     	;# 
  2962  0291                     	;# 
  2963  0291                     	;# 
  2964  0292                     	;# 
  2965  0293                     	;# 
  2966  0293                     	;# 
  2967  0298                     	;# 
  2968  0298                     	;# 
  2969  0299                     	;# 
  2970  029A                     	;# 
  2971  029A                     	;# 
  2972  029E                     	;# 
  2973  030C                     	;# 
  2974  030D                     	;# 
  2975  030E                     	;# 
  2976  038C                     	;# 
  2977  038D                     	;# 
  2978  038E                     	;# 
  2979  0391                     	;# 
  2980  0392                     	;# 
  2981  0393                     	;# 
  2982  0394                     	;# 
  2983  0395                     	;# 
  2984  0396                     	;# 
  2985  0397                     	;# 
  2986  0398                     	;# 
  2987  0399                     	;# 
  2988  0415                     	;# 
  2989  0416                     	;# 
  2990  0417                     	;# 
  2991  041C                     	;# 
  2992  041D                     	;# 
  2993  041E                     	;# 
  2994  0511                     	;# 
  2995  0515                     	;# 
  2996  0617                     	;# 
  2997  0618                     	;# 
  2998  0619                     	;# 
  2999  0619                     	;# 
  3000  061A                     	;# 
  3001  061B                     	;# 
  3002  061C                     	;# 
  3003  061C                     	;# 
  3004  0691                     	;# 
  3005  0692                     	;# 
  3006  0693                     	;# 
  3007  0694                     	;# 
  3008  0695                     	;# 
  3009  0696                     	;# 
  3010  0697                     	;# 
  3011  0698                     	;# 
  3012  0699                     	;# 
  3013  069A                     	;# 
  3014  069B                     	;# 
  3015  069C                     	;# 
  3016  069D                     	;# 
  3017  069E                     	;# 
  3018  069F                     	;# 
  3019  0E0F                     	;# 
  3020  0E10                     	;# 
  3021  0E11                     	;# 
  3022  0E12                     	;# 
  3023  0E13                     	;# 
  3024  0E14                     	;# 
  3025  0E15                     	;# 
  3026  0E17                     	;# 
  3027  0E20                     	;# 
  3028  0E21                     	;# 
  3029  0E22                     	;# 
  3030  0E24                     	;# 
  3031  0E25                     	;# 
  3032  0E28                     	;# 
  3033  0E29                     	;# 
  3034  0E2A                     	;# 
  3035  0E2B                     	;# 
  3036  0E90                     	;# 
  3037  0E91                     	;# 
  3038  0E92                     	;# 
  3039  0E94                     	;# 
  3040  0E95                     	;# 
  3041  0E9C                     	;# 
  3042  0E9D                     	;# 
  3043  0E9E                     	;# 
  3044  0E9F                     	;# 
  3045  0EA0                     	;# 
  3046  0EA1                     	;# 
  3047  0EA2                     	;# 
  3048  0EA3                     	;# 
  3049  0EA4                     	;# 
  3050  0EA5                     	;# 
  3051  0EA6                     	;# 
  3052  0EA7                     	;# 
  3053  0F0F                     	;# 
  3054  0F10                     	;# 
  3055  0F11                     	;# 
  3056  0F12                     	;# 
  3057  0F13                     	;# 
  3058  0F14                     	;# 
  3059  0F15                     	;# 
  3060  0F16                     	;# 
  3061  0F17                     	;# 
  3062  0F18                     	;# 
  3063  0F19                     	;# 
  3064  0F1A                     	;# 
  3065  0F1B                     	;# 
  3066  0F1C                     	;# 
  3067  0F1D                     	;# 
  3068  0F1E                     	;# 
  3069  0F1F                     	;# 
  3070  0F20                     	;# 
  3071  0F21                     	;# 
  3072  0F22                     	;# 
  3073  0F23                     	;# 
  3074  0F24                     	;# 
  3075  0F25                     	;# 
  3076  0F26                     	;# 
  3077  0F27                     	;# 
  3078  0F28                     	;# 
  3079  0F29                     	;# 
  3080  0F2A                     	;# 
  3081  0F2B                     	;# 
  3082  0F2C                     	;# 
  3083  0F2D                     	;# 
  3084  0FE4                     	;# 
  3085  0FE5                     	;# 
  3086  0FE6                     	;# 
  3087  0FE7                     	;# 
  3088  0FE8                     	;# 
  3089  0FE9                     	;# 
  3090  0FEA                     	;# 
  3091  0FEB                     	;# 
  3092  0FED                     	;# 
  3093  0FEE                     	;# 
  3094  0FEF                     	;# 
  3095                           
  3096 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3097  0000                     
  3098 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3099  0000                     
  3100 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3101  0000                     
  3102                           	psect	idataCOMMON
  3103  0783                     __pidataCOMMON:
  3104                           
  3105                           ;initializer for _currentIsOn
  3106  0783  3401               	retlw	1
  3107                           
  3108                           	psect	idataBANK0
  3109  076F                     __pidataBANK0:
  3110                           
  3111                           ;initializer for _maxFrequencyIndex
  3112  076F  3406               	retlw	6
  3113  0770  3400               	retlw	0
  3114                           
  3115                           ;initializer for _maxCurrentIndex
  3116  0771  340B               	retlw	11
  3117  0772  3400               	retlw	0
  3118                           
  3119                           	psect	idataBANK1
  3120  0601                     __pidataBANK1:
  3121                           
  3122                           ;initializer for _currentValue
  3123  0601  3400               	retlw	0
  3124  0602  3400               	retlw	0
  3125  0603  341E               	retlw	30
  3126  0604  3400               	retlw	0
  3127  0605  3432               	retlw	50
  3128  0606  3400               	retlw	0
  3129  0607  3446               	retlw	70
  3130  0608  3400               	retlw	0
  3131  0609  345A               	retlw	90
  3132  060A  3400               	retlw	0
  3133  060B  346E               	retlw	110
  3134  060C  3400               	retlw	0
  3135  060D  3482               	retlw	130
  3136  060E  3400               	retlw	0
  3137  060F  34A0               	retlw	160
  3138  0610  3400               	retlw	0
  3139  0611  34BE               	retlw	190
  3140  0612  3400               	retlw	0
  3141  0613  34DC               	retlw	220
  3142  0614  3400               	retlw	0
  3143  0615  34FA               	retlw	250
  3144  0616  3400               	retlw	0
  3145                           
  3146                           ;initializer for _frequencyValue
  3147  0617  3400               	retlw	0
  3148  0618  3400               	retlw	0
  3149  0619  3432               	retlw	50
  3150  061A  3400               	retlw	0
  3151  061B  3464               	retlw	100
  3152  061C  3400               	retlw	0
  3153  061D  3478               	retlw	120
  3154  061E  3400               	retlw	0
  3155  061F  3482               	retlw	130
  3156  0620  3400               	retlw	0
  3157  0621  348C               	retlw	140
  3158  0622  3400               	retlw	0
  3159                           
  3160                           	psect	nvBANK0
  3161  0063                     __pnvBANK0:
  3162  0063                     _TMR4_InterruptHandler:
  3163  0063                     	ds	2
  3164  0065                     _TMR0_InterruptHandler:
  3165  0065                     	ds	2
  3166  0067                     _INT_InterruptHandler:
  3167  0067                     	ds	2
  3168                           
  3169                           	psect	nvBANK1
  3170  00E3                     __pnvBANK1:
  3171  00E3                     _EUSART_ErrorHandler:
  3172  00E3                     	ds	2
  3173  00E5                     _EUSART_OverrunErrorHandler:
  3174  00E5                     	ds	2
  3175  00E7                     _EUSART_FramingErrorHandler:
  3176  00E7                     	ds	2
  3177  001C                     _T2CONbits	set	28
  3178  001C                     _T2CON	set	28
  3179  001A                     _TMR2	set	26
  3180  001B                     _PR2	set	27
  3181  0015                     _TMR0	set	21
  3182  0011                     _PIR1bits	set	17
  3183  0012                     _PIR2bits	set	18
  3184  000B                     _INTCONbits	set	11
  3185  009D                     _ADCON0bits	set	157
  3186  009E                     _ADCON1	set	158
  3187  009D                     _ADCON0	set	157
  3188  0095                     _OPTION_REG	set	149
  3189  0092                     _PIE2bits	set	146
  3190  0095                     _OPTION_REGbits	set	149
  3191  008E                     _TRISC	set	142
  3192  008D                     _TRISB	set	141
  3193  008C                     _TRISA	set	140
  3194  0097                     _WDTCON	set	151
  3195  0098                     _OSCTUNE	set	152
  3196  009A                     _OSCSTAT	set	154
  3197  0099                     _OSCCON	set	153
  3198  009B                     _ADRES	set	155
  3199  0117                     _FVRCONbits	set	279
  3200  0117                     _FVRCON	set	279
  3201  010E                     _LATC	set	270
  3202  010D                     _LATB	set	269
  3203  010C                     _LATA	set	268
  3204  0116                     _BORCON	set	278
  3205  0119                     _DAC1CON1	set	281
  3206  0118                     _DAC1CON0	set	280
  3207  019A                     _TX1REG	set	410
  3208  019C                     _SP1BRGH	set	412
  3209  019B                     _SP1BRGL	set	411
  3210  019E                     _TX1STA	set	414
  3211  019D                     _RC1STA	set	413
  3212  019F                     _BAUD1CON	set	415
  3213  018C                     _ANSELA	set	396
  3214  018D                     _ANSELB	set	397
  3215  018E                     _ANSELC	set	398
  3216  020E                     _WPUC	set	526
  3217  020C                     _WPUA	set	524
  3218  020D                     _WPUB	set	525
  3219  0291                     _CCPR1L	set	657
  3220  0293                     _CCP1CONbits	set	659
  3221  029E                     _CCPTMRSbits	set	670
  3222  028E                     _ODCONC	set	654
  3223  028D                     _ODCONB	set	653
  3224  028C                     _ODCONA	set	652
  3225  030E                     _SLRCONC	set	782
  3226  030D                     _SLRCONB	set	781
  3227  030C                     _SLRCONA	set	780
  3228  038E                     _INLVLC	set	910
  3229  038D                     _INLVLB	set	909
  3230  038C                     _INLVLA	set	908
  3231  0417                     _T4CON	set	1047
  3232  0415                     _TMR4	set	1045
  3233  0416                     _PR4	set	1046
  3234  0515                     _OPA2CON	set	1301
  3235  0511                     _OPA1CON	set	1297
  3236  061C                     _PWM4CONbits	set	1564
  3237  061A                     _PWM4DCLbits	set	1562
  3238  061B                     _PWM4DCH	set	1563
  3239  0619                     _PWM3CONbits	set	1561
  3240  0617                     _PWM3DCLbits	set	1559
  3241  0618                     _PWM3DCH	set	1560
  3242  0E24                     _RXPPS	set	3620
  3243  0E10                     _INTPPS	set	3600
  3244  0EA5                     _RC5PPS	set	3749
  3245  0E95                     _RA5PPS	set	3733
  3246  0EA4                     _RC4PPS	set	3748
  3247  0E9F                     _RB7PPS	set	3743
  3248                           
  3249                           	psect	stringtext1
  3250  068F                     __pstringtext1:
  3251  068F                     STR_1:
  3252  068F  340A               	retlw	10
  3253  0690  3420               	retlw	32	;' '
  3254  0691  3446               	retlw	70	;'F'
  3255  0692  3472               	retlw	114	;'r'
  3256  0693  3465               	retlw	101	;'e'
  3257  0694  3471               	retlw	113	;'q'
  3258  0695  3475               	retlw	117	;'u'
  3259  0696  3465               	retlw	101	;'e'
  3260  0697  346E               	retlw	110	;'n'
  3261  0698  3463               	retlw	99	;'c'
  3262  0699  3479               	retlw	121	;'y'
  3263  069A  3420               	retlw	32	;' '
  3264  069B  3473               	retlw	115	;'s'
  3265  069C  3465               	retlw	101	;'e'
  3266  069D  346C               	retlw	108	;'l'
  3267  069E  3465               	retlw	101	;'e'
  3268  069F  3463               	retlw	99	;'c'
  3269  06A0  3474               	retlw	116	;'t'
  3270  06A1  3465               	retlw	101	;'e'
  3271  06A2  3464               	retlw	100	;'d'
  3272  06A3  3400               	retlw	0
  3273                           
  3274                           	psect	stringtext2
  3275  06A4                     __pstringtext2:
  3276  06A4                     STR_2:
  3277  06A4  340A               	retlw	10
  3278  06A5  3420               	retlw	32	;' '
  3279  06A6  3463               	retlw	99	;'c'
  3280  06A7  3475               	retlw	117	;'u'
  3281  06A8  3472               	retlw	114	;'r'
  3282  06A9  3472               	retlw	114	;'r'
  3283  06AA  3465               	retlw	101	;'e'
  3284  06AB  346E               	retlw	110	;'n'
  3285  06AC  3474               	retlw	116	;'t'
  3286  06AD  3420               	retlw	32	;' '
  3287  06AE  3473               	retlw	115	;'s'
  3288  06AF  3465               	retlw	101	;'e'
  3289  06B0  346C               	retlw	108	;'l'
  3290  06B1  3465               	retlw	101	;'e'
  3291  06B2  3463               	retlw	99	;'c'
  3292  06B3  3474               	retlw	116	;'t'
  3293  06B4  3465               	retlw	101	;'e'
  3294  06B5  3464               	retlw	100	;'d'
  3295  06B6  3400               	retlw	0
  3296                           
  3297                           	psect	stringtext3
  3298  06DB                     __pstringtext3:
  3299  06DB                     STR_3:
  3300  06DB  340A               	retlw	10
  3301  06DC  3420               	retlw	32	;' '
  3302  06DD  3472               	retlw	114	;'r'
  3303  06DE  3465               	retlw	101	;'e'
  3304  06DF  3473               	retlw	115	;'s'
  3305  06E0  3465               	retlw	101	;'e'
  3306  06E1  3474               	retlw	116	;'t'
  3307  06E2  3420               	retlw	32	;' '
  3308  06E3  3473               	retlw	115	;'s'
  3309  06E4  3465               	retlw	101	;'e'
  3310  06E5  346C               	retlw	108	;'l'
  3311  06E6  3465               	retlw	101	;'e'
  3312  06E7  3463               	retlw	99	;'c'
  3313  06E8  3474               	retlw	116	;'t'
  3314  06E9  3400               	retlw	0
  3315                           
  3316                           	psect	stringtext4
  3317  0000                     __pstringtext4:
  3318                           
  3319                           	psect	cinit
  3320  0029                     start_initialization:	
  3321                           ; #config settings
  3322                           
  3323  0029                     __initialization:
  3324                           
  3325                           ; Initialize objects allocated to COMMON
  3326  0029  3187  2783  3180   	fcall	__pidataCOMMON	;fetch initializer
  3327  002C  00FB               	movwf	__pdataCOMMON& (0+127)
  3328                           
  3329                           ; Initialize objects allocated to BANK0
  3330  002D  306F               	movlw	low __pidataBANK0
  3331  002E  0084               	movwf	4
  3332  002F  3087               	movlw	(high __pidataBANK0)| (0+128)
  3333  0030  0085               	movwf	5
  3334  0031  3069               	movlw	low __pdataBANK0
  3335  0032  0086               	movwf	6
  3336  0033  3000               	movlw	high __pdataBANK0
  3337  0034  0087               	movwf	7
  3338  0035  3004               	movlw	4
  3339  0036  3187  2749  3180   	fcall	init_ram
  3340                           
  3341                           ; Initialize objects allocated to BANK1
  3342  0039  3001               	movlw	low __pidataBANK1
  3343  003A  0084               	movwf	4
  3344  003B  3086               	movlw	(high __pidataBANK1)| (0+128)
  3345  003C  0085               	movwf	5
  3346  003D  30A0               	movlw	low __pdataBANK1
  3347  003E  0086               	movwf	6
  3348  003F  3000               	movlw	high __pdataBANK1
  3349  0040  0087               	movwf	7
  3350  0041  3022               	movlw	34
  3351  0042  3187  2749  3180   	fcall	init_ram
  3352                           
  3353                           ; Clear objects allocated to COMMON
  3354  0045  01F0               	clrf	__pbssCOMMON& (0+127)
  3355  0046  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  3356  0047  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  3357  0048  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  3358  0049  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  3359  004A  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  3360                           
  3361                           ; Clear objects allocated to BANK0
  3362  004B  304E               	movlw	low __pbssBANK0
  3363  004C  0084               	movwf	4
  3364  004D  3000               	movlw	high __pbssBANK0
  3365  004E  0085               	movwf	5
  3366  004F  3015               	movlw	21
  3367  0050  3187  274F  3180   	fcall	clear_ram0
  3368                           
  3369                           ; Clear objects allocated to BANK1
  3370  0053  30C2               	movlw	low __pbssBANK1
  3371  0054  0084               	movwf	4
  3372  0055  3000               	movlw	high __pbssBANK1
  3373  0056  0085               	movwf	5
  3374  0057  3021               	movlw	33
  3375  0058  3187  274F         	fcall	clear_ram0
  3376  005A                     end_of_initialization:	
  3377                           ;End of C runtime variable initialization code
  3378                           
  3379  005A                     __end_of__initialization:
  3380  005A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3381  005B  0020               	movlb	0
  3382  005C  3184  2CD5         	ljmp	_main	;jump to C main() function
  3383                           
  3384                           	psect	bssCOMMON
  3385  0070                     __pbssCOMMON:
  3386  0070                     _ir_code:
  3387  0070                     	ds	6
  3388                           
  3389                           	psect	dataCOMMON
  3390  007B                     __pdataCOMMON:
  3391  007B                     _currentIsOn:
  3392  007B                     	ds	1
  3393                           
  3394                           	psect	bssBANK0
  3395  004E                     __pbssBANK0:
  3396  004E                     _currentIndex:
  3397  004E                     	ds	2
  3398  0050                     _Vdd_mv:
  3399  0050                     	ds	2
  3400  0052                     _microamps:
  3401  0052                     	ds	2
  3402  0054                     _frequencyIndex:
  3403  0054                     	ds	2
  3404  0056                     _interfaceState:
  3405  0056                     	ds	1
  3406  0057                     _current:
  3407  0057                     	ds	1
  3408  0058                     _duty:
  3409  0058                     	ds	1
  3410  0059                     _frequency:
  3411  0059                     	ds	1
  3412  005A                     _flag:
  3413  005A                     	ds	1
  3414  005B                     _LED_blue:
  3415  005B                     	ds	1
  3416  005C                     _LED_green:
  3417  005C                     	ds	1
  3418  005D                     _LED_red:
  3419  005D                     	ds	1
  3420  005E                     _dac_value:
  3421  005E                     	ds	1
  3422  005F                     _timer0ReloadVal:
  3423  005F                     	ds	1
  3424  0060                     _eusartRxLastError:
  3425  0060                     	ds	1
  3426  0061                     _Vdac_mv:
  3427  0061                     	ds	2
  3428                           
  3429                           	psect	dataBANK0
  3430  0069                     __pdataBANK0:
  3431  0069                     _maxFrequencyIndex:
  3432  0069                     	ds	2
  3433  006B                     _maxCurrentIndex:
  3434  006B                     	ds	2
  3435                           
  3436                           	psect	bssBANK1
  3437  00C2                     __pbssBANK1:
  3438  00C2                     _stats:
  3439  00C2                     	ds	33
  3440                           
  3441                           	psect	dataBANK1
  3442  00A0                     __pdataBANK1:
  3443  00A0                     _currentValue:
  3444  00A0                     	ds	22
  3445  00B6                     _frequencyValue:
  3446  00B6                     	ds	12
  3447                           
  3448                           	psect	inittext
  3449  0749                     init_ram:
  3450  0749  00FE               	movwf	126
  3451  074A                     initloop:
  3452  074A  0012               	moviw fsr0++
  3453  074B  001E               	movwi fsr1++
  3454  074C  0BFE               	decfsz	126,f
  3455  074D  2F4A               	goto	initloop
  3456  074E  3400               	retlw	0
  3457                           
  3458                           	psect	clrtext
  3459  074F                     clear_ram0:	
  3460                           ;	Called with FSR0 containing the base address, and
  3461                           ;	WREG with the size to clear
  3462                           
  3463  074F  0064               	clrwdt	;clear the watchdog before getting into this loop
  3464  0750                     clrloop0:
  3465  0750  0180               	clrf	0	;clear RAM location pointed to by FSR
  3466  0751  3101               	addfsr 0,1
  3467  0752  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3468  0753  2F50               	goto	clrloop0	;have we reached the end yet?
  3469  0754  3400               	retlw	0	;all done for this memory range, return
  3470                           
  3471                           	psect	cstackCOMMON
  3472  0076                     __pcstackCOMMON:
  3473  0076                     ?_PIN_MANAGER_Initialize:
  3474  0076                     ?_OSCILLATOR_Initialize:	
  3475                           ; 1 bytes @ 0x0
  3476                           
  3477  0076                     ?_WDT_Initialize:	
  3478                           ; 1 bytes @ 0x0
  3479                           
  3480  0076                     ?_OPA1_Initialize:	
  3481                           ; 1 bytes @ 0x0
  3482                           
  3483  0076                     ?_TMR4_Initialize:	
  3484                           ; 1 bytes @ 0x0
  3485                           
  3486  0076                     ?_OPA2_Initialize:	
  3487                           ; 1 bytes @ 0x0
  3488                           
  3489  0076                     ?_TMR2_Initialize:	
  3490                           ; 1 bytes @ 0x0
  3491                           
  3492  0076                     ?_EXT_INT_Initialize:	
  3493                           ; 1 bytes @ 0x0
  3494                           
  3495  0076                     ?_TMR0_Initialize:	
  3496                           ; 1 bytes @ 0x0
  3497                           
  3498  0076                     ?_EUSART_Initialize:	
  3499                           ; 1 bytes @ 0x0
  3500                           
  3501  0076                     ?_TMR0_ISR:	
  3502                           ; 1 bytes @ 0x0
  3503                           
  3504  0076                     ??_TMR0_ISR:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507  0076                     ?_INT_ISR:	
  3508                           ; 1 bytes @ 0x0
  3509                           
  3510  0076                     ?_TMR4_ISR:	
  3511                           ; 1 bytes @ 0x0
  3512                           
  3513  0076                     ?_INT_CallBack:	
  3514                           ; 1 bytes @ 0x0
  3515                           
  3516  0076                     ?_TMR0_DefaultInterruptHandler:	
  3517                           ; 1 bytes @ 0x0
  3518                           
  3519  0076                     ??_TMR0_DefaultInterruptHandler:	
  3520                           ; 1 bytes @ 0x0
  3521                           
  3522  0076                     ?_TMR4_DefaultInterruptHandler:	
  3523                           ; 1 bytes @ 0x0
  3524                           
  3525  0076                     ??_TMR4_DefaultInterruptHandler:	
  3526                           ; 1 bytes @ 0x0
  3527                           
  3528  0076                     ?_DAC_Initialize:	
  3529                           ; 1 bytes @ 0x0
  3530                           
  3531  0076                     ?_SYSTEM_Initialize:	
  3532                           ; 1 bytes @ 0x0
  3533                           
  3534  0076                     ?_PIN_MANAGER_IOC:	
  3535                           ; 1 bytes @ 0x0
  3536                           
  3537  0076                     ??_PIN_MANAGER_IOC:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540  0076                     ?_INTERRUPT_InterruptManager:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0076                     ?_EUSART_Write:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0076                     ?_putch:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549  0076                     ?_INT_DefaultInterruptHandler:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552  0076                     ??_INT_DefaultInterruptHandler:	
  3553                           ; 1 bytes @ 0x0
  3554                           
  3555  0076                     ?_initLED:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558  0076                     ?_lowBattery:	
  3559                           ; 1 bytes @ 0x0
  3560                           
  3561  0076                     ?_startUp:	
  3562                           ; 1 bytes @ 0x0
  3563                           
  3564  0076                     ?_selectSomething:	
  3565                           ; 1 bytes @ 0x0
  3566                           
  3567  0076                     ?_selectFrequency:	
  3568                           ; 1 bytes @ 0x0
  3569                           
  3570  0076                     ?_selectCurrent:	
  3571                           ; 1 bytes @ 0x0
  3572                           
  3573  0076                     ?_process_remote_command:	
  3574                           ; 1 bytes @ 0x0
  3575                           
  3576  0076                     ?_main:	
  3577                           ; 1 bytes @ 0x0
  3578                           
  3579                           
  3580                           ; 1 bytes @ 0x0
  3581  0076                     	ds	1
  3582  0077                     INT_DefaultInterruptHandler@time:
  3583                           
  3584                           ; 1 bytes @ 0x1
  3585  0077                     	ds	1
  3586  0078                     ??_PIN_MANAGER_Initialize:
  3587  0078                     ??_OSCILLATOR_Initialize:	
  3588                           ; 1 bytes @ 0x2
  3589                           
  3590  0078                     ??_WDT_Initialize:	
  3591                           ; 1 bytes @ 0x2
  3592                           
  3593  0078                     ??_OPA1_Initialize:	
  3594                           ; 1 bytes @ 0x2
  3595                           
  3596  0078                     ??_TMR4_Initialize:	
  3597                           ; 1 bytes @ 0x2
  3598                           
  3599  0078                     ??_OPA2_Initialize:	
  3600                           ; 1 bytes @ 0x2
  3601                           
  3602  0078                     ??_TMR2_Initialize:	
  3603                           ; 1 bytes @ 0x2
  3604                           
  3605  0078                     ??_EXT_INT_Initialize:	
  3606                           ; 1 bytes @ 0x2
  3607                           
  3608  0078                     ??_TMR0_Initialize:	
  3609                           ; 1 bytes @ 0x2
  3610                           
  3611  0078                     ??_EUSART_Initialize:	
  3612                           ; 1 bytes @ 0x2
  3613                           
  3614  0078                     ??_INT_ISR:	
  3615                           ; 1 bytes @ 0x2
  3616                           
  3617  0078                     ??_TMR4_ISR:	
  3618                           ; 1 bytes @ 0x2
  3619                           
  3620  0078                     ??_EUSART_SetFramingErrorHandler:	
  3621                           ; 1 bytes @ 0x2
  3622                           
  3623  0078                     ??_EUSART_SetOverrunErrorHandler:	
  3624                           ; 1 bytes @ 0x2
  3625                           
  3626  0078                     ??_EUSART_SetErrorHandler:	
  3627                           ; 1 bytes @ 0x2
  3628                           
  3629  0078                     ??_INT_CallBack:	
  3630                           ; 1 bytes @ 0x2
  3631                           
  3632  0078                     ??_TMR0_SetInterruptHandler:	
  3633                           ; 1 bytes @ 0x2
  3634                           
  3635  0078                     ??_TMR4_SetInterruptHandler:	
  3636                           ; 1 bytes @ 0x2
  3637                           
  3638  0078                     ??_DAC_Initialize:	
  3639                           ; 1 bytes @ 0x2
  3640                           
  3641  0078                     ??_SYSTEM_Initialize:	
  3642                           ; 1 bytes @ 0x2
  3643                           
  3644  0078                     ??_INTERRUPT_InterruptManager:	
  3645                           ; 1 bytes @ 0x2
  3646                           
  3647  0078                     ??_EUSART_Write:	
  3648                           ; 1 bytes @ 0x2
  3649                           
  3650  0078                     ??_INT_SetInterruptHandler:	
  3651                           ; 1 bytes @ 0x2
  3652                           
  3653  0078                     ??_initLED:	
  3654                           ; 1 bytes @ 0x2
  3655                           
  3656  0078                     ??_setLEDColor:	
  3657                           ; 1 bytes @ 0x2
  3658                           
  3659  0078                     ??___lmul:	
  3660                           ; 1 bytes @ 0x2
  3661                           
  3662  0078                     ??___lldiv:	
  3663                           ; 1 bytes @ 0x2
  3664                           
  3665  0078                     ??___awdiv:	
  3666                           ; 1 bytes @ 0x2
  3667                           
  3668  0078                     EUSART_Write@txData:	
  3669                           ; 1 bytes @ 0x2
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x2
  3673  0078                     	ds	1
  3674  0079                     ??_putch:
  3675  0079                     ??___aldiv:	
  3676                           ; 1 bytes @ 0x3
  3677                           
  3678  0079                     putch@txData:	
  3679                           ; 1 bytes @ 0x3
  3680                           
  3681  0079                     setLEDColor@red:	
  3682                           ; 1 bytes @ 0x3
  3683                           
  3684                           
  3685                           ; 1 bytes @ 0x3
  3686  0079                     	ds	1
  3687  007A                     ??_battery_voltage:
  3688  007A                     ??_setFrequency:	
  3689                           ; 1 bytes @ 0x4
  3690                           
  3691                           
  3692                           ; 1 bytes @ 0x4
  3693  007A                     	ds	1
  3694                           
  3695                           	psect	cstackBANK0
  3696  0020                     __pcstackBANK0:
  3697  0020                     ?_EUSART_SetFramingErrorHandler:
  3698  0020                     ?_EUSART_SetOverrunErrorHandler:	
  3699                           ; 1 bytes @ 0x0
  3700                           
  3701  0020                     ?_EUSART_SetErrorHandler:	
  3702                           ; 1 bytes @ 0x0
  3703                           
  3704  0020                     ?_TMR0_SetInterruptHandler:	
  3705                           ; 1 bytes @ 0x0
  3706                           
  3707  0020                     ?_TMR4_SetInterruptHandler:	
  3708                           ; 1 bytes @ 0x0
  3709                           
  3710  0020                     ?_INT_SetInterruptHandler:	
  3711                           ; 1 bytes @ 0x0
  3712                           
  3713  0020                     ?_setLEDColor:	
  3714                           ; 1 bytes @ 0x0
  3715                           
  3716  0020                     ?_printf:	
  3717                           ; 1 bytes @ 0x0
  3718                           
  3719  0020                     ?___awdiv:	
  3720                           ; 2 bytes @ 0x0
  3721                           
  3722  0020                     ?___lmul:	
  3723                           ; 2 bytes @ 0x0
  3724                           
  3725  0020                     setLEDColor@green:	
  3726                           ; 4 bytes @ 0x0
  3727                           
  3728  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3729                           ; 1 bytes @ 0x0
  3730                           
  3731  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3732                           ; 2 bytes @ 0x0
  3733                           
  3734  0020                     EUSART_SetErrorHandler@interruptHandler:	
  3735                           ; 2 bytes @ 0x0
  3736                           
  3737  0020                     INT_SetInterruptHandler@InterruptHandler:	
  3738                           ; 2 bytes @ 0x0
  3739                           
  3740  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  3741                           ; 2 bytes @ 0x0
  3742                           
  3743  0020                     TMR4_SetInterruptHandler@InterruptHandler:	
  3744                           ; 2 bytes @ 0x0
  3745                           
  3746  0020                     printf@f:	
  3747                           ; 2 bytes @ 0x0
  3748                           
  3749  0020                     ___awdiv@divisor:	
  3750                           ; 2 bytes @ 0x0
  3751                           
  3752  0020                     ___lmul@multiplier:	
  3753                           ; 2 bytes @ 0x0
  3754                           
  3755                           
  3756                           ; 4 bytes @ 0x0
  3757  0020                     	ds	1
  3758  0021                     setLEDColor@blue:
  3759                           
  3760                           ; 1 bytes @ 0x1
  3761  0021                     	ds	1
  3762  0022                     ??_printf:
  3763  0022                     ??_lowBattery:	
  3764                           ; 1 bytes @ 0x2
  3765                           
  3766  0022                     ??_startUp:	
  3767                           ; 1 bytes @ 0x2
  3768                           
  3769  0022                     ??_selectSomething:	
  3770                           ; 1 bytes @ 0x2
  3771                           
  3772  0022                     ___awdiv@dividend:	
  3773                           ; 1 bytes @ 0x2
  3774                           
  3775                           
  3776                           ; 2 bytes @ 0x2
  3777  0022                     	ds	2
  3778  0024                     ___awdiv@counter:
  3779  0024                     startUp@i:	
  3780                           ; 1 bytes @ 0x4
  3781                           
  3782  0024                     ___lmul@multiplicand:	
  3783                           ; 2 bytes @ 0x4
  3784                           
  3785                           
  3786                           ; 4 bytes @ 0x4
  3787  0024                     	ds	1
  3788  0025                     printf@ap:
  3789  0025                     ___awdiv@sign:	
  3790                           ; 1 bytes @ 0x5
  3791                           
  3792                           
  3793                           ; 1 bytes @ 0x5
  3794  0025                     	ds	1
  3795  0026                     printf@c:
  3796  0026                     ___awdiv@quotient:	
  3797                           ; 1 bytes @ 0x6
  3798                           
  3799                           
  3800                           ; 2 bytes @ 0x6
  3801  0026                     	ds	1
  3802  0027                     ??_selectFrequency:
  3803  0027                     ??_selectCurrent:	
  3804                           ; 1 bytes @ 0x7
  3805                           
  3806                           
  3807                           ; 1 bytes @ 0x7
  3808  0027                     	ds	1
  3809  0028                     ___lmul@product:
  3810                           
  3811                           ; 4 bytes @ 0x8
  3812  0028                     	ds	4
  3813  002C                     ?___lldiv:
  3814  002C                     ?___aldiv:	
  3815                           ; 4 bytes @ 0xC
  3816                           
  3817  002C                     ___lldiv@divisor:	
  3818                           ; 4 bytes @ 0xC
  3819                           
  3820  002C                     ___aldiv@divisor:	
  3821                           ; 4 bytes @ 0xC
  3822                           
  3823                           
  3824                           ; 4 bytes @ 0xC
  3825  002C                     	ds	4
  3826  0030                     ___lldiv@dividend:
  3827  0030                     ___aldiv@dividend:	
  3828                           ; 4 bytes @ 0x10
  3829                           
  3830                           
  3831                           ; 4 bytes @ 0x10
  3832  0030                     	ds	4
  3833  0034                     ___aldiv@counter:
  3834  0034                     ___lldiv@quotient:	
  3835                           ; 1 bytes @ 0x14
  3836                           
  3837                           
  3838                           ; 4 bytes @ 0x14
  3839  0034                     	ds	1
  3840  0035                     ___aldiv@sign:
  3841                           
  3842                           ; 1 bytes @ 0x15
  3843  0035                     	ds	1
  3844  0036                     ___aldiv@quotient:
  3845                           
  3846                           ; 4 bytes @ 0x16
  3847  0036                     	ds	2
  3848  0038                     ___lldiv@counter:
  3849                           
  3850                           ; 1 bytes @ 0x18
  3851  0038                     	ds	2
  3852  003A                     ?_setFrequency:
  3853  003A                     ?_battery_voltage:	
  3854                           ; 1 bytes @ 0x1A
  3855                           
  3856  003A                     setFrequency@frequency_hz:	
  3857                           ; 2 bytes @ 0x1A
  3858                           
  3859                           
  3860                           ; 2 bytes @ 0x1A
  3861  003A                     	ds	2
  3862  003C                     ?_setCurrent:
  3863  003C                     setCurrent@microamps:	
  3864                           ; 1 bytes @ 0x1C
  3865                           
  3866  003C                     setFrequency@pr4_val:	
  3867                           ; 2 bytes @ 0x1C
  3868                           
  3869                           
  3870                           ; 2 bytes @ 0x1C
  3871  003C                     	ds	2
  3872  003E                     setCurrent@Vdd_mv:
  3873                           
  3874                           ; 2 bytes @ 0x1E
  3875  003E                     	ds	2
  3876  0040                     ??_setCurrent:
  3877                           
  3878                           ; 1 bytes @ 0x20
  3879  0040                     	ds	8
  3880  0048                     setCurrent@DACValue:
  3881                           
  3882                           ; 2 bytes @ 0x28
  3883  0048                     	ds	2
  3884  004A                     ??_process_remote_command:
  3885                           
  3886                           ; 1 bytes @ 0x2A
  3887  004A                     	ds	2
  3888  004C                     process_remote_command@code:
  3889                           
  3890                           ; 1 bytes @ 0x2C
  3891  004C                     	ds	1
  3892  004D                     ??_main:
  3893                           
  3894                           ; 1 bytes @ 0x2D
  3895  004D                     	ds	1
  3896                           
  3897                           	psect	maintext
  3898  04D5                     __pmaintext:	
  3899 ;;
  3900 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3901 ;;
  3902 ;; *************** function _main *****************
  3903 ;; Defined at:
  3904 ;;		line 383 in file "main.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;		None
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  1    wreg      void 
  3911 ;; Registers used:
  3912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : B1F/0
  3915 ;;		On exit  : 1F/C
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3918 ;;      Params:         0       0       0       0       0       0       0       0
  3919 ;;      Locals:         0       0       0       0       0       0       0       0
  3920 ;;      Temps:          0       1       0       0       0       0       0       0
  3921 ;;      Totals:         0       1       0       0       0       0       0       0
  3922 ;;Total ram usage:        1 bytes
  3923 ;; Hardware stack levels required when called:    9
  3924 ;; This function calls:
  3925 ;;		_DAC_Initialize
  3926 ;;		_OPA1_Initialize
  3927 ;;		_OPA2_Initialize
  3928 ;;		_SYSTEM_Initialize
  3929 ;;		_battery_voltage
  3930 ;;		_initLED
  3931 ;;		_lowBattery
  3932 ;;		_process_remote_command
  3933 ;;		_startUp
  3934 ;; This function is called by:
  3935 ;;		Startup code after reset
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           
  3940                           ;psect for function _main
  3941  04D5                     _main:
  3942                           
  3943                           ;main.c: 386: SYSTEM_Initialize();
  3944                           
  3945                           ;incstack = 0
  3946                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3947  04D5  3186  2623  3184   	fcall	_SYSTEM_Initialize
  3948                           
  3949                           ;main.c: 387: DAC_Initialize();
  3950  04D8  3187  2755  3184   	fcall	_DAC_Initialize
  3951                           
  3952                           ;main.c: 388: OPA1_Initialize();
  3953  04DB  3187  277B  3184   	fcall	_OPA1_Initialize
  3954                           
  3955                           ;main.c: 389: OPA2_Initialize();
  3956  04DE  3187  2777  3184   	fcall	_OPA2_Initialize
  3957                           
  3958                           ;main.c: 390: initLED();
  3959  04E1  3184  2421  3184   	fcall	_initLED
  3960                           
  3961                           ;main.c: 391: (INTCONbits.GIE = 1);
  3962  04E4  178B               	bsf	11,7	;volatile
  3963                           
  3964                           ;main.c: 392: (INTCONbits.PEIE = 1);
  3965  04E5  170B               	bsf	11,6	;volatile
  3966                           
  3967                           ;main.c: 393: startUp();
  3968  04E6  3184  2465  3184   	fcall	_startUp
  3969  04E9                     l602:	
  3970                           ;main.c: 404: while(1){
  3971                           
  3972                           
  3973                           ;main.c: 406: if ((int)battery_voltage() < 2500)
  3974  04E9  3185  2533  3184   	fcall	_battery_voltage
  3975  04EC  083B               	movf	?_battery_voltage+1,w
  3976  04ED  3A80               	xorlw	128
  3977  04EE  00CD               	movwf	??_main
  3978  04EF  3089               	movlw	137
  3979  04F0  024D               	subwf	??_main,w
  3980  04F1  1D03               	skipz
  3981  04F2  2CF5               	goto	u2085
  3982  04F3  30C4               	movlw	196
  3983  04F4  023A               	subwf	?_battery_voltage,w
  3984  04F5                     u2085:
  3985  04F5  1803               	skipnc
  3986  04F6  2CFA               	goto	l2586
  3987                           
  3988                           ;main.c: 407: {;main.c: 408: lowBattery();
  3989  04F7  3185  2560  3184   	fcall	_lowBattery
  3990  04FA                     l2586:
  3991                           
  3992                           ;main.c: 410: };main.c: 416: if (STATE_DONE == ir_code.state){
  3993  04FA  3002               	movlw	2
  3994  04FB  0671               	xorwf	_ir_code+1,w
  3995  04FC  1D03               	btfss	3,2
  3996  04FD  2CE9               	goto	l602
  3997                           
  3998                           ;main.c: 434: process_remote_command(&ir_code);
  3999  04FE  3070               	movlw	(low (_ir_code| 0))& (0+255)
  4000  04FF  3180  205E  3184   	fcall	_process_remote_command
  4001                           
  4002                           ;main.c: 437: ir_code.state = STATE_RESET;
  4003  0502  01F1               	clrf	_ir_code+1
  4004  0503  2CE9               	goto	l602
  4005  0504                     __end_of_main:
  4006                           
  4007                           	psect	text1
  4008  0465                     __ptext1:	
  4009 ;; *************** function _startUp *****************
  4010 ;; Defined at:
  4011 ;;		line 186 in file "main.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;		None
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  i               2    4[BANK0 ] int 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 1F/1
  4022 ;;		On exit  : 1F/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4025 ;;      Params:         0       0       0       0       0       0       0       0
  4026 ;;      Locals:         0       2       0       0       0       0       0       0
  4027 ;;      Temps:          0       2       0       0       0       0       0       0
  4028 ;;      Totals:         0       4       0       0       0       0       0       0
  4029 ;;Total ram usage:        4 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    5
  4032 ;; This function calls:
  4033 ;;		_setLEDColor
  4034 ;; This function is called by:
  4035 ;;		_main
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           
  4040                           ;psect for function _startUp
  4041  0465                     _startUp:
  4042                           
  4043                           ;main.c: 187: interfaceState = STATE_RUNNING;
  4044                           
  4045                           ;incstack = 0
  4046                           ; Regs used in _startUp: [wreg+status,2+status,0+pclath+cstack]
  4047  0465  0020               	movlb	0	; select bank0
  4048  0466  01D6               	clrf	_interfaceState
  4049                           
  4050                           ;main.c: 188: for (int i = 0; i < 5; i++){
  4051  0467  01A4               	clrf	startUp@i
  4052  0468  01A5               	clrf	startUp@i+1
  4053  0469                     l2490:
  4054                           
  4055                           ;main.c: 189: setLEDColor(0, 180, 230);
  4056  0469  30B4               	movlw	180
  4057  046A  0020               	movlb	0	; select bank0
  4058  046B  00A2               	movwf	??_startUp
  4059  046C  0822               	movf	??_startUp,w
  4060  046D  00A0               	movwf	setLEDColor@green
  4061  046E  30E6               	movlw	230
  4062  046F  00A3               	movwf	??_startUp+1
  4063  0470  0823               	movf	??_startUp+1,w
  4064  0471  00A1               	movwf	setLEDColor@blue
  4065  0472  3000               	movlw	0
  4066  0473  3186  2660  3184   	fcall	_setLEDColor
  4067                           
  4068                           ;main.c: 190: _delay((unsigned long)((100)*(4000000/4000.0)));
  4069  0476  3082               	movlw	130
  4070  0477  0020               	movlb	0	; select bank0
  4071  0478  00A2               	movwf	??_startUp
  4072  0479  30DD               	movlw	221
  4073  047A                     u2107:
  4074  047A  0B89               	decfsz	9,f
  4075  047B  2C7A               	goto	u2107
  4076  047C  0BA2               	decfsz	??_startUp,f
  4077  047D  2C7A               	goto	u2107
  4078  047E  3200               	nop2
  4079                           
  4080                           ;main.c: 191: setLEDColor(0, 0, 0);
  4081  047F  0020               	movlb	0	; select bank0
  4082  0480  01A0               	clrf	setLEDColor@green
  4083  0481  01A1               	clrf	setLEDColor@blue
  4084  0482  3000               	movlw	0
  4085  0483  3186  2660  3184   	fcall	_setLEDColor
  4086                           
  4087                           ;main.c: 192: _delay((unsigned long)((100)*(4000000/4000.0)));
  4088  0486  3082               	movlw	130
  4089  0487  0020               	movlb	0	; select bank0
  4090  0488  00A2               	movwf	??_startUp
  4091  0489  30DD               	movlw	221
  4092  048A                     u2117:
  4093  048A  0B89               	decfsz	9,f
  4094  048B  2C8A               	goto	u2117
  4095  048C  0BA2               	decfsz	??_startUp,f
  4096  048D  2C8A               	goto	u2117
  4097  048E  3200               	nop2
  4098  048F  3001               	movlw	1
  4099  0490  0020               	movlb	0	; select bank0
  4100  0491  07A4               	addwf	startUp@i,f
  4101  0492  3000               	movlw	0
  4102  0493  3DA5               	addwfc	startUp@i+1,f
  4103  0494  0825               	movf	startUp@i+1,w
  4104  0495  3A80               	xorlw	128
  4105  0496  00A2               	movwf	??_startUp
  4106  0497  3080               	movlw	128
  4107  0498  0222               	subwf	??_startUp,w
  4108  0499  1D03               	skipz
  4109  049A  2C9D               	goto	u1955
  4110  049B  3005               	movlw	5
  4111  049C  0224               	subwf	startUp@i,w
  4112  049D                     u1955:
  4113  049D  1C03               	skipc
  4114  049E  2C69               	goto	l2490
  4115                           
  4116                           ;main.c: 193: };main.c: 194: duty = 0;
  4117  049F  0020               	movlb	0	; select bank0
  4118  04A0  01D8               	clrf	_duty
  4119  04A1  0008               	return
  4120  04A2                     __end_of_startUp:
  4121                           
  4122                           	psect	text2
  4123  005E                     __ptext2:	
  4124 ;; *************** function _process_remote_command *****************
  4125 ;; Defined at:
  4126 ;;		line 288 in file "main.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;  code            1    wreg     PTR struct .
  4129 ;;		 -> ir_code(6), 
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;  code            1   44[BANK0 ] PTR struct .
  4132 ;;		 -> ir_code(6), 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 1F/C
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4142 ;;      Params:         0       0       0       0       0       0       0       0
  4143 ;;      Locals:         0       1       0       0       0       0       0       0
  4144 ;;      Temps:          0       2       0       0       0       0       0       0
  4145 ;;      Totals:         0       3       0       0       0       0       0       0
  4146 ;;Total ram usage:        3 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    8
  4149 ;; This function calls:
  4150 ;;		_battery_voltage
  4151 ;;		_printf
  4152 ;;		_selectCurrent
  4153 ;;		_selectFrequency
  4154 ;;		_selectSomething
  4155 ;;		_setCurrent
  4156 ;;		_setFrequency
  4157 ;;		_setLEDColor
  4158 ;; This function is called by:
  4159 ;;		_main
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function _process_remote_command
  4165  005E                     _process_remote_command:
  4166                           
  4167                           ;incstack = 0
  4168                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4169                           ;process_remote_command@code stored from wreg
  4170  005E  0020               	movlb	0	; select bank0
  4171  005F  00CC               	movwf	process_remote_command@code
  4172                           
  4173                           ;main.c: 289: setLEDColor(0, 0, 0);
  4174  0060  01A0               	clrf	setLEDColor@green
  4175  0061  01A1               	clrf	setLEDColor@blue
  4176  0062  3000               	movlw	0
  4177  0063  3186  2660  3180   	fcall	_setLEDColor
  4178                           
  4179                           ;main.c: 291: switch(code->command){
  4180  0066  2911               	goto	l2570
  4181  0067                     l2500:
  4182                           
  4183                           ;main.c: 293: if(STATE_CURRENT == interfaceState){
  4184  0067  0356               	decf	_interfaceState,w
  4185  0068  1D03               	btfss	3,2
  4186  0069  2891               	goto	l2508
  4187                           
  4188                           ;main.c: 294: currentIndex++;
  4189  006A  3001               	movlw	1
  4190  006B  07CE               	addwf	_currentIndex,f
  4191  006C  3000               	movlw	0
  4192  006D  3DCF               	addwfc	_currentIndex+1,f
  4193                           
  4194                           ;main.c: 295: if (currentIndex > maxCurrentIndex - 1)
  4195  006E  084F               	movf	_currentIndex+1,w
  4196  006F  3A80               	xorlw	128
  4197  0070  00CA               	movwf	??_process_remote_command
  4198  0071  3080               	movlw	128
  4199  0072  024A               	subwf	??_process_remote_command,w
  4200  0073  1D03               	skipz
  4201  0074  2877               	goto	u1975
  4202  0075  300B               	movlw	11
  4203  0076  024E               	subwf	_currentIndex,w
  4204  0077                     u1975:
  4205  0077  1C03               	skipc
  4206  0078  287E               	goto	l2506
  4207                           
  4208                           ;main.c: 296: {;main.c: 297: currentIndex = maxCurrentIndex - 1;
  4209  0079  300A               	movlw	10
  4210  007A  0020               	movlb	0	; select bank0
  4211  007B  00CE               	movwf	_currentIndex
  4212  007C  3000               	movlw	0
  4213  007D  00CF               	movwf	_currentIndex+1
  4214  007E                     l2506:
  4215                           
  4216                           ;main.c: 298: };main.c: 299: setCurrent(currentValue[currentIndex],battery_voltage());
  4217  007E  0020               	movlb	0	; select bank0
  4218  007F  354E               	lslf	_currentIndex,w
  4219  0080  3EA0               	addlw	(low (_currentValue| 0))& (0+255)
  4220  0081  0086               	movwf	6
  4221  0082  0187               	clrf	7
  4222  0083  3F40               	moviw [0]fsr1
  4223  0084  00BC               	movwf	setCurrent@microamps
  4224  0085  3F41               	moviw [1]fsr1
  4225  0086  00BD               	movwf	setCurrent@microamps+1
  4226  0087  3185  2533  3180   	fcall	_battery_voltage
  4227  008A  083B               	movf	?_battery_voltage+1,w
  4228  008B  00BF               	movwf	setCurrent@Vdd_mv+1
  4229  008C  083A               	movf	?_battery_voltage,w
  4230  008D  00BE               	movwf	setCurrent@Vdd_mv
  4231  008E  3181  2160  3180   	fcall	_setCurrent
  4232  0091                     l2508:
  4233                           
  4234                           ;main.c: 300: };main.c: 301: if(STATE_FREQUENCY == interfaceState){
  4235  0091  3002               	movlw	2
  4236  0092  0020               	movlb	0	; select bank0
  4237  0093  0656               	xorwf	_interfaceState,w
  4238  0094  1D03               	btfss	3,2
  4239  0095  28B6               	goto	l2516
  4240                           
  4241                           ;main.c: 302: frequencyIndex++;
  4242  0096  3001               	movlw	1
  4243  0097  07D4               	addwf	_frequencyIndex,f
  4244  0098  3000               	movlw	0
  4245  0099  3DD5               	addwfc	_frequencyIndex+1,f
  4246                           
  4247                           ;main.c: 303: if (frequencyIndex > maxFrequencyIndex - 1)
  4248  009A  0855               	movf	_frequencyIndex+1,w
  4249  009B  3A80               	xorlw	128
  4250  009C  00CA               	movwf	??_process_remote_command
  4251  009D  3080               	movlw	128
  4252  009E  024A               	subwf	??_process_remote_command,w
  4253  009F  1D03               	skipz
  4254  00A0  28A3               	goto	u1995
  4255  00A1  3006               	movlw	6
  4256  00A2  0254               	subwf	_frequencyIndex,w
  4257  00A3                     u1995:
  4258  00A3  1C03               	skipc
  4259  00A4  28AA               	goto	l2514
  4260                           
  4261                           ;main.c: 304: {;main.c: 305: frequencyIndex = maxFrequencyIndex - 1;
  4262  00A5  3005               	movlw	5
  4263  00A6  0020               	movlb	0	; select bank0
  4264  00A7  00D4               	movwf	_frequencyIndex
  4265  00A8  3000               	movlw	0
  4266  00A9  00D5               	movwf	_frequencyIndex+1
  4267  00AA                     l2514:
  4268                           
  4269                           ;main.c: 306: };main.c: 307: setFrequency(frequencyValue[frequencyIndex]);
  4270  00AA  0020               	movlb	0	; select bank0
  4271  00AB  3554               	lslf	_frequencyIndex,w
  4272  00AC  3EB6               	addlw	(low (_frequencyValue| 0))& (0+255)
  4273  00AD  0086               	movwf	6
  4274  00AE  0187               	clrf	7
  4275  00AF  3F40               	moviw [0]fsr1
  4276  00B0  00BA               	movwf	setFrequency@frequency_hz
  4277  00B1  3F41               	moviw [1]fsr1
  4278  00B2                     L1:
  4279  00B2  00BB               	movwf	setFrequency@frequency_hz+1
  4280  00B3  3183  23D3  3180   	fcall	_setFrequency
  4281  00B6                     l2516:
  4282                           
  4283                           ;main.c: 308: };main.c: 309: if(STATE_RUNNING == interfaceState){
  4284  00B6  0020               	movlb	0	; select bank0
  4285  00B7  0856               	movf	_interfaceState,w
  4286  00B8  1D03               	btfss	3,2
  4287  00B9  28BD               	goto	l2520
  4288                           
  4289                           ;main.c: 310: selectSomething();
  4290  00BA  3183  2383  3180   	fcall	_selectSomething
  4291  00BD                     l2520:
  4292                           
  4293                           ;main.c: 311: };main.c: 312: if(STATE_LOWBATTERY == interfaceState){
  4294  00BD  3003               	movlw	3
  4295  00BE  0020               	movlb	0	; select bank0
  4296  00BF  0656               	xorwf	_interfaceState,w
  4297  00C0  1D03               	btfss	3,2
  4298  00C1  293F               	goto	l2572
  4299                           
  4300                           ;main.c: 313: selectSomething();
  4301  00C2  3183  2383  3180   	fcall	_selectSomething
  4302  00C5  293F               	goto	l2572
  4303  00C6                     l2524:
  4304                           
  4305                           ;main.c: 317: if(STATE_CURRENT == interfaceState){
  4306  00C6  0356               	decf	_interfaceState,w
  4307  00C7  1D03               	btfss	3,2
  4308  00C8  28E3               	goto	l2534
  4309                           
  4310                           ;main.c: 318: currentIndex--;
  4311  00C9  30FF               	movlw	255
  4312  00CA  07CE               	addwf	_currentIndex,f
  4313  00CB  30FF               	movlw	255
  4314  00CC  3DCF               	addwfc	_currentIndex+1,f
  4315                           
  4316                           ;main.c: 319: if (currentIndex < 0)
  4317  00CD  1FCF               	btfss	_currentIndex+1,7
  4318  00CE  28D1               	goto	l2532
  4319                           
  4320                           ;main.c: 320: {;main.c: 321: currentIndex = 0;
  4321  00CF  01CE               	clrf	_currentIndex
  4322  00D0  01CF               	clrf	_currentIndex+1
  4323  00D1                     l2532:
  4324                           
  4325                           ;main.c: 322: };main.c: 323: setCurrent(currentValue[currentIndex],battery_voltage());
  4326  00D1  354E               	lslf	_currentIndex,w
  4327  00D2  3EA0               	addlw	(low (_currentValue| 0))& (0+255)
  4328  00D3  0086               	movwf	6
  4329  00D4  0187               	clrf	7
  4330  00D5  3F40               	moviw [0]fsr1
  4331  00D6  00BC               	movwf	setCurrent@microamps
  4332  00D7  3F41               	moviw [1]fsr1
  4333  00D8  00BD               	movwf	setCurrent@microamps+1
  4334  00D9  3185  2533  3180   	fcall	_battery_voltage
  4335  00DC  083B               	movf	?_battery_voltage+1,w
  4336  00DD  00BF               	movwf	setCurrent@Vdd_mv+1
  4337  00DE  083A               	movf	?_battery_voltage,w
  4338  00DF  00BE               	movwf	setCurrent@Vdd_mv
  4339  00E0  3181  2160  3180   	fcall	_setCurrent
  4340  00E3                     l2534:
  4341                           
  4342                           ;main.c: 324: };main.c: 325: if(STATE_FREQUENCY == interfaceState){
  4343  00E3  3002               	movlw	2
  4344  00E4  0020               	movlb	0	; select bank0
  4345  00E5  0656               	xorwf	_interfaceState,w
  4346  00E6  1D03               	btfss	3,2
  4347  00E7  28B6               	goto	l2516
  4348                           
  4349                           ;main.c: 326: frequencyIndex--;
  4350  00E8  30FF               	movlw	255
  4351  00E9  07D4               	addwf	_frequencyIndex,f
  4352  00EA  30FF               	movlw	255
  4353  00EB  3DD5               	addwfc	_frequencyIndex+1,f
  4354                           
  4355                           ;main.c: 327: if (frequencyIndex < 0)
  4356  00EC  1FD5               	btfss	_frequencyIndex+1,7
  4357  00ED  28F0               	goto	l2542
  4358                           
  4359                           ;main.c: 328: {;main.c: 329: frequencyIndex = 0;
  4360  00EE  01D4               	clrf	_frequencyIndex
  4361  00EF  01D5               	clrf	_frequencyIndex+1
  4362  00F0                     l2542:
  4363                           
  4364                           ;main.c: 330: };main.c: 331: setFrequency(frequencyValue[frequencyIndex]);
  4365  00F0  3554               	lslf	_frequencyIndex,w
  4366  00F1  3EB6               	addlw	(low (_frequencyValue| 0))& (0+255)
  4367  00F2  0086               	movwf	6
  4368  00F3  0187               	clrf	7
  4369  00F4  3F40               	moviw [0]fsr1
  4370  00F5  00BA               	movwf	setFrequency@frequency_hz
  4371  00F6  3F41               	moviw [1]fsr1
  4372  00F7  28B2               	goto	L1
  4373  00F8                     l2552:	
  4374                           ;main.c: 335: };main.c: 336: if(STATE_LOWBATTERY == interfaceState){
  4375                           
  4376                           ;main.c: 334: selectSomething();
  4377                           
  4378                           ;main.c: 332: };main.c: 333: if(STATE_RUNNING == interfaceState){
  4379                           
  4380                           
  4381                           ;main.c: 341: selectFrequency();
  4382  00F8  3185  258D  3180   	fcall	_selectFrequency
  4383                           
  4384                           ;main.c: 342: break;
  4385  00FB  293F               	goto	l2572
  4386  00FC                     l2554:
  4387                           
  4388                           ;main.c: 344: selectCurrent();
  4389  00FC  3185  25B6  3180   	fcall	_selectCurrent
  4390                           
  4391                           ;main.c: 345: break;
  4392  00FF  293F               	goto	l2572
  4393  0100                     l2556:
  4394                           
  4395                           ;main.c: 347: LED_red = 0;
  4396  0100  01DD               	clrf	_LED_red
  4397                           
  4398                           ;main.c: 348: LED_green = 255;
  4399  0101  30FF               	movlw	255
  4400  0102  00CA               	movwf	??_process_remote_command
  4401  0103  084A               	movf	??_process_remote_command,w
  4402  0104  00DC               	movwf	_LED_green
  4403                           
  4404                           ;main.c: 349: LED_blue = 0;
  4405  0105  01DB               	clrf	_LED_blue
  4406                           
  4407                           ;main.c: 350: printf("\n reset select");
  4408  0106  30DB               	movlw	low (STR_3| (0+32768))
  4409  0107  00A0               	movwf	printf@f
  4410  0108  3086               	movlw	high (STR_3| (0+32768))
  4411  0109  00A1               	movwf	printf@f+1
  4412  010A  3186  2644  3180   	fcall	_printf
  4413                           
  4414                           ;main.c: 351: flag = 0;
  4415  010D  01DA               	clrf	_flag
  4416                           
  4417                           ;main.c: 352: break;
  4418  010E  293F               	goto	l2572
  4419  010F                     l2566:
  4420                           
  4421                           ;main.c: 354: duty = 0;
  4422  010F  01D8               	clrf	_duty
  4423                           
  4424                           ;main.c: 355: break;
  4425  0110  293F               	goto	l2572
  4426  0111                     l2570:
  4427  0111  0020               	movlb	0	; select bank0
  4428  0112  084C               	movf	process_remote_command@code,w
  4429  0113  3E03               	addlw	3
  4430  0114  0086               	movwf	6
  4431  0115  0187               	clrf	7
  4432  0116  0801               	movf	1,w
  4433                           
  4434                           ; Switch size 1, requested type "simple"
  4435                           ; Number of cases is 13, Range of values is 8 to 176
  4436                           ; switch strategies available:
  4437                           ; Name         Instructions Cycles
  4438                           ; simple_byte           40    21 (average)
  4439                           ; jumptable            263     9 (fixed)
  4440                           ;	Chosen strategy is simple_byte
  4441  0117  3A08               	xorlw	8	; case 8
  4442  0118  1903               	skipnz
  4443  0119  2900               	goto	l2556
  4444  011A  3A18               	xorlw	24	; case 16
  4445  011B  1903               	skipnz
  4446  011C  28FC               	goto	l2554
  4447  011D  3A08               	xorlw	8	; case 24
  4448  011E  1903               	skipnz
  4449  011F  293F               	goto	l2572
  4450  0120  3A30               	xorlw	48	; case 40
  4451  0121  1903               	skipnz
  4452  0122  293F               	goto	l2572
  4453  0123  3A60               	xorlw	96	; case 72
  4454  0124  1903               	skipnz
  4455  0125  293F               	goto	l2572
  4456  0126  3A18               	xorlw	24	; case 80
  4457  0127  1903               	skipnz
  4458  0128  28F8               	goto	l2552
  4459  0129  3A08               	xorlw	8	; case 88
  4460  012A  1903               	skipnz
  4461  012B  293F               	goto	l2572
  4462  012C  3A30               	xorlw	48	; case 104
  4463  012D  1903               	skipnz
  4464  012E  293F               	goto	l2572
  4465  012F  3AE0               	xorlw	224	; case 136
  4466  0130  1903               	skipnz
  4467  0131  290F               	goto	l2566
  4468  0132  3A10               	xorlw	16	; case 152
  4469  0133  1903               	skipnz
  4470  0134  293F               	goto	l2572
  4471  0135  3A38               	xorlw	56	; case 160
  4472  0136  1903               	skipnz
  4473  0137  2867               	goto	l2500
  4474  0138  3A08               	xorlw	8	; case 168
  4475  0139  1903               	skipnz
  4476  013A  293F               	goto	l2572
  4477  013B  3A18               	xorlw	24	; case 176
  4478  013C  1903               	skipnz
  4479  013D  28C6               	goto	l2524
  4480  013E  293F               	goto	l2572
  4481  013F                     l2572:
  4482                           
  4483                           ;main.c: 374: setLEDColor(LED_red, LED_green, LED_blue);
  4484  013F  0020               	movlb	0	; select bank0
  4485  0140  085C               	movf	_LED_green,w
  4486  0141  00CA               	movwf	??_process_remote_command
  4487  0142  084A               	movf	??_process_remote_command,w
  4488  0143  00A0               	movwf	setLEDColor@green
  4489  0144  085B               	movf	_LED_blue,w
  4490  0145  00CB               	movwf	??_process_remote_command+1
  4491  0146  084B               	movf	??_process_remote_command+1,w
  4492  0147  00A1               	movwf	setLEDColor@blue
  4493  0148  085D               	movf	_LED_red,w
  4494  0149  3186  2660  3180   	fcall	_setLEDColor
  4495                           
  4496                           ;main.c: 375: _delay((unsigned long)((1000)*(4000000/4000.0)));
  4497  014C  3006               	movlw	6
  4498  014D  0020               	movlb	0	; select bank0
  4499  014E  00CB               	movwf	??_process_remote_command+1
  4500  014F  3013               	movlw	19
  4501  0150  00CA               	movwf	??_process_remote_command
  4502  0151  30AD               	movlw	173
  4503  0152                     u2127:
  4504  0152  0B89               	decfsz	9,f
  4505  0153  2952               	goto	u2127
  4506  0154  0BCA               	decfsz	??_process_remote_command,f
  4507  0155  2952               	goto	u2127
  4508  0156  0BCB               	decfsz	??_process_remote_command+1,f
  4509  0157  2952               	goto	u2127
  4510  0158  3200               	nop2
  4511                           
  4512                           ;main.c: 376: setLEDColor(0, 0, 0);
  4513  0159  0020               	movlb	0	; select bank0
  4514  015A  01A0               	clrf	setLEDColor@green
  4515  015B  01A1               	clrf	setLEDColor@blue
  4516  015C  3000               	movlw	0
  4517  015D  3186  2660         	fcall	_setLEDColor
  4518  015F  0008               	return
  4519  0160                     __end_of_process_remote_command:
  4520                           
  4521                           	psect	text3
  4522  03D3                     __ptext3:	
  4523 ;; *************** function _setFrequency *****************
  4524 ;; Defined at:
  4525 ;;		line 249 in file "main.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;  frequency_hz    2   26[BANK0 ] unsigned int 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  pr4_val         2   28[BANK0 ] int 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      void 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0, pclath, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 1F/0
  4536 ;;		On exit  : 1F/8
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4539 ;;      Params:         0       2       0       0       0       0       0       0
  4540 ;;      Locals:         0       2       0       0       0       0       0       0
  4541 ;;      Temps:          1       0       0       0       0       0       0       0
  4542 ;;      Totals:         1       4       0       0       0       0       0       0
  4543 ;;Total ram usage:        5 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    5
  4546 ;; This function calls:
  4547 ;;		___aldiv
  4548 ;;		___lmul
  4549 ;; This function is called by:
  4550 ;;		_process_remote_command
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           
  4555                           ;psect for function _setFrequency
  4556  03D3                     _setFrequency:
  4557                           
  4558                           ;main.c: 265: int16_t pr4_val = 1000000L / (96L * frequency_hz);
  4559                           
  4560                           ;incstack = 0
  4561                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  4562  03D3  083A               	movf	setFrequency@frequency_hz,w
  4563  03D4  00A0               	movwf	___lmul@multiplier
  4564  03D5  083B               	movf	setFrequency@frequency_hz+1,w
  4565  03D6  00A1               	movwf	___lmul@multiplier+1
  4566  03D7  01A2               	clrf	___lmul@multiplier+2
  4567  03D8  01A3               	clrf	___lmul@multiplier+3
  4568  03D9  3000               	movlw	0
  4569  03DA  00A7               	movwf	___lmul@multiplicand+3
  4570  03DB  3000               	movlw	0
  4571  03DC  00A6               	movwf	___lmul@multiplicand+2
  4572  03DD  3000               	movlw	0
  4573  03DE  00A5               	movwf	___lmul@multiplicand+1
  4574  03DF  3060               	movlw	96
  4575  03E0  00A4               	movwf	___lmul@multiplicand
  4576  03E1  3185  2504  3183   	fcall	___lmul
  4577  03E4  0823               	movf	?___lmul+3,w
  4578  03E5  00AF               	movwf	___aldiv@divisor+3
  4579  03E6  0822               	movf	?___lmul+2,w
  4580  03E7  00AE               	movwf	___aldiv@divisor+2
  4581  03E8  0821               	movf	?___lmul+1,w
  4582  03E9  00AD               	movwf	___aldiv@divisor+1
  4583  03EA  0820               	movf	?___lmul,w
  4584  03EB  00AC               	movwf	___aldiv@divisor
  4585  03EC  3000               	movlw	0
  4586  03ED  00B3               	movwf	___aldiv@dividend+3
  4587  03EE  300F               	movlw	15
  4588  03EF  00B2               	movwf	___aldiv@dividend+2
  4589  03F0  3042               	movlw	66
  4590  03F1  00B1               	movwf	___aldiv@dividend+1
  4591  03F2  3040               	movlw	64
  4592  03F3  00B0               	movwf	___aldiv@dividend
  4593  03F4  3181  21FB  3183   	fcall	___aldiv
  4594  03F7  082D               	movf	?___aldiv+1,w
  4595  03F8  00BD               	movwf	setFrequency@pr4_val+1
  4596  03F9  082C               	movf	?___aldiv,w
  4597  03FA  00BC               	movwf	setFrequency@pr4_val
  4598                           
  4599                           ;main.c: 266: if (pr4_val > 255){
  4600  03FB  083D               	movf	setFrequency@pr4_val+1,w
  4601  03FC  3A80               	xorlw	128
  4602  03FD  00FA               	movwf	??_setFrequency
  4603  03FE  3081               	movlw	129
  4604  03FF  027A               	subwf	??_setFrequency,w
  4605  0400  1D03               	skipz
  4606  0401  2C04               	goto	u1935
  4607  0402  3000               	movlw	0
  4608  0403  023C               	subwf	setFrequency@pr4_val,w
  4609  0404                     u1935:
  4610  0404  1C03               	skipc
  4611  0405  2C0B               	goto	l564
  4612                           
  4613                           ;main.c: 267: pr4_val = 255;
  4614  0406  30FF               	movlw	255
  4615  0407  0020               	movlb	0	; select bank0
  4616  0408  00BC               	movwf	setFrequency@pr4_val
  4617  0409  3000               	movlw	0
  4618  040A  00BD               	movwf	setFrequency@pr4_val+1
  4619  040B                     l564:
  4620                           
  4621                           ;main.c: 268: };main.c: 269: if (pr4_val < 68){
  4622  040B  0020               	movlb	0	; select bank0
  4623  040C  083D               	movf	setFrequency@pr4_val+1,w
  4624  040D  3A80               	xorlw	128
  4625  040E  00FA               	movwf	??_setFrequency
  4626  040F  3080               	movlw	128
  4627  0410  027A               	subwf	??_setFrequency,w
  4628  0411  1D03               	skipz
  4629  0412  2C15               	goto	u1945
  4630  0413  3044               	movlw	68
  4631  0414  023C               	subwf	setFrequency@pr4_val,w
  4632  0415                     u1945:
  4633  0415  1803               	skipnc
  4634  0416  2C1C               	goto	l565
  4635                           
  4636                           ;main.c: 270: pr4_val = 68;
  4637  0417  3044               	movlw	68
  4638  0418  0020               	movlb	0	; select bank0
  4639  0419  00BC               	movwf	setFrequency@pr4_val
  4640  041A  3000               	movlw	0
  4641  041B  00BD               	movwf	setFrequency@pr4_val+1
  4642  041C                     l565:
  4643                           
  4644                           ;main.c: 271: };main.c: 272: PR4 = pr4_val;
  4645  041C  0020               	movlb	0	; select bank0
  4646  041D  083C               	movf	setFrequency@pr4_val,w
  4647  041E  0028               	movlb	8	; select bank8
  4648  041F  0096               	movwf	22	;volatile
  4649  0420  0008               	return
  4650  0421                     __end_of_setFrequency:
  4651                           
  4652                           	psect	text4
  4653  0160                     __ptext4:	
  4654 ;; *************** function _setCurrent *****************
  4655 ;; Defined at:
  4656 ;;		line 237 in file "main.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;  microamps       2   28[BANK0 ] int 
  4659 ;;  Vdd_mv          2   30[BANK0 ] int 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  DACValue        2   40[BANK0 ] int 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      void 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0, pclath, cstack
  4666 ;; Tracked objects:
  4667 ;;		On entry : 1F/0
  4668 ;;		On exit  : 1F/2
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4671 ;;      Params:         0       4       0       0       0       0       0       0
  4672 ;;      Locals:         0       2       0       0       0       0       0       0
  4673 ;;      Temps:          0       8       0       0       0       0       0       0
  4674 ;;      Totals:         0      14       0       0       0       0       0       0
  4675 ;;Total ram usage:       14 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    5
  4678 ;; This function calls:
  4679 ;;		___aldiv
  4680 ;;		___awdiv
  4681 ;;		___lldiv
  4682 ;;		___lmul
  4683 ;; This function is called by:
  4684 ;;		_process_remote_command
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           
  4689                           ;psect for function _setCurrent
  4690  0160                     _setCurrent:
  4691                           
  4692                           ;main.c: 239: Vdac_mv = Vdd_mv - ((uint32_t)(4700) * microamps + 500) / 1000;
  4693                           
  4694                           ;incstack = 0
  4695                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  4696  0160  3000               	movlw	0
  4697  0161  00AF               	movwf	___lldiv@divisor+3
  4698  0162  3000               	movlw	0
  4699  0163  00AE               	movwf	___lldiv@divisor+2
  4700  0164  3003               	movlw	3
  4701  0165  00AD               	movwf	___lldiv@divisor+1
  4702  0166  30E8               	movlw	232
  4703  0167  00AC               	movwf	___lldiv@divisor
  4704  0168  30F4               	movlw	244
  4705  0169  00C0               	movwf	??_setCurrent
  4706  016A  3001               	movlw	1
  4707  016B  00C1               	movwf	??_setCurrent+1
  4708  016C  3000               	movlw	0
  4709  016D  00C2               	movwf	??_setCurrent+2
  4710  016E  3000               	movlw	0
  4711  016F  00C3               	movwf	??_setCurrent+3
  4712  0170  083C               	movf	setCurrent@microamps,w
  4713  0171  00A0               	movwf	___lmul@multiplier
  4714  0172  083D               	movf	setCurrent@microamps+1,w
  4715  0173  00A1               	movwf	___lmul@multiplier+1
  4716  0174  0D89               	rlf	9,f
  4717  0175  3B89               	subwfb	9,f
  4718  0176  0989               	comf	9,f
  4719  0177  00A2               	movwf	___lmul@multiplier+2
  4720  0178  00A3               	movwf	___lmul@multiplier+3
  4721  0179  3000               	movlw	0
  4722  017A  00A7               	movwf	___lmul@multiplicand+3
  4723  017B  3000               	movlw	0
  4724  017C  00A6               	movwf	___lmul@multiplicand+2
  4725  017D  3012               	movlw	18
  4726  017E  00A5               	movwf	___lmul@multiplicand+1
  4727  017F  305C               	movlw	92
  4728  0180  00A4               	movwf	___lmul@multiplicand
  4729  0181  3185  2504  3181   	fcall	___lmul
  4730  0184  0820               	movf	?___lmul,w
  4731  0185  07C0               	addwf	??_setCurrent,f
  4732  0186  0821               	movf	?___lmul+1,w
  4733  0187  3DC1               	addwfc	??_setCurrent+1,f
  4734  0188  0822               	movf	?___lmul+2,w
  4735  0189  3DC2               	addwfc	??_setCurrent+2,f
  4736  018A  0823               	movf	?___lmul+3,w
  4737  018B  3DC3               	addwfc	??_setCurrent+3,f
  4738  018C  0843               	movf	??_setCurrent+3,w
  4739  018D  00B3               	movwf	___lldiv@dividend+3
  4740  018E  0842               	movf	??_setCurrent+2,w
  4741  018F  00B2               	movwf	___lldiv@dividend+2
  4742  0190  0841               	movf	??_setCurrent+1,w
  4743  0191  00B1               	movwf	___lldiv@dividend+1
  4744  0192  0840               	movf	??_setCurrent,w
  4745  0193  00B0               	movwf	___lldiv@dividend
  4746  0194  3182  22E0  3181   	fcall	___lldiv
  4747  0197  082C               	movf	?___lldiv,w
  4748  0198  023E               	subwf	setCurrent@Vdd_mv,w
  4749  0199  00E1               	movwf	_Vdac_mv
  4750  019A  082D               	movf	?___lldiv+1,w
  4751  019B  3B3F               	subwfb	setCurrent@Vdd_mv+1,w
  4752  019C  00E2               	movwf	_Vdac_mv+1
  4753                           
  4754                           ;main.c: 240: int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  4755  019D  083E               	movf	setCurrent@Vdd_mv,w
  4756  019E  00AC               	movwf	___aldiv@divisor
  4757  019F  083F               	movf	setCurrent@Vdd_mv+1,w
  4758  01A0  00AD               	movwf	___aldiv@divisor+1
  4759  01A1  0D89               	rlf	9,f
  4760  01A2  3B89               	subwfb	9,f
  4761  01A3  0989               	comf	9,f
  4762  01A4  00AE               	movwf	___aldiv@divisor+2
  4763  01A5  00AF               	movwf	___aldiv@divisor+3
  4764  01A6  3002               	movlw	2
  4765  01A7  00A0               	movwf	___awdiv@divisor
  4766  01A8  3000               	movlw	0
  4767  01A9  00A1               	movwf	___awdiv@divisor+1
  4768  01AA  083F               	movf	setCurrent@Vdd_mv+1,w
  4769  01AB  00A3               	movwf	___awdiv@dividend+1
  4770  01AC  083E               	movf	setCurrent@Vdd_mv,w
  4771  01AD  00A2               	movwf	___awdiv@dividend
  4772  01AE  3183  2332  3181   	fcall	___awdiv
  4773  01B1  0820               	movf	?___awdiv,w
  4774  01B2  00C0               	movwf	??_setCurrent
  4775  01B3  0821               	movf	?___awdiv+1,w
  4776  01B4  00C1               	movwf	??_setCurrent+1
  4777  01B5  3000               	movlw	0
  4778  01B6  1BC1               	btfsc	??_setCurrent+1,7
  4779  01B7  30FF               	movlw	255
  4780  01B8  00C2               	movwf	??_setCurrent+2
  4781  01B9  00C3               	movwf	??_setCurrent+3
  4782  01BA  0861               	movf	_Vdac_mv,w
  4783  01BB  00C4               	movwf	??_setCurrent+4
  4784  01BC  0862               	movf	_Vdac_mv+1,w
  4785  01BD  00C5               	movwf	??_setCurrent+5
  4786  01BE  01C6               	clrf	??_setCurrent+6
  4787  01BF  01C7               	clrf	??_setCurrent+7
  4788  01C0  3008               	movlw	8
  4789  01C1                     u1905:
  4790  01C1  35C4               	lslf	??_setCurrent+4,f
  4791  01C2  0DC5               	rlf	??_setCurrent+5,f
  4792  01C3  0DC6               	rlf	??_setCurrent+6,f
  4793  01C4  0DC7               	rlf	??_setCurrent+7,f
  4794  01C5  0B89               	decfsz	9,f
  4795  01C6  29C1               	goto	u1905
  4796  01C7  0844               	movf	??_setCurrent+4,w
  4797  01C8  07C0               	addwf	??_setCurrent,f
  4798  01C9  0845               	movf	??_setCurrent+5,w
  4799  01CA  3DC1               	addwfc	??_setCurrent+1,f
  4800  01CB  0846               	movf	??_setCurrent+6,w
  4801  01CC  3DC2               	addwfc	??_setCurrent+2,f
  4802  01CD  0847               	movf	??_setCurrent+7,w
  4803  01CE  3DC3               	addwfc	??_setCurrent+3,f
  4804  01CF  0843               	movf	??_setCurrent+3,w
  4805  01D0  00B3               	movwf	___aldiv@dividend+3
  4806  01D1  0842               	movf	??_setCurrent+2,w
  4807  01D2  00B2               	movwf	___aldiv@dividend+2
  4808  01D3  0841               	movf	??_setCurrent+1,w
  4809  01D4  00B1               	movwf	___aldiv@dividend+1
  4810  01D5  0840               	movf	??_setCurrent,w
  4811  01D6  00B0               	movwf	___aldiv@dividend
  4812  01D7  3181  21FB  3181   	fcall	___aldiv
  4813  01DA  082D               	movf	?___aldiv+1,w
  4814  01DB  00C9               	movwf	setCurrent@DACValue+1
  4815  01DC  082C               	movf	?___aldiv,w
  4816  01DD  00C8               	movwf	setCurrent@DACValue
  4817                           
  4818                           ;main.c: 241: if(DACValue > 255){DACValue = 255;}
  4819  01DE  0849               	movf	setCurrent@DACValue+1,w
  4820  01DF  3A80               	xorlw	128
  4821  01E0  00C0               	movwf	??_setCurrent
  4822  01E1  3081               	movlw	129
  4823  01E2  0240               	subwf	??_setCurrent,w
  4824  01E3  1D03               	skipz
  4825  01E4  29E7               	goto	u1915
  4826  01E5  3000               	movlw	0
  4827  01E6  0248               	subwf	setCurrent@DACValue,w
  4828  01E7                     u1915:
  4829  01E7  1C03               	skipc
  4830  01E8  29EE               	goto	l2418
  4831  01E9  30FF               	movlw	255
  4832  01EA  0020               	movlb	0	; select bank0
  4833  01EB  00C8               	movwf	setCurrent@DACValue
  4834  01EC  3000               	movlw	0
  4835  01ED  00C9               	movwf	setCurrent@DACValue+1
  4836  01EE                     l2418:
  4837                           
  4838                           ;main.c: 242: if(DACValue < 0){DACValue = 0;}
  4839  01EE  0020               	movlb	0	; select bank0
  4840  01EF  1FC9               	btfss	setCurrent@DACValue+1,7
  4841  01F0  29F3               	goto	l2422
  4842  01F1  01C8               	clrf	setCurrent@DACValue
  4843  01F2  01C9               	clrf	setCurrent@DACValue+1
  4844  01F3                     l2422:
  4845                           
  4846                           ;main.c: 243: dac_value = DACValue;
  4847  01F3  0848               	movf	setCurrent@DACValue,w
  4848  01F4  00C0               	movwf	??_setCurrent
  4849  01F5  0840               	movf	??_setCurrent,w
  4850  01F6  00DE               	movwf	_dac_value
  4851                           
  4852                           ;main.c: 244: DAC1CON1 = DACValue;
  4853  01F7  0848               	movf	setCurrent@DACValue,w
  4854  01F8  0022               	movlb	2	; select bank2
  4855  01F9  0099               	movwf	25	;volatile
  4856  01FA  0008               	return
  4857  01FB                     __end_of_setCurrent:
  4858                           
  4859                           	psect	text5
  4860  0504                     __ptext5:	
  4861 ;; *************** function ___lmul *****************
  4862 ;; Defined at:
  4863 ;;		line 15 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/Umul32.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4866 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  product         4    8[BANK0 ] unsigned long 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  4    0[BANK0 ] unsigned long 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0
  4873 ;; Tracked objects:
  4874 ;;		On entry : 1F/0
  4875 ;;		On exit  : 1F/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4878 ;;      Params:         0       8       0       0       0       0       0       0
  4879 ;;      Locals:         0       4       0       0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0
  4881 ;;      Totals:         0      12       0       0       0       0       0       0
  4882 ;;Total ram usage:       12 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    4
  4885 ;; This function calls:
  4886 ;;		Nothing
  4887 ;; This function is called by:
  4888 ;;		_setCurrent
  4889 ;;		_setFrequency
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           
  4894                           ;psect for function ___lmul
  4895  0504                     ___lmul:
  4896                           
  4897                           ;incstack = 0
  4898                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4899  0504  3000               	movlw	0
  4900  0505  00AB               	movwf	___lmul@product+3
  4901  0506  3000               	movlw	0
  4902  0507  00AA               	movwf	___lmul@product+2
  4903  0508  3000               	movlw	0
  4904  0509  00A9               	movwf	___lmul@product+1
  4905  050A  3000               	movlw	0
  4906  050B  00A8               	movwf	___lmul@product
  4907  050C                     l1810:
  4908  050C  1C20               	btfss	___lmul@multiplier,0
  4909  050D  2D16               	goto	l1814
  4910  050E  0824               	movf	___lmul@multiplicand,w
  4911  050F  07A8               	addwf	___lmul@product,f
  4912  0510  0825               	movf	___lmul@multiplicand+1,w
  4913  0511  3DA9               	addwfc	___lmul@product+1,f
  4914  0512  0826               	movf	___lmul@multiplicand+2,w
  4915  0513  3DAA               	addwfc	___lmul@product+2,f
  4916  0514  0827               	movf	___lmul@multiplicand+3,w
  4917  0515  3DAB               	addwfc	___lmul@product+3,f
  4918  0516                     l1814:
  4919  0516  3001               	movlw	1
  4920  0517                     u925:
  4921  0517  35A4               	lslf	___lmul@multiplicand,f
  4922  0518  0DA5               	rlf	___lmul@multiplicand+1,f
  4923  0519  0DA6               	rlf	___lmul@multiplicand+2,f
  4924  051A  0DA7               	rlf	___lmul@multiplicand+3,f
  4925  051B  0B89               	decfsz	9,f
  4926  051C  2D17               	goto	u925
  4927  051D  3001               	movlw	1
  4928  051E                     u935:
  4929  051E  36A3               	lsrf	___lmul@multiplier+3,f
  4930  051F  0CA2               	rrf	___lmul@multiplier+2,f
  4931  0520  0CA1               	rrf	___lmul@multiplier+1,f
  4932  0521  0CA0               	rrf	___lmul@multiplier,f
  4933  0522  0B89               	decfsz	9,f
  4934  0523  2D1E               	goto	u935
  4935  0524  0823               	movf	___lmul@multiplier+3,w
  4936  0525  0422               	iorwf	___lmul@multiplier+2,w
  4937  0526  0421               	iorwf	___lmul@multiplier+1,w
  4938  0527  0420               	iorwf	___lmul@multiplier,w
  4939  0528  1D03               	skipz
  4940  0529  2D0C               	goto	l1810
  4941  052A  082B               	movf	___lmul@product+3,w
  4942  052B  00A3               	movwf	?___lmul+3
  4943  052C  082A               	movf	___lmul@product+2,w
  4944  052D  00A2               	movwf	?___lmul+2
  4945  052E  0829               	movf	___lmul@product+1,w
  4946  052F  00A1               	movwf	?___lmul+1
  4947  0530  0828               	movf	___lmul@product,w
  4948  0531  00A0               	movwf	?___lmul
  4949  0532  0008               	return
  4950  0533                     __end_of___lmul:
  4951                           
  4952                           	psect	text6
  4953  02E0                     __ptext6:	
  4954 ;; *************** function ___lldiv *****************
  4955 ;; Defined at:
  4956 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/__lldiv.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;  divisor         4   12[BANK0 ] unsigned long 
  4959 ;;  dividend        4   16[BANK0 ] unsigned long 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  quotient        4   20[BANK0 ] unsigned long 
  4962 ;;  counter         1   24[BANK0 ] unsigned char 
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  4   12[BANK0 ] unsigned long 
  4965 ;; Registers used:
  4966 ;;		wreg, status,2, status,0
  4967 ;; Tracked objects:
  4968 ;;		On entry : 1F/0
  4969 ;;		On exit  : 1F/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4972 ;;      Params:         0       8       0       0       0       0       0       0
  4973 ;;      Locals:         0       5       0       0       0       0       0       0
  4974 ;;      Temps:          1       0       0       0       0       0       0       0
  4975 ;;      Totals:         1      13       0       0       0       0       0       0
  4976 ;;Total ram usage:       14 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; Hardware stack levels required when called:    4
  4979 ;; This function calls:
  4980 ;;		Nothing
  4981 ;; This function is called by:
  4982 ;;		_setCurrent
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           
  4987                           ;psect for function ___lldiv
  4988  02E0                     ___lldiv:
  4989                           
  4990                           ;incstack = 0
  4991                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4992  02E0  3000               	movlw	0
  4993  02E1  00B7               	movwf	___lldiv@quotient+3
  4994  02E2  3000               	movlw	0
  4995  02E3  00B6               	movwf	___lldiv@quotient+2
  4996  02E4  3000               	movlw	0
  4997  02E5  00B5               	movwf	___lldiv@quotient+1
  4998  02E6  3000               	movlw	0
  4999  02E7  00B4               	movwf	___lldiv@quotient
  5000  02E8  082F               	movf	___lldiv@divisor+3,w
  5001  02E9  042E               	iorwf	___lldiv@divisor+2,w
  5002  02EA  042D               	iorwf	___lldiv@divisor+1,w
  5003  02EB  042C               	iorwf	___lldiv@divisor,w
  5004  02EC  1903               	skipnz
  5005  02ED  2B29               	goto	l2288
  5006  02EE  01B8               	clrf	___lldiv@counter
  5007  02EF  0AB8               	incf	___lldiv@counter,f
  5008  02F0                     l2274:
  5009  02F0  1BAF               	btfsc	___lldiv@divisor+3,7
  5010  02F1  2AFE               	goto	l2276
  5011  02F2  3001               	movlw	1
  5012  02F3                     u1625:
  5013  02F3  35AC               	lslf	___lldiv@divisor,f
  5014  02F4  0DAD               	rlf	___lldiv@divisor+1,f
  5015  02F5  0DAE               	rlf	___lldiv@divisor+2,f
  5016  02F6  0DAF               	rlf	___lldiv@divisor+3,f
  5017  02F7  0B89               	decfsz	9,f
  5018  02F8  2AF3               	goto	u1625
  5019  02F9  3001               	movlw	1
  5020  02FA  00F8               	movwf	??___lldiv
  5021  02FB  0878               	movf	??___lldiv,w
  5022  02FC  07B8               	addwf	___lldiv@counter,f
  5023  02FD  2AF0               	goto	l2274
  5024  02FE                     l2276:
  5025  02FE  3001               	movlw	1
  5026  02FF                     u1645:
  5027  02FF  35B4               	lslf	___lldiv@quotient,f
  5028  0300  0DB5               	rlf	___lldiv@quotient+1,f
  5029  0301  0DB6               	rlf	___lldiv@quotient+2,f
  5030  0302  0DB7               	rlf	___lldiv@quotient+3,f
  5031  0303  0B89               	decfsz	9,f
  5032  0304  2AFF               	goto	u1645
  5033  0305  082F               	movf	___lldiv@divisor+3,w
  5034  0306  0233               	subwf	___lldiv@dividend+3,w
  5035  0307  1D03               	skipz
  5036  0308  2B13               	goto	u1655
  5037  0309  082E               	movf	___lldiv@divisor+2,w
  5038  030A  0232               	subwf	___lldiv@dividend+2,w
  5039  030B  1D03               	skipz
  5040  030C  2B13               	goto	u1655
  5041  030D  082D               	movf	___lldiv@divisor+1,w
  5042  030E  0231               	subwf	___lldiv@dividend+1,w
  5043  030F  1D03               	skipz
  5044  0310  2B13               	goto	u1655
  5045  0311  082C               	movf	___lldiv@divisor,w
  5046  0312  0230               	subwf	___lldiv@dividend,w
  5047  0313                     u1655:
  5048  0313  1C03               	skipc
  5049  0314  2B1E               	goto	l2284
  5050  0315  082C               	movf	___lldiv@divisor,w
  5051  0316  02B0               	subwf	___lldiv@dividend,f
  5052  0317  082D               	movf	___lldiv@divisor+1,w
  5053  0318  3BB1               	subwfb	___lldiv@dividend+1,f
  5054  0319  082E               	movf	___lldiv@divisor+2,w
  5055  031A  3BB2               	subwfb	___lldiv@dividend+2,f
  5056  031B  082F               	movf	___lldiv@divisor+3,w
  5057  031C  3BB3               	subwfb	___lldiv@dividend+3,f
  5058  031D  1434               	bsf	___lldiv@quotient,0
  5059  031E                     l2284:
  5060  031E  3001               	movlw	1
  5061  031F                     u1665:
  5062  031F  36AF               	lsrf	___lldiv@divisor+3,f
  5063  0320  0CAE               	rrf	___lldiv@divisor+2,f
  5064  0321  0CAD               	rrf	___lldiv@divisor+1,f
  5065  0322  0CAC               	rrf	___lldiv@divisor,f
  5066  0323  0B89               	decfsz	9,f
  5067  0324  2B1F               	goto	u1665
  5068  0325  3001               	movlw	1
  5069  0326  02B8               	subwf	___lldiv@counter,f
  5070  0327  1D03               	btfss	3,2
  5071  0328  2AFE               	goto	l2276
  5072  0329                     l2288:
  5073  0329  0837               	movf	___lldiv@quotient+3,w
  5074  032A  00AF               	movwf	?___lldiv+3
  5075  032B  0836               	movf	___lldiv@quotient+2,w
  5076  032C  00AE               	movwf	?___lldiv+2
  5077  032D  0835               	movf	___lldiv@quotient+1,w
  5078  032E  00AD               	movwf	?___lldiv+1
  5079  032F  0834               	movf	___lldiv@quotient,w
  5080  0330  00AC               	movwf	?___lldiv
  5081  0331  0008               	return
  5082  0332                     __end_of___lldiv:
  5083                           
  5084                           	psect	text7
  5085  0332                     __ptext7:	
  5086 ;; *************** function ___awdiv *****************
  5087 ;; Defined at:
  5088 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/awdiv.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  divisor         2    0[BANK0 ] int 
  5091 ;;  dividend        2    2[BANK0 ] int 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  quotient        2    6[BANK0 ] int 
  5094 ;;  sign            1    5[BANK0 ] unsigned char 
  5095 ;;  counter         1    4[BANK0 ] unsigned char 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  2    0[BANK0 ] int 
  5098 ;; Registers used:
  5099 ;;		wreg, status,2, status,0
  5100 ;; Tracked objects:
  5101 ;;		On entry : 1F/0
  5102 ;;		On exit  : 1F/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5105 ;;      Params:         0       4       0       0       0       0       0       0
  5106 ;;      Locals:         0       4       0       0       0       0       0       0
  5107 ;;      Temps:          1       0       0       0       0       0       0       0
  5108 ;;      Totals:         1       8       0       0       0       0       0       0
  5109 ;;Total ram usage:        9 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:    4
  5112 ;; This function calls:
  5113 ;;		Nothing
  5114 ;; This function is called by:
  5115 ;;		_setCurrent
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           
  5120                           ;psect for function ___awdiv
  5121  0332                     ___awdiv:
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5125  0332  01A5               	clrf	___awdiv@sign
  5126  0333  1FA1               	btfss	___awdiv@divisor+1,7
  5127  0334  2B3C               	goto	l2340
  5128  0335  09A0               	comf	___awdiv@divisor,f
  5129  0336  09A1               	comf	___awdiv@divisor+1,f
  5130  0337  0AA0               	incf	___awdiv@divisor,f
  5131  0338  1903               	skipnz
  5132  0339  0AA1               	incf	___awdiv@divisor+1,f
  5133  033A  01A5               	clrf	___awdiv@sign
  5134  033B  0AA5               	incf	___awdiv@sign,f
  5135  033C                     l2340:
  5136  033C  1FA3               	btfss	___awdiv@dividend+1,7
  5137  033D  2B47               	goto	l2346
  5138  033E  09A2               	comf	___awdiv@dividend,f
  5139  033F  09A3               	comf	___awdiv@dividend+1,f
  5140  0340  0AA2               	incf	___awdiv@dividend,f
  5141  0341  1903               	skipnz
  5142  0342  0AA3               	incf	___awdiv@dividend+1,f
  5143  0343  3001               	movlw	1
  5144  0344  00F8               	movwf	??___awdiv
  5145  0345  0878               	movf	??___awdiv,w
  5146  0346  06A5               	xorwf	___awdiv@sign,f
  5147  0347                     l2346:
  5148  0347  01A6               	clrf	___awdiv@quotient
  5149  0348  01A7               	clrf	___awdiv@quotient+1
  5150  0349  0820               	movf	___awdiv@divisor,w
  5151  034A  0421               	iorwf	___awdiv@divisor+1,w
  5152  034B  1903               	btfsc	3,2
  5153  034C  2B76               	goto	l2368
  5154  034D  01A4               	clrf	___awdiv@counter
  5155  034E  0AA4               	incf	___awdiv@counter,f
  5156  034F                     l2356:
  5157  034F  1BA1               	btfsc	___awdiv@divisor+1,7
  5158  0350  2B5B               	goto	l2358
  5159  0351  3001               	movlw	1
  5160  0352                     u1815:
  5161  0352  35A0               	lslf	___awdiv@divisor,f
  5162  0353  0DA1               	rlf	___awdiv@divisor+1,f
  5163  0354  0B89               	decfsz	9,f
  5164  0355  2B52               	goto	u1815
  5165  0356  3001               	movlw	1
  5166  0357  00F8               	movwf	??___awdiv
  5167  0358  0878               	movf	??___awdiv,w
  5168  0359  07A4               	addwf	___awdiv@counter,f
  5169  035A  2B4F               	goto	l2356
  5170  035B                     l2358:
  5171  035B  3001               	movlw	1
  5172  035C                     u1835:
  5173  035C  35A6               	lslf	___awdiv@quotient,f
  5174  035D  0DA7               	rlf	___awdiv@quotient+1,f
  5175  035E  0B89               	decfsz	9,f
  5176  035F  2B5C               	goto	u1835
  5177  0360  0821               	movf	___awdiv@divisor+1,w
  5178  0361  0223               	subwf	___awdiv@dividend+1,w
  5179  0362  1D03               	skipz
  5180  0363  2B66               	goto	u1845
  5181  0364  0820               	movf	___awdiv@divisor,w
  5182  0365  0222               	subwf	___awdiv@dividend,w
  5183  0366                     u1845:
  5184  0366  1C03               	skipc
  5185  0367  2B6D               	goto	l2364
  5186  0368  0820               	movf	___awdiv@divisor,w
  5187  0369  02A2               	subwf	___awdiv@dividend,f
  5188  036A  0821               	movf	___awdiv@divisor+1,w
  5189  036B  3BA3               	subwfb	___awdiv@dividend+1,f
  5190  036C  1426               	bsf	___awdiv@quotient,0
  5191  036D                     l2364:
  5192  036D  3001               	movlw	1
  5193  036E                     u1855:
  5194  036E  36A1               	lsrf	___awdiv@divisor+1,f
  5195  036F  0CA0               	rrf	___awdiv@divisor,f
  5196  0370  0B89               	decfsz	9,f
  5197  0371  2B6E               	goto	u1855
  5198  0372  3001               	movlw	1
  5199  0373  02A4               	subwf	___awdiv@counter,f
  5200  0374  1D03               	btfss	3,2
  5201  0375  2B5B               	goto	l2358
  5202  0376                     l2368:
  5203  0376  0825               	movf	___awdiv@sign,w
  5204  0377  1903               	btfsc	3,2
  5205  0378  2B7E               	goto	l2372
  5206  0379  09A6               	comf	___awdiv@quotient,f
  5207  037A  09A7               	comf	___awdiv@quotient+1,f
  5208  037B  0AA6               	incf	___awdiv@quotient,f
  5209  037C  1903               	skipnz
  5210  037D  0AA7               	incf	___awdiv@quotient+1,f
  5211  037E                     l2372:
  5212  037E  0827               	movf	___awdiv@quotient+1,w
  5213  037F  00A1               	movwf	?___awdiv+1
  5214  0380  0826               	movf	___awdiv@quotient,w
  5215  0381  00A0               	movwf	?___awdiv
  5216  0382  0008               	return
  5217  0383                     __end_of___awdiv:
  5218                           
  5219                           	psect	text8
  5220  0383                     __ptext8:	
  5221 ;; *************** function _selectSomething *****************
  5222 ;; Defined at:
  5223 ;;		line 197 in file "main.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;		None
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;		None
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  1    wreg      void 
  5230 ;; Registers used:
  5231 ;;		wreg, status,2, status,0, pclath, cstack
  5232 ;; Tracked objects:
  5233 ;;		On entry : 1F/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5237 ;;      Params:         0       0       0       0       0       0       0       0
  5238 ;;      Locals:         0       0       0       0       0       0       0       0
  5239 ;;      Temps:          0       2       0       0       0       0       0       0
  5240 ;;      Totals:         0       2       0       0       0       0       0       0
  5241 ;;Total ram usage:        2 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; Hardware stack levels required when called:    5
  5244 ;; This function calls:
  5245 ;;		_setLEDColor
  5246 ;; This function is called by:
  5247 ;;		_process_remote_command
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           
  5252                           ;psect for function _selectSomething
  5253  0383                     _selectSomething:
  5254                           
  5255                           ;main.c: 199: setLEDColor(255, 0, 0);
  5256                           
  5257                           ;incstack = 0
  5258                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  5259  0383  01A0               	clrf	setLEDColor@green
  5260  0384  01A1               	clrf	setLEDColor@blue
  5261  0385  30FF               	movlw	255
  5262  0386  3186  2660  3183   	fcall	_setLEDColor
  5263                           
  5264                           ;main.c: 200: _delay((unsigned long)((500)*(4000000/4000.0)));
  5265  0389  3003               	movlw	3
  5266  038A  0020               	movlb	0	; select bank0
  5267  038B  00A3               	movwf	??_selectSomething+1
  5268  038C  308A               	movlw	138
  5269  038D  00A2               	movwf	??_selectSomething
  5270  038E  3055               	movlw	85
  5271  038F                     u2137:
  5272  038F  0B89               	decfsz	9,f
  5273  0390  2B8F               	goto	u2137
  5274  0391  0BA2               	decfsz	??_selectSomething,f
  5275  0392  2B8F               	goto	u2137
  5276  0393  0BA3               	decfsz	??_selectSomething+1,f
  5277  0394  2B8F               	goto	u2137
  5278  0395  3200               	nop2
  5279                           
  5280                           ;main.c: 201: setLEDColor(0, 0, 0);
  5281  0396  0020               	movlb	0	; select bank0
  5282  0397  01A0               	clrf	setLEDColor@green
  5283  0398  01A1               	clrf	setLEDColor@blue
  5284  0399  3000               	movlw	0
  5285  039A  3186  2660  3183   	fcall	_setLEDColor
  5286                           
  5287                           ;main.c: 202: _delay((unsigned long)((500)*(4000000/4000.0)));
  5288  039D  3003               	movlw	3
  5289  039E  0020               	movlb	0	; select bank0
  5290  039F  00A3               	movwf	??_selectSomething+1
  5291  03A0  308A               	movlw	138
  5292  03A1  00A2               	movwf	??_selectSomething
  5293  03A2  3055               	movlw	85
  5294  03A3                     u2147:
  5295  03A3  0B89               	decfsz	9,f
  5296  03A4  2BA3               	goto	u2147
  5297  03A5  0BA2               	decfsz	??_selectSomething,f
  5298  03A6  2BA3               	goto	u2147
  5299  03A7  0BA3               	decfsz	??_selectSomething+1,f
  5300  03A8  2BA3               	goto	u2147
  5301  03A9  3200               	nop2
  5302                           
  5303                           ;main.c: 203: setLEDColor(255, 0, 0);
  5304  03AA  0020               	movlb	0	; select bank0
  5305  03AB  01A0               	clrf	setLEDColor@green
  5306  03AC  01A1               	clrf	setLEDColor@blue
  5307  03AD  30FF               	movlw	255
  5308  03AE  3186  2660  3183   	fcall	_setLEDColor
  5309                           
  5310                           ;main.c: 204: _delay((unsigned long)((500)*(4000000/4000.0)));
  5311  03B1  3003               	movlw	3
  5312  03B2  0020               	movlb	0	; select bank0
  5313  03B3  00A3               	movwf	??_selectSomething+1
  5314  03B4  308A               	movlw	138
  5315  03B5  00A2               	movwf	??_selectSomething
  5316  03B6  3055               	movlw	85
  5317  03B7                     u2157:
  5318  03B7  0B89               	decfsz	9,f
  5319  03B8  2BB7               	goto	u2157
  5320  03B9  0BA2               	decfsz	??_selectSomething,f
  5321  03BA  2BB7               	goto	u2157
  5322  03BB  0BA3               	decfsz	??_selectSomething+1,f
  5323  03BC  2BB7               	goto	u2157
  5324  03BD  3200               	nop2
  5325                           
  5326                           ;main.c: 205: setLEDColor(0, 0, 0);
  5327  03BE  0020               	movlb	0	; select bank0
  5328  03BF  01A0               	clrf	setLEDColor@green
  5329  03C0  01A1               	clrf	setLEDColor@blue
  5330  03C1  3000               	movlw	0
  5331  03C2  3186  2660  3183   	fcall	_setLEDColor
  5332                           
  5333                           ;main.c: 206: _delay((unsigned long)((500)*(4000000/4000.0)));
  5334  03C5  3003               	movlw	3
  5335  03C6  0020               	movlb	0	; select bank0
  5336  03C7  00A3               	movwf	??_selectSomething+1
  5337  03C8  308A               	movlw	138
  5338  03C9  00A2               	movwf	??_selectSomething
  5339  03CA  3055               	movlw	85
  5340  03CB                     u2167:
  5341  03CB  0B89               	decfsz	9,f
  5342  03CC  2BCB               	goto	u2167
  5343  03CD  0BA2               	decfsz	??_selectSomething,f
  5344  03CE  2BCB               	goto	u2167
  5345  03CF  0BA3               	decfsz	??_selectSomething+1,f
  5346  03D0  2BCB               	goto	u2167
  5347  03D1  3200               	nop2
  5348  03D2  0008               	return
  5349  03D3                     __end_of_selectSomething:
  5350                           
  5351                           	psect	text9
  5352  058D                     __ptext9:	
  5353 ;; *************** function _selectFrequency *****************
  5354 ;; Defined at:
  5355 ;;		line 209 in file "main.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 1F/0
  5366 ;;		On exit  : 1F/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5369 ;;      Params:         0       0       0       0       0       0       0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0
  5371 ;;      Temps:          0       2       0       0       0       0       0       0
  5372 ;;      Totals:         0       2       0       0       0       0       0       0
  5373 ;;Total ram usage:        2 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    7
  5376 ;; This function calls:
  5377 ;;		_printf
  5378 ;;		_setLEDColor
  5379 ;; This function is called by:
  5380 ;;		_process_remote_command
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _selectFrequency
  5386  058D                     _selectFrequency:
  5387                           
  5388                           ;main.c: 210: interfaceState = STATE_FREQUENCY;
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in _selectFrequency: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5392  058D  3002               	movlw	2
  5393  058E  00A7               	movwf	??_selectFrequency
  5394  058F  0827               	movf	??_selectFrequency,w
  5395  0590  00D6               	movwf	_interfaceState
  5396                           
  5397                           ;main.c: 211: setLEDColor(255, 0, 255);
  5398  0591  01A0               	clrf	setLEDColor@green
  5399  0592  30FF               	movlw	255
  5400  0593  00A7               	movwf	??_selectFrequency
  5401  0594  0827               	movf	??_selectFrequency,w
  5402  0595  00A1               	movwf	setLEDColor@blue
  5403  0596  30FF               	movlw	255
  5404  0597  3186  2660  3185   	fcall	_setLEDColor
  5405                           
  5406                           ;main.c: 212: _delay((unsigned long)((1000)*(4000000/4000.0)));
  5407  059A  3006               	movlw	6
  5408  059B  0020               	movlb	0	; select bank0
  5409  059C  00A8               	movwf	??_selectFrequency+1
  5410  059D  3013               	movlw	19
  5411  059E  00A7               	movwf	??_selectFrequency
  5412  059F  30AD               	movlw	173
  5413  05A0                     u2177:
  5414  05A0  0B89               	decfsz	9,f
  5415  05A1  2DA0               	goto	u2177
  5416  05A2  0BA7               	decfsz	??_selectFrequency,f
  5417  05A3  2DA0               	goto	u2177
  5418  05A4  0BA8               	decfsz	??_selectFrequency+1,f
  5419  05A5  2DA0               	goto	u2177
  5420  05A6  3200               	nop2
  5421                           
  5422                           ;main.c: 213: setLEDColor(0, 0, 0);
  5423  05A7  0020               	movlb	0	; select bank0
  5424  05A8  01A0               	clrf	setLEDColor@green
  5425  05A9  01A1               	clrf	setLEDColor@blue
  5426  05AA  3000               	movlw	0
  5427  05AB  3186  2660  3185   	fcall	_setLEDColor
  5428                           
  5429                           ;main.c: 214: printf("\n Frequency selected");
  5430  05AE  308F               	movlw	low (STR_1| (0+32768))
  5431  05AF  0020               	movlb	0	; select bank0
  5432  05B0  00A0               	movwf	printf@f
  5433  05B1  3086               	movlw	high (STR_1| (0+32768))
  5434  05B2  00A1               	movwf	printf@f+1
  5435  05B3  3186  2644         	fcall	_printf
  5436  05B5  0008               	return
  5437  05B6                     __end_of_selectFrequency:
  5438                           
  5439                           	psect	text10
  5440  05B6                     __ptext10:	
  5441 ;; *************** function _selectCurrent *****************
  5442 ;; Defined at:
  5443 ;;		line 217 in file "main.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;		None
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;		None
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  1    wreg      void 
  5450 ;; Registers used:
  5451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 1F/0
  5454 ;;		On exit  : 1F/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5457 ;;      Params:         0       0       0       0       0       0       0       0
  5458 ;;      Locals:         0       0       0       0       0       0       0       0
  5459 ;;      Temps:          0       2       0       0       0       0       0       0
  5460 ;;      Totals:         0       2       0       0       0       0       0       0
  5461 ;;Total ram usage:        2 bytes
  5462 ;; Hardware stack levels used:    1
  5463 ;; Hardware stack levels required when called:    7
  5464 ;; This function calls:
  5465 ;;		_printf
  5466 ;;		_setLEDColor
  5467 ;; This function is called by:
  5468 ;;		_process_remote_command
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           
  5473                           ;psect for function _selectCurrent
  5474  05B6                     _selectCurrent:
  5475                           
  5476                           ;main.c: 218: interfaceState = STATE_CURRENT;
  5477                           
  5478                           ;incstack = 0
  5479                           ; Regs used in _selectCurrent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5480  05B6  01D6               	clrf	_interfaceState
  5481  05B7  0AD6               	incf	_interfaceState,f
  5482                           
  5483                           ;main.c: 219: setLEDColor(0, 0, 255);
  5484  05B8  01A0               	clrf	setLEDColor@green
  5485  05B9  30FF               	movlw	255
  5486  05BA  00A7               	movwf	??_selectCurrent
  5487  05BB  0827               	movf	??_selectCurrent,w
  5488  05BC  00A1               	movwf	setLEDColor@blue
  5489  05BD  3000               	movlw	0
  5490  05BE  3186  2660  3185   	fcall	_setLEDColor
  5491                           
  5492                           ;main.c: 220: _delay((unsigned long)((1000)*(4000000/4000.0)));
  5493  05C1  3006               	movlw	6
  5494  05C2  0020               	movlb	0	; select bank0
  5495  05C3  00A8               	movwf	??_selectCurrent+1
  5496  05C4  3013               	movlw	19
  5497  05C5  00A7               	movwf	??_selectCurrent
  5498  05C6  30AD               	movlw	173
  5499  05C7                     u2187:
  5500  05C7  0B89               	decfsz	9,f
  5501  05C8  2DC7               	goto	u2187
  5502  05C9  0BA7               	decfsz	??_selectCurrent,f
  5503  05CA  2DC7               	goto	u2187
  5504  05CB  0BA8               	decfsz	??_selectCurrent+1,f
  5505  05CC  2DC7               	goto	u2187
  5506  05CD  3200               	nop2
  5507                           
  5508                           ;main.c: 221: setLEDColor(0, 0, 0);
  5509  05CE  0020               	movlb	0	; select bank0
  5510  05CF  01A0               	clrf	setLEDColor@green
  5511  05D0  01A1               	clrf	setLEDColor@blue
  5512  05D1  3000               	movlw	0
  5513  05D2  3186  2660  3185   	fcall	_setLEDColor
  5514                           
  5515                           ;main.c: 222: printf("\n current selected");
  5516  05D5  30A4               	movlw	low (STR_2| (0+32768))
  5517  05D6  0020               	movlb	0	; select bank0
  5518  05D7  00A0               	movwf	printf@f
  5519  05D8  3086               	movlw	high (STR_2| (0+32768))
  5520  05D9  00A1               	movwf	printf@f+1
  5521  05DA  3186  2644         	fcall	_printf
  5522  05DC  0008               	return
  5523  05DD                     __end_of_selectCurrent:
  5524                           
  5525                           	psect	text11
  5526  0644                     __ptext11:	
  5527 ;; *************** function _printf *****************
  5528 ;; Defined at:
  5529 ;;		line 477 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/doprnt.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  5532 ;;		 -> STR_3(15), STR_2(19), STR_1(21), 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;  tmpval          4    0        struct .
  5535 ;;  cp              2    0        PTR const unsigned char 
  5536 ;;  len             2    0        unsigned int 
  5537 ;;  val             2    0        unsigned int 
  5538 ;;  c               1    6[BANK0 ] unsigned char 
  5539 ;;  ap              1    5[BANK0 ] PTR void [1]
  5540 ;;		 -> ?_printf(2), 
  5541 ;;  flag            1    0        unsigned char 
  5542 ;;  prec            1    0        char 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  2    0[BANK0 ] int 
  5545 ;; Registers used:
  5546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 1F/0
  5549 ;;		On exit  : 1F/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5552 ;;      Params:         0       2       0       0       0       0       0       0
  5553 ;;      Locals:         0       2       0       0       0       0       0       0
  5554 ;;      Temps:          0       3       0       0       0       0       0       0
  5555 ;;      Totals:         0       7       0       0       0       0       0       0
  5556 ;;Total ram usage:        7 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    6
  5559 ;; This function calls:
  5560 ;;		_putch
  5561 ;; This function is called by:
  5562 ;;		_selectFrequency
  5563 ;;		_selectCurrent
  5564 ;;		_process_remote_command
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           
  5569                           ;psect for function _printf
  5570  0644                     _printf:
  5571                           
  5572                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
  5573                           
  5574                           ;incstack = 0
  5575                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5576  0644  3022               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5577  0645  00A2               	movwf	??_printf
  5578  0646  0822               	movf	??_printf,w
  5579  0647  00A5               	movwf	printf@ap
  5580  0648                     l2266:	
  5581                           ;doprnt.c: 559: continue;
  5582                           
  5583                           ;doprnt.c: 553: while((c = *f++)) {
  5584                           
  5585  0648  0020               	movlb	0	; select bank0
  5586  0649  0821               	movf	printf@f+1,w
  5587  064A  00A3               	movwf	??_printf+1
  5588  064B  0820               	movf	printf@f,w
  5589  064C  00A2               	movwf	??_printf
  5590  064D  0AA0               	incf	printf@f,f
  5591  064E  1903               	skipnz
  5592  064F  0AA1               	incf	printf@f+1,f
  5593  0650  0822               	movf	??_printf,w
  5594  0651  0084               	movwf	4
  5595  0652  0823               	movf	??_printf+1,w
  5596  0653  0085               	movwf	5
  5597  0654  0800               	movf	0,w	;code access
  5598  0655  00A4               	movwf	??_printf+2
  5599  0656  0824               	movf	??_printf+2,w
  5600  0657  00A6               	movwf	printf@c
  5601  0658  0826               	movf	printf@c,w
  5602  0659  1903               	btfsc	3,2
  5603  065A  0008               	return
  5604                           
  5605                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
  5606  065B  0826               	movf	printf@c,w
  5607  065C  3187  275B  3186   	fcall	_putch
  5608  065F  2E48               	goto	l2266
  5609  0660                     __end_of_printf:
  5610                           
  5611                           	psect	text12
  5612  075B                     __ptext12:	
  5613 ;; *************** function _putch *****************
  5614 ;; Defined at:
  5615 ;;		line 146 in file "mcc_generated_files/eusart.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  txData          1    wreg     unsigned char 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  txData          1    3[COMMON] unsigned char 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      void 
  5622 ;; Registers used:
  5623 ;;		wreg, status,2, status,0, pclath, cstack
  5624 ;; Tracked objects:
  5625 ;;		On entry : 1F/0
  5626 ;;		On exit  : 1F/3
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5629 ;;      Params:         0       0       0       0       0       0       0       0
  5630 ;;      Locals:         1       0       0       0       0       0       0       0
  5631 ;;      Temps:          0       0       0       0       0       0       0       0
  5632 ;;      Totals:         1       0       0       0       0       0       0       0
  5633 ;;Total ram usage:        1 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; Hardware stack levels required when called:    5
  5636 ;; This function calls:
  5637 ;;		_EUSART_Write
  5638 ;; This function is called by:
  5639 ;;		_printf
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           
  5644                           ;psect for function _putch
  5645  075B                     _putch:
  5646                           
  5647                           ;incstack = 0
  5648                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  5649                           ;putch@txData stored from wreg
  5650  075B  00F9               	movwf	putch@txData
  5651                           
  5652                           ;eusart.c: 148: EUSART_Write(txData);
  5653  075C  0879               	movf	putch@txData,w
  5654  075D  3187  2742         	fcall	_EUSART_Write
  5655  075F  0008               	return
  5656  0760                     __end_of_putch:
  5657                           
  5658                           	psect	text13
  5659  0742                     __ptext13:	
  5660 ;; *************** function _EUSART_Write *****************
  5661 ;; Defined at:
  5662 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  txData          1    wreg     unsigned char 
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;  txData          1    2[COMMON] unsigned char 
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  1    wreg      void 
  5669 ;; Registers used:
  5670 ;;		wreg
  5671 ;; Tracked objects:
  5672 ;;		On entry : 1F/0
  5673 ;;		On exit  : 1F/3
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5676 ;;      Params:         0       0       0       0       0       0       0       0
  5677 ;;      Locals:         1       0       0       0       0       0       0       0
  5678 ;;      Temps:          0       0       0       0       0       0       0       0
  5679 ;;      Totals:         1       0       0       0       0       0       0       0
  5680 ;;Total ram usage:        1 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    4
  5683 ;; This function calls:
  5684 ;;		Nothing
  5685 ;; This function is called by:
  5686 ;;		_putch
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           
  5691                           ;psect for function _EUSART_Write
  5692  0742                     _EUSART_Write:
  5693                           
  5694                           ;incstack = 0
  5695                           ; Regs used in _EUSART_Write: [wreg]
  5696                           ;EUSART_Write@txData stored from wreg
  5697  0742  00F8               	movwf	EUSART_Write@txData
  5698  0743                     l213:	
  5699                           ;eusart.c: 135: {
  5700                           
  5701  0743  1E11               	btfss	17,4	;volatile
  5702  0744  2F43               	goto	l213
  5703                           
  5704                           ;eusart.c: 136: };eusart.c: 138: TX1REG = txData;
  5705  0745  0878               	movf	EUSART_Write@txData,w
  5706  0746  0023               	movlb	3	; select bank3
  5707  0747  009A               	movwf	26	;volatile
  5708  0748  0008               	return
  5709  0749                     __end_of_EUSART_Write:
  5710                           
  5711                           	psect	text14
  5712  0533                     __ptext14:	
  5713 ;; *************** function _battery_voltage *****************
  5714 ;; Defined at:
  5715 ;;		line 91 in file "main.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;		None
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;		None
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  2   26[BANK0 ] unsigned int 
  5722 ;; Registers used:
  5723 ;;		wreg, status,2, status,0, pclath, cstack
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 1F/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5729 ;;      Params:         0       2       0       0       0       0       0       0
  5730 ;;      Locals:         0       0       0       0       0       0       0       0
  5731 ;;      Temps:          0       0       0       0       0       0       0       0
  5732 ;;      Totals:         0       2       0       0       0       0       0       0
  5733 ;;Total ram usage:        2 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    5
  5736 ;; This function calls:
  5737 ;;		___aldiv
  5738 ;; This function is called by:
  5739 ;;		_process_remote_command
  5740 ;;		_main
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           
  5745                           ;psect for function _battery_voltage
  5746  0533                     _battery_voltage:
  5747                           
  5748                           ;main.c: 93: FVRCON = 0b10000001;
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  5752  0533  3081               	movlw	129
  5753  0534  0022               	movlb	2	; select bank2
  5754  0535  0097               	movwf	23	;volatile
  5755                           
  5756                           ;main.c: 94: ADCON0 = 0b01111101;
  5757  0536  307D               	movlw	125
  5758  0537  0021               	movlb	1	; select bank1
  5759  0538  009D               	movwf	29	;volatile
  5760                           
  5761                           ;main.c: 95: ADCON1 = 0b10010000;
  5762  0539  3090               	movlw	144
  5763  053A  009E               	movwf	30	;volatile
  5764  053B                     l523:	
  5765                           ;main.c: 96: while(!FVRCONbits.FVRRDY){ }
  5766                           
  5767  053B  0022               	movlb	2	; select bank2
  5768  053C  1F17               	btfss	23,6	;volatile
  5769  053D  2D3B               	goto	l523
  5770                           
  5771                           ;main.c: 97: __nop();
  5772  053E  0000               	nop
  5773                           
  5774                           ;main.c: 98: __nop();
  5775  053F  0000               	nop
  5776                           
  5777                           ;main.c: 99: __nop();
  5778  0540  0000               	nop
  5779                           
  5780                           ;main.c: 100: __nop();
  5781  0541  0000               	nop
  5782                           
  5783                           ;main.c: 101: __nop();
  5784  0542  0000               	nop
  5785                           
  5786                           ;main.c: 102: ADCON0bits.GO_nDONE = 1;
  5787  0543  0021               	movlb	1	; select bank1
  5788  0544  149D               	bsf	29,1	;volatile
  5789  0545                     l526:	
  5790                           ;main.c: 103: while(ADCON0bits.GO_nDONE){ }
  5791                           
  5792  0545  189D               	btfsc	29,1	;volatile
  5793  0546  2D45               	goto	l526
  5794                           
  5795                           ;main.c: 104: ADCON0bits.ADON = 0;
  5796  0547  101D               	bcf	29,0	;volatile
  5797                           
  5798                           ;main.c: 109: return 1047552L / ADRES;
  5799  0548  081B               	movf	27,w	;volatile
  5800  0549  0020               	movlb	0	; select bank0
  5801  054A  00AC               	movwf	___aldiv@divisor
  5802  054B  0021               	movlb	1	; select bank1
  5803  054C  081C               	movf	28,w	;volatile
  5804  054D  0020               	movlb	0	; select bank0
  5805  054E  00AD               	movwf	___aldiv@divisor+1
  5806  054F  01AE               	clrf	___aldiv@divisor+2
  5807  0550  01AF               	clrf	___aldiv@divisor+3
  5808  0551  3000               	movlw	0
  5809  0552  00B3               	movwf	___aldiv@dividend+3
  5810  0553  300F               	movlw	15
  5811  0554  00B2               	movwf	___aldiv@dividend+2
  5812  0555  30FC               	movlw	252
  5813  0556  00B1               	movwf	___aldiv@dividend+1
  5814  0557  3000               	movlw	0
  5815  0558  00B0               	movwf	___aldiv@dividend
  5816  0559  3181  21FB         	fcall	___aldiv
  5817  055B  082D               	movf	?___aldiv+1,w
  5818  055C  00BB               	movwf	?_battery_voltage+1
  5819  055D  082C               	movf	?___aldiv,w
  5820  055E  00BA               	movwf	?_battery_voltage
  5821  055F  0008               	return
  5822  0560                     __end_of_battery_voltage:
  5823                           
  5824                           	psect	text15
  5825  01FB                     __ptext15:	
  5826 ;; *************** function ___aldiv *****************
  5827 ;; Defined at:
  5828 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/aldiv.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;  divisor         4   12[BANK0 ] long 
  5831 ;;  dividend        4   16[BANK0 ] long 
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;  quotient        4   22[BANK0 ] long 
  5834 ;;  sign            1   21[BANK0 ] unsigned char 
  5835 ;;  counter         1   20[BANK0 ] unsigned char 
  5836 ;; Return value:  Size  Location     Type
  5837 ;;                  4   12[BANK0 ] long 
  5838 ;; Registers used:
  5839 ;;		wreg, status,2, status,0
  5840 ;; Tracked objects:
  5841 ;;		On entry : 1F/0
  5842 ;;		On exit  : 1F/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5845 ;;      Params:         0       8       0       0       0       0       0       0
  5846 ;;      Locals:         0       6       0       0       0       0       0       0
  5847 ;;      Temps:          1       0       0       0       0       0       0       0
  5848 ;;      Totals:         1      14       0       0       0       0       0       0
  5849 ;;Total ram usage:       15 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    4
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_battery_voltage
  5856 ;;		_setCurrent
  5857 ;;		_setFrequency
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           
  5862                           ;psect for function ___aldiv
  5863  01FB                     ___aldiv:
  5864                           
  5865                           ;incstack = 0
  5866                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5867  01FB  01B5               	clrf	___aldiv@sign
  5868  01FC  1FAF               	btfss	___aldiv@divisor+3,7
  5869  01FD  2A0B               	goto	l756
  5870  01FE  09AC               	comf	___aldiv@divisor,f
  5871  01FF  09AD               	comf	___aldiv@divisor+1,f
  5872  0200  09AE               	comf	___aldiv@divisor+2,f
  5873  0201  09AF               	comf	___aldiv@divisor+3,f
  5874  0202  0AAC               	incf	___aldiv@divisor,f
  5875  0203  1903               	skipnz
  5876  0204  0AAD               	incf	___aldiv@divisor+1,f
  5877  0205  1903               	skipnz
  5878  0206  0AAE               	incf	___aldiv@divisor+2,f
  5879  0207  1903               	skipnz
  5880  0208  0AAF               	incf	___aldiv@divisor+3,f
  5881  0209  01B5               	clrf	___aldiv@sign
  5882  020A  0AB5               	incf	___aldiv@sign,f
  5883  020B                     l756:
  5884  020B  1FB3               	btfss	___aldiv@dividend+3,7
  5885  020C  2A1C               	goto	l2302
  5886  020D  09B0               	comf	___aldiv@dividend,f
  5887  020E  09B1               	comf	___aldiv@dividend+1,f
  5888  020F  09B2               	comf	___aldiv@dividend+2,f
  5889  0210  09B3               	comf	___aldiv@dividend+3,f
  5890  0211  0AB0               	incf	___aldiv@dividend,f
  5891  0212  1903               	skipnz
  5892  0213  0AB1               	incf	___aldiv@dividend+1,f
  5893  0214  1903               	skipnz
  5894  0215  0AB2               	incf	___aldiv@dividend+2,f
  5895  0216  1903               	skipnz
  5896  0217  0AB3               	incf	___aldiv@dividend+3,f
  5897  0218  3001               	movlw	1
  5898  0219  00F9               	movwf	??___aldiv
  5899  021A  0879               	movf	??___aldiv,w
  5900  021B  06B5               	xorwf	___aldiv@sign,f
  5901  021C                     l2302:
  5902  021C  3000               	movlw	0
  5903  021D  00B9               	movwf	___aldiv@quotient+3
  5904  021E  3000               	movlw	0
  5905  021F  00B8               	movwf	___aldiv@quotient+2
  5906  0220  3000               	movlw	0
  5907  0221  00B7               	movwf	___aldiv@quotient+1
  5908  0222  3000               	movlw	0
  5909  0223  00B6               	movwf	___aldiv@quotient
  5910  0224  082F               	movf	___aldiv@divisor+3,w
  5911  0225  042E               	iorwf	___aldiv@divisor+2,w
  5912  0226  042D               	iorwf	___aldiv@divisor+1,w
  5913  0227  042C               	iorwf	___aldiv@divisor,w
  5914  0228  1903               	skipnz
  5915  0229  2A65               	goto	l2324
  5916  022A  01B4               	clrf	___aldiv@counter
  5917  022B  0AB4               	incf	___aldiv@counter,f
  5918  022C                     l2310:
  5919  022C  1BAF               	btfsc	___aldiv@divisor+3,7
  5920  022D  2A3A               	goto	l2312
  5921  022E  3001               	movlw	1
  5922  022F                     u1715:
  5923  022F  35AC               	lslf	___aldiv@divisor,f
  5924  0230  0DAD               	rlf	___aldiv@divisor+1,f
  5925  0231  0DAE               	rlf	___aldiv@divisor+2,f
  5926  0232  0DAF               	rlf	___aldiv@divisor+3,f
  5927  0233  0B89               	decfsz	9,f
  5928  0234  2A2F               	goto	u1715
  5929  0235  3001               	movlw	1
  5930  0236  00F9               	movwf	??___aldiv
  5931  0237  0879               	movf	??___aldiv,w
  5932  0238  07B4               	addwf	___aldiv@counter,f
  5933  0239  2A2C               	goto	l2310
  5934  023A                     l2312:
  5935  023A  3001               	movlw	1
  5936  023B                     u1735:
  5937  023B  35B6               	lslf	___aldiv@quotient,f
  5938  023C  0DB7               	rlf	___aldiv@quotient+1,f
  5939  023D  0DB8               	rlf	___aldiv@quotient+2,f
  5940  023E  0DB9               	rlf	___aldiv@quotient+3,f
  5941  023F  0B89               	decfsz	9,f
  5942  0240  2A3B               	goto	u1735
  5943  0241  082F               	movf	___aldiv@divisor+3,w
  5944  0242  0233               	subwf	___aldiv@dividend+3,w
  5945  0243  1D03               	skipz
  5946  0244  2A4F               	goto	u1745
  5947  0245  082E               	movf	___aldiv@divisor+2,w
  5948  0246  0232               	subwf	___aldiv@dividend+2,w
  5949  0247  1D03               	skipz
  5950  0248  2A4F               	goto	u1745
  5951  0249  082D               	movf	___aldiv@divisor+1,w
  5952  024A  0231               	subwf	___aldiv@dividend+1,w
  5953  024B  1D03               	skipz
  5954  024C  2A4F               	goto	u1745
  5955  024D  082C               	movf	___aldiv@divisor,w
  5956  024E  0230               	subwf	___aldiv@dividend,w
  5957  024F                     u1745:
  5958  024F  1C03               	skipc
  5959  0250  2A5A               	goto	l2320
  5960  0251  082C               	movf	___aldiv@divisor,w
  5961  0252  02B0               	subwf	___aldiv@dividend,f
  5962  0253  082D               	movf	___aldiv@divisor+1,w
  5963  0254  3BB1               	subwfb	___aldiv@dividend+1,f
  5964  0255  082E               	movf	___aldiv@divisor+2,w
  5965  0256  3BB2               	subwfb	___aldiv@dividend+2,f
  5966  0257  082F               	movf	___aldiv@divisor+3,w
  5967  0258  3BB3               	subwfb	___aldiv@dividend+3,f
  5968  0259  1436               	bsf	___aldiv@quotient,0
  5969  025A                     l2320:
  5970  025A  3001               	movlw	1
  5971  025B                     u1755:
  5972  025B  36AF               	lsrf	___aldiv@divisor+3,f
  5973  025C  0CAE               	rrf	___aldiv@divisor+2,f
  5974  025D  0CAD               	rrf	___aldiv@divisor+1,f
  5975  025E  0CAC               	rrf	___aldiv@divisor,f
  5976  025F  0B89               	decfsz	9,f
  5977  0260  2A5B               	goto	u1755
  5978  0261  3001               	movlw	1
  5979  0262  02B4               	subwf	___aldiv@counter,f
  5980  0263  1D03               	btfss	3,2
  5981  0264  2A3A               	goto	l2312
  5982  0265                     l2324:
  5983  0265  0835               	movf	___aldiv@sign,w
  5984  0266  1903               	btfsc	3,2
  5985  0267  2A73               	goto	l2328
  5986  0268  09B6               	comf	___aldiv@quotient,f
  5987  0269  09B7               	comf	___aldiv@quotient+1,f
  5988  026A  09B8               	comf	___aldiv@quotient+2,f
  5989  026B  09B9               	comf	___aldiv@quotient+3,f
  5990  026C  0AB6               	incf	___aldiv@quotient,f
  5991  026D  1903               	skipnz
  5992  026E  0AB7               	incf	___aldiv@quotient+1,f
  5993  026F  1903               	skipnz
  5994  0270  0AB8               	incf	___aldiv@quotient+2,f
  5995  0271  1903               	skipnz
  5996  0272  0AB9               	incf	___aldiv@quotient+3,f
  5997  0273                     l2328:
  5998  0273  0839               	movf	___aldiv@quotient+3,w
  5999  0274  00AF               	movwf	?___aldiv+3
  6000  0275  0838               	movf	___aldiv@quotient+2,w
  6001  0276  00AE               	movwf	?___aldiv+2
  6002  0277  0837               	movf	___aldiv@quotient+1,w
  6003  0278  00AD               	movwf	?___aldiv+1
  6004  0279  0836               	movf	___aldiv@quotient,w
  6005  027A  00AC               	movwf	?___aldiv
  6006  027B  0008               	return
  6007  027C                     __end_of___aldiv:
  6008                           
  6009                           	psect	text16
  6010  0560                     __ptext16:	
  6011 ;; *************** function _lowBattery *****************
  6012 ;; Defined at:
  6013 ;;		line 178 in file "main.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, status,2, status,0, pclath, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6027 ;;      Params:         0       0       0       0       0       0       0       0
  6028 ;;      Locals:         0       0       0       0       0       0       0       0
  6029 ;;      Temps:          0       2       0       0       0       0       0       0
  6030 ;;      Totals:         0       2       0       0       0       0       0       0
  6031 ;;Total ram usage:        2 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    5
  6034 ;; This function calls:
  6035 ;;		_setLEDColor
  6036 ;; This function is called by:
  6037 ;;		_main
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           
  6042                           ;psect for function _lowBattery
  6043  0560                     _lowBattery:
  6044                           
  6045                           ;main.c: 179: interfaceState = STATE_LOWBATTERY;
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in _lowBattery: [wreg+status,2+status,0+pclath+cstack]
  6049  0560  3003               	movlw	3
  6050  0561  0020               	movlb	0	; select bank0
  6051  0562  00A2               	movwf	??_lowBattery
  6052  0563  0822               	movf	??_lowBattery,w
  6053  0564  00D6               	movwf	_interfaceState
  6054                           
  6055                           ;main.c: 180: setLEDColor(255, 0, 0);
  6056  0565  01A0               	clrf	setLEDColor@green
  6057  0566  01A1               	clrf	setLEDColor@blue
  6058  0567  30FF               	movlw	255
  6059  0568  3186  2660  3185   	fcall	_setLEDColor
  6060                           
  6061                           ;main.c: 181: _delay((unsigned long)((250)*(4000000/4000.0)));
  6062  056B  3002               	movlw	2
  6063  056C  0020               	movlb	0	; select bank0
  6064  056D  00A3               	movwf	??_lowBattery+1
  6065  056E  3045               	movlw	69
  6066  056F  00A2               	movwf	??_lowBattery
  6067  0570  30A9               	movlw	169
  6068  0571                     u2197:
  6069  0571  0B89               	decfsz	9,f
  6070  0572  2D71               	goto	u2197
  6071  0573  0BA2               	decfsz	??_lowBattery,f
  6072  0574  2D71               	goto	u2197
  6073  0575  0BA3               	decfsz	??_lowBattery+1,f
  6074  0576  2D71               	goto	u2197
  6075  0577  3200               	nop2
  6076                           
  6077                           ;main.c: 182: setLEDColor(0, 0, 0);
  6078  0578  0020               	movlb	0	; select bank0
  6079  0579  01A0               	clrf	setLEDColor@green
  6080  057A  01A1               	clrf	setLEDColor@blue
  6081  057B  3000               	movlw	0
  6082  057C  3186  2660  3185   	fcall	_setLEDColor
  6083                           
  6084                           ;main.c: 183: _delay((unsigned long)((500)*(4000000/4000.0)));
  6085  057F  3003               	movlw	3
  6086  0580  0020               	movlb	0	; select bank0
  6087  0581  00A3               	movwf	??_lowBattery+1
  6088  0582  308A               	movlw	138
  6089  0583  00A2               	movwf	??_lowBattery
  6090  0584  3055               	movlw	85
  6091  0585                     u2207:
  6092  0585  0B89               	decfsz	9,f
  6093  0586  2D85               	goto	u2207
  6094  0587  0BA2               	decfsz	??_lowBattery,f
  6095  0588  2D85               	goto	u2207
  6096  0589  0BA3               	decfsz	??_lowBattery+1,f
  6097  058A  2D85               	goto	u2207
  6098  058B  3200               	nop2
  6099  058C  0008               	return
  6100  058D                     __end_of_lowBattery:
  6101                           
  6102                           	psect	text17
  6103  0660                     __ptext17:	
  6104 ;; *************** function _setLEDColor *****************
  6105 ;; Defined at:
  6106 ;;		line 157 in file "main.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  red             1    wreg     unsigned char 
  6109 ;;  green           1    0[BANK0 ] unsigned char 
  6110 ;;  blue            1    1[BANK0 ] unsigned char 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  red             1    3[COMMON] unsigned char 
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  1    wreg      void 
  6115 ;; Registers used:
  6116 ;;		wreg, status,2, status,0
  6117 ;; Tracked objects:
  6118 ;;		On entry : 1F/0
  6119 ;;		On exit  : 1F/C
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6122 ;;      Params:         0       2       0       0       0       0       0       0
  6123 ;;      Locals:         1       0       0       0       0       0       0       0
  6124 ;;      Temps:          1       0       0       0       0       0       0       0
  6125 ;;      Totals:         2       2       0       0       0       0       0       0
  6126 ;;Total ram usage:        4 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    4
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_lowBattery
  6133 ;;		_startUp
  6134 ;;		_selectSomething
  6135 ;;		_selectFrequency
  6136 ;;		_selectCurrent
  6137 ;;		_process_remote_command
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _setLEDColor
  6143  0660                     _setLEDColor:
  6144                           
  6145                           ;incstack = 0
  6146                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  6147                           ;setLEDColor@red stored from wreg
  6148  0660  00F9               	movwf	setLEDColor@red
  6149                           
  6150                           ;main.c: 164: if (0 == blue){
  6151  0661  0821               	movf	setLEDColor@blue,w
  6152  0662  1D03               	btfss	3,2
  6153  0663  2E67               	goto	l2254
  6154                           
  6155                           ;main.c: 165: TRISC |= 0b00100000;
  6156  0664  0021               	movlb	1	; select bank1
  6157  0665  168E               	bsf	14,5	;volatile
  6158                           
  6159                           ;main.c: 166: } else {
  6160  0666  2E6C               	goto	l2256
  6161  0667                     l2254:
  6162                           
  6163                           ;main.c: 167: TRISC &= 0b11011111;
  6164  0667  30DF               	movlw	223
  6165  0668  00F8               	movwf	??_setLEDColor
  6166  0669  0878               	movf	??_setLEDColor,w
  6167  066A  0021               	movlb	1	; select bank1
  6168  066B  058E               	andwf	14,f	;volatile
  6169  066C                     l2256:
  6170                           
  6171                           ;main.c: 168: };main.c: 169: CCPR1L = 255 - blue;
  6172  066C  0020               	movlb	0	; select bank0
  6173  066D  0921               	comf	setLEDColor@blue,w
  6174  066E  0025               	movlb	5	; select bank5
  6175  066F  0091               	movwf	17	;volatile
  6176                           
  6177                           ;main.c: 171: PWM3DCH = red;
  6178  0670  0879               	movf	setLEDColor@red,w
  6179  0671  002C               	movlb	12	; select bank12
  6180  0672  0098               	movwf	24	;volatile
  6181                           
  6182                           ;main.c: 173: PWM4DCH = green;
  6183  0673  0020               	movlb	0	; select bank0
  6184  0674  0820               	movf	setLEDColor@green,w
  6185  0675  002C               	movlb	12	; select bank12
  6186  0676  009B               	movwf	27	;volatile
  6187  0677  0008               	return
  6188  0678                     __end_of_setLEDColor:
  6189                           
  6190                           	psect	text18
  6191  0421                     __ptext18:	
  6192 ;; *************** function _initLED *****************
  6193 ;; Defined at:
  6194 ;;		line 116 in file "main.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;		None
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;		None
  6199 ;; Return value:  Size  Location     Type
  6200 ;;                  1    wreg      void 
  6201 ;; Registers used:
  6202 ;;		wreg, status,2, status,0
  6203 ;; Tracked objects:
  6204 ;;		On entry : 1F/A
  6205 ;;		On exit  : 1F/1
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6208 ;;      Params:         0       0       0       0       0       0       0       0
  6209 ;;      Locals:         0       0       0       0       0       0       0       0
  6210 ;;      Temps:          1       0       0       0       0       0       0       0
  6211 ;;      Totals:         1       0       0       0       0       0       0       0
  6212 ;;Total ram usage:        1 bytes
  6213 ;; Hardware stack levels used:    1
  6214 ;; Hardware stack levels required when called:    4
  6215 ;; This function calls:
  6216 ;;		Nothing
  6217 ;; This function is called by:
  6218 ;;		_main
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           
  6223                           ;psect for function _initLED
  6224  0421                     _initLED:
  6225                           
  6226                           ;main.c: 119: PR2 = 255;
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _initLED: [wreg+status,2+status,0]
  6230  0421  30FF               	movlw	255
  6231  0422  0020               	movlb	0	; select bank0
  6232  0423  009B               	movwf	27	;volatile
  6233                           
  6234                           ;main.c: 120: T2CONbits.T2CKPS = 0b10;
  6235  0424  081C               	movf	28,w	;volatile
  6236  0425  39FC               	andlw	-4
  6237  0426  3802               	iorlw	2
  6238  0427  009C               	movwf	28	;volatile
  6239                           
  6240                           ;main.c: 121: T2CONbits.TMR2ON = 1;
  6241  0428  151C               	bsf	28,2	;volatile
  6242                           
  6243                           ;main.c: 125: TRISC |= 0b00010000;
  6244  0429  0021               	movlb	1	; select bank1
  6245  042A  160E               	bsf	14,4	;volatile
  6246                           
  6247                           ;main.c: 126: RC4PPS = 0b01110;
  6248  042B  300E               	movlw	14
  6249  042C  003D               	movlb	29	; select bank29
  6250  042D  00A4               	movwf	36	;volatile
  6251                           
  6252                           ;main.c: 127: CCPTMRSbits.P3TSEL = 0b00;
  6253  042E  30CF               	movlw	-49
  6254  042F  0025               	movlb	5	; select bank5
  6255  0430  059E               	andwf	30,f	;volatile
  6256                           
  6257                           ;main.c: 128: PWM3DCH = 0;
  6258  0431  002C               	movlb	12	; select bank12
  6259  0432  0198               	clrf	24	;volatile
  6260                           
  6261                           ;main.c: 129: PWM3DCLbits.PWM3DCL = 0;
  6262  0433  303F               	movlw	-193
  6263  0434  0597               	andwf	23,f	;volatile
  6264                           
  6265                           ;main.c: 130: PWM3CONbits.PWM3POL = 1;
  6266  0435  1619               	bsf	25,4	;volatile
  6267                           
  6268                           ;main.c: 131: TRISC &= 0b11101111;
  6269  0436  30EF               	movlw	239
  6270  0437  00F8               	movwf	??_initLED
  6271  0438  0878               	movf	??_initLED,w
  6272  0439  0021               	movlb	1	; select bank1
  6273  043A  058E               	andwf	14,f	;volatile
  6274                           
  6275                           ;main.c: 132: PWM3CONbits.PWM3EN = 1;
  6276  043B  002C               	movlb	12	; select bank12
  6277  043C  1799               	bsf	25,7	;volatile
  6278                           
  6279                           ;main.c: 136: TRISA |= 0b00100000;
  6280  043D  0021               	movlb	1	; select bank1
  6281  043E  168C               	bsf	12,5	;volatile
  6282                           
  6283                           ;main.c: 137: RA5PPS = 0b01111;
  6284  043F  300F               	movlw	15
  6285  0440  003D               	movlb	29	; select bank29
  6286  0441  0095               	movwf	21	;volatile
  6287                           
  6288                           ;main.c: 138: CCPTMRSbits.P4TSEL = 0b00;
  6289  0442  303F               	movlw	-193
  6290  0443  0025               	movlb	5	; select bank5
  6291  0444  059E               	andwf	30,f	;volatile
  6292                           
  6293                           ;main.c: 139: PWM4DCH = 0;
  6294  0445  002C               	movlb	12	; select bank12
  6295  0446  019B               	clrf	27	;volatile
  6296                           
  6297                           ;main.c: 140: PWM4DCLbits.PWM4DCL = 0;
  6298  0447  303F               	movlw	-193
  6299  0448  059A               	andwf	26,f	;volatile
  6300                           
  6301                           ;main.c: 141: PWM4CONbits.PWM4POL = 1;
  6302  0449  161C               	bsf	28,4	;volatile
  6303                           
  6304                           ;main.c: 142: TRISA &= 0b11011111;
  6305  044A  30DF               	movlw	223
  6306  044B  00F8               	movwf	??_initLED
  6307  044C  0878               	movf	??_initLED,w
  6308  044D  0021               	movlb	1	; select bank1
  6309  044E  058C               	andwf	12,f	;volatile
  6310                           
  6311                           ;main.c: 143: PWM4CONbits.PWM4EN = 1;
  6312  044F  002C               	movlb	12	; select bank12
  6313  0450  179C               	bsf	28,7	;volatile
  6314                           
  6315                           ;main.c: 149: TRISC |= 0b00100000;
  6316  0451  0021               	movlb	1	; select bank1
  6317  0452  168E               	bsf	14,5	;volatile
  6318                           
  6319                           ;main.c: 150: RC5PPS = 0b01100;
  6320  0453  300C               	movlw	12
  6321  0454  003D               	movlb	29	; select bank29
  6322  0455  00A5               	movwf	37	;volatile
  6323                           
  6324                           ;main.c: 151: CCP1CONbits.CCP1M = 0b1100;
  6325  0456  0025               	movlb	5	; select bank5
  6326  0457  0813               	movf	19,w	;volatile
  6327  0458  39F0               	andlw	-16
  6328  0459  380C               	iorlw	12
  6329  045A  0093               	movwf	19	;volatile
  6330                           
  6331                           ;main.c: 152: CCPR1L = 255;
  6332  045B  30FF               	movlw	255
  6333  045C  0091               	movwf	17	;volatile
  6334                           
  6335                           ;main.c: 153: CCP1CONbits.DC1B = 0x3;
  6336  045D  3030               	movlw	48
  6337  045E  0493               	iorwf	19,f	;volatile
  6338                           
  6339                           ;main.c: 154: TRISC &= 0b11011111;
  6340  045F  30DF               	movlw	223
  6341  0460  00F8               	movwf	??_initLED
  6342  0461  0878               	movf	??_initLED,w
  6343  0462  0021               	movlb	1	; select bank1
  6344  0463  058E               	andwf	14,f	;volatile
  6345  0464  0008               	return
  6346  0465                     __end_of_initLED:
  6347                           
  6348                           	psect	text19
  6349  0623                     __ptext19:	
  6350 ;; *************** function _SYSTEM_Initialize *****************
  6351 ;; Defined at:
  6352 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;		None
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;		None
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  1    wreg      void 
  6359 ;; Registers used:
  6360 ;;		wreg, status,2, status,0, pclath, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : B1F/0
  6363 ;;		On exit  : 1F/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6366 ;;      Params:         0       0       0       0       0       0       0       0
  6367 ;;      Locals:         0       0       0       0       0       0       0       0
  6368 ;;      Temps:          0       0       0       0       0       0       0       0
  6369 ;;      Totals:         0       0       0       0       0       0       0       0
  6370 ;;Total ram usage:        0 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    6
  6373 ;; This function calls:
  6374 ;;		_DAC_Initialize
  6375 ;;		_EUSART_Initialize
  6376 ;;		_EXT_INT_Initialize
  6377 ;;		_OPA1_Initialize
  6378 ;;		_OPA2_Initialize
  6379 ;;		_OSCILLATOR_Initialize
  6380 ;;		_PIN_MANAGER_Initialize
  6381 ;;		_TMR0_Initialize
  6382 ;;		_TMR2_Initialize
  6383 ;;		_TMR4_Initialize
  6384 ;;		_WDT_Initialize
  6385 ;; This function is called by:
  6386 ;;		_main
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           
  6391                           ;psect for function _SYSTEM_Initialize
  6392  0623                     _SYSTEM_Initialize:
  6393                           
  6394                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  6395                           
  6396                           ;incstack = 0
  6397                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6398  0623  3184  24A2  3186   	fcall	_PIN_MANAGER_Initialize
  6399                           
  6400                           ;mcc.c: 54: OSCILLATOR_Initialize();
  6401  0626  3187  2722  3186   	fcall	_OSCILLATOR_Initialize
  6402                           
  6403                           ;mcc.c: 55: WDT_Initialize();
  6404  0629  3187  2773  3186   	fcall	_WDT_Initialize
  6405                           
  6406                           ;mcc.c: 56: DAC_Initialize();
  6407  062C  3187  2755  3186   	fcall	_DAC_Initialize
  6408                           
  6409                           ;mcc.c: 57: OPA1_Initialize();
  6410  062F  3187  277B  3186   	fcall	_OPA1_Initialize
  6411                           
  6412                           ;mcc.c: 58: TMR4_Initialize();
  6413  0632  3186  26B7  3186   	fcall	_TMR4_Initialize
  6414                           
  6415                           ;mcc.c: 59: OPA2_Initialize();
  6416  0635  3187  2777  3186   	fcall	_OPA2_Initialize
  6417                           
  6418                           ;mcc.c: 60: TMR2_Initialize();
  6419  0638  3187  271A  3186   	fcall	_TMR2_Initialize
  6420                           
  6421                           ;mcc.c: 61: EXT_INT_Initialize();
  6422  063B  3186  26F8  3186   	fcall	_EXT_INT_Initialize
  6423                           
  6424                           ;mcc.c: 62: TMR0_Initialize();
  6425  063E  3186  26CA  3186   	fcall	_TMR0_Initialize
  6426                           
  6427                           ;mcc.c: 63: EUSART_Initialize();
  6428  0641  3185  25DD         	fcall	_EUSART_Initialize
  6429  0643  0008               	return
  6430  0644                     __end_of_SYSTEM_Initialize:
  6431                           
  6432                           	psect	text20
  6433  0773                     __ptext20:	
  6434 ;; *************** function _WDT_Initialize *****************
  6435 ;; Defined at:
  6436 ;;		line 78 in file "mcc_generated_files/mcc.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;		None
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      void 
  6443 ;; Registers used:
  6444 ;;		wreg
  6445 ;; Tracked objects:
  6446 ;;		On entry : B1F/2
  6447 ;;		On exit  : B1F/1
  6448 ;;		Unchanged: B00/0
  6449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6450 ;;      Params:         0       0       0       0       0       0       0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0       0
  6452 ;;      Temps:          0       0       0       0       0       0       0       0
  6453 ;;      Totals:         0       0       0       0       0       0       0       0
  6454 ;;Total ram usage:        0 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    4
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_SYSTEM_Initialize
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           
  6465                           ;psect for function _WDT_Initialize
  6466  0773                     _WDT_Initialize:
  6467                           
  6468                           ;mcc.c: 81: WDTCON = 0x16;
  6469                           
  6470                           ;incstack = 0
  6471                           ; Regs used in _WDT_Initialize: [wreg]
  6472  0773  3016               	movlw	22
  6473  0774  0021               	movlb	1	; select bank1
  6474  0775  0097               	movwf	23	;volatile
  6475  0776  0008               	return
  6476  0777                     __end_of_WDT_Initialize:
  6477                           
  6478                           	psect	text21
  6479  06B7                     __ptext21:	
  6480 ;; *************** function _TMR4_Initialize *****************
  6481 ;; Defined at:
  6482 ;;		line 64 in file "mcc_generated_files/tmr4.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;		None
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;		None
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  1    wreg      void 
  6489 ;; Registers used:
  6490 ;;		wreg, status,2, status,0, pclath, cstack
  6491 ;; Tracked objects:
  6492 ;;		On entry : 1F/A
  6493 ;;		On exit  : 1F/8
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6496 ;;      Params:         0       0       0       0       0       0       0       0
  6497 ;;      Locals:         0       0       0       0       0       0       0       0
  6498 ;;      Temps:          0       0       0       0       0       0       0       0
  6499 ;;      Totals:         0       0       0       0       0       0       0       0
  6500 ;;Total ram usage:        0 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    5
  6503 ;; This function calls:
  6504 ;;		_TMR4_SetInterruptHandler
  6505 ;; This function is called by:
  6506 ;;		_SYSTEM_Initialize
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           
  6511                           ;psect for function _TMR4_Initialize
  6512  06B7                     _TMR4_Initialize:
  6513                           
  6514                           ;tmr4.c: 69: PR4 = 0x04;
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6518  06B7  3004               	movlw	4
  6519  06B8  0028               	movlb	8	; select bank8
  6520  06B9  0096               	movwf	22	;volatile
  6521                           
  6522                           ;tmr4.c: 72: TMR4 = 0x00;
  6523  06BA  0195               	clrf	21	;volatile
  6524                           
  6525                           ;tmr4.c: 75: PIR2bits.TMR4IF = 0;
  6526  06BB  0020               	movlb	0	; select bank0
  6527  06BC  1092               	bcf	18,1	;volatile
  6528                           
  6529                           ;tmr4.c: 78: PIE2bits.TMR4IE = 1;
  6530  06BD  0021               	movlb	1	; select bank1
  6531  06BE  1492               	bsf	18,1	;volatile
  6532                           
  6533                           ;tmr4.c: 81: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
  6534  06BF  3078               	movlw	low _TMR4_DefaultInterruptHandler
  6535  06C0  0020               	movlb	0	; select bank0
  6536  06C1  00A0               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  6537  06C2  3006               	movlw	high _TMR4_DefaultInterruptHandler
  6538  06C3  00A1               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  6539  06C4  3187  2760         	fcall	_TMR4_SetInterruptHandler
  6540                           
  6541                           ;tmr4.c: 84: T4CON = 0x16;
  6542  06C6  3016               	movlw	22
  6543  06C7  0028               	movlb	8	; select bank8
  6544  06C8  0097               	movwf	23	;volatile
  6545  06C9  0008               	return
  6546  06CA                     __end_of_TMR4_Initialize:
  6547                           
  6548                           	psect	text22
  6549  0760                     __ptext22:	
  6550 ;; *************** function _TMR4_SetInterruptHandler *****************
  6551 ;; Defined at:
  6552 ;;		line 132 in file "mcc_generated_files/tmr4.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  6555 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;		None
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  1    wreg      void 
  6560 ;; Registers used:
  6561 ;;		wreg
  6562 ;; Tracked objects:
  6563 ;;		On entry : 1F/0
  6564 ;;		On exit  : 1F/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6567 ;;      Params:         0       2       0       0       0       0       0       0
  6568 ;;      Locals:         0       0       0       0       0       0       0       0
  6569 ;;      Temps:          0       0       0       0       0       0       0       0
  6570 ;;      Totals:         0       2       0       0       0       0       0       0
  6571 ;;Total ram usage:        2 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    4
  6574 ;; This function calls:
  6575 ;;		Nothing
  6576 ;; This function is called by:
  6577 ;;		_TMR4_Initialize
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function _TMR4_SetInterruptHandler
  6583  0760                     _TMR4_SetInterruptHandler:
  6584                           
  6585                           ;tmr4.c: 133: TMR4_InterruptHandler = InterruptHandler;
  6586                           
  6587                           ;incstack = 0
  6588                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  6589  0760  0821               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  6590  0761  00E4               	movwf	_TMR4_InterruptHandler+1
  6591  0762  0820               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  6592  0763  00E3               	movwf	_TMR4_InterruptHandler
  6593  0764  0008               	return
  6594  0765                     __end_of_TMR4_SetInterruptHandler:
  6595                           
  6596                           	psect	text23
  6597  071A                     __ptext23:	
  6598 ;; *************** function _TMR2_Initialize *****************
  6599 ;; Defined at:
  6600 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;		None
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;		None
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  1    wreg      void 
  6607 ;; Registers used:
  6608 ;;		wreg, status,2
  6609 ;; Tracked objects:
  6610 ;;		On entry : 1F/A
  6611 ;;		On exit  : 1F/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6614 ;;      Params:         0       0       0       0       0       0       0       0
  6615 ;;      Locals:         0       0       0       0       0       0       0       0
  6616 ;;      Temps:          0       0       0       0       0       0       0       0
  6617 ;;      Totals:         0       0       0       0       0       0       0       0
  6618 ;;Total ram usage:        0 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    4
  6621 ;; This function calls:
  6622 ;;		Nothing
  6623 ;; This function is called by:
  6624 ;;		_SYSTEM_Initialize
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           
  6629                           ;psect for function _TMR2_Initialize
  6630  071A                     _TMR2_Initialize:
  6631                           
  6632                           ;tmr2.c: 67: PR2 = 255;
  6633                           
  6634                           ;incstack = 0
  6635                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6636  071A  30FF               	movlw	255
  6637  071B  0020               	movlb	0	; select bank0
  6638  071C  009B               	movwf	27	;volatile
  6639                           
  6640                           ;tmr2.c: 70: TMR2 = 0x00;
  6641  071D  019A               	clrf	26	;volatile
  6642                           
  6643                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
  6644  071E  1091               	bcf	17,1	;volatile
  6645                           
  6646                           ;tmr2.c: 76: T2CON = 0x06;
  6647  071F  3006               	movlw	6
  6648  0720  009C               	movwf	28	;volatile
  6649  0721  0008               	return
  6650  0722                     __end_of_TMR2_Initialize:
  6651                           
  6652                           	psect	text24
  6653  06CA                     __ptext24:	
  6654 ;; *************** function _TMR0_Initialize *****************
  6655 ;; Defined at:
  6656 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;		None
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  1    wreg      void 
  6663 ;; Registers used:
  6664 ;;		wreg, status,2, status,0, pclath, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : 1F/0
  6667 ;;		On exit  : 1F/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6670 ;;      Params:         0       0       0       0       0       0       0       0
  6671 ;;      Locals:         0       0       0       0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0       0
  6673 ;;      Totals:         0       0       0       0       0       0       0       0
  6674 ;;Total ram usage:        0 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    5
  6677 ;; This function calls:
  6678 ;;		_TMR0_SetInterruptHandler
  6679 ;; This function is called by:
  6680 ;;		_SYSTEM_Initialize
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           
  6685                           ;psect for function _TMR0_Initialize
  6686  06CA                     _TMR0_Initialize:
  6687                           
  6688                           ;tmr0.c: 69: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 & 0x3F));
  6689                           
  6690                           ;incstack = 0
  6691                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6692  06CA  0021               	movlb	1	; select bank1
  6693  06CB  0815               	movf	21,w	;volatile
  6694  06CC  39C0               	andlw	192
  6695  06CD  3815               	iorlw	21
  6696  06CE  0095               	movwf	21	;volatile
  6697                           
  6698                           ;tmr0.c: 72: TMR0 = 0x00;
  6699  06CF  0020               	movlb	0	; select bank0
  6700  06D0  0195               	clrf	21	;volatile
  6701                           
  6702                           ;tmr0.c: 75: timer0ReloadVal= 0;
  6703  06D1  01DF               	clrf	_timer0ReloadVal	;volatile
  6704                           
  6705                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  6706  06D2  110B               	bcf	11,2	;volatile
  6707                           
  6708                           ;tmr0.c: 81: INTCONbits.TMR0IE = 1;
  6709  06D3  168B               	bsf	11,5	;volatile
  6710                           
  6711                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  6712  06D4  3084               	movlw	low _TMR0_DefaultInterruptHandler
  6713  06D5  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  6714  06D6  3007               	movlw	high _TMR0_DefaultInterruptHandler
  6715  06D7  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  6716  06D8  3187  2765         	fcall	_TMR0_SetInterruptHandler
  6717  06DA  0008               	return
  6718  06DB                     __end_of_TMR0_Initialize:
  6719                           
  6720                           	psect	text25
  6721  0765                     __ptext25:	
  6722 ;; *************** function _TMR0_SetInterruptHandler *****************
  6723 ;; Defined at:
  6724 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  6727 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;		None
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      void 
  6732 ;; Registers used:
  6733 ;;		wreg
  6734 ;; Tracked objects:
  6735 ;;		On entry : 1F/0
  6736 ;;		On exit  : 1F/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6739 ;;      Params:         0       2       0       0       0       0       0       0
  6740 ;;      Locals:         0       0       0       0       0       0       0       0
  6741 ;;      Temps:          0       0       0       0       0       0       0       0
  6742 ;;      Totals:         0       2       0       0       0       0       0       0
  6743 ;;Total ram usage:        2 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    4
  6746 ;; This function calls:
  6747 ;;		Nothing
  6748 ;; This function is called by:
  6749 ;;		_TMR0_Initialize
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           
  6754                           ;psect for function _TMR0_SetInterruptHandler
  6755  0765                     _TMR0_SetInterruptHandler:
  6756                           
  6757                           ;tmr0.c: 126: TMR0_InterruptHandler = InterruptHandler;
  6758                           
  6759                           ;incstack = 0
  6760                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  6761  0765  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  6762  0766  00E6               	movwf	_TMR0_InterruptHandler+1
  6763  0767  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  6764  0768  00E5               	movwf	_TMR0_InterruptHandler
  6765  0769  0008               	return
  6766  076A                     __end_of_TMR0_SetInterruptHandler:
  6767                           
  6768                           	psect	text26
  6769  04A2                     __ptext26:	
  6770 ;; *************** function _PIN_MANAGER_Initialize *****************
  6771 ;; Defined at:
  6772 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, status,2
  6781 ;; Tracked objects:
  6782 ;;		On entry : B1F/0
  6783 ;;		On exit  : B1F/1D
  6784 ;;		Unchanged: B00/0
  6785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6786 ;;      Params:         0       0       0       0       0       0       0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0       0
  6788 ;;      Temps:          0       0       0       0       0       0       0       0
  6789 ;;      Totals:         0       0       0       0       0       0       0       0
  6790 ;;Total ram usage:        0 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    4
  6793 ;; This function calls:
  6794 ;;		Nothing
  6795 ;; This function is called by:
  6796 ;;		_SYSTEM_Initialize
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           
  6801                           ;psect for function _PIN_MANAGER_Initialize
  6802  04A2                     _PIN_MANAGER_Initialize:
  6803                           
  6804                           ;pin_manager.c: 60: LATA = 0x00;
  6805                           
  6806                           ;incstack = 0
  6807                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6808  04A2  0022               	movlb	2	; select bank2
  6809  04A3  018C               	clrf	12	;volatile
  6810                           
  6811                           ;pin_manager.c: 61: LATB = 0x00;
  6812  04A4  018D               	clrf	13	;volatile
  6813                           
  6814                           ;pin_manager.c: 62: LATC = 0x00;
  6815  04A5  018E               	clrf	14	;volatile
  6816                           
  6817                           ;pin_manager.c: 67: TRISA = 0x04;
  6818  04A6  3004               	movlw	4
  6819  04A7  0021               	movlb	1	; select bank1
  6820  04A8  008C               	movwf	12	;volatile
  6821                           
  6822                           ;pin_manager.c: 68: TRISB = 0x30;
  6823  04A9  3030               	movlw	48
  6824  04AA  008D               	movwf	13	;volatile
  6825                           
  6826                           ;pin_manager.c: 69: TRISC = 0x50;
  6827  04AB  3050               	movlw	80
  6828  04AC  008E               	movwf	14	;volatile
  6829                           
  6830                           ;pin_manager.c: 74: ANSELC = 0x40;
  6831  04AD  3040               	movlw	64
  6832  04AE  0023               	movlb	3	; select bank3
  6833  04AF  008E               	movwf	14	;volatile
  6834                           
  6835                           ;pin_manager.c: 75: ANSELB = 0x10;
  6836  04B0  3010               	movlw	16
  6837  04B1  008D               	movwf	13	;volatile
  6838                           
  6839                           ;pin_manager.c: 76: ANSELA = 0x00;
  6840  04B2  018C               	clrf	12	;volatile
  6841                           
  6842                           ;pin_manager.c: 81: WPUB = 0x00;
  6843  04B3  0024               	movlb	4	; select bank4
  6844  04B4  018D               	clrf	13	;volatile
  6845                           
  6846                           ;pin_manager.c: 82: WPUA = 0x00;
  6847  04B5  018C               	clrf	12	;volatile
  6848                           
  6849                           ;pin_manager.c: 83: WPUC = 0x00;
  6850  04B6  018E               	clrf	14	;volatile
  6851                           
  6852                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 0;
  6853  04B7  0021               	movlb	1	; select bank1
  6854  04B8  1395               	bcf	21,7	;volatile
  6855                           
  6856                           ;pin_manager.c: 89: ODCONA = 0x00;
  6857  04B9  0025               	movlb	5	; select bank5
  6858  04BA  018C               	clrf	12	;volatile
  6859                           
  6860                           ;pin_manager.c: 90: ODCONB = 0x00;
  6861  04BB  018D               	clrf	13	;volatile
  6862                           
  6863                           ;pin_manager.c: 91: ODCONC = 0x00;
  6864  04BC  018E               	clrf	14	;volatile
  6865                           
  6866                           ;pin_manager.c: 96: SLRCONA = 0x37;
  6867  04BD  3037               	movlw	55
  6868  04BE  0026               	movlb	6	; select bank6
  6869  04BF  008C               	movwf	12	;volatile
  6870                           
  6871                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  6872  04C0  30F0               	movlw	240
  6873  04C1  008D               	movwf	13	;volatile
  6874                           
  6875                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  6876  04C2  30FF               	movlw	255
  6877  04C3  008E               	movwf	14	;volatile
  6878                           
  6879                           ;pin_manager.c: 103: INLVLA = 0x3F;
  6880  04C4  303F               	movlw	63
  6881  04C5  0027               	movlb	7	; select bank7
  6882  04C6  008C               	movwf	12	;volatile
  6883                           
  6884                           ;pin_manager.c: 104: INLVLB = 0xF0;
  6885  04C7  30F0               	movlw	240
  6886  04C8  008D               	movwf	13	;volatile
  6887                           
  6888                           ;pin_manager.c: 105: INLVLC = 0xFF;
  6889  04C9  30FF               	movlw	255
  6890  04CA  008E               	movwf	14	;volatile
  6891                           
  6892                           ;pin_manager.c: 113: INTCONbits.IOCIE = 1;
  6893  04CB  158B               	bsf	11,3	;volatile
  6894                           
  6895                           ;pin_manager.c: 116: INTPPS = 0x02;
  6896  04CC  3002               	movlw	2
  6897  04CD  003C               	movlb	28	; select bank28
  6898  04CE  0090               	movwf	16	;volatile
  6899                           
  6900                           ;pin_manager.c: 117: RXPPS = 0x0D;
  6901  04CF  300D               	movlw	13
  6902  04D0  00A4               	movwf	36	;volatile
  6903                           
  6904                           ;pin_manager.c: 118: RB7PPS = 0x14;
  6905  04D1  3014               	movlw	20
  6906  04D2  003D               	movlb	29	; select bank29
  6907  04D3  009F               	movwf	31	;volatile
  6908  04D4  0008               	return
  6909  04D5                     __end_of_PIN_MANAGER_Initialize:
  6910                           
  6911                           	psect	text27
  6912  0722                     __ptext27:	
  6913 ;; *************** function _OSCILLATOR_Initialize *****************
  6914 ;; Defined at:
  6915 ;;		line 66 in file "mcc_generated_files/mcc.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;		None
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  1    wreg      void 
  6922 ;; Registers used:
  6923 ;;		wreg, status,2
  6924 ;; Tracked objects:
  6925 ;;		On entry : B1F/1D
  6926 ;;		On exit  : B1F/2
  6927 ;;		Unchanged: B00/0
  6928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6929 ;;      Params:         0       0       0       0       0       0       0       0
  6930 ;;      Locals:         0       0       0       0       0       0       0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0       0
  6932 ;;      Totals:         0       0       0       0       0       0       0       0
  6933 ;;Total ram usage:        0 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    4
  6936 ;; This function calls:
  6937 ;;		Nothing
  6938 ;; This function is called by:
  6939 ;;		_SYSTEM_Initialize
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           
  6944                           ;psect for function _OSCILLATOR_Initialize
  6945  0722                     _OSCILLATOR_Initialize:
  6946                           
  6947                           ;mcc.c: 69: OSCCON = 0x6A;
  6948                           
  6949                           ;incstack = 0
  6950                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6951  0722  306A               	movlw	106
  6952  0723  0021               	movlb	1	; select bank1
  6953  0724  0099               	movwf	25	;volatile
  6954                           
  6955                           ;mcc.c: 71: OSCSTAT = 0x00;
  6956  0725  019A               	clrf	26	;volatile
  6957                           
  6958                           ;mcc.c: 73: OSCTUNE = 0x00;
  6959  0726  0198               	clrf	24	;volatile
  6960                           
  6961                           ;mcc.c: 75: BORCON = 0x00;
  6962  0727  0022               	movlb	2	; select bank2
  6963  0728  0196               	clrf	22	;volatile
  6964  0729  0008               	return
  6965  072A                     __end_of_OSCILLATOR_Initialize:
  6966                           
  6967                           	psect	text28
  6968  0777                     __ptext28:	
  6969 ;; *************** function _OPA2_Initialize *****************
  6970 ;; Defined at:
  6971 ;;		line 58 in file "mcc_generated_files/opa2.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;		None
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;		None
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      void 
  6978 ;; Registers used:
  6979 ;;		wreg
  6980 ;; Tracked objects:
  6981 ;;		On entry : 1D/A
  6982 ;;		On exit  : 1F/A
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6985 ;;      Params:         0       0       0       0       0       0       0       0
  6986 ;;      Locals:         0       0       0       0       0       0       0       0
  6987 ;;      Temps:          0       0       0       0       0       0       0       0
  6988 ;;      Totals:         0       0       0       0       0       0       0       0
  6989 ;;Total ram usage:        0 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    4
  6992 ;; This function calls:
  6993 ;;		Nothing
  6994 ;; This function is called by:
  6995 ;;		_SYSTEM_Initialize
  6996 ;;		_main
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           
  7001                           ;psect for function _OPA2_Initialize
  7002  0777                     _OPA2_Initialize:
  7003                           
  7004                           ;opa2.c: 61: OPA2CON = 0xC2;
  7005                           
  7006                           ;incstack = 0
  7007                           ; Regs used in _OPA2_Initialize: [wreg]
  7008  0777  30C2               	movlw	194
  7009  0778  002A               	movlb	10	; select bank10
  7010  0779  0095               	movwf	21	;volatile
  7011  077A  0008               	return
  7012  077B                     __end_of_OPA2_Initialize:
  7013                           
  7014                           	psect	text29
  7015  077B                     __ptext29:	
  7016 ;; *************** function _OPA1_Initialize *****************
  7017 ;; Defined at:
  7018 ;;		line 58 in file "mcc_generated_files/opa1.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;		None
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      void 
  7025 ;; Registers used:
  7026 ;;		wreg
  7027 ;; Tracked objects:
  7028 ;;		On entry : 1F/2
  7029 ;;		On exit  : 1F/A
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7032 ;;      Params:         0       0       0       0       0       0       0       0
  7033 ;;      Locals:         0       0       0       0       0       0       0       0
  7034 ;;      Temps:          0       0       0       0       0       0       0       0
  7035 ;;      Totals:         0       0       0       0       0       0       0       0
  7036 ;;Total ram usage:        0 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    4
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_SYSTEM_Initialize
  7043 ;;		_main
  7044 ;; This function uses a non-reentrant model
  7045 ;;
  7046                           
  7047                           
  7048                           ;psect for function _OPA1_Initialize
  7049  077B                     _OPA1_Initialize:
  7050                           
  7051                           ;opa1.c: 61: OPA1CON = 0xC2;
  7052                           
  7053                           ;incstack = 0
  7054                           ; Regs used in _OPA1_Initialize: [wreg]
  7055  077B  30C2               	movlw	194
  7056  077C  002A               	movlb	10	; select bank10
  7057  077D  0091               	movwf	17	;volatile
  7058  077E  0008               	return
  7059  077F                     __end_of_OPA1_Initialize:
  7060                           
  7061                           	psect	text30
  7062  06F8                     __ptext30:	
  7063 ;; *************** function _EXT_INT_Initialize *****************
  7064 ;; Defined at:
  7065 ;;		line 132 in file "mcc_generated_files/ext_int.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;		None
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;		None
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      void 
  7072 ;; Registers used:
  7073 ;;		wreg, status,2, status,0, pclath, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 1F/0
  7076 ;;		On exit  : 1F/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7079 ;;      Params:         0       0       0       0       0       0       0       0
  7080 ;;      Locals:         0       0       0       0       0       0       0       0
  7081 ;;      Temps:          0       0       0       0       0       0       0       0
  7082 ;;      Totals:         0       0       0       0       0       0       0       0
  7083 ;;Total ram usage:        0 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    5
  7086 ;; This function calls:
  7087 ;;		_INT_SetInterruptHandler
  7088 ;; This function is called by:
  7089 ;;		_SYSTEM_Initialize
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           
  7094                           ;psect for function _EXT_INT_Initialize
  7095  06F8                     _EXT_INT_Initialize:
  7096                           
  7097                           ;ext_int.c: 137: (INTCONbits.INTF = 0);
  7098                           
  7099                           ;incstack = 0
  7100                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7101  06F8  108B               	bcf	11,1	;volatile
  7102                           
  7103                           ;ext_int.c: 138: (OPTION_REGbits.INTEDG = 0);
  7104  06F9  0021               	movlb	1	; select bank1
  7105  06FA  1315               	bcf	21,6	;volatile
  7106                           
  7107                           ;ext_int.c: 140: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  7108  06FB  307C               	movlw	low _INT_DefaultInterruptHandler
  7109  06FC  0020               	movlb	0	; select bank0
  7110  06FD  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler
  7111  06FE  3002               	movlw	high _INT_DefaultInterruptHandler
  7112  06FF  00A1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  7113  0700  3187  276A         	fcall	_INT_SetInterruptHandler
  7114                           
  7115                           ;ext_int.c: 141: (INTCONbits.INTE = 1);
  7116  0702  160B               	bsf	11,4	;volatile
  7117  0703  0008               	return
  7118  0704                     __end_of_EXT_INT_Initialize:
  7119                           
  7120                           	psect	text31
  7121  076A                     __ptext31:	
  7122 ;; *************** function _INT_SetInterruptHandler *****************
  7123 ;; Defined at:
  7124 ;;		line 71 in file "mcc_generated_files/ext_int.c"
  7125 ;; Parameters:    Size  Location     Type
  7126 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  7127 ;;		 -> INT_DefaultInterruptHandler(1), 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;		None
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      void 
  7132 ;; Registers used:
  7133 ;;		wreg
  7134 ;; Tracked objects:
  7135 ;;		On entry : 1F/0
  7136 ;;		On exit  : 1F/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7139 ;;      Params:         0       2       0       0       0       0       0       0
  7140 ;;      Locals:         0       0       0       0       0       0       0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0       0
  7142 ;;      Totals:         0       2       0       0       0       0       0       0
  7143 ;;Total ram usage:        2 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    4
  7146 ;; This function calls:
  7147 ;;		Nothing
  7148 ;; This function is called by:
  7149 ;;		_EXT_INT_Initialize
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           
  7154                           ;psect for function _INT_SetInterruptHandler
  7155  076A                     _INT_SetInterruptHandler:
  7156                           
  7157                           ;ext_int.c: 72: INT_InterruptHandler = InterruptHandler;
  7158                           
  7159                           ;incstack = 0
  7160                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  7161  076A  0821               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  7162  076B  00E8               	movwf	_INT_InterruptHandler+1
  7163  076C  0820               	movf	INT_SetInterruptHandler@InterruptHandler,w
  7164  076D  00E7               	movwf	_INT_InterruptHandler
  7165  076E  0008               	return
  7166  076F                     __end_of_INT_SetInterruptHandler:
  7167                           
  7168                           	psect	text32
  7169  05DD                     __ptext32:	
  7170 ;; *************** function _EUSART_Initialize *****************
  7171 ;; Defined at:
  7172 ;;		line 66 in file "mcc_generated_files/eusart.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;		None
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;		None
  7177 ;; Return value:  Size  Location     Type
  7178 ;;                  1    wreg      void 
  7179 ;; Registers used:
  7180 ;;		wreg, status,2, status,0, pclath, cstack
  7181 ;; Tracked objects:
  7182 ;;		On entry : 1F/0
  7183 ;;		On exit  : 1F/0
  7184 ;;		Unchanged: 0/0
  7185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7186 ;;      Params:         0       0       0       0       0       0       0       0
  7187 ;;      Locals:         0       0       0       0       0       0       0       0
  7188 ;;      Temps:          0       0       0       0       0       0       0       0
  7189 ;;      Totals:         0       0       0       0       0       0       0       0
  7190 ;;Total ram usage:        0 bytes
  7191 ;; Hardware stack levels used:    1
  7192 ;; Hardware stack levels required when called:    5
  7193 ;; This function calls:
  7194 ;;		_EUSART_SetErrorHandler
  7195 ;;		_EUSART_SetFramingErrorHandler
  7196 ;;		_EUSART_SetOverrunErrorHandler
  7197 ;; This function is called by:
  7198 ;;		_SYSTEM_Initialize
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           
  7203                           ;psect for function _EUSART_Initialize
  7204  05DD                     _EUSART_Initialize:
  7205                           
  7206                           ;eusart.c: 71: BAUD1CON = 0x08;
  7207                           
  7208                           ;incstack = 0
  7209                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7210  05DD  3008               	movlw	8
  7211  05DE  0023               	movlb	3	; select bank3
  7212  05DF  009F               	movwf	31	;volatile
  7213                           
  7214                           ;eusart.c: 74: RC1STA = 0x90;
  7215  05E0  3090               	movlw	144
  7216  05E1  009D               	movwf	29	;volatile
  7217                           
  7218                           ;eusart.c: 77: TX1STA = 0x24;
  7219  05E2  3024               	movlw	36
  7220  05E3  009E               	movwf	30	;volatile
  7221                           
  7222                           ;eusart.c: 80: SP1BRGL = 0x08;
  7223  05E4  3008               	movlw	8
  7224  05E5  009B               	movwf	27	;volatile
  7225                           
  7226                           ;eusart.c: 83: SP1BRGH = 0x00;
  7227  05E6  019C               	clrf	28	;volatile
  7228                           
  7229                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  7230  05E7  3000               	movlw	0
  7231  05E8  0020               	movlb	0	; select bank0
  7232  05E9  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  7233  05EA  3000               	movlw	0
  7234  05EB  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  7235  05EC  3187  2732  3185   	fcall	_EUSART_SetFramingErrorHandler
  7236                           
  7237                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  7238  05EF  3000               	movlw	0
  7239  05F0  0020               	movlb	0	; select bank0
  7240  05F1  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  7241  05F2  3000               	movlw	0
  7242  05F3  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  7243  05F4  3187  272A  3185   	fcall	_EUSART_SetOverrunErrorHandler
  7244                           
  7245                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  7246  05F7  3000               	movlw	0
  7247  05F8  0020               	movlb	0	; select bank0
  7248  05F9  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  7249  05FA  3000               	movlw	0
  7250  05FB  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  7251  05FC  3187  273A         	fcall	_EUSART_SetErrorHandler
  7252                           
  7253                           ;eusart.c: 90: eusartRxLastError.status = 0;
  7254  05FE  0020               	movlb	0	; select bank0
  7255  05FF  01E0               	clrf	_eusartRxLastError	;volatile
  7256  0600  0008               	return
  7257  0601                     __end_of_EUSART_Initialize:
  7258                           
  7259                           	psect	text33
  7260  072A                     __ptext33:	
  7261 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7262 ;; Defined at:
  7263 ;;		line 170 in file "mcc_generated_files/eusart.c"
  7264 ;; Parameters:    Size  Location     Type
  7265 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  7266 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;		None
  7269 ;; Return value:  Size  Location     Type
  7270 ;;                  1    wreg      void 
  7271 ;; Registers used:
  7272 ;;		wreg
  7273 ;; Tracked objects:
  7274 ;;		On entry : 1F/0
  7275 ;;		On exit  : 1F/1
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7278 ;;      Params:         0       2       0       0       0       0       0       0
  7279 ;;      Locals:         0       0       0       0       0       0       0       0
  7280 ;;      Temps:          0       0       0       0       0       0       0       0
  7281 ;;      Totals:         0       2       0       0       0       0       0       0
  7282 ;;Total ram usage:        2 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    4
  7285 ;; This function calls:
  7286 ;;		Nothing
  7287 ;; This function is called by:
  7288 ;;		_EUSART_Initialize
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           
  7293                           ;psect for function _EUSART_SetOverrunErrorHandler
  7294  072A                     _EUSART_SetOverrunErrorHandler:
  7295                           
  7296                           ;eusart.c: 171: EUSART_OverrunErrorHandler = interruptHandler;
  7297                           
  7298                           ;incstack = 0
  7299                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7300  072A  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  7301  072B  0021               	movlb	1	; select bank1
  7302  072C  00E6               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  7303  072D  0020               	movlb	0	; select bank0
  7304  072E  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  7305  072F  0021               	movlb	1	; select bank1
  7306  0730  00E5               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  7307  0731  0008               	return
  7308  0732                     __end_of_EUSART_SetOverrunErrorHandler:
  7309                           
  7310                           	psect	text34
  7311  0732                     __ptext34:	
  7312 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7313 ;; Defined at:
  7314 ;;		line 166 in file "mcc_generated_files/eusart.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  7317 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;		None
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      void 
  7322 ;; Registers used:
  7323 ;;		wreg
  7324 ;; Tracked objects:
  7325 ;;		On entry : 1F/0
  7326 ;;		On exit  : 1F/1
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7329 ;;      Params:         0       2       0       0       0       0       0       0
  7330 ;;      Locals:         0       0       0       0       0       0       0       0
  7331 ;;      Temps:          0       0       0       0       0       0       0       0
  7332 ;;      Totals:         0       2       0       0       0       0       0       0
  7333 ;;Total ram usage:        2 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    4
  7336 ;; This function calls:
  7337 ;;		Nothing
  7338 ;; This function is called by:
  7339 ;;		_EUSART_Initialize
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           
  7344                           ;psect for function _EUSART_SetFramingErrorHandler
  7345  0732                     _EUSART_SetFramingErrorHandler:
  7346                           
  7347                           ;eusart.c: 167: EUSART_FramingErrorHandler = interruptHandler;
  7348                           
  7349                           ;incstack = 0
  7350                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7351  0732  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7352  0733  0021               	movlb	1	; select bank1
  7353  0734  00E8               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  7354  0735  0020               	movlb	0	; select bank0
  7355  0736  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7356  0737  0021               	movlb	1	; select bank1
  7357  0738  00E7               	movwf	_EUSART_FramingErrorHandler^(0+128)
  7358  0739  0008               	return
  7359  073A                     __end_of_EUSART_SetFramingErrorHandler:
  7360                           
  7361                           	psect	text35
  7362  073A                     __ptext35:	
  7363 ;; *************** function _EUSART_SetErrorHandler *****************
  7364 ;; Defined at:
  7365 ;;		line 174 in file "mcc_generated_files/eusart.c"
  7366 ;; Parameters:    Size  Location     Type
  7367 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  7368 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;		None
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  1    wreg      void 
  7373 ;; Registers used:
  7374 ;;		wreg
  7375 ;; Tracked objects:
  7376 ;;		On entry : 1F/0
  7377 ;;		On exit  : 1F/1
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7380 ;;      Params:         0       2       0       0       0       0       0       0
  7381 ;;      Locals:         0       0       0       0       0       0       0       0
  7382 ;;      Temps:          0       0       0       0       0       0       0       0
  7383 ;;      Totals:         0       2       0       0       0       0       0       0
  7384 ;;Total ram usage:        2 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; Hardware stack levels required when called:    4
  7387 ;; This function calls:
  7388 ;;		Nothing
  7389 ;; This function is called by:
  7390 ;;		_EUSART_Initialize
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           
  7395                           ;psect for function _EUSART_SetErrorHandler
  7396  073A                     _EUSART_SetErrorHandler:
  7397                           
  7398                           ;eusart.c: 175: EUSART_ErrorHandler = interruptHandler;
  7399                           
  7400                           ;incstack = 0
  7401                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7402  073A  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7403  073B  0021               	movlb	1	; select bank1
  7404  073C  00E4               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  7405  073D  0020               	movlb	0	; select bank0
  7406  073E  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7407  073F  0021               	movlb	1	; select bank1
  7408  0740  00E3               	movwf	_EUSART_ErrorHandler^(0+128)
  7409  0741  0008               	return
  7410  0742                     __end_of_EUSART_SetErrorHandler:
  7411                           
  7412                           	psect	text36
  7413  0755                     __ptext36:	
  7414 ;; *************** function _DAC_Initialize *****************
  7415 ;; Defined at:
  7416 ;;		line 58 in file "mcc_generated_files/dac.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;		None
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;		None
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      void 
  7423 ;; Registers used:
  7424 ;;		wreg
  7425 ;; Tracked objects:
  7426 ;;		On entry : 1E/0
  7427 ;;		On exit  : 1F/2
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7430 ;;      Params:         0       0       0       0       0       0       0       0
  7431 ;;      Locals:         0       0       0       0       0       0       0       0
  7432 ;;      Temps:          0       0       0       0       0       0       0       0
  7433 ;;      Totals:         0       0       0       0       0       0       0       0
  7434 ;;Total ram usage:        0 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    4
  7437 ;; This function calls:
  7438 ;;		Nothing
  7439 ;; This function is called by:
  7440 ;;		_SYSTEM_Initialize
  7441 ;;		_main
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _DAC_Initialize
  7447  0755                     _DAC_Initialize:
  7448                           
  7449                           ;dac.c: 61: DAC1CON0 = 0x80;
  7450                           
  7451                           ;incstack = 0
  7452                           ; Regs used in _DAC_Initialize: [wreg]
  7453  0755  3080               	movlw	128
  7454  0756  0022               	movlb	2	; select bank2
  7455  0757  0098               	movwf	24	;volatile
  7456                           
  7457                           ;dac.c: 63: DAC1CON1 = 0xFF;
  7458  0758  30FF               	movlw	255
  7459  0759  0099               	movwf	25	;volatile
  7460  075A  0008               	return
  7461  075B                     __end_of_DAC_Initialize:
  7462                           
  7463                           	psect	intentry
  7464  0004                     __pintentry:	
  7465 ;; *************** function _INTERRUPT_InterruptManager *****************
  7466 ;; Defined at:
  7467 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;		None
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;		None
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7481 ;;      Params:         0       0       0       0       0       0       0       0
  7482 ;;      Locals:         0       0       0       0       0       0       0       0
  7483 ;;      Temps:          0       0       0       0       0       0       0       0
  7484 ;;      Totals:         0       0       0       0       0       0       0       0
  7485 ;;Total ram usage:        0 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; Hardware stack levels required when called:    3
  7488 ;; This function calls:
  7489 ;;		_INT_ISR
  7490 ;;		_PIN_MANAGER_IOC
  7491 ;;		_TMR0_ISR
  7492 ;;		_TMR4_ISR
  7493 ;; This function is called by:
  7494 ;;		Interrupt level 1
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498  0004                     _INTERRUPT_InterruptManager:
  7499                           
  7500                           ;incstack = 0
  7501  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7502                           
  7503                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7504  0005  3180               	pagesel	$
  7505                           
  7506                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  7507  0006  1A8B               	btfsc	11,5	;volatile
  7508  0007  1D0B               	btfss	11,2	;volatile
  7509  0008  280D               	goto	i1l136
  7510                           
  7511                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: TMR0_ISR();
  7512  0009  3186  26EA  3180   	fcall	_TMR0_ISR
  7513                           
  7514                           ;interrupt_manager.c: 58: }
  7515  000C  2825               	goto	i1l146
  7516  000D                     i1l136:
  7517                           
  7518                           ;interrupt_manager.c: 59: else if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
  7519  000D  1A0B               	btfsc	11,4	;volatile
  7520  000E  1C8B               	btfss	11,1	;volatile
  7521  000F  2814               	goto	i1l138
  7522                           
  7523                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: INT_ISR();
  7524  0010  3187  277F  3180   	fcall	_INT_ISR
  7525                           
  7526                           ;interrupt_manager.c: 62: }
  7527  0013  2825               	goto	i1l146
  7528  0014                     i1l138:
  7529                           
  7530                           ;interrupt_manager.c: 63: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  7531  0014  198B               	btfsc	11,3	;volatile
  7532  0015  1C0B               	btfss	11,0	;volatile
  7533  0016  281B               	goto	i1l140
  7534                           
  7535                           ;interrupt_manager.c: 64: {;interrupt_manager.c: 65: PIN_MANAGER_IOC();
  7536  0017  3187  2785  3180   	fcall	_PIN_MANAGER_IOC
  7537                           
  7538                           ;interrupt_manager.c: 66: }
  7539  001A  2825               	goto	i1l146
  7540  001B                     i1l140:
  7541                           
  7542                           ;interrupt_manager.c: 67: else if(INTCONbits.PEIE == 1)
  7543  001B  1F0B               	btfss	11,6	;volatile
  7544  001C  2825               	goto	i1l146
  7545                           
  7546                           ;interrupt_manager.c: 68: {;interrupt_manager.c: 69: if(PIE2bits.TMR4IE == 1 && PIR2bits
      +                          .TMR4IF == 1)
  7547  001D  0021               	movlb	1	; select bank1
  7548  001E  1C92               	btfss	18,1	;volatile
  7549  001F  2825               	goto	i1l146
  7550  0020  0020               	movlb	0	; select bank0
  7551  0021  1C92               	btfss	18,1	;volatile
  7552  0022  2825               	goto	i1l146
  7553                           
  7554                           ;interrupt_manager.c: 70: {;interrupt_manager.c: 71: TMR4_ISR();
  7555  0023  3187  2704         	fcall	_TMR4_ISR
  7556  0025                     i1l146:	
  7557                           ;interrupt_manager.c: 72: }
  7558                           
  7559  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7560  0026  0009               	retfie
  7561  0027                     __end_of_INTERRUPT_InterruptManager:
  7562                           
  7563                           	psect	text38
  7564  0704                     __ptext38:	
  7565 ;; *************** function _TMR4_ISR *****************
  7566 ;; Defined at:
  7567 ;;		line 119 in file "mcc_generated_files/tmr4.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;		None
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;		None
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      void 
  7574 ;; Registers used:
  7575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7576 ;; Tracked objects:
  7577 ;;		On entry : 1F/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7581 ;;      Params:         0       0       0       0       0       0       0       0
  7582 ;;      Locals:         0       0       0       0       0       0       0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0       0
  7584 ;;      Totals:         0       0       0       0       0       0       0       0
  7585 ;;Total ram usage:        0 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    1
  7588 ;; This function calls:
  7589 ;;		Absolute function
  7590 ;;		_TMR4_DefaultInterruptHandler
  7591 ;; This function is called by:
  7592 ;;		_INTERRUPT_InterruptManager
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596                           
  7597                           ;psect for function _TMR4_ISR
  7598  0704                     _TMR4_ISR:
  7599                           
  7600                           ;tmr4.c: 123: PIR2bits.TMR4IF = 0;
  7601                           
  7602                           ;incstack = 0
  7603                           ; Regs used in _TMR4_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7604  0704  1092               	bcf	18,1	;volatile
  7605                           
  7606                           ;tmr4.c: 125: if(TMR4_InterruptHandler)
  7607  0705  0863               	movf	_TMR4_InterruptHandler,w
  7608  0706  0464               	iorwf	_TMR4_InterruptHandler+1,w
  7609  0707  1903               	btfsc	3,2
  7610  0708  0008               	return
  7611                           
  7612                           ;tmr4.c: 126: {;tmr4.c: 127: TMR4_InterruptHandler();
  7613  0709  0864               	movf	_TMR4_InterruptHandler+1,w
  7614  070A  008A               	movwf	10
  7615  070B  0863               	movf	_TMR4_InterruptHandler,w
  7616  070C  000A               	callw
  7617  070D  3187               	pagesel	$
  7618  070E  0008               	return
  7619  070F                     __end_of_TMR4_ISR:
  7620                           
  7621                           	psect	text39
  7622  0678                     __ptext39:	
  7623 ;; *************** function _TMR4_DefaultInterruptHandler *****************
  7624 ;; Defined at:
  7625 ;;		line 151 in file "mcc_generated_files/tmr4.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;		None
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;		None
  7630 ;; Return value:  Size  Location     Type
  7631 ;;                  1    wreg      void 
  7632 ;; Registers used:
  7633 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7634 ;; Tracked objects:
  7635 ;;		On entry : 1F/0
  7636 ;;		On exit  : 1F/2
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7639 ;;      Params:         0       0       0       0       0       0       0       0
  7640 ;;      Locals:         0       0       0       0       0       0       0       0
  7641 ;;      Temps:          2       0       0       0       0       0       0       0
  7642 ;;      Totals:         2       0       0       0       0       0       0       0
  7643 ;;Total ram usage:        2 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; This function calls:
  7646 ;;		Nothing
  7647 ;; This function is called by:
  7648 ;;		_TMR4_Initialize
  7649 ;;		_TMR4_ISR
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function _TMR4_DefaultInterruptHandler
  7655  0678                     _TMR4_DefaultInterruptHandler:
  7656                           
  7657                           ;tmr4.c: 157: if (currentIsOn){
  7658                           
  7659                           ;incstack = 0
  7660                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  7661  0678  087B               	movf	_currentIsOn,w
  7662  0679  1903               	btfsc	3,2
  7663  067A  2E8C               	goto	i1l414
  7664                           
  7665                           ;tmr4.c: 158: currentIsOn = 0;
  7666  067B  01FB               	clrf	_currentIsOn
  7667                           
  7668                           ;tmr4.c: 159: if (0 == frequencyValue[frequencyIndex]){
  7669  067C  3554               	lslf	_frequencyIndex,w
  7670  067D  3EB6               	addlw	(low (_frequencyValue| 0))& (0+255)
  7671  067E  0086               	movwf	6
  7672  067F  0187               	clrf	7
  7673  0680  0016               	moviw fsr1++
  7674  0681  0401               	iorwf	1,w
  7675  0682  1D03               	btfss	3,2
  7676  0683  2E88               	goto	i1l1984
  7677  0684                     i1l1982:
  7678                           
  7679                           ;tmr4.c: 162: DAC1CON1 = dac_value;
  7680  0684  085E               	movf	_dac_value,w
  7681  0685  0022               	movlb	2	; select bank2
  7682  0686  0099               	movwf	25	;volatile
  7683                           
  7684                           ;tmr4.c: 163: } else {
  7685  0687  0008               	return
  7686  0688                     i1l1984:
  7687                           
  7688                           ;tmr4.c: 165: DAC1CON1 = 255;
  7689  0688  30FF               	movlw	255
  7690  0689  0022               	movlb	2	; select bank2
  7691  068A  0099               	movwf	25	;volatile
  7692  068B  0008               	return
  7693  068C                     i1l414:
  7694                           
  7695                           ;tmr4.c: 168: currentIsOn = 1;
  7696  068C  01FB               	clrf	_currentIsOn
  7697  068D  0AFB               	incf	_currentIsOn,f
  7698  068E  2E84               	goto	i1l1982
  7699  068F                     __end_of_TMR4_DefaultInterruptHandler:
  7700                           
  7701                           	psect	text40
  7702  06EA                     __ptext40:	
  7703 ;; *************** function _TMR0_ISR *****************
  7704 ;; Defined at:
  7705 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;		None
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;		None
  7710 ;; Return value:  Size  Location     Type
  7711 ;;                  1    wreg      void 
  7712 ;; Registers used:
  7713 ;;		wreg, status,2, status,0, pclath, cstack
  7714 ;; Tracked objects:
  7715 ;;		On entry : 0/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7719 ;;      Params:         0       0       0       0       0       0       0       0
  7720 ;;      Locals:         0       0       0       0       0       0       0       0
  7721 ;;      Temps:          0       0       0       0       0       0       0       0
  7722 ;;      Totals:         0       0       0       0       0       0       0       0
  7723 ;;Total ram usage:        0 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:    1
  7726 ;; This function calls:
  7727 ;;		Absolute function
  7728 ;;		_TMR0_DefaultInterruptHandler
  7729 ;; This function is called by:
  7730 ;;		_INTERRUPT_InterruptManager
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           
  7735                           ;psect for function _TMR0_ISR
  7736  06EA                     _TMR0_ISR:
  7737                           
  7738                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  7739                           
  7740                           ;incstack = 0
  7741                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  7742  06EA  110B               	bcf	11,2	;volatile
  7743                           
  7744                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  7745  06EB  0020               	movlb	0	; select bank0
  7746  06EC  085F               	movf	_timer0ReloadVal,w	;volatile
  7747  06ED  0095               	movwf	21	;volatile
  7748                           
  7749                           ;tmr0.c: 116: if(TMR0_InterruptHandler)
  7750  06EE  0865               	movf	_TMR0_InterruptHandler,w
  7751  06EF  0466               	iorwf	_TMR0_InterruptHandler+1,w
  7752  06F0  1903               	btfsc	3,2
  7753  06F1  0008               	return
  7754                           
  7755                           ;tmr0.c: 117: {;tmr0.c: 118: TMR0_InterruptHandler();
  7756  06F2  0866               	movf	_TMR0_InterruptHandler+1,w
  7757  06F3  008A               	movwf	10
  7758  06F4  0865               	movf	_TMR0_InterruptHandler,w
  7759  06F5  000A               	callw
  7760  06F6  3186               	pagesel	$
  7761  06F7  0008               	return
  7762  06F8                     __end_of_TMR0_ISR:
  7763                           
  7764                           	psect	text41
  7765  0784                     __ptext41:	
  7766 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  7767 ;; Defined at:
  7768 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;		None
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;		None
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		None
  7777 ;; Tracked objects:
  7778 ;;		On entry : 1F/0
  7779 ;;		On exit  : 1F/0
  7780 ;;		Unchanged: 1F/0
  7781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7782 ;;      Params:         0       0       0       0       0       0       0       0
  7783 ;;      Locals:         0       0       0       0       0       0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0       0
  7785 ;;      Totals:         0       0       0       0       0       0       0       0
  7786 ;;Total ram usage:        0 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; This function calls:
  7789 ;;		Nothing
  7790 ;; This function is called by:
  7791 ;;		_TMR0_Initialize
  7792 ;;		_TMR0_ISR
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           
  7797                           ;psect for function _TMR0_DefaultInterruptHandler
  7798  0784                     _TMR0_DefaultInterruptHandler:
  7799                           
  7800                           ;incstack = 0
  7801                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  7802  0784  0008               	return
  7803  0785                     __end_of_TMR0_DefaultInterruptHandler:
  7804                           
  7805                           	psect	text42
  7806  0785                     __ptext42:	
  7807 ;; *************** function _PIN_MANAGER_IOC *****************
  7808 ;; Defined at:
  7809 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;		None
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;		None
  7814 ;; Return value:  Size  Location     Type
  7815 ;;                  1    wreg      void 
  7816 ;; Registers used:
  7817 ;;		None
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7823 ;;      Params:         0       0       0       0       0       0       0       0
  7824 ;;      Locals:         0       0       0       0       0       0       0       0
  7825 ;;      Temps:          0       0       0       0       0       0       0       0
  7826 ;;      Totals:         0       0       0       0       0       0       0       0
  7827 ;;Total ram usage:        0 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; This function calls:
  7830 ;;		Nothing
  7831 ;; This function is called by:
  7832 ;;		_INTERRUPT_InterruptManager
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           
  7837                           ;psect for function _PIN_MANAGER_IOC
  7838  0785                     _PIN_MANAGER_IOC:
  7839                           
  7840                           ;incstack = 0
  7841                           ; Regs used in _PIN_MANAGER_IOC: []
  7842  0785  0008               	return
  7843  0786                     __end_of_PIN_MANAGER_IOC:
  7844                           
  7845                           	psect	text43
  7846  077F                     __ptext43:	
  7847 ;; *************** function _INT_ISR *****************
  7848 ;; Defined at:
  7849 ;;		line 54 in file "mcc_generated_files/ext_int.c"
  7850 ;; Parameters:    Size  Location     Type
  7851 ;;		None
  7852 ;; Auto vars:     Size  Location     Type
  7853 ;;		None
  7854 ;; Return value:  Size  Location     Type
  7855 ;;                  1    wreg      void 
  7856 ;; Registers used:
  7857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7858 ;; Tracked objects:
  7859 ;;		On entry : 0/0
  7860 ;;		On exit  : 0/0
  7861 ;;		Unchanged: 0/0
  7862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7863 ;;      Params:         0       0       0       0       0       0       0       0
  7864 ;;      Locals:         0       0       0       0       0       0       0       0
  7865 ;;      Temps:          0       0       0       0       0       0       0       0
  7866 ;;      Totals:         0       0       0       0       0       0       0       0
  7867 ;;Total ram usage:        0 bytes
  7868 ;; Hardware stack levels used:    1
  7869 ;; Hardware stack levels required when called:    2
  7870 ;; This function calls:
  7871 ;;		_INT_CallBack
  7872 ;; This function is called by:
  7873 ;;		_INTERRUPT_InterruptManager
  7874 ;; This function uses a non-reentrant model
  7875 ;;
  7876                           
  7877                           
  7878                           ;psect for function _INT_ISR
  7879  077F                     _INT_ISR:
  7880                           
  7881                           ;ext_int.c: 56: (INTCONbits.INTF = 0);
  7882                           
  7883                           ;incstack = 0
  7884                           ; Regs used in _INT_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7885  077F  108B               	bcf	11,1	;volatile
  7886                           
  7887                           ;ext_int.c: 59: INT_CallBack();
  7888  0780  3187  270F         	fcall	_INT_CallBack
  7889  0782  0008               	return
  7890  0783                     __end_of_INT_ISR:
  7891                           
  7892                           	psect	text44
  7893  070F                     __ptext44:	
  7894 ;; *************** function _INT_CallBack *****************
  7895 ;; Defined at:
  7896 ;;		line 62 in file "mcc_generated_files/ext_int.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;		None
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;		None
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  1    wreg      void 
  7903 ;; Registers used:
  7904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7910 ;;      Params:         0       0       0       0       0       0       0       0
  7911 ;;      Locals:         0       0       0       0       0       0       0       0
  7912 ;;      Temps:          0       0       0       0       0       0       0       0
  7913 ;;      Totals:         0       0       0       0       0       0       0       0
  7914 ;;Total ram usage:        0 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; Hardware stack levels required when called:    1
  7917 ;; This function calls:
  7918 ;;		Absolute function
  7919 ;;		_INT_DefaultInterruptHandler
  7920 ;; This function is called by:
  7921 ;;		_INT_ISR
  7922 ;; This function uses a non-reentrant model
  7923 ;;
  7924                           
  7925                           
  7926                           ;psect for function _INT_CallBack
  7927  070F                     _INT_CallBack:
  7928                           
  7929                           ;ext_int.c: 65: if(INT_InterruptHandler)
  7930                           
  7931                           ;incstack = 0
  7932                           ; Regs used in _INT_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7933  070F  0020               	movlb	0	; select bank0
  7934  0710  0867               	movf	_INT_InterruptHandler,w
  7935  0711  0468               	iorwf	_INT_InterruptHandler+1,w
  7936  0712  1903               	btfsc	3,2
  7937  0713  0008               	return
  7938                           
  7939                           ;ext_int.c: 66: {;ext_int.c: 67: INT_InterruptHandler();
  7940  0714  0868               	movf	_INT_InterruptHandler+1,w
  7941  0715  008A               	movwf	10
  7942  0716  0867               	movf	_INT_InterruptHandler,w
  7943  0717  000A               	callw
  7944  0718  3187               	pagesel	$
  7945  0719  0008               	return
  7946  071A                     __end_of_INT_CallBack:
  7947                           
  7948                           	psect	text45
  7949  027C                     __ptext45:	
  7950 ;; *************** function _INT_DefaultInterruptHandler *****************
  7951 ;; Defined at:
  7952 ;;		line 75 in file "mcc_generated_files/ext_int.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;		None
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  time            1    1[COMMON] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  1    wreg      void 
  7959 ;; Registers used:
  7960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7961 ;; Tracked objects:
  7962 ;;		On entry : 1F/0
  7963 ;;		On exit  : 1E/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7966 ;;      Params:         0       0       0       0       0       0       0       0
  7967 ;;      Locals:         1       0       0       0       0       0       0       0
  7968 ;;      Temps:          1       0       0       0       0       0       0       0
  7969 ;;      Totals:         2       0       0       0       0       0       0       0
  7970 ;;Total ram usage:        2 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; This function calls:
  7973 ;;		Nothing
  7974 ;; This function is called by:
  7975 ;;		_EXT_INT_Initialize
  7976 ;;		_INT_CallBack
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           
  7981                           ;psect for function _INT_DefaultInterruptHandler
  7982  027C                     _INT_DefaultInterruptHandler:
  7983                           
  7984                           ;ext_int.c: 77: uint8_t time = TMR0;
  7985                           
  7986                           ;incstack = 0
  7987                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr1h+status,2+status,0]
  7988  027C  0815               	movf	21,w	;volatile
  7989  027D  00F6               	movwf	??_INT_DefaultInterruptHandler
  7990  027E  0876               	movf	??_INT_DefaultInterruptHandler,w
  7991  027F  00F7               	movwf	INT_DefaultInterruptHandler@time
  7992                           
  7993                           ;ext_int.c: 78: TMR0 = 0;
  7994  0280  0195               	clrf	21	;volatile
  7995                           
  7996                           ;ext_int.c: 81: if (INTCONbits.TMR0IF){
  7997  0281  190B               	btfsc	11,2	;volatile
  7998                           
  7999                           ;ext_int.c: 82: time = 0;
  8000  0282  01F7               	clrf	INT_DefaultInterruptHandler@time
  8001                           
  8002                           ;ext_int.c: 83: };ext_int.c: 84: INTCONbits.TMR0IF = 0;
  8003  0283  110B               	bcf	11,2	;volatile
  8004                           
  8005                           ;ext_int.c: 86: switch(ir_code.state){
  8006  0284  2AD3               	goto	i1l1784
  8007  0285                     i1l1742:
  8008                           
  8009                           ;ext_int.c: 89: if (time >= 180 && time <= 243){
  8010  0285  30B4               	movlw	180
  8011  0286  0277               	subwf	INT_DefaultInterruptHandler@time,w
  8012  0287  1C03               	skipc
  8013  0288  2ADE               	goto	i1l271
  8014  0289  30F4               	movlw	244
  8015  028A  0277               	subwf	INT_DefaultInterruptHandler@time,w
  8016  028B  1803               	skipnc
  8017  028C  2ADE               	goto	i1l271
  8018                           
  8019                           ;ext_int.c: 90: ir_code.n_bits = 0;
  8020  028D  01F0               	clrf	_ir_code
  8021                           
  8022                           ;ext_int.c: 91: ir_code.state = STATE_RECEIVING;
  8023  028E  01F1               	clrf	_ir_code+1
  8024  028F  0AF1               	incf	_ir_code+1,f
  8025                           
  8026                           ;ext_int.c: 92: stats[0] = time;
  8027  0290  0877               	movf	INT_DefaultInterruptHandler@time,w
  8028  0291  00F6               	movwf	??_INT_DefaultInterruptHandler
  8029  0292  0876               	movf	??_INT_DefaultInterruptHandler,w
  8030  0293  0021               	movlb	1	; select bank1
  8031  0294  00C2               	movwf	_stats^(0+128)
  8032  0295  2ADE               	goto	i1l271
  8033  0296                     i1l1752:
  8034                           
  8035                           ;ext_int.c: 97: ir_code.code <<= 1;
  8036  0296  3001               	movlw	1
  8037  0297                     u82_25:
  8038  0297  35F2               	lslf	_ir_code+2,f
  8039  0298  0DF3               	rlf	_ir_code+3,f
  8040  0299  0DF4               	rlf	_ir_code+4,f
  8041  029A  0DF5               	rlf	_ir_code+5,f
  8042  029B  0B89               	decfsz	9,f
  8043  029C  2A97               	goto	u82_25
  8044                           
  8045                           ;ext_int.c: 98: if (time >= 29 && time <= 41){
  8046  029D  301D               	movlw	29
  8047  029E  0277               	subwf	INT_DefaultInterruptHandler@time,w
  8048  029F  1C03               	skipc
  8049  02A0  2AB3               	goto	i1l1764
  8050  02A1  302A               	movlw	42
  8051  02A2  0277               	subwf	INT_DefaultInterruptHandler@time,w
  8052  02A3  1803               	skipnc
  8053  02A4  2AB3               	goto	i1l1764
  8054                           
  8055                           ;ext_int.c: 99: stats[1+ir_code.n_bits] = time;
  8056  02A5  0877               	movf	INT_DefaultInterruptHandler@time,w
  8057  02A6  00F6               	movwf	??_INT_DefaultInterruptHandler
  8058  02A7  0870               	movf	_ir_code,w
  8059  02A8  3EC3               	addlw	(low ((_stats| 0+1)))& (0+255)
  8060  02A9  0086               	movwf	6
  8061  02AA  0187               	clrf	7
  8062  02AB  0876               	movf	??_INT_DefaultInterruptHandler,w
  8063  02AC  0081               	movwf	1
  8064                           
  8065                           ;ext_int.c: 100: ir_code.code |= 1;
  8066  02AD  1472               	bsf	_ir_code+2,0
  8067  02AE                     i1l1762:
  8068                           
  8069                           ;ext_int.c: 101: ir_code.n_bits++;
  8070  02AE  3001               	movlw	1
  8071  02AF  00F6               	movwf	??_INT_DefaultInterruptHandler
  8072  02B0  0876               	movf	??_INT_DefaultInterruptHandler,w
  8073  02B1  07F0               	addwf	_ir_code,f
  8074                           
  8075                           ;ext_int.c: 102: } else if (time >= 14 && time <= 20){
  8076  02B2  2AC6               	goto	i1l1774
  8077  02B3                     i1l1764:
  8078  02B3  300E               	movlw	14
  8079  02B4  0277               	subwf	INT_DefaultInterruptHandler@time,w
  8080  02B5  1C03               	skipc
  8081  02B6  2AC4               	goto	i1l1772
  8082  02B7  3015               	movlw	21
  8083  02B8  0277               	subwf	INT_DefaultInterruptHandler@time,w
  8084  02B9  1803               	skipnc
  8085  02BA  2AC4               	goto	i1l1772
  8086                           
  8087                           ;ext_int.c: 103: stats[1+ir_code.n_bits] = time;
  8088  02BB  0877               	movf	INT_DefaultInterruptHandler@time,w
  8089  02BC  00F6               	movwf	??_INT_DefaultInterruptHandler
  8090  02BD  0870               	movf	_ir_code,w
  8091  02BE  3EC3               	addlw	(low ((_stats| 0+1)))& (0+255)
  8092  02BF  0086               	movwf	6
  8093  02C0  0187               	clrf	7
  8094  02C1  0876               	movf	??_INT_DefaultInterruptHandler,w
  8095  02C2  0081               	movwf	1
  8096  02C3  2AAE               	goto	i1l1762
  8097  02C4                     i1l1772:
  8098                           
  8099                           ;ext_int.c: 107: ir_code.state = STATE_RESET;
  8100  02C4  01F1               	clrf	_ir_code+1
  8101                           
  8102                           ;ext_int.c: 108: break;
  8103  02C5  2ADE               	goto	i1l271
  8104  02C6                     i1l1774:
  8105                           
  8106                           ;ext_int.c: 109: };ext_int.c: 110: if (32 == ir_code.n_bits){
  8107  02C6  3020               	movlw	32
  8108  02C7  0670               	xorwf	_ir_code,w
  8109  02C8  1D03               	btfss	3,2
  8110  02C9  2ADE               	goto	i1l271
  8111                           
  8112                           ;ext_int.c: 113: if (ir_code.command == ((~ir_code.command_b) & 0xff)){
  8113  02CA  0972               	comf	_ir_code+2,w
  8114  02CB  0673               	xorwf	_ir_code+3,w
  8115  02CC  1D03               	skipz
  8116  02CD  2AC4               	goto	i1l1772
  8117                           
  8118                           ;ext_int.c: 114: ir_code.state = STATE_DONE;
  8119  02CE  3002               	movlw	2
  8120  02CF  00F6               	movwf	??_INT_DefaultInterruptHandler
  8121  02D0  0876               	movf	??_INT_DefaultInterruptHandler,w
  8122  02D1  00F1               	movwf	_ir_code+1
  8123                           
  8124                           ;ext_int.c: 115: } else {
  8125  02D2  2ADE               	goto	i1l271
  8126  02D3                     i1l1784:
  8127  02D3  0871               	movf	_ir_code+1,w
  8128                           
  8129                           ; Switch size 1, requested type "simple"
  8130                           ; Number of cases is 3, Range of values is 0 to 2
  8131                           ; switch strategies available:
  8132                           ; Name         Instructions Cycles
  8133                           ; simple_byte           10     6 (average)
  8134                           ; direct_byte           12     6 (fixed)
  8135                           ; jumptable            260     6 (fixed)
  8136                           ;	Chosen strategy is simple_byte
  8137  02D4  3A00               	xorlw	0	; case 0
  8138  02D5  1903               	skipnz
  8139  02D6  2A85               	goto	i1l1742
  8140  02D7  3A01               	xorlw	1	; case 1
  8141  02D8  1903               	skipnz
  8142  02D9  2A96               	goto	i1l1752
  8143  02DA  3A03               	xorlw	3	; case 2
  8144  02DB  1903               	skipnz
  8145  02DC  2ADE               	goto	i1l271
  8146  02DD  2AC4               	goto	i1l1772
  8147  02DE                     i1l271:
  8148                           
  8149                           ;ext_int.c: 129: INTCONbits.INTF = 0;
  8150  02DE  108B               	bcf	11,1	;volatile
  8151  02DF  0008               	return
  8152  02E0                     __end_of_INT_DefaultInterruptHandler:
  8153  007E                     btemp	set	126	;btemp
  8154  007E                     int$flags	set	126
  8155  007E                     wtemp0	set	126
  8156                           
  8157                           	psect	config
  8158                           
  8159                           ;Config register CONFIG1 @ 0x8007
  8160                           ;	Oscillator Selection Bits
  8161                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8162                           ;	Watchdog Timer Enable
  8163                           ;	WDTE = OFF, WDT disabled
  8164                           ;	Power-up Timer Enable
  8165                           ;	PWRTE = OFF, PWRT disabled
  8166                           ;	MCLR Pin Function Select
  8167                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  8168                           ;	Flash Program Memory Code Protection
  8169                           ;	CP = OFF, Program memory code protection is disabled
  8170                           ;	Brown-out Reset Enable
  8171                           ;	BOREN = OFF, Brown-out Reset disabled
  8172                           ;	Clock Out Enable
  8173                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
  8174                           ;	Internal/External Switchover Mode
  8175                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
  8176                           ;	Fail-Safe Clock Monitor Enable
  8177                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  8178  8007                     	org	32775
  8179  8007  21E4               	dw	8676
  8180                           
  8181                           ;Config register CONFIG2 @ 0x8008
  8182                           ;	Flash Memory Self-Write Protection
  8183                           ;	WRT = OFF, Write protection off
  8184                           ;	Peripheral Pin Select one-way control
  8185                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
  8186                           ;	Zero-cross detect disable
  8187                           ;	ZCDDIS = ON, Zero-cross detect circuit is disabled at POR
  8188                           ;	Phase Lock Loop enable
  8189                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
  8190                           ;	Stack Overflow/Underflow Reset Enable
  8191                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  8192                           ;	Brown-out Reset Voltage Selection
  8193                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  8194                           ;	Low-Power Brown Out Reset
  8195                           ;	LPBOR = OFF, Low-Power BOR is disabled
  8196                           ;	Low-Voltage Programming Enable
  8197                           ;	LVP = ON, Low-voltage programming enabled
  8198  8008                     	org	32776
  8199  8008  3EFF               	dw	16127

Data Sizes:
    Strings     55
    Constant    0
    Data        39
    BSS         60
    Persistent  44
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      12
    BANK0            80     46      77
    BANK1            80      0      73
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_3(CODE[15]), STR_2(CODE[19]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(COMMON[6]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _startUp->_setLEDColor
    _process_remote_command->_setFrequency
    _setFrequency->___aldiv
    _setCurrent->___aldiv
    _selectSomething->_setLEDColor
    _selectFrequency->_setLEDColor
    _selectCurrent->_setLEDColor
    _printf->_putch
    _putch->_EUSART_Write
    _battery_voltage->___aldiv
    ___aldiv->___awdiv
    _lowBattery->_setLEDColor

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR4_ISR->_TMR4_DefaultInterruptHandler
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _main->_process_remote_command
    _startUp->_setLEDColor
    _process_remote_command->_setCurrent
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    ___lldiv->___lmul
    _selectSomething->_setLEDColor
    _selectFrequency->_printf
    _selectCurrent->_printf
    _battery_voltage->___aldiv
    ___aldiv->___lmul
    _lowBattery->_setLEDColor
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   32426
                                             45 BANK0      1     1      0
                     _DAC_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
                         _lowBattery
             _process_remote_command
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              4     4      0    3762
                                              2 BANK0      4     4      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0   23061
                                             42 BANK0      3     3      0
                    _battery_voltage
                             _printf
                      _selectCurrent
                    _selectFrequency
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setFrequency                                         5     3      2    2034
                                              4 COMMON     1     1      0
                                             26 BANK0      4     2      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _setCurrent                                          14    10      4    3558
                                             28 BANK0     14    10      4
                            ___aldiv
                            ___awdiv
                            ___lldiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     504
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     479
                                              2 COMMON     1     1      0
                                             12 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     683
                                              2 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    3694
                                              2 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    4181
                                              7 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    4181
                                              7 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    17      2     487
                                              0 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      62
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2    1159
                                             26 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8    1159
                                              3 COMMON     1     1      0
                                             12 BANK0     14     6      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lowBattery                                           2     2      0    3694
                                              2 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    3694
                                              2 COMMON     2     2      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     750
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     125
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     125
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     125
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     375
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0     200
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR4_ISR                                             0     0      0       0
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR4_DefaultInterruptHandler                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT_ISR                                              0     0      0     200
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (8) _INT_CallBack                                         0     0      0     200
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _INT_DefaultInterruptHandler                          2     2      0     200
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _lowBattery
     _setLEDColor
   _process_remote_command
     _battery_voltage
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
     _printf
       _putch
         _EUSART_Write
     _selectCurrent
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectFrequency
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___awdiv
       ___lldiv
         ___lmul (ARG)
       ___lmul
       _battery_voltage (ARG)
         ___aldiv
           ___awdiv (ARG)
           ___lmul (ARG)
     _setFrequency
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___lmul
     _setLEDColor
   _startUp
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A2       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2E      4D       6       96.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      49       8       91.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      A2      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Jul 21 00:46:30 2020

                                 ___awdiv@sign 0025                        __end_of_OPA1_Initialize 077F  
                              _timer0ReloadVal 005F                                            l213 0743  
                                          l602 04E9                                            l523 053B  
                                          l526 0545                                            l564 040B  
                                          l565 041C                                            l756 020B  
                                          _PR2 001B                                            _PR4 0416  
                                          u925 0517                                            u935 051E  
               ?_EUSART_SetFramingErrorHandler 0020                                _TMR2_Initialize 071A  
                                          wreg 0009                       __size_of_selectFrequency 0029  
                                         l2310 022C                                           l2302 021C  
                                         l2320 025A                                           l2312 023A  
                                         l2324 0265                                           l2340 033C  
                                         l2500 0067                                           l2254 0667  
                                         l2422 01F3                                           l2256 066C  
                                         l2328 0273                                           l2520 00BD  
                                         l2266 0648                                           l2346 0347  
                                         l2274 02F0                                           l1810 050C  
                                         l2418 01EE                                           l2514 00AA  
                                         l2506 007E                                           l2372 037E  
                                         l2364 036D                                           l2356 034F  
                                         l2284 031E                                           l2276 02FE  
                                         l2532 00D1                                           l2524 00C6  
                                         l2516 00B6                                           l2508 0091  
                                         l2358 035B                                           l1814 0516  
                                         l2542 00F0                                           l2534 00E3  
                                         l2368 0376                                           l2288 0329  
                                         l2552 00F8                                           l2554 00FC  
                                         l2570 0111                                           l2490 0469  
                                         l2556 0100                                           l2572 013F  
                                         l2566 010F                                           l2586 04FA  
                                         STR_1 068F                                           STR_2 06A4  
                                         STR_3 06DB                                           u2107 047A  
                                         u2117 048A                                           _LATA 010C  
                                         _LATB 010D                                __end_of_INT_ISR 0783  
                                         u2207 0585                                           u2127 0152  
                                         _LATC 010E                                           u2137 038F  
                                         u2147 03A3                                           u2157 03B7  
                                         u2085 04F5                                           u2167 03CB  
                                         u2177 05A0                                           u1625 02F3  
                                         u1715 022F                                           u2187 05C7  
                                         u2197 0571                                           u1645 02FF  
                                         u1735 023B                                           u1815 0352  
                                         u1655 0313                                           u1745 024F  
                                         u1665 031F                                           u1905 01C1  
                                         u1755 025B                                           u1835 035C  
                                         u1915 01E7                                           u1845 0366  
                                         u1855 036E                                           u1935 0404  
                                         u1945 0415                                           u1955 049D  
                                         u1975 0077                                           u1995 00A3  
                                         _TMR0 0015                                           _TMR2 001A  
                                         _TMR4 0415                        __end_of_OPA2_Initialize 077B  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                           _flag 005A  
                                         _main 04D5                                           _duty 0058  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E            __end_of_INT_DefaultInterruptHandler 02E0  
                  _INT_DefaultInterruptHandler 027C                                           start 0027  
              __end_of_INT_SetInterruptHandler 076F                     ??_TMR4_SetInterruptHandler 0078  
                      __end_of_TMR0_Initialize 06DB                 ??_TMR0_DefaultInterruptHandler 0076  
                                ?_EUSART_Write 0076                 __size_of_OSCILLATOR_Initialize 0008  
                __end_of_OSCILLATOR_Initialize 072A                                __end_of___aldiv 027C  
                                        ?_main 0076                                __end_of___awdiv 0383  
                                        _ADRES 009B                                __end_of___lldiv 0332  
                              ___awdiv@divisor 0020                                          _T2CON 001C  
                                        _T4CON 0417                                          i1l140 001B  
                                        i1l136 000D                                          i1l138 0014  
                                        i1l146 0025                                          i1l414 068C  
                                        i1l271 02DE                                   ?_setLEDColor 0020  
                              ___awdiv@counter 0024                       __size_of_selectSomething 0050  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          u82_25 0297  
                                        _RXPPS 0E24              __size_of_TMR0_SetInterruptHandler 0005  
                              _TMR4_Initialize 06B7                            ___lmul@multiplicand 0024  
                    ?_TMR0_SetInterruptHandler 0020                               __end_of_TMR0_ISR 06F8  
                             __end_of_TMR4_ISR 070F                                __end_of_initLED 0465  
                      __end_of_PIN_MANAGER_IOC 0786                                 _WDT_Initialize 0773  
                                        _putch 075B                                          _stats 00C2  
                                        pclath 000A                                __end_of_startUp 04A2  
                                        status 0003                        ?_process_remote_command 0076  
                                        wtemp0 007E                               ??_DAC_Initialize 0078  
                              __initialization 0029                                   __end_of_main 0504  
                        __end_of_selectCurrent 05DD                                 ??_EUSART_Write 0078  
                      __end_of_TMR2_Initialize 0722                    ?_INTERRUPT_InterruptManager 0076  
                             ?_OPA1_Initialize 0076                                         ??_main 004D  
                     __size_of_battery_voltage 002D                         __end_of_WDT_Initialize 0777  
                                    ??_INT_ISR 0078              _EUSART_DefaultFramingErrorHandler 0000  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 00E5                                         _CCPR1L 0291  
                             ___awdiv@dividend 0022                                         _ANSELA 018C  
                                       ?_putch 0076                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                       _RA5PPS 0E95                                         _RC1STA 019D  
                                       _RC4PPS 0EA4                                         _RB7PPS 0E9F  
                                       _RC5PPS 0EA5                                         _ODCONA 028C  
                                       _ODCONB 028D                                         _ODCONC 028E  
               __end_of_process_remote_command 0160                                         i1l1742 0285  
                                       i1l1752 0296                                         i1l1762 02AE  
                                       i1l1772 02C4                                         i1l1764 02B3  
                                       i1l1774 02C6                                         i1l1784 02D3  
                                       i1l1982 0684                                         i1l1984 0688  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         _FVRCON 0117  
                                       _INTPPS 0E10                               ?_OPA2_Initialize 0076  
                                       _OSCCON 0099                                         _TX1REG 019A  
                                       _WDTCON 0097                                         _TX1STA 019E  
                            ??_selectFrequency 0027                                         _Vdd_mv 0050  
                                       ___lmul 0504                                      ??___aldiv 0079  
                                    ??___awdiv 0078                                      ??___lldiv 0078  
                             ?_TMR0_Initialize 0076                        __end_of_TMR4_Initialize 06CA  
                             ___awdiv@quotient 0026                                         _printf 0644  
                                ?_INT_CallBack 0076                                      ??_initLED 0078  
         __end_of_TMR4_DefaultInterruptHandler 068F          __size_of_TMR4_DefaultInterruptHandler 0017  
                 _TMR4_DefaultInterruptHandler 0678                                   __pdataCOMMON 007B  
                             setCurrent@Vdd_mv 003E                                ?_WDT_Initialize 0076  
             __size_of_INT_SetInterruptHandler 0005                                      ??_startUp 0022  
     TMR4_SetInterruptHandler@InterruptHandler 0020       TMR0_SetInterruptHandler@InterruptHandler 0020  
      INT_SetInterruptHandler@InterruptHandler 0020                               ?_PIN_MANAGER_IOC 0076  
                            ??_selectSomething 0022                              _SYSTEM_Initialize 0623  
                      __end_of__initialization 005A                             ?_SYSTEM_Initialize 0076  
                               __pcstackCOMMON 0076                                   __pidataBANK0 076F  
                                 __pidataBANK1 0601                            ??_SYSTEM_Initialize 0078  
                                    ?_TMR0_ISR 0076                                      ?_TMR4_ISR 0076  
                                __end_of_putch 0760                               ?_TMR2_Initialize 0076  
                               ??_INT_CallBack 0078                    __size_of_EXT_INT_Initialize 000C  
                               _OPTION_REGbits 0095                  ?_TMR4_DefaultInterruptHandler 0076  
                         __size_of_setLEDColor 0018                ??_EUSART_SetOverrunErrorHandler 0078  
                            ??_battery_voltage 007A                      __end_of_SYSTEM_Initialize 0644  
                                      ??_putch 0079                                  ?_setFrequency 003A  
                                   __pbssBANK0 004E                                     __pbssBANK1 00C2  
                         __end_of_EUSART_Write 0749                          _TMR4_InterruptHandler 0063  
                                   __pmaintext 04D5               __end_of_TMR0_SetInterruptHandler 076A  
                                      ?___lmul 0020                                     ??_TMR0_ISR 0076  
                                   ??_TMR4_ISR 0078                                     __pintentry 0004  
                               ___lmul@product 0028                               ?_TMR4_Initialize 0076  
                                      ?_printf 0020                                        _OPA1CON 0511  
                                      _OPA2CON 0515                                        _LED_red 005D  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                                      _INT_ISR 077F                              _maxFrequencyIndex 0069  
                                      _OSCSTAT 009A                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM4DCH 061B  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                       ??_EUSART_SetErrorHandler 0078  
                               ??_setFrequency 007A                                _maxCurrentIndex 006B  
                                      _Vdac_mv 0061                                        ___aldiv 01FB  
                                      ___awdiv 0332                                __size_of___lmul 002F  
                                      ___lldiv 02E0                                        __ptext1 0465  
                                      __ptext2 005E                                        __ptext3 03D3  
                                      __ptext4 0160                                        __ptext5 0504  
                                      __ptext6 02E0                                        __ptext7 0332  
                                      __ptext8 0383                                        __ptext9 058D  
                              __size_of_printf 001C                                        _initLED 0421  
                                      _ir_code 0070                                     _lowBattery 0560  
                        _OSCILLATOR_Initialize 0722                                      _T2CONbits 001C  
                                      _current 0057                               ___aldiv@dividend 0030  
                     ??_PIN_MANAGER_Initialize 0078              __size_of_TMR4_SetInterruptHandler 0005  
                      _INT_SetInterruptHandler 076A                      ?_TMR4_SetInterruptHandler 0020  
                              _selectFrequency 058D                                        _startUp 0465  
                   __size_of_SYSTEM_Initialize 0021                                        clrloop0 0750  
                         end_of_initialization 005A                 ??_TMR4_DefaultInterruptHandler 0076  
                                   _setCurrent 0160          __end_of_EUSART_SetOverrunErrorHandler 0732  
       __size_of_EUSART_SetOverrunErrorHandler 0008                  _EUSART_SetOverrunErrorHandler 072A  
                                    _LED_green 005C                                        init_ram 0749  
                                      initloop 074A                           __end_of_INT_CallBack 071A  
                            _EUSART_Initialize 05DD                                 _frequencyIndex 0054  
                              ___lldiv@divisor 002C                                 _frequencyValue 00B6  
                              ___lldiv@counter 0038                             ?_EUSART_Initialize 0076  
                                      printf@c 0026                                        printf@f 0020  
                             ___aldiv@quotient 0036                                setLEDColor@blue 0021  
                          ??_EUSART_Initialize 0078                               ??_WDT_Initialize 0078  
                     _TMR0_SetInterruptHandler 0765                                _selectSomething 0383  
                        __size_of_EUSART_Write 0007                       __size_of_OPA1_Initialize 0004  
              __size_of_EUSART_SetErrorHandler 0008                         __size_of_selectCurrent 0027  
                    __end_of_EUSART_Initialize 0601                                    _CCP1CONbits 0293  
                     __size_of_OPA2_Initialize 0004                           __end_of_setFrequency 0421  
                               __end_of___lmul 0533                     _EUSART_DefaultErrorHandler 0000  
                              _battery_voltage 0533                                  __pidataCOMMON 0783  
                                 _EUSART_Write 0742                              __size_of_TMR0_ISR 000E  
                            __size_of_TMR4_ISR 000B                         ?_OSCILLATOR_Initialize 0076  
                      __end_of_selectFrequency 05B6                      ??_INT_SetInterruptHandler 0078  
                      __size_of_DAC_Initialize 0006                                    ?_lowBattery 0076  
                               __end_of_printf 0660                            start_initialization 0029  
                     __size_of_TMR0_Initialize 0011                __size_of_PIN_MANAGER_Initialize 0033  
                                  putch@txData 0079                                    ?_setCurrent 003C  
                     __size_of_PIN_MANAGER_IOC 0001                   ?_INT_DefaultInterruptHandler 0076  
               ?_EUSART_SetOverrunErrorHandler 0020                     _EUSART_FramingErrorHandler 00E7  
                      __end_of_selectSomething 03D3                                       ??___lmul 0078  
                       _EUSART_SetErrorHandler 073A                                    _CCPTMRSbits 029E  
                                _selectCurrent 05B6                                    __pdataBANK0 0069  
                                  __pdataBANK1 00A0                     __end_of_EXT_INT_Initialize 0704  
                                     ??_printf 0022                                  ??_setLEDColor 0078  
                                  __pbssCOMMON 0070                                      ___latbits 0001  
                     ??_process_remote_command 004A                                       ?_INT_ISR 0076  
                                __pcstackBANK0 0020                       __size_of_TMR2_Initialize 0008  
                        __size_of_INT_CallBack 000B                                      _dac_value 005E  
                   __size_of_EUSART_Initialize 0024                                   _currentIndex 004E  
                            ??_OPA1_Initialize 0078                                   _currentValue 00A0  
                        _TMR0_InterruptHandler 0065                                      __pnvBANK0 0063  
                                    __pnvBANK1 00E3                            __size_of_lowBattery 002D  
                       _PIN_MANAGER_Initialize 04A2                        __end_of_battery_voltage 0560  
                ??_INT_DefaultInterruptHandler 0076                                       ?___aldiv 002C  
             __end_of_TMR4_SetInterruptHandler 0765                                 ?_selectCurrent 0076  
                                     ?___awdiv 0020                                       ?___lldiv 002C  
                                     _DAC1CON0 0118                                       _DAC1CON1 0119  
                 ??_INTERRUPT_InterruptManager 0078                            __size_of_setCurrent 009B  
                            ??_OPA2_Initialize 0078                               ?_selectFrequency 0076  
                                 _INT_CallBack 070F                                       _BAUD1CON 019F  
                                     ?_initLED 0076                       __size_of_TMR4_Initialize 0013  
                                    _frequency 0059                                       ?_startUp 0076  
                          __end_of_setLEDColor 0678                                      _microamps 0052  
                               __size_of_putch 0005                                ___aldiv@divisor 002C  
                            ??_TMR0_Initialize 0078                                ___aldiv@counter 0034  
       EUSART_SetErrorHandler@interruptHandler 0020                                       _LED_blue 005B  
                                    clear_ram0 074F                                       _PIE2bits 0092  
                            _eusartRxLastError 0060                          __size_of_setFrequency 004E  
          __size_of_INTERRUPT_InterruptManager 0023                     ??_TMR0_SetInterruptHandler 0078  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0078  
                                     _PIR2bits 0012                               ?_selectSomething 0076  
                               setLEDColor@red 0079                                       _TMR0_ISR 06EA  
            _EUSART_DefaultOverrunErrorHandler 0000                                       _TMR4_ISR 0704  
                            ??_PIN_MANAGER_IOC 0076                                     _ADCON0bits 009D  
                               _DAC_Initialize 0755           __size_of_INT_DefaultInterruptHandler 0064  
              __size_of_process_remote_command 0102                               __size_of_INT_ISR 0004  
                            ___lmul@multiplier 0020                                   _setFrequency 03D3  
                            ??_TMR2_Initialize 0078                                ??_selectCurrent 0027  
                             ?_battery_voltage 003A                        ??_OSCILLATOR_Initialize 0078  
                          _EUSART_ErrorHandler 00E3                               __size_of___aldiv 0081  
                             __size_of___awdiv 0051                         __end_of_DAC_Initialize 075B  
                             __size_of___lldiv 0052                       _TMR4_SetInterruptHandler 0760  
                                 ??_lowBattery 0022                                    _currentIsOn 007B  
                                  _setLEDColor 0660                             setCurrent@DACValue 0048  
                             __size_of_initLED 0044                                       __ptext10 05B6  
                                     __ptext11 0644                                       __ptext20 0773  
                                     __ptext12 075B                                       __ptext21 06B7  
                                     __ptext13 0742                                       __ptext30 06F8  
                                     __ptext22 0760                                       __ptext14 0533  
                                     __ptext31 076A                                       __ptext23 071A  
                                     __ptext15 01FB                                       __ptext40 06EA  
                                     __ptext32 05DD                                       __ptext24 06CA  
                                     __ptext16 0560                                       __ptext41 0784  
                                     __ptext33 072A                                       __ptext25 0765  
                                     __ptext17 0660                                       __ptext42 0785  
                                     __ptext34 0732                                       __ptext26 04A2  
                                     __ptext18 0421                                       __ptext43 077F  
                                     __ptext35 073A                                       __ptext27 0722  
                                     __ptext19 0623                                       __ptext44 070F  
                                     __ptext36 0755                                       __ptext28 0777  
                                     __ptext45 027C                                       __ptext29 077B  
                                     __ptext38 0704                                       __ptext39 0678  
                             __size_of_startUp 003D                                   ??_setCurrent 0040  
                               _interfaceState 0056                              ??_TMR4_Initialize 0078  
                                __size_of_main 002F           __end_of_TMR0_DefaultInterruptHandler 0785  
        __size_of_TMR0_DefaultInterruptHandler 0001                   _TMR0_DefaultInterruptHandler 0784  
                      ?_EUSART_SetErrorHandler 0020                         _process_remote_command 005E  
                           __end_of_lowBattery 058D  EUSART_SetOverrunErrorHandler@interruptHandler 0020  
                          setFrequency@pr4_val 003C                                       int$flags 007E  
           __end_of_INTERRUPT_InterruptManager 0027                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 073A         __size_of_EUSART_SetFramingErrorHandler 0008  
                _EUSART_SetFramingErrorHandler 0732                                ?_DAC_Initialize 0076  
                           __end_of_setCurrent 01FB                                     _INTCONbits 000B  
              INT_DefaultInterruptHandler@time 0077                                    _PWM3DCLbits 0617  
                              _OPA1_Initialize 077B                                    _PWM4DCLbits 061A  
                                   _FVRCONbits 0117                           _INT_InterruptHandler 0067  
                                  _PWM3CONbits 0619                                    _PWM4CONbits 061C  
                           _EXT_INT_Initialize 06F8                        __size_of_WDT_Initialize 0004  
                                     intlevel1 0000                               ___lldiv@dividend 0030  
                      ?_PIN_MANAGER_Initialize 0076                     process_remote_command@code 004C  
               __end_of_EUSART_SetErrorHandler 0742                            ?_EXT_INT_Initialize 0076  
                              _OPA2_Initialize 0777                  ?_TMR0_DefaultInterruptHandler 0076  
                                     printf@ap 0025  EUSART_SetFramingErrorHandler@interruptHandler 0020  
                     ?_INT_SetInterruptHandler 0020                                       startUp@i 0024  
                                __pstringtext1 068F                                  __pstringtext2 06A4  
                                __pstringtext3 06DB                                  __pstringtext4 0000  
                         ??_EXT_INT_Initialize 0078                                     _OPTION_REG 0095  
                             setLEDColor@green 0020                               ___lldiv@quotient 0034  
                              _TMR0_Initialize 06CA                            setCurrent@microamps 003C  
                                 ___aldiv@sign 0035                       setFrequency@frequency_hz 003A  
                           EUSART_Write@txData 0078                 __end_of_PIN_MANAGER_Initialize 04D5  
                              _PIN_MANAGER_IOC 0785  
