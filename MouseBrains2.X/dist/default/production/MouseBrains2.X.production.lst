

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Jul 20 20:41:26 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16LF1708
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	intentry,global,class=CODE,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    72                           	dabs	1,0x7E,2
    73  0000                     
    74                           ; Version 2.20
    75                           ; Generated 09/04/2020 GMT
    76                           ; 
    77                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC16LF1708 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0015                     	;# 
   127  0016                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001B                     	;# 
   134  001C                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  0091                     	;# 
   139  0092                     	;# 
   140  0093                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0097                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009B                     	;# 
   149  009C                     	;# 
   150  009D                     	;# 
   151  009E                     	;# 
   152  009F                     	;# 
   153  010C                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  0111                     	;# 
   157  0112                     	;# 
   158  0113                     	;# 
   159  0114                     	;# 
   160  0115                     	;# 
   161  0116                     	;# 
   162  0117                     	;# 
   163  0118                     	;# 
   164  0119                     	;# 
   165  011C                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  018E                     	;# 
   169  0191                     	;# 
   170  0191                     	;# 
   171  0192                     	;# 
   172  0193                     	;# 
   173  0193                     	;# 
   174  0194                     	;# 
   175  0195                     	;# 
   176  0196                     	;# 
   177  0199                     	;# 
   178  0199                     	;# 
   179  0199                     	;# 
   180  019A                     	;# 
   181  019A                     	;# 
   182  019A                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019B                     	;# 
   186  019B                     	;# 
   187  019B                     	;# 
   188  019C                     	;# 
   189  019C                     	;# 
   190  019C                     	;# 
   191  019D                     	;# 
   192  019D                     	;# 
   193  019D                     	;# 
   194  019E                     	;# 
   195  019E                     	;# 
   196  019E                     	;# 
   197  019F                     	;# 
   198  019F                     	;# 
   199  019F                     	;# 
   200  019F                     	;# 
   201  019F                     	;# 
   202  020C                     	;# 
   203  020D                     	;# 
   204  020E                     	;# 
   205  0211                     	;# 
   206  0211                     	;# 
   207  0212                     	;# 
   208  0212                     	;# 
   209  0213                     	;# 
   210  0213                     	;# 
   211  0214                     	;# 
   212  0214                     	;# 
   213  0215                     	;# 
   214  0215                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0216                     	;# 
   218  0216                     	;# 
   219  0217                     	;# 
   220  0217                     	;# 
   221  028C                     	;# 
   222  028D                     	;# 
   223  028E                     	;# 
   224  0291                     	;# 
   225  0291                     	;# 
   226  0292                     	;# 
   227  0293                     	;# 
   228  0293                     	;# 
   229  0298                     	;# 
   230  0298                     	;# 
   231  0299                     	;# 
   232  029A                     	;# 
   233  029A                     	;# 
   234  029E                     	;# 
   235  030C                     	;# 
   236  030D                     	;# 
   237  030E                     	;# 
   238  038C                     	;# 
   239  038D                     	;# 
   240  038E                     	;# 
   241  0391                     	;# 
   242  0392                     	;# 
   243  0393                     	;# 
   244  0394                     	;# 
   245  0395                     	;# 
   246  0396                     	;# 
   247  0397                     	;# 
   248  0398                     	;# 
   249  0399                     	;# 
   250  0415                     	;# 
   251  0416                     	;# 
   252  0417                     	;# 
   253  041C                     	;# 
   254  041D                     	;# 
   255  041E                     	;# 
   256  0511                     	;# 
   257  0515                     	;# 
   258  0617                     	;# 
   259  0618                     	;# 
   260  0619                     	;# 
   261  0619                     	;# 
   262  061A                     	;# 
   263  061B                     	;# 
   264  061C                     	;# 
   265  061C                     	;# 
   266  0691                     	;# 
   267  0692                     	;# 
   268  0693                     	;# 
   269  0694                     	;# 
   270  0695                     	;# 
   271  0696                     	;# 
   272  0697                     	;# 
   273  0698                     	;# 
   274  0699                     	;# 
   275  069A                     	;# 
   276  069B                     	;# 
   277  069C                     	;# 
   278  069D                     	;# 
   279  069E                     	;# 
   280  069F                     	;# 
   281  0E0F                     	;# 
   282  0E10                     	;# 
   283  0E11                     	;# 
   284  0E12                     	;# 
   285  0E13                     	;# 
   286  0E14                     	;# 
   287  0E15                     	;# 
   288  0E17                     	;# 
   289  0E20                     	;# 
   290  0E21                     	;# 
   291  0E22                     	;# 
   292  0E24                     	;# 
   293  0E25                     	;# 
   294  0E28                     	;# 
   295  0E29                     	;# 
   296  0E2A                     	;# 
   297  0E2B                     	;# 
   298  0E90                     	;# 
   299  0E91                     	;# 
   300  0E92                     	;# 
   301  0E94                     	;# 
   302  0E95                     	;# 
   303  0E9C                     	;# 
   304  0E9D                     	;# 
   305  0E9E                     	;# 
   306  0E9F                     	;# 
   307  0EA0                     	;# 
   308  0EA1                     	;# 
   309  0EA2                     	;# 
   310  0EA3                     	;# 
   311  0EA4                     	;# 
   312  0EA5                     	;# 
   313  0EA6                     	;# 
   314  0EA7                     	;# 
   315  0F0F                     	;# 
   316  0F10                     	;# 
   317  0F11                     	;# 
   318  0F12                     	;# 
   319  0F13                     	;# 
   320  0F14                     	;# 
   321  0F15                     	;# 
   322  0F16                     	;# 
   323  0F17                     	;# 
   324  0F18                     	;# 
   325  0F19                     	;# 
   326  0F1A                     	;# 
   327  0F1B                     	;# 
   328  0F1C                     	;# 
   329  0F1D                     	;# 
   330  0F1E                     	;# 
   331  0F1F                     	;# 
   332  0F20                     	;# 
   333  0F21                     	;# 
   334  0F22                     	;# 
   335  0F23                     	;# 
   336  0F24                     	;# 
   337  0F25                     	;# 
   338  0F26                     	;# 
   339  0F27                     	;# 
   340  0F28                     	;# 
   341  0F29                     	;# 
   342  0F2A                     	;# 
   343  0F2B                     	;# 
   344  0F2C                     	;# 
   345  0F2D                     	;# 
   346  0FE4                     	;# 
   347  0FE5                     	;# 
   348  0FE6                     	;# 
   349  0FE7                     	;# 
   350  0FE8                     	;# 
   351  0FE9                     	;# 
   352  0FEA                     	;# 
   353  0FEB                     	;# 
   354  0FED                     	;# 
   355  0FEE                     	;# 
   356  0FEF                     	;# 
   357  0000                     	;# 
   358  0001                     	;# 
   359  0002                     	;# 
   360  0003                     	;# 
   361  0004                     	;# 
   362  0005                     	;# 
   363  0006                     	;# 
   364  0007                     	;# 
   365  0008                     	;# 
   366  0009                     	;# 
   367  000A                     	;# 
   368  000B                     	;# 
   369  000C                     	;# 
   370  000D                     	;# 
   371  000E                     	;# 
   372  0011                     	;# 
   373  0012                     	;# 
   374  0013                     	;# 
   375  0015                     	;# 
   376  0016                     	;# 
   377  0016                     	;# 
   378  0017                     	;# 
   379  0018                     	;# 
   380  0019                     	;# 
   381  001A                     	;# 
   382  001B                     	;# 
   383  001C                     	;# 
   384  008C                     	;# 
   385  008D                     	;# 
   386  008E                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0095                     	;# 
   391  0096                     	;# 
   392  0097                     	;# 
   393  0098                     	;# 
   394  0099                     	;# 
   395  009A                     	;# 
   396  009B                     	;# 
   397  009B                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  009F                     	;# 
   402  010C                     	;# 
   403  010D                     	;# 
   404  010E                     	;# 
   405  0111                     	;# 
   406  0112                     	;# 
   407  0113                     	;# 
   408  0114                     	;# 
   409  0115                     	;# 
   410  0116                     	;# 
   411  0117                     	;# 
   412  0118                     	;# 
   413  0119                     	;# 
   414  011C                     	;# 
   415  018C                     	;# 
   416  018D                     	;# 
   417  018E                     	;# 
   418  0191                     	;# 
   419  0191                     	;# 
   420  0192                     	;# 
   421  0193                     	;# 
   422  0193                     	;# 
   423  0194                     	;# 
   424  0195                     	;# 
   425  0196                     	;# 
   426  0199                     	;# 
   427  0199                     	;# 
   428  0199                     	;# 
   429  019A                     	;# 
   430  019A                     	;# 
   431  019A                     	;# 
   432  019B                     	;# 
   433  019B                     	;# 
   434  019B                     	;# 
   435  019B                     	;# 
   436  019B                     	;# 
   437  019C                     	;# 
   438  019C                     	;# 
   439  019C                     	;# 
   440  019D                     	;# 
   441  019D                     	;# 
   442  019D                     	;# 
   443  019E                     	;# 
   444  019E                     	;# 
   445  019E                     	;# 
   446  019F                     	;# 
   447  019F                     	;# 
   448  019F                     	;# 
   449  019F                     	;# 
   450  019F                     	;# 
   451  020C                     	;# 
   452  020D                     	;# 
   453  020E                     	;# 
   454  0211                     	;# 
   455  0211                     	;# 
   456  0212                     	;# 
   457  0212                     	;# 
   458  0213                     	;# 
   459  0213                     	;# 
   460  0214                     	;# 
   461  0214                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  028C                     	;# 
   471  028D                     	;# 
   472  028E                     	;# 
   473  0291                     	;# 
   474  0291                     	;# 
   475  0292                     	;# 
   476  0293                     	;# 
   477  0293                     	;# 
   478  0298                     	;# 
   479  0298                     	;# 
   480  0299                     	;# 
   481  029A                     	;# 
   482  029A                     	;# 
   483  029E                     	;# 
   484  030C                     	;# 
   485  030D                     	;# 
   486  030E                     	;# 
   487  038C                     	;# 
   488  038D                     	;# 
   489  038E                     	;# 
   490  0391                     	;# 
   491  0392                     	;# 
   492  0393                     	;# 
   493  0394                     	;# 
   494  0395                     	;# 
   495  0396                     	;# 
   496  0397                     	;# 
   497  0398                     	;# 
   498  0399                     	;# 
   499  0415                     	;# 
   500  0416                     	;# 
   501  0417                     	;# 
   502  041C                     	;# 
   503  041D                     	;# 
   504  041E                     	;# 
   505  0511                     	;# 
   506  0515                     	;# 
   507  0617                     	;# 
   508  0618                     	;# 
   509  0619                     	;# 
   510  0619                     	;# 
   511  061A                     	;# 
   512  061B                     	;# 
   513  061C                     	;# 
   514  061C                     	;# 
   515  0691                     	;# 
   516  0692                     	;# 
   517  0693                     	;# 
   518  0694                     	;# 
   519  0695                     	;# 
   520  0696                     	;# 
   521  0697                     	;# 
   522  0698                     	;# 
   523  0699                     	;# 
   524  069A                     	;# 
   525  069B                     	;# 
   526  069C                     	;# 
   527  069D                     	;# 
   528  069E                     	;# 
   529  069F                     	;# 
   530  0E0F                     	;# 
   531  0E10                     	;# 
   532  0E11                     	;# 
   533  0E12                     	;# 
   534  0E13                     	;# 
   535  0E14                     	;# 
   536  0E15                     	;# 
   537  0E17                     	;# 
   538  0E20                     	;# 
   539  0E21                     	;# 
   540  0E22                     	;# 
   541  0E24                     	;# 
   542  0E25                     	;# 
   543  0E28                     	;# 
   544  0E29                     	;# 
   545  0E2A                     	;# 
   546  0E2B                     	;# 
   547  0E90                     	;# 
   548  0E91                     	;# 
   549  0E92                     	;# 
   550  0E94                     	;# 
   551  0E95                     	;# 
   552  0E9C                     	;# 
   553  0E9D                     	;# 
   554  0E9E                     	;# 
   555  0E9F                     	;# 
   556  0EA0                     	;# 
   557  0EA1                     	;# 
   558  0EA2                     	;# 
   559  0EA3                     	;# 
   560  0EA4                     	;# 
   561  0EA5                     	;# 
   562  0EA6                     	;# 
   563  0EA7                     	;# 
   564  0F0F                     	;# 
   565  0F10                     	;# 
   566  0F11                     	;# 
   567  0F12                     	;# 
   568  0F13                     	;# 
   569  0F14                     	;# 
   570  0F15                     	;# 
   571  0F16                     	;# 
   572  0F17                     	;# 
   573  0F18                     	;# 
   574  0F19                     	;# 
   575  0F1A                     	;# 
   576  0F1B                     	;# 
   577  0F1C                     	;# 
   578  0F1D                     	;# 
   579  0F1E                     	;# 
   580  0F1F                     	;# 
   581  0F20                     	;# 
   582  0F21                     	;# 
   583  0F22                     	;# 
   584  0F23                     	;# 
   585  0F24                     	;# 
   586  0F25                     	;# 
   587  0F26                     	;# 
   588  0F27                     	;# 
   589  0F28                     	;# 
   590  0F29                     	;# 
   591  0F2A                     	;# 
   592  0F2B                     	;# 
   593  0F2C                     	;# 
   594  0F2D                     	;# 
   595  0FE4                     	;# 
   596  0FE5                     	;# 
   597  0FE6                     	;# 
   598  0FE7                     	;# 
   599  0FE8                     	;# 
   600  0FE9                     	;# 
   601  0FEA                     	;# 
   602  0FEB                     	;# 
   603  0FED                     	;# 
   604  0FEE                     	;# 
   605  0FEF                     	;# 
   606  0000                     	;# 
   607  0001                     	;# 
   608  0002                     	;# 
   609  0003                     	;# 
   610  0004                     	;# 
   611  0005                     	;# 
   612  0006                     	;# 
   613  0007                     	;# 
   614  0008                     	;# 
   615  0009                     	;# 
   616  000A                     	;# 
   617  000B                     	;# 
   618  000C                     	;# 
   619  000D                     	;# 
   620  000E                     	;# 
   621  0011                     	;# 
   622  0012                     	;# 
   623  0013                     	;# 
   624  0015                     	;# 
   625  0016                     	;# 
   626  0016                     	;# 
   627  0017                     	;# 
   628  0018                     	;# 
   629  0019                     	;# 
   630  001A                     	;# 
   631  001B                     	;# 
   632  001C                     	;# 
   633  008C                     	;# 
   634  008D                     	;# 
   635  008E                     	;# 
   636  0091                     	;# 
   637  0092                     	;# 
   638  0093                     	;# 
   639  0095                     	;# 
   640  0096                     	;# 
   641  0097                     	;# 
   642  0098                     	;# 
   643  0099                     	;# 
   644  009A                     	;# 
   645  009B                     	;# 
   646  009B                     	;# 
   647  009C                     	;# 
   648  009D                     	;# 
   649  009E                     	;# 
   650  009F                     	;# 
   651  010C                     	;# 
   652  010D                     	;# 
   653  010E                     	;# 
   654  0111                     	;# 
   655  0112                     	;# 
   656  0113                     	;# 
   657  0114                     	;# 
   658  0115                     	;# 
   659  0116                     	;# 
   660  0117                     	;# 
   661  0118                     	;# 
   662  0119                     	;# 
   663  011C                     	;# 
   664  018C                     	;# 
   665  018D                     	;# 
   666  018E                     	;# 
   667  0191                     	;# 
   668  0191                     	;# 
   669  0192                     	;# 
   670  0193                     	;# 
   671  0193                     	;# 
   672  0194                     	;# 
   673  0195                     	;# 
   674  0196                     	;# 
   675  0199                     	;# 
   676  0199                     	;# 
   677  0199                     	;# 
   678  019A                     	;# 
   679  019A                     	;# 
   680  019A                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019C                     	;# 
   689  019D                     	;# 
   690  019D                     	;# 
   691  019D                     	;# 
   692  019E                     	;# 
   693  019E                     	;# 
   694  019E                     	;# 
   695  019F                     	;# 
   696  019F                     	;# 
   697  019F                     	;# 
   698  019F                     	;# 
   699  019F                     	;# 
   700  020C                     	;# 
   701  020D                     	;# 
   702  020E                     	;# 
   703  0211                     	;# 
   704  0211                     	;# 
   705  0212                     	;# 
   706  0212                     	;# 
   707  0213                     	;# 
   708  0213                     	;# 
   709  0214                     	;# 
   710  0214                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0215                     	;# 
   714  0215                     	;# 
   715  0216                     	;# 
   716  0216                     	;# 
   717  0217                     	;# 
   718  0217                     	;# 
   719  028C                     	;# 
   720  028D                     	;# 
   721  028E                     	;# 
   722  0291                     	;# 
   723  0291                     	;# 
   724  0292                     	;# 
   725  0293                     	;# 
   726  0293                     	;# 
   727  0298                     	;# 
   728  0298                     	;# 
   729  0299                     	;# 
   730  029A                     	;# 
   731  029A                     	;# 
   732  029E                     	;# 
   733  030C                     	;# 
   734  030D                     	;# 
   735  030E                     	;# 
   736  038C                     	;# 
   737  038D                     	;# 
   738  038E                     	;# 
   739  0391                     	;# 
   740  0392                     	;# 
   741  0393                     	;# 
   742  0394                     	;# 
   743  0395                     	;# 
   744  0396                     	;# 
   745  0397                     	;# 
   746  0398                     	;# 
   747  0399                     	;# 
   748  0415                     	;# 
   749  0416                     	;# 
   750  0417                     	;# 
   751  041C                     	;# 
   752  041D                     	;# 
   753  041E                     	;# 
   754  0511                     	;# 
   755  0515                     	;# 
   756  0617                     	;# 
   757  0618                     	;# 
   758  0619                     	;# 
   759  0619                     	;# 
   760  061A                     	;# 
   761  061B                     	;# 
   762  061C                     	;# 
   763  061C                     	;# 
   764  0691                     	;# 
   765  0692                     	;# 
   766  0693                     	;# 
   767  0694                     	;# 
   768  0695                     	;# 
   769  0696                     	;# 
   770  0697                     	;# 
   771  0698                     	;# 
   772  0699                     	;# 
   773  069A                     	;# 
   774  069B                     	;# 
   775  069C                     	;# 
   776  069D                     	;# 
   777  069E                     	;# 
   778  069F                     	;# 
   779  0E0F                     	;# 
   780  0E10                     	;# 
   781  0E11                     	;# 
   782  0E12                     	;# 
   783  0E13                     	;# 
   784  0E14                     	;# 
   785  0E15                     	;# 
   786  0E17                     	;# 
   787  0E20                     	;# 
   788  0E21                     	;# 
   789  0E22                     	;# 
   790  0E24                     	;# 
   791  0E25                     	;# 
   792  0E28                     	;# 
   793  0E29                     	;# 
   794  0E2A                     	;# 
   795  0E2B                     	;# 
   796  0E90                     	;# 
   797  0E91                     	;# 
   798  0E92                     	;# 
   799  0E94                     	;# 
   800  0E95                     	;# 
   801  0E9C                     	;# 
   802  0E9D                     	;# 
   803  0E9E                     	;# 
   804  0E9F                     	;# 
   805  0EA0                     	;# 
   806  0EA1                     	;# 
   807  0EA2                     	;# 
   808  0EA3                     	;# 
   809  0EA4                     	;# 
   810  0EA5                     	;# 
   811  0EA6                     	;# 
   812  0EA7                     	;# 
   813  0F0F                     	;# 
   814  0F10                     	;# 
   815  0F11                     	;# 
   816  0F12                     	;# 
   817  0F13                     	;# 
   818  0F14                     	;# 
   819  0F15                     	;# 
   820  0F16                     	;# 
   821  0F17                     	;# 
   822  0F18                     	;# 
   823  0F19                     	;# 
   824  0F1A                     	;# 
   825  0F1B                     	;# 
   826  0F1C                     	;# 
   827  0F1D                     	;# 
   828  0F1E                     	;# 
   829  0F1F                     	;# 
   830  0F20                     	;# 
   831  0F21                     	;# 
   832  0F22                     	;# 
   833  0F23                     	;# 
   834  0F24                     	;# 
   835  0F25                     	;# 
   836  0F26                     	;# 
   837  0F27                     	;# 
   838  0F28                     	;# 
   839  0F29                     	;# 
   840  0F2A                     	;# 
   841  0F2B                     	;# 
   842  0F2C                     	;# 
   843  0F2D                     	;# 
   844  0FE4                     	;# 
   845  0FE5                     	;# 
   846  0FE6                     	;# 
   847  0FE7                     	;# 
   848  0FE8                     	;# 
   849  0FE9                     	;# 
   850  0FEA                     	;# 
   851  0FEB                     	;# 
   852  0FED                     	;# 
   853  0FEE                     	;# 
   854  0FEF                     	;# 
   855  0000                     	;# 
   856  0001                     	;# 
   857  0002                     	;# 
   858  0003                     	;# 
   859  0004                     	;# 
   860  0005                     	;# 
   861  0006                     	;# 
   862  0007                     	;# 
   863  0008                     	;# 
   864  0009                     	;# 
   865  000A                     	;# 
   866  000B                     	;# 
   867  000C                     	;# 
   868  000D                     	;# 
   869  000E                     	;# 
   870  0011                     	;# 
   871  0012                     	;# 
   872  0013                     	;# 
   873  0015                     	;# 
   874  0016                     	;# 
   875  0016                     	;# 
   876  0017                     	;# 
   877  0018                     	;# 
   878  0019                     	;# 
   879  001A                     	;# 
   880  001B                     	;# 
   881  001C                     	;# 
   882  008C                     	;# 
   883  008D                     	;# 
   884  008E                     	;# 
   885  0091                     	;# 
   886  0092                     	;# 
   887  0093                     	;# 
   888  0095                     	;# 
   889  0096                     	;# 
   890  0097                     	;# 
   891  0098                     	;# 
   892  0099                     	;# 
   893  009A                     	;# 
   894  009B                     	;# 
   895  009B                     	;# 
   896  009C                     	;# 
   897  009D                     	;# 
   898  009E                     	;# 
   899  009F                     	;# 
   900  010C                     	;# 
   901  010D                     	;# 
   902  010E                     	;# 
   903  0111                     	;# 
   904  0112                     	;# 
   905  0113                     	;# 
   906  0114                     	;# 
   907  0115                     	;# 
   908  0116                     	;# 
   909  0117                     	;# 
   910  0118                     	;# 
   911  0119                     	;# 
   912  011C                     	;# 
   913  018C                     	;# 
   914  018D                     	;# 
   915  018E                     	;# 
   916  0191                     	;# 
   917  0191                     	;# 
   918  0192                     	;# 
   919  0193                     	;# 
   920  0193                     	;# 
   921  0194                     	;# 
   922  0195                     	;# 
   923  0196                     	;# 
   924  0199                     	;# 
   925  0199                     	;# 
   926  0199                     	;# 
   927  019A                     	;# 
   928  019A                     	;# 
   929  019A                     	;# 
   930  019B                     	;# 
   931  019B                     	;# 
   932  019B                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019C                     	;# 
   936  019C                     	;# 
   937  019C                     	;# 
   938  019D                     	;# 
   939  019D                     	;# 
   940  019D                     	;# 
   941  019E                     	;# 
   942  019E                     	;# 
   943  019E                     	;# 
   944  019F                     	;# 
   945  019F                     	;# 
   946  019F                     	;# 
   947  019F                     	;# 
   948  019F                     	;# 
   949  020C                     	;# 
   950  020D                     	;# 
   951  020E                     	;# 
   952  0211                     	;# 
   953  0211                     	;# 
   954  0212                     	;# 
   955  0212                     	;# 
   956  0213                     	;# 
   957  0213                     	;# 
   958  0214                     	;# 
   959  0214                     	;# 
   960  0215                     	;# 
   961  0215                     	;# 
   962  0215                     	;# 
   963  0215                     	;# 
   964  0216                     	;# 
   965  0216                     	;# 
   966  0217                     	;# 
   967  0217                     	;# 
   968  028C                     	;# 
   969  028D                     	;# 
   970  028E                     	;# 
   971  0291                     	;# 
   972  0291                     	;# 
   973  0292                     	;# 
   974  0293                     	;# 
   975  0293                     	;# 
   976  0298                     	;# 
   977  0298                     	;# 
   978  0299                     	;# 
   979  029A                     	;# 
   980  029A                     	;# 
   981  029E                     	;# 
   982  030C                     	;# 
   983  030D                     	;# 
   984  030E                     	;# 
   985  038C                     	;# 
   986  038D                     	;# 
   987  038E                     	;# 
   988  0391                     	;# 
   989  0392                     	;# 
   990  0393                     	;# 
   991  0394                     	;# 
   992  0395                     	;# 
   993  0396                     	;# 
   994  0397                     	;# 
   995  0398                     	;# 
   996  0399                     	;# 
   997  0415                     	;# 
   998  0416                     	;# 
   999  0417                     	;# 
  1000  041C                     	;# 
  1001  041D                     	;# 
  1002  041E                     	;# 
  1003  0511                     	;# 
  1004  0515                     	;# 
  1005  0617                     	;# 
  1006  0618                     	;# 
  1007  0619                     	;# 
  1008  0619                     	;# 
  1009  061A                     	;# 
  1010  061B                     	;# 
  1011  061C                     	;# 
  1012  061C                     	;# 
  1013  0691                     	;# 
  1014  0692                     	;# 
  1015  0693                     	;# 
  1016  0694                     	;# 
  1017  0695                     	;# 
  1018  0696                     	;# 
  1019  0697                     	;# 
  1020  0698                     	;# 
  1021  0699                     	;# 
  1022  069A                     	;# 
  1023  069B                     	;# 
  1024  069C                     	;# 
  1025  069D                     	;# 
  1026  069E                     	;# 
  1027  069F                     	;# 
  1028  0E0F                     	;# 
  1029  0E10                     	;# 
  1030  0E11                     	;# 
  1031  0E12                     	;# 
  1032  0E13                     	;# 
  1033  0E14                     	;# 
  1034  0E15                     	;# 
  1035  0E17                     	;# 
  1036  0E20                     	;# 
  1037  0E21                     	;# 
  1038  0E22                     	;# 
  1039  0E24                     	;# 
  1040  0E25                     	;# 
  1041  0E28                     	;# 
  1042  0E29                     	;# 
  1043  0E2A                     	;# 
  1044  0E2B                     	;# 
  1045  0E90                     	;# 
  1046  0E91                     	;# 
  1047  0E92                     	;# 
  1048  0E94                     	;# 
  1049  0E95                     	;# 
  1050  0E9C                     	;# 
  1051  0E9D                     	;# 
  1052  0E9E                     	;# 
  1053  0E9F                     	;# 
  1054  0EA0                     	;# 
  1055  0EA1                     	;# 
  1056  0EA2                     	;# 
  1057  0EA3                     	;# 
  1058  0EA4                     	;# 
  1059  0EA5                     	;# 
  1060  0EA6                     	;# 
  1061  0EA7                     	;# 
  1062  0F0F                     	;# 
  1063  0F10                     	;# 
  1064  0F11                     	;# 
  1065  0F12                     	;# 
  1066  0F13                     	;# 
  1067  0F14                     	;# 
  1068  0F15                     	;# 
  1069  0F16                     	;# 
  1070  0F17                     	;# 
  1071  0F18                     	;# 
  1072  0F19                     	;# 
  1073  0F1A                     	;# 
  1074  0F1B                     	;# 
  1075  0F1C                     	;# 
  1076  0F1D                     	;# 
  1077  0F1E                     	;# 
  1078  0F1F                     	;# 
  1079  0F20                     	;# 
  1080  0F21                     	;# 
  1081  0F22                     	;# 
  1082  0F23                     	;# 
  1083  0F24                     	;# 
  1084  0F25                     	;# 
  1085  0F26                     	;# 
  1086  0F27                     	;# 
  1087  0F28                     	;# 
  1088  0F29                     	;# 
  1089  0F2A                     	;# 
  1090  0F2B                     	;# 
  1091  0F2C                     	;# 
  1092  0F2D                     	;# 
  1093  0FE4                     	;# 
  1094  0FE5                     	;# 
  1095  0FE6                     	;# 
  1096  0FE7                     	;# 
  1097  0FE8                     	;# 
  1098  0FE9                     	;# 
  1099  0FEA                     	;# 
  1100  0FEB                     	;# 
  1101  0FED                     	;# 
  1102  0FEE                     	;# 
  1103  0FEF                     	;# 
  1104  0000                     	;# 
  1105  0001                     	;# 
  1106  0002                     	;# 
  1107  0003                     	;# 
  1108  0004                     	;# 
  1109  0005                     	;# 
  1110  0006                     	;# 
  1111  0007                     	;# 
  1112  0008                     	;# 
  1113  0009                     	;# 
  1114  000A                     	;# 
  1115  000B                     	;# 
  1116  000C                     	;# 
  1117  000D                     	;# 
  1118  000E                     	;# 
  1119  0011                     	;# 
  1120  0012                     	;# 
  1121  0013                     	;# 
  1122  0015                     	;# 
  1123  0016                     	;# 
  1124  0016                     	;# 
  1125  0017                     	;# 
  1126  0018                     	;# 
  1127  0019                     	;# 
  1128  001A                     	;# 
  1129  001B                     	;# 
  1130  001C                     	;# 
  1131  008C                     	;# 
  1132  008D                     	;# 
  1133  008E                     	;# 
  1134  0091                     	;# 
  1135  0092                     	;# 
  1136  0093                     	;# 
  1137  0095                     	;# 
  1138  0096                     	;# 
  1139  0097                     	;# 
  1140  0098                     	;# 
  1141  0099                     	;# 
  1142  009A                     	;# 
  1143  009B                     	;# 
  1144  009B                     	;# 
  1145  009C                     	;# 
  1146  009D                     	;# 
  1147  009E                     	;# 
  1148  009F                     	;# 
  1149  010C                     	;# 
  1150  010D                     	;# 
  1151  010E                     	;# 
  1152  0111                     	;# 
  1153  0112                     	;# 
  1154  0113                     	;# 
  1155  0114                     	;# 
  1156  0115                     	;# 
  1157  0116                     	;# 
  1158  0117                     	;# 
  1159  0118                     	;# 
  1160  0119                     	;# 
  1161  011C                     	;# 
  1162  018C                     	;# 
  1163  018D                     	;# 
  1164  018E                     	;# 
  1165  0191                     	;# 
  1166  0191                     	;# 
  1167  0192                     	;# 
  1168  0193                     	;# 
  1169  0193                     	;# 
  1170  0194                     	;# 
  1171  0195                     	;# 
  1172  0196                     	;# 
  1173  0199                     	;# 
  1174  0199                     	;# 
  1175  0199                     	;# 
  1176  019A                     	;# 
  1177  019A                     	;# 
  1178  019A                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019C                     	;# 
  1185  019C                     	;# 
  1186  019C                     	;# 
  1187  019D                     	;# 
  1188  019D                     	;# 
  1189  019D                     	;# 
  1190  019E                     	;# 
  1191  019E                     	;# 
  1192  019E                     	;# 
  1193  019F                     	;# 
  1194  019F                     	;# 
  1195  019F                     	;# 
  1196  019F                     	;# 
  1197  019F                     	;# 
  1198  020C                     	;# 
  1199  020D                     	;# 
  1200  020E                     	;# 
  1201  0211                     	;# 
  1202  0211                     	;# 
  1203  0212                     	;# 
  1204  0212                     	;# 
  1205  0213                     	;# 
  1206  0213                     	;# 
  1207  0214                     	;# 
  1208  0214                     	;# 
  1209  0215                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0216                     	;# 
  1214  0216                     	;# 
  1215  0217                     	;# 
  1216  0217                     	;# 
  1217  028C                     	;# 
  1218  028D                     	;# 
  1219  028E                     	;# 
  1220  0291                     	;# 
  1221  0291                     	;# 
  1222  0292                     	;# 
  1223  0293                     	;# 
  1224  0293                     	;# 
  1225  0298                     	;# 
  1226  0298                     	;# 
  1227  0299                     	;# 
  1228  029A                     	;# 
  1229  029A                     	;# 
  1230  029E                     	;# 
  1231  030C                     	;# 
  1232  030D                     	;# 
  1233  030E                     	;# 
  1234  038C                     	;# 
  1235  038D                     	;# 
  1236  038E                     	;# 
  1237  0391                     	;# 
  1238  0392                     	;# 
  1239  0393                     	;# 
  1240  0394                     	;# 
  1241  0395                     	;# 
  1242  0396                     	;# 
  1243  0397                     	;# 
  1244  0398                     	;# 
  1245  0399                     	;# 
  1246  0415                     	;# 
  1247  0416                     	;# 
  1248  0417                     	;# 
  1249  041C                     	;# 
  1250  041D                     	;# 
  1251  041E                     	;# 
  1252  0511                     	;# 
  1253  0515                     	;# 
  1254  0617                     	;# 
  1255  0618                     	;# 
  1256  0619                     	;# 
  1257  0619                     	;# 
  1258  061A                     	;# 
  1259  061B                     	;# 
  1260  061C                     	;# 
  1261  061C                     	;# 
  1262  0691                     	;# 
  1263  0692                     	;# 
  1264  0693                     	;# 
  1265  0694                     	;# 
  1266  0695                     	;# 
  1267  0696                     	;# 
  1268  0697                     	;# 
  1269  0698                     	;# 
  1270  0699                     	;# 
  1271  069A                     	;# 
  1272  069B                     	;# 
  1273  069C                     	;# 
  1274  069D                     	;# 
  1275  069E                     	;# 
  1276  069F                     	;# 
  1277  0E0F                     	;# 
  1278  0E10                     	;# 
  1279  0E11                     	;# 
  1280  0E12                     	;# 
  1281  0E13                     	;# 
  1282  0E14                     	;# 
  1283  0E15                     	;# 
  1284  0E17                     	;# 
  1285  0E20                     	;# 
  1286  0E21                     	;# 
  1287  0E22                     	;# 
  1288  0E24                     	;# 
  1289  0E25                     	;# 
  1290  0E28                     	;# 
  1291  0E29                     	;# 
  1292  0E2A                     	;# 
  1293  0E2B                     	;# 
  1294  0E90                     	;# 
  1295  0E91                     	;# 
  1296  0E92                     	;# 
  1297  0E94                     	;# 
  1298  0E95                     	;# 
  1299  0E9C                     	;# 
  1300  0E9D                     	;# 
  1301  0E9E                     	;# 
  1302  0E9F                     	;# 
  1303  0EA0                     	;# 
  1304  0EA1                     	;# 
  1305  0EA2                     	;# 
  1306  0EA3                     	;# 
  1307  0EA4                     	;# 
  1308  0EA5                     	;# 
  1309  0EA6                     	;# 
  1310  0EA7                     	;# 
  1311  0F0F                     	;# 
  1312  0F10                     	;# 
  1313  0F11                     	;# 
  1314  0F12                     	;# 
  1315  0F13                     	;# 
  1316  0F14                     	;# 
  1317  0F15                     	;# 
  1318  0F16                     	;# 
  1319  0F17                     	;# 
  1320  0F18                     	;# 
  1321  0F19                     	;# 
  1322  0F1A                     	;# 
  1323  0F1B                     	;# 
  1324  0F1C                     	;# 
  1325  0F1D                     	;# 
  1326  0F1E                     	;# 
  1327  0F1F                     	;# 
  1328  0F20                     	;# 
  1329  0F21                     	;# 
  1330  0F22                     	;# 
  1331  0F23                     	;# 
  1332  0F24                     	;# 
  1333  0F25                     	;# 
  1334  0F26                     	;# 
  1335  0F27                     	;# 
  1336  0F28                     	;# 
  1337  0F29                     	;# 
  1338  0F2A                     	;# 
  1339  0F2B                     	;# 
  1340  0F2C                     	;# 
  1341  0F2D                     	;# 
  1342  0FE4                     	;# 
  1343  0FE5                     	;# 
  1344  0FE6                     	;# 
  1345  0FE7                     	;# 
  1346  0FE8                     	;# 
  1347  0FE9                     	;# 
  1348  0FEA                     	;# 
  1349  0FEB                     	;# 
  1350  0FED                     	;# 
  1351  0FEE                     	;# 
  1352  0FEF                     	;# 
  1353  0000                     	;# 
  1354  0001                     	;# 
  1355  0002                     	;# 
  1356  0003                     	;# 
  1357  0004                     	;# 
  1358  0005                     	;# 
  1359  0006                     	;# 
  1360  0007                     	;# 
  1361  0008                     	;# 
  1362  0009                     	;# 
  1363  000A                     	;# 
  1364  000B                     	;# 
  1365  000C                     	;# 
  1366  000D                     	;# 
  1367  000E                     	;# 
  1368  0011                     	;# 
  1369  0012                     	;# 
  1370  0013                     	;# 
  1371  0015                     	;# 
  1372  0016                     	;# 
  1373  0016                     	;# 
  1374  0017                     	;# 
  1375  0018                     	;# 
  1376  0019                     	;# 
  1377  001A                     	;# 
  1378  001B                     	;# 
  1379  001C                     	;# 
  1380  008C                     	;# 
  1381  008D                     	;# 
  1382  008E                     	;# 
  1383  0091                     	;# 
  1384  0092                     	;# 
  1385  0093                     	;# 
  1386  0095                     	;# 
  1387  0096                     	;# 
  1388  0097                     	;# 
  1389  0098                     	;# 
  1390  0099                     	;# 
  1391  009A                     	;# 
  1392  009B                     	;# 
  1393  009B                     	;# 
  1394  009C                     	;# 
  1395  009D                     	;# 
  1396  009E                     	;# 
  1397  009F                     	;# 
  1398  010C                     	;# 
  1399  010D                     	;# 
  1400  010E                     	;# 
  1401  0111                     	;# 
  1402  0112                     	;# 
  1403  0113                     	;# 
  1404  0114                     	;# 
  1405  0115                     	;# 
  1406  0116                     	;# 
  1407  0117                     	;# 
  1408  0118                     	;# 
  1409  0119                     	;# 
  1410  011C                     	;# 
  1411  018C                     	;# 
  1412  018D                     	;# 
  1413  018E                     	;# 
  1414  0191                     	;# 
  1415  0191                     	;# 
  1416  0192                     	;# 
  1417  0193                     	;# 
  1418  0193                     	;# 
  1419  0194                     	;# 
  1420  0195                     	;# 
  1421  0196                     	;# 
  1422  0199                     	;# 
  1423  0199                     	;# 
  1424  0199                     	;# 
  1425  019A                     	;# 
  1426  019A                     	;# 
  1427  019A                     	;# 
  1428  019B                     	;# 
  1429  019B                     	;# 
  1430  019B                     	;# 
  1431  019B                     	;# 
  1432  019B                     	;# 
  1433  019C                     	;# 
  1434  019C                     	;# 
  1435  019C                     	;# 
  1436  019D                     	;# 
  1437  019D                     	;# 
  1438  019D                     	;# 
  1439  019E                     	;# 
  1440  019E                     	;# 
  1441  019E                     	;# 
  1442  019F                     	;# 
  1443  019F                     	;# 
  1444  019F                     	;# 
  1445  019F                     	;# 
  1446  019F                     	;# 
  1447  020C                     	;# 
  1448  020D                     	;# 
  1449  020E                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0216                     	;# 
  1463  0216                     	;# 
  1464  0217                     	;# 
  1465  0217                     	;# 
  1466  028C                     	;# 
  1467  028D                     	;# 
  1468  028E                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0293                     	;# 
  1474  0298                     	;# 
  1475  0298                     	;# 
  1476  0299                     	;# 
  1477  029A                     	;# 
  1478  029A                     	;# 
  1479  029E                     	;# 
  1480  030C                     	;# 
  1481  030D                     	;# 
  1482  030E                     	;# 
  1483  038C                     	;# 
  1484  038D                     	;# 
  1485  038E                     	;# 
  1486  0391                     	;# 
  1487  0392                     	;# 
  1488  0393                     	;# 
  1489  0394                     	;# 
  1490  0395                     	;# 
  1491  0396                     	;# 
  1492  0397                     	;# 
  1493  0398                     	;# 
  1494  0399                     	;# 
  1495  0415                     	;# 
  1496  0416                     	;# 
  1497  0417                     	;# 
  1498  041C                     	;# 
  1499  041D                     	;# 
  1500  041E                     	;# 
  1501  0511                     	;# 
  1502  0515                     	;# 
  1503  0617                     	;# 
  1504  0618                     	;# 
  1505  0619                     	;# 
  1506  0619                     	;# 
  1507  061A                     	;# 
  1508  061B                     	;# 
  1509  061C                     	;# 
  1510  061C                     	;# 
  1511  0691                     	;# 
  1512  0692                     	;# 
  1513  0693                     	;# 
  1514  0694                     	;# 
  1515  0695                     	;# 
  1516  0696                     	;# 
  1517  0697                     	;# 
  1518  0698                     	;# 
  1519  0699                     	;# 
  1520  069A                     	;# 
  1521  069B                     	;# 
  1522  069C                     	;# 
  1523  069D                     	;# 
  1524  069E                     	;# 
  1525  069F                     	;# 
  1526  0E0F                     	;# 
  1527  0E10                     	;# 
  1528  0E11                     	;# 
  1529  0E12                     	;# 
  1530  0E13                     	;# 
  1531  0E14                     	;# 
  1532  0E15                     	;# 
  1533  0E17                     	;# 
  1534  0E20                     	;# 
  1535  0E21                     	;# 
  1536  0E22                     	;# 
  1537  0E24                     	;# 
  1538  0E25                     	;# 
  1539  0E28                     	;# 
  1540  0E29                     	;# 
  1541  0E2A                     	;# 
  1542  0E2B                     	;# 
  1543  0E90                     	;# 
  1544  0E91                     	;# 
  1545  0E92                     	;# 
  1546  0E94                     	;# 
  1547  0E95                     	;# 
  1548  0E9C                     	;# 
  1549  0E9D                     	;# 
  1550  0E9E                     	;# 
  1551  0E9F                     	;# 
  1552  0EA0                     	;# 
  1553  0EA1                     	;# 
  1554  0EA2                     	;# 
  1555  0EA3                     	;# 
  1556  0EA4                     	;# 
  1557  0EA5                     	;# 
  1558  0EA6                     	;# 
  1559  0EA7                     	;# 
  1560  0F0F                     	;# 
  1561  0F10                     	;# 
  1562  0F11                     	;# 
  1563  0F12                     	;# 
  1564  0F13                     	;# 
  1565  0F14                     	;# 
  1566  0F15                     	;# 
  1567  0F16                     	;# 
  1568  0F17                     	;# 
  1569  0F18                     	;# 
  1570  0F19                     	;# 
  1571  0F1A                     	;# 
  1572  0F1B                     	;# 
  1573  0F1C                     	;# 
  1574  0F1D                     	;# 
  1575  0F1E                     	;# 
  1576  0F1F                     	;# 
  1577  0F20                     	;# 
  1578  0F21                     	;# 
  1579  0F22                     	;# 
  1580  0F23                     	;# 
  1581  0F24                     	;# 
  1582  0F25                     	;# 
  1583  0F26                     	;# 
  1584  0F27                     	;# 
  1585  0F28                     	;# 
  1586  0F29                     	;# 
  1587  0F2A                     	;# 
  1588  0F2B                     	;# 
  1589  0F2C                     	;# 
  1590  0F2D                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0011                     	;# 
  1618  0012                     	;# 
  1619  0013                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0091                     	;# 
  1633  0092                     	;# 
  1634  0093                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0098                     	;# 
  1639  0099                     	;# 
  1640  009A                     	;# 
  1641  009B                     	;# 
  1642  009B                     	;# 
  1643  009C                     	;# 
  1644  009D                     	;# 
  1645  009E                     	;# 
  1646  009F                     	;# 
  1647  010C                     	;# 
  1648  010D                     	;# 
  1649  010E                     	;# 
  1650  0111                     	;# 
  1651  0112                     	;# 
  1652  0113                     	;# 
  1653  0114                     	;# 
  1654  0115                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  0118                     	;# 
  1658  0119                     	;# 
  1659  011C                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0199                     	;# 
  1672  0199                     	;# 
  1673  0199                     	;# 
  1674  019A                     	;# 
  1675  019A                     	;# 
  1676  019A                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019C                     	;# 
  1683  019C                     	;# 
  1684  019C                     	;# 
  1685  019D                     	;# 
  1686  019D                     	;# 
  1687  019D                     	;# 
  1688  019E                     	;# 
  1689  019E                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  019F                     	;# 
  1693  019F                     	;# 
  1694  019F                     	;# 
  1695  019F                     	;# 
  1696  020C                     	;# 
  1697  020D                     	;# 
  1698  020E                     	;# 
  1699  0211                     	;# 
  1700  0211                     	;# 
  1701  0212                     	;# 
  1702  0212                     	;# 
  1703  0213                     	;# 
  1704  0213                     	;# 
  1705  0214                     	;# 
  1706  0214                     	;# 
  1707  0215                     	;# 
  1708  0215                     	;# 
  1709  0215                     	;# 
  1710  0215                     	;# 
  1711  0216                     	;# 
  1712  0216                     	;# 
  1713  0217                     	;# 
  1714  0217                     	;# 
  1715  028C                     	;# 
  1716  028D                     	;# 
  1717  028E                     	;# 
  1718  0291                     	;# 
  1719  0291                     	;# 
  1720  0292                     	;# 
  1721  0293                     	;# 
  1722  0293                     	;# 
  1723  0298                     	;# 
  1724  0298                     	;# 
  1725  0299                     	;# 
  1726  029A                     	;# 
  1727  029A                     	;# 
  1728  029E                     	;# 
  1729  030C                     	;# 
  1730  030D                     	;# 
  1731  030E                     	;# 
  1732  038C                     	;# 
  1733  038D                     	;# 
  1734  038E                     	;# 
  1735  0391                     	;# 
  1736  0392                     	;# 
  1737  0393                     	;# 
  1738  0394                     	;# 
  1739  0395                     	;# 
  1740  0396                     	;# 
  1741  0397                     	;# 
  1742  0398                     	;# 
  1743  0399                     	;# 
  1744  0415                     	;# 
  1745  0416                     	;# 
  1746  0417                     	;# 
  1747  041C                     	;# 
  1748  041D                     	;# 
  1749  041E                     	;# 
  1750  0511                     	;# 
  1751  0515                     	;# 
  1752  0617                     	;# 
  1753  0618                     	;# 
  1754  0619                     	;# 
  1755  0619                     	;# 
  1756  061A                     	;# 
  1757  061B                     	;# 
  1758  061C                     	;# 
  1759  061C                     	;# 
  1760  0691                     	;# 
  1761  0692                     	;# 
  1762  0693                     	;# 
  1763  0694                     	;# 
  1764  0695                     	;# 
  1765  0696                     	;# 
  1766  0697                     	;# 
  1767  0698                     	;# 
  1768  0699                     	;# 
  1769  069A                     	;# 
  1770  069B                     	;# 
  1771  069C                     	;# 
  1772  069D                     	;# 
  1773  069E                     	;# 
  1774  069F                     	;# 
  1775  0E0F                     	;# 
  1776  0E10                     	;# 
  1777  0E11                     	;# 
  1778  0E12                     	;# 
  1779  0E13                     	;# 
  1780  0E14                     	;# 
  1781  0E15                     	;# 
  1782  0E17                     	;# 
  1783  0E20                     	;# 
  1784  0E21                     	;# 
  1785  0E22                     	;# 
  1786  0E24                     	;# 
  1787  0E25                     	;# 
  1788  0E28                     	;# 
  1789  0E29                     	;# 
  1790  0E2A                     	;# 
  1791  0E2B                     	;# 
  1792  0E90                     	;# 
  1793  0E91                     	;# 
  1794  0E92                     	;# 
  1795  0E94                     	;# 
  1796  0E95                     	;# 
  1797  0E9C                     	;# 
  1798  0E9D                     	;# 
  1799  0E9E                     	;# 
  1800  0E9F                     	;# 
  1801  0EA0                     	;# 
  1802  0EA1                     	;# 
  1803  0EA2                     	;# 
  1804  0EA3                     	;# 
  1805  0EA4                     	;# 
  1806  0EA5                     	;# 
  1807  0EA6                     	;# 
  1808  0EA7                     	;# 
  1809  0F0F                     	;# 
  1810  0F10                     	;# 
  1811  0F11                     	;# 
  1812  0F12                     	;# 
  1813  0F13                     	;# 
  1814  0F14                     	;# 
  1815  0F15                     	;# 
  1816  0F16                     	;# 
  1817  0F17                     	;# 
  1818  0F18                     	;# 
  1819  0F19                     	;# 
  1820  0F1A                     	;# 
  1821  0F1B                     	;# 
  1822  0F1C                     	;# 
  1823  0F1D                     	;# 
  1824  0F1E                     	;# 
  1825  0F1F                     	;# 
  1826  0F20                     	;# 
  1827  0F21                     	;# 
  1828  0F22                     	;# 
  1829  0F23                     	;# 
  1830  0F24                     	;# 
  1831  0F25                     	;# 
  1832  0F26                     	;# 
  1833  0F27                     	;# 
  1834  0F28                     	;# 
  1835  0F29                     	;# 
  1836  0F2A                     	;# 
  1837  0F2B                     	;# 
  1838  0F2C                     	;# 
  1839  0F2D                     	;# 
  1840  0FE4                     	;# 
  1841  0FE5                     	;# 
  1842  0FE6                     	;# 
  1843  0FE7                     	;# 
  1844  0FE8                     	;# 
  1845  0FE9                     	;# 
  1846  0FEA                     	;# 
  1847  0FEB                     	;# 
  1848  0FED                     	;# 
  1849  0FEE                     	;# 
  1850  0FEF                     	;# 
  1851  0000                     	;# 
  1852  0001                     	;# 
  1853  0002                     	;# 
  1854  0003                     	;# 
  1855  0004                     	;# 
  1856  0005                     	;# 
  1857  0006                     	;# 
  1858  0007                     	;# 
  1859  0008                     	;# 
  1860  0009                     	;# 
  1861  000A                     	;# 
  1862  000B                     	;# 
  1863  000C                     	;# 
  1864  000D                     	;# 
  1865  000E                     	;# 
  1866  0011                     	;# 
  1867  0012                     	;# 
  1868  0013                     	;# 
  1869  0015                     	;# 
  1870  0016                     	;# 
  1871  0016                     	;# 
  1872  0017                     	;# 
  1873  0018                     	;# 
  1874  0019                     	;# 
  1875  001A                     	;# 
  1876  001B                     	;# 
  1877  001C                     	;# 
  1878  008C                     	;# 
  1879  008D                     	;# 
  1880  008E                     	;# 
  1881  0091                     	;# 
  1882  0092                     	;# 
  1883  0093                     	;# 
  1884  0095                     	;# 
  1885  0096                     	;# 
  1886  0097                     	;# 
  1887  0098                     	;# 
  1888  0099                     	;# 
  1889  009A                     	;# 
  1890  009B                     	;# 
  1891  009B                     	;# 
  1892  009C                     	;# 
  1893  009D                     	;# 
  1894  009E                     	;# 
  1895  009F                     	;# 
  1896  010C                     	;# 
  1897  010D                     	;# 
  1898  010E                     	;# 
  1899  0111                     	;# 
  1900  0112                     	;# 
  1901  0113                     	;# 
  1902  0114                     	;# 
  1903  0115                     	;# 
  1904  0116                     	;# 
  1905  0117                     	;# 
  1906  0118                     	;# 
  1907  0119                     	;# 
  1908  011C                     	;# 
  1909  018C                     	;# 
  1910  018D                     	;# 
  1911  018E                     	;# 
  1912  0191                     	;# 
  1913  0191                     	;# 
  1914  0192                     	;# 
  1915  0193                     	;# 
  1916  0193                     	;# 
  1917  0194                     	;# 
  1918  0195                     	;# 
  1919  0196                     	;# 
  1920  0199                     	;# 
  1921  0199                     	;# 
  1922  0199                     	;# 
  1923  019A                     	;# 
  1924  019A                     	;# 
  1925  019A                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019B                     	;# 
  1929  019B                     	;# 
  1930  019B                     	;# 
  1931  019C                     	;# 
  1932  019C                     	;# 
  1933  019C                     	;# 
  1934  019D                     	;# 
  1935  019D                     	;# 
  1936  019D                     	;# 
  1937  019E                     	;# 
  1938  019E                     	;# 
  1939  019E                     	;# 
  1940  019F                     	;# 
  1941  019F                     	;# 
  1942  019F                     	;# 
  1943  019F                     	;# 
  1944  019F                     	;# 
  1945  020C                     	;# 
  1946  020D                     	;# 
  1947  020E                     	;# 
  1948  0211                     	;# 
  1949  0211                     	;# 
  1950  0212                     	;# 
  1951  0212                     	;# 
  1952  0213                     	;# 
  1953  0213                     	;# 
  1954  0214                     	;# 
  1955  0214                     	;# 
  1956  0215                     	;# 
  1957  0215                     	;# 
  1958  0215                     	;# 
  1959  0215                     	;# 
  1960  0216                     	;# 
  1961  0216                     	;# 
  1962  0217                     	;# 
  1963  0217                     	;# 
  1964  028C                     	;# 
  1965  028D                     	;# 
  1966  028E                     	;# 
  1967  0291                     	;# 
  1968  0291                     	;# 
  1969  0292                     	;# 
  1970  0293                     	;# 
  1971  0293                     	;# 
  1972  0298                     	;# 
  1973  0298                     	;# 
  1974  0299                     	;# 
  1975  029A                     	;# 
  1976  029A                     	;# 
  1977  029E                     	;# 
  1978  030C                     	;# 
  1979  030D                     	;# 
  1980  030E                     	;# 
  1981  038C                     	;# 
  1982  038D                     	;# 
  1983  038E                     	;# 
  1984  0391                     	;# 
  1985  0392                     	;# 
  1986  0393                     	;# 
  1987  0394                     	;# 
  1988  0395                     	;# 
  1989  0396                     	;# 
  1990  0397                     	;# 
  1991  0398                     	;# 
  1992  0399                     	;# 
  1993  0415                     	;# 
  1994  0416                     	;# 
  1995  0417                     	;# 
  1996  041C                     	;# 
  1997  041D                     	;# 
  1998  041E                     	;# 
  1999  0511                     	;# 
  2000  0515                     	;# 
  2001  0617                     	;# 
  2002  0618                     	;# 
  2003  0619                     	;# 
  2004  0619                     	;# 
  2005  061A                     	;# 
  2006  061B                     	;# 
  2007  061C                     	;# 
  2008  061C                     	;# 
  2009  0691                     	;# 
  2010  0692                     	;# 
  2011  0693                     	;# 
  2012  0694                     	;# 
  2013  0695                     	;# 
  2014  0696                     	;# 
  2015  0697                     	;# 
  2016  0698                     	;# 
  2017  0699                     	;# 
  2018  069A                     	;# 
  2019  069B                     	;# 
  2020  069C                     	;# 
  2021  069D                     	;# 
  2022  069E                     	;# 
  2023  069F                     	;# 
  2024  0E0F                     	;# 
  2025  0E10                     	;# 
  2026  0E11                     	;# 
  2027  0E12                     	;# 
  2028  0E13                     	;# 
  2029  0E14                     	;# 
  2030  0E15                     	;# 
  2031  0E17                     	;# 
  2032  0E20                     	;# 
  2033  0E21                     	;# 
  2034  0E22                     	;# 
  2035  0E24                     	;# 
  2036  0E25                     	;# 
  2037  0E28                     	;# 
  2038  0E29                     	;# 
  2039  0E2A                     	;# 
  2040  0E2B                     	;# 
  2041  0E90                     	;# 
  2042  0E91                     	;# 
  2043  0E92                     	;# 
  2044  0E94                     	;# 
  2045  0E95                     	;# 
  2046  0E9C                     	;# 
  2047  0E9D                     	;# 
  2048  0E9E                     	;# 
  2049  0E9F                     	;# 
  2050  0EA0                     	;# 
  2051  0EA1                     	;# 
  2052  0EA2                     	;# 
  2053  0EA3                     	;# 
  2054  0EA4                     	;# 
  2055  0EA5                     	;# 
  2056  0EA6                     	;# 
  2057  0EA7                     	;# 
  2058  0F0F                     	;# 
  2059  0F10                     	;# 
  2060  0F11                     	;# 
  2061  0F12                     	;# 
  2062  0F13                     	;# 
  2063  0F14                     	;# 
  2064  0F15                     	;# 
  2065  0F16                     	;# 
  2066  0F17                     	;# 
  2067  0F18                     	;# 
  2068  0F19                     	;# 
  2069  0F1A                     	;# 
  2070  0F1B                     	;# 
  2071  0F1C                     	;# 
  2072  0F1D                     	;# 
  2073  0F1E                     	;# 
  2074  0F1F                     	;# 
  2075  0F20                     	;# 
  2076  0F21                     	;# 
  2077  0F22                     	;# 
  2078  0F23                     	;# 
  2079  0F24                     	;# 
  2080  0F25                     	;# 
  2081  0F26                     	;# 
  2082  0F27                     	;# 
  2083  0F28                     	;# 
  2084  0F29                     	;# 
  2085  0F2A                     	;# 
  2086  0F2B                     	;# 
  2087  0F2C                     	;# 
  2088  0F2D                     	;# 
  2089  0FE4                     	;# 
  2090  0FE5                     	;# 
  2091  0FE6                     	;# 
  2092  0FE7                     	;# 
  2093  0FE8                     	;# 
  2094  0FE9                     	;# 
  2095  0FEA                     	;# 
  2096  0FEB                     	;# 
  2097  0FED                     	;# 
  2098  0FEE                     	;# 
  2099  0FEF                     	;# 
  2100  0000                     	;# 
  2101  0001                     	;# 
  2102  0002                     	;# 
  2103  0003                     	;# 
  2104  0004                     	;# 
  2105  0005                     	;# 
  2106  0006                     	;# 
  2107  0007                     	;# 
  2108  0008                     	;# 
  2109  0009                     	;# 
  2110  000A                     	;# 
  2111  000B                     	;# 
  2112  000C                     	;# 
  2113  000D                     	;# 
  2114  000E                     	;# 
  2115  0011                     	;# 
  2116  0012                     	;# 
  2117  0013                     	;# 
  2118  0015                     	;# 
  2119  0016                     	;# 
  2120  0016                     	;# 
  2121  0017                     	;# 
  2122  0018                     	;# 
  2123  0019                     	;# 
  2124  001A                     	;# 
  2125  001B                     	;# 
  2126  001C                     	;# 
  2127  008C                     	;# 
  2128  008D                     	;# 
  2129  008E                     	;# 
  2130  0091                     	;# 
  2131  0092                     	;# 
  2132  0093                     	;# 
  2133  0095                     	;# 
  2134  0096                     	;# 
  2135  0097                     	;# 
  2136  0098                     	;# 
  2137  0099                     	;# 
  2138  009A                     	;# 
  2139  009B                     	;# 
  2140  009B                     	;# 
  2141  009C                     	;# 
  2142  009D                     	;# 
  2143  009E                     	;# 
  2144  009F                     	;# 
  2145  010C                     	;# 
  2146  010D                     	;# 
  2147  010E                     	;# 
  2148  0111                     	;# 
  2149  0112                     	;# 
  2150  0113                     	;# 
  2151  0114                     	;# 
  2152  0115                     	;# 
  2153  0116                     	;# 
  2154  0117                     	;# 
  2155  0118                     	;# 
  2156  0119                     	;# 
  2157  011C                     	;# 
  2158  018C                     	;# 
  2159  018D                     	;# 
  2160  018E                     	;# 
  2161  0191                     	;# 
  2162  0191                     	;# 
  2163  0192                     	;# 
  2164  0193                     	;# 
  2165  0193                     	;# 
  2166  0194                     	;# 
  2167  0195                     	;# 
  2168  0196                     	;# 
  2169  0199                     	;# 
  2170  0199                     	;# 
  2171  0199                     	;# 
  2172  019A                     	;# 
  2173  019A                     	;# 
  2174  019A                     	;# 
  2175  019B                     	;# 
  2176  019B                     	;# 
  2177  019B                     	;# 
  2178  019B                     	;# 
  2179  019B                     	;# 
  2180  019C                     	;# 
  2181  019C                     	;# 
  2182  019C                     	;# 
  2183  019D                     	;# 
  2184  019D                     	;# 
  2185  019D                     	;# 
  2186  019E                     	;# 
  2187  019E                     	;# 
  2188  019E                     	;# 
  2189  019F                     	;# 
  2190  019F                     	;# 
  2191  019F                     	;# 
  2192  019F                     	;# 
  2193  019F                     	;# 
  2194  020C                     	;# 
  2195  020D                     	;# 
  2196  020E                     	;# 
  2197  0211                     	;# 
  2198  0211                     	;# 
  2199  0212                     	;# 
  2200  0212                     	;# 
  2201  0213                     	;# 
  2202  0213                     	;# 
  2203  0214                     	;# 
  2204  0214                     	;# 
  2205  0215                     	;# 
  2206  0215                     	;# 
  2207  0215                     	;# 
  2208  0215                     	;# 
  2209  0216                     	;# 
  2210  0216                     	;# 
  2211  0217                     	;# 
  2212  0217                     	;# 
  2213  028C                     	;# 
  2214  028D                     	;# 
  2215  028E                     	;# 
  2216  0291                     	;# 
  2217  0291                     	;# 
  2218  0292                     	;# 
  2219  0293                     	;# 
  2220  0293                     	;# 
  2221  0298                     	;# 
  2222  0298                     	;# 
  2223  0299                     	;# 
  2224  029A                     	;# 
  2225  029A                     	;# 
  2226  029E                     	;# 
  2227  030C                     	;# 
  2228  030D                     	;# 
  2229  030E                     	;# 
  2230  038C                     	;# 
  2231  038D                     	;# 
  2232  038E                     	;# 
  2233  0391                     	;# 
  2234  0392                     	;# 
  2235  0393                     	;# 
  2236  0394                     	;# 
  2237  0395                     	;# 
  2238  0396                     	;# 
  2239  0397                     	;# 
  2240  0398                     	;# 
  2241  0399                     	;# 
  2242  0415                     	;# 
  2243  0416                     	;# 
  2244  0417                     	;# 
  2245  041C                     	;# 
  2246  041D                     	;# 
  2247  041E                     	;# 
  2248  0511                     	;# 
  2249  0515                     	;# 
  2250  0617                     	;# 
  2251  0618                     	;# 
  2252  0619                     	;# 
  2253  0619                     	;# 
  2254  061A                     	;# 
  2255  061B                     	;# 
  2256  061C                     	;# 
  2257  061C                     	;# 
  2258  0691                     	;# 
  2259  0692                     	;# 
  2260  0693                     	;# 
  2261  0694                     	;# 
  2262  0695                     	;# 
  2263  0696                     	;# 
  2264  0697                     	;# 
  2265  0698                     	;# 
  2266  0699                     	;# 
  2267  069A                     	;# 
  2268  069B                     	;# 
  2269  069C                     	;# 
  2270  069D                     	;# 
  2271  069E                     	;# 
  2272  069F                     	;# 
  2273  0E0F                     	;# 
  2274  0E10                     	;# 
  2275  0E11                     	;# 
  2276  0E12                     	;# 
  2277  0E13                     	;# 
  2278  0E14                     	;# 
  2279  0E15                     	;# 
  2280  0E17                     	;# 
  2281  0E20                     	;# 
  2282  0E21                     	;# 
  2283  0E22                     	;# 
  2284  0E24                     	;# 
  2285  0E25                     	;# 
  2286  0E28                     	;# 
  2287  0E29                     	;# 
  2288  0E2A                     	;# 
  2289  0E2B                     	;# 
  2290  0E90                     	;# 
  2291  0E91                     	;# 
  2292  0E92                     	;# 
  2293  0E94                     	;# 
  2294  0E95                     	;# 
  2295  0E9C                     	;# 
  2296  0E9D                     	;# 
  2297  0E9E                     	;# 
  2298  0E9F                     	;# 
  2299  0EA0                     	;# 
  2300  0EA1                     	;# 
  2301  0EA2                     	;# 
  2302  0EA3                     	;# 
  2303  0EA4                     	;# 
  2304  0EA5                     	;# 
  2305  0EA6                     	;# 
  2306  0EA7                     	;# 
  2307  0F0F                     	;# 
  2308  0F10                     	;# 
  2309  0F11                     	;# 
  2310  0F12                     	;# 
  2311  0F13                     	;# 
  2312  0F14                     	;# 
  2313  0F15                     	;# 
  2314  0F16                     	;# 
  2315  0F17                     	;# 
  2316  0F18                     	;# 
  2317  0F19                     	;# 
  2318  0F1A                     	;# 
  2319  0F1B                     	;# 
  2320  0F1C                     	;# 
  2321  0F1D                     	;# 
  2322  0F1E                     	;# 
  2323  0F1F                     	;# 
  2324  0F20                     	;# 
  2325  0F21                     	;# 
  2326  0F22                     	;# 
  2327  0F23                     	;# 
  2328  0F24                     	;# 
  2329  0F25                     	;# 
  2330  0F26                     	;# 
  2331  0F27                     	;# 
  2332  0F28                     	;# 
  2333  0F29                     	;# 
  2334  0F2A                     	;# 
  2335  0F2B                     	;# 
  2336  0F2C                     	;# 
  2337  0F2D                     	;# 
  2338  0FE4                     	;# 
  2339  0FE5                     	;# 
  2340  0FE6                     	;# 
  2341  0FE7                     	;# 
  2342  0FE8                     	;# 
  2343  0FE9                     	;# 
  2344  0FEA                     	;# 
  2345  0FEB                     	;# 
  2346  0FED                     	;# 
  2347  0FEE                     	;# 
  2348  0FEF                     	;# 
  2349  0000                     	;# 
  2350  0001                     	;# 
  2351  0002                     	;# 
  2352  0003                     	;# 
  2353  0004                     	;# 
  2354  0005                     	;# 
  2355  0006                     	;# 
  2356  0007                     	;# 
  2357  0008                     	;# 
  2358  0009                     	;# 
  2359  000A                     	;# 
  2360  000B                     	;# 
  2361  000C                     	;# 
  2362  000D                     	;# 
  2363  000E                     	;# 
  2364  0011                     	;# 
  2365  0012                     	;# 
  2366  0013                     	;# 
  2367  0015                     	;# 
  2368  0016                     	;# 
  2369  0016                     	;# 
  2370  0017                     	;# 
  2371  0018                     	;# 
  2372  0019                     	;# 
  2373  001A                     	;# 
  2374  001B                     	;# 
  2375  001C                     	;# 
  2376  008C                     	;# 
  2377  008D                     	;# 
  2378  008E                     	;# 
  2379  0091                     	;# 
  2380  0092                     	;# 
  2381  0093                     	;# 
  2382  0095                     	;# 
  2383  0096                     	;# 
  2384  0097                     	;# 
  2385  0098                     	;# 
  2386  0099                     	;# 
  2387  009A                     	;# 
  2388  009B                     	;# 
  2389  009B                     	;# 
  2390  009C                     	;# 
  2391  009D                     	;# 
  2392  009E                     	;# 
  2393  009F                     	;# 
  2394  010C                     	;# 
  2395  010D                     	;# 
  2396  010E                     	;# 
  2397  0111                     	;# 
  2398  0112                     	;# 
  2399  0113                     	;# 
  2400  0114                     	;# 
  2401  0115                     	;# 
  2402  0116                     	;# 
  2403  0117                     	;# 
  2404  0118                     	;# 
  2405  0119                     	;# 
  2406  011C                     	;# 
  2407  018C                     	;# 
  2408  018D                     	;# 
  2409  018E                     	;# 
  2410  0191                     	;# 
  2411  0191                     	;# 
  2412  0192                     	;# 
  2413  0193                     	;# 
  2414  0193                     	;# 
  2415  0194                     	;# 
  2416  0195                     	;# 
  2417  0196                     	;# 
  2418  0199                     	;# 
  2419  0199                     	;# 
  2420  0199                     	;# 
  2421  019A                     	;# 
  2422  019A                     	;# 
  2423  019A                     	;# 
  2424  019B                     	;# 
  2425  019B                     	;# 
  2426  019B                     	;# 
  2427  019B                     	;# 
  2428  019B                     	;# 
  2429  019C                     	;# 
  2430  019C                     	;# 
  2431  019C                     	;# 
  2432  019D                     	;# 
  2433  019D                     	;# 
  2434  019D                     	;# 
  2435  019E                     	;# 
  2436  019E                     	;# 
  2437  019E                     	;# 
  2438  019F                     	;# 
  2439  019F                     	;# 
  2440  019F                     	;# 
  2441  019F                     	;# 
  2442  019F                     	;# 
  2443  020C                     	;# 
  2444  020D                     	;# 
  2445  020E                     	;# 
  2446  0211                     	;# 
  2447  0211                     	;# 
  2448  0212                     	;# 
  2449  0212                     	;# 
  2450  0213                     	;# 
  2451  0213                     	;# 
  2452  0214                     	;# 
  2453  0214                     	;# 
  2454  0215                     	;# 
  2455  0215                     	;# 
  2456  0215                     	;# 
  2457  0215                     	;# 
  2458  0216                     	;# 
  2459  0216                     	;# 
  2460  0217                     	;# 
  2461  0217                     	;# 
  2462  028C                     	;# 
  2463  028D                     	;# 
  2464  028E                     	;# 
  2465  0291                     	;# 
  2466  0291                     	;# 
  2467  0292                     	;# 
  2468  0293                     	;# 
  2469  0293                     	;# 
  2470  0298                     	;# 
  2471  0298                     	;# 
  2472  0299                     	;# 
  2473  029A                     	;# 
  2474  029A                     	;# 
  2475  029E                     	;# 
  2476  030C                     	;# 
  2477  030D                     	;# 
  2478  030E                     	;# 
  2479  038C                     	;# 
  2480  038D                     	;# 
  2481  038E                     	;# 
  2482  0391                     	;# 
  2483  0392                     	;# 
  2484  0393                     	;# 
  2485  0394                     	;# 
  2486  0395                     	;# 
  2487  0396                     	;# 
  2488  0397                     	;# 
  2489  0398                     	;# 
  2490  0399                     	;# 
  2491  0415                     	;# 
  2492  0416                     	;# 
  2493  0417                     	;# 
  2494  041C                     	;# 
  2495  041D                     	;# 
  2496  041E                     	;# 
  2497  0511                     	;# 
  2498  0515                     	;# 
  2499  0617                     	;# 
  2500  0618                     	;# 
  2501  0619                     	;# 
  2502  0619                     	;# 
  2503  061A                     	;# 
  2504  061B                     	;# 
  2505  061C                     	;# 
  2506  061C                     	;# 
  2507  0691                     	;# 
  2508  0692                     	;# 
  2509  0693                     	;# 
  2510  0694                     	;# 
  2511  0695                     	;# 
  2512  0696                     	;# 
  2513  0697                     	;# 
  2514  0698                     	;# 
  2515  0699                     	;# 
  2516  069A                     	;# 
  2517  069B                     	;# 
  2518  069C                     	;# 
  2519  069D                     	;# 
  2520  069E                     	;# 
  2521  069F                     	;# 
  2522  0E0F                     	;# 
  2523  0E10                     	;# 
  2524  0E11                     	;# 
  2525  0E12                     	;# 
  2526  0E13                     	;# 
  2527  0E14                     	;# 
  2528  0E15                     	;# 
  2529  0E17                     	;# 
  2530  0E20                     	;# 
  2531  0E21                     	;# 
  2532  0E22                     	;# 
  2533  0E24                     	;# 
  2534  0E25                     	;# 
  2535  0E28                     	;# 
  2536  0E29                     	;# 
  2537  0E2A                     	;# 
  2538  0E2B                     	;# 
  2539  0E90                     	;# 
  2540  0E91                     	;# 
  2541  0E92                     	;# 
  2542  0E94                     	;# 
  2543  0E95                     	;# 
  2544  0E9C                     	;# 
  2545  0E9D                     	;# 
  2546  0E9E                     	;# 
  2547  0E9F                     	;# 
  2548  0EA0                     	;# 
  2549  0EA1                     	;# 
  2550  0EA2                     	;# 
  2551  0EA3                     	;# 
  2552  0EA4                     	;# 
  2553  0EA5                     	;# 
  2554  0EA6                     	;# 
  2555  0EA7                     	;# 
  2556  0F0F                     	;# 
  2557  0F10                     	;# 
  2558  0F11                     	;# 
  2559  0F12                     	;# 
  2560  0F13                     	;# 
  2561  0F14                     	;# 
  2562  0F15                     	;# 
  2563  0F16                     	;# 
  2564  0F17                     	;# 
  2565  0F18                     	;# 
  2566  0F19                     	;# 
  2567  0F1A                     	;# 
  2568  0F1B                     	;# 
  2569  0F1C                     	;# 
  2570  0F1D                     	;# 
  2571  0F1E                     	;# 
  2572  0F1F                     	;# 
  2573  0F20                     	;# 
  2574  0F21                     	;# 
  2575  0F22                     	;# 
  2576  0F23                     	;# 
  2577  0F24                     	;# 
  2578  0F25                     	;# 
  2579  0F26                     	;# 
  2580  0F27                     	;# 
  2581  0F28                     	;# 
  2582  0F29                     	;# 
  2583  0F2A                     	;# 
  2584  0F2B                     	;# 
  2585  0F2C                     	;# 
  2586  0F2D                     	;# 
  2587  0FE4                     	;# 
  2588  0FE5                     	;# 
  2589  0FE6                     	;# 
  2590  0FE7                     	;# 
  2591  0FE8                     	;# 
  2592  0FE9                     	;# 
  2593  0FEA                     	;# 
  2594  0FEB                     	;# 
  2595  0FED                     	;# 
  2596  0FEE                     	;# 
  2597  0FEF                     	;# 
  2598  0000                     	;# 
  2599  0001                     	;# 
  2600  0002                     	;# 
  2601  0003                     	;# 
  2602  0004                     	;# 
  2603  0005                     	;# 
  2604  0006                     	;# 
  2605  0007                     	;# 
  2606  0008                     	;# 
  2607  0009                     	;# 
  2608  000A                     	;# 
  2609  000B                     	;# 
  2610  000C                     	;# 
  2611  000D                     	;# 
  2612  000E                     	;# 
  2613  0011                     	;# 
  2614  0012                     	;# 
  2615  0013                     	;# 
  2616  0015                     	;# 
  2617  0016                     	;# 
  2618  0016                     	;# 
  2619  0017                     	;# 
  2620  0018                     	;# 
  2621  0019                     	;# 
  2622  001A                     	;# 
  2623  001B                     	;# 
  2624  001C                     	;# 
  2625  008C                     	;# 
  2626  008D                     	;# 
  2627  008E                     	;# 
  2628  0091                     	;# 
  2629  0092                     	;# 
  2630  0093                     	;# 
  2631  0095                     	;# 
  2632  0096                     	;# 
  2633  0097                     	;# 
  2634  0098                     	;# 
  2635  0099                     	;# 
  2636  009A                     	;# 
  2637  009B                     	;# 
  2638  009B                     	;# 
  2639  009C                     	;# 
  2640  009D                     	;# 
  2641  009E                     	;# 
  2642  009F                     	;# 
  2643  010C                     	;# 
  2644  010D                     	;# 
  2645  010E                     	;# 
  2646  0111                     	;# 
  2647  0112                     	;# 
  2648  0113                     	;# 
  2649  0114                     	;# 
  2650  0115                     	;# 
  2651  0116                     	;# 
  2652  0117                     	;# 
  2653  0118                     	;# 
  2654  0119                     	;# 
  2655  011C                     	;# 
  2656  018C                     	;# 
  2657  018D                     	;# 
  2658  018E                     	;# 
  2659  0191                     	;# 
  2660  0191                     	;# 
  2661  0192                     	;# 
  2662  0193                     	;# 
  2663  0193                     	;# 
  2664  0194                     	;# 
  2665  0195                     	;# 
  2666  0196                     	;# 
  2667  0199                     	;# 
  2668  0199                     	;# 
  2669  0199                     	;# 
  2670  019A                     	;# 
  2671  019A                     	;# 
  2672  019A                     	;# 
  2673  019B                     	;# 
  2674  019B                     	;# 
  2675  019B                     	;# 
  2676  019B                     	;# 
  2677  019B                     	;# 
  2678  019C                     	;# 
  2679  019C                     	;# 
  2680  019C                     	;# 
  2681  019D                     	;# 
  2682  019D                     	;# 
  2683  019D                     	;# 
  2684  019E                     	;# 
  2685  019E                     	;# 
  2686  019E                     	;# 
  2687  019F                     	;# 
  2688  019F                     	;# 
  2689  019F                     	;# 
  2690  019F                     	;# 
  2691  019F                     	;# 
  2692  020C                     	;# 
  2693  020D                     	;# 
  2694  020E                     	;# 
  2695  0211                     	;# 
  2696  0211                     	;# 
  2697  0212                     	;# 
  2698  0212                     	;# 
  2699  0213                     	;# 
  2700  0213                     	;# 
  2701  0214                     	;# 
  2702  0214                     	;# 
  2703  0215                     	;# 
  2704  0215                     	;# 
  2705  0215                     	;# 
  2706  0215                     	;# 
  2707  0216                     	;# 
  2708  0216                     	;# 
  2709  0217                     	;# 
  2710  0217                     	;# 
  2711  028C                     	;# 
  2712  028D                     	;# 
  2713  028E                     	;# 
  2714  0291                     	;# 
  2715  0291                     	;# 
  2716  0292                     	;# 
  2717  0293                     	;# 
  2718  0293                     	;# 
  2719  0298                     	;# 
  2720  0298                     	;# 
  2721  0299                     	;# 
  2722  029A                     	;# 
  2723  029A                     	;# 
  2724  029E                     	;# 
  2725  030C                     	;# 
  2726  030D                     	;# 
  2727  030E                     	;# 
  2728  038C                     	;# 
  2729  038D                     	;# 
  2730  038E                     	;# 
  2731  0391                     	;# 
  2732  0392                     	;# 
  2733  0393                     	;# 
  2734  0394                     	;# 
  2735  0395                     	;# 
  2736  0396                     	;# 
  2737  0397                     	;# 
  2738  0398                     	;# 
  2739  0399                     	;# 
  2740  0415                     	;# 
  2741  0416                     	;# 
  2742  0417                     	;# 
  2743  041C                     	;# 
  2744  041D                     	;# 
  2745  041E                     	;# 
  2746  0511                     	;# 
  2747  0515                     	;# 
  2748  0617                     	;# 
  2749  0618                     	;# 
  2750  0619                     	;# 
  2751  0619                     	;# 
  2752  061A                     	;# 
  2753  061B                     	;# 
  2754  061C                     	;# 
  2755  061C                     	;# 
  2756  0691                     	;# 
  2757  0692                     	;# 
  2758  0693                     	;# 
  2759  0694                     	;# 
  2760  0695                     	;# 
  2761  0696                     	;# 
  2762  0697                     	;# 
  2763  0698                     	;# 
  2764  0699                     	;# 
  2765  069A                     	;# 
  2766  069B                     	;# 
  2767  069C                     	;# 
  2768  069D                     	;# 
  2769  069E                     	;# 
  2770  069F                     	;# 
  2771  0E0F                     	;# 
  2772  0E10                     	;# 
  2773  0E11                     	;# 
  2774  0E12                     	;# 
  2775  0E13                     	;# 
  2776  0E14                     	;# 
  2777  0E15                     	;# 
  2778  0E17                     	;# 
  2779  0E20                     	;# 
  2780  0E21                     	;# 
  2781  0E22                     	;# 
  2782  0E24                     	;# 
  2783  0E25                     	;# 
  2784  0E28                     	;# 
  2785  0E29                     	;# 
  2786  0E2A                     	;# 
  2787  0E2B                     	;# 
  2788  0E90                     	;# 
  2789  0E91                     	;# 
  2790  0E92                     	;# 
  2791  0E94                     	;# 
  2792  0E95                     	;# 
  2793  0E9C                     	;# 
  2794  0E9D                     	;# 
  2795  0E9E                     	;# 
  2796  0E9F                     	;# 
  2797  0EA0                     	;# 
  2798  0EA1                     	;# 
  2799  0EA2                     	;# 
  2800  0EA3                     	;# 
  2801  0EA4                     	;# 
  2802  0EA5                     	;# 
  2803  0EA6                     	;# 
  2804  0EA7                     	;# 
  2805  0F0F                     	;# 
  2806  0F10                     	;# 
  2807  0F11                     	;# 
  2808  0F12                     	;# 
  2809  0F13                     	;# 
  2810  0F14                     	;# 
  2811  0F15                     	;# 
  2812  0F16                     	;# 
  2813  0F17                     	;# 
  2814  0F18                     	;# 
  2815  0F19                     	;# 
  2816  0F1A                     	;# 
  2817  0F1B                     	;# 
  2818  0F1C                     	;# 
  2819  0F1D                     	;# 
  2820  0F1E                     	;# 
  2821  0F1F                     	;# 
  2822  0F20                     	;# 
  2823  0F21                     	;# 
  2824  0F22                     	;# 
  2825  0F23                     	;# 
  2826  0F24                     	;# 
  2827  0F25                     	;# 
  2828  0F26                     	;# 
  2829  0F27                     	;# 
  2830  0F28                     	;# 
  2831  0F29                     	;# 
  2832  0F2A                     	;# 
  2833  0F2B                     	;# 
  2834  0F2C                     	;# 
  2835  0F2D                     	;# 
  2836  0FE4                     	;# 
  2837  0FE5                     	;# 
  2838  0FE6                     	;# 
  2839  0FE7                     	;# 
  2840  0FE8                     	;# 
  2841  0FE9                     	;# 
  2842  0FEA                     	;# 
  2843  0FEB                     	;# 
  2844  0FED                     	;# 
  2845  0FEE                     	;# 
  2846  0FEF                     	;# 
  2847  0000                     	;# 
  2848  0001                     	;# 
  2849  0002                     	;# 
  2850  0003                     	;# 
  2851  0004                     	;# 
  2852  0005                     	;# 
  2853  0006                     	;# 
  2854  0007                     	;# 
  2855  0008                     	;# 
  2856  0009                     	;# 
  2857  000A                     	;# 
  2858  000B                     	;# 
  2859  000C                     	;# 
  2860  000D                     	;# 
  2861  000E                     	;# 
  2862  0011                     	;# 
  2863  0012                     	;# 
  2864  0013                     	;# 
  2865  0015                     	;# 
  2866  0016                     	;# 
  2867  0016                     	;# 
  2868  0017                     	;# 
  2869  0018                     	;# 
  2870  0019                     	;# 
  2871  001A                     	;# 
  2872  001B                     	;# 
  2873  001C                     	;# 
  2874  008C                     	;# 
  2875  008D                     	;# 
  2876  008E                     	;# 
  2877  0091                     	;# 
  2878  0092                     	;# 
  2879  0093                     	;# 
  2880  0095                     	;# 
  2881  0096                     	;# 
  2882  0097                     	;# 
  2883  0098                     	;# 
  2884  0099                     	;# 
  2885  009A                     	;# 
  2886  009B                     	;# 
  2887  009B                     	;# 
  2888  009C                     	;# 
  2889  009D                     	;# 
  2890  009E                     	;# 
  2891  009F                     	;# 
  2892  010C                     	;# 
  2893  010D                     	;# 
  2894  010E                     	;# 
  2895  0111                     	;# 
  2896  0112                     	;# 
  2897  0113                     	;# 
  2898  0114                     	;# 
  2899  0115                     	;# 
  2900  0116                     	;# 
  2901  0117                     	;# 
  2902  0118                     	;# 
  2903  0119                     	;# 
  2904  011C                     	;# 
  2905  018C                     	;# 
  2906  018D                     	;# 
  2907  018E                     	;# 
  2908  0191                     	;# 
  2909  0191                     	;# 
  2910  0192                     	;# 
  2911  0193                     	;# 
  2912  0193                     	;# 
  2913  0194                     	;# 
  2914  0195                     	;# 
  2915  0196                     	;# 
  2916  0199                     	;# 
  2917  0199                     	;# 
  2918  0199                     	;# 
  2919  019A                     	;# 
  2920  019A                     	;# 
  2921  019A                     	;# 
  2922  019B                     	;# 
  2923  019B                     	;# 
  2924  019B                     	;# 
  2925  019B                     	;# 
  2926  019B                     	;# 
  2927  019C                     	;# 
  2928  019C                     	;# 
  2929  019C                     	;# 
  2930  019D                     	;# 
  2931  019D                     	;# 
  2932  019D                     	;# 
  2933  019E                     	;# 
  2934  019E                     	;# 
  2935  019E                     	;# 
  2936  019F                     	;# 
  2937  019F                     	;# 
  2938  019F                     	;# 
  2939  019F                     	;# 
  2940  019F                     	;# 
  2941  020C                     	;# 
  2942  020D                     	;# 
  2943  020E                     	;# 
  2944  0211                     	;# 
  2945  0211                     	;# 
  2946  0212                     	;# 
  2947  0212                     	;# 
  2948  0213                     	;# 
  2949  0213                     	;# 
  2950  0214                     	;# 
  2951  0214                     	;# 
  2952  0215                     	;# 
  2953  0215                     	;# 
  2954  0215                     	;# 
  2955  0215                     	;# 
  2956  0216                     	;# 
  2957  0216                     	;# 
  2958  0217                     	;# 
  2959  0217                     	;# 
  2960  028C                     	;# 
  2961  028D                     	;# 
  2962  028E                     	;# 
  2963  0291                     	;# 
  2964  0291                     	;# 
  2965  0292                     	;# 
  2966  0293                     	;# 
  2967  0293                     	;# 
  2968  0298                     	;# 
  2969  0298                     	;# 
  2970  0299                     	;# 
  2971  029A                     	;# 
  2972  029A                     	;# 
  2973  029E                     	;# 
  2974  030C                     	;# 
  2975  030D                     	;# 
  2976  030E                     	;# 
  2977  038C                     	;# 
  2978  038D                     	;# 
  2979  038E                     	;# 
  2980  0391                     	;# 
  2981  0392                     	;# 
  2982  0393                     	;# 
  2983  0394                     	;# 
  2984  0395                     	;# 
  2985  0396                     	;# 
  2986  0397                     	;# 
  2987  0398                     	;# 
  2988  0399                     	;# 
  2989  0415                     	;# 
  2990  0416                     	;# 
  2991  0417                     	;# 
  2992  041C                     	;# 
  2993  041D                     	;# 
  2994  041E                     	;# 
  2995  0511                     	;# 
  2996  0515                     	;# 
  2997  0617                     	;# 
  2998  0618                     	;# 
  2999  0619                     	;# 
  3000  0619                     	;# 
  3001  061A                     	;# 
  3002  061B                     	;# 
  3003  061C                     	;# 
  3004  061C                     	;# 
  3005  0691                     	;# 
  3006  0692                     	;# 
  3007  0693                     	;# 
  3008  0694                     	;# 
  3009  0695                     	;# 
  3010  0696                     	;# 
  3011  0697                     	;# 
  3012  0698                     	;# 
  3013  0699                     	;# 
  3014  069A                     	;# 
  3015  069B                     	;# 
  3016  069C                     	;# 
  3017  069D                     	;# 
  3018  069E                     	;# 
  3019  069F                     	;# 
  3020  0E0F                     	;# 
  3021  0E10                     	;# 
  3022  0E11                     	;# 
  3023  0E12                     	;# 
  3024  0E13                     	;# 
  3025  0E14                     	;# 
  3026  0E15                     	;# 
  3027  0E17                     	;# 
  3028  0E20                     	;# 
  3029  0E21                     	;# 
  3030  0E22                     	;# 
  3031  0E24                     	;# 
  3032  0E25                     	;# 
  3033  0E28                     	;# 
  3034  0E29                     	;# 
  3035  0E2A                     	;# 
  3036  0E2B                     	;# 
  3037  0E90                     	;# 
  3038  0E91                     	;# 
  3039  0E92                     	;# 
  3040  0E94                     	;# 
  3041  0E95                     	;# 
  3042  0E9C                     	;# 
  3043  0E9D                     	;# 
  3044  0E9E                     	;# 
  3045  0E9F                     	;# 
  3046  0EA0                     	;# 
  3047  0EA1                     	;# 
  3048  0EA2                     	;# 
  3049  0EA3                     	;# 
  3050  0EA4                     	;# 
  3051  0EA5                     	;# 
  3052  0EA6                     	;# 
  3053  0EA7                     	;# 
  3054  0F0F                     	;# 
  3055  0F10                     	;# 
  3056  0F11                     	;# 
  3057  0F12                     	;# 
  3058  0F13                     	;# 
  3059  0F14                     	;# 
  3060  0F15                     	;# 
  3061  0F16                     	;# 
  3062  0F17                     	;# 
  3063  0F18                     	;# 
  3064  0F19                     	;# 
  3065  0F1A                     	;# 
  3066  0F1B                     	;# 
  3067  0F1C                     	;# 
  3068  0F1D                     	;# 
  3069  0F1E                     	;# 
  3070  0F1F                     	;# 
  3071  0F20                     	;# 
  3072  0F21                     	;# 
  3073  0F22                     	;# 
  3074  0F23                     	;# 
  3075  0F24                     	;# 
  3076  0F25                     	;# 
  3077  0F26                     	;# 
  3078  0F27                     	;# 
  3079  0F28                     	;# 
  3080  0F29                     	;# 
  3081  0F2A                     	;# 
  3082  0F2B                     	;# 
  3083  0F2C                     	;# 
  3084  0F2D                     	;# 
  3085  0FE4                     	;# 
  3086  0FE5                     	;# 
  3087  0FE6                     	;# 
  3088  0FE7                     	;# 
  3089  0FE8                     	;# 
  3090  0FE9                     	;# 
  3091  0FEA                     	;# 
  3092  0FEB                     	;# 
  3093  0FED                     	;# 
  3094  0FEE                     	;# 
  3095  0FEF                     	;# 
  3096                           
  3097 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3098  0000                     
  3099 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3100  0000                     
  3101 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3102  0000                     
  3103                           	psect	idataBANK0
  3104  0003                     __pidataBANK0:
  3105                           
  3106                           ;initializer for _currentIsOn
  3107  0003  3401               	retlw	1
  3108                           
  3109                           	psect	idataBANK1
  3110  07D9                     __pidataBANK1:
  3111                           
  3112                           ;initializer for _maxFrequencyIndex
  3113  07D9  3406               	retlw	6
  3114  07DA  3400               	retlw	0
  3115                           
  3116                           ;initializer for _maxCurrentIndex
  3117  07DB  340B               	retlw	11
  3118  07DC  3400               	retlw	0
  3119                           
  3120                           ;initializer for _currentValue
  3121  07DD  3400               	retlw	0
  3122  07DE  3400               	retlw	0
  3123  07DF  341E               	retlw	30
  3124  07E0  3400               	retlw	0
  3125  07E1  3432               	retlw	50
  3126  07E2  3400               	retlw	0
  3127  07E3  3446               	retlw	70
  3128  07E4  3400               	retlw	0
  3129  07E5  345A               	retlw	90
  3130  07E6  3400               	retlw	0
  3131  07E7  346E               	retlw	110
  3132  07E8  3400               	retlw	0
  3133  07E9  3482               	retlw	130
  3134  07EA  3400               	retlw	0
  3135  07EB  34A0               	retlw	160
  3136  07EC  3400               	retlw	0
  3137  07ED  34BE               	retlw	190
  3138  07EE  3400               	retlw	0
  3139  07EF  34DC               	retlw	220
  3140  07F0  3400               	retlw	0
  3141  07F1  34FA               	retlw	250
  3142  07F2  3400               	retlw	0
  3143                           
  3144                           ;initializer for _frequencyValue
  3145  07F3  3400               	retlw	0
  3146  07F4  3400               	retlw	0
  3147  07F5  3432               	retlw	50
  3148  07F6  3400               	retlw	0
  3149  07F7  3464               	retlw	100
  3150  07F8  3400               	retlw	0
  3151  07F9  3478               	retlw	120
  3152  07FA  3400               	retlw	0
  3153  07FB  3482               	retlw	130
  3154  07FC  3400               	retlw	0
  3155  07FD  348C               	retlw	140
  3156  07FE  3400               	retlw	0
  3157  001C                     _T2CONbits	set	28
  3158  001C                     _T2CON	set	28
  3159  001A                     _TMR2	set	26
  3160  001B                     _PR2	set	27
  3161  0015                     _TMR0	set	21
  3162  0011                     _PIR1bits	set	17
  3163  0012                     _PIR2bits	set	18
  3164  000B                     _INTCONbits	set	11
  3165  009D                     _ADCON0bits	set	157
  3166  009E                     _ADCON1	set	158
  3167  009D                     _ADCON0	set	157
  3168  0095                     _OPTION_REG	set	149
  3169  0092                     _PIE2bits	set	146
  3170  0095                     _OPTION_REGbits	set	149
  3171  008E                     _TRISC	set	142
  3172  008D                     _TRISB	set	141
  3173  008C                     _TRISA	set	140
  3174  0097                     _WDTCON	set	151
  3175  0098                     _OSCTUNE	set	152
  3176  009A                     _OSCSTAT	set	154
  3177  0099                     _OSCCON	set	153
  3178  009B                     _ADRES	set	155
  3179  0117                     _FVRCONbits	set	279
  3180  0117                     _FVRCON	set	279
  3181  010E                     _LATC	set	270
  3182  010D                     _LATB	set	269
  3183  010C                     _LATA	set	268
  3184  0116                     _BORCON	set	278
  3185  0119                     _DAC1CON1	set	281
  3186  0118                     _DAC1CON0	set	280
  3187  019A                     _TX1REG	set	410
  3188  0199                     _RC1REG	set	409
  3189  019D                     _RC1STAbits	set	413
  3190  019E                     _TX1STAbits	set	414
  3191  019C                     _SP1BRGH	set	412
  3192  019B                     _SP1BRGL	set	411
  3193  019E                     _TX1STA	set	414
  3194  019D                     _RC1STA	set	413
  3195  019F                     _BAUD1CON	set	415
  3196  018C                     _ANSELA	set	396
  3197  018D                     _ANSELB	set	397
  3198  018E                     _ANSELC	set	398
  3199  020E                     _WPUC	set	526
  3200  020C                     _WPUA	set	524
  3201  020D                     _WPUB	set	525
  3202  0291                     _CCPR1L	set	657
  3203  0293                     _CCP1CONbits	set	659
  3204  029E                     _CCPTMRSbits	set	670
  3205  028E                     _ODCONC	set	654
  3206  028D                     _ODCONB	set	653
  3207  028C                     _ODCONA	set	652
  3208  030E                     _SLRCONC	set	782
  3209  030D                     _SLRCONB	set	781
  3210  030C                     _SLRCONA	set	780
  3211  038E                     _INLVLC	set	910
  3212  038D                     _INLVLB	set	909
  3213  038C                     _INLVLA	set	908
  3214  0417                     _T4CONbits	set	1047
  3215  0417                     _T4CON	set	1047
  3216  0415                     _TMR4	set	1045
  3217  0416                     _PR4	set	1046
  3218  0515                     _OPA2CON	set	1301
  3219  0511                     _OPA1CON	set	1297
  3220  061C                     _PWM4CONbits	set	1564
  3221  061A                     _PWM4DCLbits	set	1562
  3222  061B                     _PWM4DCH	set	1563
  3223  0619                     _PWM3CONbits	set	1561
  3224  0617                     _PWM3DCLbits	set	1559
  3225  0618                     _PWM3DCH	set	1560
  3226  0E24                     _RXPPS	set	3620
  3227  0E10                     _INTPPS	set	3600
  3228  0EA5                     _RC5PPS	set	3749
  3229  0E95                     _RA5PPS	set	3733
  3230  0EA4                     _RC4PPS	set	3748
  3231  0E9F                     _RB7PPS	set	3743
  3232                           
  3233                           	psect	stringtext1
  3234  07FF                     __pstringtext1:
  3235  07FF                     STR_1:
  3236  07FF  340A               	retlw	10
  3237  0800  3420               	retlw	32	;' '
  3238  0801  3446               	retlw	70	;'F'
  3239  0802  3472               	retlw	114	;'r'
  3240  0803  3465               	retlw	101	;'e'
  3241  0804  3471               	retlw	113	;'q'
  3242  0805  3475               	retlw	117	;'u'
  3243  0806  3465               	retlw	101	;'e'
  3244  0807  346E               	retlw	110	;'n'
  3245  0808  3463               	retlw	99	;'c'
  3246  0809  3479               	retlw	121	;'y'
  3247  080A  3420               	retlw	32	;' '
  3248  080B  3473               	retlw	115	;'s'
  3249  080C  3465               	retlw	101	;'e'
  3250  080D  346C               	retlw	108	;'l'
  3251  080E  3465               	retlw	101	;'e'
  3252  080F  3463               	retlw	99	;'c'
  3253  0810  3474               	retlw	116	;'t'
  3254  0811  3465               	retlw	101	;'e'
  3255  0812  3464               	retlw	100	;'d'
  3256  0813  3400               	retlw	0
  3257                           
  3258                           	psect	stringtext2
  3259  0814                     __pstringtext2:
  3260  0814                     STR_2:
  3261  0814  340A               	retlw	10
  3262  0815  3420               	retlw	32	;' '
  3263  0816  3463               	retlw	99	;'c'
  3264  0817  3475               	retlw	117	;'u'
  3265  0818  3472               	retlw	114	;'r'
  3266  0819  3472               	retlw	114	;'r'
  3267  081A  3465               	retlw	101	;'e'
  3268  081B  346E               	retlw	110	;'n'
  3269  081C  3474               	retlw	116	;'t'
  3270  081D  3420               	retlw	32	;' '
  3271  081E  3473               	retlw	115	;'s'
  3272  081F  3465               	retlw	101	;'e'
  3273  0820  346C               	retlw	108	;'l'
  3274  0821  3465               	retlw	101	;'e'
  3275  0822  3463               	retlw	99	;'c'
  3276  0823  3474               	retlw	116	;'t'
  3277  0824  3465               	retlw	101	;'e'
  3278  0825  3464               	retlw	100	;'d'
  3279  0826  3400               	retlw	0
  3280                           
  3281                           	psect	stringtext3
  3282  0827                     __pstringtext3:
  3283  0827                     STR_3:
  3284  0827  340A               	retlw	10
  3285  0828  3420               	retlw	32	;' '
  3286  0829  3472               	retlw	114	;'r'
  3287  082A  3465               	retlw	101	;'e'
  3288  082B  3473               	retlw	115	;'s'
  3289  082C  3465               	retlw	101	;'e'
  3290  082D  3474               	retlw	116	;'t'
  3291  082E  3420               	retlw	32	;' '
  3292  082F  3473               	retlw	115	;'s'
  3293  0830  3465               	retlw	101	;'e'
  3294  0831  346C               	retlw	108	;'l'
  3295  0832  3465               	retlw	101	;'e'
  3296  0833  3463               	retlw	99	;'c'
  3297  0834  3474               	retlw	116	;'t'
  3298  0835  3400               	retlw	0
  3299                           
  3300                           	psect	stringtext4
  3301  0000                     __pstringtext4:
  3302                           
  3303                           	psect	cinit
  3304  0022                     start_initialization:	
  3305                           ; #config settings
  3306                           
  3307  0022                     __initialization:
  3308                           
  3309                           ; Initialize objects allocated to BANK0
  3310  0022  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  3311  0025  00DD               	movwf	__pdataBANK0& (0+127)
  3312                           
  3313                           ; Initialize objects allocated to BANK1
  3314  0026  30D9               	movlw	low __pidataBANK1
  3315  0027  0084               	movwf	4
  3316  0028  3087               	movlw	(high __pidataBANK1)| (0+128)
  3317  0029  0085               	movwf	5
  3318  002A  30A0               	movlw	low __pdataBANK1
  3319  002B  0086               	movwf	6
  3320  002C  3000               	movlw	high __pdataBANK1
  3321  002D  0087               	movwf	7
  3322  002E  3026               	movlw	38
  3323  002F  318E  2652  3180   	fcall	init_ram
  3324                           
  3325                           ; Clear objects allocated to BANK0
  3326  0032  3040               	movlw	low __pbssBANK0
  3327  0033  0084               	movwf	4
  3328  0034  3000               	movlw	high __pbssBANK0
  3329  0035  0085               	movwf	5
  3330  0036  301D               	movlw	29
  3331  0037  318E  264C  3180   	fcall	clear_ram0
  3332                           
  3333                           ; Clear objects allocated to BANK1
  3334  003A  30E9               	movlw	low __pbssBANK1
  3335  003B  0084               	movwf	4
  3336  003C  3000               	movlw	high __pbssBANK1
  3337  003D  0085               	movwf	5
  3338  003E  3007               	movlw	7
  3339  003F  318E  264C  3180   	fcall	clear_ram0
  3340                           
  3341                           ; Clear objects allocated to BANK2
  3342  0042  3020               	movlw	low __pbssBANK2
  3343  0043  0084               	movwf	4
  3344  0044  3001               	movlw	high __pbssBANK2
  3345  0045  0085               	movwf	5
  3346  0046  3021               	movlw	33
  3347  0047  318E  264C         	fcall	clear_ram0
  3348  0049                     end_of_initialization:	
  3349                           ;End of C runtime variable initialization code
  3350                           
  3351  0049                     __end_of__initialization:
  3352  0049  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3353  004A  0020               	movlb	0
  3354  004B  3184  2C34         	ljmp	_main	;jump to C main() function
  3355                           
  3356                           	psect	bssBANK0
  3357  0040                     __pbssBANK0:
  3358  0040                     _Vdd_mv:
  3359  0040                     	ds	2
  3360  0042                     _microamps:
  3361  0042                     	ds	2
  3362  0044                     _TMR4_InterruptHandler:
  3363  0044                     	ds	2
  3364  0046                     _currentIndex:
  3365  0046                     	ds	2
  3366  0048                     _frequencyIndex:
  3367  0048                     	ds	2
  3368  004A                     _INT_InterruptHandler:
  3369  004A                     	ds	2
  3370  004C                     _EUSART_ErrorHandler:
  3371  004C                     	ds	2
  3372  004E                     _EUSART_OverrunErrorHandler:
  3373  004E                     	ds	2
  3374  0050                     _EUSART_FramingErrorHandler:
  3375  0050                     	ds	2
  3376  0052                     _current:
  3377  0052                     	ds	1
  3378  0053                     _duty:
  3379  0053                     	ds	1
  3380  0054                     _frequency:
  3381  0054                     	ds	1
  3382  0055                     _timer0ReloadVal:
  3383  0055                     	ds	1
  3384  0056                     _eusartRxLastError:
  3385  0056                     	ds	1
  3386  0057                     _ir_code:
  3387  0057                     	ds	6
  3388                           
  3389                           	psect	dataBANK0
  3390  005D                     __pdataBANK0:
  3391  005D                     _currentIsOn:
  3392  005D                     	ds	1
  3393                           
  3394                           	psect	bssBANK1
  3395  00E9                     __pbssBANK1:
  3396  00E9                     _interfaceState:
  3397  00E9                     	ds	1
  3398  00EA                     _flag:
  3399  00EA                     	ds	1
  3400  00EB                     _LED_blue:
  3401  00EB                     	ds	1
  3402  00EC                     _LED_green:
  3403  00EC                     	ds	1
  3404  00ED                     _LED_red:
  3405  00ED                     	ds	1
  3406  00EE                     _Vdac_mv:
  3407  00EE                     	ds	2
  3408                           
  3409                           	psect	dataBANK1
  3410  00A0                     __pdataBANK1:
  3411  00A0                     _maxFrequencyIndex:
  3412  00A0                     	ds	2
  3413  00A2                     _maxCurrentIndex:
  3414  00A2                     	ds	2
  3415  00A4                     _currentValue:
  3416  00A4                     	ds	22
  3417  00BA                     _frequencyValue:
  3418  00BA                     	ds	12
  3419                           
  3420                           	psect	bssBANK2
  3421  0120                     __pbssBANK2:
  3422  0120                     _stats:
  3423  0120                     	ds	33
  3424                           
  3425                           	psect	inittext
  3426  0E52                     init_ram:
  3427  0E52  00FE               	movwf	126
  3428  0E53                     initloop:
  3429  0E53  0012               	moviw fsr0++
  3430  0E54  001E               	movwi fsr1++
  3431  0E55  0BFE               	decfsz	126,f
  3432  0E56  2E53               	goto	initloop
  3433  0E57  3400               	retlw	0
  3434                           
  3435                           	psect	clrtext
  3436  0E4C                     clear_ram0:	
  3437                           ;	Called with FSR0 containing the base address, and
  3438                           ;	WREG with the size to clear
  3439                           
  3440  0E4C  0064               	clrwdt	;clear the watchdog before getting into this loop
  3441  0E4D                     clrloop0:
  3442  0E4D  0180               	clrf	0	;clear RAM location pointed to by FSR
  3443  0E4E  3101               	addfsr 0,1
  3444  0E4F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3445  0E50  2E4D               	goto	clrloop0	;have we reached the end yet?
  3446  0E51  3400               	retlw	0	;all done for this memory range, return
  3447                           
  3448                           	psect	cstackBANK2
  3449  0141                     __pcstackBANK2:
  3450  0141                     ??_setCurrent:
  3451                           
  3452                           ; 1 bytes @ 0x0
  3453  0141                     	ds	8
  3454  0149                     ??_process_remote_command:
  3455                           
  3456                           ; 1 bytes @ 0x8
  3457  0149                     	ds	2
  3458  014B                     process_remote_command@code:
  3459                           
  3460                           ; 1 bytes @ 0xA
  3461  014B                     	ds	1
  3462  014C                     ??_main:
  3463                           
  3464                           ; 1 bytes @ 0xB
  3465  014C                     	ds	2
  3466                           
  3467                           	psect	cstackBANK1
  3468  00C6                     __pcstackBANK1:
  3469  00C6                     ??_PIN_MANAGER_Initialize:
  3470  00C6                     ??_OSCILLATOR_Initialize:	
  3471                           ; 1 bytes @ 0x0
  3472                           
  3473  00C6                     ??_WDT_Initialize:	
  3474                           ; 1 bytes @ 0x0
  3475                           
  3476  00C6                     ??_OPA1_Initialize:	
  3477                           ; 1 bytes @ 0x0
  3478                           
  3479  00C6                     ??_OPA2_Initialize:	
  3480                           ; 1 bytes @ 0x0
  3481                           
  3482  00C6                     ??_TMR2_Initialize:	
  3483                           ; 1 bytes @ 0x0
  3484                           
  3485  00C6                     ??_TMR0_Initialize:	
  3486                           ; 1 bytes @ 0x0
  3487                           
  3488  00C6                     ?_EUSART_SetFramingErrorHandler:	
  3489                           ; 1 bytes @ 0x0
  3490                           
  3491  00C6                     ?_EUSART_SetOverrunErrorHandler:	
  3492                           ; 1 bytes @ 0x0
  3493                           
  3494  00C6                     ?_EUSART_SetErrorHandler:	
  3495                           ; 1 bytes @ 0x0
  3496                           
  3497  00C6                     ?_TMR4_SetInterruptHandler:	
  3498                           ; 1 bytes @ 0x0
  3499                           
  3500  00C6                     ??_DAC_Initialize:	
  3501                           ; 1 bytes @ 0x0
  3502                           
  3503  00C6                     ??_EUSART_Write:	
  3504                           ; 1 bytes @ 0x0
  3505                           
  3506  00C6                     ?_INT_SetInterruptHandler:	
  3507                           ; 1 bytes @ 0x0
  3508                           
  3509  00C6                     ??_initLED:	
  3510                           ; 1 bytes @ 0x0
  3511                           
  3512  00C6                     ?_setLEDColor:	
  3513                           ; 1 bytes @ 0x0
  3514                           
  3515  00C6                     ?___awdiv:	
  3516                           ; 1 bytes @ 0x0
  3517                           
  3518  00C6                     ?___lmul:	
  3519                           ; 2 bytes @ 0x0
  3520                           
  3521  00C6                     EUSART_Write@txData:	
  3522                           ; 4 bytes @ 0x0
  3523                           
  3524  00C6                     setLEDColor@green:	
  3525                           ; 1 bytes @ 0x0
  3526                           
  3527  00C6                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3528                           ; 1 bytes @ 0x0
  3529                           
  3530  00C6                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3531                           ; 2 bytes @ 0x0
  3532                           
  3533  00C6                     EUSART_SetErrorHandler@interruptHandler:	
  3534                           ; 2 bytes @ 0x0
  3535                           
  3536  00C6                     INT_SetInterruptHandler@InterruptHandler:	
  3537                           ; 2 bytes @ 0x0
  3538                           
  3539  00C6                     TMR4_SetInterruptHandler@InterruptHandler:	
  3540                           ; 2 bytes @ 0x0
  3541                           
  3542  00C6                     ___awdiv@divisor:	
  3543                           ; 2 bytes @ 0x0
  3544                           
  3545  00C6                     ___lmul@multiplier:	
  3546                           ; 2 bytes @ 0x0
  3547                           
  3548                           
  3549                           ; 4 bytes @ 0x0
  3550  00C6                     	ds	1
  3551  00C7                     ??_putch:
  3552  00C7                     putch@txData:	
  3553                           ; 1 bytes @ 0x1
  3554                           
  3555  00C7                     setLEDColor@blue:	
  3556                           ; 1 bytes @ 0x1
  3557                           
  3558                           
  3559                           ; 1 bytes @ 0x1
  3560  00C7                     	ds	1
  3561  00C8                     ??_TMR4_Initialize:
  3562  00C8                     ??_EXT_INT_Initialize:	
  3563                           ; 1 bytes @ 0x2
  3564                           
  3565  00C8                     ??_EUSART_Initialize:	
  3566                           ; 1 bytes @ 0x2
  3567                           
  3568  00C8                     ??_EUSART_SetFramingErrorHandler:	
  3569                           ; 1 bytes @ 0x2
  3570                           
  3571  00C8                     ??_EUSART_SetOverrunErrorHandler:	
  3572                           ; 1 bytes @ 0x2
  3573                           
  3574  00C8                     ??_EUSART_SetErrorHandler:	
  3575                           ; 1 bytes @ 0x2
  3576                           
  3577  00C8                     ??_TMR4_SetInterruptHandler:	
  3578                           ; 1 bytes @ 0x2
  3579                           
  3580  00C8                     ??_SYSTEM_Initialize:	
  3581                           ; 1 bytes @ 0x2
  3582                           
  3583  00C8                     ??_INT_SetInterruptHandler:	
  3584                           ; 1 bytes @ 0x2
  3585                           
  3586  00C8                     ??_setLEDColor:	
  3587                           ; 1 bytes @ 0x2
  3588                           
  3589  00C8                     ?_printf:	
  3590                           ; 1 bytes @ 0x2
  3591                           
  3592  00C8                     printf@f:	
  3593                           ; 2 bytes @ 0x2
  3594                           
  3595  00C8                     ___awdiv@dividend:	
  3596                           ; 2 bytes @ 0x2
  3597                           
  3598                           
  3599                           ; 2 bytes @ 0x2
  3600  00C8                     	ds	1
  3601  00C9                     setLEDColor@red:
  3602                           
  3603                           ; 1 bytes @ 0x3
  3604  00C9                     	ds	1
  3605  00CA                     ??_printf:
  3606  00CA                     ??_lowBattery:	
  3607                           ; 1 bytes @ 0x4
  3608                           
  3609  00CA                     ??_startUp:	
  3610                           ; 1 bytes @ 0x4
  3611                           
  3612  00CA                     ??_selectSomething:	
  3613                           ; 1 bytes @ 0x4
  3614                           
  3615  00CA                     ??___awdiv:	
  3616                           ; 1 bytes @ 0x4
  3617                           
  3618  00CA                     ___lmul@multiplicand:	
  3619                           ; 1 bytes @ 0x4
  3620                           
  3621                           
  3622                           ; 4 bytes @ 0x4
  3623  00CA                     	ds	1
  3624  00CB                     ___awdiv@counter:
  3625                           
  3626                           ; 1 bytes @ 0x5
  3627  00CB                     	ds	1
  3628  00CC                     ___awdiv@sign:
  3629  00CC                     startUp@i:	
  3630                           ; 1 bytes @ 0x6
  3631                           
  3632                           
  3633                           ; 2 bytes @ 0x6
  3634  00CC                     	ds	1
  3635  00CD                     printf@ap:
  3636  00CD                     ___awdiv@quotient:	
  3637                           ; 1 bytes @ 0x7
  3638                           
  3639                           
  3640                           ; 2 bytes @ 0x7
  3641  00CD                     	ds	1
  3642  00CE                     ??___lmul:
  3643  00CE                     printf@c:	
  3644                           ; 1 bytes @ 0x8
  3645                           
  3646  00CE                     ___lmul@product:	
  3647                           ; 1 bytes @ 0x8
  3648                           
  3649                           
  3650                           ; 4 bytes @ 0x8
  3651  00CE                     	ds	1
  3652  00CF                     ??_selectFrequency:
  3653  00CF                     ??_selectCurrent:	
  3654                           ; 1 bytes @ 0x9
  3655                           
  3656                           
  3657                           ; 1 bytes @ 0x9
  3658  00CF                     	ds	3
  3659  00D2                     ?___lldiv:
  3660  00D2                     ?___aldiv:	
  3661                           ; 4 bytes @ 0xC
  3662                           
  3663  00D2                     ___lldiv@divisor:	
  3664                           ; 4 bytes @ 0xC
  3665                           
  3666  00D2                     ___aldiv@divisor:	
  3667                           ; 4 bytes @ 0xC
  3668                           
  3669                           
  3670                           ; 4 bytes @ 0xC
  3671  00D2                     	ds	4
  3672  00D6                     ___lldiv@dividend:
  3673  00D6                     ___aldiv@dividend:	
  3674                           ; 4 bytes @ 0x10
  3675                           
  3676                           
  3677                           ; 4 bytes @ 0x10
  3678  00D6                     	ds	4
  3679  00DA                     ??___lldiv:
  3680  00DA                     ??___aldiv:	
  3681                           ; 1 bytes @ 0x14
  3682                           
  3683                           
  3684                           ; 1 bytes @ 0x14
  3685  00DA                     	ds	1
  3686  00DB                     ___aldiv@counter:
  3687  00DB                     ___lldiv@quotient:	
  3688                           ; 1 bytes @ 0x15
  3689                           
  3690                           
  3691                           ; 4 bytes @ 0x15
  3692  00DB                     	ds	1
  3693  00DC                     ___aldiv@sign:
  3694                           
  3695                           ; 1 bytes @ 0x16
  3696  00DC                     	ds	1
  3697  00DD                     ___aldiv@quotient:
  3698                           
  3699                           ; 4 bytes @ 0x17
  3700  00DD                     	ds	2
  3701  00DF                     ___lldiv@counter:
  3702                           
  3703                           ; 1 bytes @ 0x19
  3704  00DF                     	ds	2
  3705  00E1                     ?_setFrequency:
  3706  00E1                     ?_battery_voltage:	
  3707                           ; 1 bytes @ 0x1B
  3708                           
  3709  00E1                     setFrequency@frequency_hz:	
  3710                           ; 2 bytes @ 0x1B
  3711                           
  3712                           
  3713                           ; 2 bytes @ 0x1B
  3714  00E1                     	ds	2
  3715  00E3                     ?_setCurrent:
  3716  00E3                     ??_battery_voltage:	
  3717                           ; 1 bytes @ 0x1D
  3718                           
  3719  00E3                     ??_setFrequency:	
  3720                           ; 1 bytes @ 0x1D
  3721                           
  3722  00E3                     setCurrent@microamps:	
  3723                           ; 1 bytes @ 0x1D
  3724                           
  3725                           
  3726                           ; 2 bytes @ 0x1D
  3727  00E3                     	ds	1
  3728  00E4                     setFrequency@pr4_val:
  3729                           
  3730                           ; 2 bytes @ 0x1E
  3731  00E4                     	ds	1
  3732  00E5                     setCurrent@Vdd_mv:
  3733                           
  3734                           ; 2 bytes @ 0x1F
  3735  00E5                     	ds	2
  3736  00E7                     setCurrent@DACValue:
  3737                           
  3738                           ; 2 bytes @ 0x21
  3739  00E7                     	ds	2
  3740                           
  3741                           	psect	cstackCOMMON
  3742  0070                     __pcstackCOMMON:
  3743  0070                     ?_PIN_MANAGER_Initialize:
  3744  0070                     ?_OSCILLATOR_Initialize:	
  3745                           ; 1 bytes @ 0x0
  3746                           
  3747  0070                     ?_WDT_Initialize:	
  3748                           ; 1 bytes @ 0x0
  3749                           
  3750  0070                     ?_OPA1_Initialize:	
  3751                           ; 1 bytes @ 0x0
  3752                           
  3753  0070                     ?_OPA2_Initialize:	
  3754                           ; 1 bytes @ 0x0
  3755                           
  3756  0070                     ?_TMR4_Initialize:	
  3757                           ; 1 bytes @ 0x0
  3758                           
  3759  0070                     ?_TMR2_Initialize:	
  3760                           ; 1 bytes @ 0x0
  3761                           
  3762  0070                     ?_EXT_INT_Initialize:	
  3763                           ; 1 bytes @ 0x0
  3764                           
  3765  0070                     ?_TMR0_Initialize:	
  3766                           ; 1 bytes @ 0x0
  3767                           
  3768  0070                     ?_EUSART_Initialize:	
  3769                           ; 1 bytes @ 0x0
  3770                           
  3771  0070                     ?_INT_ISR:	
  3772                           ; 1 bytes @ 0x0
  3773                           
  3774  0070                     ?_TMR4_ISR:	
  3775                           ; 1 bytes @ 0x0
  3776                           
  3777  0070                     ?_INT_CallBack:	
  3778                           ; 1 bytes @ 0x0
  3779                           
  3780  0070                     ?_TMR4_DefaultInterruptHandler:	
  3781                           ; 1 bytes @ 0x0
  3782                           
  3783  0070                     ?_DAC_Initialize:	
  3784                           ; 1 bytes @ 0x0
  3785                           
  3786  0070                     ?_SYSTEM_Initialize:	
  3787                           ; 1 bytes @ 0x0
  3788                           
  3789  0070                     ?_PIN_MANAGER_IOC:	
  3790                           ; 1 bytes @ 0x0
  3791                           
  3792  0070                     ??_PIN_MANAGER_IOC:	
  3793                           ; 1 bytes @ 0x0
  3794                           
  3795  0070                     ?_INTERRUPT_InterruptManager:	
  3796                           ; 1 bytes @ 0x0
  3797                           
  3798  0070                     ?_EUSART_Write:	
  3799                           ; 1 bytes @ 0x0
  3800                           
  3801  0070                     ?_putch:	
  3802                           ; 1 bytes @ 0x0
  3803                           
  3804  0070                     ?_INT_DefaultInterruptHandler:	
  3805                           ; 1 bytes @ 0x0
  3806                           
  3807  0070                     ??_INT_DefaultInterruptHandler:	
  3808                           ; 1 bytes @ 0x0
  3809                           
  3810  0070                     ?_initLED:	
  3811                           ; 1 bytes @ 0x0
  3812                           
  3813  0070                     ?_lowBattery:	
  3814                           ; 1 bytes @ 0x0
  3815                           
  3816  0070                     ?_startUp:	
  3817                           ; 1 bytes @ 0x0
  3818                           
  3819  0070                     ?_selectSomething:	
  3820                           ; 1 bytes @ 0x0
  3821                           
  3822  0070                     ?_selectFrequency:	
  3823                           ; 1 bytes @ 0x0
  3824                           
  3825  0070                     ?_selectCurrent:	
  3826                           ; 1 bytes @ 0x0
  3827                           
  3828  0070                     ?_process_remote_command:	
  3829                           ; 1 bytes @ 0x0
  3830                           
  3831  0070                     ?_main:	
  3832                           ; 1 bytes @ 0x0
  3833                           
  3834  0070                     ?i1___awdiv:	
  3835                           ; 1 bytes @ 0x0
  3836                           
  3837  0070                     ?i1___lmul:	
  3838                           ; 2 bytes @ 0x0
  3839                           
  3840  0070                     i1___awdiv@divisor:	
  3841                           ; 4 bytes @ 0x0
  3842                           
  3843  0070                     i1___lmul@multiplier:	
  3844                           ; 2 bytes @ 0x0
  3845                           
  3846                           
  3847                           ; 4 bytes @ 0x0
  3848  0070                     	ds	1
  3849  0071                     INT_DefaultInterruptHandler@time:
  3850                           
  3851                           ; 1 bytes @ 0x1
  3852  0071                     	ds	1
  3853  0072                     ??_INT_ISR:
  3854  0072                     ??_INT_CallBack:	
  3855                           ; 1 bytes @ 0x2
  3856                           
  3857  0072                     i1___awdiv@dividend:	
  3858                           ; 1 bytes @ 0x2
  3859                           
  3860                           
  3861                           ; 2 bytes @ 0x2
  3862  0072                     	ds	2
  3863  0074                     ??i1___awdiv:
  3864  0074                     i1___lmul@multiplicand:	
  3865                           ; 1 bytes @ 0x4
  3866                           
  3867                           
  3868                           ; 4 bytes @ 0x4
  3869  0074                     	ds	1
  3870  0075                     i1___awdiv@counter:
  3871                           
  3872                           ; 1 bytes @ 0x5
  3873  0075                     	ds	1
  3874  0076                     i1___awdiv@sign:
  3875                           
  3876                           ; 1 bytes @ 0x6
  3877  0076                     	ds	1
  3878  0077                     i1___awdiv@quotient:
  3879                           
  3880                           ; 2 bytes @ 0x7
  3881  0077                     	ds	1
  3882  0078                     ??i1___lmul:
  3883  0078                     i1___lmul@product:	
  3884                           ; 1 bytes @ 0x8
  3885                           
  3886                           
  3887                           ; 4 bytes @ 0x8
  3888  0078                     	ds	1
  3889  0079                     ??i1___aldiv:
  3890                           
  3891                           ; 1 bytes @ 0x9
  3892  0079                     	ds	1
  3893  007A                     ??i1_battery_voltage:
  3894                           
  3895                           ; 1 bytes @ 0xA
  3896  007A                     	ds	2
  3897  007C                     ??i1___lldiv:
  3898                           
  3899                           ; 1 bytes @ 0xC
  3900  007C                     	ds	1
  3901  007D                     ??_TMR4_ISR:
  3902  007D                     ??_INTERRUPT_InterruptManager:	
  3903                           ; 1 bytes @ 0xD
  3904                           
  3905                           
  3906                           	psect	cstackBANK0
  3907  0020                     __pcstackBANK0:	
  3908                           ; 1 bytes @ 0xD
  3909                           
  3910  0020                     ?i1___lldiv:
  3911  0020                     ?i1___aldiv:	
  3912                           ; 4 bytes @ 0x0
  3913                           
  3914  0020                     i1___lldiv@divisor:	
  3915                           ; 4 bytes @ 0x0
  3916                           
  3917  0020                     i1___aldiv@divisor:	
  3918                           ; 4 bytes @ 0x0
  3919                           
  3920                           
  3921                           ; 4 bytes @ 0x0
  3922  0020                     	ds	4
  3923  0024                     i1___lldiv@dividend:
  3924  0024                     i1___aldiv@dividend:	
  3925                           ; 4 bytes @ 0x4
  3926                           
  3927                           
  3928                           ; 4 bytes @ 0x4
  3929  0024                     	ds	4
  3930  0028                     i1___aldiv@counter:
  3931  0028                     i1___lldiv@quotient:	
  3932                           ; 1 bytes @ 0x8
  3933                           
  3934                           
  3935                           ; 4 bytes @ 0x8
  3936  0028                     	ds	1
  3937  0029                     i1___aldiv@sign:
  3938                           
  3939                           ; 1 bytes @ 0x9
  3940  0029                     	ds	1
  3941  002A                     i1___aldiv@quotient:
  3942                           
  3943                           ; 4 bytes @ 0xA
  3944  002A                     	ds	2
  3945  002C                     i1___lldiv@counter:
  3946                           
  3947                           ; 1 bytes @ 0xC
  3948  002C                     	ds	2
  3949  002E                     ?i1_battery_voltage:
  3950                           
  3951                           ; 2 bytes @ 0xE
  3952  002E                     	ds	2
  3953  0030                     ?i1_setCurrent:
  3954  0030                     i1setCurrent@microamps:	
  3955                           ; 1 bytes @ 0x10
  3956                           
  3957                           
  3958                           ; 2 bytes @ 0x10
  3959  0030                     	ds	2
  3960  0032                     i1setCurrent@Vdd_mv:
  3961                           
  3962                           ; 2 bytes @ 0x12
  3963  0032                     	ds	2
  3964  0034                     ??i1_setCurrent:
  3965                           
  3966                           ; 1 bytes @ 0x14
  3967  0034                     	ds	8
  3968  003C                     i1setCurrent@DACValue:
  3969                           
  3970                           ; 2 bytes @ 0x1C
  3971  003C                     	ds	2
  3972  003E                     ??_TMR4_DefaultInterruptHandler:
  3973                           
  3974                           ; 1 bytes @ 0x1E
  3975  003E                     	ds	2
  3976                           
  3977                           	psect	maintext
  3978  0434                     __pmaintext:	
  3979 ;;
  3980 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3981 ;;
  3982 ;; *************** function _main *****************
  3983 ;; Defined at:
  3984 ;;		line 380 in file "main.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg, status,2, status,0, pclath, cstack
  3993 ;; Tracked objects:
  3994 ;;		On entry : B1F/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3998 ;;      Params:         0       0       0       0       0       0       0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0       0
  4000 ;;      Temps:          0       0       0       2       0       0       0       0
  4001 ;;      Totals:         0       0       0       2       0       0       0       0
  4002 ;;Total ram usage:        2 bytes
  4003 ;; Hardware stack levels required when called:   10
  4004 ;; This function calls:
  4005 ;;		_DAC_Initialize
  4006 ;;		_OPA1_Initialize
  4007 ;;		_OPA2_Initialize
  4008 ;;		_SYSTEM_Initialize
  4009 ;;		_battery_voltage
  4010 ;;		_initLED
  4011 ;;		_lowBattery
  4012 ;;		_process_remote_command
  4013 ;;		_setLEDColor
  4014 ;;		_startUp
  4015 ;; This function is called by:
  4016 ;;		Startup code after reset
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           
  4021                           ;psect for function _main
  4022  0434                     _main:
  4023                           
  4024                           ;main.c: 382: initLED();
  4025                           
  4026                           ;incstack = 0
  4027                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  4028  0434  3186  2667  3184   	fcall	_initLED
  4029  0437                     l587:	
  4030                           ;main.c: 383: while(1){
  4031                           
  4032                           
  4033                           ;main.c: 384: setLEDColor(255, 0, 0);
  4034  0437  0021               	movlb	1	; select bank1
  4035  0438  01C6               	clrf	setLEDColor@green^(0+128)
  4036  0439  01C7               	clrf	setLEDColor@blue^(0+128)
  4037  043A  30FF               	movlw	255
  4038  043B  318E  26DD  3184   	fcall	_setLEDColor
  4039                           
  4040                           ;main.c: 385: _delay((unsigned long)((1000)*(4000000/4000.0)));
  4041  043E  3006               	movlw	6
  4042  043F  0022               	movlb	2	; select bank2
  4043  0440  00CD               	movwf	(??_main^(0+256)+1)
  4044  0441  3013               	movlw	19
  4045  0442  00CC               	movwf	??_main^(0+256)
  4046  0443  30AD               	movlw	173
  4047  0444                     u2897:
  4048  0444  0B89               	decfsz	9,f
  4049  0445  2C44               	goto	u2897
  4050  0446  0BCC               	decfsz	??_main^(0+256),f
  4051  0447  2C44               	goto	u2897
  4052  0448  0BCD               	decfsz	(??_main^(0+256)+1),f
  4053  0449  2C44               	goto	u2897
  4054  044A  3200               	nop2
  4055                           
  4056                           ;main.c: 386: setLEDColor(0, 0, 0);
  4057  044B  0021               	movlb	1	; select bank1
  4058  044C  01C6               	clrf	setLEDColor@green^(0+128)
  4059  044D  01C7               	clrf	setLEDColor@blue^(0+128)
  4060  044E  3000               	movlw	0
  4061  044F  318E  26DD  3184   	fcall	_setLEDColor
  4062                           
  4063                           ;main.c: 387: setLEDColor(255, 0, 0);
  4064  0452  0021               	movlb	1	; select bank1
  4065  0453  01C6               	clrf	setLEDColor@green^(0+128)
  4066  0454  01C7               	clrf	setLEDColor@blue^(0+128)
  4067  0455  30FF               	movlw	255
  4068  0456  318E  26DD  3184   	fcall	_setLEDColor
  4069                           
  4070                           ;main.c: 388: _delay((unsigned long)((1000)*(4000000/4000.0)));
  4071  0459  3006               	movlw	6
  4072  045A  0022               	movlb	2	; select bank2
  4073  045B  00CD               	movwf	(??_main^(0+256)+1)
  4074  045C  3013               	movlw	19
  4075  045D  00CC               	movwf	??_main^(0+256)
  4076  045E  30AD               	movlw	173
  4077  045F                     u2907:
  4078  045F  0B89               	decfsz	9,f
  4079  0460  2C5F               	goto	u2907
  4080  0461  0BCC               	decfsz	??_main^(0+256),f
  4081  0462  2C5F               	goto	u2907
  4082  0463  0BCD               	decfsz	(??_main^(0+256)+1),f
  4083  0464  2C5F               	goto	u2907
  4084  0465  3200               	nop2
  4085                           
  4086                           ;main.c: 389: setLEDColor(0, 0, 0);
  4087  0466  0021               	movlb	1	; select bank1
  4088  0467  01C6               	clrf	setLEDColor@green^(0+128)
  4089  0468  01C7               	clrf	setLEDColor@blue^(0+128)
  4090  0469  3000               	movlw	0
  4091  046A  318E  26DD  3184   	fcall	_setLEDColor
  4092                           
  4093                           ;main.c: 390: setLEDColor(255, 0, 0);
  4094  046D  0021               	movlb	1	; select bank1
  4095  046E  01C6               	clrf	setLEDColor@green^(0+128)
  4096  046F  01C7               	clrf	setLEDColor@blue^(0+128)
  4097  0470  30FF               	movlw	255
  4098  0471  318E  26DD  3184   	fcall	_setLEDColor
  4099                           
  4100                           ;main.c: 391: _delay((unsigned long)((1000)*(4000000/4000.0)));
  4101  0474  3006               	movlw	6
  4102  0475  0022               	movlb	2	; select bank2
  4103  0476  00CD               	movwf	(??_main^(0+256)+1)
  4104  0477  3013               	movlw	19
  4105  0478  00CC               	movwf	??_main^(0+256)
  4106  0479  30AD               	movlw	173
  4107  047A                     u2917:
  4108  047A  0B89               	decfsz	9,f
  4109  047B  2C7A               	goto	u2917
  4110  047C  0BCC               	decfsz	??_main^(0+256),f
  4111  047D  2C7A               	goto	u2917
  4112  047E  0BCD               	decfsz	(??_main^(0+256)+1),f
  4113  047F  2C7A               	goto	u2917
  4114  0480  3200               	nop2
  4115                           
  4116                           ;main.c: 392: setLEDColor(0, 0, 0);
  4117  0481  0021               	movlb	1	; select bank1
  4118  0482  01C6               	clrf	setLEDColor@green^(0+128)
  4119  0483  01C7               	clrf	setLEDColor@blue^(0+128)
  4120  0484  3000               	movlw	0
  4121  0485  318E  26DD  3184   	fcall	_setLEDColor
  4122  0488  2C37               	goto	l587
  4123  0489                     __end_of_main:
  4124                           
  4125                           	psect	text1
  4126  06AB                     __ptext1:	
  4127 ;; *************** function _startUp *****************
  4128 ;; Defined at:
  4129 ;;		line 186 in file "main.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;		None
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  i               2    6[BANK1 ] int 
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  1    wreg      void 
  4136 ;; Registers used:
  4137 ;;		wreg, status,2, status,0, pclath, cstack
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4143 ;;      Params:         0       0       0       0       0       0       0       0
  4144 ;;      Locals:         0       0       2       0       0       0       0       0
  4145 ;;      Temps:          0       0       2       0       0       0       0       0
  4146 ;;      Totals:         0       0       4       0       0       0       0       0
  4147 ;;Total ram usage:        4 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; Hardware stack levels required when called:    6
  4150 ;; This function calls:
  4151 ;;		_setLEDColor
  4152 ;; This function is called by:
  4153 ;;		_main
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _startUp
  4159  06AB                     _startUp:
  4160                           
  4161                           ;main.c: 187: interfaceState = STATE_RUNNING;
  4162                           
  4163                           ;incstack = 0
  4164                           ; Regs used in _startUp: [wreg+status,2+status,0+pclath+cstack]
  4165  06AB  0021               	movlb	1	; select bank1
  4166  06AC  01E9               	clrf	_interfaceState^(0+128)
  4167                           
  4168                           ;main.c: 188: for (int i = 0; i < 5; i++){
  4169  06AD  01CC               	clrf	startUp@i^(0+128)
  4170  06AE  01CD               	clrf	(startUp@i+1)^(0+128)
  4171  06AF                     l3070:
  4172                           
  4173                           ;main.c: 189: setLEDColor(0, 180, 230);
  4174  06AF  30B4               	movlw	180
  4175  06B0  0021               	movlb	1	; select bank1
  4176  06B1  00CA               	movwf	??_startUp^(0+128)
  4177  06B2  084A               	movf	??_startUp^(0+128),w
  4178  06B3  00C6               	movwf	setLEDColor@green^(0+128)
  4179  06B4  30E6               	movlw	230
  4180  06B5  00CB               	movwf	(??_startUp+1)^(0+128)
  4181  06B6  084B               	movf	(??_startUp+1)^(0+128),w
  4182  06B7  00C7               	movwf	setLEDColor@blue^(0+128)
  4183  06B8  3000               	movlw	0
  4184  06B9  318E  26DD  3186   	fcall	_setLEDColor
  4185                           
  4186                           ;main.c: 190: _delay((unsigned long)((100)*(4000000/4000.0)));
  4187  06BC  3082               	movlw	130
  4188  06BD  0021               	movlb	1	; select bank1
  4189  06BE  00CA               	movwf	??_startUp^(0+128)
  4190  06BF  30DD               	movlw	221
  4191  06C0                     u2927:
  4192  06C0  0B89               	decfsz	9,f
  4193  06C1  2EC0               	goto	u2927
  4194  06C2  0BCA               	decfsz	??_startUp^(0+128),f
  4195  06C3  2EC0               	goto	u2927
  4196  06C4  3200               	nop2
  4197                           
  4198                           ;main.c: 191: setLEDColor(0, 0, 0);
  4199  06C5  0021               	movlb	1	; select bank1
  4200  06C6  01C6               	clrf	setLEDColor@green^(0+128)
  4201  06C7  01C7               	clrf	setLEDColor@blue^(0+128)
  4202  06C8  3000               	movlw	0
  4203  06C9  318E  26DD  3186   	fcall	_setLEDColor
  4204                           
  4205                           ;main.c: 192: _delay((unsigned long)((100)*(4000000/4000.0)));
  4206  06CC  3082               	movlw	130
  4207  06CD  0021               	movlb	1	; select bank1
  4208  06CE  00CA               	movwf	??_startUp^(0+128)
  4209  06CF  30DD               	movlw	221
  4210  06D0                     u2937:
  4211  06D0  0B89               	decfsz	9,f
  4212  06D1  2ED0               	goto	u2937
  4213  06D2  0BCA               	decfsz	??_startUp^(0+128),f
  4214  06D3  2ED0               	goto	u2937
  4215  06D4  3200               	nop2
  4216  06D5  3001               	movlw	1
  4217  06D6  0021               	movlb	1	; select bank1
  4218  06D7  07CC               	addwf	startUp@i^(0+128),f
  4219  06D8  3000               	movlw	0
  4220  06D9  3DCD               	addwfc	(startUp@i+1)^(0+128),f
  4221  06DA  084D               	movf	(startUp@i+1)^(0+128),w
  4222  06DB  3A80               	xorlw	128
  4223  06DC  00CA               	movwf	??_startUp^(0+128)
  4224  06DD  3080               	movlw	128
  4225  06DE  024A               	subwf	??_startUp^(0+128),w
  4226  06DF  1D03               	skipz
  4227  06E0  2EE3               	goto	u2695
  4228  06E1  3005               	movlw	5
  4229  06E2  024C               	subwf	startUp@i^(0+128),w
  4230  06E3                     u2695:
  4231  06E3  1C03               	skipc
  4232  06E4  2EAF               	goto	l3070
  4233                           
  4234                           ;main.c: 193: };main.c: 194: duty = 0;
  4235  06E5  0020               	movlb	0	; select bank0
  4236  06E6  01D3               	clrf	_duty
  4237  06E7  0008               	return
  4238  06E8                     __end_of_startUp:
  4239                           
  4240                           	psect	text2
  4241  004D                     __ptext2:	
  4242 ;; *************** function _process_remote_command *****************
  4243 ;; Defined at:
  4244 ;;		line 285 in file "main.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  code            1    wreg     PTR struct .
  4247 ;;		 -> ir_code(6), 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  code            1   10[BANK2 ] PTR struct .
  4250 ;;		 -> ir_code(6), 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      void 
  4253 ;; Registers used:
  4254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4260 ;;      Params:         0       0       0       0       0       0       0       0
  4261 ;;      Locals:         0       0       0       1       0       0       0       0
  4262 ;;      Temps:          0       0       0       2       0       0       0       0
  4263 ;;      Totals:         0       0       0       3       0       0       0       0
  4264 ;;Total ram usage:        3 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    9
  4267 ;; This function calls:
  4268 ;;		_battery_voltage
  4269 ;;		_printf
  4270 ;;		_selectCurrent
  4271 ;;		_selectFrequency
  4272 ;;		_selectSomething
  4273 ;;		_setCurrent
  4274 ;;		_setFrequency
  4275 ;;		_setLEDColor
  4276 ;; This function is called by:
  4277 ;;		_main
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           
  4282                           ;psect for function _process_remote_command
  4283  004D                     _process_remote_command:
  4284                           
  4285                           ;incstack = 0
  4286                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4287                           ;process_remote_command@code stored from wreg
  4288  004D  0022               	movlb	2	; select bank2
  4289  004E  00CB               	movwf	process_remote_command@code^(0+256)
  4290                           
  4291                           ;main.c: 286: setLEDColor(0, 0, 0);
  4292  004F  0021               	movlb	1	; select bank1
  4293  0050  01C6               	clrf	setLEDColor@green^(0+128)
  4294  0051  01C7               	clrf	setLEDColor@blue^(0+128)
  4295  0052  3000               	movlw	0
  4296  0053  318E  26DD  3180   	fcall	_setLEDColor
  4297                           
  4298                           ;main.c: 288: switch(code->command){
  4299  0056  2916               	goto	l3150
  4300  0057                     l3080:
  4301                           
  4302                           ;main.c: 290: if(STATE_CURRENT == interfaceState){
  4303  0057  0021               	movlb	1	; select bank1
  4304  0058  0369               	decf	_interfaceState^(0+128),w
  4305  0059  1D03               	btfss	3,2
  4306  005A  2887               	goto	l3088
  4307                           
  4308                           ;main.c: 291: currentIndex++;
  4309  005B  3001               	movlw	1
  4310  005C  0020               	movlb	0	; select bank0
  4311  005D  07C6               	addwf	_currentIndex,f
  4312  005E  3000               	movlw	0
  4313  005F  3DC7               	addwfc	_currentIndex+1,f
  4314                           
  4315                           ;main.c: 292: if (currentIndex > maxCurrentIndex - 1)
  4316  0060  0847               	movf	_currentIndex+1,w
  4317  0061  3A80               	xorlw	128
  4318  0062  0022               	movlb	2	; select bank2
  4319  0063  00C9               	movwf	??_process_remote_command^(0+256)
  4320  0064  3080               	movlw	128
  4321  0065  0249               	subwf	??_process_remote_command^(0+256),w
  4322  0066  1D03               	skipz
  4323  0067  286B               	goto	u2715
  4324  0068  300B               	movlw	11
  4325  0069  0020               	movlb	0	; select bank0
  4326  006A  0246               	subwf	_currentIndex,w
  4327  006B                     u2715:
  4328  006B  1C03               	skipc
  4329  006C  2872               	goto	l3086
  4330                           
  4331                           ;main.c: 293: {;main.c: 294: currentIndex = maxCurrentIndex - 1;
  4332  006D  300A               	movlw	10
  4333  006E  0020               	movlb	0	; select bank0
  4334  006F  00C6               	movwf	_currentIndex
  4335  0070  3000               	movlw	0
  4336  0071  00C7               	movwf	_currentIndex+1
  4337  0072                     l3086:
  4338                           
  4339                           ;main.c: 295: };main.c: 296: setCurrent(currentValue[currentIndex],battery_voltage());
  4340  0072  0020               	movlb	0	; select bank0
  4341  0073  3546               	lslf	_currentIndex,w
  4342  0074  3EA4               	addlw	(low (_currentValue| 0))& (0+255)
  4343  0075  0086               	movwf	6
  4344  0076  0187               	clrf	7
  4345  0077  3F40               	moviw [0]fsr1
  4346  0078  0021               	movlb	1	; select bank1
  4347  0079  00E3               	movwf	setCurrent@microamps^(0+128)
  4348  007A  3F41               	moviw [1]fsr1
  4349  007B  00E4               	movwf	(setCurrent@microamps+1)^(0+128)
  4350  007C  318F  27A8  3180   	fcall	_battery_voltage
  4351  007F  0021               	movlb	1	; select bank1
  4352  0080  0862               	movf	(?_battery_voltage+1)^(0+128),w
  4353  0081  00E6               	movwf	(setCurrent@Vdd_mv+1)^(0+128)
  4354  0082  0861               	movf	?_battery_voltage^(0+128),w
  4355  0083  00E5               	movwf	setCurrent@Vdd_mv^(0+128)
  4356  0084  3181  2169  3180   	fcall	_setCurrent
  4357  0087                     l3088:
  4358                           
  4359                           ;main.c: 297: };main.c: 298: if(STATE_FREQUENCY == interfaceState){
  4360  0087  3002               	movlw	2
  4361  0088  0021               	movlb	1	; select bank1
  4362  0089  0669               	xorwf	_interfaceState^(0+128),w
  4363  008A  1D03               	btfss	3,2
  4364  008B  28B0               	goto	l3096
  4365                           
  4366                           ;main.c: 299: frequencyIndex++;
  4367  008C  3001               	movlw	1
  4368  008D  0020               	movlb	0	; select bank0
  4369  008E  07C8               	addwf	_frequencyIndex,f
  4370  008F  3000               	movlw	0
  4371  0090  3DC9               	addwfc	_frequencyIndex+1,f
  4372                           
  4373                           ;main.c: 300: if (frequencyIndex > maxFrequencyIndex - 1)
  4374  0091  0849               	movf	_frequencyIndex+1,w
  4375  0092  3A80               	xorlw	128
  4376  0093  0022               	movlb	2	; select bank2
  4377  0094  00C9               	movwf	??_process_remote_command^(0+256)
  4378  0095  3080               	movlw	128
  4379  0096  0249               	subwf	??_process_remote_command^(0+256),w
  4380  0097  1D03               	skipz
  4381  0098  289C               	goto	u2735
  4382  0099  3006               	movlw	6
  4383  009A  0020               	movlb	0	; select bank0
  4384  009B  0248               	subwf	_frequencyIndex,w
  4385  009C                     u2735:
  4386  009C  1C03               	skipc
  4387  009D  28A3               	goto	l3094
  4388                           
  4389                           ;main.c: 301: {;main.c: 302: frequencyIndex = maxFrequencyIndex - 1;
  4390  009E  3005               	movlw	5
  4391  009F  0020               	movlb	0	; select bank0
  4392  00A0  00C8               	movwf	_frequencyIndex
  4393  00A1  3000               	movlw	0
  4394  00A2  00C9               	movwf	_frequencyIndex+1
  4395  00A3                     l3094:
  4396                           
  4397                           ;main.c: 303: };main.c: 304: setFrequency(frequencyValue[frequencyIndex]);
  4398  00A3  0020               	movlb	0	; select bank0
  4399  00A4  3548               	lslf	_frequencyIndex,w
  4400  00A5  3EBA               	addlw	(low (_frequencyValue| 0))& (0+255)
  4401  00A6  0086               	movwf	6
  4402  00A7  0187               	clrf	7
  4403  00A8  3F40               	moviw [0]fsr1
  4404  00A9  0021               	movlb	1	; select bank1
  4405  00AA  00E1               	movwf	setFrequency@frequency_hz^(0+128)
  4406  00AB  3F41               	moviw [1]fsr1
  4407  00AC                     L1:
  4408  00AC  00E2               	movwf	(setFrequency@frequency_hz+1)^(0+128)
  4409  00AD  3186  2623  3180   	fcall	_setFrequency
  4410  00B0                     l3096:
  4411                           
  4412                           ;main.c: 305: };main.c: 306: if(STATE_RUNNING == interfaceState){
  4413  00B0  0021               	movlb	1	; select bank1
  4414  00B1  0869               	movf	_interfaceState^(0+128),w
  4415  00B2  1D03               	btfss	3,2
  4416  00B3  28B7               	goto	l3100
  4417                           
  4418                           ;main.c: 307: selectSomething();
  4419  00B4  3185  2581  3180   	fcall	_selectSomething
  4420  00B7                     l3100:
  4421                           
  4422                           ;main.c: 308: };main.c: 309: if(STATE_LOWBATTERY == interfaceState){
  4423  00B7  3003               	movlw	3
  4424  00B8  0021               	movlb	1	; select bank1
  4425  00B9  0669               	xorwf	_interfaceState^(0+128),w
  4426  00BA  1D03               	btfss	3,2
  4427  00BB  2944               	goto	l3152
  4428                           
  4429                           ;main.c: 310: selectSomething();
  4430  00BC  3185  2581  3180   	fcall	_selectSomething
  4431  00BF  2944               	goto	l3152
  4432  00C0                     l3104:
  4433                           
  4434                           ;main.c: 314: if(STATE_CURRENT == interfaceState){
  4435  00C0  0021               	movlb	1	; select bank1
  4436  00C1  0369               	decf	_interfaceState^(0+128),w
  4437  00C2  1D03               	btfss	3,2
  4438  00C3  28E1               	goto	l3114
  4439                           
  4440                           ;main.c: 315: currentIndex--;
  4441  00C4  30FF               	movlw	255
  4442  00C5  0020               	movlb	0	; select bank0
  4443  00C6  07C6               	addwf	_currentIndex,f
  4444  00C7  30FF               	movlw	255
  4445  00C8  3DC7               	addwfc	_currentIndex+1,f
  4446                           
  4447                           ;main.c: 316: if (currentIndex < 0)
  4448  00C9  1FC7               	btfss	_currentIndex+1,7
  4449  00CA  28CD               	goto	l3112
  4450                           
  4451                           ;main.c: 317: {;main.c: 318: currentIndex = 0;
  4452  00CB  01C6               	clrf	_currentIndex
  4453  00CC  01C7               	clrf	_currentIndex+1
  4454  00CD                     l3112:
  4455                           
  4456                           ;main.c: 319: };main.c: 320: setCurrent(currentValue[currentIndex],battery_voltage());
  4457  00CD  3546               	lslf	_currentIndex,w
  4458  00CE  3EA4               	addlw	(low (_currentValue| 0))& (0+255)
  4459  00CF  0086               	movwf	6
  4460  00D0  0187               	clrf	7
  4461  00D1  3F40               	moviw [0]fsr1
  4462  00D2  0021               	movlb	1	; select bank1
  4463  00D3  00E3               	movwf	setCurrent@microamps^(0+128)
  4464  00D4  3F41               	moviw [1]fsr1
  4465  00D5  00E4               	movwf	(setCurrent@microamps+1)^(0+128)
  4466  00D6  318F  27A8  3180   	fcall	_battery_voltage
  4467  00D9  0021               	movlb	1	; select bank1
  4468  00DA  0862               	movf	(?_battery_voltage+1)^(0+128),w
  4469  00DB  00E6               	movwf	(setCurrent@Vdd_mv+1)^(0+128)
  4470  00DC  0861               	movf	?_battery_voltage^(0+128),w
  4471  00DD  00E5               	movwf	setCurrent@Vdd_mv^(0+128)
  4472  00DE  3181  2169  3180   	fcall	_setCurrent
  4473  00E1                     l3114:
  4474                           
  4475                           ;main.c: 321: };main.c: 322: if(STATE_FREQUENCY == interfaceState){
  4476  00E1  3002               	movlw	2
  4477  00E2  0021               	movlb	1	; select bank1
  4478  00E3  0669               	xorwf	_interfaceState^(0+128),w
  4479  00E4  1D03               	btfss	3,2
  4480  00E5  28B0               	goto	l3096
  4481                           
  4482                           ;main.c: 323: frequencyIndex--;
  4483  00E6  30FF               	movlw	255
  4484  00E7  0020               	movlb	0	; select bank0
  4485  00E8  07C8               	addwf	_frequencyIndex,f
  4486  00E9  30FF               	movlw	255
  4487  00EA  3DC9               	addwfc	_frequencyIndex+1,f
  4488                           
  4489                           ;main.c: 324: if (frequencyIndex < 0)
  4490  00EB  1FC9               	btfss	_frequencyIndex+1,7
  4491  00EC  28EF               	goto	l3122
  4492                           
  4493                           ;main.c: 325: {;main.c: 326: frequencyIndex = 0;
  4494  00ED  01C8               	clrf	_frequencyIndex
  4495  00EE  01C9               	clrf	_frequencyIndex+1
  4496  00EF                     l3122:
  4497                           
  4498                           ;main.c: 327: };main.c: 328: setFrequency(frequencyValue[frequencyIndex]);
  4499  00EF  3548               	lslf	_frequencyIndex,w
  4500  00F0  3EBA               	addlw	(low (_frequencyValue| 0))& (0+255)
  4501  00F1  0086               	movwf	6
  4502  00F2  0187               	clrf	7
  4503  00F3  3F40               	moviw [0]fsr1
  4504  00F4  0021               	movlb	1	; select bank1
  4505  00F5  00E1               	movwf	setFrequency@frequency_hz^(0+128)
  4506  00F6  3F41               	moviw [1]fsr1
  4507  00F7  28AC               	goto	L1
  4508  00F8                     l3132:	
  4509                           ;main.c: 332: };main.c: 333: if(STATE_LOWBATTERY == interfaceState){
  4510                           
  4511                           ;main.c: 331: selectSomething();
  4512                           
  4513                           ;main.c: 329: };main.c: 330: if(STATE_RUNNING == interfaceState){
  4514                           
  4515                           
  4516                           ;main.c: 338: selectFrequency();
  4517  00F8  318F  277E  3180   	fcall	_selectFrequency
  4518                           
  4519                           ;main.c: 339: break;
  4520  00FB  2944               	goto	l3152
  4521  00FC                     l3134:
  4522                           
  4523                           ;main.c: 341: selectCurrent();
  4524  00FC  318F  2756  3180   	fcall	_selectCurrent
  4525                           
  4526                           ;main.c: 342: break;
  4527  00FF  2944               	goto	l3152
  4528  0100                     l3136:
  4529                           
  4530                           ;main.c: 344: LED_red = 0;
  4531  0100  0021               	movlb	1	; select bank1
  4532  0101  01ED               	clrf	_LED_red^(0+128)
  4533                           
  4534                           ;main.c: 345: LED_green = 255;
  4535  0102  30FF               	movlw	255
  4536  0103  0022               	movlb	2	; select bank2
  4537  0104  00C9               	movwf	??_process_remote_command^(0+256)
  4538  0105  0849               	movf	??_process_remote_command^(0+256),w
  4539  0106  0021               	movlb	1	; select bank1
  4540  0107  00EC               	movwf	_LED_green^(0+128)
  4541                           
  4542                           ;main.c: 346: LED_blue = 0;
  4543  0108  01EB               	clrf	_LED_blue^(0+128)
  4544                           
  4545                           ;main.c: 347: printf("\n reset select");
  4546  0109  3027               	movlw	low (STR_3| (0+32768))
  4547  010A  00C8               	movwf	printf@f^(0+128)
  4548  010B  3088               	movlw	high (STR_3| (0+32768))
  4549  010C  00C9               	movwf	(printf@f^(0+128)+1)
  4550  010D  318E  26F4  3180   	fcall	_printf
  4551                           
  4552                           ;main.c: 348: flag = 0;
  4553  0110  0021               	movlb	1	; select bank1
  4554  0111  01EA               	clrf	_flag^(0+128)
  4555                           
  4556                           ;main.c: 349: break;
  4557  0112  2944               	goto	l3152
  4558  0113                     l3146:
  4559                           
  4560                           ;main.c: 351: duty = 0;
  4561  0113  0020               	movlb	0	; select bank0
  4562  0114  01D3               	clrf	_duty
  4563                           
  4564                           ;main.c: 352: break;
  4565  0115  2944               	goto	l3152
  4566  0116                     l3150:
  4567  0116  0022               	movlb	2	; select bank2
  4568  0117  084B               	movf	process_remote_command@code^(0+256),w
  4569  0118  3E03               	addlw	3
  4570  0119  0086               	movwf	6
  4571  011A  0187               	clrf	7
  4572  011B  0801               	movf	1,w
  4573                           
  4574                           ; Switch size 1, requested type "simple"
  4575                           ; Number of cases is 13, Range of values is 8 to 176
  4576                           ; switch strategies available:
  4577                           ; Name         Instructions Cycles
  4578                           ; simple_byte           40    21 (average)
  4579                           ; jumptable            263     9 (fixed)
  4580                           ;	Chosen strategy is simple_byte
  4581  011C  3A08               	xorlw	8	; case 8
  4582  011D  1903               	skipnz
  4583  011E  2900               	goto	l3136
  4584  011F  3A18               	xorlw	24	; case 16
  4585  0120  1903               	skipnz
  4586  0121  28FC               	goto	l3134
  4587  0122  3A08               	xorlw	8	; case 24
  4588  0123  1903               	skipnz
  4589  0124  2944               	goto	l3152
  4590  0125  3A30               	xorlw	48	; case 40
  4591  0126  1903               	skipnz
  4592  0127  2944               	goto	l3152
  4593  0128  3A60               	xorlw	96	; case 72
  4594  0129  1903               	skipnz
  4595  012A  2944               	goto	l3152
  4596  012B  3A18               	xorlw	24	; case 80
  4597  012C  1903               	skipnz
  4598  012D  28F8               	goto	l3132
  4599  012E  3A08               	xorlw	8	; case 88
  4600  012F  1903               	skipnz
  4601  0130  2944               	goto	l3152
  4602  0131  3A30               	xorlw	48	; case 104
  4603  0132  1903               	skipnz
  4604  0133  2944               	goto	l3152
  4605  0134  3AE0               	xorlw	224	; case 136
  4606  0135  1903               	skipnz
  4607  0136  2913               	goto	l3146
  4608  0137  3A10               	xorlw	16	; case 152
  4609  0138  1903               	skipnz
  4610  0139  2944               	goto	l3152
  4611  013A  3A38               	xorlw	56	; case 160
  4612  013B  1903               	skipnz
  4613  013C  2857               	goto	l3080
  4614  013D  3A08               	xorlw	8	; case 168
  4615  013E  1903               	skipnz
  4616  013F  2944               	goto	l3152
  4617  0140  3A18               	xorlw	24	; case 176
  4618  0141  1903               	skipnz
  4619  0142  28C0               	goto	l3104
  4620  0143  2944               	goto	l3152
  4621  0144                     l3152:
  4622                           
  4623                           ;main.c: 371: setLEDColor(LED_red, LED_green, LED_blue);
  4624  0144  0021               	movlb	1	; select bank1
  4625  0145  086C               	movf	_LED_green^(0+128),w
  4626  0146  0022               	movlb	2	; select bank2
  4627  0147  00C9               	movwf	??_process_remote_command^(0+256)
  4628  0148  0849               	movf	??_process_remote_command^(0+256),w
  4629  0149  0021               	movlb	1	; select bank1
  4630  014A  00C6               	movwf	setLEDColor@green^(0+128)
  4631  014B  086B               	movf	_LED_blue^(0+128),w
  4632  014C  0022               	movlb	2	; select bank2
  4633  014D  00CA               	movwf	(??_process_remote_command+1)^(0+256)
  4634  014E  084A               	movf	(??_process_remote_command+1)^(0+256),w
  4635  014F  0021               	movlb	1	; select bank1
  4636  0150  00C7               	movwf	setLEDColor@blue^(0+128)
  4637  0151  086D               	movf	_LED_red^(0+128),w
  4638  0152  318E  26DD  3180   	fcall	_setLEDColor
  4639                           
  4640                           ;main.c: 372: _delay((unsigned long)((1000)*(4000000/4000.0)));
  4641  0155  3006               	movlw	6
  4642  0156  0022               	movlb	2	; select bank2
  4643  0157  00CA               	movwf	(??_process_remote_command^(0+256)+1)
  4644  0158  3013               	movlw	19
  4645  0159  00C9               	movwf	??_process_remote_command^(0+256)
  4646  015A  30AD               	movlw	173
  4647  015B                     u2947:
  4648  015B  0B89               	decfsz	9,f
  4649  015C  295B               	goto	u2947
  4650  015D  0BC9               	decfsz	??_process_remote_command^(0+256),f
  4651  015E  295B               	goto	u2947
  4652  015F  0BCA               	decfsz	(??_process_remote_command^(0+256)+1),f
  4653  0160  295B               	goto	u2947
  4654  0161  3200               	nop2
  4655                           
  4656                           ;main.c: 373: setLEDColor(0, 0, 0);
  4657  0162  0021               	movlb	1	; select bank1
  4658  0163  01C6               	clrf	setLEDColor@green^(0+128)
  4659  0164  01C7               	clrf	setLEDColor@blue^(0+128)
  4660  0165  3000               	movlw	0
  4661  0166  318E  26DD         	fcall	_setLEDColor
  4662  0168  0008               	return
  4663  0169                     __end_of_process_remote_command:
  4664                           
  4665                           	psect	text3
  4666  0623                     __ptext3:	
  4667 ;; *************** function _setFrequency *****************
  4668 ;; Defined at:
  4669 ;;		line 246 in file "main.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;  frequency_hz    2   27[BANK1 ] unsigned int 
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;  pr4_val         2   30[BANK1 ] int 
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  1    wreg      void 
  4676 ;; Registers used:
  4677 ;;		wreg, status,2, status,0, pclath, cstack
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4683 ;;      Params:         0       0       2       0       0       0       0       0
  4684 ;;      Locals:         0       0       2       0       0       0       0       0
  4685 ;;      Temps:          0       0       1       0       0       0       0       0
  4686 ;;      Totals:         0       0       5       0       0       0       0       0
  4687 ;;Total ram usage:        5 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    6
  4690 ;; This function calls:
  4691 ;;		___aldiv
  4692 ;;		___lmul
  4693 ;; This function is called by:
  4694 ;;		_process_remote_command
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           
  4699                           ;psect for function _setFrequency
  4700  0623                     _setFrequency:
  4701                           
  4702                           ;main.c: 262: int16_t pr4_val = 1000000L / (96L * frequency_hz);
  4703                           
  4704                           ;incstack = 0
  4705                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  4706  0623  0021               	movlb	1	; select bank1
  4707  0624  0861               	movf	setFrequency@frequency_hz^(0+128),w
  4708  0625  00C6               	movwf	___lmul@multiplier^(0+128)
  4709  0626  0862               	movf	(setFrequency@frequency_hz+1)^(0+128),w
  4710  0627  00C7               	movwf	(___lmul@multiplier^(0+128)+1)
  4711  0628  01C8               	clrf	(___lmul@multiplier^(0+128)+2)
  4712  0629  01C9               	clrf	(___lmul@multiplier^(0+128)+3)
  4713  062A  3000               	movlw	0
  4714  062B  00CD               	movwf	(___lmul@multiplicand+3)^(0+128)
  4715  062C  3000               	movlw	0
  4716  062D  00CC               	movwf	(___lmul@multiplicand+2)^(0+128)
  4717  062E  3000               	movlw	0
  4718  062F  00CB               	movwf	(___lmul@multiplicand+1)^(0+128)
  4719  0630  3060               	movlw	96
  4720  0631  00CA               	movwf	___lmul@multiplicand^(0+128)
  4721  0632  3187  274C  3186   	fcall	___lmul
  4722  0635  0021               	movlb	1	; select bank1
  4723  0636  0849               	movf	(?___lmul+3)^(0+128),w
  4724  0637  00D5               	movwf	(___aldiv@divisor+3)^(0+128)
  4725  0638  0848               	movf	(?___lmul+2)^(0+128),w
  4726  0639  00D4               	movwf	(___aldiv@divisor+2)^(0+128)
  4727  063A  0847               	movf	(?___lmul+1)^(0+128),w
  4728  063B  00D3               	movwf	(___aldiv@divisor+1)^(0+128)
  4729  063C  0846               	movf	?___lmul^(0+128),w
  4730  063D  00D2               	movwf	___aldiv@divisor^(0+128)
  4731  063E  3000               	movlw	0
  4732  063F  00D9               	movwf	(___aldiv@dividend+3)^(0+128)
  4733  0640  300F               	movlw	15
  4734  0641  00D8               	movwf	(___aldiv@dividend+2)^(0+128)
  4735  0642  3042               	movlw	66
  4736  0643  00D7               	movwf	(___aldiv@dividend+1)^(0+128)
  4737  0644  3040               	movlw	64
  4738  0645  00D6               	movwf	___aldiv@dividend^(0+128)
  4739  0646  3182  22C9  3186   	fcall	___aldiv
  4740  0649  0021               	movlb	1	; select bank1
  4741  064A  0853               	movf	(?___aldiv+1)^(0+128),w
  4742  064B  00E5               	movwf	(setFrequency@pr4_val+1)^(0+128)
  4743  064C  0852               	movf	?___aldiv^(0+128),w
  4744  064D  00E4               	movwf	setFrequency@pr4_val^(0+128)
  4745                           
  4746                           ;main.c: 263: if (pr4_val > 255){
  4747  064E  0865               	movf	(setFrequency@pr4_val+1)^(0+128),w
  4748  064F  3A80               	xorlw	128
  4749  0650  00E3               	movwf	??_setFrequency^(0+128)
  4750  0651  3081               	movlw	129
  4751  0652  0263               	subwf	??_setFrequency^(0+128),w
  4752  0653  1D03               	skipz
  4753  0654  2E57               	goto	u2665
  4754  0655  3000               	movlw	0
  4755  0656  0264               	subwf	setFrequency@pr4_val^(0+128),w
  4756  0657                     u2665:
  4757  0657  1C03               	skipc
  4758  0658  2E5E               	goto	l3000
  4759                           
  4760                           ;main.c: 264: pr4_val = 255;
  4761  0659  30FF               	movlw	255
  4762  065A  0021               	movlb	1	; select bank1
  4763  065B  00E4               	movwf	setFrequency@pr4_val^(0+128)
  4764  065C  3000               	movlw	0
  4765  065D  00E5               	movwf	(setFrequency@pr4_val^(0+128)+1)
  4766  065E                     l3000:
  4767                           
  4768                           ;main.c: 265: };main.c: 266: if (pr4_val < 0){
  4769  065E  0021               	movlb	1	; select bank1
  4770  065F  1FE5               	btfss	(setFrequency@pr4_val+1)^(0+128),7
  4771  0660  2E63               	goto	l3004
  4772                           
  4773                           ;main.c: 267: pr4_val = 0;
  4774  0661  01E4               	clrf	setFrequency@pr4_val^(0+128)
  4775  0662  01E5               	clrf	(setFrequency@pr4_val+1)^(0+128)
  4776  0663                     l3004:
  4777                           
  4778                           ;main.c: 268: };main.c: 269: PR4 = pr4_val;
  4779  0663  0864               	movf	setFrequency@pr4_val^(0+128),w
  4780  0664  0028               	movlb	8	; select bank8
  4781  0665  0096               	movwf	22	;volatile
  4782  0666  0008               	return
  4783  0667                     __end_of_setFrequency:
  4784                           
  4785                           	psect	text4
  4786  0169                     __ptext4:	
  4787 ;; *************** function _setCurrent *****************
  4788 ;; Defined at:
  4789 ;;		line 235 in file "main.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  microamps       2   29[BANK1 ] int 
  4792 ;;  Vdd_mv          2   31[BANK1 ] int 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;  DACValue        2   33[BANK1 ] int 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0, pclath, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4804 ;;      Params:         0       0       4       0       0       0       0       0
  4805 ;;      Locals:         0       0       2       0       0       0       0       0
  4806 ;;      Temps:          0       0       0       8       0       0       0       0
  4807 ;;      Totals:         0       0       6       8       0       0       0       0
  4808 ;;Total ram usage:       14 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    6
  4811 ;; This function calls:
  4812 ;;		___aldiv
  4813 ;;		___awdiv
  4814 ;;		___lldiv
  4815 ;;		___lmul
  4816 ;; This function is called by:
  4817 ;;		_process_remote_command
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function _setCurrent
  4823  0169                     _setCurrent:
  4824                           
  4825                           ;main.c: 237: Vdac_mv = Vdd_mv - ((uint32_t)(4700) * microamps + 500) / 1000;
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  4829  0169  3000               	movlw	0
  4830  016A  0021               	movlb	1	; select bank1
  4831  016B  00D5               	movwf	(___lldiv@divisor+3)^(0+128)
  4832  016C  3000               	movlw	0
  4833  016D  00D4               	movwf	(___lldiv@divisor+2)^(0+128)
  4834  016E  3003               	movlw	3
  4835  016F  00D3               	movwf	(___lldiv@divisor+1)^(0+128)
  4836  0170  30E8               	movlw	232
  4837  0171  00D2               	movwf	___lldiv@divisor^(0+128)
  4838  0172  30F4               	movlw	244
  4839  0173  0022               	movlb	2	; select bank2
  4840  0174  00C1               	movwf	??_setCurrent^(0+256)
  4841  0175  3001               	movlw	1
  4842  0176  00C2               	movwf	(??_setCurrent^(0+256)+1)
  4843  0177  3000               	movlw	0
  4844  0178  00C3               	movwf	(??_setCurrent^(0+256)+2)
  4845  0179  3000               	movlw	0
  4846  017A  00C4               	movwf	(??_setCurrent^(0+256)+3)
  4847  017B  0021               	movlb	1	; select bank1
  4848  017C  0863               	movf	setCurrent@microamps^(0+128),w
  4849  017D  00C6               	movwf	___lmul@multiplier^(0+128)
  4850  017E  0864               	movf	(setCurrent@microamps+1)^(0+128),w
  4851  017F  00C7               	movwf	(___lmul@multiplier+1)^(0+128)
  4852  0180  0D89               	rlf	9,f
  4853  0181  3B89               	subwfb	9,f
  4854  0182  0989               	comf	9,f
  4855  0183  00C8               	movwf	(___lmul@multiplier+2)^(0+128)
  4856  0184  00C9               	movwf	(___lmul@multiplier+3)^(0+128)
  4857  0185  3000               	movlw	0
  4858  0186  00CD               	movwf	(___lmul@multiplicand+3)^(0+128)
  4859  0187  3000               	movlw	0
  4860  0188  00CC               	movwf	(___lmul@multiplicand+2)^(0+128)
  4861  0189  3012               	movlw	18
  4862  018A  00CB               	movwf	(___lmul@multiplicand+1)^(0+128)
  4863  018B  305C               	movlw	92
  4864  018C  00CA               	movwf	___lmul@multiplicand^(0+128)
  4865  018D  3187  274C  3181   	fcall	___lmul
  4866  0190  0021               	movlb	1	; select bank1
  4867  0191  0846               	movf	?___lmul^(0+128),w
  4868  0192  0022               	movlb	2	; select bank2
  4869  0193  07C1               	addwf	??_setCurrent^(0+256),f
  4870  0194  0021               	movlb	1	; select bank1
  4871  0195  0847               	movf	(?___lmul+1)^(0+128),w
  4872  0196  0022               	movlb	2	; select bank2
  4873  0197  3DC2               	addwfc	(??_setCurrent^(0+256)+1),f
  4874  0198  0021               	movlb	1	; select bank1
  4875  0199  0848               	movf	(?___lmul+2)^(0+128),w
  4876  019A  0022               	movlb	2	; select bank2
  4877  019B  3DC3               	addwfc	(??_setCurrent^(0+256)+2),f
  4878  019C  0021               	movlb	1	; select bank1
  4879  019D  0849               	movf	(?___lmul+3)^(0+128),w
  4880  019E  0022               	movlb	2	; select bank2
  4881  019F  3DC4               	addwfc	(??_setCurrent^(0+256)+3),f
  4882  01A0  0844               	movf	(??_setCurrent+3)^(0+256),w
  4883  01A1  0021               	movlb	1	; select bank1
  4884  01A2  00D9               	movwf	(___lldiv@dividend+3)^(0+128)
  4885  01A3  0022               	movlb	2	; select bank2
  4886  01A4  0843               	movf	(??_setCurrent+2)^(0+256),w
  4887  01A5  0021               	movlb	1	; select bank1
  4888  01A6  00D8               	movwf	(___lldiv@dividend+2)^(0+128)
  4889  01A7  0022               	movlb	2	; select bank2
  4890  01A8  0842               	movf	(??_setCurrent+1)^(0+256),w
  4891  01A9  0021               	movlb	1	; select bank1
  4892  01AA  00D7               	movwf	(___lldiv@dividend+1)^(0+128)
  4893  01AB  0022               	movlb	2	; select bank2
  4894  01AC  0841               	movf	??_setCurrent^(0+256),w
  4895  01AD  0021               	movlb	1	; select bank1
  4896  01AE  00D6               	movwf	___lldiv@dividend^(0+128)
  4897  01AF  3184  2489  3181   	fcall	___lldiv
  4898  01B2  0021               	movlb	1	; select bank1
  4899  01B3  0852               	movf	?___lldiv^(0+128),w
  4900  01B4  0265               	subwf	setCurrent@Vdd_mv^(0+128),w
  4901  01B5  00EE               	movwf	_Vdac_mv^(0+128)
  4902  01B6  0853               	movf	(?___lldiv+1)^(0+128),w
  4903  01B7  3B66               	subwfb	(setCurrent@Vdd_mv+1)^(0+128),w
  4904  01B8  00EF               	movwf	(_Vdac_mv+1)^(0+128)
  4905                           
  4906                           ;main.c: 238: int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  4907  01B9  0865               	movf	setCurrent@Vdd_mv^(0+128),w
  4908  01BA  00D2               	movwf	___aldiv@divisor^(0+128)
  4909  01BB  0866               	movf	(setCurrent@Vdd_mv+1)^(0+128),w
  4910  01BC  00D3               	movwf	(___aldiv@divisor+1)^(0+128)
  4911  01BD  0D89               	rlf	9,f
  4912  01BE  3B89               	subwfb	9,f
  4913  01BF  0989               	comf	9,f
  4914  01C0  00D4               	movwf	(___aldiv@divisor+2)^(0+128)
  4915  01C1  00D5               	movwf	(___aldiv@divisor+3)^(0+128)
  4916  01C2  3002               	movlw	2
  4917  01C3  00C6               	movwf	___awdiv@divisor^(0+128)
  4918  01C4  3000               	movlw	0
  4919  01C5  00C7               	movwf	(___awdiv@divisor^(0+128)+1)
  4920  01C6  0866               	movf	(setCurrent@Vdd_mv+1)^(0+128),w
  4921  01C7  00C9               	movwf	(___awdiv@dividend+1)^(0+128)
  4922  01C8  0865               	movf	setCurrent@Vdd_mv^(0+128),w
  4923  01C9  00C8               	movwf	___awdiv@dividend^(0+128)
  4924  01CA  3185  252F  3181   	fcall	___awdiv
  4925  01CD  0021               	movlb	1	; select bank1
  4926  01CE  0846               	movf	?___awdiv^(0+128),w
  4927  01CF  0022               	movlb	2	; select bank2
  4928  01D0  00C1               	movwf	??_setCurrent^(0+256)
  4929  01D1  0021               	movlb	1	; select bank1
  4930  01D2  0847               	movf	(?___awdiv+1)^(0+128),w
  4931  01D3  0022               	movlb	2	; select bank2
  4932  01D4  00C2               	movwf	(??_setCurrent^(0+256)+1)
  4933  01D5  3000               	movlw	0
  4934  01D6  1BC2               	btfsc	(??_setCurrent^(0+256)+1),7
  4935  01D7  30FF               	movlw	255
  4936  01D8  00C3               	movwf	(??_setCurrent^(0+256)+2)
  4937  01D9  00C4               	movwf	(??_setCurrent^(0+256)+3)
  4938  01DA  0021               	movlb	1	; select bank1
  4939  01DB  086E               	movf	_Vdac_mv^(0+128),w
  4940  01DC  0022               	movlb	2	; select bank2
  4941  01DD  00C5               	movwf	(??_setCurrent+4)^(0+256)
  4942  01DE  0021               	movlb	1	; select bank1
  4943  01DF  086F               	movf	(_Vdac_mv+1)^(0+128),w
  4944  01E0  0022               	movlb	2	; select bank2
  4945  01E1  00C6               	movwf	((??_setCurrent+4)^(0+256)+1)
  4946  01E2  01C7               	clrf	((??_setCurrent+4)^(0+256)+2)
  4947  01E3  01C8               	clrf	((??_setCurrent+4)^(0+256)+3)
  4948  01E4  3008               	movlw	8
  4949  01E5                     u2635:
  4950  01E5  35C5               	lslf	(??_setCurrent+4)^(0+256),f
  4951  01E6  0DC6               	rlf	((??_setCurrent+4)^(0+256)+1),f
  4952  01E7  0DC7               	rlf	((??_setCurrent+4)^(0+256)+2),f
  4953  01E8  0DC8               	rlf	((??_setCurrent+4)^(0+256)+3),f
  4954  01E9  0B89               	decfsz	9,f
  4955  01EA  29E5               	goto	u2635
  4956  01EB  0845               	movf	(??_setCurrent+4)^(0+256),w
  4957  01EC  07C1               	addwf	??_setCurrent^(0+256),f
  4958  01ED  0846               	movf	(??_setCurrent+5)^(0+256),w
  4959  01EE  3DC2               	addwfc	(??_setCurrent^(0+256)+1),f
  4960  01EF  0847               	movf	(??_setCurrent+6)^(0+256),w
  4961  01F0  3DC3               	addwfc	(??_setCurrent^(0+256)+2),f
  4962  01F1  0848               	movf	(??_setCurrent+7)^(0+256),w
  4963  01F2  3DC4               	addwfc	(??_setCurrent^(0+256)+3),f
  4964  01F3  0844               	movf	(??_setCurrent+3)^(0+256),w
  4965  01F4  0021               	movlb	1	; select bank1
  4966  01F5  00D9               	movwf	(___aldiv@dividend+3)^(0+128)
  4967  01F6  0022               	movlb	2	; select bank2
  4968  01F7  0843               	movf	(??_setCurrent+2)^(0+256),w
  4969  01F8  0021               	movlb	1	; select bank1
  4970  01F9  00D8               	movwf	(___aldiv@dividend+2)^(0+128)
  4971  01FA  0022               	movlb	2	; select bank2
  4972  01FB  0842               	movf	(??_setCurrent+1)^(0+256),w
  4973  01FC  0021               	movlb	1	; select bank1
  4974  01FD  00D7               	movwf	(___aldiv@dividend+1)^(0+128)
  4975  01FE  0022               	movlb	2	; select bank2
  4976  01FF  0841               	movf	??_setCurrent^(0+256),w
  4977  0200  0021               	movlb	1	; select bank1
  4978  0201  00D6               	movwf	___aldiv@dividend^(0+128)
  4979  0202  3182  22C9  3181   	fcall	___aldiv
  4980  0205  0021               	movlb	1	; select bank1
  4981  0206  0853               	movf	(?___aldiv+1)^(0+128),w
  4982  0207  00E8               	movwf	(setCurrent@DACValue+1)^(0+128)
  4983  0208  0852               	movf	?___aldiv^(0+128),w
  4984  0209  00E7               	movwf	setCurrent@DACValue^(0+128)
  4985                           
  4986                           ;main.c: 239: if(DACValue > 255){DACValue = 255;}
  4987  020A  0868               	movf	(setCurrent@DACValue+1)^(0+128),w
  4988  020B  3A80               	xorlw	128
  4989  020C  0022               	movlb	2	; select bank2
  4990  020D  00C1               	movwf	??_setCurrent^(0+256)
  4991  020E  3081               	movlw	129
  4992  020F  0241               	subwf	??_setCurrent^(0+256),w
  4993  0210  1D03               	skipz
  4994  0211  2A15               	goto	u2645
  4995  0212  3000               	movlw	0
  4996  0213  0021               	movlb	1	; select bank1
  4997  0214  0267               	subwf	setCurrent@DACValue^(0+128),w
  4998  0215                     u2645:
  4999  0215  1C03               	skipc
  5000  0216  2A1C               	goto	l2958
  5001  0217  30FF               	movlw	255
  5002  0218  0021               	movlb	1	; select bank1
  5003  0219  00E7               	movwf	setCurrent@DACValue^(0+128)
  5004  021A  3000               	movlw	0
  5005  021B  00E8               	movwf	(setCurrent@DACValue^(0+128)+1)
  5006  021C                     l2958:
  5007                           
  5008                           ;main.c: 240: if(DACValue < 0){DACValue = 0;}
  5009  021C  0021               	movlb	1	; select bank1
  5010  021D  1FE8               	btfss	(setCurrent@DACValue+1)^(0+128),7
  5011  021E  2A21               	goto	l2962
  5012  021F  01E7               	clrf	setCurrent@DACValue^(0+128)
  5013  0220  01E8               	clrf	(setCurrent@DACValue+1)^(0+128)
  5014  0221                     l2962:
  5015                           
  5016                           ;main.c: 241: DAC1CON1 = DACValue;
  5017  0221  0867               	movf	setCurrent@DACValue^(0+128),w
  5018  0222  0022               	movlb	2	; select bank2
  5019  0223  0099               	movwf	25	;volatile
  5020  0224  0008               	return
  5021  0225                     __end_of_setCurrent:
  5022                           
  5023                           	psect	text5
  5024  074C                     __ptext5:	
  5025 ;; *************** function ___lmul *****************
  5026 ;; Defined at:
  5027 ;;		line 15 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/Umul32.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  multiplier      4    0[BANK1 ] unsigned long 
  5030 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  product         4    8[BANK1 ] unsigned long 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  4    0[BANK1 ] unsigned long 
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, status,0
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5042 ;;      Params:         0       0       8       0       0       0       0       0
  5043 ;;      Locals:         0       0       4       0       0       0       0       0
  5044 ;;      Temps:          0       0       0       0       0       0       0       0
  5045 ;;      Totals:         0       0      12       0       0       0       0       0
  5046 ;;Total ram usage:       12 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    5
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		_setCurrent
  5053 ;;		_setFrequency
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           
  5058                           ;psect for function ___lmul
  5059  074C                     ___lmul:
  5060                           
  5061                           ;incstack = 0
  5062                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5063  074C  3000               	movlw	0
  5064  074D  0021               	movlb	1	; select bank1
  5065  074E  00D1               	movwf	(___lmul@product+3)^(0+128)
  5066  074F  3000               	movlw	0
  5067  0750  00D0               	movwf	(___lmul@product+2)^(0+128)
  5068  0751  3000               	movlw	0
  5069  0752  00CF               	movwf	(___lmul@product+1)^(0+128)
  5070  0753  3000               	movlw	0
  5071  0754  00CE               	movwf	___lmul@product^(0+128)
  5072  0755                     l2722:
  5073  0755  1C46               	btfss	___lmul@multiplier^(0+128),0
  5074  0756  2F5F               	goto	l2726
  5075  0757  084A               	movf	___lmul@multiplicand^(0+128),w
  5076  0758  07CE               	addwf	___lmul@product^(0+128),f
  5077  0759  084B               	movf	(___lmul@multiplicand+1)^(0+128),w
  5078  075A  3DCF               	addwfc	(___lmul@product+1)^(0+128),f
  5079  075B  084C               	movf	(___lmul@multiplicand+2)^(0+128),w
  5080  075C  3DD0               	addwfc	(___lmul@product+2)^(0+128),f
  5081  075D  084D               	movf	(___lmul@multiplicand+3)^(0+128),w
  5082  075E  3DD1               	addwfc	(___lmul@product+3)^(0+128),f
  5083  075F                     l2726:
  5084  075F  3001               	movlw	1
  5085  0760                     u2295:
  5086  0760  35CA               	lslf	___lmul@multiplicand^(0+128),f
  5087  0761  0DCB               	rlf	(___lmul@multiplicand+1)^(0+128),f
  5088  0762  0DCC               	rlf	(___lmul@multiplicand+2)^(0+128),f
  5089  0763  0DCD               	rlf	(___lmul@multiplicand+3)^(0+128),f
  5090  0764  0B89               	decfsz	9,f
  5091  0765  2F60               	goto	u2295
  5092  0766  3001               	movlw	1
  5093  0767                     u2305:
  5094  0767  36C9               	lsrf	(___lmul@multiplier+3)^(0+128),f
  5095  0768  0CC8               	rrf	(___lmul@multiplier+2)^(0+128),f
  5096  0769  0CC7               	rrf	(___lmul@multiplier+1)^(0+128),f
  5097  076A  0CC6               	rrf	___lmul@multiplier^(0+128),f
  5098  076B  0B89               	decfsz	9,f
  5099  076C  2F67               	goto	u2305
  5100  076D  0849               	movf	(___lmul@multiplier+3)^(0+128),w
  5101  076E  0448               	iorwf	(___lmul@multiplier+2)^(0+128),w
  5102  076F  0447               	iorwf	(___lmul@multiplier+1)^(0+128),w
  5103  0770  0446               	iorwf	___lmul@multiplier^(0+128),w
  5104  0771  1D03               	skipz
  5105  0772  2F55               	goto	l2722
  5106  0773  0851               	movf	(___lmul@product+3)^(0+128),w
  5107  0774  00C9               	movwf	(?___lmul+3)^(0+128)
  5108  0775  0850               	movf	(___lmul@product+2)^(0+128),w
  5109  0776  00C8               	movwf	(?___lmul+2)^(0+128)
  5110  0777  084F               	movf	(___lmul@product+1)^(0+128),w
  5111  0778  00C7               	movwf	(?___lmul+1)^(0+128)
  5112  0779  084E               	movf	___lmul@product^(0+128),w
  5113  077A  00C6               	movwf	?___lmul^(0+128)
  5114  077B  0008               	return
  5115  077C                     __end_of___lmul:
  5116                           
  5117                           	psect	text6
  5118  0489                     __ptext6:	
  5119 ;; *************** function ___lldiv *****************
  5120 ;; Defined at:
  5121 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/__lldiv.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  divisor         4   12[BANK1 ] unsigned long 
  5124 ;;  dividend        4   16[BANK1 ] unsigned long 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  quotient        4   21[BANK1 ] unsigned long 
  5127 ;;  counter         1   25[BANK1 ] unsigned char 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  4   12[BANK1 ] unsigned long 
  5130 ;; Registers used:
  5131 ;;		wreg, status,2, status,0
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5137 ;;      Params:         0       0       8       0       0       0       0       0
  5138 ;;      Locals:         0       0       5       0       0       0       0       0
  5139 ;;      Temps:          0       0       1       0       0       0       0       0
  5140 ;;      Totals:         0       0      14       0       0       0       0       0
  5141 ;;Total ram usage:       14 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    5
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_setCurrent
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           
  5152                           ;psect for function ___lldiv
  5153  0489                     ___lldiv:
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5157  0489  3000               	movlw	0
  5158  048A  0021               	movlb	1	; select bank1
  5159  048B  00DE               	movwf	(___lldiv@quotient+3)^(0+128)
  5160  048C  3000               	movlw	0
  5161  048D  00DD               	movwf	(___lldiv@quotient+2)^(0+128)
  5162  048E  3000               	movlw	0
  5163  048F  00DC               	movwf	(___lldiv@quotient+1)^(0+128)
  5164  0490  3000               	movlw	0
  5165  0491  00DB               	movwf	___lldiv@quotient^(0+128)
  5166  0492  0855               	movf	(___lldiv@divisor+3)^(0+128),w
  5167  0493  0454               	iorwf	(___lldiv@divisor+2)^(0+128),w
  5168  0494  0453               	iorwf	(___lldiv@divisor+1)^(0+128),w
  5169  0495  0452               	iorwf	___lldiv@divisor^(0+128),w
  5170  0496  1903               	skipnz
  5171  0497  2CD3               	goto	l2754
  5172  0498  01DF               	clrf	___lldiv@counter^(0+128)
  5173  0499  0ADF               	incf	___lldiv@counter^(0+128),f
  5174  049A                     l2740:
  5175  049A  1BD5               	btfsc	(___lldiv@divisor+3)^(0+128),7
  5176  049B  2CA8               	goto	l2742
  5177  049C  3001               	movlw	1
  5178  049D                     u2335:
  5179  049D  35D2               	lslf	___lldiv@divisor^(0+128),f
  5180  049E  0DD3               	rlf	(___lldiv@divisor+1)^(0+128),f
  5181  049F  0DD4               	rlf	(___lldiv@divisor+2)^(0+128),f
  5182  04A0  0DD5               	rlf	(___lldiv@divisor+3)^(0+128),f
  5183  04A1  0B89               	decfsz	9,f
  5184  04A2  2C9D               	goto	u2335
  5185  04A3  3001               	movlw	1
  5186  04A4  00DA               	movwf	??___lldiv^(0+128)
  5187  04A5  085A               	movf	??___lldiv^(0+128),w
  5188  04A6  07DF               	addwf	___lldiv@counter^(0+128),f
  5189  04A7  2C9A               	goto	l2740
  5190  04A8                     l2742:
  5191  04A8  3001               	movlw	1
  5192  04A9                     u2355:
  5193  04A9  35DB               	lslf	___lldiv@quotient^(0+128),f
  5194  04AA  0DDC               	rlf	(___lldiv@quotient+1)^(0+128),f
  5195  04AB  0DDD               	rlf	(___lldiv@quotient+2)^(0+128),f
  5196  04AC  0DDE               	rlf	(___lldiv@quotient+3)^(0+128),f
  5197  04AD  0B89               	decfsz	9,f
  5198  04AE  2CA9               	goto	u2355
  5199  04AF  0855               	movf	(___lldiv@divisor+3)^(0+128),w
  5200  04B0  0259               	subwf	(___lldiv@dividend+3)^(0+128),w
  5201  04B1  1D03               	skipz
  5202  04B2  2CBD               	goto	u2365
  5203  04B3  0854               	movf	(___lldiv@divisor+2)^(0+128),w
  5204  04B4  0258               	subwf	(___lldiv@dividend+2)^(0+128),w
  5205  04B5  1D03               	skipz
  5206  04B6  2CBD               	goto	u2365
  5207  04B7  0853               	movf	(___lldiv@divisor+1)^(0+128),w
  5208  04B8  0257               	subwf	(___lldiv@dividend+1)^(0+128),w
  5209  04B9  1D03               	skipz
  5210  04BA  2CBD               	goto	u2365
  5211  04BB  0852               	movf	___lldiv@divisor^(0+128),w
  5212  04BC  0256               	subwf	___lldiv@dividend^(0+128),w
  5213  04BD                     u2365:
  5214  04BD  1C03               	skipc
  5215  04BE  2CC8               	goto	l2750
  5216  04BF  0852               	movf	___lldiv@divisor^(0+128),w
  5217  04C0  02D6               	subwf	___lldiv@dividend^(0+128),f
  5218  04C1  0853               	movf	(___lldiv@divisor+1)^(0+128),w
  5219  04C2  3BD7               	subwfb	(___lldiv@dividend+1)^(0+128),f
  5220  04C3  0854               	movf	(___lldiv@divisor+2)^(0+128),w
  5221  04C4  3BD8               	subwfb	(___lldiv@dividend+2)^(0+128),f
  5222  04C5  0855               	movf	(___lldiv@divisor+3)^(0+128),w
  5223  04C6  3BD9               	subwfb	(___lldiv@dividend+3)^(0+128),f
  5224  04C7  145B               	bsf	___lldiv@quotient^(0+128),0
  5225  04C8                     l2750:
  5226  04C8  3001               	movlw	1
  5227  04C9                     u2375:
  5228  04C9  36D5               	lsrf	(___lldiv@divisor+3)^(0+128),f
  5229  04CA  0CD4               	rrf	(___lldiv@divisor+2)^(0+128),f
  5230  04CB  0CD3               	rrf	(___lldiv@divisor+1)^(0+128),f
  5231  04CC  0CD2               	rrf	___lldiv@divisor^(0+128),f
  5232  04CD  0B89               	decfsz	9,f
  5233  04CE  2CC9               	goto	u2375
  5234  04CF  3001               	movlw	1
  5235  04D0  02DF               	subwf	___lldiv@counter^(0+128),f
  5236  04D1  1D03               	btfss	3,2
  5237  04D2  2CA8               	goto	l2742
  5238  04D3                     l2754:
  5239  04D3  085E               	movf	(___lldiv@quotient+3)^(0+128),w
  5240  04D4  00D5               	movwf	(?___lldiv+3)^(0+128)
  5241  04D5  085D               	movf	(___lldiv@quotient+2)^(0+128),w
  5242  04D6  00D4               	movwf	(?___lldiv+2)^(0+128)
  5243  04D7  085C               	movf	(___lldiv@quotient+1)^(0+128),w
  5244  04D8  00D3               	movwf	(?___lldiv+1)^(0+128)
  5245  04D9  085B               	movf	___lldiv@quotient^(0+128),w
  5246  04DA  00D2               	movwf	?___lldiv^(0+128)
  5247  04DB  0008               	return
  5248  04DC                     __end_of___lldiv:
  5249                           
  5250                           	psect	text7
  5251  052F                     __ptext7:	
  5252 ;; *************** function ___awdiv *****************
  5253 ;; Defined at:
  5254 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/awdiv.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;  divisor         2    0[BANK1 ] int 
  5257 ;;  dividend        2    2[BANK1 ] int 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  quotient        2    7[BANK1 ] int 
  5260 ;;  sign            1    6[BANK1 ] unsigned char 
  5261 ;;  counter         1    5[BANK1 ] unsigned char 
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  2    0[BANK1 ] int 
  5264 ;; Registers used:
  5265 ;;		wreg, status,2, status,0
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5271 ;;      Params:         0       0       4       0       0       0       0       0
  5272 ;;      Locals:         0       0       4       0       0       0       0       0
  5273 ;;      Temps:          0       0       1       0       0       0       0       0
  5274 ;;      Totals:         0       0       9       0       0       0       0       0
  5275 ;;Total ram usage:        9 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    5
  5278 ;; This function calls:
  5279 ;;		Nothing
  5280 ;; This function is called by:
  5281 ;;		_setCurrent
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function ___awdiv
  5287  052F                     ___awdiv:
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5291  052F  0021               	movlb	1	; select bank1
  5292  0530  01CC               	clrf	___awdiv@sign^(0+128)
  5293  0531  1FC7               	btfss	(___awdiv@divisor+1)^(0+128),7
  5294  0532  2D3A               	goto	l2806
  5295  0533  09C6               	comf	___awdiv@divisor^(0+128),f
  5296  0534  09C7               	comf	(___awdiv@divisor+1)^(0+128),f
  5297  0535  0AC6               	incf	___awdiv@divisor^(0+128),f
  5298  0536  1903               	skipnz
  5299  0537  0AC7               	incf	(___awdiv@divisor+1)^(0+128),f
  5300  0538  01CC               	clrf	___awdiv@sign^(0+128)
  5301  0539  0ACC               	incf	___awdiv@sign^(0+128),f
  5302  053A                     l2806:
  5303  053A  1FC9               	btfss	(___awdiv@dividend+1)^(0+128),7
  5304  053B  2D45               	goto	l2812
  5305  053C  09C8               	comf	___awdiv@dividend^(0+128),f
  5306  053D  09C9               	comf	(___awdiv@dividend+1)^(0+128),f
  5307  053E  0AC8               	incf	___awdiv@dividend^(0+128),f
  5308  053F  1903               	skipnz
  5309  0540  0AC9               	incf	(___awdiv@dividend+1)^(0+128),f
  5310  0541  3001               	movlw	1
  5311  0542  00CA               	movwf	??___awdiv^(0+128)
  5312  0543  084A               	movf	??___awdiv^(0+128),w
  5313  0544  06CC               	xorwf	___awdiv@sign^(0+128),f
  5314  0545                     l2812:
  5315  0545  01CD               	clrf	___awdiv@quotient^(0+128)
  5316  0546  01CE               	clrf	(___awdiv@quotient+1)^(0+128)
  5317  0547  0846               	movf	___awdiv@divisor^(0+128),w
  5318  0548  0447               	iorwf	(___awdiv@divisor+1)^(0+128),w
  5319  0549  1903               	btfsc	3,2
  5320  054A  2D74               	goto	l2834
  5321  054B  01CB               	clrf	___awdiv@counter^(0+128)
  5322  054C  0ACB               	incf	___awdiv@counter^(0+128),f
  5323  054D                     l2822:
  5324  054D  1BC7               	btfsc	(___awdiv@divisor+1)^(0+128),7
  5325  054E  2D59               	goto	l2824
  5326  054F  3001               	movlw	1
  5327  0550                     u2525:
  5328  0550  35C6               	lslf	___awdiv@divisor^(0+128),f
  5329  0551  0DC7               	rlf	(___awdiv@divisor+1)^(0+128),f
  5330  0552  0B89               	decfsz	9,f
  5331  0553  2D50               	goto	u2525
  5332  0554  3001               	movlw	1
  5333  0555  00CA               	movwf	??___awdiv^(0+128)
  5334  0556  084A               	movf	??___awdiv^(0+128),w
  5335  0557  07CB               	addwf	___awdiv@counter^(0+128),f
  5336  0558  2D4D               	goto	l2822
  5337  0559                     l2824:
  5338  0559  3001               	movlw	1
  5339  055A                     u2545:
  5340  055A  35CD               	lslf	___awdiv@quotient^(0+128),f
  5341  055B  0DCE               	rlf	(___awdiv@quotient+1)^(0+128),f
  5342  055C  0B89               	decfsz	9,f
  5343  055D  2D5A               	goto	u2545
  5344  055E  0847               	movf	(___awdiv@divisor+1)^(0+128),w
  5345  055F  0249               	subwf	(___awdiv@dividend+1)^(0+128),w
  5346  0560  1D03               	skipz
  5347  0561  2D64               	goto	u2555
  5348  0562  0846               	movf	___awdiv@divisor^(0+128),w
  5349  0563  0248               	subwf	___awdiv@dividend^(0+128),w
  5350  0564                     u2555:
  5351  0564  1C03               	skipc
  5352  0565  2D6B               	goto	l2830
  5353  0566  0846               	movf	___awdiv@divisor^(0+128),w
  5354  0567  02C8               	subwf	___awdiv@dividend^(0+128),f
  5355  0568  0847               	movf	(___awdiv@divisor+1)^(0+128),w
  5356  0569  3BC9               	subwfb	(___awdiv@dividend+1)^(0+128),f
  5357  056A  144D               	bsf	___awdiv@quotient^(0+128),0
  5358  056B                     l2830:
  5359  056B  3001               	movlw	1
  5360  056C                     u2565:
  5361  056C  36C7               	lsrf	(___awdiv@divisor+1)^(0+128),f
  5362  056D  0CC6               	rrf	___awdiv@divisor^(0+128),f
  5363  056E  0B89               	decfsz	9,f
  5364  056F  2D6C               	goto	u2565
  5365  0570  3001               	movlw	1
  5366  0571  02CB               	subwf	___awdiv@counter^(0+128),f
  5367  0572  1D03               	btfss	3,2
  5368  0573  2D59               	goto	l2824
  5369  0574                     l2834:
  5370  0574  084C               	movf	___awdiv@sign^(0+128),w
  5371  0575  1903               	btfsc	3,2
  5372  0576  2D7C               	goto	l2838
  5373  0577  09CD               	comf	___awdiv@quotient^(0+128),f
  5374  0578  09CE               	comf	(___awdiv@quotient+1)^(0+128),f
  5375  0579  0ACD               	incf	___awdiv@quotient^(0+128),f
  5376  057A  1903               	skipnz
  5377  057B  0ACE               	incf	(___awdiv@quotient+1)^(0+128),f
  5378  057C                     l2838:
  5379  057C  084E               	movf	(___awdiv@quotient+1)^(0+128),w
  5380  057D  00C7               	movwf	(?___awdiv+1)^(0+128)
  5381  057E  084D               	movf	___awdiv@quotient^(0+128),w
  5382  057F  00C6               	movwf	?___awdiv^(0+128)
  5383  0580  0008               	return
  5384  0581                     __end_of___awdiv:
  5385                           
  5386                           	psect	text8
  5387  0581                     __ptext8:	
  5388 ;; *************** function _selectSomething *****************
  5389 ;; Defined at:
  5390 ;;		line 197 in file "main.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;		None
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;		None
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  1    wreg      void 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0, pclath, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5404 ;;      Params:         0       0       0       0       0       0       0       0
  5405 ;;      Locals:         0       0       0       0       0       0       0       0
  5406 ;;      Temps:          0       0       2       0       0       0       0       0
  5407 ;;      Totals:         0       0       2       0       0       0       0       0
  5408 ;;Total ram usage:        2 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    6
  5411 ;; This function calls:
  5412 ;;		_setLEDColor
  5413 ;; This function is called by:
  5414 ;;		_process_remote_command
  5415 ;; This function uses a non-reentrant model
  5416 ;;
  5417                           
  5418                           
  5419                           ;psect for function _selectSomething
  5420  0581                     _selectSomething:
  5421                           
  5422                           ;main.c: 199: setLEDColor(255, 0, 0);
  5423                           
  5424                           ;incstack = 0
  5425                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  5426  0581  0021               	movlb	1	; select bank1
  5427  0582  01C6               	clrf	setLEDColor@green^(0+128)
  5428  0583  01C7               	clrf	setLEDColor@blue^(0+128)
  5429  0584  30FF               	movlw	255
  5430  0585  318E  26DD  3185   	fcall	_setLEDColor
  5431                           
  5432                           ;main.c: 200: _delay((unsigned long)((500)*(4000000/4000.0)));
  5433  0588  3003               	movlw	3
  5434  0589  0021               	movlb	1	; select bank1
  5435  058A  00CB               	movwf	(??_selectSomething^(0+128)+1)
  5436  058B  308A               	movlw	138
  5437  058C  00CA               	movwf	??_selectSomething^(0+128)
  5438  058D  3055               	movlw	85
  5439  058E                     u2957:
  5440  058E  0B89               	decfsz	9,f
  5441  058F  2D8E               	goto	u2957
  5442  0590  0BCA               	decfsz	??_selectSomething^(0+128),f
  5443  0591  2D8E               	goto	u2957
  5444  0592  0BCB               	decfsz	(??_selectSomething^(0+128)+1),f
  5445  0593  2D8E               	goto	u2957
  5446  0594  3200               	nop2
  5447                           
  5448                           ;main.c: 201: setLEDColor(0, 0, 0);
  5449  0595  0021               	movlb	1	; select bank1
  5450  0596  01C6               	clrf	setLEDColor@green^(0+128)
  5451  0597  01C7               	clrf	setLEDColor@blue^(0+128)
  5452  0598  3000               	movlw	0
  5453  0599  318E  26DD  3185   	fcall	_setLEDColor
  5454                           
  5455                           ;main.c: 202: _delay((unsigned long)((500)*(4000000/4000.0)));
  5456  059C  3003               	movlw	3
  5457  059D  0021               	movlb	1	; select bank1
  5458  059E  00CB               	movwf	(??_selectSomething^(0+128)+1)
  5459  059F  308A               	movlw	138
  5460  05A0  00CA               	movwf	??_selectSomething^(0+128)
  5461  05A1  3055               	movlw	85
  5462  05A2                     u2967:
  5463  05A2  0B89               	decfsz	9,f
  5464  05A3  2DA2               	goto	u2967
  5465  05A4  0BCA               	decfsz	??_selectSomething^(0+128),f
  5466  05A5  2DA2               	goto	u2967
  5467  05A6  0BCB               	decfsz	(??_selectSomething^(0+128)+1),f
  5468  05A7  2DA2               	goto	u2967
  5469  05A8  3200               	nop2
  5470                           
  5471                           ;main.c: 203: setLEDColor(255, 0, 0);
  5472  05A9  0021               	movlb	1	; select bank1
  5473  05AA  01C6               	clrf	setLEDColor@green^(0+128)
  5474  05AB  01C7               	clrf	setLEDColor@blue^(0+128)
  5475  05AC  30FF               	movlw	255
  5476  05AD  318E  26DD  3185   	fcall	_setLEDColor
  5477                           
  5478                           ;main.c: 204: _delay((unsigned long)((500)*(4000000/4000.0)));
  5479  05B0  3003               	movlw	3
  5480  05B1  0021               	movlb	1	; select bank1
  5481  05B2  00CB               	movwf	(??_selectSomething^(0+128)+1)
  5482  05B3  308A               	movlw	138
  5483  05B4  00CA               	movwf	??_selectSomething^(0+128)
  5484  05B5  3055               	movlw	85
  5485  05B6                     u2977:
  5486  05B6  0B89               	decfsz	9,f
  5487  05B7  2DB6               	goto	u2977
  5488  05B8  0BCA               	decfsz	??_selectSomething^(0+128),f
  5489  05B9  2DB6               	goto	u2977
  5490  05BA  0BCB               	decfsz	(??_selectSomething^(0+128)+1),f
  5491  05BB  2DB6               	goto	u2977
  5492  05BC  3200               	nop2
  5493                           
  5494                           ;main.c: 205: setLEDColor(0, 0, 0);
  5495  05BD  0021               	movlb	1	; select bank1
  5496  05BE  01C6               	clrf	setLEDColor@green^(0+128)
  5497  05BF  01C7               	clrf	setLEDColor@blue^(0+128)
  5498  05C0  3000               	movlw	0
  5499  05C1  318E  26DD  3185   	fcall	_setLEDColor
  5500                           
  5501                           ;main.c: 206: _delay((unsigned long)((500)*(4000000/4000.0)));
  5502  05C4  3003               	movlw	3
  5503  05C5  0021               	movlb	1	; select bank1
  5504  05C6  00CB               	movwf	(??_selectSomething^(0+128)+1)
  5505  05C7  308A               	movlw	138
  5506  05C8  00CA               	movwf	??_selectSomething^(0+128)
  5507  05C9  3055               	movlw	85
  5508  05CA                     u2987:
  5509  05CA  0B89               	decfsz	9,f
  5510  05CB  2DCA               	goto	u2987
  5511  05CC  0BCA               	decfsz	??_selectSomething^(0+128),f
  5512  05CD  2DCA               	goto	u2987
  5513  05CE  0BCB               	decfsz	(??_selectSomething^(0+128)+1),f
  5514  05CF  2DCA               	goto	u2987
  5515  05D0  3200               	nop2
  5516  05D1  0008               	return
  5517  05D2                     __end_of_selectSomething:
  5518                           
  5519                           	psect	text9
  5520  0F7E                     __ptext9:	
  5521 ;; *************** function _selectFrequency *****************
  5522 ;; Defined at:
  5523 ;;		line 209 in file "main.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;		None
  5526 ;; Auto vars:     Size  Location     Type
  5527 ;;		None
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  1    wreg      void 
  5530 ;; Registers used:
  5531 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5537 ;;      Params:         0       0       0       0       0       0       0       0
  5538 ;;      Locals:         0       0       0       0       0       0       0       0
  5539 ;;      Temps:          0       0       2       0       0       0       0       0
  5540 ;;      Totals:         0       0       2       0       0       0       0       0
  5541 ;;Total ram usage:        2 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; Hardware stack levels required when called:    8
  5544 ;; This function calls:
  5545 ;;		_printf
  5546 ;;		_setLEDColor
  5547 ;; This function is called by:
  5548 ;;		_process_remote_command
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           
  5553                           ;psect for function _selectFrequency
  5554  0F7E                     _selectFrequency:
  5555                           
  5556                           ;main.c: 210: interfaceState = STATE_FREQUENCY;
  5557                           
  5558                           ;incstack = 0
  5559                           ; Regs used in _selectFrequency: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5560  0F7E  3002               	movlw	2
  5561  0F7F  0021               	movlb	1	; select bank1
  5562  0F80  00CF               	movwf	??_selectFrequency^(0+128)
  5563  0F81  084F               	movf	??_selectFrequency^(0+128),w
  5564  0F82  00E9               	movwf	_interfaceState^(0+128)
  5565                           
  5566                           ;main.c: 211: setLEDColor(255, 0, 255);
  5567  0F83  01C6               	clrf	setLEDColor@green^(0+128)
  5568  0F84  30FF               	movlw	255
  5569  0F85  00CF               	movwf	??_selectFrequency^(0+128)
  5570  0F86  084F               	movf	??_selectFrequency^(0+128),w
  5571  0F87  00C7               	movwf	setLEDColor@blue^(0+128)
  5572  0F88  30FF               	movlw	255
  5573  0F89  318E  26DD  318F   	fcall	_setLEDColor
  5574                           
  5575                           ;main.c: 212: _delay((unsigned long)((1000)*(4000000/4000.0)));
  5576  0F8C  3006               	movlw	6
  5577  0F8D  0021               	movlb	1	; select bank1
  5578  0F8E  00D0               	movwf	(??_selectFrequency^(0+128)+1)
  5579  0F8F  3013               	movlw	19
  5580  0F90  00CF               	movwf	??_selectFrequency^(0+128)
  5581  0F91  30AD               	movlw	173
  5582  0F92                     u2997:
  5583  0F92  0B89               	decfsz	9,f
  5584  0F93  2F92               	goto	u2997
  5585  0F94  0BCF               	decfsz	??_selectFrequency^(0+128),f
  5586  0F95  2F92               	goto	u2997
  5587  0F96  0BD0               	decfsz	(??_selectFrequency^(0+128)+1),f
  5588  0F97  2F92               	goto	u2997
  5589  0F98  3200               	nop2
  5590                           
  5591                           ;main.c: 213: setLEDColor(0, 0, 0);
  5592  0F99  0021               	movlb	1	; select bank1
  5593  0F9A  01C6               	clrf	setLEDColor@green^(0+128)
  5594  0F9B  01C7               	clrf	setLEDColor@blue^(0+128)
  5595  0F9C  3000               	movlw	0
  5596  0F9D  318E  26DD  318F   	fcall	_setLEDColor
  5597                           
  5598                           ;main.c: 214: printf("\n Frequency selected");
  5599  0FA0  30FF               	movlw	low (STR_1| (0+32768))
  5600  0FA1  0021               	movlb	1	; select bank1
  5601  0FA2  00C8               	movwf	printf@f^(0+128)
  5602  0FA3  3087               	movlw	high (STR_1| (0+32768))
  5603  0FA4  00C9               	movwf	(printf@f^(0+128)+1)
  5604  0FA5  318E  26F4         	fcall	_printf
  5605  0FA7  0008               	return
  5606  0FA8                     __end_of_selectFrequency:
  5607                           
  5608                           	psect	text10
  5609  0F56                     __ptext10:	
  5610 ;; *************** function _selectCurrent *****************
  5611 ;; Defined at:
  5612 ;;		line 217 in file "main.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;		None
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;		None
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  1    wreg      void 
  5619 ;; Registers used:
  5620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5626 ;;      Params:         0       0       0       0       0       0       0       0
  5627 ;;      Locals:         0       0       0       0       0       0       0       0
  5628 ;;      Temps:          0       0       2       0       0       0       0       0
  5629 ;;      Totals:         0       0       2       0       0       0       0       0
  5630 ;;Total ram usage:        2 bytes
  5631 ;; Hardware stack levels used:    1
  5632 ;; Hardware stack levels required when called:    8
  5633 ;; This function calls:
  5634 ;;		_printf
  5635 ;;		_setLEDColor
  5636 ;; This function is called by:
  5637 ;;		_process_remote_command
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           
  5642                           ;psect for function _selectCurrent
  5643  0F56                     _selectCurrent:
  5644                           
  5645                           ;main.c: 218: interfaceState = STATE_CURRENT;
  5646                           
  5647                           ;incstack = 0
  5648                           ; Regs used in _selectCurrent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5649  0F56  0021               	movlb	1	; select bank1
  5650  0F57  01E9               	clrf	_interfaceState^(0+128)
  5651  0F58  0AE9               	incf	_interfaceState^(0+128),f
  5652                           
  5653                           ;main.c: 219: setLEDColor(0, 0, 255);
  5654  0F59  01C6               	clrf	setLEDColor@green^(0+128)
  5655  0F5A  30FF               	movlw	255
  5656  0F5B  00CF               	movwf	??_selectCurrent^(0+128)
  5657  0F5C  084F               	movf	??_selectCurrent^(0+128),w
  5658  0F5D  00C7               	movwf	setLEDColor@blue^(0+128)
  5659  0F5E  3000               	movlw	0
  5660  0F5F  318E  26DD  318F   	fcall	_setLEDColor
  5661                           
  5662                           ;main.c: 220: _delay((unsigned long)((1000)*(4000000/4000.0)));
  5663  0F62  3006               	movlw	6
  5664  0F63  0021               	movlb	1	; select bank1
  5665  0F64  00D0               	movwf	(??_selectCurrent^(0+128)+1)
  5666  0F65  3013               	movlw	19
  5667  0F66  00CF               	movwf	??_selectCurrent^(0+128)
  5668  0F67  30AD               	movlw	173
  5669  0F68                     u3007:
  5670  0F68  0B89               	decfsz	9,f
  5671  0F69  2F68               	goto	u3007
  5672  0F6A  0BCF               	decfsz	??_selectCurrent^(0+128),f
  5673  0F6B  2F68               	goto	u3007
  5674  0F6C  0BD0               	decfsz	(??_selectCurrent^(0+128)+1),f
  5675  0F6D  2F68               	goto	u3007
  5676  0F6E  3200               	nop2
  5677                           
  5678                           ;main.c: 221: setLEDColor(0, 0, 0);
  5679  0F6F  0021               	movlb	1	; select bank1
  5680  0F70  01C6               	clrf	setLEDColor@green^(0+128)
  5681  0F71  01C7               	clrf	setLEDColor@blue^(0+128)
  5682  0F72  3000               	movlw	0
  5683  0F73  318E  26DD  318F   	fcall	_setLEDColor
  5684                           
  5685                           ;main.c: 222: printf("\n current selected");
  5686  0F76  3014               	movlw	low (STR_2| (0+32768))
  5687  0F77  0021               	movlb	1	; select bank1
  5688  0F78  00C8               	movwf	printf@f^(0+128)
  5689  0F79  3088               	movlw	high (STR_2| (0+32768))
  5690  0F7A  00C9               	movwf	(printf@f^(0+128)+1)
  5691  0F7B  318E  26F4         	fcall	_printf
  5692  0F7D  0008               	return
  5693  0F7E                     __end_of_selectCurrent:
  5694                           
  5695                           	psect	text11
  5696  0EF4                     __ptext11:	
  5697 ;; *************** function _printf *****************
  5698 ;; Defined at:
  5699 ;;		line 477 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/doprnt.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;  f               2    2[BANK1 ] PTR const unsigned char 
  5702 ;;		 -> STR_3(15), STR_2(19), STR_1(21), 
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;  tmpval          4    0        struct .
  5705 ;;  cp              2    0        PTR const unsigned char 
  5706 ;;  len             2    0        unsigned int 
  5707 ;;  val             2    0        unsigned int 
  5708 ;;  c               1    8[BANK1 ] unsigned char 
  5709 ;;  ap              1    7[BANK1 ] PTR void [1]
  5710 ;;		 -> ?_printf(2), 
  5711 ;;  flag            1    0        unsigned char 
  5712 ;;  prec            1    0        char 
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  2    2[BANK1 ] int 
  5715 ;; Registers used:
  5716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5722 ;;      Params:         0       0       2       0       0       0       0       0
  5723 ;;      Locals:         0       0       2       0       0       0       0       0
  5724 ;;      Temps:          0       0       3       0       0       0       0       0
  5725 ;;      Totals:         0       0       7       0       0       0       0       0
  5726 ;;Total ram usage:        7 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; Hardware stack levels required when called:    7
  5729 ;; This function calls:
  5730 ;;		_putch
  5731 ;; This function is called by:
  5732 ;;		_selectFrequency
  5733 ;;		_selectCurrent
  5734 ;;		_process_remote_command
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           
  5739                           ;psect for function _printf
  5740  0EF4                     _printf:
  5741                           
  5742                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
  5743                           
  5744                           ;incstack = 0
  5745                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5746  0EF4  30CA               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5747  0EF5  0021               	movlb	1	; select bank1
  5748  0EF6  00CA               	movwf	??_printf^(0+128)
  5749  0EF7  084A               	movf	??_printf^(0+128),w
  5750  0EF8  00CD               	movwf	printf@ap^(0+128)
  5751  0EF9                     l2718:	
  5752                           ;doprnt.c: 559: continue;
  5753                           
  5754                           ;doprnt.c: 553: while((c = *f++)) {
  5755                           
  5756  0EF9  0021               	movlb	1	; select bank1
  5757  0EFA  0849               	movf	(printf@f+1)^(0+128),w
  5758  0EFB  00CB               	movwf	(??_printf^(0+128)+1)
  5759  0EFC  0848               	movf	printf@f^(0+128),w
  5760  0EFD  00CA               	movwf	??_printf^(0+128)
  5761  0EFE  0AC8               	incf	printf@f^(0+128),f
  5762  0EFF  1903               	skipnz
  5763  0F00  0AC9               	incf	(printf@f+1)^(0+128),f
  5764  0F01  084A               	movf	??_printf^(0+128),w
  5765  0F02  0084               	movwf	4
  5766  0F03  084B               	movf	(??_printf+1)^(0+128),w
  5767  0F04  0085               	movwf	5
  5768  0F05  0800               	movf	0,w	;code access
  5769  0F06  00CC               	movwf	(??_printf+2)^(0+128)
  5770  0F07  084C               	movf	(??_printf+2)^(0+128),w
  5771  0F08  00CE               	movwf	printf@c^(0+128)
  5772  0F09  084E               	movf	printf@c^(0+128),w
  5773  0F0A  1903               	btfsc	3,2
  5774  0F0B  0008               	return
  5775                           
  5776                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
  5777  0F0C  084E               	movf	printf@c^(0+128),w
  5778  0F0D  318E  2646  318E   	fcall	_putch
  5779  0F10  2EF9               	goto	l2718
  5780  0F11                     __end_of_printf:
  5781                           
  5782                           	psect	text12
  5783  0E46                     __ptext12:	
  5784 ;; *************** function _putch *****************
  5785 ;; Defined at:
  5786 ;;		line 146 in file "mcc_generated_files/eusart.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;  txData          1    wreg     unsigned char 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;  txData          1    1[BANK1 ] unsigned char 
  5791 ;; Return value:  Size  Location     Type
  5792 ;;                  1    wreg      void 
  5793 ;; Registers used:
  5794 ;;		wreg, status,2, status,0, pclath, cstack
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5800 ;;      Params:         0       0       0       0       0       0       0       0
  5801 ;;      Locals:         0       0       1       0       0       0       0       0
  5802 ;;      Temps:          0       0       0       0       0       0       0       0
  5803 ;;      Totals:         0       0       1       0       0       0       0       0
  5804 ;;Total ram usage:        1 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; Hardware stack levels required when called:    6
  5807 ;; This function calls:
  5808 ;;		_EUSART_Write
  5809 ;; This function is called by:
  5810 ;;		_printf
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           
  5815                           ;psect for function _putch
  5816  0E46                     _putch:
  5817                           
  5818                           ;incstack = 0
  5819                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  5820                           ;putch@txData stored from wreg
  5821  0E46  0021               	movlb	1	; select bank1
  5822  0E47  00C7               	movwf	putch@txData^(0+128)
  5823                           
  5824                           ;eusart.c: 148: EUSART_Write(txData);
  5825  0E48  0847               	movf	putch@txData^(0+128),w
  5826  0E49  318E  269F         	fcall	_EUSART_Write
  5827  0E4B  0008               	return
  5828  0E4C                     __end_of_putch:
  5829                           
  5830                           	psect	text13
  5831  0E9F                     __ptext13:	
  5832 ;; *************** function _EUSART_Write *****************
  5833 ;; Defined at:
  5834 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  txData          1    wreg     unsigned char 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  txData          1    0[BANK1 ] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5848 ;;      Params:         0       0       0       0       0       0       0       0
  5849 ;;      Locals:         0       0       1       0       0       0       0       0
  5850 ;;      Temps:          0       0       0       0       0       0       0       0
  5851 ;;      Totals:         0       0       1       0       0       0       0       0
  5852 ;;Total ram usage:        1 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    5
  5855 ;; This function calls:
  5856 ;;		Nothing
  5857 ;; This function is called by:
  5858 ;;		_putch
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function _EUSART_Write
  5864  0E9F                     _EUSART_Write:
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _EUSART_Write: [wreg]
  5868                           ;EUSART_Write@txData stored from wreg
  5869  0E9F  0021               	movlb	1	; select bank1
  5870  0EA0  00C6               	movwf	EUSART_Write@txData^(0+128)
  5871  0EA1                     l209:	
  5872                           ;eusart.c: 135: {
  5873                           
  5874  0EA1  0020               	movlb	0	; select bank0
  5875  0EA2  1E11               	btfss	17,4	;volatile
  5876  0EA3  2EA1               	goto	l209
  5877                           
  5878                           ;eusart.c: 136: };eusart.c: 138: TX1REG = txData;
  5879  0EA4  0021               	movlb	1	; select bank1
  5880  0EA5  0846               	movf	EUSART_Write@txData^(0+128),w
  5881  0EA6  0023               	movlb	3	; select bank3
  5882  0EA7  009A               	movwf	26	;volatile
  5883  0EA8  0008               	return
  5884  0EA9                     __end_of_EUSART_Write:
  5885                           
  5886                           	psect	text14
  5887  0FA8                     __ptext14:	
  5888 ;; *************** function _battery_voltage *****************
  5889 ;; Defined at:
  5890 ;;		line 91 in file "main.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;		None
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  2   27[BANK1 ] unsigned int 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0, pclath, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5904 ;;      Params:         0       0       2       0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0
  5907 ;;      Totals:         0       0       2       0       0       0       0       0
  5908 ;;Total ram usage:        2 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    6
  5911 ;; This function calls:
  5912 ;;		___aldiv
  5913 ;; This function is called by:
  5914 ;;		_process_remote_command
  5915 ;;		_main
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           
  5920                           ;psect for function _battery_voltage
  5921  0FA8                     _battery_voltage:
  5922                           
  5923                           ;main.c: 93: FVRCON = 0b10000001;
  5924                           
  5925                           ;incstack = 0
  5926                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  5927  0FA8  3081               	movlw	129
  5928  0FA9  0022               	movlb	2	; select bank2
  5929  0FAA  0097               	movwf	23	;volatile
  5930                           
  5931                           ;main.c: 94: ADCON0 = 0b01111101;
  5932  0FAB  307D               	movlw	125
  5933  0FAC  0021               	movlb	1	; select bank1
  5934  0FAD  009D               	movwf	29	;volatile
  5935                           
  5936                           ;main.c: 95: ADCON1 = 0b10010000;
  5937  0FAE  3090               	movlw	144
  5938  0FAF  009E               	movwf	30	;volatile
  5939  0FB0                     l510:	
  5940                           ;main.c: 96: while(!FVRCONbits.FVRRDY){ }
  5941                           
  5942  0FB0  0022               	movlb	2	; select bank2
  5943  0FB1  1F17               	btfss	23,6	;volatile
  5944  0FB2  2FB0               	goto	l510
  5945                           
  5946                           ;main.c: 97: __nop();
  5947  0FB3  0000               	nop
  5948                           
  5949                           ;main.c: 98: __nop();
  5950  0FB4  0000               	nop
  5951                           
  5952                           ;main.c: 99: __nop();
  5953  0FB5  0000               	nop
  5954                           
  5955                           ;main.c: 100: __nop();
  5956  0FB6  0000               	nop
  5957                           
  5958                           ;main.c: 101: __nop();
  5959  0FB7  0000               	nop
  5960                           
  5961                           ;main.c: 102: ADCON0bits.GO_nDONE = 1;
  5962  0FB8  0021               	movlb	1	; select bank1
  5963  0FB9  149D               	bsf	29,1	;volatile
  5964  0FBA                     l513:	
  5965                           ;main.c: 103: while(ADCON0bits.GO_nDONE){ }
  5966                           
  5967  0FBA  189D               	btfsc	29,1	;volatile
  5968  0FBB  2FBA               	goto	l513
  5969                           
  5970                           ;main.c: 104: ADCON0bits.ADON = 0;
  5971  0FBC  101D               	bcf	29,0	;volatile
  5972                           
  5973                           ;main.c: 109: return 1047552L / ADRES;
  5974  0FBD  081B               	movf	27,w	;volatile
  5975  0FBE  00D2               	movwf	___aldiv@divisor^(0+128)
  5976  0FBF  081C               	movf	28,w	;volatile
  5977  0FC0  00D3               	movwf	(___aldiv@divisor^(0+128)+1)
  5978  0FC1  01D4               	clrf	(___aldiv@divisor^(0+128)+2)
  5979  0FC2  01D5               	clrf	(___aldiv@divisor^(0+128)+3)
  5980  0FC3  3000               	movlw	0
  5981  0FC4  00D9               	movwf	(___aldiv@dividend+3)^(0+128)
  5982  0FC5  300F               	movlw	15
  5983  0FC6  00D8               	movwf	(___aldiv@dividend+2)^(0+128)
  5984  0FC7  30FC               	movlw	252
  5985  0FC8  00D7               	movwf	(___aldiv@dividend+1)^(0+128)
  5986  0FC9  3000               	movlw	0
  5987  0FCA  00D6               	movwf	___aldiv@dividend^(0+128)
  5988  0FCB  3182  22C9         	fcall	___aldiv
  5989  0FCD  0021               	movlb	1	; select bank1
  5990  0FCE  0853               	movf	(?___aldiv+1)^(0+128),w
  5991  0FCF  00E2               	movwf	(?_battery_voltage+1)^(0+128)
  5992  0FD0  0852               	movf	?___aldiv^(0+128),w
  5993  0FD1  00E1               	movwf	?_battery_voltage^(0+128)
  5994  0FD2  0008               	return
  5995  0FD3                     __end_of_battery_voltage:
  5996                           
  5997                           	psect	text15
  5998  02C9                     __ptext15:	
  5999 ;; *************** function ___aldiv *****************
  6000 ;; Defined at:
  6001 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/aldiv.c"
  6002 ;; Parameters:    Size  Location     Type
  6003 ;;  divisor         4   12[BANK1 ] long 
  6004 ;;  dividend        4   16[BANK1 ] long 
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;  quotient        4   23[BANK1 ] long 
  6007 ;;  sign            1   22[BANK1 ] unsigned char 
  6008 ;;  counter         1   21[BANK1 ] unsigned char 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  4   12[BANK1 ] long 
  6011 ;; Registers used:
  6012 ;;		wreg, status,2, status,0
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6018 ;;      Params:         0       0       8       0       0       0       0       0
  6019 ;;      Locals:         0       0       6       0       0       0       0       0
  6020 ;;      Temps:          0       0       1       0       0       0       0       0
  6021 ;;      Totals:         0       0      15       0       0       0       0       0
  6022 ;;Total ram usage:       15 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    5
  6025 ;; This function calls:
  6026 ;;		Nothing
  6027 ;; This function is called by:
  6028 ;;		_battery_voltage
  6029 ;;		_setCurrent
  6030 ;;		_setFrequency
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           
  6035                           ;psect for function ___aldiv
  6036  02C9                     ___aldiv:
  6037                           
  6038                           ;incstack = 0
  6039                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6040  02C9  0021               	movlb	1	; select bank1
  6041  02CA  01DC               	clrf	___aldiv@sign^(0+128)
  6042  02CB  1FD5               	btfss	(___aldiv@divisor+3)^(0+128),7
  6043  02CC  2ADA               	goto	l744
  6044  02CD  09D2               	comf	___aldiv@divisor^(0+128),f
  6045  02CE  09D3               	comf	(___aldiv@divisor+1)^(0+128),f
  6046  02CF  09D4               	comf	(___aldiv@divisor+2)^(0+128),f
  6047  02D0  09D5               	comf	(___aldiv@divisor+3)^(0+128),f
  6048  02D1  0AD2               	incf	___aldiv@divisor^(0+128),f
  6049  02D2  1903               	skipnz
  6050  02D3  0AD3               	incf	(___aldiv@divisor+1)^(0+128),f
  6051  02D4  1903               	skipnz
  6052  02D5  0AD4               	incf	(___aldiv@divisor+2)^(0+128),f
  6053  02D6  1903               	skipnz
  6054  02D7  0AD5               	incf	(___aldiv@divisor+3)^(0+128),f
  6055  02D8  01DC               	clrf	___aldiv@sign^(0+128)
  6056  02D9  0ADC               	incf	___aldiv@sign^(0+128),f
  6057  02DA                     l744:
  6058  02DA  1FD9               	btfss	(___aldiv@dividend+3)^(0+128),7
  6059  02DB  2AEB               	goto	l2768
  6060  02DC  09D6               	comf	___aldiv@dividend^(0+128),f
  6061  02DD  09D7               	comf	(___aldiv@dividend+1)^(0+128),f
  6062  02DE  09D8               	comf	(___aldiv@dividend+2)^(0+128),f
  6063  02DF  09D9               	comf	(___aldiv@dividend+3)^(0+128),f
  6064  02E0  0AD6               	incf	___aldiv@dividend^(0+128),f
  6065  02E1  1903               	skipnz
  6066  02E2  0AD7               	incf	(___aldiv@dividend+1)^(0+128),f
  6067  02E3  1903               	skipnz
  6068  02E4  0AD8               	incf	(___aldiv@dividend+2)^(0+128),f
  6069  02E5  1903               	skipnz
  6070  02E6  0AD9               	incf	(___aldiv@dividend+3)^(0+128),f
  6071  02E7  3001               	movlw	1
  6072  02E8  00DA               	movwf	??___aldiv^(0+128)
  6073  02E9  085A               	movf	??___aldiv^(0+128),w
  6074  02EA  06DC               	xorwf	___aldiv@sign^(0+128),f
  6075  02EB                     l2768:
  6076  02EB  3000               	movlw	0
  6077  02EC  00E0               	movwf	(___aldiv@quotient+3)^(0+128)
  6078  02ED  3000               	movlw	0
  6079  02EE  00DF               	movwf	(___aldiv@quotient+2)^(0+128)
  6080  02EF  3000               	movlw	0
  6081  02F0  00DE               	movwf	(___aldiv@quotient+1)^(0+128)
  6082  02F1  3000               	movlw	0
  6083  02F2  00DD               	movwf	___aldiv@quotient^(0+128)
  6084  02F3  0855               	movf	(___aldiv@divisor+3)^(0+128),w
  6085  02F4  0454               	iorwf	(___aldiv@divisor+2)^(0+128),w
  6086  02F5  0453               	iorwf	(___aldiv@divisor+1)^(0+128),w
  6087  02F6  0452               	iorwf	___aldiv@divisor^(0+128),w
  6088  02F7  1903               	skipnz
  6089  02F8  2B34               	goto	l2790
  6090  02F9  01DB               	clrf	___aldiv@counter^(0+128)
  6091  02FA  0ADB               	incf	___aldiv@counter^(0+128),f
  6092  02FB                     l2776:
  6093  02FB  1BD5               	btfsc	(___aldiv@divisor+3)^(0+128),7
  6094  02FC  2B09               	goto	l2778
  6095  02FD  3001               	movlw	1
  6096  02FE                     u2425:
  6097  02FE  35D2               	lslf	___aldiv@divisor^(0+128),f
  6098  02FF  0DD3               	rlf	(___aldiv@divisor+1)^(0+128),f
  6099  0300  0DD4               	rlf	(___aldiv@divisor+2)^(0+128),f
  6100  0301  0DD5               	rlf	(___aldiv@divisor+3)^(0+128),f
  6101  0302  0B89               	decfsz	9,f
  6102  0303  2AFE               	goto	u2425
  6103  0304  3001               	movlw	1
  6104  0305  00DA               	movwf	??___aldiv^(0+128)
  6105  0306  085A               	movf	??___aldiv^(0+128),w
  6106  0307  07DB               	addwf	___aldiv@counter^(0+128),f
  6107  0308  2AFB               	goto	l2776
  6108  0309                     l2778:
  6109  0309  3001               	movlw	1
  6110  030A                     u2445:
  6111  030A  35DD               	lslf	___aldiv@quotient^(0+128),f
  6112  030B  0DDE               	rlf	(___aldiv@quotient+1)^(0+128),f
  6113  030C  0DDF               	rlf	(___aldiv@quotient+2)^(0+128),f
  6114  030D  0DE0               	rlf	(___aldiv@quotient+3)^(0+128),f
  6115  030E  0B89               	decfsz	9,f
  6116  030F  2B0A               	goto	u2445
  6117  0310  0855               	movf	(___aldiv@divisor+3)^(0+128),w
  6118  0311  0259               	subwf	(___aldiv@dividend+3)^(0+128),w
  6119  0312  1D03               	skipz
  6120  0313  2B1E               	goto	u2455
  6121  0314  0854               	movf	(___aldiv@divisor+2)^(0+128),w
  6122  0315  0258               	subwf	(___aldiv@dividend+2)^(0+128),w
  6123  0316  1D03               	skipz
  6124  0317  2B1E               	goto	u2455
  6125  0318  0853               	movf	(___aldiv@divisor+1)^(0+128),w
  6126  0319  0257               	subwf	(___aldiv@dividend+1)^(0+128),w
  6127  031A  1D03               	skipz
  6128  031B  2B1E               	goto	u2455
  6129  031C  0852               	movf	___aldiv@divisor^(0+128),w
  6130  031D  0256               	subwf	___aldiv@dividend^(0+128),w
  6131  031E                     u2455:
  6132  031E  1C03               	skipc
  6133  031F  2B29               	goto	l2786
  6134  0320  0852               	movf	___aldiv@divisor^(0+128),w
  6135  0321  02D6               	subwf	___aldiv@dividend^(0+128),f
  6136  0322  0853               	movf	(___aldiv@divisor+1)^(0+128),w
  6137  0323  3BD7               	subwfb	(___aldiv@dividend+1)^(0+128),f
  6138  0324  0854               	movf	(___aldiv@divisor+2)^(0+128),w
  6139  0325  3BD8               	subwfb	(___aldiv@dividend+2)^(0+128),f
  6140  0326  0855               	movf	(___aldiv@divisor+3)^(0+128),w
  6141  0327  3BD9               	subwfb	(___aldiv@dividend+3)^(0+128),f
  6142  0328  145D               	bsf	___aldiv@quotient^(0+128),0
  6143  0329                     l2786:
  6144  0329  3001               	movlw	1
  6145  032A                     u2465:
  6146  032A  36D5               	lsrf	(___aldiv@divisor+3)^(0+128),f
  6147  032B  0CD4               	rrf	(___aldiv@divisor+2)^(0+128),f
  6148  032C  0CD3               	rrf	(___aldiv@divisor+1)^(0+128),f
  6149  032D  0CD2               	rrf	___aldiv@divisor^(0+128),f
  6150  032E  0B89               	decfsz	9,f
  6151  032F  2B2A               	goto	u2465
  6152  0330  3001               	movlw	1
  6153  0331  02DB               	subwf	___aldiv@counter^(0+128),f
  6154  0332  1D03               	btfss	3,2
  6155  0333  2B09               	goto	l2778
  6156  0334                     l2790:
  6157  0334  085C               	movf	___aldiv@sign^(0+128),w
  6158  0335  1903               	btfsc	3,2
  6159  0336  2B42               	goto	l2794
  6160  0337  09DD               	comf	___aldiv@quotient^(0+128),f
  6161  0338  09DE               	comf	(___aldiv@quotient+1)^(0+128),f
  6162  0339  09DF               	comf	(___aldiv@quotient+2)^(0+128),f
  6163  033A  09E0               	comf	(___aldiv@quotient+3)^(0+128),f
  6164  033B  0ADD               	incf	___aldiv@quotient^(0+128),f
  6165  033C  1903               	skipnz
  6166  033D  0ADE               	incf	(___aldiv@quotient+1)^(0+128),f
  6167  033E  1903               	skipnz
  6168  033F  0ADF               	incf	(___aldiv@quotient+2)^(0+128),f
  6169  0340  1903               	skipnz
  6170  0341  0AE0               	incf	(___aldiv@quotient+3)^(0+128),f
  6171  0342                     l2794:
  6172  0342  0860               	movf	(___aldiv@quotient+3)^(0+128),w
  6173  0343  00D5               	movwf	(?___aldiv+3)^(0+128)
  6174  0344  085F               	movf	(___aldiv@quotient+2)^(0+128),w
  6175  0345  00D4               	movwf	(?___aldiv+2)^(0+128)
  6176  0346  085E               	movf	(___aldiv@quotient+1)^(0+128),w
  6177  0347  00D3               	movwf	(?___aldiv+1)^(0+128)
  6178  0348  085D               	movf	___aldiv@quotient^(0+128),w
  6179  0349  00D2               	movwf	?___aldiv^(0+128)
  6180  034A  0008               	return
  6181  034B                     __end_of___aldiv:
  6182                           
  6183                           	psect	text16
  6184  0FD3                     __ptext16:	
  6185 ;; *************** function _lowBattery *****************
  6186 ;; Defined at:
  6187 ;;		line 178 in file "main.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;		None
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;		None
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      void 
  6194 ;; Registers used:
  6195 ;;		wreg, status,2, status,0, pclath, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6201 ;;      Params:         0       0       0       0       0       0       0       0
  6202 ;;      Locals:         0       0       0       0       0       0       0       0
  6203 ;;      Temps:          0       0       2       0       0       0       0       0
  6204 ;;      Totals:         0       0       2       0       0       0       0       0
  6205 ;;Total ram usage:        2 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    6
  6208 ;; This function calls:
  6209 ;;		_setLEDColor
  6210 ;; This function is called by:
  6211 ;;		_main
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           
  6216                           ;psect for function _lowBattery
  6217  0FD3                     _lowBattery:
  6218                           
  6219                           ;main.c: 179: interfaceState = STATE_LOWBATTERY;
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _lowBattery: [wreg+status,2+status,0+pclath+cstack]
  6223  0FD3  3003               	movlw	3
  6224  0FD4  0021               	movlb	1	; select bank1
  6225  0FD5  00CA               	movwf	??_lowBattery^(0+128)
  6226  0FD6  084A               	movf	??_lowBattery^(0+128),w
  6227  0FD7  00E9               	movwf	_interfaceState^(0+128)
  6228                           
  6229                           ;main.c: 180: setLEDColor(255, 0, 0);
  6230  0FD8  01C6               	clrf	setLEDColor@green^(0+128)
  6231  0FD9  01C7               	clrf	setLEDColor@blue^(0+128)
  6232  0FDA  30FF               	movlw	255
  6233  0FDB  318E  26DD  318F   	fcall	_setLEDColor
  6234                           
  6235                           ;main.c: 181: _delay((unsigned long)((250)*(4000000/4000.0)));
  6236  0FDE  3002               	movlw	2
  6237  0FDF  0021               	movlb	1	; select bank1
  6238  0FE0  00CB               	movwf	(??_lowBattery^(0+128)+1)
  6239  0FE1  3045               	movlw	69
  6240  0FE2  00CA               	movwf	??_lowBattery^(0+128)
  6241  0FE3  30A9               	movlw	169
  6242  0FE4                     u3017:
  6243  0FE4  0B89               	decfsz	9,f
  6244  0FE5  2FE4               	goto	u3017
  6245  0FE6  0BCA               	decfsz	??_lowBattery^(0+128),f
  6246  0FE7  2FE4               	goto	u3017
  6247  0FE8  0BCB               	decfsz	(??_lowBattery^(0+128)+1),f
  6248  0FE9  2FE4               	goto	u3017
  6249  0FEA  3200               	nop2
  6250                           
  6251                           ;main.c: 182: setLEDColor(0, 0, 0);
  6252  0FEB  0021               	movlb	1	; select bank1
  6253  0FEC  01C6               	clrf	setLEDColor@green^(0+128)
  6254  0FED  01C7               	clrf	setLEDColor@blue^(0+128)
  6255  0FEE  3000               	movlw	0
  6256  0FEF  318E  26DD  318F   	fcall	_setLEDColor
  6257                           
  6258                           ;main.c: 183: _delay((unsigned long)((500)*(4000000/4000.0)));
  6259  0FF2  3003               	movlw	3
  6260  0FF3  0021               	movlb	1	; select bank1
  6261  0FF4  00CB               	movwf	(??_lowBattery^(0+128)+1)
  6262  0FF5  308A               	movlw	138
  6263  0FF6  00CA               	movwf	??_lowBattery^(0+128)
  6264  0FF7  3055               	movlw	85
  6265  0FF8                     u3027:
  6266  0FF8  0B89               	decfsz	9,f
  6267  0FF9  2FF8               	goto	u3027
  6268  0FFA  0BCA               	decfsz	??_lowBattery^(0+128),f
  6269  0FFB  2FF8               	goto	u3027
  6270  0FFC  0BCB               	decfsz	(??_lowBattery^(0+128)+1),f
  6271  0FFD  2FF8               	goto	u3027
  6272  0FFE  3200               	nop2
  6273  0FFF  0008               	return
  6274  1000                     __end_of_lowBattery:
  6275                           
  6276                           	psect	text17
  6277  0EDD                     __ptext17:	
  6278 ;; *************** function _setLEDColor *****************
  6279 ;; Defined at:
  6280 ;;		line 157 in file "main.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;  red             1    wreg     unsigned char 
  6283 ;;  green           1    0[BANK1 ] unsigned char 
  6284 ;;  blue            1    1[BANK1 ] unsigned char 
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  red             1    3[BANK1 ] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      void 
  6289 ;; Registers used:
  6290 ;;		wreg, status,2, status,0
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6296 ;;      Params:         0       0       2       0       0       0       0       0
  6297 ;;      Locals:         0       0       1       0       0       0       0       0
  6298 ;;      Temps:          0       0       1       0       0       0       0       0
  6299 ;;      Totals:         0       0       4       0       0       0       0       0
  6300 ;;Total ram usage:        4 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    5
  6303 ;; This function calls:
  6304 ;;		Nothing
  6305 ;; This function is called by:
  6306 ;;		_lowBattery
  6307 ;;		_startUp
  6308 ;;		_selectSomething
  6309 ;;		_selectFrequency
  6310 ;;		_selectCurrent
  6311 ;;		_process_remote_command
  6312 ;;		_main
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           
  6317                           ;psect for function _setLEDColor
  6318  0EDD                     _setLEDColor:
  6319                           
  6320                           ;incstack = 0
  6321                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  6322                           ;setLEDColor@red stored from wreg
  6323  0EDD  0021               	movlb	1	; select bank1
  6324  0EDE  00C9               	movwf	setLEDColor@red^(0+128)
  6325                           
  6326                           ;main.c: 164: if (0 == blue){
  6327  0EDF  0847               	movf	setLEDColor@blue^(0+128),w
  6328  0EE0  1D03               	btfss	3,2
  6329  0EE1  2EE4               	goto	l2706
  6330                           
  6331                           ;main.c: 165: TRISC |= 0b00100000;
  6332  0EE2  168E               	bsf	14,5	;volatile
  6333                           
  6334                           ;main.c: 166: } else {
  6335  0EE3  2EE8               	goto	l2708
  6336  0EE4                     l2706:
  6337                           
  6338                           ;main.c: 167: TRISC &= 0b11011111;
  6339  0EE4  30DF               	movlw	223
  6340  0EE5  00C8               	movwf	??_setLEDColor^(0+128)
  6341  0EE6  0848               	movf	??_setLEDColor^(0+128),w
  6342  0EE7  058E               	andwf	14,f	;volatile
  6343  0EE8                     l2708:
  6344                           
  6345                           ;main.c: 168: };main.c: 169: CCPR1L = 255 - blue;
  6346  0EE8  0947               	comf	setLEDColor@blue^(0+128),w
  6347  0EE9  0025               	movlb	5	; select bank5
  6348  0EEA  0091               	movwf	17	;volatile
  6349                           
  6350                           ;main.c: 171: PWM3DCH = red;
  6351  0EEB  0021               	movlb	1	; select bank1
  6352  0EEC  0849               	movf	setLEDColor@red^(0+128),w
  6353  0EED  002C               	movlb	12	; select bank12
  6354  0EEE  0098               	movwf	24	;volatile
  6355                           
  6356                           ;main.c: 173: PWM4DCH = green;
  6357  0EEF  0021               	movlb	1	; select bank1
  6358  0EF0  0846               	movf	setLEDColor@green^(0+128),w
  6359  0EF1  002C               	movlb	12	; select bank12
  6360  0EF2  009B               	movwf	27	;volatile
  6361  0EF3  0008               	return
  6362  0EF4                     __end_of_setLEDColor:
  6363                           
  6364                           	psect	text18
  6365  0667                     __ptext18:	
  6366 ;; *************** function _initLED *****************
  6367 ;; Defined at:
  6368 ;;		line 116 in file "main.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;		None
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;		None
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, status,2, status,0
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6382 ;;      Params:         0       0       0       0       0       0       0       0
  6383 ;;      Locals:         0       0       0       0       0       0       0       0
  6384 ;;      Temps:          0       0       1       0       0       0       0       0
  6385 ;;      Totals:         0       0       1       0       0       0       0       0
  6386 ;;Total ram usage:        1 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    5
  6389 ;; This function calls:
  6390 ;;		Nothing
  6391 ;; This function is called by:
  6392 ;;		_main
  6393 ;; This function uses a non-reentrant model
  6394 ;;
  6395                           
  6396                           
  6397                           ;psect for function _initLED
  6398  0667                     _initLED:
  6399                           
  6400                           ;main.c: 119: PR2 = 255;
  6401                           
  6402                           ;incstack = 0
  6403                           ; Regs used in _initLED: [wreg+status,2+status,0]
  6404  0667  30FF               	movlw	255
  6405  0668  0020               	movlb	0	; select bank0
  6406  0669  009B               	movwf	27	;volatile
  6407                           
  6408                           ;main.c: 120: T2CONbits.T2CKPS = 0b10;
  6409  066A  081C               	movf	28,w	;volatile
  6410  066B  39FC               	andlw	-4
  6411  066C  3802               	iorlw	2
  6412  066D  009C               	movwf	28	;volatile
  6413                           
  6414                           ;main.c: 121: T2CONbits.TMR2ON = 1;
  6415  066E  151C               	bsf	28,2	;volatile
  6416                           
  6417                           ;main.c: 125: TRISC |= 0b00010000;
  6418  066F  0021               	movlb	1	; select bank1
  6419  0670  160E               	bsf	14,4	;volatile
  6420                           
  6421                           ;main.c: 126: RC4PPS = 0b01110;
  6422  0671  300E               	movlw	14
  6423  0672  003D               	movlb	29	; select bank29
  6424  0673  00A4               	movwf	36	;volatile
  6425                           
  6426                           ;main.c: 127: CCPTMRSbits.P3TSEL = 0b00;
  6427  0674  30CF               	movlw	-49
  6428  0675  0025               	movlb	5	; select bank5
  6429  0676  059E               	andwf	30,f	;volatile
  6430                           
  6431                           ;main.c: 128: PWM3DCH = 0;
  6432  0677  002C               	movlb	12	; select bank12
  6433  0678  0198               	clrf	24	;volatile
  6434                           
  6435                           ;main.c: 129: PWM3DCLbits.PWM3DCL = 0;
  6436  0679  303F               	movlw	-193
  6437  067A  0597               	andwf	23,f	;volatile
  6438                           
  6439                           ;main.c: 130: PWM3CONbits.PWM3POL = 1;
  6440  067B  1619               	bsf	25,4	;volatile
  6441                           
  6442                           ;main.c: 131: TRISC &= 0b11101111;
  6443  067C  30EF               	movlw	239
  6444  067D  0021               	movlb	1	; select bank1
  6445  067E  00C6               	movwf	??_initLED^(0+128)
  6446  067F  0846               	movf	??_initLED^(0+128),w
  6447  0680  058E               	andwf	14,f	;volatile
  6448                           
  6449                           ;main.c: 132: PWM3CONbits.PWM3EN = 1;
  6450  0681  002C               	movlb	12	; select bank12
  6451  0682  1799               	bsf	25,7	;volatile
  6452                           
  6453                           ;main.c: 136: TRISA |= 0b00100000;
  6454  0683  0021               	movlb	1	; select bank1
  6455  0684  168C               	bsf	12,5	;volatile
  6456                           
  6457                           ;main.c: 137: RA5PPS = 0b01111;
  6458  0685  300F               	movlw	15
  6459  0686  003D               	movlb	29	; select bank29
  6460  0687  0095               	movwf	21	;volatile
  6461                           
  6462                           ;main.c: 138: CCPTMRSbits.P4TSEL = 0b00;
  6463  0688  303F               	movlw	-193
  6464  0689  0025               	movlb	5	; select bank5
  6465  068A  059E               	andwf	30,f	;volatile
  6466                           
  6467                           ;main.c: 139: PWM4DCH = 0;
  6468  068B  002C               	movlb	12	; select bank12
  6469  068C  019B               	clrf	27	;volatile
  6470                           
  6471                           ;main.c: 140: PWM4DCLbits.PWM4DCL = 0;
  6472  068D  303F               	movlw	-193
  6473  068E  059A               	andwf	26,f	;volatile
  6474                           
  6475                           ;main.c: 141: PWM4CONbits.PWM4POL = 1;
  6476  068F  161C               	bsf	28,4	;volatile
  6477                           
  6478                           ;main.c: 142: TRISA &= 0b11011111;
  6479  0690  30DF               	movlw	223
  6480  0691  0021               	movlb	1	; select bank1
  6481  0692  00C6               	movwf	??_initLED^(0+128)
  6482  0693  0846               	movf	??_initLED^(0+128),w
  6483  0694  058C               	andwf	12,f	;volatile
  6484                           
  6485                           ;main.c: 143: PWM4CONbits.PWM4EN = 1;
  6486  0695  002C               	movlb	12	; select bank12
  6487  0696  179C               	bsf	28,7	;volatile
  6488                           
  6489                           ;main.c: 149: TRISC |= 0b00100000;
  6490  0697  0021               	movlb	1	; select bank1
  6491  0698  168E               	bsf	14,5	;volatile
  6492                           
  6493                           ;main.c: 150: RC5PPS = 0b01100;
  6494  0699  300C               	movlw	12
  6495  069A  003D               	movlb	29	; select bank29
  6496  069B  00A5               	movwf	37	;volatile
  6497                           
  6498                           ;main.c: 151: CCP1CONbits.CCP1M = 0b1100;
  6499  069C  0025               	movlb	5	; select bank5
  6500  069D  0813               	movf	19,w	;volatile
  6501  069E  39F0               	andlw	-16
  6502  069F  380C               	iorlw	12
  6503  06A0  0093               	movwf	19	;volatile
  6504                           
  6505                           ;main.c: 152: CCPR1L = 255;
  6506  06A1  30FF               	movlw	255
  6507  06A2  0091               	movwf	17	;volatile
  6508                           
  6509                           ;main.c: 153: CCP1CONbits.DC1B = 0x3;
  6510  06A3  3030               	movlw	48
  6511  06A4  0493               	iorwf	19,f	;volatile
  6512                           
  6513                           ;main.c: 154: TRISC &= 0b11011111;
  6514  06A5  30DF               	movlw	223
  6515  06A6  0021               	movlb	1	; select bank1
  6516  06A7  00C6               	movwf	??_initLED^(0+128)
  6517  06A8  0846               	movf	??_initLED^(0+128),w
  6518  06A9  058E               	andwf	14,f	;volatile
  6519  06AA  0008               	return
  6520  06AB                     __end_of_initLED:
  6521                           
  6522                           	psect	text19
  6523  0F11                     __ptext19:	
  6524 ;; *************** function _SYSTEM_Initialize *****************
  6525 ;; Defined at:
  6526 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, status,2, status,0, pclath, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6540 ;;      Params:         0       0       0       0       0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0       0
  6543 ;;      Totals:         0       0       0       0       0       0       0       0
  6544 ;;Total ram usage:        0 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    7
  6547 ;; This function calls:
  6548 ;;		_DAC_Initialize
  6549 ;;		_EUSART_Initialize
  6550 ;;		_EXT_INT_Initialize
  6551 ;;		_OPA1_Initialize
  6552 ;;		_OPA2_Initialize
  6553 ;;		_OSCILLATOR_Initialize
  6554 ;;		_PIN_MANAGER_Initialize
  6555 ;;		_TMR0_Initialize
  6556 ;;		_TMR2_Initialize
  6557 ;;		_TMR4_Initialize
  6558 ;;		_WDT_Initialize
  6559 ;; This function is called by:
  6560 ;;		_main
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           
  6565                           ;psect for function _SYSTEM_Initialize
  6566  0F11                     _SYSTEM_Initialize:
  6567                           
  6568                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6572  0F11  3186  26E8  318F   	fcall	_PIN_MANAGER_Initialize
  6573                           
  6574                           ;mcc.c: 54: OSCILLATOR_Initialize();
  6575  0F14  318E  2658  318F   	fcall	_OSCILLATOR_Initialize
  6576                           
  6577                           ;mcc.c: 55: WDT_Initialize();
  6578  0F17  318E  263C  318F   	fcall	_WDT_Initialize
  6579                           
  6580                           ;mcc.c: 56: DAC_Initialize();
  6581  0F1A  318E  2640  318F   	fcall	_DAC_Initialize
  6582                           
  6583                           ;mcc.c: 57: OPA1_Initialize();
  6584  0F1D  318E  2634  318F   	fcall	_OPA1_Initialize
  6585                           
  6586                           ;mcc.c: 58: OPA2_Initialize();
  6587  0F20  318E  2638  318F   	fcall	_OPA2_Initialize
  6588                           
  6589                           ;mcc.c: 59: TMR4_Initialize();
  6590  0F23  318E  26CB  318F   	fcall	_TMR4_Initialize
  6591                           
  6592                           ;mcc.c: 60: TMR2_Initialize();
  6593  0F26  318E  2660  318F   	fcall	_TMR2_Initialize
  6594                           
  6595                           ;mcc.c: 61: EXT_INT_Initialize();
  6596  0F29  318E  26B4  318F   	fcall	_EXT_INT_Initialize
  6597                           
  6598                           ;mcc.c: 62: TMR0_Initialize();
  6599  0F2C  318E  2695  318F   	fcall	_TMR0_Initialize
  6600                           
  6601                           ;mcc.c: 63: EUSART_Initialize();
  6602  0F2F  318F  2732         	fcall	_EUSART_Initialize
  6603  0F31  0008               	return
  6604  0F32                     __end_of_SYSTEM_Initialize:
  6605                           
  6606                           	psect	text20
  6607  0E3C                     __ptext20:	
  6608 ;; *************** function _WDT_Initialize *****************
  6609 ;; Defined at:
  6610 ;;		line 78 in file "mcc_generated_files/mcc.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		wreg
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6624 ;;      Params:         0       0       0       0       0       0       0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0
  6627 ;;      Totals:         0       0       0       0       0       0       0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    5
  6631 ;; This function calls:
  6632 ;;		Nothing
  6633 ;; This function is called by:
  6634 ;;		_SYSTEM_Initialize
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           
  6639                           ;psect for function _WDT_Initialize
  6640  0E3C                     _WDT_Initialize:
  6641                           
  6642                           ;mcc.c: 81: WDTCON = 0x16;
  6643                           
  6644                           ;incstack = 0
  6645                           ; Regs used in _WDT_Initialize: [wreg]
  6646  0E3C  3016               	movlw	22
  6647  0E3D  0021               	movlb	1	; select bank1
  6648  0E3E  0097               	movwf	23	;volatile
  6649  0E3F  0008               	return
  6650  0E40                     __end_of_WDT_Initialize:
  6651                           
  6652                           	psect	text21
  6653  0ECB                     __ptext21:	
  6654 ;; *************** function _TMR4_Initialize *****************
  6655 ;; Defined at:
  6656 ;;		line 64 in file "mcc_generated_files/tmr4.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;		None
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  1    wreg      void 
  6663 ;; Registers used:
  6664 ;;		wreg, status,2, status,0, pclath, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6670 ;;      Params:         0       0       0       0       0       0       0       0
  6671 ;;      Locals:         0       0       0       0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0       0
  6673 ;;      Totals:         0       0       0       0       0       0       0       0
  6674 ;;Total ram usage:        0 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    6
  6677 ;; This function calls:
  6678 ;;		_TMR4_SetInterruptHandler
  6679 ;; This function is called by:
  6680 ;;		_SYSTEM_Initialize
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           
  6685                           ;psect for function _TMR4_Initialize
  6686  0ECB                     _TMR4_Initialize:
  6687                           
  6688                           ;tmr4.c: 69: PR4 = 0x04;
  6689                           
  6690                           ;incstack = 0
  6691                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6692  0ECB  3004               	movlw	4
  6693  0ECC  0028               	movlb	8	; select bank8
  6694  0ECD  0096               	movwf	22	;volatile
  6695                           
  6696                           ;tmr4.c: 72: TMR4 = 0x00;
  6697  0ECE  0195               	clrf	21	;volatile
  6698                           
  6699                           ;tmr4.c: 75: PIR2bits.TMR4IF = 0;
  6700  0ECF  0020               	movlb	0	; select bank0
  6701  0ED0  1092               	bcf	18,1	;volatile
  6702                           
  6703                           ;tmr4.c: 78: PIE2bits.TMR4IE = 1;
  6704  0ED1  0021               	movlb	1	; select bank1
  6705  0ED2  1492               	bsf	18,1	;volatile
  6706                           
  6707                           ;tmr4.c: 81: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
  6708  0ED3  301B               	movlw	low _TMR4_DefaultInterruptHandler
  6709  0ED4  00C6               	movwf	TMR4_SetInterruptHandler@InterruptHandler^(0+128)
  6710  0ED5  3007               	movlw	high _TMR4_DefaultInterruptHandler
  6711  0ED6  00C7               	movwf	(TMR4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  6712  0ED7  318E  268C         	fcall	_TMR4_SetInterruptHandler
  6713                           
  6714                           ;tmr4.c: 84: T4CON = 0x16;
  6715  0ED9  3016               	movlw	22
  6716  0EDA  0028               	movlb	8	; select bank8
  6717  0EDB  0097               	movwf	23	;volatile
  6718  0EDC  0008               	return
  6719  0EDD                     __end_of_TMR4_Initialize:
  6720                           
  6721                           	psect	text22
  6722  0E8C                     __ptext22:	
  6723 ;; *************** function _TMR4_SetInterruptHandler *****************
  6724 ;; Defined at:
  6725 ;;		line 131 in file "mcc_generated_files/tmr4.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  6728 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      void 
  6733 ;; Registers used:
  6734 ;;		wreg
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6740 ;;      Params:         0       0       2       0       0       0       0       0
  6741 ;;      Locals:         0       0       0       0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0       0
  6743 ;;      Totals:         0       0       2       0       0       0       0       0
  6744 ;;Total ram usage:        2 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    5
  6747 ;; This function calls:
  6748 ;;		Nothing
  6749 ;; This function is called by:
  6750 ;;		_TMR4_Initialize
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           
  6755                           ;psect for function _TMR4_SetInterruptHandler
  6756  0E8C                     _TMR4_SetInterruptHandler:
  6757                           
  6758                           ;tmr4.c: 132: TMR4_InterruptHandler = InterruptHandler;
  6759                           
  6760                           ;incstack = 0
  6761                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  6762  0E8C  0021               	movlb	1	; select bank1
  6763  0E8D  0847               	movf	(TMR4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  6764  0E8E  0020               	movlb	0	; select bank0
  6765  0E8F  00C5               	movwf	_TMR4_InterruptHandler+1
  6766  0E90  0021               	movlb	1	; select bank1
  6767  0E91  0846               	movf	TMR4_SetInterruptHandler@InterruptHandler^(0+128),w
  6768  0E92  0020               	movlb	0	; select bank0
  6769  0E93  00C4               	movwf	_TMR4_InterruptHandler
  6770  0E94  0008               	return
  6771  0E95                     __end_of_TMR4_SetInterruptHandler:
  6772                           
  6773                           	psect	text23
  6774  0E60                     __ptext23:	
  6775 ;; *************** function _TMR2_Initialize *****************
  6776 ;; Defined at:
  6777 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;		None
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;		None
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  1    wreg      void 
  6784 ;; Registers used:
  6785 ;;		wreg, status,2
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6791 ;;      Params:         0       0       0       0       0       0       0       0
  6792 ;;      Locals:         0       0       0       0       0       0       0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0       0
  6794 ;;      Totals:         0       0       0       0       0       0       0       0
  6795 ;;Total ram usage:        0 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    5
  6798 ;; This function calls:
  6799 ;;		Nothing
  6800 ;; This function is called by:
  6801 ;;		_SYSTEM_Initialize
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           
  6806                           ;psect for function _TMR2_Initialize
  6807  0E60                     _TMR2_Initialize:
  6808                           
  6809                           ;tmr2.c: 67: PR2 = 255;
  6810                           
  6811                           ;incstack = 0
  6812                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6813  0E60  30FF               	movlw	255
  6814  0E61  0020               	movlb	0	; select bank0
  6815  0E62  009B               	movwf	27	;volatile
  6816                           
  6817                           ;tmr2.c: 70: TMR2 = 0x00;
  6818  0E63  019A               	clrf	26	;volatile
  6819                           
  6820                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
  6821  0E64  1091               	bcf	17,1	;volatile
  6822                           
  6823                           ;tmr2.c: 76: T2CON = 0x06;
  6824  0E65  3006               	movlw	6
  6825  0E66  009C               	movwf	28	;volatile
  6826  0E67  0008               	return
  6827  0E68                     __end_of_TMR2_Initialize:
  6828                           
  6829                           	psect	text24
  6830  0E95                     __ptext24:	
  6831 ;; *************** function _TMR0_Initialize *****************
  6832 ;; Defined at:
  6833 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;		None
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;		None
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		wreg, status,2
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6847 ;;      Params:         0       0       0       0       0       0       0       0
  6848 ;;      Locals:         0       0       0       0       0       0       0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0       0
  6850 ;;      Totals:         0       0       0       0       0       0       0       0
  6851 ;;Total ram usage:        0 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    5
  6854 ;; This function calls:
  6855 ;;		Nothing
  6856 ;; This function is called by:
  6857 ;;		_SYSTEM_Initialize
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           
  6862                           ;psect for function _TMR0_Initialize
  6863  0E95                     _TMR0_Initialize:
  6864                           
  6865                           ;tmr0.c: 68: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 & 0x3F));
  6866                           
  6867                           ;incstack = 0
  6868                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  6869  0E95  0021               	movlb	1	; select bank1
  6870  0E96  0815               	movf	21,w	;volatile
  6871  0E97  39C0               	andlw	192
  6872  0E98  3815               	iorlw	21
  6873  0E99  0095               	movwf	21	;volatile
  6874                           
  6875                           ;tmr0.c: 71: TMR0 = 0x00;
  6876  0E9A  0020               	movlb	0	; select bank0
  6877  0E9B  0195               	clrf	21	;volatile
  6878                           
  6879                           ;tmr0.c: 74: timer0ReloadVal= 0;
  6880  0E9C  01D5               	clrf	_timer0ReloadVal	;volatile
  6881                           
  6882                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  6883  0E9D  110B               	bcf	11,2	;volatile
  6884  0E9E  0008               	return
  6885  0E9F                     __end_of_TMR0_Initialize:
  6886                           
  6887                           	psect	text25
  6888  06E8                     __ptext25:	
  6889 ;; *************** function _PIN_MANAGER_Initialize *****************
  6890 ;; Defined at:
  6891 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;		None
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;		None
  6896 ;; Return value:  Size  Location     Type
  6897 ;;                  1    wreg      void 
  6898 ;; Registers used:
  6899 ;;		wreg, status,2
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6905 ;;      Params:         0       0       0       0       0       0       0       0
  6906 ;;      Locals:         0       0       0       0       0       0       0       0
  6907 ;;      Temps:          0       0       0       0       0       0       0       0
  6908 ;;      Totals:         0       0       0       0       0       0       0       0
  6909 ;;Total ram usage:        0 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; Hardware stack levels required when called:    5
  6912 ;; This function calls:
  6913 ;;		Nothing
  6914 ;; This function is called by:
  6915 ;;		_SYSTEM_Initialize
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           
  6920                           ;psect for function _PIN_MANAGER_Initialize
  6921  06E8                     _PIN_MANAGER_Initialize:
  6922                           
  6923                           ;pin_manager.c: 60: LATA = 0x00;
  6924                           
  6925                           ;incstack = 0
  6926                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6927  06E8  0022               	movlb	2	; select bank2
  6928  06E9  018C               	clrf	12	;volatile
  6929                           
  6930                           ;pin_manager.c: 61: LATB = 0x00;
  6931  06EA  018D               	clrf	13	;volatile
  6932                           
  6933                           ;pin_manager.c: 62: LATC = 0x00;
  6934  06EB  018E               	clrf	14	;volatile
  6935                           
  6936                           ;pin_manager.c: 67: TRISA = 0x04;
  6937  06EC  3004               	movlw	4
  6938  06ED  0021               	movlb	1	; select bank1
  6939  06EE  008C               	movwf	12	;volatile
  6940                           
  6941                           ;pin_manager.c: 68: TRISB = 0x30;
  6942  06EF  3030               	movlw	48
  6943  06F0  008D               	movwf	13	;volatile
  6944                           
  6945                           ;pin_manager.c: 69: TRISC = 0x50;
  6946  06F1  3050               	movlw	80
  6947  06F2  008E               	movwf	14	;volatile
  6948                           
  6949                           ;pin_manager.c: 74: ANSELC = 0x40;
  6950  06F3  3040               	movlw	64
  6951  06F4  0023               	movlb	3	; select bank3
  6952  06F5  008E               	movwf	14	;volatile
  6953                           
  6954                           ;pin_manager.c: 75: ANSELB = 0x10;
  6955  06F6  3010               	movlw	16
  6956  06F7  008D               	movwf	13	;volatile
  6957                           
  6958                           ;pin_manager.c: 76: ANSELA = 0x00;
  6959  06F8  018C               	clrf	12	;volatile
  6960                           
  6961                           ;pin_manager.c: 81: WPUB = 0x00;
  6962  06F9  0024               	movlb	4	; select bank4
  6963  06FA  018D               	clrf	13	;volatile
  6964                           
  6965                           ;pin_manager.c: 82: WPUA = 0x00;
  6966  06FB  018C               	clrf	12	;volatile
  6967                           
  6968                           ;pin_manager.c: 83: WPUC = 0x00;
  6969  06FC  018E               	clrf	14	;volatile
  6970                           
  6971                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 0;
  6972  06FD  0021               	movlb	1	; select bank1
  6973  06FE  1395               	bcf	21,7	;volatile
  6974                           
  6975                           ;pin_manager.c: 89: ODCONA = 0x00;
  6976  06FF  0025               	movlb	5	; select bank5
  6977  0700  018C               	clrf	12	;volatile
  6978                           
  6979                           ;pin_manager.c: 90: ODCONB = 0x00;
  6980  0701  018D               	clrf	13	;volatile
  6981                           
  6982                           ;pin_manager.c: 91: ODCONC = 0x00;
  6983  0702  018E               	clrf	14	;volatile
  6984                           
  6985                           ;pin_manager.c: 96: SLRCONA = 0x37;
  6986  0703  3037               	movlw	55
  6987  0704  0026               	movlb	6	; select bank6
  6988  0705  008C               	movwf	12	;volatile
  6989                           
  6990                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  6991  0706  30F0               	movlw	240
  6992  0707  008D               	movwf	13	;volatile
  6993                           
  6994                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  6995  0708  30FF               	movlw	255
  6996  0709  008E               	movwf	14	;volatile
  6997                           
  6998                           ;pin_manager.c: 103: INLVLA = 0x3F;
  6999  070A  303F               	movlw	63
  7000  070B  0027               	movlb	7	; select bank7
  7001  070C  008C               	movwf	12	;volatile
  7002                           
  7003                           ;pin_manager.c: 104: INLVLB = 0xF0;
  7004  070D  30F0               	movlw	240
  7005  070E  008D               	movwf	13	;volatile
  7006                           
  7007                           ;pin_manager.c: 105: INLVLC = 0xFF;
  7008  070F  30FF               	movlw	255
  7009  0710  008E               	movwf	14	;volatile
  7010                           
  7011                           ;pin_manager.c: 113: INTCONbits.IOCIE = 1;
  7012  0711  158B               	bsf	11,3	;volatile
  7013                           
  7014                           ;pin_manager.c: 116: INTPPS = 0x02;
  7015  0712  3002               	movlw	2
  7016  0713  003C               	movlb	28	; select bank28
  7017  0714  0090               	movwf	16	;volatile
  7018                           
  7019                           ;pin_manager.c: 117: RXPPS = 0x0D;
  7020  0715  300D               	movlw	13
  7021  0716  00A4               	movwf	36	;volatile
  7022                           
  7023                           ;pin_manager.c: 118: RB7PPS = 0x14;
  7024  0717  3014               	movlw	20
  7025  0718  003D               	movlb	29	; select bank29
  7026  0719  009F               	movwf	31	;volatile
  7027  071A  0008               	return
  7028  071B                     __end_of_PIN_MANAGER_Initialize:
  7029                           
  7030                           	psect	text26
  7031  0E58                     __ptext26:	
  7032 ;; *************** function _OSCILLATOR_Initialize *****************
  7033 ;; Defined at:
  7034 ;;		line 66 in file "mcc_generated_files/mcc.c"
  7035 ;; Parameters:    Size  Location     Type
  7036 ;;		None
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;		None
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  1    wreg      void 
  7041 ;; Registers used:
  7042 ;;		wreg, status,2
  7043 ;; Tracked objects:
  7044 ;;		On entry : 0/0
  7045 ;;		On exit  : 0/0
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7048 ;;      Params:         0       0       0       0       0       0       0       0
  7049 ;;      Locals:         0       0       0       0       0       0       0       0
  7050 ;;      Temps:          0       0       0       0       0       0       0       0
  7051 ;;      Totals:         0       0       0       0       0       0       0       0
  7052 ;;Total ram usage:        0 bytes
  7053 ;; Hardware stack levels used:    1
  7054 ;; Hardware stack levels required when called:    5
  7055 ;; This function calls:
  7056 ;;		Nothing
  7057 ;; This function is called by:
  7058 ;;		_SYSTEM_Initialize
  7059 ;; This function uses a non-reentrant model
  7060 ;;
  7061                           
  7062                           
  7063                           ;psect for function _OSCILLATOR_Initialize
  7064  0E58                     _OSCILLATOR_Initialize:
  7065                           
  7066                           ;mcc.c: 69: OSCCON = 0x6A;
  7067                           
  7068                           ;incstack = 0
  7069                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7070  0E58  306A               	movlw	106
  7071  0E59  0021               	movlb	1	; select bank1
  7072  0E5A  0099               	movwf	25	;volatile
  7073                           
  7074                           ;mcc.c: 71: OSCSTAT = 0x00;
  7075  0E5B  019A               	clrf	26	;volatile
  7076                           
  7077                           ;mcc.c: 73: OSCTUNE = 0x00;
  7078  0E5C  0198               	clrf	24	;volatile
  7079                           
  7080                           ;mcc.c: 75: BORCON = 0x00;
  7081  0E5D  0022               	movlb	2	; select bank2
  7082  0E5E  0196               	clrf	22	;volatile
  7083  0E5F  0008               	return
  7084  0E60                     __end_of_OSCILLATOR_Initialize:
  7085                           
  7086                           	psect	text27
  7087  0E38                     __ptext27:	
  7088 ;; *************** function _OPA2_Initialize *****************
  7089 ;; Defined at:
  7090 ;;		line 58 in file "mcc_generated_files/opa2.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;		None
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;		None
  7095 ;; Return value:  Size  Location     Type
  7096 ;;                  1    wreg      void 
  7097 ;; Registers used:
  7098 ;;		wreg
  7099 ;; Tracked objects:
  7100 ;;		On entry : 0/0
  7101 ;;		On exit  : 0/0
  7102 ;;		Unchanged: 0/0
  7103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7104 ;;      Params:         0       0       0       0       0       0       0       0
  7105 ;;      Locals:         0       0       0       0       0       0       0       0
  7106 ;;      Temps:          0       0       0       0       0       0       0       0
  7107 ;;      Totals:         0       0       0       0       0       0       0       0
  7108 ;;Total ram usage:        0 bytes
  7109 ;; Hardware stack levels used:    1
  7110 ;; Hardware stack levels required when called:    5
  7111 ;; This function calls:
  7112 ;;		Nothing
  7113 ;; This function is called by:
  7114 ;;		_SYSTEM_Initialize
  7115 ;;		_main
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           
  7120                           ;psect for function _OPA2_Initialize
  7121  0E38                     _OPA2_Initialize:
  7122                           
  7123                           ;opa2.c: 61: OPA2CON = 0xC2;
  7124                           
  7125                           ;incstack = 0
  7126                           ; Regs used in _OPA2_Initialize: [wreg]
  7127  0E38  30C2               	movlw	194
  7128  0E39  002A               	movlb	10	; select bank10
  7129  0E3A  0095               	movwf	21	;volatile
  7130  0E3B  0008               	return
  7131  0E3C                     __end_of_OPA2_Initialize:
  7132                           
  7133                           	psect	text28
  7134  0E34                     __ptext28:	
  7135 ;; *************** function _OPA1_Initialize *****************
  7136 ;; Defined at:
  7137 ;;		line 58 in file "mcc_generated_files/opa1.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;		None
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;		None
  7142 ;; Return value:  Size  Location     Type
  7143 ;;                  1    wreg      void 
  7144 ;; Registers used:
  7145 ;;		wreg
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7151 ;;      Params:         0       0       0       0       0       0       0       0
  7152 ;;      Locals:         0       0       0       0       0       0       0       0
  7153 ;;      Temps:          0       0       0       0       0       0       0       0
  7154 ;;      Totals:         0       0       0       0       0       0       0       0
  7155 ;;Total ram usage:        0 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    5
  7158 ;; This function calls:
  7159 ;;		Nothing
  7160 ;; This function is called by:
  7161 ;;		_SYSTEM_Initialize
  7162 ;;		_main
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           
  7167                           ;psect for function _OPA1_Initialize
  7168  0E34                     _OPA1_Initialize:
  7169                           
  7170                           ;opa1.c: 61: OPA1CON = 0xC2;
  7171                           
  7172                           ;incstack = 0
  7173                           ; Regs used in _OPA1_Initialize: [wreg]
  7174  0E34  30C2               	movlw	194
  7175  0E35  002A               	movlb	10	; select bank10
  7176  0E36  0091               	movwf	17	;volatile
  7177  0E37  0008               	return
  7178  0E38                     __end_of_OPA1_Initialize:
  7179                           
  7180                           	psect	text29
  7181  0EB4                     __ptext29:	
  7182 ;; *************** function _EXT_INT_Initialize *****************
  7183 ;; Defined at:
  7184 ;;		line 135 in file "mcc_generated_files/ext_int.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;		None
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;		None
  7189 ;; Return value:  Size  Location     Type
  7190 ;;                  1    wreg      void 
  7191 ;; Registers used:
  7192 ;;		wreg, status,2, status,0, pclath, cstack
  7193 ;; Tracked objects:
  7194 ;;		On entry : 0/0
  7195 ;;		On exit  : 0/0
  7196 ;;		Unchanged: 0/0
  7197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7198 ;;      Params:         0       0       0       0       0       0       0       0
  7199 ;;      Locals:         0       0       0       0       0       0       0       0
  7200 ;;      Temps:          0       0       0       0       0       0       0       0
  7201 ;;      Totals:         0       0       0       0       0       0       0       0
  7202 ;;Total ram usage:        0 bytes
  7203 ;; Hardware stack levels used:    1
  7204 ;; Hardware stack levels required when called:    6
  7205 ;; This function calls:
  7206 ;;		_INT_SetInterruptHandler
  7207 ;; This function is called by:
  7208 ;;		_SYSTEM_Initialize
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           
  7213                           ;psect for function _EXT_INT_Initialize
  7214  0EB4                     _EXT_INT_Initialize:
  7215                           
  7216                           ;ext_int.c: 140: (INTCONbits.INTF = 0);
  7217                           
  7218                           ;incstack = 0
  7219                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7220  0EB4  108B               	bcf	11,1	;volatile
  7221                           
  7222                           ;ext_int.c: 141: (OPTION_REGbits.INTEDG = 0);
  7223  0EB5  0021               	movlb	1	; select bank1
  7224  0EB6  1315               	bcf	21,6	;volatile
  7225                           
  7226                           ;ext_int.c: 143: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  7227  0EB7  30CD               	movlw	low _INT_DefaultInterruptHandler
  7228  0EB8  00C6               	movwf	INT_SetInterruptHandler@InterruptHandler^(0+128)
  7229  0EB9  3003               	movlw	high _INT_DefaultInterruptHandler
  7230  0EBA  00C7               	movwf	(INT_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7231  0EBB  318E  2683         	fcall	_INT_SetInterruptHandler
  7232                           
  7233                           ;ext_int.c: 144: (INTCONbits.INTE = 1);
  7234  0EBD  160B               	bsf	11,4	;volatile
  7235  0EBE  0008               	return
  7236  0EBF                     __end_of_EXT_INT_Initialize:
  7237                           
  7238                           	psect	text30
  7239  0E83                     __ptext30:	
  7240 ;; *************** function _INT_SetInterruptHandler *****************
  7241 ;; Defined at:
  7242 ;;		line 71 in file "mcc_generated_files/ext_int.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  7245 ;;		 -> INT_DefaultInterruptHandler(1), 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;		None
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  1    wreg      void 
  7250 ;; Registers used:
  7251 ;;		wreg
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7257 ;;      Params:         0       0       2       0       0       0       0       0
  7258 ;;      Locals:         0       0       0       0       0       0       0       0
  7259 ;;      Temps:          0       0       0       0       0       0       0       0
  7260 ;;      Totals:         0       0       2       0       0       0       0       0
  7261 ;;Total ram usage:        2 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    5
  7264 ;; This function calls:
  7265 ;;		Nothing
  7266 ;; This function is called by:
  7267 ;;		_EXT_INT_Initialize
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           
  7272                           ;psect for function _INT_SetInterruptHandler
  7273  0E83                     _INT_SetInterruptHandler:
  7274                           
  7275                           ;ext_int.c: 72: INT_InterruptHandler = InterruptHandler;
  7276                           
  7277                           ;incstack = 0
  7278                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  7279  0E83  0021               	movlb	1	; select bank1
  7280  0E84  0847               	movf	(INT_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7281  0E85  0020               	movlb	0	; select bank0
  7282  0E86  00CB               	movwf	_INT_InterruptHandler+1
  7283  0E87  0021               	movlb	1	; select bank1
  7284  0E88  0846               	movf	INT_SetInterruptHandler@InterruptHandler^(0+128),w
  7285  0E89  0020               	movlb	0	; select bank0
  7286  0E8A  00CA               	movwf	_INT_InterruptHandler
  7287  0E8B  0008               	return
  7288  0E8C                     __end_of_INT_SetInterruptHandler:
  7289                           
  7290                           	psect	text31
  7291  0F32                     __ptext31:	
  7292 ;; *************** function _EUSART_Initialize *****************
  7293 ;; Defined at:
  7294 ;;		line 66 in file "mcc_generated_files/eusart.c"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;		None
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;		None
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  1    wreg      void 
  7301 ;; Registers used:
  7302 ;;		wreg, status,2, status,0, pclath, cstack
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7308 ;;      Params:         0       0       0       0       0       0       0       0
  7309 ;;      Locals:         0       0       0       0       0       0       0       0
  7310 ;;      Temps:          0       0       0       0       0       0       0       0
  7311 ;;      Totals:         0       0       0       0       0       0       0       0
  7312 ;;Total ram usage:        0 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    6
  7315 ;; This function calls:
  7316 ;;		_EUSART_SetErrorHandler
  7317 ;;		_EUSART_SetFramingErrorHandler
  7318 ;;		_EUSART_SetOverrunErrorHandler
  7319 ;; This function is called by:
  7320 ;;		_SYSTEM_Initialize
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           
  7325                           ;psect for function _EUSART_Initialize
  7326  0F32                     _EUSART_Initialize:
  7327                           
  7328                           ;eusart.c: 71: BAUD1CON = 0x08;
  7329                           
  7330                           ;incstack = 0
  7331                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7332  0F32  3008               	movlw	8
  7333  0F33  0023               	movlb	3	; select bank3
  7334  0F34  009F               	movwf	31	;volatile
  7335                           
  7336                           ;eusart.c: 74: RC1STA = 0x90;
  7337  0F35  3090               	movlw	144
  7338  0F36  009D               	movwf	29	;volatile
  7339                           
  7340                           ;eusart.c: 77: TX1STA = 0x24;
  7341  0F37  3024               	movlw	36
  7342  0F38  009E               	movwf	30	;volatile
  7343                           
  7344                           ;eusart.c: 80: SP1BRGL = 0x08;
  7345  0F39  3008               	movlw	8
  7346  0F3A  009B               	movwf	27	;volatile
  7347                           
  7348                           ;eusart.c: 83: SP1BRGH = 0x00;
  7349  0F3B  019C               	clrf	28	;volatile
  7350                           
  7351                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  7352  0F3C  3000               	movlw	0
  7353  0F3D  0021               	movlb	1	; select bank1
  7354  0F3E  00C6               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  7355  0F3F  3000               	movlw	0
  7356  0F40  00C7               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  7357  0F41  318E  2671  318F   	fcall	_EUSART_SetFramingErrorHandler
  7358                           
  7359                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  7360  0F44  3000               	movlw	0
  7361  0F45  0021               	movlb	1	; select bank1
  7362  0F46  00C6               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  7363  0F47  3000               	movlw	0
  7364  0F48  00C7               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  7365  0F49  318E  267A  318F   	fcall	_EUSART_SetOverrunErrorHandler
  7366                           
  7367                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  7368  0F4C  3000               	movlw	0
  7369  0F4D  0021               	movlb	1	; select bank1
  7370  0F4E  00C6               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  7371  0F4F  3000               	movlw	0
  7372  0F50  00C7               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  7373  0F51  318E  2668         	fcall	_EUSART_SetErrorHandler
  7374                           
  7375                           ;eusart.c: 90: eusartRxLastError.status = 0;
  7376  0F53  0020               	movlb	0	; select bank0
  7377  0F54  01D6               	clrf	_eusartRxLastError	;volatile
  7378  0F55  0008               	return
  7379  0F56                     __end_of_EUSART_Initialize:
  7380                           
  7381                           	psect	text32
  7382  0E7A                     __ptext32:	
  7383 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7384 ;; Defined at:
  7385 ;;		line 170 in file "mcc_generated_files/eusart.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7388 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;		None
  7391 ;; Return value:  Size  Location     Type
  7392 ;;                  1    wreg      void 
  7393 ;; Registers used:
  7394 ;;		wreg
  7395 ;; Tracked objects:
  7396 ;;		On entry : 0/0
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7400 ;;      Params:         0       0       2       0       0       0       0       0
  7401 ;;      Locals:         0       0       0       0       0       0       0       0
  7402 ;;      Temps:          0       0       0       0       0       0       0       0
  7403 ;;      Totals:         0       0       2       0       0       0       0       0
  7404 ;;Total ram usage:        2 bytes
  7405 ;; Hardware stack levels used:    1
  7406 ;; Hardware stack levels required when called:    5
  7407 ;; This function calls:
  7408 ;;		Nothing
  7409 ;; This function is called by:
  7410 ;;		_EUSART_Initialize
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           
  7415                           ;psect for function _EUSART_SetOverrunErrorHandler
  7416  0E7A                     _EUSART_SetOverrunErrorHandler:
  7417                           
  7418                           ;eusart.c: 171: EUSART_OverrunErrorHandler = interruptHandler;
  7419                           
  7420                           ;incstack = 0
  7421                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7422  0E7A  0021               	movlb	1	; select bank1
  7423  0E7B  0847               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  7424  0E7C  0020               	movlb	0	; select bank0
  7425  0E7D  00CF               	movwf	_EUSART_OverrunErrorHandler+1
  7426  0E7E  0021               	movlb	1	; select bank1
  7427  0E7F  0846               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  7428  0E80  0020               	movlb	0	; select bank0
  7429  0E81  00CE               	movwf	_EUSART_OverrunErrorHandler
  7430  0E82  0008               	return
  7431  0E83                     __end_of_EUSART_SetOverrunErrorHandler:
  7432                           
  7433                           	psect	text33
  7434  0E71                     __ptext33:	
  7435 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7436 ;; Defined at:
  7437 ;;		line 166 in file "mcc_generated_files/eusart.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7440 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;		None
  7443 ;; Return value:  Size  Location     Type
  7444 ;;                  1    wreg      void 
  7445 ;; Registers used:
  7446 ;;		wreg
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7452 ;;      Params:         0       0       2       0       0       0       0       0
  7453 ;;      Locals:         0       0       0       0       0       0       0       0
  7454 ;;      Temps:          0       0       0       0       0       0       0       0
  7455 ;;      Totals:         0       0       2       0       0       0       0       0
  7456 ;;Total ram usage:        2 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    5
  7459 ;; This function calls:
  7460 ;;		Nothing
  7461 ;; This function is called by:
  7462 ;;		_EUSART_Initialize
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           
  7467                           ;psect for function _EUSART_SetFramingErrorHandler
  7468  0E71                     _EUSART_SetFramingErrorHandler:
  7469                           
  7470                           ;eusart.c: 167: EUSART_FramingErrorHandler = interruptHandler;
  7471                           
  7472                           ;incstack = 0
  7473                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7474  0E71  0021               	movlb	1	; select bank1
  7475  0E72  0847               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  7476  0E73  0020               	movlb	0	; select bank0
  7477  0E74  00D1               	movwf	_EUSART_FramingErrorHandler+1
  7478  0E75  0021               	movlb	1	; select bank1
  7479  0E76  0846               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  7480  0E77  0020               	movlb	0	; select bank0
  7481  0E78  00D0               	movwf	_EUSART_FramingErrorHandler
  7482  0E79  0008               	return
  7483  0E7A                     __end_of_EUSART_SetFramingErrorHandler:
  7484                           
  7485                           	psect	text34
  7486  0E68                     __ptext34:	
  7487 ;; *************** function _EUSART_SetErrorHandler *****************
  7488 ;; Defined at:
  7489 ;;		line 174 in file "mcc_generated_files/eusart.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7492 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;		None
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  1    wreg      void 
  7497 ;; Registers used:
  7498 ;;		wreg
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7504 ;;      Params:         0       0       2       0       0       0       0       0
  7505 ;;      Locals:         0       0       0       0       0       0       0       0
  7506 ;;      Temps:          0       0       0       0       0       0       0       0
  7507 ;;      Totals:         0       0       2       0       0       0       0       0
  7508 ;;Total ram usage:        2 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; Hardware stack levels required when called:    5
  7511 ;; This function calls:
  7512 ;;		Nothing
  7513 ;; This function is called by:
  7514 ;;		_EUSART_Initialize
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           
  7519                           ;psect for function _EUSART_SetErrorHandler
  7520  0E68                     _EUSART_SetErrorHandler:
  7521                           
  7522                           ;eusart.c: 175: EUSART_ErrorHandler = interruptHandler;
  7523                           
  7524                           ;incstack = 0
  7525                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7526  0E68  0021               	movlb	1	; select bank1
  7527  0E69  0847               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  7528  0E6A  0020               	movlb	0	; select bank0
  7529  0E6B  00CD               	movwf	_EUSART_ErrorHandler+1
  7530  0E6C  0021               	movlb	1	; select bank1
  7531  0E6D  0846               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  7532  0E6E  0020               	movlb	0	; select bank0
  7533  0E6F  00CC               	movwf	_EUSART_ErrorHandler
  7534  0E70  0008               	return
  7535  0E71                     __end_of_EUSART_SetErrorHandler:
  7536                           
  7537                           	psect	text35
  7538  0E40                     __ptext35:	
  7539 ;; *************** function _DAC_Initialize *****************
  7540 ;; Defined at:
  7541 ;;		line 58 in file "mcc_generated_files/dac.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;		None
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;		None
  7546 ;; Return value:  Size  Location     Type
  7547 ;;                  1    wreg      void 
  7548 ;; Registers used:
  7549 ;;		wreg
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7555 ;;      Params:         0       0       0       0       0       0       0       0
  7556 ;;      Locals:         0       0       0       0       0       0       0       0
  7557 ;;      Temps:          0       0       0       0       0       0       0       0
  7558 ;;      Totals:         0       0       0       0       0       0       0       0
  7559 ;;Total ram usage:        0 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    5
  7562 ;; This function calls:
  7563 ;;		Nothing
  7564 ;; This function is called by:
  7565 ;;		_SYSTEM_Initialize
  7566 ;;		_main
  7567 ;; This function uses a non-reentrant model
  7568 ;;
  7569                           
  7570                           
  7571                           ;psect for function _DAC_Initialize
  7572  0E40                     _DAC_Initialize:
  7573                           
  7574                           ;dac.c: 61: DAC1CON0 = 0x80;
  7575                           
  7576                           ;incstack = 0
  7577                           ; Regs used in _DAC_Initialize: [wreg]
  7578  0E40  3080               	movlw	128
  7579  0E41  0022               	movlb	2	; select bank2
  7580  0E42  0098               	movwf	24	;volatile
  7581                           
  7582                           ;dac.c: 63: DAC1CON1 = 0xFF;
  7583  0E43  30FF               	movlw	255
  7584  0E44  0099               	movwf	25	;volatile
  7585  0E45  0008               	return
  7586  0E46                     __end_of_DAC_Initialize:
  7587                           
  7588                           	psect	intentry
  7589  0004                     __pintentry:	
  7590 ;; *************** function _INTERRUPT_InterruptManager *****************
  7591 ;; Defined at:
  7592 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;		None
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  1    wreg      void 
  7599 ;; Registers used:
  7600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7606 ;;      Params:         0       0       0       0       0       0       0       0
  7607 ;;      Locals:         0       0       0       0       0       0       0       0
  7608 ;;      Temps:          0       0       0       0       0       0       0       0
  7609 ;;      Totals:         0       0       0       0       0       0       0       0
  7610 ;;Total ram usage:        0 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:    4
  7613 ;; This function calls:
  7614 ;;		_INT_ISR
  7615 ;;		_PIN_MANAGER_IOC
  7616 ;;		_TMR4_ISR
  7617 ;; This function is called by:
  7618 ;;		Interrupt level 1
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622  0004                     _INTERRUPT_InterruptManager:
  7623                           
  7624                           ;incstack = 0
  7625  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7626                           
  7627                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7628  0005  3180               	pagesel	$
  7629                           
  7630                           ;interrupt_manager.c: 55: if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
  7631  0006  1A0B               	btfsc	11,4	;volatile
  7632  0007  1C8B               	btfss	11,1	;volatile
  7633  0008  280D               	goto	i1l134
  7634                           
  7635                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: INT_ISR();
  7636  0009  318E  2630  3180   	fcall	_INT_ISR
  7637                           
  7638                           ;interrupt_manager.c: 58: }
  7639  000C  281E               	goto	i1l142
  7640  000D                     i1l134:
  7641                           
  7642                           ;interrupt_manager.c: 59: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  7643  000D  198B               	btfsc	11,3	;volatile
  7644  000E  1C0B               	btfss	11,0	;volatile
  7645  000F  2814               	goto	i1l136
  7646                           
  7647                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: PIN_MANAGER_IOC();
  7648  0010  3180  2002  3180   	fcall	_PIN_MANAGER_IOC
  7649                           
  7650                           ;interrupt_manager.c: 62: }
  7651  0013  281E               	goto	i1l142
  7652  0014                     i1l136:
  7653                           
  7654                           ;interrupt_manager.c: 63: else if(INTCONbits.PEIE == 1)
  7655  0014  1F0B               	btfss	11,6	;volatile
  7656  0015  281E               	goto	i1l142
  7657                           
  7658                           ;interrupt_manager.c: 64: {;interrupt_manager.c: 65: if(PIE2bits.TMR4IE == 1 && PIR2bits
      +                          .TMR4IF == 1)
  7659  0016  0021               	movlb	1	; select bank1
  7660  0017  1C92               	btfss	18,1	;volatile
  7661  0018  281E               	goto	i1l142
  7662  0019  0020               	movlb	0	; select bank0
  7663  001A  1C92               	btfss	18,1	;volatile
  7664  001B  281E               	goto	i1l142
  7665                           
  7666                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: TMR4_ISR();
  7667  001C  318E  26BF         	fcall	_TMR4_ISR
  7668  001E                     i1l142:	
  7669                           ;interrupt_manager.c: 68: }
  7670                           
  7671  001E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7672  001F  0009               	retfie
  7673  0020                     __end_of_INTERRUPT_InterruptManager:
  7674                           
  7675                           	psect	text37
  7676  0EBF                     __ptext37:	
  7677 ;; *************** function _TMR4_ISR *****************
  7678 ;; Defined at:
  7679 ;;		line 119 in file "mcc_generated_files/tmr4.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;		None
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;		None
  7684 ;; Return value:  Size  Location     Type
  7685 ;;                  1    wreg      void 
  7686 ;; Registers used:
  7687 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7693 ;;      Params:         0       0       0       0       0       0       0       0
  7694 ;;      Locals:         0       0       0       0       0       0       0       0
  7695 ;;      Temps:          0       0       0       0       0       0       0       0
  7696 ;;      Totals:         0       0       0       0       0       0       0       0
  7697 ;;Total ram usage:        0 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; Hardware stack levels required when called:    3
  7700 ;; This function calls:
  7701 ;;		Absolute function
  7702 ;;		_TMR4_DefaultInterruptHandler
  7703 ;; This function is called by:
  7704 ;;		_INTERRUPT_InterruptManager
  7705 ;; This function uses a non-reentrant model
  7706 ;;
  7707                           
  7708                           
  7709                           ;psect for function _TMR4_ISR
  7710  0EBF                     _TMR4_ISR:
  7711                           
  7712                           ;tmr4.c: 123: PIR2bits.TMR4IF = 0;
  7713                           
  7714                           ;incstack = 0
  7715                           ; Regs used in _TMR4_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7716  0EBF  0020               	movlb	0	; select bank0
  7717  0EC0  1092               	bcf	18,1	;volatile
  7718                           
  7719                           ;tmr4.c: 125: if(TMR4_InterruptHandler)
  7720  0EC1  0844               	movf	_TMR4_InterruptHandler,w
  7721  0EC2  0445               	iorwf	_TMR4_InterruptHandler+1,w
  7722  0EC3  1903               	btfsc	3,2
  7723  0EC4  0008               	return
  7724                           
  7725                           ;tmr4.c: 126: {;tmr4.c: 127: TMR4_InterruptHandler();
  7726  0EC5  0845               	movf	_TMR4_InterruptHandler+1,w
  7727  0EC6  008A               	movwf	10
  7728  0EC7  0844               	movf	_TMR4_InterruptHandler,w
  7729  0EC8  000A               	callw
  7730  0EC9  318E               	pagesel	$
  7731  0ECA  0008               	return
  7732  0ECB                     __end_of_TMR4_ISR:
  7733                           
  7734                           	psect	text38
  7735  071B                     __ptext38:	
  7736 ;; *************** function _TMR4_DefaultInterruptHandler *****************
  7737 ;; Defined at:
  7738 ;;		line 147 in file "mcc_generated_files/tmr4.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;		None
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;		None
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  1    wreg      void 
  7745 ;; Registers used:
  7746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7752 ;;      Params:         0       0       0       0       0       0       0       0
  7753 ;;      Locals:         0       0       0       0       0       0       0       0
  7754 ;;      Temps:          0       2       0       0       0       0       0       0
  7755 ;;      Totals:         0       2       0       0       0       0       0       0
  7756 ;;Total ram usage:        2 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    2
  7759 ;; This function calls:
  7760 ;;		i1_battery_voltage
  7761 ;;		i1_setCurrent
  7762 ;; This function is called by:
  7763 ;;		_TMR4_Initialize
  7764 ;;		_TMR4_ISR
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           
  7769                           ;psect for function _TMR4_DefaultInterruptHandler
  7770  071B                     _TMR4_DefaultInterruptHandler:
  7771                           
  7772                           ;tmr4.c: 152: if (currentIsOn){
  7773                           
  7774                           ;incstack = 0
  7775                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  7776  071B  0020               	movlb	0	; select bank0
  7777  071C  085D               	movf	_currentIsOn,w
  7778  071D  1903               	btfsc	3,2
  7779  071E  2F49               	goto	i1l401
  7780                           
  7781                           ;tmr4.c: 153: currentIsOn = 0;
  7782  071F  01DD               	clrf	_currentIsOn
  7783                           
  7784                           ;tmr4.c: 154: if (0 == frequencyValue[frequencyIndex]){
  7785  0720  3548               	lslf	_frequencyIndex,w
  7786  0721  3EBA               	addlw	(low (_frequencyValue| 0))& (0+255)
  7787  0722  0086               	movwf	6
  7788  0723  0187               	clrf	7
  7789  0724  0016               	moviw fsr1++
  7790  0725  0401               	iorwf	1,w
  7791  0726  1D03               	btfss	3,2
  7792  0727  2F3B               	goto	i1l2942
  7793  0728                     i1l2940:
  7794                           
  7795                           ;tmr4.c: 156: setCurrent(currentValue[currentIndex], battery_voltage());
  7796  0728  3546               	lslf	_currentIndex,w
  7797  0729  3EA4               	addlw	(low (_currentValue| 0))& (0+255)
  7798  072A  0086               	movwf	6
  7799  072B  0187               	clrf	7
  7800  072C  3F40               	moviw [0]fsr1
  7801  072D  00B0               	movwf	i1setCurrent@microamps
  7802  072E  3F41               	moviw [1]fsr1
  7803  072F  00B1               	movwf	i1setCurrent@microamps+1
  7804  0730  3187  27AB  3187   	fcall	i1_battery_voltage
  7805  0733  0020               	movlb	0	; select bank0
  7806  0734  082F               	movf	?i1_battery_voltage+1,w
  7807  0735  00B3               	movwf	i1setCurrent@Vdd_mv+1
  7808  0736  082E               	movf	?i1_battery_voltage,w
  7809  0737  00B2               	movwf	i1setCurrent@Vdd_mv
  7810  0738  3182  2225         	fcall	i1_setCurrent
  7811                           
  7812                           ;tmr4.c: 157: } else {
  7813  073A  0008               	return
  7814  073B                     i1l2942:
  7815                           
  7816                           ;tmr4.c: 158: setCurrent(0, battery_voltage());
  7817  073B  3000               	movlw	0
  7818  073C  00B0               	movwf	i1setCurrent@microamps
  7819  073D  00B1               	movwf	i1setCurrent@microamps+1
  7820  073E  3187  27AB  3187   	fcall	i1_battery_voltage
  7821  0741  0020               	movlb	0	; select bank0
  7822  0742  082F               	movf	?i1_battery_voltage+1,w
  7823  0743  00B3               	movwf	i1setCurrent@Vdd_mv+1
  7824  0744  082E               	movf	?i1_battery_voltage,w
  7825  0745  00B2               	movwf	i1setCurrent@Vdd_mv
  7826  0746  3182  2225         	fcall	i1_setCurrent
  7827  0748  0008               	return
  7828  0749                     i1l401:
  7829                           
  7830                           ;tmr4.c: 161: currentIsOn = 1;
  7831  0749  01DD               	clrf	_currentIsOn
  7832  074A  0ADD               	incf	_currentIsOn,f
  7833  074B  2F28               	goto	i1l2940
  7834  074C                     __end_of_TMR4_DefaultInterruptHandler:
  7835                           
  7836                           	psect	text39
  7837  0225                     __ptext39:	
  7838 ;; *************** function i1_setCurrent *****************
  7839 ;; Defined at:
  7840 ;;		line 235 in file "main.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;  microamps       2   16[BANK0 ] int 
  7843 ;;  Vdd_mv          2   18[BANK0 ] int 
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;  DACValue        2   28[BANK0 ] int 
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  1    wreg      void 
  7848 ;; Registers used:
  7849 ;;		wreg, status,2, status,0, pclath, cstack
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7855 ;;      Params:         0       4       0       0       0       0       0       0
  7856 ;;      Locals:         0       2       0       0       0       0       0       0
  7857 ;;      Temps:          0       8       0       0       0       0       0       0
  7858 ;;      Totals:         0      14       0       0       0       0       0       0
  7859 ;;Total ram usage:       14 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    1
  7862 ;; This function calls:
  7863 ;;		i1___aldiv
  7864 ;;		i1___awdiv
  7865 ;;		i1___lldiv
  7866 ;;		i1___lmul
  7867 ;; This function is called by:
  7868 ;;		_TMR4_DefaultInterruptHandler
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           
  7873                           ;psect for function i1_setCurrent
  7874  0225                     i1_setCurrent:
  7875                           
  7876                           ;main.c: 237: Vdac_mv = Vdd_mv - ((uint32_t)(4700) * microamps + 500) / 1000;
  7877                           
  7878                           ;incstack = 0
  7879                           ; Regs used in i1_setCurrent: [wreg+status,2+status,0+pclath+cstack]
  7880  0225  3000               	movlw	0
  7881  0226  0020               	movlb	0	; select bank0
  7882  0227  00A3               	movwf	i1___lldiv@divisor+3
  7883  0228  3000               	movlw	0
  7884  0229  00A2               	movwf	i1___lldiv@divisor+2
  7885  022A  3003               	movlw	3
  7886  022B  00A1               	movwf	i1___lldiv@divisor+1
  7887  022C  30E8               	movlw	232
  7888  022D  00A0               	movwf	i1___lldiv@divisor
  7889  022E  30F4               	movlw	244
  7890  022F  00B4               	movwf	??i1_setCurrent
  7891  0230  3001               	movlw	1
  7892  0231  00B5               	movwf	??i1_setCurrent+1
  7893  0232  3000               	movlw	0
  7894  0233  00B6               	movwf	??i1_setCurrent+2
  7895  0234  3000               	movlw	0
  7896  0235  00B7               	movwf	??i1_setCurrent+3
  7897  0236  0830               	movf	i1setCurrent@microamps,w
  7898  0237  00F0               	movwf	i1___lmul@multiplier
  7899  0238  0831               	movf	i1setCurrent@microamps+1,w
  7900  0239  00F1               	movwf	i1___lmul@multiplier+1
  7901  023A  0D89               	rlf	9,f
  7902  023B  3B89               	subwfb	9,f
  7903  023C  0989               	comf	9,f
  7904  023D  00F2               	movwf	i1___lmul@multiplier+2
  7905  023E  00F3               	movwf	i1___lmul@multiplier+3
  7906  023F  3000               	movlw	0
  7907  0240  00F7               	movwf	i1___lmul@multiplicand+3
  7908  0241  3000               	movlw	0
  7909  0242  00F6               	movwf	i1___lmul@multiplicand+2
  7910  0243  3012               	movlw	18
  7911  0244  00F5               	movwf	i1___lmul@multiplicand+1
  7912  0245  305C               	movlw	92
  7913  0246  00F4               	movwf	i1___lmul@multiplicand
  7914  0247  3187  277C  3182   	fcall	i1___lmul
  7915  024A  0870               	movf	?i1___lmul,w
  7916  024B  0020               	movlb	0	; select bank0
  7917  024C  07B4               	addwf	??i1_setCurrent,f
  7918  024D  0871               	movf	?i1___lmul+1,w
  7919  024E  3DB5               	addwfc	??i1_setCurrent+1,f
  7920  024F  0872               	movf	?i1___lmul+2,w
  7921  0250  3DB6               	addwfc	??i1_setCurrent+2,f
  7922  0251  0873               	movf	?i1___lmul+3,w
  7923  0252  3DB7               	addwfc	??i1_setCurrent+3,f
  7924  0253  0837               	movf	??i1_setCurrent+3,w
  7925  0254  00A7               	movwf	i1___lldiv@dividend+3
  7926  0255  0836               	movf	??i1_setCurrent+2,w
  7927  0256  00A6               	movwf	i1___lldiv@dividend+2
  7928  0257  0835               	movf	??i1_setCurrent+1,w
  7929  0258  00A5               	movwf	i1___lldiv@dividend+1
  7930  0259  0834               	movf	??i1_setCurrent,w
  7931  025A  00A4               	movwf	i1___lldiv@dividend
  7932  025B  3184  24DC  3182   	fcall	i1___lldiv
  7933  025E  0020               	movlb	0	; select bank0
  7934  025F  0820               	movf	?i1___lldiv,w
  7935  0260  0232               	subwf	i1setCurrent@Vdd_mv,w
  7936  0261  0021               	movlb	1	; select bank1
  7937  0262  00EE               	movwf	_Vdac_mv^(0+128)
  7938  0263  0020               	movlb	0	; select bank0
  7939  0264  0821               	movf	?i1___lldiv+1,w
  7940  0265  3B33               	subwfb	i1setCurrent@Vdd_mv+1,w
  7941  0266  0021               	movlb	1	; select bank1
  7942  0267  00EF               	movwf	(_Vdac_mv+1)^(0+128)
  7943                           
  7944                           ;main.c: 238: int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  7945  0268  0020               	movlb	0	; select bank0
  7946  0269  0832               	movf	i1setCurrent@Vdd_mv,w
  7947  026A  00A0               	movwf	i1___aldiv@divisor
  7948  026B  0833               	movf	i1setCurrent@Vdd_mv+1,w
  7949  026C  00A1               	movwf	i1___aldiv@divisor+1
  7950  026D  0D89               	rlf	9,f
  7951  026E  3B89               	subwfb	9,f
  7952  026F  0989               	comf	9,f
  7953  0270  00A2               	movwf	i1___aldiv@divisor+2
  7954  0271  00A3               	movwf	i1___aldiv@divisor+3
  7955  0272  3002               	movlw	2
  7956  0273  00F0               	movwf	i1___awdiv@divisor
  7957  0274  3000               	movlw	0
  7958  0275  00F1               	movwf	i1___awdiv@divisor+1
  7959  0276  0833               	movf	i1setCurrent@Vdd_mv+1,w
  7960  0277  00F3               	movwf	i1___awdiv@dividend+1
  7961  0278  0832               	movf	i1setCurrent@Vdd_mv,w
  7962  0279  00F2               	movwf	i1___awdiv@dividend
  7963  027A  3185  25D2  3182   	fcall	i1___awdiv
  7964  027D  0870               	movf	?i1___awdiv,w
  7965  027E  0020               	movlb	0	; select bank0
  7966  027F  00B4               	movwf	??i1_setCurrent
  7967  0280  0871               	movf	?i1___awdiv+1,w
  7968  0281  00B5               	movwf	??i1_setCurrent+1
  7969  0282  3000               	movlw	0
  7970  0283  1BB5               	btfsc	??i1_setCurrent+1,7
  7971  0284  30FF               	movlw	255
  7972  0285  00B6               	movwf	??i1_setCurrent+2
  7973  0286  00B7               	movwf	??i1_setCurrent+3
  7974  0287  0021               	movlb	1	; select bank1
  7975  0288  086E               	movf	_Vdac_mv^(0+128),w
  7976  0289  0020               	movlb	0	; select bank0
  7977  028A  00B8               	movwf	??i1_setCurrent+4
  7978  028B  0021               	movlb	1	; select bank1
  7979  028C  086F               	movf	(_Vdac_mv+1)^(0+128),w
  7980  028D  0020               	movlb	0	; select bank0
  7981  028E  00B9               	movwf	??i1_setCurrent+5
  7982  028F  01BA               	clrf	??i1_setCurrent+6
  7983  0290  01BB               	clrf	??i1_setCurrent+7
  7984  0291  3008               	movlw	8
  7985  0292                     u189_25:
  7986  0292  35B8               	lslf	??i1_setCurrent+4,f
  7987  0293  0DB9               	rlf	??i1_setCurrent+5,f
  7988  0294  0DBA               	rlf	??i1_setCurrent+6,f
  7989  0295  0DBB               	rlf	??i1_setCurrent+7,f
  7990  0296  0B89               	decfsz	9,f
  7991  0297  2A92               	goto	u189_25
  7992  0298  0838               	movf	??i1_setCurrent+4,w
  7993  0299  07B4               	addwf	??i1_setCurrent,f
  7994  029A  0839               	movf	??i1_setCurrent+5,w
  7995  029B  3DB5               	addwfc	??i1_setCurrent+1,f
  7996  029C  083A               	movf	??i1_setCurrent+6,w
  7997  029D  3DB6               	addwfc	??i1_setCurrent+2,f
  7998  029E  083B               	movf	??i1_setCurrent+7,w
  7999  029F  3DB7               	addwfc	??i1_setCurrent+3,f
  8000  02A0  0837               	movf	??i1_setCurrent+3,w
  8001  02A1  00A7               	movwf	i1___aldiv@dividend+3
  8002  02A2  0836               	movf	??i1_setCurrent+2,w
  8003  02A3  00A6               	movwf	i1___aldiv@dividend+2
  8004  02A4  0835               	movf	??i1_setCurrent+1,w
  8005  02A5  00A5               	movwf	i1___aldiv@dividend+1
  8006  02A6  0834               	movf	??i1_setCurrent,w
  8007  02A7  00A4               	movwf	i1___aldiv@dividend
  8008  02A8  3183  234B  3182   	fcall	i1___aldiv
  8009  02AB  0020               	movlb	0	; select bank0
  8010  02AC  0821               	movf	?i1___aldiv+1,w
  8011  02AD  00BD               	movwf	i1setCurrent@DACValue+1
  8012  02AE  0820               	movf	?i1___aldiv,w
  8013  02AF  00BC               	movwf	i1setCurrent@DACValue
  8014                           
  8015                           ;main.c: 239: if(DACValue > 255){DACValue = 255;}
  8016  02B0  083D               	movf	i1setCurrent@DACValue+1,w
  8017  02B1  3A80               	xorlw	128
  8018  02B2  00B4               	movwf	??i1_setCurrent
  8019  02B3  3081               	movlw	129
  8020  02B4  0234               	subwf	??i1_setCurrent,w
  8021  02B5  1D03               	skipz
  8022  02B6  2AB9               	goto	u190_25
  8023  02B7  3000               	movlw	0
  8024  02B8  023C               	subwf	i1setCurrent@DACValue,w
  8025  02B9                     u190_25:
  8026  02B9  1C03               	skipc
  8027  02BA  2AC0               	goto	i1l2280
  8028  02BB  30FF               	movlw	255
  8029  02BC  0020               	movlb	0	; select bank0
  8030  02BD  00BC               	movwf	i1setCurrent@DACValue
  8031  02BE  3000               	movlw	0
  8032  02BF  00BD               	movwf	i1setCurrent@DACValue+1
  8033  02C0                     i1l2280:
  8034                           
  8035                           ;main.c: 240: if(DACValue < 0){DACValue = 0;}
  8036  02C0  0020               	movlb	0	; select bank0
  8037  02C1  1FBD               	btfss	i1setCurrent@DACValue+1,7
  8038  02C2  2AC5               	goto	i1l2284
  8039  02C3  01BC               	clrf	i1setCurrent@DACValue
  8040  02C4  01BD               	clrf	i1setCurrent@DACValue+1
  8041  02C5                     i1l2284:
  8042                           
  8043                           ;main.c: 241: DAC1CON1 = DACValue;
  8044  02C5  083C               	movf	i1setCurrent@DACValue,w
  8045  02C6  0022               	movlb	2	; select bank2
  8046  02C7  0099               	movwf	25	;volatile
  8047  02C8  0008               	return
  8048  02C9                     __end_ofi1_setCurrent:
  8049                           
  8050                           	psect	text40
  8051  077C                     __ptext40:	
  8052 ;; *************** function i1___lmul *****************
  8053 ;; Defined at:
  8054 ;;		line 15 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/Umul32.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;  multiplier      4    0[COMMON] unsigned long 
  8057 ;;  multiplicand    4    4[COMMON] unsigned long 
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;  product         4    8[COMMON] unsigned long 
  8060 ;; Return value:  Size  Location     Type
  8061 ;;                  4    0[COMMON] unsigned long 
  8062 ;; Registers used:
  8063 ;;		wreg, status,2, status,0
  8064 ;; Tracked objects:
  8065 ;;		On entry : 0/0
  8066 ;;		On exit  : 0/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8069 ;;      Params:         8       0       0       0       0       0       0       0
  8070 ;;      Locals:         4       0       0       0       0       0       0       0
  8071 ;;      Temps:          0       0       0       0       0       0       0       0
  8072 ;;      Totals:        12       0       0       0       0       0       0       0
  8073 ;;Total ram usage:       12 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; This function calls:
  8076 ;;		Nothing
  8077 ;; This function is called by:
  8078 ;;		i1_setCurrent
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           
  8083                           ;psect for function i1___lmul
  8084  077C                     i1___lmul:
  8085                           
  8086                           ;incstack = 0
  8087                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  8088  077C  3000               	movlw	0
  8089  077D  00FB               	movwf	i1___lmul@product+3
  8090  077E  3000               	movlw	0
  8091  077F  00FA               	movwf	i1___lmul@product+2
  8092  0780  3000               	movlw	0
  8093  0781  00F9               	movwf	i1___lmul@product+1
  8094  0782  3000               	movlw	0
  8095  0783  00F8               	movwf	i1___lmul@product
  8096  0784                     i1l1944:
  8097  0784  1C70               	btfss	i1___lmul@multiplier,0
  8098  0785  2F8E               	goto	i1l1948
  8099  0786  0874               	movf	i1___lmul@multiplicand,w
  8100  0787  07F8               	addwf	i1___lmul@product,f
  8101  0788  0875               	movf	i1___lmul@multiplicand+1,w
  8102  0789  3DF9               	addwfc	i1___lmul@product+1,f
  8103  078A  0876               	movf	i1___lmul@multiplicand+2,w
  8104  078B  3DFA               	addwfc	i1___lmul@product+2,f
  8105  078C  0877               	movf	i1___lmul@multiplicand+3,w
  8106  078D  3DFB               	addwfc	i1___lmul@product+3,f
  8107  078E                     i1l1948:
  8108  078E  3001               	movlw	1
  8109  078F                     u114_25:
  8110  078F  35F4               	lslf	i1___lmul@multiplicand,f
  8111  0790  0DF5               	rlf	i1___lmul@multiplicand+1,f
  8112  0791  0DF6               	rlf	i1___lmul@multiplicand+2,f
  8113  0792  0DF7               	rlf	i1___lmul@multiplicand+3,f
  8114  0793  0B89               	decfsz	9,f
  8115  0794  2F8F               	goto	u114_25
  8116  0795  3001               	movlw	1
  8117  0796                     u115_25:
  8118  0796  36F3               	lsrf	i1___lmul@multiplier+3,f
  8119  0797  0CF2               	rrf	i1___lmul@multiplier+2,f
  8120  0798  0CF1               	rrf	i1___lmul@multiplier+1,f
  8121  0799  0CF0               	rrf	i1___lmul@multiplier,f
  8122  079A  0B89               	decfsz	9,f
  8123  079B  2F96               	goto	u115_25
  8124  079C  0873               	movf	i1___lmul@multiplier+3,w
  8125  079D  0472               	iorwf	i1___lmul@multiplier+2,w
  8126  079E  0471               	iorwf	i1___lmul@multiplier+1,w
  8127  079F  0470               	iorwf	i1___lmul@multiplier,w
  8128  07A0  1D03               	skipz
  8129  07A1  2F84               	goto	i1l1944
  8130  07A2  087B               	movf	i1___lmul@product+3,w
  8131  07A3  00F3               	movwf	?i1___lmul+3
  8132  07A4  087A               	movf	i1___lmul@product+2,w
  8133  07A5  00F2               	movwf	?i1___lmul+2
  8134  07A6  0879               	movf	i1___lmul@product+1,w
  8135  07A7  00F1               	movwf	?i1___lmul+1
  8136  07A8  0878               	movf	i1___lmul@product,w
  8137  07A9  00F0               	movwf	?i1___lmul
  8138  07AA  0008               	return
  8139  07AB                     __end_ofi1___lmul:
  8140                           
  8141                           	psect	text41
  8142  04DC                     __ptext41:	
  8143 ;; *************** function i1___lldiv *****************
  8144 ;; Defined at:
  8145 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/__lldiv.c"
  8146 ;; Parameters:    Size  Location     Type
  8147 ;;  divisor         4    0[BANK0 ] unsigned long 
  8148 ;;  dividend        4    4[BANK0 ] unsigned long 
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;  quotient        4    8[BANK0 ] unsigned long 
  8151 ;;  counter         1   12[BANK0 ] unsigned char 
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  4    0[BANK0 ] unsigned long 
  8154 ;; Registers used:
  8155 ;;		wreg, status,2, status,0
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8161 ;;      Params:         0       8       0       0       0       0       0       0
  8162 ;;      Locals:         0       5       0       0       0       0       0       0
  8163 ;;      Temps:          1       0       0       0       0       0       0       0
  8164 ;;      Totals:         1      13       0       0       0       0       0       0
  8165 ;;Total ram usage:       14 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; This function calls:
  8168 ;;		Nothing
  8169 ;; This function is called by:
  8170 ;;		i1_setCurrent
  8171 ;; This function uses a non-reentrant model
  8172 ;;
  8173                           
  8174                           
  8175                           ;psect for function i1___lldiv
  8176  04DC                     i1___lldiv:
  8177                           
  8178                           ;incstack = 0
  8179                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
  8180  04DC  3000               	movlw	0
  8181  04DD  0020               	movlb	0	; select bank0
  8182  04DE  00AB               	movwf	i1___lldiv@quotient+3
  8183  04DF  3000               	movlw	0
  8184  04E0  00AA               	movwf	i1___lldiv@quotient+2
  8185  04E1  3000               	movlw	0
  8186  04E2  00A9               	movwf	i1___lldiv@quotient+1
  8187  04E3  3000               	movlw	0
  8188  04E4  00A8               	movwf	i1___lldiv@quotient
  8189  04E5  0823               	movf	i1___lldiv@divisor+3,w
  8190  04E6  0422               	iorwf	i1___lldiv@divisor+2,w
  8191  04E7  0421               	iorwf	i1___lldiv@divisor+1,w
  8192  04E8  0420               	iorwf	i1___lldiv@divisor,w
  8193  04E9  1903               	skipnz
  8194  04EA  2D26               	goto	i1l1976
  8195  04EB  01AC               	clrf	i1___lldiv@counter
  8196  04EC  0AAC               	incf	i1___lldiv@counter,f
  8197  04ED                     i1l1962:
  8198  04ED  1BA3               	btfsc	i1___lldiv@divisor+3,7
  8199  04EE  2CFB               	goto	i1l1964
  8200  04EF  3001               	movlw	1
  8201  04F0                     u118_25:
  8202  04F0  35A0               	lslf	i1___lldiv@divisor,f
  8203  04F1  0DA1               	rlf	i1___lldiv@divisor+1,f
  8204  04F2  0DA2               	rlf	i1___lldiv@divisor+2,f
  8205  04F3  0DA3               	rlf	i1___lldiv@divisor+3,f
  8206  04F4  0B89               	decfsz	9,f
  8207  04F5  2CF0               	goto	u118_25
  8208  04F6  3001               	movlw	1
  8209  04F7  00FC               	movwf	??i1___lldiv
  8210  04F8  087C               	movf	??i1___lldiv,w
  8211  04F9  07AC               	addwf	i1___lldiv@counter,f
  8212  04FA  2CED               	goto	i1l1962
  8213  04FB                     i1l1964:
  8214  04FB  3001               	movlw	1
  8215  04FC                     u120_25:
  8216  04FC  35A8               	lslf	i1___lldiv@quotient,f
  8217  04FD  0DA9               	rlf	i1___lldiv@quotient+1,f
  8218  04FE  0DAA               	rlf	i1___lldiv@quotient+2,f
  8219  04FF  0DAB               	rlf	i1___lldiv@quotient+3,f
  8220  0500  0B89               	decfsz	9,f
  8221  0501  2CFC               	goto	u120_25
  8222  0502  0823               	movf	i1___lldiv@divisor+3,w
  8223  0503  0227               	subwf	i1___lldiv@dividend+3,w
  8224  0504  1D03               	skipz
  8225  0505  2D10               	goto	u121_25
  8226  0506  0822               	movf	i1___lldiv@divisor+2,w
  8227  0507  0226               	subwf	i1___lldiv@dividend+2,w
  8228  0508  1D03               	skipz
  8229  0509  2D10               	goto	u121_25
  8230  050A  0821               	movf	i1___lldiv@divisor+1,w
  8231  050B  0225               	subwf	i1___lldiv@dividend+1,w
  8232  050C  1D03               	skipz
  8233  050D  2D10               	goto	u121_25
  8234  050E  0820               	movf	i1___lldiv@divisor,w
  8235  050F  0224               	subwf	i1___lldiv@dividend,w
  8236  0510                     u121_25:
  8237  0510  1C03               	skipc
  8238  0511  2D1B               	goto	i1l1972
  8239  0512  0820               	movf	i1___lldiv@divisor,w
  8240  0513  02A4               	subwf	i1___lldiv@dividend,f
  8241  0514  0821               	movf	i1___lldiv@divisor+1,w
  8242  0515  3BA5               	subwfb	i1___lldiv@dividend+1,f
  8243  0516  0822               	movf	i1___lldiv@divisor+2,w
  8244  0517  3BA6               	subwfb	i1___lldiv@dividend+2,f
  8245  0518  0823               	movf	i1___lldiv@divisor+3,w
  8246  0519  3BA7               	subwfb	i1___lldiv@dividend+3,f
  8247  051A  1428               	bsf	i1___lldiv@quotient,0
  8248  051B                     i1l1972:
  8249  051B  3001               	movlw	1
  8250  051C                     u122_25:
  8251  051C  36A3               	lsrf	i1___lldiv@divisor+3,f
  8252  051D  0CA2               	rrf	i1___lldiv@divisor+2,f
  8253  051E  0CA1               	rrf	i1___lldiv@divisor+1,f
  8254  051F  0CA0               	rrf	i1___lldiv@divisor,f
  8255  0520  0B89               	decfsz	9,f
  8256  0521  2D1C               	goto	u122_25
  8257  0522  3001               	movlw	1
  8258  0523  02AC               	subwf	i1___lldiv@counter,f
  8259  0524  1D03               	btfss	3,2
  8260  0525  2CFB               	goto	i1l1964
  8261  0526                     i1l1976:
  8262  0526  082B               	movf	i1___lldiv@quotient+3,w
  8263  0527  00A3               	movwf	?i1___lldiv+3
  8264  0528  082A               	movf	i1___lldiv@quotient+2,w
  8265  0529  00A2               	movwf	?i1___lldiv+2
  8266  052A  0829               	movf	i1___lldiv@quotient+1,w
  8267  052B  00A1               	movwf	?i1___lldiv+1
  8268  052C  0828               	movf	i1___lldiv@quotient,w
  8269  052D  00A0               	movwf	?i1___lldiv
  8270  052E  0008               	return
  8271  052F                     __end_ofi1___lldiv:
  8272                           
  8273                           	psect	text42
  8274  05D2                     __ptext42:	
  8275 ;; *************** function i1___awdiv *****************
  8276 ;; Defined at:
  8277 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/awdiv.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;  divisor         2    0[COMMON] int 
  8280 ;;  dividend        2    2[COMMON] int 
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  quotient        2    7[COMMON] int 
  8283 ;;  sign            1    6[COMMON] unsigned char 
  8284 ;;  counter         1    5[COMMON] unsigned char 
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  2    0[COMMON] int 
  8287 ;; Registers used:
  8288 ;;		wreg, status,2, status,0
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8294 ;;      Params:         4       0       0       0       0       0       0       0
  8295 ;;      Locals:         4       0       0       0       0       0       0       0
  8296 ;;      Temps:          1       0       0       0       0       0       0       0
  8297 ;;      Totals:         9       0       0       0       0       0       0       0
  8298 ;;Total ram usage:        9 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; This function calls:
  8301 ;;		Nothing
  8302 ;; This function is called by:
  8303 ;;		i1_setCurrent
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           
  8308                           ;psect for function i1___awdiv
  8309  05D2                     i1___awdiv:
  8310                           
  8311                           ;incstack = 0
  8312                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  8313  05D2  01F6               	clrf	i1___awdiv@sign
  8314  05D3  1FF1               	btfss	i1___awdiv@divisor+1,7
  8315  05D4  2DDC               	goto	i1l2028
  8316  05D5  09F0               	comf	i1___awdiv@divisor,f
  8317  05D6  09F1               	comf	i1___awdiv@divisor+1,f
  8318  05D7  0AF0               	incf	i1___awdiv@divisor,f
  8319  05D8  1903               	skipnz
  8320  05D9  0AF1               	incf	i1___awdiv@divisor+1,f
  8321  05DA  01F6               	clrf	i1___awdiv@sign
  8322  05DB  0AF6               	incf	i1___awdiv@sign,f
  8323  05DC                     i1l2028:
  8324  05DC  1FF3               	btfss	i1___awdiv@dividend+1,7
  8325  05DD  2DE7               	goto	i1l2034
  8326  05DE  09F2               	comf	i1___awdiv@dividend,f
  8327  05DF  09F3               	comf	i1___awdiv@dividend+1,f
  8328  05E0  0AF2               	incf	i1___awdiv@dividend,f
  8329  05E1  1903               	skipnz
  8330  05E2  0AF3               	incf	i1___awdiv@dividend+1,f
  8331  05E3  3001               	movlw	1
  8332  05E4  00F4               	movwf	??i1___awdiv
  8333  05E5  0874               	movf	??i1___awdiv,w
  8334  05E6  06F6               	xorwf	i1___awdiv@sign,f
  8335  05E7                     i1l2034:
  8336  05E7  01F7               	clrf	i1___awdiv@quotient
  8337  05E8  01F8               	clrf	i1___awdiv@quotient+1
  8338  05E9  0870               	movf	i1___awdiv@divisor,w
  8339  05EA  0471               	iorwf	i1___awdiv@divisor+1,w
  8340  05EB  1903               	btfsc	3,2
  8341  05EC  2E16               	goto	i1l2056
  8342  05ED  01F5               	clrf	i1___awdiv@counter
  8343  05EE  0AF5               	incf	i1___awdiv@counter,f
  8344  05EF                     i1l2044:
  8345  05EF  1BF1               	btfsc	i1___awdiv@divisor+1,7
  8346  05F0  2DFB               	goto	i1l2046
  8347  05F1  3001               	movlw	1
  8348  05F2                     u137_25:
  8349  05F2  35F0               	lslf	i1___awdiv@divisor,f
  8350  05F3  0DF1               	rlf	i1___awdiv@divisor+1,f
  8351  05F4  0B89               	decfsz	9,f
  8352  05F5  2DF2               	goto	u137_25
  8353  05F6  3001               	movlw	1
  8354  05F7  00F4               	movwf	??i1___awdiv
  8355  05F8  0874               	movf	??i1___awdiv,w
  8356  05F9  07F5               	addwf	i1___awdiv@counter,f
  8357  05FA  2DEF               	goto	i1l2044
  8358  05FB                     i1l2046:
  8359  05FB  3001               	movlw	1
  8360  05FC                     u139_25:
  8361  05FC  35F7               	lslf	i1___awdiv@quotient,f
  8362  05FD  0DF8               	rlf	i1___awdiv@quotient+1,f
  8363  05FE  0B89               	decfsz	9,f
  8364  05FF  2DFC               	goto	u139_25
  8365  0600  0871               	movf	i1___awdiv@divisor+1,w
  8366  0601  0273               	subwf	i1___awdiv@dividend+1,w
  8367  0602  1D03               	skipz
  8368  0603  2E06               	goto	u140_25
  8369  0604  0870               	movf	i1___awdiv@divisor,w
  8370  0605  0272               	subwf	i1___awdiv@dividend,w
  8371  0606                     u140_25:
  8372  0606  1C03               	skipc
  8373  0607  2E0D               	goto	i1l2052
  8374  0608  0870               	movf	i1___awdiv@divisor,w
  8375  0609  02F2               	subwf	i1___awdiv@dividend,f
  8376  060A  0871               	movf	i1___awdiv@divisor+1,w
  8377  060B  3BF3               	subwfb	i1___awdiv@dividend+1,f
  8378  060C  1477               	bsf	i1___awdiv@quotient,0
  8379  060D                     i1l2052:
  8380  060D  3001               	movlw	1
  8381  060E                     u141_25:
  8382  060E  36F1               	lsrf	i1___awdiv@divisor+1,f
  8383  060F  0CF0               	rrf	i1___awdiv@divisor,f
  8384  0610  0B89               	decfsz	9,f
  8385  0611  2E0E               	goto	u141_25
  8386  0612  3001               	movlw	1
  8387  0613  02F5               	subwf	i1___awdiv@counter,f
  8388  0614  1D03               	btfss	3,2
  8389  0615  2DFB               	goto	i1l2046
  8390  0616                     i1l2056:
  8391  0616  0876               	movf	i1___awdiv@sign,w
  8392  0617  1903               	btfsc	3,2
  8393  0618  2E1E               	goto	i1l2060
  8394  0619  09F7               	comf	i1___awdiv@quotient,f
  8395  061A  09F8               	comf	i1___awdiv@quotient+1,f
  8396  061B  0AF7               	incf	i1___awdiv@quotient,f
  8397  061C  1903               	skipnz
  8398  061D  0AF8               	incf	i1___awdiv@quotient+1,f
  8399  061E                     i1l2060:
  8400  061E  0878               	movf	i1___awdiv@quotient+1,w
  8401  061F  00F1               	movwf	?i1___awdiv+1
  8402  0620  0877               	movf	i1___awdiv@quotient,w
  8403  0621  00F0               	movwf	?i1___awdiv
  8404  0622  0008               	return
  8405  0623                     __end_ofi1___awdiv:
  8406                           
  8407                           	psect	text43
  8408  07AB                     __ptext43:	
  8409 ;; *************** function i1_battery_voltage *****************
  8410 ;; Defined at:
  8411 ;;		line 91 in file "main.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;		None
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;		None
  8416 ;; Return value:  Size  Location     Type
  8417 ;;                  2   14[BANK0 ] unsigned int 
  8418 ;; Registers used:
  8419 ;;		wreg, status,2, status,0, pclath, cstack
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8425 ;;      Params:         0       2       0       0       0       0       0       0
  8426 ;;      Locals:         0       0       0       0       0       0       0       0
  8427 ;;      Temps:          0       0       0       0       0       0       0       0
  8428 ;;      Totals:         0       2       0       0       0       0       0       0
  8429 ;;Total ram usage:        2 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    1
  8432 ;; This function calls:
  8433 ;;		i1___aldiv
  8434 ;; This function is called by:
  8435 ;;		_TMR4_DefaultInterruptHandler
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           
  8440                           ;psect for function i1_battery_voltage
  8441  07AB                     i1_battery_voltage:
  8442                           
  8443                           ;main.c: 93: FVRCON = 0b10000001;
  8444                           
  8445                           ;incstack = 0
  8446                           ; Regs used in i1_battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  8447  07AB  3081               	movlw	129
  8448  07AC  0022               	movlb	2	; select bank2
  8449  07AD  0097               	movwf	23	;volatile
  8450                           
  8451                           ;main.c: 94: ADCON0 = 0b01111101;
  8452  07AE  307D               	movlw	125
  8453  07AF  0021               	movlb	1	; select bank1
  8454  07B0  009D               	movwf	29	;volatile
  8455                           
  8456                           ;main.c: 95: ADCON1 = 0b10010000;
  8457  07B1  3090               	movlw	144
  8458  07B2  009E               	movwf	30	;volatile
  8459  07B3                     i1l510:	
  8460                           ;main.c: 96: while(!FVRCONbits.FVRRDY){ }
  8461                           
  8462  07B3  0022               	movlb	2	; select bank2
  8463  07B4  1F17               	btfss	23,6	;volatile
  8464  07B5  2FB3               	goto	i1l510
  8465                           
  8466                           ;main.c: 97: __nop();
  8467  07B6  0000               	nop
  8468                           
  8469                           ;main.c: 98: __nop();
  8470  07B7  0000               	nop
  8471                           
  8472                           ;main.c: 99: __nop();
  8473  07B8  0000               	nop
  8474                           
  8475                           ;main.c: 100: __nop();
  8476  07B9  0000               	nop
  8477                           
  8478                           ;main.c: 101: __nop();
  8479  07BA  0000               	nop
  8480                           
  8481                           ;main.c: 102: ADCON0bits.GO_nDONE = 1;
  8482  07BB  0021               	movlb	1	; select bank1
  8483  07BC  149D               	bsf	29,1	;volatile
  8484  07BD                     i1l513:	
  8485                           ;main.c: 103: while(ADCON0bits.GO_nDONE){ }
  8486                           
  8487  07BD  189D               	btfsc	29,1	;volatile
  8488  07BE  2FBD               	goto	i1l513
  8489                           
  8490                           ;main.c: 104: ADCON0bits.ADON = 0;
  8491  07BF  101D               	bcf	29,0	;volatile
  8492                           
  8493                           ;main.c: 109: return 1047552L / ADRES;
  8494  07C0  081B               	movf	27,w	;volatile
  8495  07C1  0020               	movlb	0	; select bank0
  8496  07C2  00A0               	movwf	i1___aldiv@divisor
  8497  07C3  0021               	movlb	1	; select bank1
  8498  07C4  081C               	movf	28,w	;volatile
  8499  07C5  0020               	movlb	0	; select bank0
  8500  07C6  00A1               	movwf	i1___aldiv@divisor+1
  8501  07C7  01A2               	clrf	i1___aldiv@divisor+2
  8502  07C8  01A3               	clrf	i1___aldiv@divisor+3
  8503  07C9  3000               	movlw	0
  8504  07CA  00A7               	movwf	i1___aldiv@dividend+3
  8505  07CB  300F               	movlw	15
  8506  07CC  00A6               	movwf	i1___aldiv@dividend+2
  8507  07CD  30FC               	movlw	252
  8508  07CE  00A5               	movwf	i1___aldiv@dividend+1
  8509  07CF  3000               	movlw	0
  8510  07D0  00A4               	movwf	i1___aldiv@dividend
  8511  07D1  3183  234B         	fcall	i1___aldiv
  8512  07D3  0020               	movlb	0	; select bank0
  8513  07D4  0821               	movf	?i1___aldiv+1,w
  8514  07D5  00AF               	movwf	?i1_battery_voltage+1
  8515  07D6  0820               	movf	?i1___aldiv,w
  8516  07D7  00AE               	movwf	?i1_battery_voltage
  8517  07D8  0008               	return
  8518  07D9                     __end_ofi1_battery_voltage:
  8519                           
  8520                           	psect	text44
  8521  034B                     __ptext44:	
  8522 ;; *************** function i1___aldiv *****************
  8523 ;; Defined at:
  8524 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/aldiv.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;  divisor         4    0[BANK0 ] long 
  8527 ;;  dividend        4    4[BANK0 ] long 
  8528 ;; Auto vars:     Size  Location     Type
  8529 ;;  quotient        4   10[BANK0 ] long 
  8530 ;;  sign            1    9[BANK0 ] unsigned char 
  8531 ;;  counter         1    8[BANK0 ] unsigned char 
  8532 ;; Return value:  Size  Location     Type
  8533 ;;                  4    0[BANK0 ] long 
  8534 ;; Registers used:
  8535 ;;		wreg, status,2, status,0
  8536 ;; Tracked objects:
  8537 ;;		On entry : 0/0
  8538 ;;		On exit  : 0/0
  8539 ;;		Unchanged: 0/0
  8540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8541 ;;      Params:         0       8       0       0       0       0       0       0
  8542 ;;      Locals:         0       6       0       0       0       0       0       0
  8543 ;;      Temps:          1       0       0       0       0       0       0       0
  8544 ;;      Totals:         1      14       0       0       0       0       0       0
  8545 ;;Total ram usage:       15 bytes
  8546 ;; Hardware stack levels used:    1
  8547 ;; This function calls:
  8548 ;;		Nothing
  8549 ;; This function is called by:
  8550 ;;		i1_battery_voltage
  8551 ;;		i1_setCurrent
  8552 ;; This function uses a non-reentrant model
  8553 ;;
  8554                           
  8555                           
  8556                           ;psect for function i1___aldiv
  8557  034B                     i1___aldiv:
  8558                           
  8559                           ;incstack = 0
  8560                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
  8561  034B  0020               	movlb	0	; select bank0
  8562  034C  01A9               	clrf	i1___aldiv@sign
  8563  034D  1FA3               	btfss	i1___aldiv@divisor+3,7
  8564  034E  2B5C               	goto	i1l744
  8565  034F  09A0               	comf	i1___aldiv@divisor,f
  8566  0350  09A1               	comf	i1___aldiv@divisor+1,f
  8567  0351  09A2               	comf	i1___aldiv@divisor+2,f
  8568  0352  09A3               	comf	i1___aldiv@divisor+3,f
  8569  0353  0AA0               	incf	i1___aldiv@divisor,f
  8570  0354  1903               	skipnz
  8571  0355  0AA1               	incf	i1___aldiv@divisor+1,f
  8572  0356  1903               	skipnz
  8573  0357  0AA2               	incf	i1___aldiv@divisor+2,f
  8574  0358  1903               	skipnz
  8575  0359  0AA3               	incf	i1___aldiv@divisor+3,f
  8576  035A  01A9               	clrf	i1___aldiv@sign
  8577  035B  0AA9               	incf	i1___aldiv@sign,f
  8578  035C                     i1l744:
  8579  035C  1FA7               	btfss	i1___aldiv@dividend+3,7
  8580  035D  2B6D               	goto	i1l1990
  8581  035E  09A4               	comf	i1___aldiv@dividend,f
  8582  035F  09A5               	comf	i1___aldiv@dividend+1,f
  8583  0360  09A6               	comf	i1___aldiv@dividend+2,f
  8584  0361  09A7               	comf	i1___aldiv@dividend+3,f
  8585  0362  0AA4               	incf	i1___aldiv@dividend,f
  8586  0363  1903               	skipnz
  8587  0364  0AA5               	incf	i1___aldiv@dividend+1,f
  8588  0365  1903               	skipnz
  8589  0366  0AA6               	incf	i1___aldiv@dividend+2,f
  8590  0367  1903               	skipnz
  8591  0368  0AA7               	incf	i1___aldiv@dividend+3,f
  8592  0369  3001               	movlw	1
  8593  036A  00F9               	movwf	??i1___aldiv
  8594  036B  0879               	movf	??i1___aldiv,w
  8595  036C  06A9               	xorwf	i1___aldiv@sign,f
  8596  036D                     i1l1990:
  8597  036D  3000               	movlw	0
  8598  036E  00AD               	movwf	i1___aldiv@quotient+3
  8599  036F  3000               	movlw	0
  8600  0370  00AC               	movwf	i1___aldiv@quotient+2
  8601  0371  3000               	movlw	0
  8602  0372  00AB               	movwf	i1___aldiv@quotient+1
  8603  0373  3000               	movlw	0
  8604  0374  00AA               	movwf	i1___aldiv@quotient
  8605  0375  0823               	movf	i1___aldiv@divisor+3,w
  8606  0376  0422               	iorwf	i1___aldiv@divisor+2,w
  8607  0377  0421               	iorwf	i1___aldiv@divisor+1,w
  8608  0378  0420               	iorwf	i1___aldiv@divisor,w
  8609  0379  1903               	skipnz
  8610  037A  2BB6               	goto	i1l2012
  8611  037B  01A8               	clrf	i1___aldiv@counter
  8612  037C  0AA8               	incf	i1___aldiv@counter,f
  8613  037D                     i1l1998:
  8614  037D  1BA3               	btfsc	i1___aldiv@divisor+3,7
  8615  037E  2B8B               	goto	i1l2000
  8616  037F  3001               	movlw	1
  8617  0380                     u127_25:
  8618  0380  35A0               	lslf	i1___aldiv@divisor,f
  8619  0381  0DA1               	rlf	i1___aldiv@divisor+1,f
  8620  0382  0DA2               	rlf	i1___aldiv@divisor+2,f
  8621  0383  0DA3               	rlf	i1___aldiv@divisor+3,f
  8622  0384  0B89               	decfsz	9,f
  8623  0385  2B80               	goto	u127_25
  8624  0386  3001               	movlw	1
  8625  0387  00F9               	movwf	??i1___aldiv
  8626  0388  0879               	movf	??i1___aldiv,w
  8627  0389  07A8               	addwf	i1___aldiv@counter,f
  8628  038A  2B7D               	goto	i1l1998
  8629  038B                     i1l2000:
  8630  038B  3001               	movlw	1
  8631  038C                     u129_25:
  8632  038C  35AA               	lslf	i1___aldiv@quotient,f
  8633  038D  0DAB               	rlf	i1___aldiv@quotient+1,f
  8634  038E  0DAC               	rlf	i1___aldiv@quotient+2,f
  8635  038F  0DAD               	rlf	i1___aldiv@quotient+3,f
  8636  0390  0B89               	decfsz	9,f
  8637  0391  2B8C               	goto	u129_25
  8638  0392  0823               	movf	i1___aldiv@divisor+3,w
  8639  0393  0227               	subwf	i1___aldiv@dividend+3,w
  8640  0394  1D03               	skipz
  8641  0395  2BA0               	goto	u130_25
  8642  0396  0822               	movf	i1___aldiv@divisor+2,w
  8643  0397  0226               	subwf	i1___aldiv@dividend+2,w
  8644  0398  1D03               	skipz
  8645  0399  2BA0               	goto	u130_25
  8646  039A  0821               	movf	i1___aldiv@divisor+1,w
  8647  039B  0225               	subwf	i1___aldiv@dividend+1,w
  8648  039C  1D03               	skipz
  8649  039D  2BA0               	goto	u130_25
  8650  039E  0820               	movf	i1___aldiv@divisor,w
  8651  039F  0224               	subwf	i1___aldiv@dividend,w
  8652  03A0                     u130_25:
  8653  03A0  1C03               	skipc
  8654  03A1  2BAB               	goto	i1l2008
  8655  03A2  0820               	movf	i1___aldiv@divisor,w
  8656  03A3  02A4               	subwf	i1___aldiv@dividend,f
  8657  03A4  0821               	movf	i1___aldiv@divisor+1,w
  8658  03A5  3BA5               	subwfb	i1___aldiv@dividend+1,f
  8659  03A6  0822               	movf	i1___aldiv@divisor+2,w
  8660  03A7  3BA6               	subwfb	i1___aldiv@dividend+2,f
  8661  03A8  0823               	movf	i1___aldiv@divisor+3,w
  8662  03A9  3BA7               	subwfb	i1___aldiv@dividend+3,f
  8663  03AA  142A               	bsf	i1___aldiv@quotient,0
  8664  03AB                     i1l2008:
  8665  03AB  3001               	movlw	1
  8666  03AC                     u131_25:
  8667  03AC  36A3               	lsrf	i1___aldiv@divisor+3,f
  8668  03AD  0CA2               	rrf	i1___aldiv@divisor+2,f
  8669  03AE  0CA1               	rrf	i1___aldiv@divisor+1,f
  8670  03AF  0CA0               	rrf	i1___aldiv@divisor,f
  8671  03B0  0B89               	decfsz	9,f
  8672  03B1  2BAC               	goto	u131_25
  8673  03B2  3001               	movlw	1
  8674  03B3  02A8               	subwf	i1___aldiv@counter,f
  8675  03B4  1D03               	btfss	3,2
  8676  03B5  2B8B               	goto	i1l2000
  8677  03B6                     i1l2012:
  8678  03B6  0829               	movf	i1___aldiv@sign,w
  8679  03B7  1903               	btfsc	3,2
  8680  03B8  2BC4               	goto	i1l2016
  8681  03B9  09AA               	comf	i1___aldiv@quotient,f
  8682  03BA  09AB               	comf	i1___aldiv@quotient+1,f
  8683  03BB  09AC               	comf	i1___aldiv@quotient+2,f
  8684  03BC  09AD               	comf	i1___aldiv@quotient+3,f
  8685  03BD  0AAA               	incf	i1___aldiv@quotient,f
  8686  03BE  1903               	skipnz
  8687  03BF  0AAB               	incf	i1___aldiv@quotient+1,f
  8688  03C0  1903               	skipnz
  8689  03C1  0AAC               	incf	i1___aldiv@quotient+2,f
  8690  03C2  1903               	skipnz
  8691  03C3  0AAD               	incf	i1___aldiv@quotient+3,f
  8692  03C4                     i1l2016:
  8693  03C4  082D               	movf	i1___aldiv@quotient+3,w
  8694  03C5  00A3               	movwf	?i1___aldiv+3
  8695  03C6  082C               	movf	i1___aldiv@quotient+2,w
  8696  03C7  00A2               	movwf	?i1___aldiv+2
  8697  03C8  082B               	movf	i1___aldiv@quotient+1,w
  8698  03C9  00A1               	movwf	?i1___aldiv+1
  8699  03CA  082A               	movf	i1___aldiv@quotient,w
  8700  03CB  00A0               	movwf	?i1___aldiv
  8701  03CC  0008               	return
  8702  03CD                     __end_ofi1___aldiv:
  8703                           
  8704                           	psect	text45
  8705  0002                     __ptext45:	
  8706 ;; *************** function _PIN_MANAGER_IOC *****************
  8707 ;; Defined at:
  8708 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;		None
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;		None
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      void 
  8715 ;; Registers used:
  8716 ;;		None
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8722 ;;      Params:         0       0       0       0       0       0       0       0
  8723 ;;      Locals:         0       0       0       0       0       0       0       0
  8724 ;;      Temps:          0       0       0       0       0       0       0       0
  8725 ;;      Totals:         0       0       0       0       0       0       0       0
  8726 ;;Total ram usage:        0 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_INTERRUPT_InterruptManager
  8732 ;; This function uses a non-reentrant model
  8733 ;;
  8734                           
  8735                           
  8736                           ;psect for function _PIN_MANAGER_IOC
  8737  0002                     _PIN_MANAGER_IOC:
  8738                           
  8739                           ;incstack = 0
  8740                           ; Regs used in _PIN_MANAGER_IOC: []
  8741  0002  0008               	return
  8742  0003                     __end_of_PIN_MANAGER_IOC:
  8743                           
  8744                           	psect	text46
  8745  0E30                     __ptext46:	
  8746 ;; *************** function _INT_ISR *****************
  8747 ;; Defined at:
  8748 ;;		line 54 in file "mcc_generated_files/ext_int.c"
  8749 ;; Parameters:    Size  Location     Type
  8750 ;;		None
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;		None
  8753 ;; Return value:  Size  Location     Type
  8754 ;;                  1    wreg      void 
  8755 ;; Registers used:
  8756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8757 ;; Tracked objects:
  8758 ;;		On entry : 0/0
  8759 ;;		On exit  : 0/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8762 ;;      Params:         0       0       0       0       0       0       0       0
  8763 ;;      Locals:         0       0       0       0       0       0       0       0
  8764 ;;      Temps:          0       0       0       0       0       0       0       0
  8765 ;;      Totals:         0       0       0       0       0       0       0       0
  8766 ;;Total ram usage:        0 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; Hardware stack levels required when called:    2
  8769 ;; This function calls:
  8770 ;;		_INT_CallBack
  8771 ;; This function is called by:
  8772 ;;		_INTERRUPT_InterruptManager
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           
  8777                           ;psect for function _INT_ISR
  8778  0E30                     _INT_ISR:
  8779                           
  8780                           ;ext_int.c: 56: (INTCONbits.INTF = 0);
  8781                           
  8782                           ;incstack = 0
  8783                           ; Regs used in _INT_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8784  0E30  108B               	bcf	11,1	;volatile
  8785                           
  8786                           ;ext_int.c: 59: INT_CallBack();
  8787  0E31  318E  26A9         	fcall	_INT_CallBack
  8788  0E33  0008               	return
  8789  0E34                     __end_of_INT_ISR:
  8790                           
  8791                           	psect	text47
  8792  0EA9                     __ptext47:	
  8793 ;; *************** function _INT_CallBack *****************
  8794 ;; Defined at:
  8795 ;;		line 62 in file "mcc_generated_files/ext_int.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;		None
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;		None
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  1    wreg      void 
  8802 ;; Registers used:
  8803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8809 ;;      Params:         0       0       0       0       0       0       0       0
  8810 ;;      Locals:         0       0       0       0       0       0       0       0
  8811 ;;      Temps:          0       0       0       0       0       0       0       0
  8812 ;;      Totals:         0       0       0       0       0       0       0       0
  8813 ;;Total ram usage:        0 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    1
  8816 ;; This function calls:
  8817 ;;		Absolute function
  8818 ;;		_INT_DefaultInterruptHandler
  8819 ;; This function is called by:
  8820 ;;		_INT_ISR
  8821 ;; This function uses a non-reentrant model
  8822 ;;
  8823                           
  8824                           
  8825                           ;psect for function _INT_CallBack
  8826  0EA9                     _INT_CallBack:
  8827                           
  8828                           ;ext_int.c: 65: if(INT_InterruptHandler)
  8829                           
  8830                           ;incstack = 0
  8831                           ; Regs used in _INT_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8832  0EA9  0020               	movlb	0	; select bank0
  8833  0EAA  084A               	movf	_INT_InterruptHandler,w
  8834  0EAB  044B               	iorwf	_INT_InterruptHandler+1,w
  8835  0EAC  1903               	btfsc	3,2
  8836  0EAD  0008               	return
  8837                           
  8838                           ;ext_int.c: 66: {;ext_int.c: 67: INT_InterruptHandler();
  8839  0EAE  084B               	movf	_INT_InterruptHandler+1,w
  8840  0EAF  008A               	movwf	10
  8841  0EB0  084A               	movf	_INT_InterruptHandler,w
  8842  0EB1  000A               	callw
  8843  0EB2  318E               	pagesel	$
  8844  0EB3  0008               	return
  8845  0EB4                     __end_of_INT_CallBack:
  8846                           
  8847                           	psect	text48
  8848  03CD                     __ptext48:	
  8849 ;; *************** function _INT_DefaultInterruptHandler *****************
  8850 ;; Defined at:
  8851 ;;		line 76 in file "mcc_generated_files/ext_int.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;		None
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;  time            1    1[COMMON] unsigned char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8865 ;;      Params:         0       0       0       0       0       0       0       0
  8866 ;;      Locals:         1       0       0       0       0       0       0       0
  8867 ;;      Temps:          1       0       0       0       0       0       0       0
  8868 ;;      Totals:         2       0       0       0       0       0       0       0
  8869 ;;Total ram usage:        2 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; This function calls:
  8872 ;;		Nothing
  8873 ;; This function is called by:
  8874 ;;		_EXT_INT_Initialize
  8875 ;;		_INT_CallBack
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           
  8880                           ;psect for function _INT_DefaultInterruptHandler
  8881  03CD                     _INT_DefaultInterruptHandler:
  8882                           
  8883                           ;ext_int.c: 80: uint8_t time = TMR0;
  8884                           
  8885                           ;incstack = 0
  8886                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr1h+status,2+status,0]
  8887  03CD  0020               	movlb	0	; select bank0
  8888  03CE  0815               	movf	21,w	;volatile
  8889  03CF  00F0               	movwf	??_INT_DefaultInterruptHandler
  8890  03D0  0870               	movf	??_INT_DefaultInterruptHandler,w
  8891  03D1  00F1               	movwf	INT_DefaultInterruptHandler@time
  8892                           
  8893                           ;ext_int.c: 81: TMR0 = 0;
  8894  03D2  0195               	clrf	21	;volatile
  8895                           
  8896                           ;ext_int.c: 84: if (INTCONbits.TMR0IF){
  8897  03D3  190B               	btfsc	11,2	;volatile
  8898                           
  8899                           ;ext_int.c: 85: time = 0;
  8900  03D4  01F1               	clrf	INT_DefaultInterruptHandler@time
  8901                           
  8902                           ;ext_int.c: 86: };ext_int.c: 87: INTCONbits.TMR0IF = 0;
  8903  03D5  110B               	bcf	11,2	;volatile
  8904                           
  8905                           ;ext_int.c: 89: switch(ir_code.state){
  8906  03D6  2C27               	goto	i1l2124
  8907  03D7                     i1l2082:
  8908                           
  8909                           ;ext_int.c: 92: if (time >= 180 && time <= 243){
  8910  03D7  30B4               	movlw	180
  8911  03D8  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8912  03D9  1C03               	skipc
  8913  03DA  2C32               	goto	i1l267
  8914  03DB  30F4               	movlw	244
  8915  03DC  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8916  03DD  1803               	skipnc
  8917  03DE  2C32               	goto	i1l267
  8918                           
  8919                           ;ext_int.c: 93: ir_code.n_bits = 0;
  8920  03DF  01D7               	clrf	_ir_code
  8921                           
  8922                           ;ext_int.c: 94: ir_code.state = STATE_RECEIVING;
  8923  03E0  01D8               	clrf	_ir_code+1
  8924  03E1  0AD8               	incf	_ir_code+1,f
  8925                           
  8926                           ;ext_int.c: 95: stats[0] = time;
  8927  03E2  0871               	movf	INT_DefaultInterruptHandler@time,w
  8928  03E3  00F0               	movwf	??_INT_DefaultInterruptHandler
  8929  03E4  0870               	movf	??_INT_DefaultInterruptHandler,w
  8930  03E5  0022               	movlb	2	; select bank2
  8931  03E6  00A0               	movwf	_stats^(0+256)
  8932  03E7  2C32               	goto	i1l267
  8933  03E8                     i1l2092:
  8934                           
  8935                           ;ext_int.c: 100: ir_code.code <<= 1;
  8936  03E8  3001               	movlw	1
  8937  03E9                     u147_25:
  8938  03E9  35D9               	lslf	_ir_code+2,f
  8939  03EA  0DDA               	rlf	_ir_code+3,f
  8940  03EB  0DDB               	rlf	_ir_code+4,f
  8941  03EC  0DDC               	rlf	_ir_code+5,f
  8942  03ED  0B89               	decfsz	9,f
  8943  03EE  2BE9               	goto	u147_25
  8944                           
  8945                           ;ext_int.c: 101: if (time >= 29 && time <= 41){
  8946  03EF  301D               	movlw	29
  8947  03F0  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8948  03F1  1C03               	skipc
  8949  03F2  2C06               	goto	i1l2104
  8950  03F3  302A               	movlw	42
  8951  03F4  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8952  03F5  1803               	skipnc
  8953  03F6  2C06               	goto	i1l2104
  8954                           
  8955                           ;ext_int.c: 102: stats[1+ir_code.n_bits] = time;
  8956  03F7  0871               	movf	INT_DefaultInterruptHandler@time,w
  8957  03F8  00F0               	movwf	??_INT_DefaultInterruptHandler
  8958  03F9  0857               	movf	_ir_code,w
  8959  03FA  3E21               	addlw	(low ((_stats| (0+256)+1)))& (0+255)
  8960  03FB  0086               	movwf	6
  8961  03FC  3001               	movlw	1	; select bank2/3
  8962  03FD  0087               	movwf	7
  8963  03FE  0870               	movf	??_INT_DefaultInterruptHandler,w
  8964  03FF  0081               	movwf	1
  8965                           
  8966                           ;ext_int.c: 103: ir_code.code |= 1;
  8967  0400  1459               	bsf	_ir_code+2,0
  8968  0401                     i1l2102:
  8969                           
  8970                           ;ext_int.c: 104: ir_code.n_bits++;
  8971  0401  3001               	movlw	1
  8972  0402  00F0               	movwf	??_INT_DefaultInterruptHandler
  8973  0403  0870               	movf	??_INT_DefaultInterruptHandler,w
  8974  0404  07D7               	addwf	_ir_code,f
  8975                           
  8976                           ;ext_int.c: 105: } else if (time >= 14 && time <= 20){
  8977  0405  2C1A               	goto	i1l2114
  8978  0406                     i1l2104:
  8979  0406  300E               	movlw	14
  8980  0407  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8981  0408  1C03               	skipc
  8982  0409  2C18               	goto	i1l2112
  8983  040A  3015               	movlw	21
  8984  040B  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8985  040C  1803               	skipnc
  8986  040D  2C18               	goto	i1l2112
  8987                           
  8988                           ;ext_int.c: 106: stats[1+ir_code.n_bits] = time;
  8989  040E  0871               	movf	INT_DefaultInterruptHandler@time,w
  8990  040F  00F0               	movwf	??_INT_DefaultInterruptHandler
  8991  0410  0857               	movf	_ir_code,w
  8992  0411  3E21               	addlw	(low ((_stats| (0+256)+1)))& (0+255)
  8993  0412  0086               	movwf	6
  8994  0413  3001               	movlw	1	; select bank2/3
  8995  0414  0087               	movwf	7
  8996  0415  0870               	movf	??_INT_DefaultInterruptHandler,w
  8997  0416  0081               	movwf	1
  8998  0417  2C01               	goto	i1l2102
  8999  0418                     i1l2112:
  9000                           
  9001                           ;ext_int.c: 110: ir_code.state = STATE_RESET;
  9002  0418  01D8               	clrf	_ir_code+1
  9003                           
  9004                           ;ext_int.c: 111: break;
  9005  0419  2C32               	goto	i1l267
  9006  041A                     i1l2114:
  9007                           
  9008                           ;ext_int.c: 112: };ext_int.c: 113: if (32 == ir_code.n_bits){
  9009  041A  3020               	movlw	32
  9010  041B  0657               	xorwf	_ir_code,w
  9011  041C  1D03               	btfss	3,2
  9012  041D  2C32               	goto	i1l267
  9013                           
  9014                           ;ext_int.c: 116: if (ir_code.command == ((~ir_code.command_b) & 0xff)){
  9015  041E  0959               	comf	_ir_code+2,w
  9016  041F  065A               	xorwf	_ir_code+3,w
  9017  0420  1D03               	skipz
  9018  0421  2C18               	goto	i1l2112
  9019                           
  9020                           ;ext_int.c: 117: ir_code.state = STATE_DONE;
  9021  0422  3002               	movlw	2
  9022  0423  00F0               	movwf	??_INT_DefaultInterruptHandler
  9023  0424  0870               	movf	??_INT_DefaultInterruptHandler,w
  9024  0425  00D8               	movwf	_ir_code+1
  9025                           
  9026                           ;ext_int.c: 118: } else {
  9027  0426  2C32               	goto	i1l267
  9028  0427                     i1l2124:
  9029  0427  0858               	movf	_ir_code+1,w
  9030                           
  9031                           ; Switch size 1, requested type "simple"
  9032                           ; Number of cases is 3, Range of values is 0 to 2
  9033                           ; switch strategies available:
  9034                           ; Name         Instructions Cycles
  9035                           ; simple_byte           10     6 (average)
  9036                           ; direct_byte           12     6 (fixed)
  9037                           ; jumptable            260     6 (fixed)
  9038                           ;	Chosen strategy is simple_byte
  9039  0428  3A00               	xorlw	0	; case 0
  9040  0429  1903               	skipnz
  9041  042A  2BD7               	goto	i1l2082
  9042  042B  3A01               	xorlw	1	; case 1
  9043  042C  1903               	skipnz
  9044  042D  2BE8               	goto	i1l2092
  9045  042E  3A03               	xorlw	3	; case 2
  9046  042F  1903               	skipnz
  9047  0430  2C32               	goto	i1l267
  9048  0431  2C18               	goto	i1l2112
  9049  0432                     i1l267:
  9050                           
  9051                           ;ext_int.c: 132: INTCONbits.INTF = 0;
  9052  0432  108B               	bcf	11,1	;volatile
  9053  0433  0008               	return
  9054  0434                     __end_of_INT_DefaultInterruptHandler:
  9055  007E                     btemp	set	126	;btemp
  9056  007E                     int$flags	set	126
  9057  007E                     wtemp0	set	126
  9058                           
  9059                           	psect	config
  9060                           
  9061                           ;Config register CONFIG1 @ 0x8007
  9062                           ;	Oscillator Selection Bits
  9063                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  9064                           ;	Watchdog Timer Enable
  9065                           ;	WDTE = OFF, WDT disabled
  9066                           ;	Power-up Timer Enable
  9067                           ;	PWRTE = OFF, PWRT disabled
  9068                           ;	MCLR Pin Function Select
  9069                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  9070                           ;	Flash Program Memory Code Protection
  9071                           ;	CP = OFF, Program memory code protection is disabled
  9072                           ;	Brown-out Reset Enable
  9073                           ;	BOREN = OFF, Brown-out Reset disabled
  9074                           ;	Clock Out Enable
  9075                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
  9076                           ;	Internal/External Switchover Mode
  9077                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
  9078                           ;	Fail-Safe Clock Monitor Enable
  9079                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  9080  8007                     	org	32775
  9081  8007  21E4               	dw	8676
  9082                           
  9083                           ;Config register CONFIG2 @ 0x8008
  9084                           ;	Flash Memory Self-Write Protection
  9085                           ;	WRT = OFF, Write protection off
  9086                           ;	Peripheral Pin Select one-way control
  9087                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
  9088                           ;	Zero-cross detect disable
  9089                           ;	ZCDDIS = ON, Zero-cross detect circuit is disabled at POR
  9090                           ;	Phase Lock Loop enable
  9091                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
  9092                           ;	Stack Overflow/Underflow Reset Enable
  9093                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  9094                           ;	Brown-out Reset Voltage Selection
  9095                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  9096                           ;	Low-Power Brown Out Reset
  9097                           ;	LPBOR = OFF, Low-Power BOR is disabled
  9098                           ;	Low-Voltage Programming Enable
  9099                           ;	LVP = ON, Low-voltage programming enabled
  9100  8008                     	org	32776
  9101  8008  3EFF               	dw	16127

Data Sizes:
    Strings     55
    Constant    0
    Data        39
    BSS         69
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     32      62
    BANK1            80     35      80
    BANK2            80     13      46
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_3(CODE[15]), STR_2(CODE[19]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK0[6]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_setCurrent->i1___lldiv
    i1___lldiv->i1___lmul
    i1_battery_voltage->i1___aldiv
    i1___aldiv->i1___awdiv
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR4_ISR->_TMR4_DefaultInterruptHandler
    _TMR4_DefaultInterruptHandler->i1_setCurrent
    i1_setCurrent->i1_battery_voltage
    i1_battery_voltage->i1___aldiv

Critical Paths under _main in BANK1

    _startUp->_setLEDColor
    _process_remote_command->_setCurrent
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    ___lldiv->___lmul
    _selectSomething->_setLEDColor
    _selectFrequency->_printf
    _selectCurrent->_printf
    _printf->_putch
    _putch->_EUSART_Write
    _battery_voltage->___aldiv
    ___aldiv->___lmul
    _lowBattery->_setLEDColor
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_process_remote_command
    _process_remote_command->_setCurrent

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   56801
                                             11 BANK2      2     2      0
                     _DAC_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
                         _lowBattery
             _process_remote_command
                        _setLEDColor
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              4     4      0    6618
                                              4 BANK1      4     4      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0   35174
                                              8 BANK2      3     3      0
                    _battery_voltage
                             _printf
                      _selectCurrent
                    _selectFrequency
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setFrequency                                         5     3      2    2142
                                             27 BANK1      5     3      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _setCurrent                                          14    10      4    4139
                                             29 BANK1      6     2      4
                                              0 BANK2      8     8      0
                            ___aldiv
                            ___awdiv
                            ___lldiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     612
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     479
                                             12 BANK1     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     683
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    6550
                                              4 BANK1      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    7037
                                              9 BANK1      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    7037
                                              9 BANK1      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    17      2     487
                                              2 BANK1      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      62
                                              1 BANK1      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2    1159
                                             27 BANK1      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8    1159
                                             12 BANK1     15     7      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lowBattery                                           2     2      0    6550
                                              4 BANK1      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    6550
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     750
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     150
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     150
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     450
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0    2031
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR4_ISR                                             0     0      0    1831
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR4_DefaultInterruptHandler                         2     2      0    1831
                                             30 BANK0      2     2      0
                  i1_battery_voltage
                       i1_setCurrent
 ---------------------------------------------------------------------------------
 (9) i1_setCurrent                                        14    10      4    1427
                                             16 BANK0     14    10      4
                          i1___aldiv
                          i1___awdiv
                          i1___lldiv
                           i1___lmul
                  i1_battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___lmul                                           12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (10) i1___lldiv                                          14     6      8     214
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___awdiv                                           9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (9) i1_battery_voltage                                    2     0      2     404
                                             14 BANK0      2     0      2
                          i1___aldiv
 ---------------------------------------------------------------------------------
 (10) i1___aldiv                                          15     7      8     404
                                              9 COMMON     1     1      0
                                              0 BANK0     14     6      8
                          i1___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT_ISR                                              0     0      0     200
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (8) _INT_CallBack                                         0     0      0     200
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _INT_DefaultInterruptHandler                          2     2      0     200
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _lowBattery
     _setLEDColor
   _process_remote_command
     _battery_voltage
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
     _printf
       _putch
         _EUSART_Write
     _selectCurrent
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectFrequency
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___awdiv
       ___lldiv
         ___lmul (ARG)
       ___lmul
       _battery_voltage (ARG)
         ___aldiv
           ___awdiv (ARG)
           ___lmul (ARG)
     _setFrequency
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___lmul
     _setLEDColor
   _setLEDColor
   _startUp
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       i1_battery_voltage
         i1___aldiv
           i1___awdiv (ARG)
       i1_setCurrent
         i1___aldiv
           i1___awdiv (ARG)
         i1___awdiv
         i1___lldiv
           i1___lmul (ARG)
         i1___lmul
         i1_battery_voltage (ARG)
           i1___aldiv
             i1___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      C9       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     20      3E       6       77.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     23      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      D      2E      10       57.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      C9      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Jul 20 20:41:26 2020

                                 ___awdiv@sign 00CC                        __end_of_OPA1_Initialize 0E38  
                              _timer0ReloadVal 0055                                            l209 0EA1  
                                          l510 0FB0                                            l513 0FBA  
                                          l744 02DA                                            l587 0437  
                                          _PR2 001B                                            _PR4 0416  
               ?_EUSART_SetFramingErrorHandler 00C6                                _TMR2_Initialize 0E60  
                                          wreg 0009                                 i1___aldiv@sign 0029  
                     __size_of_selectFrequency 002A                                           l3000 065E  
                                         l3004 0663                                           l3100 00B7  
                                         l3112 00CD                                           l3104 00C0  
                                         l3122 00EF                                           l3114 00E1  
                                         l3132 00F8                                           l3134 00FC  
                                         l3150 0116                                           l3070 06AF  
                                         l3136 0100                                           l3152 0144  
                                         l3080 0057                                           l3146 0113  
                                         l3094 00A3                                           l3086 0072  
                                         l3096 00B0                                           l3088 0087  
                                         l2706 0EE4                                           l2722 0755  
                                         l2708 0EE8                                           l2812 0545  
                                         l2740 049A                                           l2718 0EF9  
                                         l2830 056B                                           l2822 054D  
                                         l2806 053A                                           l2750 04C8  
                                         l2742 04A8                                           l2726 075F  
                                         l2824 0559                                           l2834 0574  
                                         l2754 04D3                                           l2790 0334  
                                         l2838 057C                                           l2776 02FB  
                                         l2768 02EB                                           l2794 0342  
                                         l2786 0329                                           l2778 0309  
                                         l2962 0221                                           l2958 021C  
                                         STR_1 07FF                                           STR_2 0814  
                                         STR_3 0827                                           _LATA 010C  
                                         _LATB 010D                                __end_of_INT_ISR 0E34  
                                         u3007 0F68                                           _LATC 010E  
                                         u3017 0FE4                                           u2305 0767  
                                         u3027 0FF8                                           u2335 049D  
                                         u2425 02FE                                           u2355 04A9  
                                         u2445 030A                                           u2525 0550  
                                         u2365 04BD                                           u2455 031E  
                                         u2375 04C9                                           u2295 0760  
                                         u2465 032A                                           u2545 055A  
                                         u2555 0564                                           u2635 01E5  
                                         u2715 006B                                           u2565 056C  
                                         u2645 0215                                           u2735 009C  
                                         u2665 0657                                           u2907 045F  
                                         u2917 047A                                           u2695 06E3  
                                         u2927 06C0                                           u2937 06D0  
                                         u2947 015B                                           u2957 058E  
                                         u2967 05A2                                           u2977 05B6  
                                         u2897 0444                                           u2987 05CA  
                                         u2997 0F92                                           _TMR0 0015  
                                         _TMR2 001A                                           _TMR4 0415  
                      __end_of_OPA2_Initialize 0E3C                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _flag 00EA                              i1___lldiv@divisor 0020  
                                         _main 0434                                           _duty 0053  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                              i1___lldiv@counter 002C  
          __end_of_INT_DefaultInterruptHandler 0434                    _INT_DefaultInterruptHandler 03CD  
                                         start 0020                __end_of_INT_SetInterruptHandler 0E8C  
                   ??_TMR4_SetInterruptHandler 00C8                        __end_of_TMR0_Initialize 0E9F  
                                ?_EUSART_Write 0070                 __size_of_OSCILLATOR_Initialize 0008  
                __end_of_OSCILLATOR_Initialize 0E60                                __end_of___aldiv 034B  
                                        ?_main 0070                                 i1___awdiv@sign 0076  
                              __end_of___awdiv 0581                                          _ADRES 009B  
                              __end_of___lldiv 04DC                                ___awdiv@divisor 00C6  
                                        _T2CON 001C                                          _T4CON 0417  
                                        i1l142 001E                                          i1l134 000D  
                                        i1l136 0014                                          i1l401 0749  
                                        i1l510 07B3                                          i1l513 07BD  
                                        i1l267 0432                                          i1l744 035C  
                                 ?_setLEDColor 00C6                                ___awdiv@counter 00CB  
                     __size_of_selectSomething 0051                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _RXPPS 0E24                                _TMR4_Initialize 0ECB  
                          ___lmul@multiplicand 00CA                               __end_of_TMR4_ISR 0ECB  
                           i1___lldiv@dividend 0024                                __end_of_initLED 06AB  
                      __end_of_PIN_MANAGER_IOC 0003                                 _WDT_Initialize 0E3C  
                                        _putch 0E46                                          _stats 0120  
                             __end_ofi1___lmul 07AB                                          pclath 000A  
                              __end_of_startUp 06E8                                          status 0003  
                      ?_process_remote_command 0070                             __size_ofi1___aldiv 0082  
                                        wtemp0 007E                             __size_ofi1___awdiv 0051  
                           __size_ofi1___lldiv 0053                               ??_DAC_Initialize 00C6  
                              __initialization 0022                                   __end_of_main 0489  
                            i1_battery_voltage 07AB                          __end_of_selectCurrent 0F7E  
                          i1___lmul@multiplier 0070                             i1___lldiv@quotient 0028  
                               ??_EUSART_Write 00C6                        __end_of_TMR2_Initialize 0E68  
                  ?_INTERRUPT_InterruptManager 0070                             ?i1_battery_voltage 002E  
                             ?_OPA1_Initialize 0070                                         ??_main 014C  
                     __size_of_battery_voltage 002B                            ??i1_battery_voltage 007A  
                       __end_of_WDT_Initialize 0E40                                      ??_INT_ISR 0072  
                        __size_ofi1_setCurrent 00A4              _EUSART_DefaultFramingErrorHandler 0000  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 004E                                         _CCPR1L 0291  
                             ___awdiv@dividend 00C8                                         _ANSELA 018C  
                                       ?_putch 0070                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                       _RC1REG 0199                                         _RA5PPS 0E95  
                                       _RC1STA 019D                                         i1l2000 038B  
                                       _RC4PPS 0EA4                                         i1l2012 03B6  
                                       i1l2102 0401                                         i1l2112 0418  
                                       i1l2104 0406                                         i1l2016 03C4  
                                       i1l2008 03AB                                         i1l2114 041A  
                                       i1l2034 05E7                                         _RB7PPS 0E9F  
                                       _RC5PPS 0EA5                                         i1l2124 0427  
                                       i1l2060 061E                                         i1l2052 060D  
                                       i1l2044 05EF                                         i1l2028 05DC  
                                       i1l2046 05FB                                         i1l2056 0616  
                                       _ODCONA 028C                                         i1l2082 03D7  
                                       _ODCONB 028D                                         _ODCONC 028E  
                                       i1l2092 03E8                                         u120_25 04FC  
                                       i1l2280 02C0                 __end_of_process_remote_command 0169  
                                       i1l2284 02C5                                         u121_25 0510  
                                       u130_25 03A0                                         u122_25 051C  
                                       u114_25 078F                                         i1l1944 0784  
                                       i1l1962 04ED                                         i1l1972 051B  
                                       i1l1964 04FB                                         i1l1948 078E  
                                       i1l2940 0728                                         u131_25 03AC  
                                       u115_25 0796                                         i1l1990 036D  
                                       i1l2942 073B                                         i1l1976 0526  
                                       u140_25 0606                                         i1l1998 037D  
                                       u141_25 060E                                         u118_25 04F0  
                                       u127_25 0380                                         _INLVLA 038C  
                                       _INLVLB 038D                                         _INLVLC 038E  
                                       u129_25 038C                                         u137_25 05F2  
                                       _FVRCON 0117                                         u147_25 03E9  
                                       u139_25 05FC                                         u190_25 02B9  
                                       _INTPPS 0E10                               ?_OPA2_Initialize 0070  
                                       u189_25 0292                                         _OSCCON 0099  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                              ??_selectFrequency 00CF  
                    __end_ofi1_battery_voltage 07D9                                         _Vdd_mv 0040  
                                       ___lmul 074C                                      ??___aldiv 00DA  
                                    ??___awdiv 00CA                                      ??___lldiv 00DA  
                             ?_TMR0_Initialize 0070                        __end_of_TMR4_Initialize 0EDD  
                                 i1_setCurrent 0225                               ___awdiv@quotient 00CD  
                                       _printf 0EF4                                  ?_INT_CallBack 0070  
                            __end_ofi1___aldiv 03CD                                      ??_initLED 00C6  
                            __end_ofi1___awdiv 0623           __end_of_TMR4_DefaultInterruptHandler 074C  
        __size_of_TMR4_DefaultInterruptHandler 0031                   _TMR4_DefaultInterruptHandler 071B  
                            __end_ofi1___lldiv 052F                               setCurrent@Vdd_mv 00E5  
                              ?_WDT_Initialize 0070               __size_of_INT_SetInterruptHandler 0009  
                                    ??_startUp 00CA       TMR4_SetInterruptHandler@InterruptHandler 00C6  
      INT_SetInterruptHandler@InterruptHandler 00C6                               ?_PIN_MANAGER_IOC 0070  
                            ??_selectSomething 00CA                              _SYSTEM_Initialize 0F11  
                      __end_of__initialization 0049                             ?_SYSTEM_Initialize 0070  
                               __pcstackCOMMON 0070                                   __pidataBANK0 0003  
                                 __pidataBANK1 07D9                            ??_SYSTEM_Initialize 00C8  
                                    ?_TMR4_ISR 0070                                  __end_of_putch 0E4C  
                             ?_TMR2_Initialize 0070                                 ??_INT_CallBack 0072  
                                    ?i1___lmul 0070                    __size_of_EXT_INT_Initialize 000B  
                               _OPTION_REGbits 0095                  ?_TMR4_DefaultInterruptHandler 0070  
                         __size_of_setLEDColor 0017                ??_EUSART_SetOverrunErrorHandler 00C8  
                            ??_battery_voltage 00E3                      __end_of_SYSTEM_Initialize 0F32  
                            i1___aldiv@divisor 0020                                        ??_putch 00C7  
                            i1___aldiv@counter 0028                                  ?_setFrequency 00E1  
                                   __pbssBANK0 0040                                     __pbssBANK1 00E9  
                                   __pbssBANK2 0120                           __end_of_EUSART_Write 0EA9  
                        _TMR4_InterruptHandler 0044                     __size_ofi1_battery_voltage 002E  
                                   __pmaintext 0434                                        ?___lmul 00C6  
                                   ??_TMR4_ISR 007D                                     __pintentry 0004  
                               ___lmul@product 00CE                               ?_TMR4_Initialize 0070  
                                      ?_printf 00C8                                     ??i1___lmul 0078  
                           i1___awdiv@dividend 0072                                        _OPA1CON 0511  
                                      _OPA2CON 0515                                        _LED_red 00ED  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                                      _INT_ISR 0E30                              _maxFrequencyIndex 00A0  
                                      _OSCSTAT 009A                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM4DCH 061B  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                       ??_EUSART_SetErrorHandler 00C8  
                               ??_setFrequency 00E3                                _maxCurrentIndex 00A2  
                                      _Vdac_mv 00EE                             i1___awdiv@quotient 0077  
                                      ___aldiv 02C9                                        ___awdiv 052F  
                              __size_of___lmul 0030                                        ___lldiv 0489  
                           i1setCurrent@Vdd_mv 0032                                        __ptext1 06AB  
                                      __ptext2 004D                                        __ptext3 0623  
                                      __ptext4 0169                                        __ptext5 074C  
                                      __ptext6 0489                                        __ptext7 052F  
                                      __ptext8 0581                                        __ptext9 0F7E  
                              __size_of_printf 001D                                        _initLED 0667  
                                      _ir_code 0057                                     _lowBattery 0FD3  
                        _OSCILLATOR_Initialize 0E58                                      _T2CONbits 001C  
                                      _current 0052                          i1setCurrent@microamps 0030  
                             ___aldiv@dividend 00D6                                      _T4CONbits 0417  
                     ??_PIN_MANAGER_Initialize 00C6              __size_of_TMR4_SetInterruptHandler 0009  
                      _INT_SetInterruptHandler 0E83                      ?_TMR4_SetInterruptHandler 00C6  
                              _selectFrequency 0F7E                                        _startUp 06AB  
                   __size_of_SYSTEM_Initialize 0021                                        clrloop0 0E4D  
                         end_of_initialization 0049                 ??_TMR4_DefaultInterruptHandler 003E  
                                   _setCurrent 0169          __end_of_EUSART_SetOverrunErrorHandler 0E83  
       __size_of_EUSART_SetOverrunErrorHandler 0009                  _EUSART_SetOverrunErrorHandler 0E7A  
                                    _LED_green 00EC                                        init_ram 0E52  
                                      initloop 0E53                           __end_of_INT_CallBack 0EB4  
                            _EUSART_Initialize 0F32                                 _frequencyIndex 0048  
                              ___lldiv@divisor 00D2                                 _frequencyValue 00BA  
                              ___lldiv@counter 00DF                             ?_EUSART_Initialize 0070  
                                      printf@c 00CE                                        printf@f 00C8  
                             ___aldiv@quotient 00DD                                setLEDColor@blue 00C7  
                          ??_EUSART_Initialize 00C8                               ??_WDT_Initialize 00C6  
                              _selectSomething 0581                          __size_of_EUSART_Write 000A  
                     __size_of_OPA1_Initialize 0004                                      i1___aldiv 034B  
                                    i1___awdiv 05D2                                      i1___lldiv 04DC  
              __size_of_EUSART_SetErrorHandler 0009                         __size_of_selectCurrent 0028  
                    __end_of_EUSART_Initialize 0F56                                    _CCP1CONbits 0293  
                     __size_of_OPA2_Initialize 0004                           __end_of_setFrequency 0667  
                               __end_of___lmul 077C                     _EUSART_DefaultErrorHandler 0000  
                              _battery_voltage 0FA8                                   _EUSART_Write 0E9F  
                            __size_of_TMR4_ISR 000C                         ?_OSCILLATOR_Initialize 0070  
                      __end_of_selectFrequency 0FA8                      ??_INT_SetInterruptHandler 00C8  
                      __size_of_DAC_Initialize 0006                                    ?_lowBattery 0070  
                               __end_of_printf 0F11                           i1setCurrent@DACValue 003C  
                        i1___lmul@multiplicand 0074                              __size_ofi1___lmul 002F  
                          start_initialization 0022                       __size_of_TMR0_Initialize 000A  
              __size_of_PIN_MANAGER_Initialize 0033                                     ?i1___aldiv 0020  
                                   ?i1___awdiv 0070                                     ?i1___lldiv 0020  
                                  putch@txData 00C7                                    ?_setCurrent 00E3  
                     __size_of_PIN_MANAGER_IOC 0001                   ?_INT_DefaultInterruptHandler 0070  
               ?_EUSART_SetOverrunErrorHandler 00C6                     _EUSART_FramingErrorHandler 0050  
                      __end_of_selectSomething 05D2                                       ??___lmul 00CE  
                       _EUSART_SetErrorHandler 0E68                                    _CCPTMRSbits 029E  
                                _selectCurrent 0F56                                    __pdataBANK0 005D  
                                  __pdataBANK1 00A0                             i1___aldiv@dividend 0024  
                   __end_of_EXT_INT_Initialize 0EBF                                       ??_printf 00CA  
                                ??_setLEDColor 00C8                                      ___latbits 0001  
                     ??_process_remote_command 0149                                       ?_INT_ISR 0070  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00C6  
                                __pcstackBANK2 0141                       __size_of_TMR2_Initialize 0008  
                        __size_of_INT_CallBack 000B                               i1___lmul@product 0078  
                   __size_of_EUSART_Initialize 0024                                   _currentIndex 0046  
                            ??_OPA1_Initialize 00C6                                   _currentValue 00A4  
                           i1___aldiv@quotient 002A                            __size_of_lowBattery 002D  
                       _PIN_MANAGER_Initialize 06E8                        __end_of_battery_voltage 0FD3  
                ??_INT_DefaultInterruptHandler 0070                                       ?___aldiv 00D2  
             __end_of_TMR4_SetInterruptHandler 0E95                                 ?_selectCurrent 0070  
                                     ?___awdiv 00C6                                       ?___lldiv 00D2  
                            i1___awdiv@divisor 0070                                       _DAC1CON0 0118  
                                     _DAC1CON1 0119                              i1___awdiv@counter 0075  
                 ??_INTERRUPT_InterruptManager 007D                            __size_of_setCurrent 00BC  
                            ??_OPA2_Initialize 00C6                               ?_selectFrequency 0070  
                                 _INT_CallBack 0EA9                                       _BAUD1CON 019F  
                                     ?_initLED 0070                                    ??i1___aldiv 0079  
                     __size_of_TMR4_Initialize 0012                                      _frequency 0054  
                                  ??i1___awdiv 0074                                    ??i1___lldiv 007C  
                                     ?_startUp 0070                            __end_of_setLEDColor 0EF4  
                                    _microamps 0042                                 __size_of_putch 0006  
                              ___aldiv@divisor 00D2                              ??_TMR0_Initialize 00C6  
                              ___aldiv@counter 00DB         EUSART_SetErrorHandler@interruptHandler 00C6  
                                     _LED_blue 00EB                                      clear_ram0 0E4C  
                                     _PIE2bits 0092                              _eusartRxLastError 0056  
                        __size_of_setFrequency 0044            __size_of_INTERRUPT_InterruptManager 001C  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 00C8  
                                     _PIR2bits 0012                               ?_selectSomething 0070  
                               setLEDColor@red 00C9              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR4_ISR 0EBF                              ??_PIN_MANAGER_IOC 0070  
                                ?i1_setCurrent 0030                                     _ADCON0bits 009D  
                                     i1___lmul 077C                                 _DAC_Initialize 0E40  
         __size_of_INT_DefaultInterruptHandler 0067                __size_of_process_remote_command 011C  
                             __size_of_INT_ISR 0004                              ___lmul@multiplier 00C6  
                                 _setFrequency 0623                              ??_TMR2_Initialize 00C6  
                              ??_selectCurrent 00CF                               ?_battery_voltage 00E1  
                      ??_OSCILLATOR_Initialize 00C6                            _EUSART_ErrorHandler 004C  
                               ??i1_setCurrent 0034                               __size_of___aldiv 0082  
                             __size_of___awdiv 0052                         __end_of_DAC_Initialize 0E46  
                             __size_of___lldiv 0053                       _TMR4_SetInterruptHandler 0E8C  
                                 ??_lowBattery 00CA                                    _currentIsOn 005D  
                                  _setLEDColor 0EDD                             setCurrent@DACValue 00E7  
                             __size_of_initLED 0044                                       __ptext10 0F56  
                                     __ptext11 0EF4                                       __ptext20 0E3C  
                                     __ptext12 0E46                                       __ptext21 0ECB  
                                     __ptext13 0E9F                                       __ptext30 0E83  
                                     __ptext22 0E8C                                       __ptext14 0FA8  
                                     __ptext31 0F32                                       __ptext23 0E60  
                                     __ptext15 02C9                                       __ptext40 077C  
                                     __ptext32 0E7A                                       __ptext24 0E95  
                                     __ptext16 0FD3                                       __ptext41 04DC  
                                     __ptext33 0E71                                       __ptext25 06E8  
                                     __ptext17 0EDD                                       __ptext42 05D2  
                                     __ptext34 0E68                                       __ptext26 0E58  
                                     __ptext18 0667                                       __ptext43 07AB  
                                     __ptext35 0E40                                       __ptext27 0E38  
                                     __ptext19 0F11                                       __ptext44 034B  
                                     __ptext28 0E34                                       __ptext45 0002  
                                     __ptext37 0EBF                                       __ptext29 0EB4  
                                     __ptext46 0E30                                       __ptext38 071B  
                                     __ptext47 0EA9                                       __ptext39 0225  
                                     __ptext48 03CD                               __size_of_startUp 003D  
                                 ??_setCurrent 0141                                 _interfaceState 00E9  
                            ??_TMR4_Initialize 00C8                                  __size_of_main 0055  
                      ?_EUSART_SetErrorHandler 00C6                         _process_remote_command 004D  
                                   _RC1STAbits 019D                             __end_of_lowBattery 1000  
EUSART_SetOverrunErrorHandler@interruptHandler 00C6                            setFrequency@pr4_val 00E4  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 0020  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0E7A  
       __size_of_EUSART_SetFramingErrorHandler 0009                  _EUSART_SetFramingErrorHandler 0E71  
                              ?_DAC_Initialize 0070                             __end_of_setCurrent 0225  
                                   _INTCONbits 000B                INT_DefaultInterruptHandler@time 0071  
                                  _PWM3DCLbits 0617                                _OPA1_Initialize 0E34  
                                  _PWM4DCLbits 061A                                     _FVRCONbits 0117  
                         _INT_InterruptHandler 004A                                    _PWM3CONbits 0619  
                                  _PWM4CONbits 061C                             _EXT_INT_Initialize 0EB4  
                      __size_of_WDT_Initialize 0004                                       intlevel1 0000  
                             ___lldiv@dividend 00D6                        ?_PIN_MANAGER_Initialize 0070  
                   process_remote_command@code 014B                 __end_of_EUSART_SetErrorHandler 0E71  
                          ?_EXT_INT_Initialize 0070                                _OPA2_Initialize 0E38  
                                     printf@ap 00CD  EUSART_SetFramingErrorHandler@interruptHandler 00C6  
                     ?_INT_SetInterruptHandler 00C6                                       startUp@i 00CC  
                                __pstringtext1 07FF                                  __pstringtext2 0814  
                                __pstringtext3 0827                                  __pstringtext4 0000  
                         ??_EXT_INT_Initialize 00C8                                     _OPTION_REG 0095  
                             setLEDColor@green 00C6                               ___lldiv@quotient 00DB  
                              _TMR0_Initialize 0E95                            setCurrent@microamps 00E3  
                                 ___aldiv@sign 00DC                                     _TX1STAbits 019E  
                     setFrequency@frequency_hz 00E1                             EUSART_Write@txData 00C6  
                         __end_ofi1_setCurrent 02C9                 __end_of_PIN_MANAGER_Initialize 071B  
                              _PIN_MANAGER_IOC 0002  
