

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Jul  3 15:24:09 2020

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF1708
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	dabs	1,0x7E,2
    58  0000                     
    59                           ; Version 2.00
    60                           ; Generated 27/05/2018 GMT
    61                           ; 
    62                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC16LF1708 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  000E                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  0111                     	;# 
   142  0112                     	;# 
   143  0113                     	;# 
   144  0114                     	;# 
   145  0115                     	;# 
   146  0116                     	;# 
   147  0117                     	;# 
   148  0118                     	;# 
   149  0119                     	;# 
   150  011C                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  018E                     	;# 
   154  0191                     	;# 
   155  0191                     	;# 
   156  0192                     	;# 
   157  0193                     	;# 
   158  0193                     	;# 
   159  0194                     	;# 
   160  0195                     	;# 
   161  0196                     	;# 
   162  0199                     	;# 
   163  0199                     	;# 
   164  0199                     	;# 
   165  019A                     	;# 
   166  019A                     	;# 
   167  019A                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019C                     	;# 
   174  019C                     	;# 
   175  019C                     	;# 
   176  019D                     	;# 
   177  019D                     	;# 
   178  019D                     	;# 
   179  019E                     	;# 
   180  019E                     	;# 
   181  019E                     	;# 
   182  019F                     	;# 
   183  019F                     	;# 
   184  019F                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  020C                     	;# 
   188  020D                     	;# 
   189  020E                     	;# 
   190  0211                     	;# 
   191  0211                     	;# 
   192  0212                     	;# 
   193  0212                     	;# 
   194  0213                     	;# 
   195  0213                     	;# 
   196  0214                     	;# 
   197  0214                     	;# 
   198  0215                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0216                     	;# 
   203  0216                     	;# 
   204  0217                     	;# 
   205  0217                     	;# 
   206  028C                     	;# 
   207  028D                     	;# 
   208  028E                     	;# 
   209  0291                     	;# 
   210  0291                     	;# 
   211  0292                     	;# 
   212  0293                     	;# 
   213  0293                     	;# 
   214  0298                     	;# 
   215  0298                     	;# 
   216  0299                     	;# 
   217  029A                     	;# 
   218  029A                     	;# 
   219  029E                     	;# 
   220  030C                     	;# 
   221  030D                     	;# 
   222  030E                     	;# 
   223  038C                     	;# 
   224  038D                     	;# 
   225  038E                     	;# 
   226  0391                     	;# 
   227  0392                     	;# 
   228  0393                     	;# 
   229  0394                     	;# 
   230  0395                     	;# 
   231  0396                     	;# 
   232  0397                     	;# 
   233  0398                     	;# 
   234  0399                     	;# 
   235  0415                     	;# 
   236  0416                     	;# 
   237  0417                     	;# 
   238  041C                     	;# 
   239  041D                     	;# 
   240  041E                     	;# 
   241  0511                     	;# 
   242  0515                     	;# 
   243  0617                     	;# 
   244  0618                     	;# 
   245  0619                     	;# 
   246  0619                     	;# 
   247  061A                     	;# 
   248  061B                     	;# 
   249  061C                     	;# 
   250  061C                     	;# 
   251  0691                     	;# 
   252  0692                     	;# 
   253  0693                     	;# 
   254  0694                     	;# 
   255  0695                     	;# 
   256  0696                     	;# 
   257  0697                     	;# 
   258  0698                     	;# 
   259  0699                     	;# 
   260  069A                     	;# 
   261  069B                     	;# 
   262  069C                     	;# 
   263  069D                     	;# 
   264  069E                     	;# 
   265  069F                     	;# 
   266  0E0F                     	;# 
   267  0E10                     	;# 
   268  0E11                     	;# 
   269  0E12                     	;# 
   270  0E13                     	;# 
   271  0E14                     	;# 
   272  0E15                     	;# 
   273  0E17                     	;# 
   274  0E20                     	;# 
   275  0E21                     	;# 
   276  0E22                     	;# 
   277  0E24                     	;# 
   278  0E25                     	;# 
   279  0E28                     	;# 
   280  0E29                     	;# 
   281  0E2A                     	;# 
   282  0E2B                     	;# 
   283  0E90                     	;# 
   284  0E91                     	;# 
   285  0E92                     	;# 
   286  0E94                     	;# 
   287  0E95                     	;# 
   288  0E9C                     	;# 
   289  0E9D                     	;# 
   290  0E9E                     	;# 
   291  0E9F                     	;# 
   292  0EA0                     	;# 
   293  0EA1                     	;# 
   294  0EA2                     	;# 
   295  0EA3                     	;# 
   296  0EA4                     	;# 
   297  0EA5                     	;# 
   298  0EA6                     	;# 
   299  0EA7                     	;# 
   300  0F0F                     	;# 
   301  0F10                     	;# 
   302  0F11                     	;# 
   303  0F12                     	;# 
   304  0F13                     	;# 
   305  0F14                     	;# 
   306  0F15                     	;# 
   307  0F16                     	;# 
   308  0F17                     	;# 
   309  0F18                     	;# 
   310  0F19                     	;# 
   311  0F1A                     	;# 
   312  0F1B                     	;# 
   313  0F1C                     	;# 
   314  0F1D                     	;# 
   315  0F1E                     	;# 
   316  0F1F                     	;# 
   317  0F20                     	;# 
   318  0F21                     	;# 
   319  0F22                     	;# 
   320  0F23                     	;# 
   321  0F24                     	;# 
   322  0F25                     	;# 
   323  0F26                     	;# 
   324  0F27                     	;# 
   325  0F28                     	;# 
   326  0F29                     	;# 
   327  0F2A                     	;# 
   328  0F2B                     	;# 
   329  0F2C                     	;# 
   330  0F2D                     	;# 
   331  0FE4                     	;# 
   332  0FE5                     	;# 
   333  0FE6                     	;# 
   334  0FE7                     	;# 
   335  0FE8                     	;# 
   336  0FE9                     	;# 
   337  0FEA                     	;# 
   338  0FEB                     	;# 
   339  0FED                     	;# 
   340  0FEE                     	;# 
   341  0FEF                     	;# 
   342  0000                     	;# 
   343  0001                     	;# 
   344  0002                     	;# 
   345  0003                     	;# 
   346  0004                     	;# 
   347  0005                     	;# 
   348  0006                     	;# 
   349  0007                     	;# 
   350  0008                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  0011                     	;# 
   358  0012                     	;# 
   359  0013                     	;# 
   360  0015                     	;# 
   361  0016                     	;# 
   362  0016                     	;# 
   363  0017                     	;# 
   364  0018                     	;# 
   365  0019                     	;# 
   366  001A                     	;# 
   367  001B                     	;# 
   368  001C                     	;# 
   369  008C                     	;# 
   370  008D                     	;# 
   371  008E                     	;# 
   372  0091                     	;# 
   373  0092                     	;# 
   374  0093                     	;# 
   375  0095                     	;# 
   376  0096                     	;# 
   377  0097                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009A                     	;# 
   381  009B                     	;# 
   382  009B                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  009F                     	;# 
   387  010C                     	;# 
   388  010D                     	;# 
   389  010E                     	;# 
   390  0111                     	;# 
   391  0112                     	;# 
   392  0113                     	;# 
   393  0114                     	;# 
   394  0115                     	;# 
   395  0116                     	;# 
   396  0117                     	;# 
   397  0118                     	;# 
   398  0119                     	;# 
   399  011C                     	;# 
   400  018C                     	;# 
   401  018D                     	;# 
   402  018E                     	;# 
   403  0191                     	;# 
   404  0191                     	;# 
   405  0192                     	;# 
   406  0193                     	;# 
   407  0193                     	;# 
   408  0194                     	;# 
   409  0195                     	;# 
   410  0196                     	;# 
   411  0199                     	;# 
   412  0199                     	;# 
   413  0199                     	;# 
   414  019A                     	;# 
   415  019A                     	;# 
   416  019A                     	;# 
   417  019B                     	;# 
   418  019B                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019C                     	;# 
   423  019C                     	;# 
   424  019C                     	;# 
   425  019D                     	;# 
   426  019D                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019E                     	;# 
   430  019E                     	;# 
   431  019F                     	;# 
   432  019F                     	;# 
   433  019F                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  020C                     	;# 
   437  020D                     	;# 
   438  020E                     	;# 
   439  0211                     	;# 
   440  0211                     	;# 
   441  0212                     	;# 
   442  0212                     	;# 
   443  0213                     	;# 
   444  0213                     	;# 
   445  0214                     	;# 
   446  0214                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0216                     	;# 
   452  0216                     	;# 
   453  0217                     	;# 
   454  0217                     	;# 
   455  028C                     	;# 
   456  028D                     	;# 
   457  028E                     	;# 
   458  0291                     	;# 
   459  0291                     	;# 
   460  0292                     	;# 
   461  0293                     	;# 
   462  0293                     	;# 
   463  0298                     	;# 
   464  0298                     	;# 
   465  0299                     	;# 
   466  029A                     	;# 
   467  029A                     	;# 
   468  029E                     	;# 
   469  030C                     	;# 
   470  030D                     	;# 
   471  030E                     	;# 
   472  038C                     	;# 
   473  038D                     	;# 
   474  038E                     	;# 
   475  0391                     	;# 
   476  0392                     	;# 
   477  0393                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0397                     	;# 
   482  0398                     	;# 
   483  0399                     	;# 
   484  0415                     	;# 
   485  0416                     	;# 
   486  0417                     	;# 
   487  041C                     	;# 
   488  041D                     	;# 
   489  041E                     	;# 
   490  0511                     	;# 
   491  0515                     	;# 
   492  0617                     	;# 
   493  0618                     	;# 
   494  0619                     	;# 
   495  0619                     	;# 
   496  061A                     	;# 
   497  061B                     	;# 
   498  061C                     	;# 
   499  061C                     	;# 
   500  0691                     	;# 
   501  0692                     	;# 
   502  0693                     	;# 
   503  0694                     	;# 
   504  0695                     	;# 
   505  0696                     	;# 
   506  0697                     	;# 
   507  0698                     	;# 
   508  0699                     	;# 
   509  069A                     	;# 
   510  069B                     	;# 
   511  069C                     	;# 
   512  069D                     	;# 
   513  069E                     	;# 
   514  069F                     	;# 
   515  0E0F                     	;# 
   516  0E10                     	;# 
   517  0E11                     	;# 
   518  0E12                     	;# 
   519  0E13                     	;# 
   520  0E14                     	;# 
   521  0E15                     	;# 
   522  0E17                     	;# 
   523  0E20                     	;# 
   524  0E21                     	;# 
   525  0E22                     	;# 
   526  0E24                     	;# 
   527  0E25                     	;# 
   528  0E28                     	;# 
   529  0E29                     	;# 
   530  0E2A                     	;# 
   531  0E2B                     	;# 
   532  0E90                     	;# 
   533  0E91                     	;# 
   534  0E92                     	;# 
   535  0E94                     	;# 
   536  0E95                     	;# 
   537  0E9C                     	;# 
   538  0E9D                     	;# 
   539  0E9E                     	;# 
   540  0E9F                     	;# 
   541  0EA0                     	;# 
   542  0EA1                     	;# 
   543  0EA2                     	;# 
   544  0EA3                     	;# 
   545  0EA4                     	;# 
   546  0EA5                     	;# 
   547  0EA6                     	;# 
   548  0EA7                     	;# 
   549  0F0F                     	;# 
   550  0F10                     	;# 
   551  0F11                     	;# 
   552  0F12                     	;# 
   553  0F13                     	;# 
   554  0F14                     	;# 
   555  0F15                     	;# 
   556  0F16                     	;# 
   557  0F17                     	;# 
   558  0F18                     	;# 
   559  0F19                     	;# 
   560  0F1A                     	;# 
   561  0F1B                     	;# 
   562  0F1C                     	;# 
   563  0F1D                     	;# 
   564  0F1E                     	;# 
   565  0F1F                     	;# 
   566  0F20                     	;# 
   567  0F21                     	;# 
   568  0F22                     	;# 
   569  0F23                     	;# 
   570  0F24                     	;# 
   571  0F25                     	;# 
   572  0F26                     	;# 
   573  0F27                     	;# 
   574  0F28                     	;# 
   575  0F29                     	;# 
   576  0F2A                     	;# 
   577  0F2B                     	;# 
   578  0F2C                     	;# 
   579  0F2D                     	;# 
   580  0FE4                     	;# 
   581  0FE5                     	;# 
   582  0FE6                     	;# 
   583  0FE7                     	;# 
   584  0FE8                     	;# 
   585  0FE9                     	;# 
   586  0FEA                     	;# 
   587  0FEB                     	;# 
   588  0FED                     	;# 
   589  0FEE                     	;# 
   590  0FEF                     	;# 
   591  0000                     	;# 
   592  0001                     	;# 
   593  0002                     	;# 
   594  0003                     	;# 
   595  0004                     	;# 
   596  0005                     	;# 
   597  0006                     	;# 
   598  0007                     	;# 
   599  0008                     	;# 
   600  0009                     	;# 
   601  000A                     	;# 
   602  000B                     	;# 
   603  000C                     	;# 
   604  000D                     	;# 
   605  000E                     	;# 
   606  0011                     	;# 
   607  0012                     	;# 
   608  0013                     	;# 
   609  0015                     	;# 
   610  0016                     	;# 
   611  0016                     	;# 
   612  0017                     	;# 
   613  0018                     	;# 
   614  0019                     	;# 
   615  001A                     	;# 
   616  001B                     	;# 
   617  001C                     	;# 
   618  008C                     	;# 
   619  008D                     	;# 
   620  008E                     	;# 
   621  0091                     	;# 
   622  0092                     	;# 
   623  0093                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0097                     	;# 
   627  0098                     	;# 
   628  0099                     	;# 
   629  009A                     	;# 
   630  009B                     	;# 
   631  009B                     	;# 
   632  009C                     	;# 
   633  009D                     	;# 
   634  009E                     	;# 
   635  009F                     	;# 
   636  010C                     	;# 
   637  010D                     	;# 
   638  010E                     	;# 
   639  0111                     	;# 
   640  0112                     	;# 
   641  0113                     	;# 
   642  0114                     	;# 
   643  0115                     	;# 
   644  0116                     	;# 
   645  0117                     	;# 
   646  0118                     	;# 
   647  0119                     	;# 
   648  011C                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0199                     	;# 
   661  0199                     	;# 
   662  0199                     	;# 
   663  019A                     	;# 
   664  019A                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019C                     	;# 
   674  019D                     	;# 
   675  019D                     	;# 
   676  019D                     	;# 
   677  019E                     	;# 
   678  019E                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  019F                     	;# 
   682  019F                     	;# 
   683  019F                     	;# 
   684  019F                     	;# 
   685  020C                     	;# 
   686  020D                     	;# 
   687  020E                     	;# 
   688  0211                     	;# 
   689  0211                     	;# 
   690  0212                     	;# 
   691  0212                     	;# 
   692  0213                     	;# 
   693  0213                     	;# 
   694  0214                     	;# 
   695  0214                     	;# 
   696  0215                     	;# 
   697  0215                     	;# 
   698  0215                     	;# 
   699  0215                     	;# 
   700  0216                     	;# 
   701  0216                     	;# 
   702  0217                     	;# 
   703  0217                     	;# 
   704  028C                     	;# 
   705  028D                     	;# 
   706  028E                     	;# 
   707  0291                     	;# 
   708  0291                     	;# 
   709  0292                     	;# 
   710  0293                     	;# 
   711  0293                     	;# 
   712  0298                     	;# 
   713  0298                     	;# 
   714  0299                     	;# 
   715  029A                     	;# 
   716  029A                     	;# 
   717  029E                     	;# 
   718  030C                     	;# 
   719  030D                     	;# 
   720  030E                     	;# 
   721  038C                     	;# 
   722  038D                     	;# 
   723  038E                     	;# 
   724  0391                     	;# 
   725  0392                     	;# 
   726  0393                     	;# 
   727  0394                     	;# 
   728  0395                     	;# 
   729  0396                     	;# 
   730  0397                     	;# 
   731  0398                     	;# 
   732  0399                     	;# 
   733  0415                     	;# 
   734  0416                     	;# 
   735  0417                     	;# 
   736  041C                     	;# 
   737  041D                     	;# 
   738  041E                     	;# 
   739  0511                     	;# 
   740  0515                     	;# 
   741  0617                     	;# 
   742  0618                     	;# 
   743  0619                     	;# 
   744  0619                     	;# 
   745  061A                     	;# 
   746  061B                     	;# 
   747  061C                     	;# 
   748  061C                     	;# 
   749  0691                     	;# 
   750  0692                     	;# 
   751  0693                     	;# 
   752  0694                     	;# 
   753  0695                     	;# 
   754  0696                     	;# 
   755  0697                     	;# 
   756  0698                     	;# 
   757  0699                     	;# 
   758  069A                     	;# 
   759  069B                     	;# 
   760  069C                     	;# 
   761  069D                     	;# 
   762  069E                     	;# 
   763  069F                     	;# 
   764  0E0F                     	;# 
   765  0E10                     	;# 
   766  0E11                     	;# 
   767  0E12                     	;# 
   768  0E13                     	;# 
   769  0E14                     	;# 
   770  0E15                     	;# 
   771  0E17                     	;# 
   772  0E20                     	;# 
   773  0E21                     	;# 
   774  0E22                     	;# 
   775  0E24                     	;# 
   776  0E25                     	;# 
   777  0E28                     	;# 
   778  0E29                     	;# 
   779  0E2A                     	;# 
   780  0E2B                     	;# 
   781  0E90                     	;# 
   782  0E91                     	;# 
   783  0E92                     	;# 
   784  0E94                     	;# 
   785  0E95                     	;# 
   786  0E9C                     	;# 
   787  0E9D                     	;# 
   788  0E9E                     	;# 
   789  0E9F                     	;# 
   790  0EA0                     	;# 
   791  0EA1                     	;# 
   792  0EA2                     	;# 
   793  0EA3                     	;# 
   794  0EA4                     	;# 
   795  0EA5                     	;# 
   796  0EA6                     	;# 
   797  0EA7                     	;# 
   798  0F0F                     	;# 
   799  0F10                     	;# 
   800  0F11                     	;# 
   801  0F12                     	;# 
   802  0F13                     	;# 
   803  0F14                     	;# 
   804  0F15                     	;# 
   805  0F16                     	;# 
   806  0F17                     	;# 
   807  0F18                     	;# 
   808  0F19                     	;# 
   809  0F1A                     	;# 
   810  0F1B                     	;# 
   811  0F1C                     	;# 
   812  0F1D                     	;# 
   813  0F1E                     	;# 
   814  0F1F                     	;# 
   815  0F20                     	;# 
   816  0F21                     	;# 
   817  0F22                     	;# 
   818  0F23                     	;# 
   819  0F24                     	;# 
   820  0F25                     	;# 
   821  0F26                     	;# 
   822  0F27                     	;# 
   823  0F28                     	;# 
   824  0F29                     	;# 
   825  0F2A                     	;# 
   826  0F2B                     	;# 
   827  0F2C                     	;# 
   828  0F2D                     	;# 
   829  0FE4                     	;# 
   830  0FE5                     	;# 
   831  0FE6                     	;# 
   832  0FE7                     	;# 
   833  0FE8                     	;# 
   834  0FE9                     	;# 
   835  0FEA                     	;# 
   836  0FEB                     	;# 
   837  0FED                     	;# 
   838  0FEE                     	;# 
   839  0FEF                     	;# 
   840  0000                     	;# 
   841  0001                     	;# 
   842  0002                     	;# 
   843  0003                     	;# 
   844  0004                     	;# 
   845  0005                     	;# 
   846  0006                     	;# 
   847  0007                     	;# 
   848  0008                     	;# 
   849  0009                     	;# 
   850  000A                     	;# 
   851  000B                     	;# 
   852  000C                     	;# 
   853  000D                     	;# 
   854  000E                     	;# 
   855  0011                     	;# 
   856  0012                     	;# 
   857  0013                     	;# 
   858  0015                     	;# 
   859  0016                     	;# 
   860  0016                     	;# 
   861  0017                     	;# 
   862  0018                     	;# 
   863  0019                     	;# 
   864  001A                     	;# 
   865  001B                     	;# 
   866  001C                     	;# 
   867  008C                     	;# 
   868  008D                     	;# 
   869  008E                     	;# 
   870  0091                     	;# 
   871  0092                     	;# 
   872  0093                     	;# 
   873  0095                     	;# 
   874  0096                     	;# 
   875  0097                     	;# 
   876  0098                     	;# 
   877  0099                     	;# 
   878  009A                     	;# 
   879  009B                     	;# 
   880  009B                     	;# 
   881  009C                     	;# 
   882  009D                     	;# 
   883  009E                     	;# 
   884  009F                     	;# 
   885  010C                     	;# 
   886  010D                     	;# 
   887  010E                     	;# 
   888  0111                     	;# 
   889  0112                     	;# 
   890  0113                     	;# 
   891  0114                     	;# 
   892  0115                     	;# 
   893  0116                     	;# 
   894  0117                     	;# 
   895  0118                     	;# 
   896  0119                     	;# 
   897  011C                     	;# 
   898  018C                     	;# 
   899  018D                     	;# 
   900  018E                     	;# 
   901  0191                     	;# 
   902  0191                     	;# 
   903  0192                     	;# 
   904  0193                     	;# 
   905  0193                     	;# 
   906  0194                     	;# 
   907  0195                     	;# 
   908  0196                     	;# 
   909  0199                     	;# 
   910  0199                     	;# 
   911  0199                     	;# 
   912  019A                     	;# 
   913  019A                     	;# 
   914  019A                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019B                     	;# 
   918  019B                     	;# 
   919  019B                     	;# 
   920  019C                     	;# 
   921  019C                     	;# 
   922  019C                     	;# 
   923  019D                     	;# 
   924  019D                     	;# 
   925  019D                     	;# 
   926  019E                     	;# 
   927  019E                     	;# 
   928  019E                     	;# 
   929  019F                     	;# 
   930  019F                     	;# 
   931  019F                     	;# 
   932  019F                     	;# 
   933  019F                     	;# 
   934  020C                     	;# 
   935  020D                     	;# 
   936  020E                     	;# 
   937  0211                     	;# 
   938  0211                     	;# 
   939  0212                     	;# 
   940  0212                     	;# 
   941  0213                     	;# 
   942  0213                     	;# 
   943  0214                     	;# 
   944  0214                     	;# 
   945  0215                     	;# 
   946  0215                     	;# 
   947  0215                     	;# 
   948  0215                     	;# 
   949  0216                     	;# 
   950  0216                     	;# 
   951  0217                     	;# 
   952  0217                     	;# 
   953  028C                     	;# 
   954  028D                     	;# 
   955  028E                     	;# 
   956  0291                     	;# 
   957  0291                     	;# 
   958  0292                     	;# 
   959  0293                     	;# 
   960  0293                     	;# 
   961  0298                     	;# 
   962  0298                     	;# 
   963  0299                     	;# 
   964  029A                     	;# 
   965  029A                     	;# 
   966  029E                     	;# 
   967  030C                     	;# 
   968  030D                     	;# 
   969  030E                     	;# 
   970  038C                     	;# 
   971  038D                     	;# 
   972  038E                     	;# 
   973  0391                     	;# 
   974  0392                     	;# 
   975  0393                     	;# 
   976  0394                     	;# 
   977  0395                     	;# 
   978  0396                     	;# 
   979  0397                     	;# 
   980  0398                     	;# 
   981  0399                     	;# 
   982  0415                     	;# 
   983  0416                     	;# 
   984  0417                     	;# 
   985  041C                     	;# 
   986  041D                     	;# 
   987  041E                     	;# 
   988  0511                     	;# 
   989  0515                     	;# 
   990  0617                     	;# 
   991  0618                     	;# 
   992  0619                     	;# 
   993  0619                     	;# 
   994  061A                     	;# 
   995  061B                     	;# 
   996  061C                     	;# 
   997  061C                     	;# 
   998  0691                     	;# 
   999  0692                     	;# 
  1000  0693                     	;# 
  1001  0694                     	;# 
  1002  0695                     	;# 
  1003  0696                     	;# 
  1004  0697                     	;# 
  1005  0698                     	;# 
  1006  0699                     	;# 
  1007  069A                     	;# 
  1008  069B                     	;# 
  1009  069C                     	;# 
  1010  069D                     	;# 
  1011  069E                     	;# 
  1012  069F                     	;# 
  1013  0E0F                     	;# 
  1014  0E10                     	;# 
  1015  0E11                     	;# 
  1016  0E12                     	;# 
  1017  0E13                     	;# 
  1018  0E14                     	;# 
  1019  0E15                     	;# 
  1020  0E17                     	;# 
  1021  0E20                     	;# 
  1022  0E21                     	;# 
  1023  0E22                     	;# 
  1024  0E24                     	;# 
  1025  0E25                     	;# 
  1026  0E28                     	;# 
  1027  0E29                     	;# 
  1028  0E2A                     	;# 
  1029  0E2B                     	;# 
  1030  0E90                     	;# 
  1031  0E91                     	;# 
  1032  0E92                     	;# 
  1033  0E94                     	;# 
  1034  0E95                     	;# 
  1035  0E9C                     	;# 
  1036  0E9D                     	;# 
  1037  0E9E                     	;# 
  1038  0E9F                     	;# 
  1039  0EA0                     	;# 
  1040  0EA1                     	;# 
  1041  0EA2                     	;# 
  1042  0EA3                     	;# 
  1043  0EA4                     	;# 
  1044  0EA5                     	;# 
  1045  0EA6                     	;# 
  1046  0EA7                     	;# 
  1047  0F0F                     	;# 
  1048  0F10                     	;# 
  1049  0F11                     	;# 
  1050  0F12                     	;# 
  1051  0F13                     	;# 
  1052  0F14                     	;# 
  1053  0F15                     	;# 
  1054  0F16                     	;# 
  1055  0F17                     	;# 
  1056  0F18                     	;# 
  1057  0F19                     	;# 
  1058  0F1A                     	;# 
  1059  0F1B                     	;# 
  1060  0F1C                     	;# 
  1061  0F1D                     	;# 
  1062  0F1E                     	;# 
  1063  0F1F                     	;# 
  1064  0F20                     	;# 
  1065  0F21                     	;# 
  1066  0F22                     	;# 
  1067  0F23                     	;# 
  1068  0F24                     	;# 
  1069  0F25                     	;# 
  1070  0F26                     	;# 
  1071  0F27                     	;# 
  1072  0F28                     	;# 
  1073  0F29                     	;# 
  1074  0F2A                     	;# 
  1075  0F2B                     	;# 
  1076  0F2C                     	;# 
  1077  0F2D                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000D                     	;# 
  1103  000E                     	;# 
  1104  0011                     	;# 
  1105  0012                     	;# 
  1106  0013                     	;# 
  1107  0015                     	;# 
  1108  0016                     	;# 
  1109  0016                     	;# 
  1110  0017                     	;# 
  1111  0018                     	;# 
  1112  0019                     	;# 
  1113  001A                     	;# 
  1114  001B                     	;# 
  1115  001C                     	;# 
  1116  008C                     	;# 
  1117  008D                     	;# 
  1118  008E                     	;# 
  1119  0091                     	;# 
  1120  0092                     	;# 
  1121  0093                     	;# 
  1122  0095                     	;# 
  1123  0096                     	;# 
  1124  0097                     	;# 
  1125  0098                     	;# 
  1126  0099                     	;# 
  1127  009A                     	;# 
  1128  009B                     	;# 
  1129  009B                     	;# 
  1130  009C                     	;# 
  1131  009D                     	;# 
  1132  009E                     	;# 
  1133  009F                     	;# 
  1134  010C                     	;# 
  1135  010D                     	;# 
  1136  010E                     	;# 
  1137  0111                     	;# 
  1138  0112                     	;# 
  1139  0113                     	;# 
  1140  0114                     	;# 
  1141  0115                     	;# 
  1142  0116                     	;# 
  1143  0117                     	;# 
  1144  0118                     	;# 
  1145  0119                     	;# 
  1146  011C                     	;# 
  1147  018C                     	;# 
  1148  018D                     	;# 
  1149  018E                     	;# 
  1150  0191                     	;# 
  1151  0191                     	;# 
  1152  0192                     	;# 
  1153  0193                     	;# 
  1154  0193                     	;# 
  1155  0194                     	;# 
  1156  0195                     	;# 
  1157  0196                     	;# 
  1158  0199                     	;# 
  1159  0199                     	;# 
  1160  0199                     	;# 
  1161  019A                     	;# 
  1162  019A                     	;# 
  1163  019A                     	;# 
  1164  019B                     	;# 
  1165  019B                     	;# 
  1166  019B                     	;# 
  1167  019B                     	;# 
  1168  019B                     	;# 
  1169  019C                     	;# 
  1170  019C                     	;# 
  1171  019C                     	;# 
  1172  019D                     	;# 
  1173  019D                     	;# 
  1174  019D                     	;# 
  1175  019E                     	;# 
  1176  019E                     	;# 
  1177  019E                     	;# 
  1178  019F                     	;# 
  1179  019F                     	;# 
  1180  019F                     	;# 
  1181  019F                     	;# 
  1182  019F                     	;# 
  1183  020C                     	;# 
  1184  020D                     	;# 
  1185  020E                     	;# 
  1186  0211                     	;# 
  1187  0211                     	;# 
  1188  0212                     	;# 
  1189  0212                     	;# 
  1190  0213                     	;# 
  1191  0213                     	;# 
  1192  0214                     	;# 
  1193  0214                     	;# 
  1194  0215                     	;# 
  1195  0215                     	;# 
  1196  0215                     	;# 
  1197  0215                     	;# 
  1198  0216                     	;# 
  1199  0216                     	;# 
  1200  0217                     	;# 
  1201  0217                     	;# 
  1202  028C                     	;# 
  1203  028D                     	;# 
  1204  028E                     	;# 
  1205  0291                     	;# 
  1206  0291                     	;# 
  1207  0292                     	;# 
  1208  0293                     	;# 
  1209  0293                     	;# 
  1210  0298                     	;# 
  1211  0298                     	;# 
  1212  0299                     	;# 
  1213  029A                     	;# 
  1214  029A                     	;# 
  1215  029E                     	;# 
  1216  030C                     	;# 
  1217  030D                     	;# 
  1218  030E                     	;# 
  1219  038C                     	;# 
  1220  038D                     	;# 
  1221  038E                     	;# 
  1222  0391                     	;# 
  1223  0392                     	;# 
  1224  0393                     	;# 
  1225  0394                     	;# 
  1226  0395                     	;# 
  1227  0396                     	;# 
  1228  0397                     	;# 
  1229  0398                     	;# 
  1230  0399                     	;# 
  1231  0415                     	;# 
  1232  0416                     	;# 
  1233  0417                     	;# 
  1234  041C                     	;# 
  1235  041D                     	;# 
  1236  041E                     	;# 
  1237  0511                     	;# 
  1238  0515                     	;# 
  1239  0617                     	;# 
  1240  0618                     	;# 
  1241  0619                     	;# 
  1242  0619                     	;# 
  1243  061A                     	;# 
  1244  061B                     	;# 
  1245  061C                     	;# 
  1246  061C                     	;# 
  1247  0691                     	;# 
  1248  0692                     	;# 
  1249  0693                     	;# 
  1250  0694                     	;# 
  1251  0695                     	;# 
  1252  0696                     	;# 
  1253  0697                     	;# 
  1254  0698                     	;# 
  1255  0699                     	;# 
  1256  069A                     	;# 
  1257  069B                     	;# 
  1258  069C                     	;# 
  1259  069D                     	;# 
  1260  069E                     	;# 
  1261  069F                     	;# 
  1262  0E0F                     	;# 
  1263  0E10                     	;# 
  1264  0E11                     	;# 
  1265  0E12                     	;# 
  1266  0E13                     	;# 
  1267  0E14                     	;# 
  1268  0E15                     	;# 
  1269  0E17                     	;# 
  1270  0E20                     	;# 
  1271  0E21                     	;# 
  1272  0E22                     	;# 
  1273  0E24                     	;# 
  1274  0E25                     	;# 
  1275  0E28                     	;# 
  1276  0E29                     	;# 
  1277  0E2A                     	;# 
  1278  0E2B                     	;# 
  1279  0E90                     	;# 
  1280  0E91                     	;# 
  1281  0E92                     	;# 
  1282  0E94                     	;# 
  1283  0E95                     	;# 
  1284  0E9C                     	;# 
  1285  0E9D                     	;# 
  1286  0E9E                     	;# 
  1287  0E9F                     	;# 
  1288  0EA0                     	;# 
  1289  0EA1                     	;# 
  1290  0EA2                     	;# 
  1291  0EA3                     	;# 
  1292  0EA4                     	;# 
  1293  0EA5                     	;# 
  1294  0EA6                     	;# 
  1295  0EA7                     	;# 
  1296  0F0F                     	;# 
  1297  0F10                     	;# 
  1298  0F11                     	;# 
  1299  0F12                     	;# 
  1300  0F13                     	;# 
  1301  0F14                     	;# 
  1302  0F15                     	;# 
  1303  0F16                     	;# 
  1304  0F17                     	;# 
  1305  0F18                     	;# 
  1306  0F19                     	;# 
  1307  0F1A                     	;# 
  1308  0F1B                     	;# 
  1309  0F1C                     	;# 
  1310  0F1D                     	;# 
  1311  0F1E                     	;# 
  1312  0F1F                     	;# 
  1313  0F20                     	;# 
  1314  0F21                     	;# 
  1315  0F22                     	;# 
  1316  0F23                     	;# 
  1317  0F24                     	;# 
  1318  0F25                     	;# 
  1319  0F26                     	;# 
  1320  0F27                     	;# 
  1321  0F28                     	;# 
  1322  0F29                     	;# 
  1323  0F2A                     	;# 
  1324  0F2B                     	;# 
  1325  0F2C                     	;# 
  1326  0F2D                     	;# 
  1327  0FE4                     	;# 
  1328  0FE5                     	;# 
  1329  0FE6                     	;# 
  1330  0FE7                     	;# 
  1331  0FE8                     	;# 
  1332  0FE9                     	;# 
  1333  0FEA                     	;# 
  1334  0FEB                     	;# 
  1335  0FED                     	;# 
  1336  0FEE                     	;# 
  1337  0FEF                     	;# 
  1338  0000                     	;# 
  1339  0001                     	;# 
  1340  0002                     	;# 
  1341  0003                     	;# 
  1342  0004                     	;# 
  1343  0005                     	;# 
  1344  0006                     	;# 
  1345  0007                     	;# 
  1346  0008                     	;# 
  1347  0009                     	;# 
  1348  000A                     	;# 
  1349  000B                     	;# 
  1350  000C                     	;# 
  1351  000D                     	;# 
  1352  000E                     	;# 
  1353  0011                     	;# 
  1354  0012                     	;# 
  1355  0013                     	;# 
  1356  0015                     	;# 
  1357  0016                     	;# 
  1358  0016                     	;# 
  1359  0017                     	;# 
  1360  0018                     	;# 
  1361  0019                     	;# 
  1362  001A                     	;# 
  1363  001B                     	;# 
  1364  001C                     	;# 
  1365  008C                     	;# 
  1366  008D                     	;# 
  1367  008E                     	;# 
  1368  0091                     	;# 
  1369  0092                     	;# 
  1370  0093                     	;# 
  1371  0095                     	;# 
  1372  0096                     	;# 
  1373  0097                     	;# 
  1374  0098                     	;# 
  1375  0099                     	;# 
  1376  009A                     	;# 
  1377  009B                     	;# 
  1378  009B                     	;# 
  1379  009C                     	;# 
  1380  009D                     	;# 
  1381  009E                     	;# 
  1382  009F                     	;# 
  1383  010C                     	;# 
  1384  010D                     	;# 
  1385  010E                     	;# 
  1386  0111                     	;# 
  1387  0112                     	;# 
  1388  0113                     	;# 
  1389  0114                     	;# 
  1390  0115                     	;# 
  1391  0116                     	;# 
  1392  0117                     	;# 
  1393  0118                     	;# 
  1394  0119                     	;# 
  1395  011C                     	;# 
  1396  018C                     	;# 
  1397  018D                     	;# 
  1398  018E                     	;# 
  1399  0191                     	;# 
  1400  0191                     	;# 
  1401  0192                     	;# 
  1402  0193                     	;# 
  1403  0193                     	;# 
  1404  0194                     	;# 
  1405  0195                     	;# 
  1406  0196                     	;# 
  1407  0199                     	;# 
  1408  0199                     	;# 
  1409  0199                     	;# 
  1410  019A                     	;# 
  1411  019A                     	;# 
  1412  019A                     	;# 
  1413  019B                     	;# 
  1414  019B                     	;# 
  1415  019B                     	;# 
  1416  019B                     	;# 
  1417  019B                     	;# 
  1418  019C                     	;# 
  1419  019C                     	;# 
  1420  019C                     	;# 
  1421  019D                     	;# 
  1422  019D                     	;# 
  1423  019D                     	;# 
  1424  019E                     	;# 
  1425  019E                     	;# 
  1426  019E                     	;# 
  1427  019F                     	;# 
  1428  019F                     	;# 
  1429  019F                     	;# 
  1430  019F                     	;# 
  1431  019F                     	;# 
  1432  020C                     	;# 
  1433  020D                     	;# 
  1434  020E                     	;# 
  1435  0211                     	;# 
  1436  0211                     	;# 
  1437  0212                     	;# 
  1438  0212                     	;# 
  1439  0213                     	;# 
  1440  0213                     	;# 
  1441  0214                     	;# 
  1442  0214                     	;# 
  1443  0215                     	;# 
  1444  0215                     	;# 
  1445  0215                     	;# 
  1446  0215                     	;# 
  1447  0216                     	;# 
  1448  0216                     	;# 
  1449  0217                     	;# 
  1450  0217                     	;# 
  1451  028C                     	;# 
  1452  028D                     	;# 
  1453  028E                     	;# 
  1454  0291                     	;# 
  1455  0291                     	;# 
  1456  0292                     	;# 
  1457  0293                     	;# 
  1458  0293                     	;# 
  1459  0298                     	;# 
  1460  0298                     	;# 
  1461  0299                     	;# 
  1462  029A                     	;# 
  1463  029A                     	;# 
  1464  029E                     	;# 
  1465  030C                     	;# 
  1466  030D                     	;# 
  1467  030E                     	;# 
  1468  038C                     	;# 
  1469  038D                     	;# 
  1470  038E                     	;# 
  1471  0391                     	;# 
  1472  0392                     	;# 
  1473  0393                     	;# 
  1474  0394                     	;# 
  1475  0395                     	;# 
  1476  0396                     	;# 
  1477  0397                     	;# 
  1478  0398                     	;# 
  1479  0399                     	;# 
  1480  0415                     	;# 
  1481  0416                     	;# 
  1482  0417                     	;# 
  1483  041C                     	;# 
  1484  041D                     	;# 
  1485  041E                     	;# 
  1486  0511                     	;# 
  1487  0515                     	;# 
  1488  0617                     	;# 
  1489  0618                     	;# 
  1490  0619                     	;# 
  1491  0619                     	;# 
  1492  061A                     	;# 
  1493  061B                     	;# 
  1494  061C                     	;# 
  1495  061C                     	;# 
  1496  0691                     	;# 
  1497  0692                     	;# 
  1498  0693                     	;# 
  1499  0694                     	;# 
  1500  0695                     	;# 
  1501  0696                     	;# 
  1502  0697                     	;# 
  1503  0698                     	;# 
  1504  0699                     	;# 
  1505  069A                     	;# 
  1506  069B                     	;# 
  1507  069C                     	;# 
  1508  069D                     	;# 
  1509  069E                     	;# 
  1510  069F                     	;# 
  1511  0E0F                     	;# 
  1512  0E10                     	;# 
  1513  0E11                     	;# 
  1514  0E12                     	;# 
  1515  0E13                     	;# 
  1516  0E14                     	;# 
  1517  0E15                     	;# 
  1518  0E17                     	;# 
  1519  0E20                     	;# 
  1520  0E21                     	;# 
  1521  0E22                     	;# 
  1522  0E24                     	;# 
  1523  0E25                     	;# 
  1524  0E28                     	;# 
  1525  0E29                     	;# 
  1526  0E2A                     	;# 
  1527  0E2B                     	;# 
  1528  0E90                     	;# 
  1529  0E91                     	;# 
  1530  0E92                     	;# 
  1531  0E94                     	;# 
  1532  0E95                     	;# 
  1533  0E9C                     	;# 
  1534  0E9D                     	;# 
  1535  0E9E                     	;# 
  1536  0E9F                     	;# 
  1537  0EA0                     	;# 
  1538  0EA1                     	;# 
  1539  0EA2                     	;# 
  1540  0EA3                     	;# 
  1541  0EA4                     	;# 
  1542  0EA5                     	;# 
  1543  0EA6                     	;# 
  1544  0EA7                     	;# 
  1545  0F0F                     	;# 
  1546  0F10                     	;# 
  1547  0F11                     	;# 
  1548  0F12                     	;# 
  1549  0F13                     	;# 
  1550  0F14                     	;# 
  1551  0F15                     	;# 
  1552  0F16                     	;# 
  1553  0F17                     	;# 
  1554  0F18                     	;# 
  1555  0F19                     	;# 
  1556  0F1A                     	;# 
  1557  0F1B                     	;# 
  1558  0F1C                     	;# 
  1559  0F1D                     	;# 
  1560  0F1E                     	;# 
  1561  0F1F                     	;# 
  1562  0F20                     	;# 
  1563  0F21                     	;# 
  1564  0F22                     	;# 
  1565  0F23                     	;# 
  1566  0F24                     	;# 
  1567  0F25                     	;# 
  1568  0F26                     	;# 
  1569  0F27                     	;# 
  1570  0F28                     	;# 
  1571  0F29                     	;# 
  1572  0F2A                     	;# 
  1573  0F2B                     	;# 
  1574  0F2C                     	;# 
  1575  0F2D                     	;# 
  1576  0FE4                     	;# 
  1577  0FE5                     	;# 
  1578  0FE6                     	;# 
  1579  0FE7                     	;# 
  1580  0FE8                     	;# 
  1581  0FE9                     	;# 
  1582  0FEA                     	;# 
  1583  0FEB                     	;# 
  1584  0FED                     	;# 
  1585  0FEE                     	;# 
  1586  0FEF                     	;# 
  1587  0000                     	;# 
  1588  0001                     	;# 
  1589  0002                     	;# 
  1590  0003                     	;# 
  1591  0004                     	;# 
  1592  0005                     	;# 
  1593  0006                     	;# 
  1594  0007                     	;# 
  1595  0008                     	;# 
  1596  0009                     	;# 
  1597  000A                     	;# 
  1598  000B                     	;# 
  1599  000C                     	;# 
  1600  000D                     	;# 
  1601  000E                     	;# 
  1602  0011                     	;# 
  1603  0012                     	;# 
  1604  0013                     	;# 
  1605  0015                     	;# 
  1606  0016                     	;# 
  1607  0016                     	;# 
  1608  0017                     	;# 
  1609  0018                     	;# 
  1610  0019                     	;# 
  1611  001A                     	;# 
  1612  001B                     	;# 
  1613  001C                     	;# 
  1614  008C                     	;# 
  1615  008D                     	;# 
  1616  008E                     	;# 
  1617  0091                     	;# 
  1618  0092                     	;# 
  1619  0093                     	;# 
  1620  0095                     	;# 
  1621  0096                     	;# 
  1622  0097                     	;# 
  1623  0098                     	;# 
  1624  0099                     	;# 
  1625  009A                     	;# 
  1626  009B                     	;# 
  1627  009B                     	;# 
  1628  009C                     	;# 
  1629  009D                     	;# 
  1630  009E                     	;# 
  1631  009F                     	;# 
  1632  010C                     	;# 
  1633  010D                     	;# 
  1634  010E                     	;# 
  1635  0111                     	;# 
  1636  0112                     	;# 
  1637  0113                     	;# 
  1638  0114                     	;# 
  1639  0115                     	;# 
  1640  0116                     	;# 
  1641  0117                     	;# 
  1642  0118                     	;# 
  1643  0119                     	;# 
  1644  011C                     	;# 
  1645  018C                     	;# 
  1646  018D                     	;# 
  1647  018E                     	;# 
  1648  0191                     	;# 
  1649  0191                     	;# 
  1650  0192                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0194                     	;# 
  1654  0195                     	;# 
  1655  0196                     	;# 
  1656  0199                     	;# 
  1657  0199                     	;# 
  1658  0199                     	;# 
  1659  019A                     	;# 
  1660  019A                     	;# 
  1661  019A                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019C                     	;# 
  1668  019C                     	;# 
  1669  019C                     	;# 
  1670  019D                     	;# 
  1671  019D                     	;# 
  1672  019D                     	;# 
  1673  019E                     	;# 
  1674  019E                     	;# 
  1675  019E                     	;# 
  1676  019F                     	;# 
  1677  019F                     	;# 
  1678  019F                     	;# 
  1679  019F                     	;# 
  1680  019F                     	;# 
  1681  020C                     	;# 
  1682  020D                     	;# 
  1683  020E                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  028C                     	;# 
  1701  028D                     	;# 
  1702  028E                     	;# 
  1703  0291                     	;# 
  1704  0291                     	;# 
  1705  0292                     	;# 
  1706  0293                     	;# 
  1707  0293                     	;# 
  1708  0298                     	;# 
  1709  0298                     	;# 
  1710  0299                     	;# 
  1711  029A                     	;# 
  1712  029A                     	;# 
  1713  029E                     	;# 
  1714  030C                     	;# 
  1715  030D                     	;# 
  1716  030E                     	;# 
  1717  038C                     	;# 
  1718  038D                     	;# 
  1719  038E                     	;# 
  1720  0391                     	;# 
  1721  0392                     	;# 
  1722  0393                     	;# 
  1723  0394                     	;# 
  1724  0395                     	;# 
  1725  0396                     	;# 
  1726  0397                     	;# 
  1727  0398                     	;# 
  1728  0399                     	;# 
  1729  0415                     	;# 
  1730  0416                     	;# 
  1731  0417                     	;# 
  1732  041C                     	;# 
  1733  041D                     	;# 
  1734  041E                     	;# 
  1735  0511                     	;# 
  1736  0515                     	;# 
  1737  0617                     	;# 
  1738  0618                     	;# 
  1739  0619                     	;# 
  1740  0619                     	;# 
  1741  061A                     	;# 
  1742  061B                     	;# 
  1743  061C                     	;# 
  1744  061C                     	;# 
  1745  0691                     	;# 
  1746  0692                     	;# 
  1747  0693                     	;# 
  1748  0694                     	;# 
  1749  0695                     	;# 
  1750  0696                     	;# 
  1751  0697                     	;# 
  1752  0698                     	;# 
  1753  0699                     	;# 
  1754  069A                     	;# 
  1755  069B                     	;# 
  1756  069C                     	;# 
  1757  069D                     	;# 
  1758  069E                     	;# 
  1759  069F                     	;# 
  1760  0E0F                     	;# 
  1761  0E10                     	;# 
  1762  0E11                     	;# 
  1763  0E12                     	;# 
  1764  0E13                     	;# 
  1765  0E14                     	;# 
  1766  0E15                     	;# 
  1767  0E17                     	;# 
  1768  0E20                     	;# 
  1769  0E21                     	;# 
  1770  0E22                     	;# 
  1771  0E24                     	;# 
  1772  0E25                     	;# 
  1773  0E28                     	;# 
  1774  0E29                     	;# 
  1775  0E2A                     	;# 
  1776  0E2B                     	;# 
  1777  0E90                     	;# 
  1778  0E91                     	;# 
  1779  0E92                     	;# 
  1780  0E94                     	;# 
  1781  0E95                     	;# 
  1782  0E9C                     	;# 
  1783  0E9D                     	;# 
  1784  0E9E                     	;# 
  1785  0E9F                     	;# 
  1786  0EA0                     	;# 
  1787  0EA1                     	;# 
  1788  0EA2                     	;# 
  1789  0EA3                     	;# 
  1790  0EA4                     	;# 
  1791  0EA5                     	;# 
  1792  0EA6                     	;# 
  1793  0EA7                     	;# 
  1794  0F0F                     	;# 
  1795  0F10                     	;# 
  1796  0F11                     	;# 
  1797  0F12                     	;# 
  1798  0F13                     	;# 
  1799  0F14                     	;# 
  1800  0F15                     	;# 
  1801  0F16                     	;# 
  1802  0F17                     	;# 
  1803  0F18                     	;# 
  1804  0F19                     	;# 
  1805  0F1A                     	;# 
  1806  0F1B                     	;# 
  1807  0F1C                     	;# 
  1808  0F1D                     	;# 
  1809  0F1E                     	;# 
  1810  0F1F                     	;# 
  1811  0F20                     	;# 
  1812  0F21                     	;# 
  1813  0F22                     	;# 
  1814  0F23                     	;# 
  1815  0F24                     	;# 
  1816  0F25                     	;# 
  1817  0F26                     	;# 
  1818  0F27                     	;# 
  1819  0F28                     	;# 
  1820  0F29                     	;# 
  1821  0F2A                     	;# 
  1822  0F2B                     	;# 
  1823  0F2C                     	;# 
  1824  0F2D                     	;# 
  1825  0FE4                     	;# 
  1826  0FE5                     	;# 
  1827  0FE6                     	;# 
  1828  0FE7                     	;# 
  1829  0FE8                     	;# 
  1830  0FE9                     	;# 
  1831  0FEA                     	;# 
  1832  0FEB                     	;# 
  1833  0FED                     	;# 
  1834  0FEE                     	;# 
  1835  0FEF                     	;# 
  1836  0000                     	;# 
  1837  0001                     	;# 
  1838  0002                     	;# 
  1839  0003                     	;# 
  1840  0004                     	;# 
  1841  0005                     	;# 
  1842  0006                     	;# 
  1843  0007                     	;# 
  1844  0008                     	;# 
  1845  0009                     	;# 
  1846  000A                     	;# 
  1847  000B                     	;# 
  1848  000C                     	;# 
  1849  000D                     	;# 
  1850  000E                     	;# 
  1851  0011                     	;# 
  1852  0012                     	;# 
  1853  0013                     	;# 
  1854  0015                     	;# 
  1855  0016                     	;# 
  1856  0016                     	;# 
  1857  0017                     	;# 
  1858  0018                     	;# 
  1859  0019                     	;# 
  1860  001A                     	;# 
  1861  001B                     	;# 
  1862  001C                     	;# 
  1863  008C                     	;# 
  1864  008D                     	;# 
  1865  008E                     	;# 
  1866  0091                     	;# 
  1867  0092                     	;# 
  1868  0093                     	;# 
  1869  0095                     	;# 
  1870  0096                     	;# 
  1871  0097                     	;# 
  1872  0098                     	;# 
  1873  0099                     	;# 
  1874  009A                     	;# 
  1875  009B                     	;# 
  1876  009B                     	;# 
  1877  009C                     	;# 
  1878  009D                     	;# 
  1879  009E                     	;# 
  1880  009F                     	;# 
  1881  010C                     	;# 
  1882  010D                     	;# 
  1883  010E                     	;# 
  1884  0111                     	;# 
  1885  0112                     	;# 
  1886  0113                     	;# 
  1887  0114                     	;# 
  1888  0115                     	;# 
  1889  0116                     	;# 
  1890  0117                     	;# 
  1891  0118                     	;# 
  1892  0119                     	;# 
  1893  011C                     	;# 
  1894  018C                     	;# 
  1895  018D                     	;# 
  1896  018E                     	;# 
  1897  0191                     	;# 
  1898  0191                     	;# 
  1899  0192                     	;# 
  1900  0193                     	;# 
  1901  0193                     	;# 
  1902  0194                     	;# 
  1903  0195                     	;# 
  1904  0196                     	;# 
  1905  0199                     	;# 
  1906  0199                     	;# 
  1907  0199                     	;# 
  1908  019A                     	;# 
  1909  019A                     	;# 
  1910  019A                     	;# 
  1911  019B                     	;# 
  1912  019B                     	;# 
  1913  019B                     	;# 
  1914  019B                     	;# 
  1915  019B                     	;# 
  1916  019C                     	;# 
  1917  019C                     	;# 
  1918  019C                     	;# 
  1919  019D                     	;# 
  1920  019D                     	;# 
  1921  019D                     	;# 
  1922  019E                     	;# 
  1923  019E                     	;# 
  1924  019E                     	;# 
  1925  019F                     	;# 
  1926  019F                     	;# 
  1927  019F                     	;# 
  1928  019F                     	;# 
  1929  019F                     	;# 
  1930  020C                     	;# 
  1931  020D                     	;# 
  1932  020E                     	;# 
  1933  0211                     	;# 
  1934  0211                     	;# 
  1935  0212                     	;# 
  1936  0212                     	;# 
  1937  0213                     	;# 
  1938  0213                     	;# 
  1939  0214                     	;# 
  1940  0214                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0215                     	;# 
  1944  0215                     	;# 
  1945  0216                     	;# 
  1946  0216                     	;# 
  1947  0217                     	;# 
  1948  0217                     	;# 
  1949  028C                     	;# 
  1950  028D                     	;# 
  1951  028E                     	;# 
  1952  0291                     	;# 
  1953  0291                     	;# 
  1954  0292                     	;# 
  1955  0293                     	;# 
  1956  0293                     	;# 
  1957  0298                     	;# 
  1958  0298                     	;# 
  1959  0299                     	;# 
  1960  029A                     	;# 
  1961  029A                     	;# 
  1962  029E                     	;# 
  1963  030C                     	;# 
  1964  030D                     	;# 
  1965  030E                     	;# 
  1966  038C                     	;# 
  1967  038D                     	;# 
  1968  038E                     	;# 
  1969  0391                     	;# 
  1970  0392                     	;# 
  1971  0393                     	;# 
  1972  0394                     	;# 
  1973  0395                     	;# 
  1974  0396                     	;# 
  1975  0397                     	;# 
  1976  0398                     	;# 
  1977  0399                     	;# 
  1978  0415                     	;# 
  1979  0416                     	;# 
  1980  0417                     	;# 
  1981  041C                     	;# 
  1982  041D                     	;# 
  1983  041E                     	;# 
  1984  0511                     	;# 
  1985  0515                     	;# 
  1986  0617                     	;# 
  1987  0618                     	;# 
  1988  0619                     	;# 
  1989  0619                     	;# 
  1990  061A                     	;# 
  1991  061B                     	;# 
  1992  061C                     	;# 
  1993  061C                     	;# 
  1994  0691                     	;# 
  1995  0692                     	;# 
  1996  0693                     	;# 
  1997  0694                     	;# 
  1998  0695                     	;# 
  1999  0696                     	;# 
  2000  0697                     	;# 
  2001  0698                     	;# 
  2002  0699                     	;# 
  2003  069A                     	;# 
  2004  069B                     	;# 
  2005  069C                     	;# 
  2006  069D                     	;# 
  2007  069E                     	;# 
  2008  069F                     	;# 
  2009  0E0F                     	;# 
  2010  0E10                     	;# 
  2011  0E11                     	;# 
  2012  0E12                     	;# 
  2013  0E13                     	;# 
  2014  0E14                     	;# 
  2015  0E15                     	;# 
  2016  0E17                     	;# 
  2017  0E20                     	;# 
  2018  0E21                     	;# 
  2019  0E22                     	;# 
  2020  0E24                     	;# 
  2021  0E25                     	;# 
  2022  0E28                     	;# 
  2023  0E29                     	;# 
  2024  0E2A                     	;# 
  2025  0E2B                     	;# 
  2026  0E90                     	;# 
  2027  0E91                     	;# 
  2028  0E92                     	;# 
  2029  0E94                     	;# 
  2030  0E95                     	;# 
  2031  0E9C                     	;# 
  2032  0E9D                     	;# 
  2033  0E9E                     	;# 
  2034  0E9F                     	;# 
  2035  0EA0                     	;# 
  2036  0EA1                     	;# 
  2037  0EA2                     	;# 
  2038  0EA3                     	;# 
  2039  0EA4                     	;# 
  2040  0EA5                     	;# 
  2041  0EA6                     	;# 
  2042  0EA7                     	;# 
  2043  0F0F                     	;# 
  2044  0F10                     	;# 
  2045  0F11                     	;# 
  2046  0F12                     	;# 
  2047  0F13                     	;# 
  2048  0F14                     	;# 
  2049  0F15                     	;# 
  2050  0F16                     	;# 
  2051  0F17                     	;# 
  2052  0F18                     	;# 
  2053  0F19                     	;# 
  2054  0F1A                     	;# 
  2055  0F1B                     	;# 
  2056  0F1C                     	;# 
  2057  0F1D                     	;# 
  2058  0F1E                     	;# 
  2059  0F1F                     	;# 
  2060  0F20                     	;# 
  2061  0F21                     	;# 
  2062  0F22                     	;# 
  2063  0F23                     	;# 
  2064  0F24                     	;# 
  2065  0F25                     	;# 
  2066  0F26                     	;# 
  2067  0F27                     	;# 
  2068  0F28                     	;# 
  2069  0F29                     	;# 
  2070  0F2A                     	;# 
  2071  0F2B                     	;# 
  2072  0F2C                     	;# 
  2073  0F2D                     	;# 
  2074  0FE4                     	;# 
  2075  0FE5                     	;# 
  2076  0FE6                     	;# 
  2077  0FE7                     	;# 
  2078  0FE8                     	;# 
  2079  0FE9                     	;# 
  2080  0FEA                     	;# 
  2081  0FEB                     	;# 
  2082  0FED                     	;# 
  2083  0FEE                     	;# 
  2084  0FEF                     	;# 
  2085  0000                     	;# 
  2086  0001                     	;# 
  2087  0002                     	;# 
  2088  0003                     	;# 
  2089  0004                     	;# 
  2090  0005                     	;# 
  2091  0006                     	;# 
  2092  0007                     	;# 
  2093  0008                     	;# 
  2094  0009                     	;# 
  2095  000A                     	;# 
  2096  000B                     	;# 
  2097  000C                     	;# 
  2098  000D                     	;# 
  2099  000E                     	;# 
  2100  0011                     	;# 
  2101  0012                     	;# 
  2102  0013                     	;# 
  2103  0015                     	;# 
  2104  0016                     	;# 
  2105  0016                     	;# 
  2106  0017                     	;# 
  2107  0018                     	;# 
  2108  0019                     	;# 
  2109  001A                     	;# 
  2110  001B                     	;# 
  2111  001C                     	;# 
  2112  008C                     	;# 
  2113  008D                     	;# 
  2114  008E                     	;# 
  2115  0091                     	;# 
  2116  0092                     	;# 
  2117  0093                     	;# 
  2118  0095                     	;# 
  2119  0096                     	;# 
  2120  0097                     	;# 
  2121  0098                     	;# 
  2122  0099                     	;# 
  2123  009A                     	;# 
  2124  009B                     	;# 
  2125  009B                     	;# 
  2126  009C                     	;# 
  2127  009D                     	;# 
  2128  009E                     	;# 
  2129  009F                     	;# 
  2130  010C                     	;# 
  2131  010D                     	;# 
  2132  010E                     	;# 
  2133  0111                     	;# 
  2134  0112                     	;# 
  2135  0113                     	;# 
  2136  0114                     	;# 
  2137  0115                     	;# 
  2138  0116                     	;# 
  2139  0117                     	;# 
  2140  0118                     	;# 
  2141  0119                     	;# 
  2142  011C                     	;# 
  2143  018C                     	;# 
  2144  018D                     	;# 
  2145  018E                     	;# 
  2146  0191                     	;# 
  2147  0191                     	;# 
  2148  0192                     	;# 
  2149  0193                     	;# 
  2150  0193                     	;# 
  2151  0194                     	;# 
  2152  0195                     	;# 
  2153  0196                     	;# 
  2154  0199                     	;# 
  2155  0199                     	;# 
  2156  0199                     	;# 
  2157  019A                     	;# 
  2158  019A                     	;# 
  2159  019A                     	;# 
  2160  019B                     	;# 
  2161  019B                     	;# 
  2162  019B                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019C                     	;# 
  2166  019C                     	;# 
  2167  019C                     	;# 
  2168  019D                     	;# 
  2169  019D                     	;# 
  2170  019D                     	;# 
  2171  019E                     	;# 
  2172  019E                     	;# 
  2173  019E                     	;# 
  2174  019F                     	;# 
  2175  019F                     	;# 
  2176  019F                     	;# 
  2177  019F                     	;# 
  2178  019F                     	;# 
  2179  020C                     	;# 
  2180  020D                     	;# 
  2181  020E                     	;# 
  2182  0211                     	;# 
  2183  0211                     	;# 
  2184  0212                     	;# 
  2185  0212                     	;# 
  2186  0213                     	;# 
  2187  0213                     	;# 
  2188  0214                     	;# 
  2189  0214                     	;# 
  2190  0215                     	;# 
  2191  0215                     	;# 
  2192  0215                     	;# 
  2193  0215                     	;# 
  2194  0216                     	;# 
  2195  0216                     	;# 
  2196  0217                     	;# 
  2197  0217                     	;# 
  2198  028C                     	;# 
  2199  028D                     	;# 
  2200  028E                     	;# 
  2201  0291                     	;# 
  2202  0291                     	;# 
  2203  0292                     	;# 
  2204  0293                     	;# 
  2205  0293                     	;# 
  2206  0298                     	;# 
  2207  0298                     	;# 
  2208  0299                     	;# 
  2209  029A                     	;# 
  2210  029A                     	;# 
  2211  029E                     	;# 
  2212  030C                     	;# 
  2213  030D                     	;# 
  2214  030E                     	;# 
  2215  038C                     	;# 
  2216  038D                     	;# 
  2217  038E                     	;# 
  2218  0391                     	;# 
  2219  0392                     	;# 
  2220  0393                     	;# 
  2221  0394                     	;# 
  2222  0395                     	;# 
  2223  0396                     	;# 
  2224  0397                     	;# 
  2225  0398                     	;# 
  2226  0399                     	;# 
  2227  0415                     	;# 
  2228  0416                     	;# 
  2229  0417                     	;# 
  2230  041C                     	;# 
  2231  041D                     	;# 
  2232  041E                     	;# 
  2233  0511                     	;# 
  2234  0515                     	;# 
  2235  0617                     	;# 
  2236  0618                     	;# 
  2237  0619                     	;# 
  2238  0619                     	;# 
  2239  061A                     	;# 
  2240  061B                     	;# 
  2241  061C                     	;# 
  2242  061C                     	;# 
  2243  0691                     	;# 
  2244  0692                     	;# 
  2245  0693                     	;# 
  2246  0694                     	;# 
  2247  0695                     	;# 
  2248  0696                     	;# 
  2249  0697                     	;# 
  2250  0698                     	;# 
  2251  0699                     	;# 
  2252  069A                     	;# 
  2253  069B                     	;# 
  2254  069C                     	;# 
  2255  069D                     	;# 
  2256  069E                     	;# 
  2257  069F                     	;# 
  2258  0E0F                     	;# 
  2259  0E10                     	;# 
  2260  0E11                     	;# 
  2261  0E12                     	;# 
  2262  0E13                     	;# 
  2263  0E14                     	;# 
  2264  0E15                     	;# 
  2265  0E17                     	;# 
  2266  0E20                     	;# 
  2267  0E21                     	;# 
  2268  0E22                     	;# 
  2269  0E24                     	;# 
  2270  0E25                     	;# 
  2271  0E28                     	;# 
  2272  0E29                     	;# 
  2273  0E2A                     	;# 
  2274  0E2B                     	;# 
  2275  0E90                     	;# 
  2276  0E91                     	;# 
  2277  0E92                     	;# 
  2278  0E94                     	;# 
  2279  0E95                     	;# 
  2280  0E9C                     	;# 
  2281  0E9D                     	;# 
  2282  0E9E                     	;# 
  2283  0E9F                     	;# 
  2284  0EA0                     	;# 
  2285  0EA1                     	;# 
  2286  0EA2                     	;# 
  2287  0EA3                     	;# 
  2288  0EA4                     	;# 
  2289  0EA5                     	;# 
  2290  0EA6                     	;# 
  2291  0EA7                     	;# 
  2292  0F0F                     	;# 
  2293  0F10                     	;# 
  2294  0F11                     	;# 
  2295  0F12                     	;# 
  2296  0F13                     	;# 
  2297  0F14                     	;# 
  2298  0F15                     	;# 
  2299  0F16                     	;# 
  2300  0F17                     	;# 
  2301  0F18                     	;# 
  2302  0F19                     	;# 
  2303  0F1A                     	;# 
  2304  0F1B                     	;# 
  2305  0F1C                     	;# 
  2306  0F1D                     	;# 
  2307  0F1E                     	;# 
  2308  0F1F                     	;# 
  2309  0F20                     	;# 
  2310  0F21                     	;# 
  2311  0F22                     	;# 
  2312  0F23                     	;# 
  2313  0F24                     	;# 
  2314  0F25                     	;# 
  2315  0F26                     	;# 
  2316  0F27                     	;# 
  2317  0F28                     	;# 
  2318  0F29                     	;# 
  2319  0F2A                     	;# 
  2320  0F2B                     	;# 
  2321  0F2C                     	;# 
  2322  0F2D                     	;# 
  2323  0FE4                     	;# 
  2324  0FE5                     	;# 
  2325  0FE6                     	;# 
  2326  0FE7                     	;# 
  2327  0FE8                     	;# 
  2328  0FE9                     	;# 
  2329  0FEA                     	;# 
  2330  0FEB                     	;# 
  2331  0FED                     	;# 
  2332  0FEE                     	;# 
  2333  0FEF                     	;# 
  2334  0000                     	;# 
  2335  0001                     	;# 
  2336  0002                     	;# 
  2337  0003                     	;# 
  2338  0004                     	;# 
  2339  0005                     	;# 
  2340  0006                     	;# 
  2341  0007                     	;# 
  2342  0008                     	;# 
  2343  0009                     	;# 
  2344  000A                     	;# 
  2345  000B                     	;# 
  2346  000C                     	;# 
  2347  000D                     	;# 
  2348  000E                     	;# 
  2349  0011                     	;# 
  2350  0012                     	;# 
  2351  0013                     	;# 
  2352  0015                     	;# 
  2353  0016                     	;# 
  2354  0016                     	;# 
  2355  0017                     	;# 
  2356  0018                     	;# 
  2357  0019                     	;# 
  2358  001A                     	;# 
  2359  001B                     	;# 
  2360  001C                     	;# 
  2361  008C                     	;# 
  2362  008D                     	;# 
  2363  008E                     	;# 
  2364  0091                     	;# 
  2365  0092                     	;# 
  2366  0093                     	;# 
  2367  0095                     	;# 
  2368  0096                     	;# 
  2369  0097                     	;# 
  2370  0098                     	;# 
  2371  0099                     	;# 
  2372  009A                     	;# 
  2373  009B                     	;# 
  2374  009B                     	;# 
  2375  009C                     	;# 
  2376  009D                     	;# 
  2377  009E                     	;# 
  2378  009F                     	;# 
  2379  010C                     	;# 
  2380  010D                     	;# 
  2381  010E                     	;# 
  2382  0111                     	;# 
  2383  0112                     	;# 
  2384  0113                     	;# 
  2385  0114                     	;# 
  2386  0115                     	;# 
  2387  0116                     	;# 
  2388  0117                     	;# 
  2389  0118                     	;# 
  2390  0119                     	;# 
  2391  011C                     	;# 
  2392  018C                     	;# 
  2393  018D                     	;# 
  2394  018E                     	;# 
  2395  0191                     	;# 
  2396  0191                     	;# 
  2397  0192                     	;# 
  2398  0193                     	;# 
  2399  0193                     	;# 
  2400  0194                     	;# 
  2401  0195                     	;# 
  2402  0196                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  0199                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019A                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019B                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019C                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019D                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019E                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  019F                     	;# 
  2426  019F                     	;# 
  2427  019F                     	;# 
  2428  020C                     	;# 
  2429  020D                     	;# 
  2430  020E                     	;# 
  2431  0211                     	;# 
  2432  0211                     	;# 
  2433  0212                     	;# 
  2434  0212                     	;# 
  2435  0213                     	;# 
  2436  0213                     	;# 
  2437  0214                     	;# 
  2438  0214                     	;# 
  2439  0215                     	;# 
  2440  0215                     	;# 
  2441  0215                     	;# 
  2442  0215                     	;# 
  2443  0216                     	;# 
  2444  0216                     	;# 
  2445  0217                     	;# 
  2446  0217                     	;# 
  2447  028C                     	;# 
  2448  028D                     	;# 
  2449  028E                     	;# 
  2450  0291                     	;# 
  2451  0291                     	;# 
  2452  0292                     	;# 
  2453  0293                     	;# 
  2454  0293                     	;# 
  2455  0298                     	;# 
  2456  0298                     	;# 
  2457  0299                     	;# 
  2458  029A                     	;# 
  2459  029A                     	;# 
  2460  029E                     	;# 
  2461  030C                     	;# 
  2462  030D                     	;# 
  2463  030E                     	;# 
  2464  038C                     	;# 
  2465  038D                     	;# 
  2466  038E                     	;# 
  2467  0391                     	;# 
  2468  0392                     	;# 
  2469  0393                     	;# 
  2470  0394                     	;# 
  2471  0395                     	;# 
  2472  0396                     	;# 
  2473  0397                     	;# 
  2474  0398                     	;# 
  2475  0399                     	;# 
  2476  0415                     	;# 
  2477  0416                     	;# 
  2478  0417                     	;# 
  2479  041C                     	;# 
  2480  041D                     	;# 
  2481  041E                     	;# 
  2482  0511                     	;# 
  2483  0515                     	;# 
  2484  0617                     	;# 
  2485  0618                     	;# 
  2486  0619                     	;# 
  2487  0619                     	;# 
  2488  061A                     	;# 
  2489  061B                     	;# 
  2490  061C                     	;# 
  2491  061C                     	;# 
  2492  0691                     	;# 
  2493  0692                     	;# 
  2494  0693                     	;# 
  2495  0694                     	;# 
  2496  0695                     	;# 
  2497  0696                     	;# 
  2498  0697                     	;# 
  2499  0698                     	;# 
  2500  0699                     	;# 
  2501  069A                     	;# 
  2502  069B                     	;# 
  2503  069C                     	;# 
  2504  069D                     	;# 
  2505  069E                     	;# 
  2506  069F                     	;# 
  2507  0E0F                     	;# 
  2508  0E10                     	;# 
  2509  0E11                     	;# 
  2510  0E12                     	;# 
  2511  0E13                     	;# 
  2512  0E14                     	;# 
  2513  0E15                     	;# 
  2514  0E17                     	;# 
  2515  0E20                     	;# 
  2516  0E21                     	;# 
  2517  0E22                     	;# 
  2518  0E24                     	;# 
  2519  0E25                     	;# 
  2520  0E28                     	;# 
  2521  0E29                     	;# 
  2522  0E2A                     	;# 
  2523  0E2B                     	;# 
  2524  0E90                     	;# 
  2525  0E91                     	;# 
  2526  0E92                     	;# 
  2527  0E94                     	;# 
  2528  0E95                     	;# 
  2529  0E9C                     	;# 
  2530  0E9D                     	;# 
  2531  0E9E                     	;# 
  2532  0E9F                     	;# 
  2533  0EA0                     	;# 
  2534  0EA1                     	;# 
  2535  0EA2                     	;# 
  2536  0EA3                     	;# 
  2537  0EA4                     	;# 
  2538  0EA5                     	;# 
  2539  0EA6                     	;# 
  2540  0EA7                     	;# 
  2541  0F0F                     	;# 
  2542  0F10                     	;# 
  2543  0F11                     	;# 
  2544  0F12                     	;# 
  2545  0F13                     	;# 
  2546  0F14                     	;# 
  2547  0F15                     	;# 
  2548  0F16                     	;# 
  2549  0F17                     	;# 
  2550  0F18                     	;# 
  2551  0F19                     	;# 
  2552  0F1A                     	;# 
  2553  0F1B                     	;# 
  2554  0F1C                     	;# 
  2555  0F1D                     	;# 
  2556  0F1E                     	;# 
  2557  0F1F                     	;# 
  2558  0F20                     	;# 
  2559  0F21                     	;# 
  2560  0F22                     	;# 
  2561  0F23                     	;# 
  2562  0F24                     	;# 
  2563  0F25                     	;# 
  2564  0F26                     	;# 
  2565  0F27                     	;# 
  2566  0F28                     	;# 
  2567  0F29                     	;# 
  2568  0F2A                     	;# 
  2569  0F2B                     	;# 
  2570  0F2C                     	;# 
  2571  0F2D                     	;# 
  2572  0FE4                     	;# 
  2573  0FE5                     	;# 
  2574  0FE6                     	;# 
  2575  0FE7                     	;# 
  2576  0FE8                     	;# 
  2577  0FE9                     	;# 
  2578  0FEA                     	;# 
  2579  0FEB                     	;# 
  2580  0FED                     	;# 
  2581  0FEE                     	;# 
  2582  0FEF                     	;# 
  2583  0000                     	;# 
  2584  0001                     	;# 
  2585  0002                     	;# 
  2586  0003                     	;# 
  2587  0004                     	;# 
  2588  0005                     	;# 
  2589  0006                     	;# 
  2590  0007                     	;# 
  2591  0008                     	;# 
  2592  0009                     	;# 
  2593  000A                     	;# 
  2594  000B                     	;# 
  2595  000C                     	;# 
  2596  000D                     	;# 
  2597  000E                     	;# 
  2598  0011                     	;# 
  2599  0012                     	;# 
  2600  0013                     	;# 
  2601  0015                     	;# 
  2602  0016                     	;# 
  2603  0016                     	;# 
  2604  0017                     	;# 
  2605  0018                     	;# 
  2606  0019                     	;# 
  2607  001A                     	;# 
  2608  001B                     	;# 
  2609  001C                     	;# 
  2610  008C                     	;# 
  2611  008D                     	;# 
  2612  008E                     	;# 
  2613  0091                     	;# 
  2614  0092                     	;# 
  2615  0093                     	;# 
  2616  0095                     	;# 
  2617  0096                     	;# 
  2618  0097                     	;# 
  2619  0098                     	;# 
  2620  0099                     	;# 
  2621  009A                     	;# 
  2622  009B                     	;# 
  2623  009B                     	;# 
  2624  009C                     	;# 
  2625  009D                     	;# 
  2626  009E                     	;# 
  2627  009F                     	;# 
  2628  010C                     	;# 
  2629  010D                     	;# 
  2630  010E                     	;# 
  2631  0111                     	;# 
  2632  0112                     	;# 
  2633  0113                     	;# 
  2634  0114                     	;# 
  2635  0115                     	;# 
  2636  0116                     	;# 
  2637  0117                     	;# 
  2638  0118                     	;# 
  2639  0119                     	;# 
  2640  011C                     	;# 
  2641  018C                     	;# 
  2642  018D                     	;# 
  2643  018E                     	;# 
  2644  0191                     	;# 
  2645  0191                     	;# 
  2646  0192                     	;# 
  2647  0193                     	;# 
  2648  0193                     	;# 
  2649  0194                     	;# 
  2650  0195                     	;# 
  2651  0196                     	;# 
  2652  0199                     	;# 
  2653  0199                     	;# 
  2654  0199                     	;# 
  2655  019A                     	;# 
  2656  019A                     	;# 
  2657  019A                     	;# 
  2658  019B                     	;# 
  2659  019B                     	;# 
  2660  019B                     	;# 
  2661  019B                     	;# 
  2662  019B                     	;# 
  2663  019C                     	;# 
  2664  019C                     	;# 
  2665  019C                     	;# 
  2666  019D                     	;# 
  2667  019D                     	;# 
  2668  019D                     	;# 
  2669  019E                     	;# 
  2670  019E                     	;# 
  2671  019E                     	;# 
  2672  019F                     	;# 
  2673  019F                     	;# 
  2674  019F                     	;# 
  2675  019F                     	;# 
  2676  019F                     	;# 
  2677  020C                     	;# 
  2678  020D                     	;# 
  2679  020E                     	;# 
  2680  0211                     	;# 
  2681  0211                     	;# 
  2682  0212                     	;# 
  2683  0212                     	;# 
  2684  0213                     	;# 
  2685  0213                     	;# 
  2686  0214                     	;# 
  2687  0214                     	;# 
  2688  0215                     	;# 
  2689  0215                     	;# 
  2690  0215                     	;# 
  2691  0215                     	;# 
  2692  0216                     	;# 
  2693  0216                     	;# 
  2694  0217                     	;# 
  2695  0217                     	;# 
  2696  028C                     	;# 
  2697  028D                     	;# 
  2698  028E                     	;# 
  2699  0291                     	;# 
  2700  0291                     	;# 
  2701  0292                     	;# 
  2702  0293                     	;# 
  2703  0293                     	;# 
  2704  0298                     	;# 
  2705  0298                     	;# 
  2706  0299                     	;# 
  2707  029A                     	;# 
  2708  029A                     	;# 
  2709  029E                     	;# 
  2710  030C                     	;# 
  2711  030D                     	;# 
  2712  030E                     	;# 
  2713  038C                     	;# 
  2714  038D                     	;# 
  2715  038E                     	;# 
  2716  0391                     	;# 
  2717  0392                     	;# 
  2718  0393                     	;# 
  2719  0394                     	;# 
  2720  0395                     	;# 
  2721  0396                     	;# 
  2722  0397                     	;# 
  2723  0398                     	;# 
  2724  0399                     	;# 
  2725  0415                     	;# 
  2726  0416                     	;# 
  2727  0417                     	;# 
  2728  041C                     	;# 
  2729  041D                     	;# 
  2730  041E                     	;# 
  2731  0511                     	;# 
  2732  0515                     	;# 
  2733  0617                     	;# 
  2734  0618                     	;# 
  2735  0619                     	;# 
  2736  0619                     	;# 
  2737  061A                     	;# 
  2738  061B                     	;# 
  2739  061C                     	;# 
  2740  061C                     	;# 
  2741  0691                     	;# 
  2742  0692                     	;# 
  2743  0693                     	;# 
  2744  0694                     	;# 
  2745  0695                     	;# 
  2746  0696                     	;# 
  2747  0697                     	;# 
  2748  0698                     	;# 
  2749  0699                     	;# 
  2750  069A                     	;# 
  2751  069B                     	;# 
  2752  069C                     	;# 
  2753  069D                     	;# 
  2754  069E                     	;# 
  2755  069F                     	;# 
  2756  0E0F                     	;# 
  2757  0E10                     	;# 
  2758  0E11                     	;# 
  2759  0E12                     	;# 
  2760  0E13                     	;# 
  2761  0E14                     	;# 
  2762  0E15                     	;# 
  2763  0E17                     	;# 
  2764  0E20                     	;# 
  2765  0E21                     	;# 
  2766  0E22                     	;# 
  2767  0E24                     	;# 
  2768  0E25                     	;# 
  2769  0E28                     	;# 
  2770  0E29                     	;# 
  2771  0E2A                     	;# 
  2772  0E2B                     	;# 
  2773  0E90                     	;# 
  2774  0E91                     	;# 
  2775  0E92                     	;# 
  2776  0E94                     	;# 
  2777  0E95                     	;# 
  2778  0E9C                     	;# 
  2779  0E9D                     	;# 
  2780  0E9E                     	;# 
  2781  0E9F                     	;# 
  2782  0EA0                     	;# 
  2783  0EA1                     	;# 
  2784  0EA2                     	;# 
  2785  0EA3                     	;# 
  2786  0EA4                     	;# 
  2787  0EA5                     	;# 
  2788  0EA6                     	;# 
  2789  0EA7                     	;# 
  2790  0F0F                     	;# 
  2791  0F10                     	;# 
  2792  0F11                     	;# 
  2793  0F12                     	;# 
  2794  0F13                     	;# 
  2795  0F14                     	;# 
  2796  0F15                     	;# 
  2797  0F16                     	;# 
  2798  0F17                     	;# 
  2799  0F18                     	;# 
  2800  0F19                     	;# 
  2801  0F1A                     	;# 
  2802  0F1B                     	;# 
  2803  0F1C                     	;# 
  2804  0F1D                     	;# 
  2805  0F1E                     	;# 
  2806  0F1F                     	;# 
  2807  0F20                     	;# 
  2808  0F21                     	;# 
  2809  0F22                     	;# 
  2810  0F23                     	;# 
  2811  0F24                     	;# 
  2812  0F25                     	;# 
  2813  0F26                     	;# 
  2814  0F27                     	;# 
  2815  0F28                     	;# 
  2816  0F29                     	;# 
  2817  0F2A                     	;# 
  2818  0F2B                     	;# 
  2819  0F2C                     	;# 
  2820  0F2D                     	;# 
  2821  0FE4                     	;# 
  2822  0FE5                     	;# 
  2823  0FE6                     	;# 
  2824  0FE7                     	;# 
  2825  0FE8                     	;# 
  2826  0FE9                     	;# 
  2827  0FEA                     	;# 
  2828  0FEB                     	;# 
  2829  0FED                     	;# 
  2830  0FEE                     	;# 
  2831  0FEF                     	;# 
  2832                           
  2833 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  2834  0000                     
  2835 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  2836  0000                     
  2837 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  2838  0000                     
  2839                           	psect	stringtext1
  2840  05ED                     __pstringtext1:	
  2841  05ED                     _dpowers:	
  2842  05ED  3401               	retlw	1
  2843  05EE  3400               	retlw	0
  2844  05EF  3400               	retlw	0
  2845  05F0  3400               	retlw	0
  2846  05F1  340A               	retlw	10
  2847  05F2  3400               	retlw	0
  2848  05F3  3400               	retlw	0
  2849  05F4  3400               	retlw	0
  2850  05F5  3464               	retlw	100
  2851  05F6  3400               	retlw	0
  2852  05F7  3400               	retlw	0
  2853  05F8  3400               	retlw	0
  2854  05F9  34E8               	retlw	232
  2855  05FA  3403               	retlw	3
  2856  05FB  3400               	retlw	0
  2857  05FC  3400               	retlw	0
  2858  05FD  3410               	retlw	16
  2859  05FE  3427               	retlw	39
  2860  05FF  3400               	retlw	0
  2861  0600  3400               	retlw	0
  2862  0601  34A0               	retlw	160
  2863  0602  3486               	retlw	134
  2864  0603  3401               	retlw	1
  2865  0604  3400               	retlw	0
  2866  0605  3440               	retlw	64
  2867  0606  3442               	retlw	66
  2868  0607  340F               	retlw	15
  2869  0608  3400               	retlw	0
  2870  0609  3480               	retlw	128
  2871  060A  3496               	retlw	150
  2872  060B  3498               	retlw	152
  2873  060C  3400               	retlw	0
  2874  060D  3400               	retlw	0
  2875  060E  34E1               	retlw	225
  2876  060F  34F5               	retlw	245
  2877  0610  3405               	retlw	5
  2878  0611  3400               	retlw	0
  2879  0612  34CA               	retlw	202
  2880  0613  349A               	retlw	154
  2881  0614  343B               	retlw	59
  2882  0615                     __end_of_dpowers:	
  2883                           
  2884                           	psect	stringtext2
  2885  0639                     __pstringtext2:	
  2886  0639                     _hexpowers:	
  2887  0639  3401               	retlw	1
  2888  063A  3400               	retlw	0
  2889  063B  3400               	retlw	0
  2890  063C  3400               	retlw	0
  2891  063D  3410               	retlw	16
  2892  063E  3400               	retlw	0
  2893  063F  3400               	retlw	0
  2894  0640  3400               	retlw	0
  2895  0641  3400               	retlw	0
  2896  0642  3401               	retlw	1
  2897  0643  3400               	retlw	0
  2898  0644  3400               	retlw	0
  2899  0645  3400               	retlw	0
  2900  0646  3410               	retlw	16
  2901  0647  3400               	retlw	0
  2902  0648  3400               	retlw	0
  2903  0649  3400               	retlw	0
  2904  064A  3400               	retlw	0
  2905  064B  3401               	retlw	1
  2906  064C  3400               	retlw	0
  2907  064D  3400               	retlw	0
  2908  064E  3400               	retlw	0
  2909  064F  3410               	retlw	16
  2910  0650  3400               	retlw	0
  2911  0651  3400               	retlw	0
  2912  0652  3400               	retlw	0
  2913  0653  3400               	retlw	0
  2914  0654  3401               	retlw	1
  2915  0655  3400               	retlw	0
  2916  0656  3400               	retlw	0
  2917  0657  3400               	retlw	0
  2918  0658  3410               	retlw	16
  2919  0659                     __end_of_hexpowers:	
  2920                           
  2921                           	psect	nvBANK0
  2922  005E                     __pnvBANK0:	
  2923  005E                     _INT_InterruptHandler:	
  2924  005E                     	ds	2
  2925  0060                     _EUSART_ErrorHandler:	
  2926  0060                     	ds	2
  2927  0062                     _EUSART_OverrunErrorHandler:	
  2928  0062                     	ds	2
  2929  0064                     _EUSART_FramingErrorHandler:	
  2930  0064                     	ds	2
  2931  001C                     _T2CONbits	set	28
  2932  001C                     _T2CON	set	28
  2933  001A                     _TMR2	set	26
  2934  001B                     _PR2	set	27
  2935  0015                     _TMR0	set	21
  2936  0011                     _PIR1bits	set	17
  2937  000B                     _INTCONbits	set	11
  2938  009D                     _ADCON0bits	set	157
  2939  009E                     _ADCON1	set	158
  2940  009D                     _ADCON0	set	157
  2941  0095                     _OPTION_REG	set	149
  2942  0095                     _OPTION_REGbits	set	149
  2943  008E                     _TRISC	set	142
  2944  008D                     _TRISB	set	141
  2945  008C                     _TRISA	set	140
  2946  0097                     _WDTCON	set	151
  2947  0098                     _OSCTUNE	set	152
  2948  009A                     _OSCSTAT	set	154
  2949  0099                     _OSCCON	set	153
  2950  009B                     _ADRES	set	155
  2951  010E                     _LATCbits	set	270
  2952  010C                     _LATAbits	set	268
  2953  0117                     _FVRCONbits	set	279
  2954  0117                     _FVRCON	set	279
  2955  010E                     _LATC	set	270
  2956  010D                     _LATB	set	269
  2957  010C                     _LATA	set	268
  2958  0116                     _BORCON	set	278
  2959  0119                     _DAC1CON1	set	281
  2960  0118                     _DAC1CON0	set	280
  2961  019A                     _TX1REG	set	410
  2962  0199                     _RC1REG	set	409
  2963  019D                     _RC1STAbits	set	413
  2964  019E                     _TX1STAbits	set	414
  2965  019C                     _SP1BRGH	set	412
  2966  019B                     _SP1BRGL	set	411
  2967  019E                     _TX1STA	set	414
  2968  019D                     _RC1STA	set	413
  2969  019F                     _BAUD1CON	set	415
  2970  018C                     _ANSELA	set	396
  2971  018D                     _ANSELB	set	397
  2972  018E                     _ANSELC	set	398
  2973  020E                     _WPUC	set	526
  2974  020C                     _WPUA	set	524
  2975  020D                     _WPUB	set	525
  2976  0291                     _CCPR1L	set	657
  2977  0293                     _CCP1CONbits	set	659
  2978  029E                     _CCPTMRSbits	set	670
  2979  028E                     _ODCONC	set	654
  2980  028D                     _ODCONB	set	653
  2981  028C                     _ODCONA	set	652
  2982  030E                     _SLRCONC	set	782
  2983  030D                     _SLRCONB	set	781
  2984  030C                     _SLRCONA	set	780
  2985  038E                     _INLVLC	set	910
  2986  038D                     _INLVLB	set	909
  2987  038C                     _INLVLA	set	908
  2988  0515                     _OPA2CON	set	1301
  2989  0511                     _OPA1CON	set	1297
  2990  061C                     _PWM4CONbits	set	1564
  2991  061A                     _PWM4DCLbits	set	1562
  2992  061B                     _PWM4DCH	set	1563
  2993  0619                     _PWM3CONbits	set	1561
  2994  0617                     _PWM3DCLbits	set	1559
  2995  0618                     _PWM3DCH	set	1560
  2996  0E24                     _RXPPS	set	3620
  2997  0E10                     _INTPPS	set	3600
  2998  0EA5                     _RC5PPS	set	3749
  2999  0E95                     _RA5PPS	set	3733
  3000  0EA4                     _RC4PPS	set	3748
  3001  0E9F                     _RB7PPS	set	3743
  3002                           
  3003                           	psect	stringtext3
  3004  0693                     __pstringtext3:	
  3005  0693                     STR_4:	
  3006  0693  3463               	retlw	99	;'c'
  3007  0694  346F               	retlw	111	;'o'
  3008  0695  346D               	retlw	109	;'m'
  3009  0696  346D               	retlw	109	;'m'
  3010  0697  3461               	retlw	97	;'a'
  3011  0698  346E               	retlw	110	;'n'
  3012  0699  3464               	retlw	100	;'d'
  3013  069A  343A               	retlw	58	;':'
  3014  069B  3420               	retlw	32	;' '
  3015  069C  3420               	retlw	32	;' '
  3016  069D  3420               	retlw	32	;' '
  3017  069E  3420               	retlw	32	;' '
  3018  069F  3420               	retlw	32	;' '
  3019  06A0  3420               	retlw	32	;' '
  3020  06A1  3420               	retlw	32	;' '
  3021  06A2  3420               	retlw	32	;' '
  3022  06A3  3420               	retlw	32	;' '
  3023  06A4  3420               	retlw	32	;' '
  3024  06A5  3430               	retlw	48	;'0'
  3025  06A6  3478               	retlw	120	;'x'
  3026  06A7  3425               	retlw	37	;'%'
  3027  06A8  3430               	retlw	48	;'0'
  3028  06A9  3432               	retlw	50	;'2'
  3029  06AA  3478               	retlw	120	;'x'
  3030  06AB  340D               	retlw	13
  3031  06AC  340A               	retlw	10
  3032  06AD  3400               	retlw	0
  3033                           
  3034                           	psect	stringtext4
  3035  06AE                     __pstringtext4:	
  3036  06AE                     STR_6:	
  3037  06AE  3461               	retlw	97	;'a'
  3038  06AF  3464               	retlw	100	;'d'
  3039  06B0  3464               	retlw	100	;'d'
  3040  06B1  3472               	retlw	114	;'r'
  3041  06B2  3465               	retlw	101	;'e'
  3042  06B3  3473               	retlw	115	;'s'
  3043  06B4  3473               	retlw	115	;'s'
  3044  06B5  343A               	retlw	58	;':'
  3045  06B6  3420               	retlw	32	;' '
  3046  06B7  3420               	retlw	32	;' '
  3047  06B8  3420               	retlw	32	;' '
  3048  06B9  3420               	retlw	32	;' '
  3049  06BA  3420               	retlw	32	;' '
  3050  06BB  3420               	retlw	32	;' '
  3051  06BC  3420               	retlw	32	;' '
  3052  06BD  3420               	retlw	32	;' '
  3053  06BE  3420               	retlw	32	;' '
  3054  06BF  3420               	retlw	32	;' '
  3055  06C0  3430               	retlw	48	;'0'
  3056  06C1  3478               	retlw	120	;'x'
  3057  06C2  3425               	retlw	37	;'%'
  3058  06C3  3430               	retlw	48	;'0'
  3059  06C4  3432               	retlw	50	;'2'
  3060  06C5  3478               	retlw	120	;'x'
  3061  06C6  340D               	retlw	13
  3062  06C7  340A               	retlw	10
  3063  06C8  3400               	retlw	0
  3064                           
  3065                           	psect	stringtext5
  3066  06C9                     __pstringtext5:	
  3067  06C9                     STR_5:	
  3068  06C9  3463               	retlw	99	;'c'
  3069  06CA  346F               	retlw	111	;'o'
  3070  06CB  346D               	retlw	109	;'m'
  3071  06CC  346D               	retlw	109	;'m'
  3072  06CD  3461               	retlw	97	;'a'
  3073  06CE  346E               	retlw	110	;'n'
  3074  06CF  3464               	retlw	100	;'d'
  3075  06D0  345F               	retlw	95	;'_'
  3076  06D1  3462               	retlw	98	;'b'
  3077  06D2  343A               	retlw	58	;':'
  3078  06D3  3420               	retlw	32	;' '
  3079  06D4  3420               	retlw	32	;' '
  3080  06D5  3420               	retlw	32	;' '
  3081  06D6  3420               	retlw	32	;' '
  3082  06D7  3420               	retlw	32	;' '
  3083  06D8  3420               	retlw	32	;' '
  3084  06D9  3420               	retlw	32	;' '
  3085  06DA  3420               	retlw	32	;' '
  3086  06DB  3430               	retlw	48	;'0'
  3087  06DC  3478               	retlw	120	;'x'
  3088  06DD  3425               	retlw	37	;'%'
  3089  06DE  3430               	retlw	48	;'0'
  3090  06DF  3432               	retlw	50	;'2'
  3091  06E0  3478               	retlw	120	;'x'
  3092  06E1  340D               	retlw	13
  3093  06E2  340A               	retlw	10
  3094  06E3  3400               	retlw	0
  3095                           
  3096                           	psect	stringtext6
  3097  06E4                     __pstringtext6:	
  3098  06E4                     STR_7:	
  3099  06E4  3461               	retlw	97	;'a'
  3100  06E5  3464               	retlw	100	;'d'
  3101  06E6  3464               	retlw	100	;'d'
  3102  06E7  3472               	retlw	114	;'r'
  3103  06E8  3465               	retlw	101	;'e'
  3104  06E9  3473               	retlw	115	;'s'
  3105  06EA  3473               	retlw	115	;'s'
  3106  06EB  345F               	retlw	95	;'_'
  3107  06EC  3462               	retlw	98	;'b'
  3108  06ED  343A               	retlw	58	;':'
  3109  06EE  3420               	retlw	32	;' '
  3110  06EF  3420               	retlw	32	;' '
  3111  06F0  3420               	retlw	32	;' '
  3112  06F1  3420               	retlw	32	;' '
  3113  06F2  3420               	retlw	32	;' '
  3114  06F3  3420               	retlw	32	;' '
  3115  06F4  3420               	retlw	32	;' '
  3116  06F5  3420               	retlw	32	;' '
  3117  06F6  3430               	retlw	48	;'0'
  3118  06F7  3478               	retlw	120	;'x'
  3119  06F8  3425               	retlw	37	;'%'
  3120  06F9  3430               	retlw	48	;'0'
  3121  06FA  3432               	retlw	50	;'2'
  3122  06FB  3478               	retlw	120	;'x'
  3123  06FC  340D               	retlw	13
  3124  06FD  340A               	retlw	10
  3125  06FE  3400               	retlw	0
  3126                           
  3127                           	psect	stringtext7
  3128  06FF                     __pstringtext7:	
  3129  06FF                     STR_8:	
  3130  06FF  3465               	retlw	101	;'e'
  3131  0700  3478               	retlw	120	;'x'
  3132  0701  3474               	retlw	116	;'t'
  3133  0702  3465               	retlw	101	;'e'
  3134  0703  346E               	retlw	110	;'n'
  3135  0704  3464               	retlw	100	;'d'
  3136  0705  3465               	retlw	101	;'e'
  3137  0706  3464               	retlw	100	;'d'
  3138  0707  3420               	retlw	32	;' '
  3139  0708  3461               	retlw	97	;'a'
  3140  0709  3464               	retlw	100	;'d'
  3141  070A  3464               	retlw	100	;'d'
  3142  070B  3472               	retlw	114	;'r'
  3143  070C  3465               	retlw	101	;'e'
  3144  070D  3473               	retlw	115	;'s'
  3145  070E  3473               	retlw	115	;'s'
  3146  070F  343A               	retlw	58	;':'
  3147  0710  3420               	retlw	32	;' '
  3148  0711  3430               	retlw	48	;'0'
  3149  0712  3478               	retlw	120	;'x'
  3150  0713  3425               	retlw	37	;'%'
  3151  0714  3430               	retlw	48	;'0'
  3152  0715  3434               	retlw	52	;'4'
  3153  0716  3478               	retlw	120	;'x'
  3154  0717  340D               	retlw	13
  3155  0718  340A               	retlw	10
  3156  0719  3400               	retlw	0
  3157                           
  3158                           	psect	stringtext8
  3159  071A                     __pstringtext8:	
  3160  071A                     STR_3:	
  3161  071A  340D               	retlw	13
  3162  071B  340A               	retlw	10
  3163  071C  3463               	retlw	99	;'c'
  3164  071D  346F               	retlw	111	;'o'
  3165  071E  3464               	retlw	100	;'d'
  3166  071F  3465               	retlw	101	;'e'
  3167  0720  343A               	retlw	58	;':'
  3168  0721  3420               	retlw	32	;' '
  3169  0722  3420               	retlw	32	;' '
  3170  0723  3420               	retlw	32	;' '
  3171  0724  3420               	retlw	32	;' '
  3172  0725  3420               	retlw	32	;' '
  3173  0726  3420               	retlw	32	;' '
  3174  0727  3420               	retlw	32	;' '
  3175  0728  3420               	retlw	32	;' '
  3176  0729  3420               	retlw	32	;' '
  3177  072A  3430               	retlw	48	;'0'
  3178  072B  3478               	retlw	120	;'x'
  3179  072C  3425               	retlw	37	;'%'
  3180  072D  3430               	retlw	48	;'0'
  3181  072E  3438               	retlw	56	;'8'
  3182  072F  346C               	retlw	108	;'l'
  3183  0730  3478               	retlw	120	;'x'
  3184  0731  340D               	retlw	13
  3185  0732  340A               	retlw	10
  3186  0733  3400               	retlw	0
  3187                           
  3188                           	psect	stringtext9
  3189  0734                     __pstringtext9:	
  3190  0734                     STR_9:	
  3191  0734  3430               	retlw	48	;'0'
  3192  0735  3431               	retlw	49	;'1'
  3193  0736  3432               	retlw	50	;'2'
  3194  0737  3433               	retlw	51	;'3'
  3195  0738  3434               	retlw	52	;'4'
  3196  0739  3435               	retlw	53	;'5'
  3197  073A  3436               	retlw	54	;'6'
  3198  073B  3437               	retlw	55	;'7'
  3199  073C  3438               	retlw	56	;'8'
  3200  073D  3439               	retlw	57	;'9'
  3201  073E  3461               	retlw	97	;'a'
  3202  073F  3462               	retlw	98	;'b'
  3203  0740  3463               	retlw	99	;'c'
  3204  0741  3464               	retlw	100	;'d'
  3205  0742  3465               	retlw	101	;'e'
  3206  0743  3466               	retlw	102	;'f'
  3207  0744  3400               	retlw	0
  3208                           
  3209                           	psect	stringtext10
  3210  07C2                     __pstringtext10:	
  3211  07C2                     STR_1:	
  3212  07C2  3425               	retlw	37	;'%'
  3213  07C3  3464               	retlw	100	;'d'
  3214  07C4  340A               	retlw	10
  3215  07C5  3400               	retlw	0
  3216                           
  3217                           	psect	stringtext11
  3218  0000                     __pstringtext11:	
  3219  07C2                     
  3220                           ; #config settings
  3221  0000                     
  3222                           	psect	cinit
  3223  0016                     start_initialization:	
  3224  0016                     __initialization:	
  3225                           
  3226                           ; Clear objects allocated to COMMON
  3227  0016  01F0               	clrf	__pbssCOMMON& (0+127)
  3228  0017  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  3229  0018  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  3230  0019  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  3231  001A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  3232  001B  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  3233  001C  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  3234                           
  3235                           ; Clear objects allocated to BANK0
  3236  001D  0020               	movlb	0	; select bank0
  3237  001E  01E6               	clrf	__pbssBANK0& (0+127)
  3238  001F  01E7               	clrf	(__pbssBANK0+1)& (0+127)
  3239  0020  01E8               	clrf	(__pbssBANK0+2)& (0+127)
  3240  0021  01E9               	clrf	(__pbssBANK0+3)& (0+127)
  3241                           
  3242                           ; Clear objects allocated to BANK1
  3243  0022  30A0               	movlw	low __pbssBANK1
  3244  0023  0084               	movwf	4
  3245  0024  3000               	movlw	high __pbssBANK1
  3246  0025  0085               	movwf	5
  3247  0026  3021               	movlw	33
  3248  0027  3187  2799         	fcall	clear_ram0
  3249  0029                     end_of_initialization:	
  3250                           ;End of C runtime variable initialization code
  3251                           
  3252  0029                     __end_of__initialization:	
  3253  0029  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3254  002A  0020               	movlb	0
  3255  002B  3182  2A5C         	ljmp	_main	;jump to C main() function
  3256                           
  3257                           	psect	bssCOMMON
  3258  0070                     __pbssCOMMON:	
  3259  0070                     _timer0ReloadVal:	
  3260  0070                     	ds	1
  3261  0071                     _ir_code:	
  3262  0071                     	ds	6
  3263                           
  3264                           	psect	bssBANK0
  3265  0066                     __pbssBANK0:	
  3266  0066                     _LED_blue:	
  3267  0066                     	ds	1
  3268  0067                     _LED_green:	
  3269  0067                     	ds	1
  3270  0068                     _LED_red:	
  3271  0068                     	ds	1
  3272  0069                     _eusartRxLastError:	
  3273  0069                     	ds	1
  3274                           
  3275                           	psect	bssBANK1
  3276  00A0                     __pbssBANK1:	
  3277  00A0                     _stats:	
  3278  00A0                     	ds	33
  3279                           
  3280                           	psect	clrtext
  3281  0799                     clear_ram0:	
  3282                           ;	Called with FSR0 containing the base address, and
  3283                           ;	WREG with the size to clear
  3284                           
  3285  0799  0064               	clrwdt	;clear the watchdog before getting into this loop
  3286  079A                     clrloop0:	
  3287  079A  0180               	clrf	0	;clear RAM location pointed to by FSR
  3288  079B  3101               	addfsr 0,1
  3289  079C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3290  079D  2F9A               	goto	clrloop0	;have we reached the end yet?
  3291  079E  3400               	retlw	0	;all done for this memory range, return
  3292                           
  3293                           	psect	cstackCOMMON
  3294  0077                     __pcstackCOMMON:	
  3295  0077                     ?_isdigit:	
  3296  0077                     ?_PIN_MANAGER_Initialize:	
  3297                           ; 1 bit 
  3298                           
  3299  0077                     ?_OSCILLATOR_Initialize:	
  3300                           ; 1 bytes @ 0x0
  3301                           
  3302  0077                     ?_WDT_Initialize:	
  3303                           ; 1 bytes @ 0x0
  3304                           
  3305  0077                     ?_OPA1_Initialize:	
  3306                           ; 1 bytes @ 0x0
  3307                           
  3308  0077                     ?_OPA2_Initialize:	
  3309                           ; 1 bytes @ 0x0
  3310                           
  3311  0077                     ?_TMR2_Initialize:	
  3312                           ; 1 bytes @ 0x0
  3313                           
  3314  0077                     ?_EXT_INT_Initialize:	
  3315                           ; 1 bytes @ 0x0
  3316                           
  3317  0077                     ?_TMR0_Initialize:	
  3318                           ; 1 bytes @ 0x0
  3319                           
  3320  0077                     ?_EUSART_Initialize:	
  3321                           ; 1 bytes @ 0x0
  3322                           
  3323  0077                     ?_INT_ISR:	
  3324                           ; 1 bytes @ 0x0
  3325                           
  3326  0077                     ?_INT_CallBack:	
  3327                           ; 1 bytes @ 0x0
  3328                           
  3329  0077                     ?_DAC_Initialize:	
  3330                           ; 1 bytes @ 0x0
  3331                           
  3332  0077                     ?_SYSTEM_Initialize:	
  3333                           ; 1 bytes @ 0x0
  3334                           
  3335  0077                     ?_PIN_MANAGER_IOC:	
  3336                           ; 1 bytes @ 0x0
  3337                           
  3338  0077                     ??_PIN_MANAGER_IOC:	
  3339                           ; 1 bytes @ 0x0
  3340                           
  3341  0077                     ?_INTERRUPT_InterruptManager:	
  3342                           ; 1 bytes @ 0x0
  3343                           
  3344  0077                     ?_EUSART_Write:	
  3345                           ; 1 bytes @ 0x0
  3346                           
  3347  0077                     ?_putch:	
  3348                           ; 1 bytes @ 0x0
  3349                           
  3350  0077                     ?_INT_DefaultInterruptHandler:	
  3351                           ; 1 bytes @ 0x0
  3352                           
  3353  0077                     ??_INT_DefaultInterruptHandler:	
  3354                           ; 1 bytes @ 0x0
  3355                           
  3356  0077                     ?_process_remote_command:	
  3357                           ; 1 bytes @ 0x0
  3358                           
  3359  0077                     ?_main:	
  3360                           ; 1 bytes @ 0x0
  3361                           
  3362                           
  3363                           ; 1 bytes @ 0x0
  3364  0077                     	ds	1
  3365  0078                     INT_DefaultInterruptHandler@time:	
  3366                           
  3367                           ; 1 bytes @ 0x1
  3368  0078                     	ds	1
  3369  0079                     ??_PIN_MANAGER_Initialize:	
  3370  0079                     ??_OSCILLATOR_Initialize:	
  3371                           ; 1 bytes @ 0x2
  3372                           
  3373  0079                     ??_WDT_Initialize:	
  3374                           ; 1 bytes @ 0x2
  3375                           
  3376  0079                     ??_OPA1_Initialize:	
  3377                           ; 1 bytes @ 0x2
  3378                           
  3379  0079                     ??_OPA2_Initialize:	
  3380                           ; 1 bytes @ 0x2
  3381                           
  3382  0079                     ??_TMR2_Initialize:	
  3383                           ; 1 bytes @ 0x2
  3384                           
  3385  0079                     ??_EXT_INT_Initialize:	
  3386                           ; 1 bytes @ 0x2
  3387                           
  3388  0079                     ??_TMR0_Initialize:	
  3389                           ; 1 bytes @ 0x2
  3390                           
  3391  0079                     ??_EUSART_Initialize:	
  3392                           ; 1 bytes @ 0x2
  3393                           
  3394  0079                     ??_INT_ISR:	
  3395                           ; 1 bytes @ 0x2
  3396                           
  3397  0079                     ??_EUSART_SetFramingErrorHandler:	
  3398                           ; 1 bytes @ 0x2
  3399                           
  3400  0079                     ??_EUSART_SetOverrunErrorHandler:	
  3401                           ; 1 bytes @ 0x2
  3402                           
  3403  0079                     ??_EUSART_SetErrorHandler:	
  3404                           ; 1 bytes @ 0x2
  3405                           
  3406  0079                     ??_INT_CallBack:	
  3407                           ; 1 bytes @ 0x2
  3408                           
  3409  0079                     ??_isdigit:	
  3410                           ; 1 bytes @ 0x2
  3411                           
  3412  0079                     ??_DAC_Initialize:	
  3413                           ; 1 bytes @ 0x2
  3414                           
  3415  0079                     ??_SYSTEM_Initialize:	
  3416                           ; 1 bytes @ 0x2
  3417                           
  3418  0079                     ??_INTERRUPT_InterruptManager:	
  3419                           ; 1 bytes @ 0x2
  3420                           
  3421  0079                     ??_EUSART_Write:	
  3422                           ; 1 bytes @ 0x2
  3423                           
  3424  0079                     ??_INT_SetInterruptHandler:	
  3425                           ; 1 bytes @ 0x2
  3426                           
  3427  0079                     ??_setLEDColor:	
  3428                           ; 1 bytes @ 0x2
  3429                           
  3430  0079                     ??___wmul:	
  3431                           ; 1 bytes @ 0x2
  3432                           
  3433  0079                     ??___lmul:	
  3434                           ; 1 bytes @ 0x2
  3435                           
  3436  0079                     ??___lldiv:	
  3437                           ; 1 bytes @ 0x2
  3438                           
  3439  0079                     ??___aldiv:	
  3440                           ; 1 bytes @ 0x2
  3441                           
  3442  0079                     EUSART_Write@txData:	
  3443                           ; 1 bytes @ 0x2
  3444                           
  3445  0079                     setLEDColor@red:	
  3446                           ; 1 bytes @ 0x2
  3447                           
  3448  0079                     _isdigit$1238:	
  3449                           ; 1 bytes @ 0x2
  3450                           
  3451  0079                     ___wmul@product:	
  3452                           ; 1 bytes @ 0x2
  3453                           
  3454                           
  3455                           ; 2 bytes @ 0x2
  3456  0079                     	ds	1
  3457  007A                     ??_putch:	
  3458  007A                     ??_battery_voltage:	
  3459                           ; 1 bytes @ 0x3
  3460                           
  3461  007A                     ??___llmod:	
  3462                           ; 1 bytes @ 0x3
  3463                           
  3464  007A                     putch@txData:	
  3465                           ; 1 bytes @ 0x3
  3466                           
  3467  007A                     isdigit@c:	
  3468                           ; 1 bytes @ 0x3
  3469                           
  3470  007A                     setCurrent@Vdac_mv:	
  3471                           ; 1 bytes @ 0x3
  3472                           
  3473                           
  3474                           ; 2 bytes @ 0x3
  3475  007A                     	ds	1
  3476  007B                     ___llmod@counter:	
  3477                           
  3478                           ; 1 bytes @ 0x4
  3479  007B                     	ds	1
  3480                           
  3481                           	psect	cstackBANK0
  3482  0020                     __pcstackBANK0:	
  3483  0020                     ?_EUSART_SetFramingErrorHandler:	
  3484  0020                     ?_EUSART_SetOverrunErrorHandler:	
  3485                           ; 1 bytes @ 0x0
  3486                           
  3487  0020                     ?_EUSART_SetErrorHandler:	
  3488                           ; 1 bytes @ 0x0
  3489                           
  3490  0020                     ?_INT_SetInterruptHandler:	
  3491                           ; 1 bytes @ 0x0
  3492                           
  3493  0020                     ?_setLEDColor:	
  3494                           ; 1 bytes @ 0x0
  3495                           
  3496  0020                     ?___wmul:	
  3497                           ; 1 bytes @ 0x0
  3498                           
  3499  0020                     ?___lmul:	
  3500                           ; 2 bytes @ 0x0
  3501                           
  3502  0020                     ?___aldiv:	
  3503                           ; 4 bytes @ 0x0
  3504                           
  3505  0020                     setLEDColor@green:	
  3506                           ; 4 bytes @ 0x0
  3507                           
  3508  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3509                           ; 1 bytes @ 0x0
  3510                           
  3511  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3512                           ; 2 bytes @ 0x0
  3513                           
  3514  0020                     EUSART_SetErrorHandler@interruptHandler:	
  3515                           ; 2 bytes @ 0x0
  3516                           
  3517  0020                     INT_SetInterruptHandler@InterruptHandler:	
  3518                           ; 2 bytes @ 0x0
  3519                           
  3520  0020                     ___wmul@multiplier:	
  3521                           ; 2 bytes @ 0x0
  3522                           
  3523  0020                     ___lmul@multiplier:	
  3524                           ; 2 bytes @ 0x0
  3525                           
  3526  0020                     ___aldiv@divisor:	
  3527                           ; 4 bytes @ 0x0
  3528                           
  3529                           
  3530                           ; 4 bytes @ 0x0
  3531  0020                     	ds	1
  3532  0021                     setLEDColor@blue:	
  3533                           
  3534                           ; 1 bytes @ 0x1
  3535  0021                     	ds	1
  3536  0022                     ___wmul@multiplicand:	
  3537                           
  3538                           ; 2 bytes @ 0x2
  3539  0022                     	ds	2
  3540  0024                     ___lmul@multiplicand:	
  3541  0024                     ___aldiv@dividend:	
  3542                           ; 4 bytes @ 0x4
  3543                           
  3544                           
  3545                           ; 4 bytes @ 0x4
  3546  0024                     	ds	4
  3547  0028                     ___aldiv@counter:	
  3548  0028                     ___lmul@product:	
  3549                           ; 1 bytes @ 0x8
  3550                           
  3551                           
  3552                           ; 4 bytes @ 0x8
  3553  0028                     	ds	1
  3554  0029                     ___aldiv@sign:	
  3555                           
  3556                           ; 1 bytes @ 0x9
  3557  0029                     	ds	1
  3558  002A                     ___aldiv@quotient:	
  3559                           
  3560                           ; 4 bytes @ 0xA
  3561  002A                     	ds	2
  3562  002C                     ?___lldiv:	
  3563  002C                     ___lldiv@divisor:	
  3564                           ; 4 bytes @ 0xC
  3565                           
  3566                           
  3567                           ; 4 bytes @ 0xC
  3568  002C                     	ds	2
  3569  002E                     ?_battery_voltage:	
  3570                           
  3571                           ; 2 bytes @ 0xE
  3572  002E                     	ds	2
  3573  0030                     ___lldiv@dividend:	
  3574                           
  3575                           ; 4 bytes @ 0x10
  3576  0030                     	ds	4
  3577  0034                     ___lldiv@quotient:	
  3578                           
  3579                           ; 4 bytes @ 0x14
  3580  0034                     	ds	4
  3581  0038                     ___lldiv@counter:	
  3582                           
  3583                           ; 1 bytes @ 0x18
  3584  0038                     	ds	1
  3585  0039                     ?_setCurrent:	
  3586  0039                     ?___llmod:	
  3587                           ; 1 bytes @ 0x19
  3588                           
  3589  0039                     setCurrent@microamps:	
  3590                           ; 4 bytes @ 0x19
  3591                           
  3592  0039                     ___llmod@divisor:	
  3593                           ; 2 bytes @ 0x19
  3594                           
  3595                           
  3596                           ; 4 bytes @ 0x19
  3597  0039                     	ds	2
  3598  003B                     setCurrent@Vdd_mv:	
  3599                           
  3600                           ; 2 bytes @ 0x1B
  3601  003B                     	ds	2
  3602  003D                     ??_setCurrent:	
  3603  003D                     ___llmod@dividend:	
  3604                           ; 1 bytes @ 0x1D
  3605                           
  3606                           
  3607                           ; 4 bytes @ 0x1D
  3608  003D                     	ds	4
  3609  0041                     ?_printf:	
  3610  0041                     printf@f:	
  3611                           ; 2 bytes @ 0x21
  3612                           
  3613                           
  3614                           ; 2 bytes @ 0x21
  3615  0041                     	ds	6
  3616  0047                     ??_printf:	
  3617                           
  3618                           ; 1 bytes @ 0x27
  3619  0047                     	ds	6
  3620  004D                     printf@idx:	
  3621                           
  3622                           ; 1 bytes @ 0x2D
  3623  004D                     	ds	1
  3624  004E                     printf@prec:	
  3625                           
  3626                           ; 2 bytes @ 0x2E
  3627  004E                     	ds	2
  3628  0050                     printf@ap:	
  3629                           
  3630                           ; 1 bytes @ 0x30
  3631  0050                     	ds	1
  3632  0051                     printf@val:	
  3633                           
  3634                           ; 4 bytes @ 0x31
  3635  0051                     	ds	4
  3636  0055                     printf@width:	
  3637                           
  3638                           ; 2 bytes @ 0x35
  3639  0055                     	ds	2
  3640  0057                     printf@flag:	
  3641                           
  3642                           ; 1 bytes @ 0x37
  3643  0057                     	ds	1
  3644  0058                     printf@c:	
  3645                           
  3646                           ; 1 bytes @ 0x38
  3647  0058                     	ds	1
  3648  0059                     ??_process_remote_command:	
  3649                           
  3650                           ; 1 bytes @ 0x39
  3651  0059                     	ds	2
  3652  005B                     process_remote_command@code:	
  3653                           
  3654                           ; 1 bytes @ 0x3B
  3655  005B                     	ds	1
  3656  005C                     ??_main:	
  3657                           
  3658                           ; 1 bytes @ 0x3C
  3659  005C                     	ds	2
  3660                           
  3661                           	psect	maintext
  3662  025C                     __pmaintext:	
  3663 ;;
  3664 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3665 ;;
  3666 ;; *************** function _main *****************
  3667 ;; Defined at:
  3668 ;;		line 200 in file "main.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;		None
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;		None
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  1    wreg      void 
  3675 ;; Registers used:
  3676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : B1F/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3682 ;;      Params:         0       0       0       0       0       0       0       0
  3683 ;;      Locals:         0       0       0       0       0       0       0       0
  3684 ;;      Temps:          0       2       0       0       0       0       0       0
  3685 ;;      Totals:         0       2       0       0       0       0       0       0
  3686 ;;Total ram usage:        2 bytes
  3687 ;; Hardware stack levels required when called:    8
  3688 ;; This function calls:
  3689 ;;		_DAC_Initialize
  3690 ;;		_OPA1_Initialize
  3691 ;;		_OPA2_Initialize
  3692 ;;		_SYSTEM_Initialize
  3693 ;;		_battery_voltage
  3694 ;;		_printf
  3695 ;;		_process_remote_command
  3696 ;;		_setCurrent
  3697 ;; This function is called by:
  3698 ;;		Startup code after reset
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           
  3703                           ;psect for function _main
  3704  025C                     _main:	
  3705                           
  3706                           ;main.c: 203: SYSTEM_Initialize();
  3707                           
  3708                           ;incstack = 0
  3709                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3710  025C  3186  2659  3182   	fcall	_SYSTEM_Initialize
  3711                           
  3712                           ;main.c: 204: DAC_Initialize();
  3713  025F  3187  27B7  3182   	fcall	_DAC_Initialize
  3714                           
  3715                           ;main.c: 205: OPA1_Initialize();
  3716  0262  3187  27CE  3182   	fcall	_OPA1_Initialize
  3717                           
  3718                           ;main.c: 206: OPA2_Initialize();
  3719  0265  3187  27CA  3182   	fcall	_OPA2_Initialize
  3720                           
  3721                           ;main.c: 209: setCurrent(300, 3000);
  3722  0268  302C               	movlw	44
  3723  0269  0020               	movlb	0	; select bank0
  3724  026A  00B9               	movwf	setCurrent@microamps
  3725  026B  3001               	movlw	1
  3726  026C  00BA               	movwf	setCurrent@microamps+1
  3727  026D  30B8               	movlw	184
  3728  026E  00BB               	movwf	setCurrent@Vdd_mv
  3729  026F  300B               	movlw	11
  3730  0270  00BC               	movwf	setCurrent@Vdd_mv+1
  3731  0271  3183  2383  3182   	fcall	_setCurrent
  3732                           
  3733                           ;main.c: 212: (INTCONbits.GIE = 1);
  3734  0274  178B               	bsf	11,7	;volatile
  3735                           
  3736                           ;main.c: 215: (INTCONbits.PEIE = 1);
  3737  0275  170B               	bsf	11,6	;volatile
  3738  0276                     l2296:	
  3739                           ;main.c: 218: do { LATAbits.LATA5 = 1; } while(0);
  3740                           
  3741                           ;main.c: 217: while(1){
  3742                           
  3743  0276  0022               	movlb	2	; select bank2
  3744  0277  168C               	bsf	12,5	;volatile
  3745                           
  3746                           ;main.c: 219: do { LATCbits.LATC5 = 1; } while(0);
  3747  0278  168E               	bsf	14,5	;volatile
  3748                           
  3749                           ;main.c: 220: do { LATCbits.LATC4 = 1; } while(0);
  3750  0279  160E               	bsf	14,4	;volatile
  3751                           
  3752                           ;main.c: 222: if ((int)battery_voltage() < 2500)
  3753  027A  3185  25BF  3182   	fcall	_battery_voltage
  3754  027D  0020               	movlb	0	; select bank0
  3755  027E  082F               	movf	?_battery_voltage+1,w
  3756  027F  3A80               	xorlw	128
  3757  0280  00DC               	movwf	??_main
  3758  0281  3089               	movlw	137
  3759  0282  025C               	subwf	??_main,w
  3760  0283  1D03               	skipz
  3761  0284  2A87               	goto	u2285
  3762  0285  30C4               	movlw	196
  3763  0286  022E               	subwf	?_battery_voltage,w
  3764  0287                     u2285:	
  3765  0287  1803               	skipnc
  3766  0288  2A9B               	goto	l2304
  3767                           
  3768                           ;main.c: 223: {;main.c: 224: do { LATCbits.LATC5 = 0; } while(0);
  3769  0289  0022               	movlb	2	; select bank2
  3770  028A  128E               	bcf	14,5	;volatile
  3771                           
  3772                           ;main.c: 225: printf("%d\n", (int)battery_voltage());
  3773  028B  30C2               	movlw	low (STR_1| (0+32768))
  3774  028C  0020               	movlb	0	; select bank0
  3775  028D  00C1               	movwf	printf@f
  3776  028E  3087               	movlw	high (STR_1| (0+32768))
  3777  028F  00C2               	movwf	printf@f+1
  3778  0290  3185  25BF  3182   	fcall	_battery_voltage
  3779  0293  0020               	movlb	0	; select bank0
  3780  0294  082F               	movf	?_battery_voltage+1,w
  3781  0295  00C4               	movwf	?_printf+3
  3782  0296  082E               	movf	?_battery_voltage,w
  3783  0297  00C3               	movwf	?_printf+2
  3784  0298  3180  202D  3182   	fcall	_printf
  3785  029B                     l2304:	
  3786                           
  3787                           ;main.c: 226: };main.c: 233: if (STATE_DONE == ir_code.state){
  3788  029B  3002               	movlw	2
  3789  029C  0672               	xorwf	_ir_code+1,w
  3790  029D  1D03               	btfss	3,2
  3791  029E  2A76               	goto	l2296
  3792                           
  3793                           ;main.c: 235: printf("\r\ncode:         0x%08lx\r\n", (unsigned long)ir_code.code);
  3794  029F  301A               	movlw	low (STR_3| (0+32768))
  3795  02A0  0020               	movlb	0	; select bank0
  3796  02A1  00C1               	movwf	printf@f
  3797  02A2  3087               	movlw	high (STR_3| (0+32768))
  3798  02A3  00C2               	movwf	printf@f+1
  3799  02A4  3002               	movlw	2
  3800  02A5  3E71               	addlw	(low (_ir_code| 0))& (0+255)
  3801  02A6  0086               	movwf	6
  3802  02A7  0187               	clrf	7
  3803  02A8  3F40               	moviw [0]fsr1
  3804  02A9  00C3               	movwf	?_printf+2
  3805  02AA  3F41               	moviw [1]fsr1
  3806  02AB  00C4               	movwf	?_printf+3
  3807  02AC  3F42               	moviw [2]fsr1
  3808  02AD  00C5               	movwf	?_printf+4
  3809  02AE  3F43               	moviw [3]fsr1
  3810  02AF  00C6               	movwf	?_printf+5
  3811  02B0  3180  202D  3182   	fcall	_printf
  3812                           
  3813                           ;main.c: 236: printf("command:          0x%02x\r\n", ir_code.command);
  3814  02B3  3093               	movlw	low (STR_4| (0+32768))
  3815  02B4  0020               	movlb	0	; select bank0
  3816  02B5  00C1               	movwf	printf@f
  3817  02B6  3086               	movlw	high (STR_4| (0+32768))
  3818  02B7  00C2               	movwf	printf@f+1
  3819  02B8  0874               	movf	_ir_code+3,w
  3820  02B9  00DC               	movwf	??_main
  3821  02BA  01DD               	clrf	??_main+1
  3822  02BB  085C               	movf	??_main,w
  3823  02BC  00C3               	movwf	?_printf+2
  3824  02BD  085D               	movf	??_main+1,w
  3825  02BE  00C4               	movwf	?_printf+3
  3826  02BF  3180  202D  3182   	fcall	_printf
  3827                           
  3828                           ;main.c: 237: printf("command_b:        0x%02x\r\n", ir_code.command_b);
  3829  02C2  30C9               	movlw	low (STR_5| (0+32768))
  3830  02C3  0020               	movlb	0	; select bank0
  3831  02C4  00C1               	movwf	printf@f
  3832  02C5  3086               	movlw	high (STR_5| (0+32768))
  3833  02C6  00C2               	movwf	printf@f+1
  3834  02C7  0873               	movf	_ir_code+2,w
  3835  02C8  00DC               	movwf	??_main
  3836  02C9  01DD               	clrf	??_main+1
  3837  02CA  085C               	movf	??_main,w
  3838  02CB  00C3               	movwf	?_printf+2
  3839  02CC  085D               	movf	??_main+1,w
  3840  02CD  00C4               	movwf	?_printf+3
  3841  02CE  3180  202D  3182   	fcall	_printf
  3842                           
  3843                           ;main.c: 238: printf("address:          0x%02x\r\n", ir_code.address);
  3844  02D1  30AE               	movlw	low (STR_6| (0+32768))
  3845  02D2  0020               	movlb	0	; select bank0
  3846  02D3  00C1               	movwf	printf@f
  3847  02D4  3086               	movlw	high (STR_6| (0+32768))
  3848  02D5  00C2               	movwf	printf@f+1
  3849  02D6  0876               	movf	_ir_code+5,w
  3850  02D7  00DC               	movwf	??_main
  3851  02D8  01DD               	clrf	??_main+1
  3852  02D9  085C               	movf	??_main,w
  3853  02DA  00C3               	movwf	?_printf+2
  3854  02DB  085D               	movf	??_main+1,w
  3855  02DC  00C4               	movwf	?_printf+3
  3856  02DD  3180  202D  3182   	fcall	_printf
  3857                           
  3858                           ;main.c: 239: printf("address_b:        0x%02x\r\n", ir_code.address_b);
  3859  02E0  30E4               	movlw	low (STR_7| (0+32768))
  3860  02E1  0020               	movlb	0	; select bank0
  3861  02E2  00C1               	movwf	printf@f
  3862  02E3  3086               	movlw	high (STR_7| (0+32768))
  3863  02E4  00C2               	movwf	printf@f+1
  3864  02E5  0875               	movf	_ir_code+4,w
  3865  02E6  00DC               	movwf	??_main
  3866  02E7  01DD               	clrf	??_main+1
  3867  02E8  085C               	movf	??_main,w
  3868  02E9  00C3               	movwf	?_printf+2
  3869  02EA  085D               	movf	??_main+1,w
  3870  02EB  00C4               	movwf	?_printf+3
  3871  02EC  3180  202D  3182   	fcall	_printf
  3872                           
  3873                           ;main.c: 240: printf("extended address: 0x%04x\r\n", (unsigned int)ir_code.extended_addr
      +                          ess);
  3874  02EF  30FF               	movlw	low (STR_8| (0+32768))
  3875  02F0  0020               	movlb	0	; select bank0
  3876  02F1  00C1               	movwf	printf@f
  3877  02F2  3086               	movlw	high (STR_8| (0+32768))
  3878  02F3  00C2               	movwf	printf@f+1
  3879  02F4  0876               	movf	_ir_code+5,w
  3880  02F5  00C4               	movwf	?_printf+3
  3881  02F6  0875               	movf	_ir_code+4,w
  3882  02F7  00C3               	movwf	?_printf+2
  3883  02F8  3180  202D  3182   	fcall	_printf
  3884                           
  3885                           ;main.c: 251: process_remote_command(&ir_code);
  3886  02FB  3071               	movlw	(low (_ir_code| 0))& (0+255)
  3887  02FC  3183  23FD  3182   	fcall	_process_remote_command
  3888                           
  3889                           ;main.c: 254: ir_code.state = STATE_RESET;
  3890  02FF  01F2               	clrf	_ir_code+1
  3891  0300  2A76               	goto	l2296
  3892  0301                     __end_of_main:	
  3893                           ;main.c: 255: };main.c: 256: };main.c: 258: return;
  3894                           
  3895                           
  3896                           	psect	text1
  3897  0383                     __ptext1:	
  3898 ;; *************** function _setCurrent *****************
  3899 ;; Defined at:
  3900 ;;		line 190 in file "main.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  microamps       2   25[BANK0 ] unsigned int 
  3903 ;;  Vdd_mv          2   27[BANK0 ] unsigned int 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;  Vdac_mv         2    3[COMMON] unsigned int 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      void 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, status,0, pclath, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3915 ;;      Params:         0       4       0       0       0       0       0       0
  3916 ;;      Locals:         2       0       0       0       0       0       0       0
  3917 ;;      Temps:          0      10       0       0       0       0       0       0
  3918 ;;      Totals:         2      14       0       0       0       0       0       0
  3919 ;;Total ram usage:       16 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    5
  3922 ;; This function calls:
  3923 ;;		___aldiv
  3924 ;;		___lldiv
  3925 ;;		___lmul
  3926 ;; This function is called by:
  3927 ;;		_main
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           
  3932                           ;psect for function _setCurrent
  3933  0383                     _setCurrent:	
  3934                           
  3935                           ;main.c: 192: uint16_t Vdac_mv = Vdd_mv -;main.c: 193: ((uint32_t)(4700) * microamps + 5
      +                          00) / 1000;
  3936                           
  3937                           ;incstack = 0
  3938                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  3939  0383  3000               	movlw	0
  3940  0384  0020               	movlb	0	; select bank0
  3941  0385  00AF               	movwf	___lldiv@divisor+3
  3942  0386  3000               	movlw	0
  3943  0387  00AE               	movwf	___lldiv@divisor+2
  3944  0388  3003               	movlw	3
  3945  0389  00AD               	movwf	___lldiv@divisor+1
  3946  038A  30E8               	movlw	232
  3947  038B  00AC               	movwf	___lldiv@divisor
  3948  038C  30F4               	movlw	244
  3949  038D  00BD               	movwf	??_setCurrent
  3950  038E  3001               	movlw	1
  3951  038F  00BE               	movwf	??_setCurrent+1
  3952  0390  3000               	movlw	0
  3953  0391  00BF               	movwf	??_setCurrent+2
  3954  0392  3000               	movlw	0
  3955  0393  00C0               	movwf	??_setCurrent+3
  3956  0394  0839               	movf	setCurrent@microamps,w
  3957  0395  00A0               	movwf	___lmul@multiplier
  3958  0396  083A               	movf	setCurrent@microamps+1,w
  3959  0397  00A1               	movwf	___lmul@multiplier+1
  3960  0398  01A2               	clrf	___lmul@multiplier+2
  3961  0399  01A3               	clrf	___lmul@multiplier+3
  3962  039A  3000               	movlw	0
  3963  039B  00A7               	movwf	___lmul@multiplicand+3
  3964  039C  3000               	movlw	0
  3965  039D  00A6               	movwf	___lmul@multiplicand+2
  3966  039E  3012               	movlw	18
  3967  039F  00A5               	movwf	___lmul@multiplicand+1
  3968  03A0  305C               	movlw	92
  3969  03A1  00A4               	movwf	___lmul@multiplicand
  3970  03A2  3185  255F  3183   	fcall	___lmul
  3971  03A5  0020               	movlb	0	; select bank0
  3972  03A6  0820               	movf	?___lmul,w
  3973  03A7  07BD               	addwf	??_setCurrent,f
  3974  03A8  0821               	movf	?___lmul+1,w
  3975  03A9  3DBE               	addwfc	??_setCurrent+1,f
  3976  03AA  0822               	movf	?___lmul+2,w
  3977  03AB  3DBF               	addwfc	??_setCurrent+2,f
  3978  03AC  0823               	movf	?___lmul+3,w
  3979  03AD  3DC0               	addwfc	??_setCurrent+3,f
  3980  03AE  0840               	movf	??_setCurrent+3,w
  3981  03AF  00B3               	movwf	___lldiv@dividend+3
  3982  03B0  083F               	movf	??_setCurrent+2,w
  3983  03B1  00B2               	movwf	___lldiv@dividend+2
  3984  03B2  083E               	movf	??_setCurrent+1,w
  3985  03B3  00B1               	movwf	___lldiv@dividend+1
  3986  03B4  083D               	movf	??_setCurrent,w
  3987  03B5  00B0               	movwf	___lldiv@dividend
  3988  03B6  3184  24C9  3183   	fcall	___lldiv
  3989  03B9  0020               	movlb	0	; select bank0
  3990  03BA  092C               	comf	?___lldiv,w
  3991  03BB  00C1               	movwf	??_setCurrent+4
  3992  03BC  092D               	comf	?___lldiv+1,w
  3993  03BD  00C2               	movwf	??_setCurrent+5
  3994  03BE  0AC1               	incf	??_setCurrent+4,f
  3995  03BF  1903               	skipnz
  3996  03C0  0AC2               	incf	??_setCurrent+5,f
  3997  03C1  083B               	movf	setCurrent@Vdd_mv,w
  3998  03C2  0741               	addwf	??_setCurrent+4,w
  3999  03C3  00FA               	movwf	setCurrent@Vdac_mv
  4000  03C4  083C               	movf	setCurrent@Vdd_mv+1,w
  4001  03C5  3D42               	addwfc	??_setCurrent+5,w
  4002  03C6  00FB               	movwf	setCurrent@Vdac_mv+1
  4003                           
  4004                           ;main.c: 194: DAC1CON1 = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  4005  03C7  083B               	movf	setCurrent@Vdd_mv,w
  4006  03C8  00A0               	movwf	___aldiv@divisor
  4007  03C9  083C               	movf	setCurrent@Vdd_mv+1,w
  4008  03CA  00A1               	movwf	___aldiv@divisor+1
  4009  03CB  01A2               	clrf	___aldiv@divisor+2
  4010  03CC  01A3               	clrf	___aldiv@divisor+3
  4011  03CD  083C               	movf	setCurrent@Vdd_mv+1,w
  4012  03CE  00BE               	movwf	??_setCurrent+1
  4013  03CF  083B               	movf	setCurrent@Vdd_mv,w
  4014  03D0  00BD               	movwf	??_setCurrent
  4015  03D1  36BE               	lsrf	??_setCurrent+1,f
  4016  03D2  0CBD               	rrf	??_setCurrent,f
  4017  03D3  083D               	movf	??_setCurrent,w
  4018  03D4  00BF               	movwf	??_setCurrent+2
  4019  03D5  083E               	movf	??_setCurrent+1,w
  4020  03D6  00C0               	movwf	??_setCurrent+3
  4021  03D7  01C1               	clrf	??_setCurrent+4
  4022  03D8  01C2               	clrf	??_setCurrent+5
  4023  03D9  087A               	movf	setCurrent@Vdac_mv,w
  4024  03DA  00C3               	movwf	??_setCurrent+6
  4025  03DB  087B               	movf	setCurrent@Vdac_mv+1,w
  4026  03DC  00C4               	movwf	??_setCurrent+7
  4027  03DD  01C5               	clrf	??_setCurrent+8
  4028  03DE  01C6               	clrf	??_setCurrent+9
  4029  03DF  3008               	movlw	8
  4030  03E0                     u2275:	
  4031  03E0  35C3               	lslf	??_setCurrent+6,f
  4032  03E1  0DC4               	rlf	??_setCurrent+7,f
  4033  03E2  0DC5               	rlf	??_setCurrent+8,f
  4034  03E3  0DC6               	rlf	??_setCurrent+9,f
  4035  03E4  0B89               	decfsz	9,f
  4036  03E5  2BE0               	goto	u2275
  4037  03E6  0843               	movf	??_setCurrent+6,w
  4038  03E7  07BF               	addwf	??_setCurrent+2,f
  4039  03E8  0844               	movf	??_setCurrent+7,w
  4040  03E9  3DC0               	addwfc	??_setCurrent+3,f
  4041  03EA  0845               	movf	??_setCurrent+8,w
  4042  03EB  3DC1               	addwfc	??_setCurrent+4,f
  4043  03EC  0846               	movf	??_setCurrent+9,w
  4044  03ED  3DC2               	addwfc	??_setCurrent+5,f
  4045  03EE  0842               	movf	??_setCurrent+5,w
  4046  03EF  00A7               	movwf	___aldiv@dividend+3
  4047  03F0  0841               	movf	??_setCurrent+4,w
  4048  03F1  00A6               	movwf	___aldiv@dividend+2
  4049  03F2  0840               	movf	??_setCurrent+3,w
  4050  03F3  00A5               	movwf	___aldiv@dividend+1
  4051  03F4  083F               	movf	??_setCurrent+2,w
  4052  03F5  00A4               	movwf	___aldiv@dividend
  4053  03F6  3183  2301         	fcall	___aldiv
  4054  03F8  0020               	movlb	0	; select bank0
  4055  03F9  0820               	movf	?___aldiv,w
  4056  03FA  0022               	movlb	2	; select bank2
  4057  03FB  0099               	movwf	25	;volatile
  4058  03FC  0008               	return
  4059  03FD                     __end_of_setCurrent:	
  4060                           
  4061                           	psect	text2
  4062  055F                     __ptext2:	
  4063 ;; *************** function ___lmul *****************
  4064 ;; Defined at:
  4065 ;;		line 15 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/Umul32.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4068 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;  product         4    8[BANK0 ] unsigned long 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  4    0[BANK0 ] unsigned long 
  4073 ;; Registers used:
  4074 ;;		wreg, status,2, status,0
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4080 ;;      Params:         0       8       0       0       0       0       0       0
  4081 ;;      Locals:         0       4       0       0       0       0       0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0
  4083 ;;      Totals:         0      12       0       0       0       0       0       0
  4084 ;;Total ram usage:       12 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    4
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_setCurrent
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           
  4095                           ;psect for function ___lmul
  4096  055F                     ___lmul:	
  4097                           
  4098                           ;incstack = 0
  4099                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4100  055F  3000               	movlw	0
  4101  0560  0020               	movlb	0	; select bank0
  4102  0561  00AB               	movwf	___lmul@product+3
  4103  0562  3000               	movlw	0
  4104  0563  00AA               	movwf	___lmul@product+2
  4105  0564  3000               	movlw	0
  4106  0565  00A9               	movwf	___lmul@product+1
  4107  0566  3000               	movlw	0
  4108  0567  00A8               	movwf	___lmul@product
  4109  0568                     l2254:	
  4110  0568  1C20               	btfss	___lmul@multiplier,0
  4111  0569  2D72               	goto	l2258
  4112  056A  0824               	movf	___lmul@multiplicand,w
  4113  056B  07A8               	addwf	___lmul@product,f
  4114  056C  0825               	movf	___lmul@multiplicand+1,w
  4115  056D  3DA9               	addwfc	___lmul@product+1,f
  4116  056E  0826               	movf	___lmul@multiplicand+2,w
  4117  056F  3DAA               	addwfc	___lmul@product+2,f
  4118  0570  0827               	movf	___lmul@multiplicand+3,w
  4119  0571  3DAB               	addwfc	___lmul@product+3,f
  4120  0572                     l2258:	
  4121  0572  3001               	movlw	1
  4122  0573                     u2245:	
  4123  0573  35A4               	lslf	___lmul@multiplicand,f
  4124  0574  0DA5               	rlf	___lmul@multiplicand+1,f
  4125  0575  0DA6               	rlf	___lmul@multiplicand+2,f
  4126  0576  0DA7               	rlf	___lmul@multiplicand+3,f
  4127  0577  0B89               	decfsz	9,f
  4128  0578  2D73               	goto	u2245
  4129  0579  3001               	movlw	1
  4130  057A                     u2255:	
  4131  057A  36A3               	lsrf	___lmul@multiplier+3,f
  4132  057B  0CA2               	rrf	___lmul@multiplier+2,f
  4133  057C  0CA1               	rrf	___lmul@multiplier+1,f
  4134  057D  0CA0               	rrf	___lmul@multiplier,f
  4135  057E  0B89               	decfsz	9,f
  4136  057F  2D7A               	goto	u2255
  4137  0580  0823               	movf	___lmul@multiplier+3,w
  4138  0581  0422               	iorwf	___lmul@multiplier+2,w
  4139  0582  0421               	iorwf	___lmul@multiplier+1,w
  4140  0583  0420               	iorwf	___lmul@multiplier,w
  4141  0584  1D03               	skipz
  4142  0585  2D68               	goto	l2254
  4143  0586  082B               	movf	___lmul@product+3,w
  4144  0587  00A3               	movwf	?___lmul+3
  4145  0588  082A               	movf	___lmul@product+2,w
  4146  0589  00A2               	movwf	?___lmul+2
  4147  058A  0829               	movf	___lmul@product+1,w
  4148  058B  00A1               	movwf	?___lmul+1
  4149  058C  0828               	movf	___lmul@product,w
  4150  058D  00A0               	movwf	?___lmul
  4151  058E  0008               	return
  4152  058F                     __end_of___lmul:	
  4153                           
  4154                           	psect	text3
  4155  03FD                     __ptext3:	
  4156 ;; *************** function _process_remote_command *****************
  4157 ;; Defined at:
  4158 ;;		line 140 in file "main.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  code            1    wreg     PTR struct .
  4161 ;;		 -> ir_code(6), 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  code            1   59[BANK0 ] PTR struct .
  4164 ;;		 -> ir_code(6), 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      void 
  4167 ;; Registers used:
  4168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4174 ;;      Params:         0       0       0       0       0       0       0       0
  4175 ;;      Locals:         0       1       0       0       0       0       0       0
  4176 ;;      Temps:          0       2       0       0       0       0       0       0
  4177 ;;      Totals:         0       3       0       0       0       0       0       0
  4178 ;;Total ram usage:        3 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    7
  4181 ;; This function calls:
  4182 ;;		_battery_voltage
  4183 ;;		_printf
  4184 ;;		_setLEDColor
  4185 ;; This function is called by:
  4186 ;;		_main
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           
  4191                           ;psect for function _process_remote_command
  4192  03FD                     _process_remote_command:	
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4196                           ;process_remote_command@code stored from wreg
  4197  03FD  0020               	movlb	0	; select bank0
  4198  03FE  00DB               	movwf	process_remote_command@code
  4199                           
  4200                           ;main.c: 141: switch(code->command){
  4201  03FF  2C28               	goto	l2284
  4202  0400                     l2268:	
  4203                           ;main.c: 142: case 0xa0:
  4204                           
  4205                           
  4206                           ;main.c: 143: LED_red += 10;
  4207  0400  300A               	movlw	10
  4208  0401  00D9               	movwf	??_process_remote_command
  4209  0402  0859               	movf	??_process_remote_command,w
  4210  0403  07E8               	addwf	_LED_red,f
  4211                           
  4212                           ;main.c: 144: break;
  4213  0404  2C56               	goto	l2286
  4214  0405                     l2270:	
  4215                           ;main.c: 145: case 0xb0:
  4216                           
  4217                           
  4218                           ;main.c: 146: LED_red -= 10;
  4219  0405  300A               	movlw	10
  4220  0406  02E8               	subwf	_LED_red,f
  4221                           
  4222                           ;main.c: 147: break;
  4223  0407  2C56               	goto	l2286
  4224  0408                     l2272:	
  4225                           ;main.c: 148: case 0x50:
  4226                           
  4227                           
  4228                           ;main.c: 149: LED_green += 10;
  4229  0408  300A               	movlw	10
  4230  0409  00D9               	movwf	??_process_remote_command
  4231  040A  0859               	movf	??_process_remote_command,w
  4232  040B  07E7               	addwf	_LED_green,f
  4233                           
  4234                           ;main.c: 150: break;
  4235  040C  2C56               	goto	l2286
  4236  040D                     l2274:	
  4237                           ;main.c: 151: case 0x10:
  4238                           
  4239                           
  4240                           ;main.c: 152: LED_green -= 10;
  4241  040D  300A               	movlw	10
  4242  040E  02E7               	subwf	_LED_green,f
  4243                           
  4244                           ;main.c: 153: break;
  4245  040F  2C56               	goto	l2286
  4246  0410                     l2276:	
  4247                           ;main.c: 154: case 0x08:
  4248                           
  4249                           
  4250                           ;main.c: 155: LED_blue += 10;
  4251  0410  300A               	movlw	10
  4252  0411  00D9               	movwf	??_process_remote_command
  4253  0412  0859               	movf	??_process_remote_command,w
  4254  0413  07E6               	addwf	_LED_blue,f
  4255                           
  4256                           ;main.c: 156: break;
  4257  0414  2C56               	goto	l2286
  4258  0415                     l2278:	
  4259                           ;main.c: 157: case 0x88:
  4260                           
  4261                           
  4262                           ;main.c: 158: LED_blue -= 10;
  4263  0415  300A               	movlw	10
  4264  0416  02E6               	subwf	_LED_blue,f
  4265                           
  4266                           ;main.c: 159: break;
  4267  0417  2C56               	goto	l2286
  4268  0418                     l2280:	
  4269                           ;main.c: 160: case 0x48:
  4270                           
  4271                           
  4272                           ;main.c: 161: printf("%d\n", (int)battery_voltage());
  4273  0418  30C2               	movlw	low (STR_1| (0+32768))
  4274  0419  00C1               	movwf	printf@f
  4275  041A  3087               	movlw	high (STR_1| (0+32768))
  4276  041B  00C2               	movwf	printf@f+1
  4277  041C  3185  25BF  3183   	fcall	_battery_voltage
  4278  041F  0020               	movlb	0	; select bank0
  4279  0420  082F               	movf	?_battery_voltage+1,w
  4280  0421  00C4               	movwf	?_printf+3
  4281  0422  082E               	movf	?_battery_voltage,w
  4282  0423  00C3               	movwf	?_printf+2
  4283  0424  3180  202D  3183   	fcall	_printf
  4284                           
  4285                           ;main.c: 177: }
  4286                           
  4287                           ;main.c: 176: break;
  4288                           
  4289                           ;main.c: 175: default:
  4290                           
  4291                           ;main.c: 174: break;
  4292                           
  4293                           ;main.c: 173: case 0x58:
  4294                           
  4295                           ;main.c: 172: break;
  4296                           
  4297                           ;main.c: 171: case 0x98:
  4298                           
  4299                           ;main.c: 170: break;
  4300                           
  4301                           ;main.c: 169: case 0x18:
  4302                           
  4303                           ;main.c: 168: break;
  4304                           
  4305                           ;main.c: 167: case 0x68:
  4306                           
  4307                           ;main.c: 166: break;
  4308                           
  4309                           ;main.c: 165: case 0xa8:
  4310                           
  4311                           ;main.c: 164: break;
  4312                           
  4313                           ;main.c: 163: case 0x28:
  4314                           
  4315                           ;main.c: 162: break;
  4316  0427  2C56               	goto	l2286
  4317  0428                     l2284:	
  4318  0428  0020               	movlb	0	; select bank0
  4319  0429  085B               	movf	process_remote_command@code,w
  4320  042A  3E03               	addlw	3
  4321  042B  0086               	movwf	6
  4322  042C  0187               	clrf	7
  4323  042D  0801               	movf	1,w
  4324                           
  4325                           ; Switch size 1, requested type "space"
  4326                           ; Number of cases is 13, Range of values is 8 to 176
  4327                           ; switch strategies available:
  4328                           ; Name         Instructions Cycles
  4329                           ; simple_byte           40    21 (average)
  4330                           ; jumptable            263     9 (fixed)
  4331                           ;	Chosen strategy is simple_byte
  4332  042E  3A08               	xorlw	8	; case 8
  4333  042F  1903               	skipnz
  4334  0430  2C10               	goto	l2276
  4335  0431  3A18               	xorlw	24	; case 16
  4336  0432  1903               	skipnz
  4337  0433  2C0D               	goto	l2274
  4338  0434  3A08               	xorlw	8	; case 24
  4339  0435  1903               	skipnz
  4340  0436  2C56               	goto	l2286
  4341  0437  3A30               	xorlw	48	; case 40
  4342  0438  1903               	skipnz
  4343  0439  2C56               	goto	l2286
  4344  043A  3A60               	xorlw	96	; case 72
  4345  043B  1903               	skipnz
  4346  043C  2C18               	goto	l2280
  4347  043D  3A18               	xorlw	24	; case 80
  4348  043E  1903               	skipnz
  4349  043F  2C08               	goto	l2272
  4350  0440  3A08               	xorlw	8	; case 88
  4351  0441  1903               	skipnz
  4352  0442  2C56               	goto	l2286
  4353  0443  3A30               	xorlw	48	; case 104
  4354  0444  1903               	skipnz
  4355  0445  2C56               	goto	l2286
  4356  0446  3AE0               	xorlw	224	; case 136
  4357  0447  1903               	skipnz
  4358  0448  2C15               	goto	l2278
  4359  0449  3A10               	xorlw	16	; case 152
  4360  044A  1903               	skipnz
  4361  044B  2C56               	goto	l2286
  4362  044C  3A38               	xorlw	56	; case 160
  4363  044D  1903               	skipnz
  4364  044E  2C00               	goto	l2268
  4365  044F  3A08               	xorlw	8	; case 168
  4366  0450  1903               	skipnz
  4367  0451  2C56               	goto	l2286
  4368  0452  3A18               	xorlw	24	; case 176
  4369  0453  1903               	skipnz
  4370  0454  2C05               	goto	l2270
  4371  0455  2C56               	goto	l2286
  4372  0456                     l2286:	
  4373                           
  4374                           ;main.c: 178: setLEDColor(LED_red, LED_green, LED_blue);
  4375  0456  0020               	movlb	0	; select bank0
  4376  0457  0867               	movf	_LED_green,w
  4377  0458  00D9               	movwf	??_process_remote_command
  4378  0459  0859               	movf	??_process_remote_command,w
  4379  045A  00A0               	movwf	setLEDColor@green
  4380  045B  0866               	movf	_LED_blue,w
  4381  045C  00DA               	movwf	??_process_remote_command+1
  4382  045D  085A               	movf	??_process_remote_command+1,w
  4383  045E  00A1               	movwf	setLEDColor@blue
  4384  045F  0868               	movf	_LED_red,w
  4385  0460  3187  2753         	fcall	_setLEDColor
  4386  0462  0008               	return
  4387  0463                     __end_of_process_remote_command:	
  4388                           
  4389                           	psect	text4
  4390  0753                     __ptext4:	
  4391 ;; *************** function _setLEDColor *****************
  4392 ;; Defined at:
  4393 ;;		line 122 in file "main.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;  red             1    wreg     unsigned char 
  4396 ;;  green           1    0[BANK0 ] unsigned char 
  4397 ;;  blue            1    1[BANK0 ] unsigned char 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  red             1    2[COMMON] unsigned char 
  4400 ;; Return value:  Size  Location     Type
  4401 ;;                  1    wreg      void 
  4402 ;; Registers used:
  4403 ;;		wreg
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4409 ;;      Params:         0       2       0       0       0       0       0       0
  4410 ;;      Locals:         1       0       0       0       0       0       0       0
  4411 ;;      Temps:          0       0       0       0       0       0       0       0
  4412 ;;      Totals:         1       2       0       0       0       0       0       0
  4413 ;;Total ram usage:        3 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    4
  4416 ;; This function calls:
  4417 ;;		Nothing
  4418 ;; This function is called by:
  4419 ;;		_process_remote_command
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           
  4424                           ;psect for function _setLEDColor
  4425  0753                     _setLEDColor:	
  4426                           
  4427                           ;incstack = 0
  4428                           ; Regs used in _setLEDColor: [wreg]
  4429                           ;setLEDColor@red stored from wreg
  4430  0753  00F9               	movwf	setLEDColor@red
  4431                           
  4432                           ;main.c: 128: CCPR1L = red;
  4433  0754  0879               	movf	setLEDColor@red,w
  4434  0755  0025               	movlb	5	; select bank5
  4435  0756  0091               	movwf	17	;volatile
  4436                           
  4437                           ;main.c: 130: PWM3DCH = green;
  4438  0757  0020               	movlb	0	; select bank0
  4439  0758  0820               	movf	setLEDColor@green,w
  4440  0759  002C               	movlb	12	; select bank12
  4441  075A  0098               	movwf	24	;volatile
  4442                           
  4443                           ;main.c: 132: PWM4DCH = blue;
  4444  075B  0020               	movlb	0	; select bank0
  4445  075C  0821               	movf	setLEDColor@blue,w
  4446  075D  002C               	movlb	12	; select bank12
  4447  075E  009B               	movwf	27	;volatile
  4448  075F  0008               	return
  4449  0760                     __end_of_setLEDColor:	
  4450                           
  4451                           	psect	text5
  4452  002D                     __ptext5:	
  4453 ;; *************** function _printf *****************
  4454 ;; Defined at:
  4455 ;;		line 472 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/doprnt.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;  f               2   33[BANK0 ] PTR const unsigned char 
  4458 ;;		 -> STR_8(27), STR_7(27), STR_6(27), STR_5(27), 
  4459 ;;		 -> STR_4(27), STR_3(26), STR_2(4), STR_1(4), 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  idx             1   45[BANK0 ] unsigned char 
  4462 ;;  val             4   49[BANK0 ] unsigned long 
  4463 ;;  tmpval          4    0        struct .
  4464 ;;  width           2   53[BANK0 ] int 
  4465 ;;  prec            2   46[BANK0 ] int 
  4466 ;;  cp              2    0        PTR const unsigned char 
  4467 ;;  len             2    0        unsigned int 
  4468 ;;  c               1   56[BANK0 ] unsigned char 
  4469 ;;  flag            1   55[BANK0 ] unsigned char 
  4470 ;;  ap              1   48[BANK0 ] PTR void [1]
  4471 ;;		 -> ?_printf(2), 
  4472 ;; Return value:  Size  Location     Type
  4473 ;;                  2   33[BANK0 ] int 
  4474 ;; Registers used:
  4475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4481 ;;      Params:         0       6       0       0       0       0       0       0
  4482 ;;      Locals:         0      12       0       0       0       0       0       0
  4483 ;;      Temps:          0       6       0       0       0       0       0       0
  4484 ;;      Totals:         0      24       0       0       0       0       0       0
  4485 ;;Total ram usage:       24 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; Hardware stack levels required when called:    6
  4488 ;; This function calls:
  4489 ;;		___lldiv
  4490 ;;		___llmod
  4491 ;;		___wmul
  4492 ;;		_isdigit
  4493 ;;		_putch
  4494 ;; This function is called by:
  4495 ;;		_process_remote_command
  4496 ;;		_main
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           
  4501                           ;psect for function _printf
  4502  002D                     _printf:	
  4503                           
  4504                           ;doprnt.c: 474: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4508  002D  3043               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4509  002E  0020               	movlb	0	; select bank0
  4510  002F  00C7               	movwf	??_printf
  4511  0030  0847               	movf	??_printf,w
  4512  0031  00D0               	movwf	printf@ap
  4513  0032                     l2250:	
  4514                           ;doprnt.c: 548: while((c = *f++)) {
  4515                           
  4516  0032  0020               	movlb	0	; select bank0
  4517  0033  0842               	movf	printf@f+1,w
  4518  0034  00C8               	movwf	??_printf+1
  4519  0035  0841               	movf	printf@f,w
  4520  0036  00C7               	movwf	??_printf
  4521  0037  0AC1               	incf	printf@f,f
  4522  0038  1903               	skipnz
  4523  0039  0AC2               	incf	printf@f+1,f
  4524  003A  0847               	movf	??_printf,w
  4525  003B  0084               	movwf	4
  4526  003C  0848               	movf	??_printf+1,w
  4527  003D  0085               	movwf	5
  4528  003E  0800               	movf	0,w	;code access
  4529  003F  00C9               	movwf	??_printf+2
  4530  0040  0849               	movf	??_printf+2,w
  4531  0041  00D8               	movwf	printf@c
  4532  0042  0858               	movf	printf@c,w
  4533  0043  1903               	btfsc	3,2
  4534  0044  0008               	return
  4535                           
  4536                           ;doprnt.c: 550: if(c != '%')
  4537  0045  3025               	movlw	37
  4538  0046  0658               	xorwf	printf@c,w
  4539  0047  1903               	btfsc	3,2
  4540  0048  284E               	goto	l2130
  4541                           
  4542                           ;doprnt.c: 552: {;doprnt.c: 553: (putch(c) );
  4543  0049  0858               	movf	printf@c,w
  4544  004A  3187  27BD  3180   	fcall	_putch
  4545                           
  4546                           ;doprnt.c: 554: continue;
  4547  004D  2832               	goto	l2250
  4548  004E                     l2130:	
  4549                           
  4550                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  4551  004E  0020               	movlb	0	; select bank0
  4552  004F  01D5               	clrf	printf@width
  4553  0050  01D6               	clrf	printf@width+1
  4554                           
  4555                           ;doprnt.c: 560: flag = 0;
  4556  0051  01D7               	clrf	printf@flag
  4557                           
  4558                           ;doprnt.c: 563: switch(*f) {
  4559                           
  4560                           ;doprnt.c: 562: for(;;) {
  4561  0052  2858               	goto	l2136
  4562  0053                     l478:	
  4563                           ;doprnt.c: 591: case '0':
  4564                           
  4565                           
  4566                           ;doprnt.c: 592: flag |= 0x04;
  4567  0053  1557               	bsf	printf@flag,2
  4568                           
  4569                           ;doprnt.c: 593: f++;
  4570  0054  3001               	movlw	1
  4571  0055  07C1               	addwf	printf@f,f
  4572  0056  3000               	movlw	0
  4573  0057  3DC2               	addwfc	printf@f+1,f
  4574  0058                     l2136:	
  4575                           ;doprnt.c: 596: }
  4576                           
  4577                           ;doprnt.c: 594: continue;
  4578                           
  4579  0058  0841               	movf	printf@f,w
  4580  0059  0084               	movwf	4
  4581  005A  0842               	movf	printf@f+1,w
  4582  005B  0085               	movwf	5
  4583  005C  0800               	movf	0,w	;code access
  4584                           
  4585                           ; Switch size 1, requested type "space"
  4586                           ; Number of cases is 1, Range of values is 48 to 48
  4587                           ; switch strategies available:
  4588                           ; Name         Instructions Cycles
  4589                           ; simple_byte            4     3 (average)
  4590                           ; direct_byte           11     9 (fixed)
  4591                           ; jumptable            263     9 (fixed)
  4592                           ;	Chosen strategy is simple_byte
  4593  005D  3A30               	xorlw	48	; case 48
  4594  005E  1903               	skipnz
  4595  005F  2853               	goto	l478
  4596  0060  2861               	goto	l2138
  4597  0061                     l2138:	
  4598                           ;doprnt.c: 598: }
  4599                           
  4600                           ;doprnt.c: 597: break;
  4601                           
  4602                           
  4603                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  4604  0061  0841               	movf	printf@f,w
  4605  0062  0084               	movwf	4
  4606  0063  0842               	movf	printf@f+1,w
  4607  0064  0085               	movwf	5
  4608  0065  0800               	movf	0,w	;code access
  4609  0066  3187  2745  3180   	fcall	_isdigit
  4610  0069  1C03               	btfss	3,0
  4611  006A  28A1               	goto	l2152
  4612                           
  4613                           ;doprnt.c: 610: width = 0;
  4614  006B  0020               	movlb	0	; select bank0
  4615  006C  01D5               	clrf	printf@width
  4616  006D  01D6               	clrf	printf@width+1
  4617  006E                     l2142:	
  4618                           ;doprnt.c: 611: do {
  4619                           
  4620                           
  4621                           ;doprnt.c: 612: width *= 10;
  4622  006E  300A               	movlw	10
  4623  006F  0020               	movlb	0	; select bank0
  4624  0070  00A0               	movwf	___wmul@multiplier
  4625  0071  3000               	movlw	0
  4626  0072  00A1               	movwf	___wmul@multiplier+1
  4627  0073  0856               	movf	printf@width+1,w
  4628  0074  00A3               	movwf	___wmul@multiplicand+1
  4629  0075  0855               	movf	printf@width,w
  4630  0076  00A2               	movwf	___wmul@multiplicand
  4631  0077  3186  2677  3180   	fcall	___wmul
  4632  007A  0020               	movlb	0	; select bank0
  4633  007B  0821               	movf	?___wmul+1,w
  4634  007C  00D6               	movwf	printf@width+1
  4635  007D  0820               	movf	?___wmul,w
  4636  007E  00D5               	movwf	printf@width
  4637                           
  4638                           ;doprnt.c: 613: width += *f++ - '0';
  4639  007F  0841               	movf	printf@f,w
  4640  0080  0084               	movwf	4
  4641  0081  0842               	movf	printf@f+1,w
  4642  0082  0085               	movwf	5
  4643  0083  0800               	movf	0,w	;code access
  4644  0084  3ED0               	addlw	208
  4645  0085  00C7               	movwf	??_printf
  4646  0086  30FF               	movlw	255
  4647  0087  1803               	skipnc
  4648  0088  3000               	movlw	0
  4649  0089  00C8               	movwf	??_printf+1
  4650  008A  0847               	movf	??_printf,w
  4651  008B  07D5               	addwf	printf@width,f
  4652  008C  0848               	movf	??_printf+1,w
  4653  008D  3DD6               	addwfc	printf@width+1,f
  4654  008E  3001               	movlw	1
  4655  008F  07C1               	addwf	printf@f,f
  4656  0090  3000               	movlw	0
  4657  0091  3DC2               	addwfc	printf@f+1,f
  4658                           
  4659                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  4660  0092  0841               	movf	printf@f,w
  4661  0093  0084               	movwf	4
  4662  0094  0842               	movf	printf@f+1,w
  4663  0095  0085               	movwf	5
  4664  0096  0800               	movf	0,w	;code access
  4665  0097  3187  2745  3180   	fcall	_isdigit
  4666  009A  1C03               	btfss	3,0
  4667  009B  28A1               	goto	l2152
  4668  009C  286E               	goto	l2142
  4669  009D                     l489:	
  4670                           ;doprnt.c: 660: case 'l':
  4671                           
  4672                           ;doprnt.c: 657: goto alldone;
  4673                           
  4674                           ;doprnt.c: 656: case 0:
  4675                           
  4676                           ;doprnt.c: 654: switch(c = *f++) {
  4677                           
  4678                           ;doprnt.c: 620: };doprnt.c: 652: loop:
  4679                           
  4680                           
  4681                           ;doprnt.c: 662: flag |= 0x10;
  4682  009D  1657               	bsf	printf@flag,4
  4683                           
  4684                           ;doprnt.c: 663: goto loop;
  4685  009E  28A1               	goto	l2152
  4686  009F                     l493:	
  4687                           ;doprnt.c: 737: case 'x':
  4688                           
  4689                           ;doprnt.c: 717: case 'i':;doprnt.c: 718: break;
  4690                           
  4691                           ;doprnt.c: 716: case 'd':
  4692                           
  4693                           
  4694                           ;doprnt.c: 740: flag |= 0x80;
  4695  009F  17D7               	bsf	printf@flag,7
  4696                           
  4697                           ;doprnt.c: 742: break;
  4698  00A0  28BF               	goto	l492
  4699  00A1                     l2152:	
  4700                           ;doprnt.c: 841: }
  4701                           
  4702                           ;doprnt.c: 832: continue;
  4703                           
  4704                           ;doprnt.c: 821: default:
  4705                           
  4706  00A1  0020               	movlb	0	; select bank0
  4707  00A2  0842               	movf	printf@f+1,w
  4708  00A3  00C8               	movwf	??_printf+1
  4709  00A4  0841               	movf	printf@f,w
  4710  00A5  00C7               	movwf	??_printf
  4711  00A6  0AC1               	incf	printf@f,f
  4712  00A7  1903               	skipnz
  4713  00A8  0AC2               	incf	printf@f+1,f
  4714  00A9  0847               	movf	??_printf,w
  4715  00AA  0084               	movwf	4
  4716  00AB  0848               	movf	??_printf+1,w
  4717  00AC  0085               	movwf	5
  4718  00AD  0800               	movf	0,w	;code access
  4719  00AE  00D8               	movwf	printf@c
  4720                           
  4721                           ; Switch size 1, requested type "space"
  4722                           ; Number of cases is 5, Range of values is 0 to 120
  4723                           ; switch strategies available:
  4724                           ; Name         Instructions Cycles
  4725                           ; simple_byte           16     9 (average)
  4726                           ; direct_byte          248     6 (fixed)
  4727                           ; jumptable            260     6 (fixed)
  4728                           ;	Chosen strategy is simple_byte
  4729  00AF  3A00               	xorlw	0	; case 0
  4730  00B0  1903               	skipnz
  4731  00B1  2A5B               	goto	l533
  4732  00B2  3A64               	xorlw	100	; case 100
  4733  00B3  1903               	skipnz
  4734  00B4  28BF               	goto	l492
  4735  00B5  3A0D               	xorlw	13	; case 105
  4736  00B6  1903               	skipnz
  4737  00B7  28BF               	goto	l492
  4738  00B8  3A05               	xorlw	5	; case 108
  4739  00B9  1903               	skipnz
  4740  00BA  289D               	goto	l489
  4741  00BB  3A14               	xorlw	20	; case 120
  4742  00BC  1903               	skipnz
  4743  00BD  289F               	goto	l493
  4744  00BE  2832               	goto	l2250
  4745  00BF                     l492:	
  4746                           
  4747                           ;doprnt.c: 1270: if((flag & 0x80) == 0x00)
  4748  00BF  1BD7               	btfsc	printf@flag,7
  4749  00C0  28F6               	goto	l495
  4750                           
  4751                           ;doprnt.c: 1272: {;doprnt.c: 1274: if(flag & 0x10)
  4752  00C1  1E57               	btfss	printf@flag,4
  4753  00C2  28D0               	goto	l2160
  4754                           
  4755                           ;doprnt.c: 1275: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4756  00C3  0850               	movf	printf@ap,w
  4757  00C4  0086               	movwf	6
  4758  00C5  0187               	clrf	7
  4759  00C6  3F40               	moviw [0]fsr1
  4760  00C7  00D1               	movwf	printf@val
  4761  00C8  3F41               	moviw [1]fsr1
  4762  00C9  00D2               	movwf	printf@val+1
  4763  00CA  3F42               	moviw [2]fsr1
  4764  00CB  00D3               	movwf	printf@val+2
  4765  00CC  3F43               	moviw [3]fsr1
  4766  00CD  00D4               	movwf	printf@val+3
  4767  00CE  3004               	movlw	4
  4768  00CF  28E1               	goto	L2
  4769  00D0                     l2160:	
  4770                           
  4771                           ;doprnt.c: 1276: else;doprnt.c: 1278: val = (long)(*(int *)__va_arg((*(int **)ap), (int)
      +                          0));
  4772  00D0  0850               	movf	printf@ap,w
  4773  00D1  0086               	movwf	6
  4774  00D2  0187               	clrf	7
  4775  00D3  3F40               	moviw [0]fsr1
  4776  00D4  00C7               	movwf	??_printf
  4777  00D5  3F41               	moviw [1]fsr1
  4778  00D6  00C8               	movwf	??_printf+1
  4779  00D7  0847               	movf	??_printf,w
  4780  00D8  00D1               	movwf	printf@val
  4781  00D9  0848               	movf	??_printf+1,w
  4782  00DA  00D2               	movwf	printf@val+1
  4783  00DB  0D89               	rlf	9,f
  4784  00DC  3B89               	subwfb	9,f
  4785  00DD  0989               	comf	9,f
  4786  00DE  00D3               	movwf	printf@val+2
  4787  00DF  00D4               	movwf	printf@val+3
  4788  00E0  3002               	movlw	2
  4789  00E1                     L2:	
  4790  00E1  00C7               	movwf	??_printf
  4791  00E2  0847               	movf	??_printf,w
  4792  00E3  07D0               	addwf	printf@ap,f
  4793                           
  4794                           ;doprnt.c: 1280: if((long)val < 0) {
  4795  00E4  1FD4               	btfss	printf@val+3,7
  4796  00E5  2977               	goto	l2200
  4797                           
  4798                           ;doprnt.c: 1281: flag |= 0x03;
  4799  00E6  3003               	movlw	3
  4800  00E7  00C7               	movwf	??_printf
  4801  00E8  0847               	movf	??_printf,w
  4802  00E9  04D7               	iorwf	printf@flag,f
  4803                           
  4804                           ;doprnt.c: 1282: val = -val;
  4805  00EA  09D1               	comf	printf@val,f
  4806  00EB  09D2               	comf	printf@val+1,f
  4807  00EC  09D3               	comf	printf@val+2,f
  4808  00ED  09D4               	comf	printf@val+3,f
  4809  00EE  0AD1               	incf	printf@val,f
  4810  00EF  1903               	skipnz
  4811  00F0  0AD2               	incf	printf@val+1,f
  4812  00F1  1903               	skipnz
  4813  00F2  0AD3               	incf	printf@val+2,f
  4814  00F3  1903               	skipnz
  4815  00F4  0AD4               	incf	printf@val+3,f
  4816                           
  4817                           ;doprnt.c: 1283: };doprnt.c: 1285: }
  4818  00F5  2977               	goto	l2200
  4819  00F6                     l495:	
  4820                           
  4821                           ;doprnt.c: 1287: else;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  4822  00F6  1E57               	btfss	printf@flag,4
  4823  00F7  2905               	goto	l2174
  4824                           
  4825                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4826  00F8  0850               	movf	printf@ap,w
  4827  00F9  0086               	movwf	6
  4828  00FA  0187               	clrf	7
  4829  00FB  3F40               	moviw [0]fsr1
  4830  00FC  00D1               	movwf	printf@val
  4831  00FD  3F41               	moviw [1]fsr1
  4832  00FE  00D2               	movwf	printf@val+1
  4833  00FF  3F42               	moviw [2]fsr1
  4834  0100  00D3               	movwf	printf@val+2
  4835  0101  3F43               	moviw [3]fsr1
  4836  0102  00D4               	movwf	printf@val+3
  4837  0103  3004               	movlw	4
  4838  0104  2913               	goto	L3
  4839  0105                     l2174:	
  4840                           
  4841                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  4842  0105  0850               	movf	printf@ap,w
  4843  0106  0086               	movwf	6
  4844  0107  0187               	clrf	7
  4845  0108  3F40               	moviw [0]fsr1
  4846  0109  00C7               	movwf	??_printf
  4847  010A  3F41               	moviw [1]fsr1
  4848  010B  00C8               	movwf	??_printf+1
  4849  010C  0847               	movf	??_printf,w
  4850  010D  00D1               	movwf	printf@val
  4851  010E  0848               	movf	??_printf+1,w
  4852  010F  00D2               	movwf	printf@val+1
  4853  0110  01D3               	clrf	printf@val+2
  4854  0111  01D4               	clrf	printf@val+3
  4855  0112  3002               	movlw	2
  4856  0113                     L3:	
  4857  0113  00C7               	movwf	??_printf
  4858  0114  0847               	movf	??_printf,w
  4859  0115  07D0               	addwf	printf@ap,f
  4860                           
  4861                           ;doprnt.c: 1306: };doprnt.c: 1313: switch((unsigned char)(flag & 0x80)) {
  4862  0116  2977               	goto	l2200
  4863  0117                     l503:	
  4864                           ;doprnt.c: 1318: case 0x00:
  4865                           
  4866                           
  4867                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4868  0117  01D8               	clrf	printf@c
  4869  0118  0AD8               	incf	printf@c,f
  4870  0119                     L5:	
  4871  0119  300A               	movlw	10
  4872  011A  0658               	xorwf	printf@c,w
  4873  011B  1903               	btfsc	3,2
  4874  011C  2980               	goto	l2202
  4875                           
  4876                           ;doprnt.c: 1325: if(val < dpowers[c])
  4877  011D  0858               	movf	printf@c,w
  4878  011E  00C7               	movwf	??_printf
  4879  011F  01C8               	clrf	??_printf+1
  4880  0120  35C7               	lslf	??_printf,f
  4881  0121  0DC8               	rlf	??_printf+1,f
  4882  0122  35C7               	lslf	??_printf,f
  4883  0123  0DC8               	rlf	??_printf+1,f
  4884  0124  30ED               	movlw	low (_dpowers| (0+32768))
  4885  0125  0747               	addwf	??_printf,w
  4886  0126  0084               	movwf	4
  4887  0127  3085               	movlw	high (_dpowers| (0+32768))
  4888  0128  3D48               	addwfc	??_printf+1,w
  4889  0129  0085               	movwf	5
  4890  012A  3F00               	moviw [0]fsr0
  4891  012B  00C9               	movwf	??_printf+2
  4892  012C  3F01               	moviw [1]fsr0
  4893  012D  00CA               	movwf	??_printf+3
  4894  012E  3F02               	moviw [2]fsr0
  4895  012F  00CB               	movwf	??_printf+4
  4896  0130  3F03               	moviw [3]fsr0
  4897  0131  00CC               	movwf	??_printf+5
  4898  0132  084C               	movf	??_printf+5,w
  4899  0133  0254               	subwf	printf@val+3,w
  4900  0134  1D03               	skipz
  4901  0135  2940               	goto	u2065
  4902  0136  084B               	movf	??_printf+4,w
  4903  0137  0253               	subwf	printf@val+2,w
  4904  0138  1D03               	skipz
  4905  0139  2940               	goto	u2065
  4906  013A  084A               	movf	??_printf+3,w
  4907  013B  0252               	subwf	printf@val+1,w
  4908  013C  1D03               	skipz
  4909  013D  2940               	goto	u2065
  4910  013E  0849               	movf	??_printf+2,w
  4911  013F  0251               	subwf	printf@val,w
  4912  0140                     u2065:	
  4913  0140  1C03               	btfss	3,0
  4914  0141  2980               	goto	l2202
  4915                           
  4916                           ;doprnt.c: 1326: break;
  4917  0142  3001               	movlw	1
  4918  0143  00C7               	movwf	??_printf
  4919  0144  0847               	movf	??_printf,w
  4920  0145  07D8               	addwf	printf@c,f
  4921  0146  2919               	goto	L5
  4922  0147                     l508:	
  4923                           ;doprnt.c: 1333: case 0x80:
  4924                           
  4925                           ;doprnt.c: 1328: break;
  4926                           
  4927                           
  4928                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4929  0147  01D8               	clrf	printf@c
  4930  0148  0AD8               	incf	printf@c,f
  4931  0149                     L6:	
  4932  0149  3008               	movlw	8
  4933  014A  0658               	xorwf	printf@c,w
  4934  014B  1903               	btfsc	3,2
  4935  014C  2980               	goto	l2202
  4936                           
  4937                           ;doprnt.c: 1336: if(val < hexpowers[c])
  4938  014D  0858               	movf	printf@c,w
  4939  014E  00C7               	movwf	??_printf
  4940  014F  01C8               	clrf	??_printf+1
  4941  0150  35C7               	lslf	??_printf,f
  4942  0151  0DC8               	rlf	??_printf+1,f
  4943  0152  35C7               	lslf	??_printf,f
  4944  0153  0DC8               	rlf	??_printf+1,f
  4945  0154  3039               	movlw	low (_hexpowers| (0+32768))
  4946  0155  0747               	addwf	??_printf,w
  4947  0156  0084               	movwf	4
  4948  0157  3086               	movlw	high (_hexpowers| (0+32768))
  4949  0158  3D48               	addwfc	??_printf+1,w
  4950  0159  0085               	movwf	5
  4951  015A  3F00               	moviw [0]fsr0
  4952  015B  00C9               	movwf	??_printf+2
  4953  015C  3F01               	moviw [1]fsr0
  4954  015D  00CA               	movwf	??_printf+3
  4955  015E  3F02               	moviw [2]fsr0
  4956  015F  00CB               	movwf	??_printf+4
  4957  0160  3F03               	moviw [3]fsr0
  4958  0161  00CC               	movwf	??_printf+5
  4959  0162  084C               	movf	??_printf+5,w
  4960  0163  0254               	subwf	printf@val+3,w
  4961  0164  1D03               	skipz
  4962  0165  2970               	goto	u2095
  4963  0166  084B               	movf	??_printf+4,w
  4964  0167  0253               	subwf	printf@val+2,w
  4965  0168  1D03               	skipz
  4966  0169  2970               	goto	u2095
  4967  016A  084A               	movf	??_printf+3,w
  4968  016B  0252               	subwf	printf@val+1,w
  4969  016C  1D03               	skipz
  4970  016D  2970               	goto	u2095
  4971  016E  0849               	movf	??_printf+2,w
  4972  016F  0251               	subwf	printf@val,w
  4973  0170                     u2095:	
  4974  0170  1C03               	btfss	3,0
  4975  0171  2980               	goto	l2202
  4976                           
  4977                           ;doprnt.c: 1337: break;
  4978  0172  3001               	movlw	1
  4979  0173  00C7               	movwf	??_printf
  4980  0174  0847               	movf	??_printf,w
  4981  0175  07D8               	addwf	printf@c,f
  4982  0176  2949               	goto	L6
  4983  0177                     l2200:	
  4984                           ;doprnt.c: 1355: }
  4985                           
  4986                           ;doprnt.c: 1339: break;
  4987                           
  4988  0177  0857               	movf	printf@flag,w
  4989  0178  3980               	andlw	128
  4990                           
  4991                           ; Switch size 1, requested type "space"
  4992                           ; Number of cases is 2, Range of values is 0 to 128
  4993                           ; switch strategies available:
  4994                           ; Name         Instructions Cycles
  4995                           ; simple_byte            7     4 (average)
  4996                           ; jumptable            260     6 (fixed)
  4997                           ;	Chosen strategy is simple_byte
  4998  0179  3A00               	xorlw	0	; case 0
  4999  017A  1903               	skipnz
  5000  017B  2917               	goto	l503
  5001  017C  3A80               	xorlw	128	; case 128
  5002  017D  1903               	skipnz
  5003  017E  2947               	goto	l508
  5004  017F  2980               	goto	l2202
  5005  0180                     l2202:	
  5006                           
  5007                           ;doprnt.c: 1364: if(width && flag & 0x03)
  5008  0180  0855               	movf	printf@width,w
  5009  0181  0456               	iorwf	printf@width+1,w
  5010  0182  1903               	btfsc	3,2
  5011  0183  298C               	goto	l512
  5012  0184  0857               	movf	printf@flag,w
  5013  0185  3903               	andlw	3
  5014  0186  1903               	btfsc	3,2
  5015  0187  298C               	goto	l512
  5016                           
  5017                           ;doprnt.c: 1365: width--;
  5018  0188  30FF               	movlw	255
  5019  0189  07D5               	addwf	printf@width,f
  5020  018A  30FF               	movlw	255
  5021  018B  3DD6               	addwfc	printf@width+1,f
  5022  018C                     l512:	
  5023                           
  5024                           ;doprnt.c: 1400: if(width > c)
  5025  018C  0856               	movf	printf@width+1,w
  5026  018D  3A80               	xorlw	128
  5027  018E  3C80               	sublw	128
  5028  018F  1D03               	skipz
  5029  0190  2993               	goto	u2135
  5030  0191  0855               	movf	printf@width,w
  5031  0192  0258               	subwf	printf@c,w
  5032  0193                     u2135:	
  5033  0193  1803               	skipnc
  5034  0194  299E               	goto	l2210
  5035                           
  5036                           ;doprnt.c: 1401: width -= c;
  5037  0195  0020               	movlb	0	; select bank0
  5038  0196  0858               	movf	printf@c,w
  5039  0197  00C7               	movwf	??_printf
  5040  0198  01C8               	clrf	??_printf+1
  5041  0199  0847               	movf	??_printf,w
  5042  019A  02D5               	subwf	printf@width,f
  5043  019B  0848               	movf	??_printf+1,w
  5044  019C  3BD6               	subwfb	printf@width+1,f
  5045  019D  29A1               	goto	l2212
  5046  019E                     l2210:	
  5047                           
  5048                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  5049  019E  0020               	movlb	0	; select bank0
  5050  019F  01D5               	clrf	printf@width
  5051  01A0  01D6               	clrf	printf@width+1
  5052  01A1                     l2212:	
  5053                           
  5054                           ;doprnt.c: 1406: if(flag & 0x04) {
  5055  01A1  1D57               	btfss	printf@flag,2
  5056  01A2  29BA               	goto	l2224
  5057                           
  5058                           ;doprnt.c: 1411: if(flag & 0x03)
  5059  01A3  0857               	movf	printf@flag,w
  5060  01A4  3903               	andlw	3
  5061  01A5  1903               	btfsc	3,2
  5062  01A6  29AB               	goto	l2218
  5063                           
  5064                           ;doprnt.c: 1412: (putch('-') );
  5065  01A7  302D               	movlw	45
  5066  01A8  3187  27BD  3180   	fcall	_putch
  5067  01AB                     l2218:	
  5068                           
  5069                           ;doprnt.c: 1434: if(width)
  5070  01AB  0020               	movlb	0	; select bank0
  5071  01AC                     L7:	
  5072  01AC  0855               	movf	printf@width,w
  5073  01AD  0456               	iorwf	printf@width+1,w
  5074  01AE  1903               	btfsc	3,2
  5075  01AF  29D3               	goto	l2234
  5076                           
  5077                           ;doprnt.c: 1436: (putch('0') );
  5078                           
  5079                           ;doprnt.c: 1435: do
  5080  01B0  3030               	movlw	48
  5081  01B1  3187  27BD  3180   	fcall	_putch
  5082                           
  5083                           ;doprnt.c: 1437: while(--width);
  5084  01B4  30FF               	movlw	255
  5085  01B5  0020               	movlb	0	; select bank0
  5086  01B6  07D5               	addwf	printf@width,f
  5087  01B7  30FF               	movlw	255
  5088  01B8  3DD6               	addwfc	printf@width+1,f
  5089  01B9  29AC               	goto	L7
  5090  01BA                     l2224:	
  5091                           ;doprnt.c: 1439: } else
  5092                           
  5093                           
  5094                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  5095  01BA  0855               	movf	printf@width,w
  5096  01BB  0456               	iorwf	printf@width+1,w
  5097  01BC  1903               	btfsc	3,2
  5098  01BD  29CB               	goto	l2230
  5099  01BE                     l2226:	
  5100                           ;doprnt.c: 1448: do
  5101                           
  5102                           
  5103                           ;doprnt.c: 1449: (putch(' ') );
  5104  01BE  3020               	movlw	32
  5105  01BF  3187  27BD  3180   	fcall	_putch
  5106                           
  5107                           ;doprnt.c: 1450: while(--width);
  5108  01C2  30FF               	movlw	255
  5109  01C3  0020               	movlb	0	; select bank0
  5110  01C4  07D5               	addwf	printf@width,f
  5111  01C5  30FF               	movlw	255
  5112  01C6  3DD6               	addwfc	printf@width+1,f
  5113  01C7  0855               	movf	printf@width,w
  5114  01C8  0456               	iorwf	printf@width+1,w
  5115  01C9  1D03               	btfss	3,2
  5116  01CA  29BE               	goto	l2226
  5117  01CB                     l2230:	
  5118                           
  5119                           ;doprnt.c: 1457: if(flag & 0x03)
  5120  01CB  0857               	movf	printf@flag,w
  5121  01CC  3903               	andlw	3
  5122  01CD  1903               	btfsc	3,2
  5123  01CE  29D3               	goto	l2234
  5124                           
  5125                           ;doprnt.c: 1458: (putch('-') );
  5126  01CF  302D               	movlw	45
  5127  01D0  3187  27BD  3180   	fcall	_putch
  5128  01D3                     l2234:	
  5129                           
  5130                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  5131  01D3  0020               	movlb	0	; select bank0
  5132  01D4  0858               	movf	printf@c,w
  5133  01D5  00C7               	movwf	??_printf
  5134  01D6  01C8               	clrf	??_printf+1
  5135  01D7  0847               	movf	??_printf,w
  5136  01D8  00CE               	movwf	printf@prec
  5137  01D9  0848               	movf	??_printf+1,w
  5138  01DA  00CF               	movwf	printf@prec+1
  5139                           
  5140                           ;doprnt.c: 1493: while(prec--) {
  5141  01DB  2A47               	goto	l2248
  5142  01DC                     l2236:	
  5143                           ;doprnt.c: 1497: {;doprnt.c: 1502: case 0x00:
  5144                           
  5145                           ;doprnt.c: 1495: switch((unsigned char)(flag & 0x80))
  5146                           
  5147                           
  5148                           ;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  5149  01DC  3000               	movlw	0
  5150  01DD  00BC               	movwf	___llmod@divisor+3
  5151  01DE  3000               	movlw	0
  5152  01DF  00BB               	movwf	___llmod@divisor+2
  5153  01E0  3000               	movlw	0
  5154  01E1  00BA               	movwf	___llmod@divisor+1
  5155  01E2  300A               	movlw	10
  5156  01E3  00B9               	movwf	___llmod@divisor
  5157  01E4  084F               	movf	printf@prec+1,w
  5158  01E5  0085               	movwf	5
  5159  01E6  084E               	movf	printf@prec,w
  5160  01E7  0084               	movwf	4
  5161  01E8  3584               	lslf	4,f
  5162  01E9  0D85               	rlf	5,f
  5163  01EA  3584               	lslf	4,f
  5164  01EB  0D85               	rlf	5,f
  5165  01EC  30ED               	movlw	low (_dpowers| (0+32768))
  5166  01ED  0784               	addwf	4,f
  5167  01EE  3085               	movlw	high (_dpowers| (0+32768))
  5168  01EF  3D85               	addwfc	5,f
  5169  01F0  3F00               	moviw [0]fsr0
  5170  01F1  00AC               	movwf	___lldiv@divisor
  5171  01F2  3F01               	moviw [1]fsr0
  5172  01F3  00AD               	movwf	___lldiv@divisor+1
  5173  01F4  3F02               	moviw [2]fsr0
  5174  01F5  00AE               	movwf	___lldiv@divisor+2
  5175  01F6  3F03               	moviw [3]fsr0
  5176  01F7  00AF               	movwf	___lldiv@divisor+3
  5177  01F8  0854               	movf	printf@val+3,w
  5178  01F9  00B3               	movwf	___lldiv@dividend+3
  5179  01FA  0853               	movf	printf@val+2,w
  5180  01FB  00B2               	movwf	___lldiv@dividend+2
  5181  01FC  0852               	movf	printf@val+1,w
  5182  01FD  00B1               	movwf	___lldiv@dividend+1
  5183  01FE  0851               	movf	printf@val,w
  5184  01FF  00B0               	movwf	___lldiv@dividend
  5185  0200  3184  24C9  3180   	fcall	___lldiv
  5186  0203  0020               	movlb	0	; select bank0
  5187  0204  082F               	movf	?___lldiv+3,w
  5188  0205  00C0               	movwf	___llmod@dividend+3
  5189  0206  082E               	movf	?___lldiv+2,w
  5190  0207  00BF               	movwf	___llmod@dividend+2
  5191  0208  082D               	movf	?___lldiv+1,w
  5192  0209  00BE               	movwf	___llmod@dividend+1
  5193  020A  082C               	movf	?___lldiv,w
  5194  020B  00BD               	movwf	___llmod@dividend
  5195  020C  3185  251C  3180   	fcall	___llmod
  5196  020F  0020               	movlb	0	; select bank0
  5197  0210  0839               	movf	?___llmod,w
  5198  0211  3E30               	addlw	48
  5199  0212  2A40               	goto	L4
  5200  0213                     l2238:	
  5201                           ;doprnt.c: 1516: case 0x80:
  5202                           
  5203                           ;doprnt.c: 1510: break;
  5204                           
  5205                           
  5206                           ;doprnt.c: 1518: {;doprnt.c: 1519: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5207  0213  084F               	movf	printf@prec+1,w
  5208  0214  0085               	movwf	5
  5209  0215  084E               	movf	printf@prec,w
  5210  0216  0084               	movwf	4
  5211  0217  3584               	lslf	4,f
  5212  0218  0D85               	rlf	5,f
  5213  0219  3584               	lslf	4,f
  5214  021A  0D85               	rlf	5,f
  5215  021B  3039               	movlw	low (_hexpowers| (0+32768))
  5216  021C  0784               	addwf	4,f
  5217  021D  3086               	movlw	high (_hexpowers| (0+32768))
  5218  021E  3D85               	addwfc	5,f
  5219  021F  3F00               	moviw [0]fsr0
  5220  0220  00AC               	movwf	___lldiv@divisor
  5221  0221  3F01               	moviw [1]fsr0
  5222  0222  00AD               	movwf	___lldiv@divisor+1
  5223  0223  3F02               	moviw [2]fsr0
  5224  0224  00AE               	movwf	___lldiv@divisor+2
  5225  0225  3F03               	moviw [3]fsr0
  5226  0226  00AF               	movwf	___lldiv@divisor+3
  5227  0227  0854               	movf	printf@val+3,w
  5228  0228  00B3               	movwf	___lldiv@dividend+3
  5229  0229  0853               	movf	printf@val+2,w
  5230  022A  00B2               	movwf	___lldiv@dividend+2
  5231  022B  0852               	movf	printf@val+1,w
  5232  022C  00B1               	movwf	___lldiv@dividend+1
  5233  022D  0851               	movf	printf@val,w
  5234  022E  00B0               	movwf	___lldiv@dividend
  5235  022F  3184  24C9  3180   	fcall	___lldiv
  5236  0232  0020               	movlb	0	; select bank0
  5237  0233  082C               	movf	?___lldiv,w
  5238  0234  390F               	andlw	15
  5239  0235  00C7               	movwf	??_printf
  5240  0236  0847               	movf	??_printf,w
  5241  0237  00CD               	movwf	printf@idx
  5242                           
  5243                           ;doprnt.c: 1525: c = "0123456789abcdef"[idx];
  5244  0238  084D               	movf	printf@idx,w
  5245  0239  3E34               	addlw	low (STR_9| (0+32768))
  5246  023A  0084               	movwf	4
  5247  023B  3087               	movlw	high (STR_9| (0+32768))
  5248  023C  1803               	skipnc
  5249  023D  3E01               	addlw	1
  5250  023E  0085               	movwf	5
  5251  023F  0800               	movf	0,w	;code access
  5252  0240                     L4:	
  5253  0240  00C7               	movwf	??_printf
  5254  0241  0847               	movf	??_printf,w
  5255  0242  00D8               	movwf	printf@c
  5256  0243                     l2246:	
  5257                           ;doprnt.c: 1542: }
  5258                           
  5259                           ;doprnt.c: 1527: };doprnt.c: 1529: break;
  5260                           
  5261                           
  5262                           ;doprnt.c: 1543: (putch(c) );
  5263  0243  0858               	movf	printf@c,w
  5264  0244  3187  27BD  3180   	fcall	_putch
  5265  0247                     l2248:	
  5266  0247  30FF               	movlw	255
  5267  0248  0020               	movlb	0	; select bank0
  5268  0249  07CE               	addwf	printf@prec,f
  5269  024A  30FF               	movlw	255
  5270  024B  3DCF               	addwfc	printf@prec+1,f
  5271  024C  0A4E               	incf	printf@prec,w
  5272  024D  1903               	btfsc	3,2
  5273  024E  0A4F               	incf	printf@prec+1,w
  5274  024F  1903               	btfsc	3,2
  5275  0250  2832               	goto	l2250
  5276  0251  0857               	movf	printf@flag,w
  5277  0252  3980               	andlw	128
  5278                           
  5279                           ; Switch size 1, requested type "space"
  5280                           ; Number of cases is 2, Range of values is 0 to 128
  5281                           ; switch strategies available:
  5282                           ; Name         Instructions Cycles
  5283                           ; simple_byte            7     4 (average)
  5284                           ; jumptable            260     6 (fixed)
  5285                           ;	Chosen strategy is simple_byte
  5286  0253  3A00               	xorlw	0	; case 0
  5287  0254  1903               	skipnz
  5288  0255  29DC               	goto	l2236
  5289  0256  3A80               	xorlw	128	; case 128
  5290  0257  1903               	skipnz
  5291  0258  2A13               	goto	l2238
  5292  0259  2A43               	goto	l2246
  5293  025A  2A43               	goto	l2246
  5294  025B                     l533:	
  5295                           ;doprnt.c: 1559: return 0;;	Return value of _printf is never used
  5296                           
  5297                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  5298                           
  5299  025B  0008               	return
  5300  025C                     __end_of_printf:	
  5301                           
  5302                           	psect	text6
  5303  07BD                     __ptext6:	
  5304 ;; *************** function _putch *****************
  5305 ;; Defined at:
  5306 ;;		line 146 in file "mcc_generated_files/eusart.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  txData          1    wreg     unsigned char 
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  txData          1    3[COMMON] unsigned char 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  1    wreg      void 
  5313 ;; Registers used:
  5314 ;;		wreg, status,2, status,0, pclath, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5320 ;;      Params:         0       0       0       0       0       0       0       0
  5321 ;;      Locals:         1       0       0       0       0       0       0       0
  5322 ;;      Temps:          0       0       0       0       0       0       0       0
  5323 ;;      Totals:         1       0       0       0       0       0       0       0
  5324 ;;Total ram usage:        1 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    5
  5327 ;; This function calls:
  5328 ;;		_EUSART_Write
  5329 ;; This function is called by:
  5330 ;;		_printf
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           
  5335                           ;psect for function _putch
  5336  07BD                     _putch:	
  5337                           
  5338                           ;incstack = 0
  5339                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  5340                           ;putch@txData stored from wreg
  5341  07BD  00FA               	movwf	putch@txData
  5342                           
  5343                           ;eusart.c: 148: EUSART_Write(txData);
  5344  07BE  087A               	movf	putch@txData,w
  5345  07BF  3187  2781         	fcall	_EUSART_Write
  5346  07C1  0008               	return
  5347  07C2                     __end_of_putch:	
  5348                           
  5349                           	psect	text7
  5350  0781                     __ptext7:	
  5351 ;; *************** function _EUSART_Write *****************
  5352 ;; Defined at:
  5353 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  txData          1    wreg     unsigned char 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  txData          1    2[COMMON] unsigned char 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  1    wreg      void 
  5360 ;; Registers used:
  5361 ;;		wreg
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5367 ;;      Params:         0       0       0       0       0       0       0       0
  5368 ;;      Locals:         1       0       0       0       0       0       0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0       0
  5370 ;;      Totals:         1       0       0       0       0       0       0       0
  5371 ;;Total ram usage:        1 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    4
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_putch
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           
  5382                           ;psect for function _EUSART_Write
  5383  0781                     _EUSART_Write:	
  5384                           
  5385                           ;incstack = 0
  5386                           ; Regs used in _EUSART_Write: [wreg]
  5387                           ;EUSART_Write@txData stored from wreg
  5388  0781  00F9               	movwf	EUSART_Write@txData
  5389  0782                     l197:	
  5390                           ;eusart.c: 135: {
  5391                           
  5392                           ;eusart.c: 134: while(0 == PIR1bits.TXIF)
  5393                           
  5394  0782  0020               	movlb	0	; select bank0
  5395  0783  1E11               	btfss	17,4	;volatile
  5396  0784  2F82               	goto	l197
  5397                           
  5398                           ;eusart.c: 136: };eusart.c: 138: TX1REG = txData;
  5399  0785  0879               	movf	EUSART_Write@txData,w
  5400  0786  0023               	movlb	3	; select bank3
  5401  0787  009A               	movwf	26	;volatile
  5402  0788  0008               	return
  5403  0789                     __end_of_EUSART_Write:	
  5404                           
  5405                           	psect	text8
  5406  0745                     __ptext8:	
  5407 ;; *************** function _isdigit *****************
  5408 ;; Defined at:
  5409 ;;		line 8 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/isdigit.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;  c               1    wreg     unsigned char 
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;  c               1    3[COMMON] unsigned char 
  5414 ;; Return value:  Size  Location     Type
  5415 ;;		None               void
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, status,0
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5423 ;;      Params:         0       0       0       0       0       0       0       0
  5424 ;;      Locals:         2       0       0       0       0       0       0       0
  5425 ;;      Temps:          0       0       0       0       0       0       0       0
  5426 ;;      Totals:         2       0       0       0       0       0       0       0
  5427 ;;Total ram usage:        2 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    4
  5430 ;; This function calls:
  5431 ;;		Nothing
  5432 ;; This function is called by:
  5433 ;;		_printf
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           
  5438                           ;psect for function _isdigit
  5439  0745                     _isdigit:	
  5440                           
  5441                           ;incstack = 0
  5442                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5443                           ;isdigit@c stored from wreg
  5444  0745  00FA               	movwf	isdigit@c
  5445  0746  01F9               	clrf	_isdigit$1238
  5446  0747  303A               	movlw	58
  5447  0748  027A               	subwf	isdigit@c,w
  5448  0749  1803               	skipnc
  5449  074A  2F51               	goto	l2014
  5450  074B  3030               	movlw	48
  5451  074C  027A               	subwf	isdigit@c,w
  5452  074D  1C03               	skipc
  5453  074E  2F51               	goto	l2014
  5454  074F  01F9               	clrf	_isdigit$1238
  5455  0750  0AF9               	incf	_isdigit$1238,f
  5456  0751                     l2014:	
  5457  0751  0C79               	rrf	_isdigit$1238,w
  5458  0752  0008               	return
  5459  0753                     __end_of_isdigit:	
  5460                           
  5461                           	psect	text9
  5462  0677                     __ptext9:	
  5463 ;; *************** function ___wmul *****************
  5464 ;; Defined at:
  5465 ;;		line 15 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/Umul16.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5468 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  product         2    2[COMMON] unsigned int 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  2    0[BANK0 ] unsigned int 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5480 ;;      Params:         0       4       0       0       0       0       0       0
  5481 ;;      Locals:         2       0       0       0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0
  5483 ;;      Totals:         2       4       0       0       0       0       0       0
  5484 ;;Total ram usage:        6 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    4
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_printf
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           
  5495                           ;psect for function ___wmul
  5496  0677                     ___wmul:	
  5497                           
  5498                           ;incstack = 0
  5499                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5500  0677  01F9               	clrf	___wmul@product
  5501  0678  01FA               	clrf	___wmul@product+1
  5502  0679                     l2020:	
  5503  0679  0020               	movlb	0	; select bank0
  5504  067A  1C20               	btfss	___wmul@multiplier,0
  5505  067B  2E80               	goto	l537
  5506  067C  0822               	movf	___wmul@multiplicand,w
  5507  067D  07F9               	addwf	___wmul@product,f
  5508  067E  0823               	movf	___wmul@multiplicand+1,w
  5509  067F  3DFA               	addwfc	___wmul@product+1,f
  5510  0680                     l537:	
  5511  0680  3001               	movlw	1
  5512  0681                     u1705:	
  5513  0681  35A2               	lslf	___wmul@multiplicand,f
  5514  0682  0DA3               	rlf	___wmul@multiplicand+1,f
  5515  0683  0B89               	decfsz	9,f
  5516  0684  2E81               	goto	u1705
  5517  0685  3001               	movlw	1
  5518  0686                     u1715:	
  5519  0686  36A1               	lsrf	___wmul@multiplier+1,f
  5520  0687  0CA0               	rrf	___wmul@multiplier,f
  5521  0688  0B89               	decfsz	9,f
  5522  0689  2E86               	goto	u1715
  5523  068A  0820               	movf	___wmul@multiplier,w
  5524  068B  0421               	iorwf	___wmul@multiplier+1,w
  5525  068C  1D03               	btfss	3,2
  5526  068D  2E79               	goto	l2020
  5527  068E  087A               	movf	___wmul@product+1,w
  5528  068F  00A1               	movwf	?___wmul+1
  5529  0690  0879               	movf	___wmul@product,w
  5530  0691  00A0               	movwf	?___wmul
  5531  0692  0008               	return
  5532  0693                     __end_of___wmul:	
  5533                           
  5534                           	psect	text10
  5535  051C                     __ptext10:	
  5536 ;; *************** function ___llmod *****************
  5537 ;; Defined at:
  5538 ;;		line 5 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/llmod.c"
  5539 ;; Parameters:    Size  Location     Type
  5540 ;;  divisor         4   25[BANK0 ] unsigned long 
  5541 ;;  dividend        4   29[BANK0 ] unsigned long 
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;  counter         1    4[COMMON] unsigned char 
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  4   25[BANK0 ] unsigned long 
  5546 ;; Registers used:
  5547 ;;		wreg, status,2, status,0
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5553 ;;      Params:         0       8       0       0       0       0       0       0
  5554 ;;      Locals:         1       0       0       0       0       0       0       0
  5555 ;;      Temps:          1       0       0       0       0       0       0       0
  5556 ;;      Totals:         2       8       0       0       0       0       0       0
  5557 ;;Total ram usage:       10 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    4
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		_printf
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           
  5568                           ;psect for function ___llmod
  5569  051C                     ___llmod:	
  5570                           
  5571                           ;incstack = 0
  5572                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5573  051C  0020               	movlb	0	; select bank0
  5574  051D  083C               	movf	___llmod@divisor+3,w
  5575  051E  043B               	iorwf	___llmod@divisor+2,w
  5576  051F  043A               	iorwf	___llmod@divisor+1,w
  5577  0520  0439               	iorwf	___llmod@divisor,w
  5578  0521  1903               	skipnz
  5579  0522  2D56               	goto	l2112
  5580  0523  01FB               	clrf	___llmod@counter
  5581  0524  0AFB               	incf	___llmod@counter,f
  5582  0525                     l2102:	
  5583  0525  1BBC               	btfsc	___llmod@divisor+3,7
  5584  0526  2D33               	goto	l2104
  5585  0527  3001               	movlw	1
  5586  0528                     u1915:	
  5587  0528  35B9               	lslf	___llmod@divisor,f
  5588  0529  0DBA               	rlf	___llmod@divisor+1,f
  5589  052A  0DBB               	rlf	___llmod@divisor+2,f
  5590  052B  0DBC               	rlf	___llmod@divisor+3,f
  5591  052C  0B89               	decfsz	9,f
  5592  052D  2D28               	goto	u1915
  5593  052E  3001               	movlw	1
  5594  052F  00FA               	movwf	??___llmod
  5595  0530  087A               	movf	??___llmod,w
  5596  0531  07FB               	addwf	___llmod@counter,f
  5597  0532  2D25               	goto	l2102
  5598  0533                     l2104:	
  5599  0533  083C               	movf	___llmod@divisor+3,w
  5600  0534  0240               	subwf	___llmod@dividend+3,w
  5601  0535  1D03               	skipz
  5602  0536  2D41               	goto	u1935
  5603  0537  083B               	movf	___llmod@divisor+2,w
  5604  0538  023F               	subwf	___llmod@dividend+2,w
  5605  0539  1D03               	skipz
  5606  053A  2D41               	goto	u1935
  5607  053B  083A               	movf	___llmod@divisor+1,w
  5608  053C  023E               	subwf	___llmod@dividend+1,w
  5609  053D  1D03               	skipz
  5610  053E  2D41               	goto	u1935
  5611  053F  0839               	movf	___llmod@divisor,w
  5612  0540  023D               	subwf	___llmod@dividend,w
  5613  0541                     u1935:	
  5614  0541  1C03               	skipc
  5615  0542  2D4B               	goto	l2108
  5616  0543  0839               	movf	___llmod@divisor,w
  5617  0544  02BD               	subwf	___llmod@dividend,f
  5618  0545  083A               	movf	___llmod@divisor+1,w
  5619  0546  3BBE               	subwfb	___llmod@dividend+1,f
  5620  0547  083B               	movf	___llmod@divisor+2,w
  5621  0548  3BBF               	subwfb	___llmod@dividend+2,f
  5622  0549  083C               	movf	___llmod@divisor+3,w
  5623  054A  3BC0               	subwfb	___llmod@dividend+3,f
  5624  054B                     l2108:	
  5625  054B  3001               	movlw	1
  5626  054C                     u1945:	
  5627  054C  36BC               	lsrf	___llmod@divisor+3,f
  5628  054D  0CBB               	rrf	___llmod@divisor+2,f
  5629  054E  0CBA               	rrf	___llmod@divisor+1,f
  5630  054F  0CB9               	rrf	___llmod@divisor,f
  5631  0550  0B89               	decfsz	9,f
  5632  0551  2D4C               	goto	u1945
  5633  0552  3001               	movlw	1
  5634  0553  02FB               	subwf	___llmod@counter,f
  5635  0554  1D03               	btfss	3,2
  5636  0555  2D33               	goto	l2104
  5637  0556                     l2112:	
  5638  0556  0840               	movf	___llmod@dividend+3,w
  5639  0557  00BC               	movwf	?___llmod+3
  5640  0558  083F               	movf	___llmod@dividend+2,w
  5641  0559  00BB               	movwf	?___llmod+2
  5642  055A  083E               	movf	___llmod@dividend+1,w
  5643  055B  00BA               	movwf	?___llmod+1
  5644  055C  083D               	movf	___llmod@dividend,w
  5645  055D  00B9               	movwf	?___llmod
  5646  055E  0008               	return
  5647  055F                     __end_of___llmod:	
  5648                           
  5649                           	psect	text11
  5650  04C9                     __ptext11:	
  5651 ;; *************** function ___lldiv *****************
  5652 ;; Defined at:
  5653 ;;		line 5 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/__lldiv.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  divisor         4   12[BANK0 ] unsigned long 
  5656 ;;  dividend        4   16[BANK0 ] unsigned long 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  quotient        4   20[BANK0 ] unsigned long 
  5659 ;;  counter         1   24[BANK0 ] unsigned char 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  4   12[BANK0 ] unsigned long 
  5662 ;; Registers used:
  5663 ;;		wreg, status,2, status,0
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5669 ;;      Params:         0       8       0       0       0       0       0       0
  5670 ;;      Locals:         0       5       0       0       0       0       0       0
  5671 ;;      Temps:          1       0       0       0       0       0       0       0
  5672 ;;      Totals:         1      13       0       0       0       0       0       0
  5673 ;;Total ram usage:       14 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    4
  5676 ;; This function calls:
  5677 ;;		Nothing
  5678 ;; This function is called by:
  5679 ;;		_setCurrent
  5680 ;;		_printf
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           
  5685                           ;psect for function ___lldiv
  5686  04C9                     ___lldiv:	
  5687                           
  5688                           ;incstack = 0
  5689                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5690  04C9  3000               	movlw	0
  5691  04CA  0020               	movlb	0	; select bank0
  5692  04CB  00B7               	movwf	___lldiv@quotient+3
  5693  04CC  3000               	movlw	0
  5694  04CD  00B6               	movwf	___lldiv@quotient+2
  5695  04CE  3000               	movlw	0
  5696  04CF  00B5               	movwf	___lldiv@quotient+1
  5697  04D0  3000               	movlw	0
  5698  04D1  00B4               	movwf	___lldiv@quotient
  5699  04D2  082F               	movf	___lldiv@divisor+3,w
  5700  04D3  042E               	iorwf	___lldiv@divisor+2,w
  5701  04D4  042D               	iorwf	___lldiv@divisor+1,w
  5702  04D5  042C               	iorwf	___lldiv@divisor,w
  5703  04D6  1903               	skipnz
  5704  04D7  2D13               	goto	l2052
  5705  04D8  01B8               	clrf	___lldiv@counter
  5706  04D9  0AB8               	incf	___lldiv@counter,f
  5707  04DA                     l2038:	
  5708  04DA  1BAF               	btfsc	___lldiv@divisor+3,7
  5709  04DB  2CE8               	goto	l2040
  5710  04DC  3001               	movlw	1
  5711  04DD                     u1745:	
  5712  04DD  35AC               	lslf	___lldiv@divisor,f
  5713  04DE  0DAD               	rlf	___lldiv@divisor+1,f
  5714  04DF  0DAE               	rlf	___lldiv@divisor+2,f
  5715  04E0  0DAF               	rlf	___lldiv@divisor+3,f
  5716  04E1  0B89               	decfsz	9,f
  5717  04E2  2CDD               	goto	u1745
  5718  04E3  3001               	movlw	1
  5719  04E4  00F9               	movwf	??___lldiv
  5720  04E5  0879               	movf	??___lldiv,w
  5721  04E6  07B8               	addwf	___lldiv@counter,f
  5722  04E7  2CDA               	goto	l2038
  5723  04E8                     l2040:	
  5724  04E8  3001               	movlw	1
  5725  04E9                     u1765:	
  5726  04E9  35B4               	lslf	___lldiv@quotient,f
  5727  04EA  0DB5               	rlf	___lldiv@quotient+1,f
  5728  04EB  0DB6               	rlf	___lldiv@quotient+2,f
  5729  04EC  0DB7               	rlf	___lldiv@quotient+3,f
  5730  04ED  0B89               	decfsz	9,f
  5731  04EE  2CE9               	goto	u1765
  5732  04EF  082F               	movf	___lldiv@divisor+3,w
  5733  04F0  0233               	subwf	___lldiv@dividend+3,w
  5734  04F1  1D03               	skipz
  5735  04F2  2CFD               	goto	u1775
  5736  04F3  082E               	movf	___lldiv@divisor+2,w
  5737  04F4  0232               	subwf	___lldiv@dividend+2,w
  5738  04F5  1D03               	skipz
  5739  04F6  2CFD               	goto	u1775
  5740  04F7  082D               	movf	___lldiv@divisor+1,w
  5741  04F8  0231               	subwf	___lldiv@dividend+1,w
  5742  04F9  1D03               	skipz
  5743  04FA  2CFD               	goto	u1775
  5744  04FB  082C               	movf	___lldiv@divisor,w
  5745  04FC  0230               	subwf	___lldiv@dividend,w
  5746  04FD                     u1775:	
  5747  04FD  1C03               	skipc
  5748  04FE  2D08               	goto	l2048
  5749  04FF  082C               	movf	___lldiv@divisor,w
  5750  0500  02B0               	subwf	___lldiv@dividend,f
  5751  0501  082D               	movf	___lldiv@divisor+1,w
  5752  0502  3BB1               	subwfb	___lldiv@dividend+1,f
  5753  0503  082E               	movf	___lldiv@divisor+2,w
  5754  0504  3BB2               	subwfb	___lldiv@dividend+2,f
  5755  0505  082F               	movf	___lldiv@divisor+3,w
  5756  0506  3BB3               	subwfb	___lldiv@dividend+3,f
  5757  0507  1434               	bsf	___lldiv@quotient,0
  5758  0508                     l2048:	
  5759  0508  3001               	movlw	1
  5760  0509                     u1785:	
  5761  0509  36AF               	lsrf	___lldiv@divisor+3,f
  5762  050A  0CAE               	rrf	___lldiv@divisor+2,f
  5763  050B  0CAD               	rrf	___lldiv@divisor+1,f
  5764  050C  0CAC               	rrf	___lldiv@divisor,f
  5765  050D  0B89               	decfsz	9,f
  5766  050E  2D09               	goto	u1785
  5767  050F  3001               	movlw	1
  5768  0510  02B8               	subwf	___lldiv@counter,f
  5769  0511  1D03               	btfss	3,2
  5770  0512  2CE8               	goto	l2040
  5771  0513                     l2052:	
  5772  0513  0837               	movf	___lldiv@quotient+3,w
  5773  0514  00AF               	movwf	?___lldiv+3
  5774  0515  0836               	movf	___lldiv@quotient+2,w
  5775  0516  00AE               	movwf	?___lldiv+2
  5776  0517  0835               	movf	___lldiv@quotient+1,w
  5777  0518  00AD               	movwf	?___lldiv+1
  5778  0519  0834               	movf	___lldiv@quotient,w
  5779  051A  00AC               	movwf	?___lldiv
  5780  051B  0008               	return
  5781  051C                     __end_of___lldiv:	
  5782                           
  5783                           	psect	text12
  5784  05BF                     __ptext12:	
  5785 ;; *************** function _battery_voltage *****************
  5786 ;; Defined at:
  5787 ;;		line 56 in file "main.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;		None
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;		None
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  2   14[BANK0 ] unsigned int 
  5794 ;; Registers used:
  5795 ;;		wreg, status,2, status,0, pclath, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5801 ;;      Params:         0       2       0       0       0       0       0       0
  5802 ;;      Locals:         0       0       0       0       0       0       0       0
  5803 ;;      Temps:          0       0       0       0       0       0       0       0
  5804 ;;      Totals:         0       2       0       0       0       0       0       0
  5805 ;;Total ram usage:        2 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    5
  5808 ;; This function calls:
  5809 ;;		___aldiv
  5810 ;; This function is called by:
  5811 ;;		_process_remote_command
  5812 ;;		_main
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           
  5817                           ;psect for function _battery_voltage
  5818  05BF                     _battery_voltage:	
  5819                           
  5820                           ;main.c: 58: FVRCON = 0b10000001;
  5821                           
  5822                           ;incstack = 0
  5823                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  5824  05BF  3081               	movlw	129
  5825  05C0  0022               	movlb	2	; select bank2
  5826  05C1  0097               	movwf	23	;volatile
  5827                           
  5828                           ;main.c: 59: ADCON0 = 0b01111101;
  5829  05C2  307D               	movlw	125
  5830  05C3  0021               	movlb	1	; select bank1
  5831  05C4  009D               	movwf	29	;volatile
  5832                           
  5833                           ;main.c: 60: ADCON1 = 0b10010000;
  5834  05C5  3090               	movlw	144
  5835  05C6  009E               	movwf	30	;volatile
  5836  05C7                     l400:	
  5837                           ;main.c: 61: while(!FVRCONbits.FVRRDY){ }
  5838                           
  5839  05C7  0022               	movlb	2	; select bank2
  5840  05C8  1F17               	btfss	23,6	;volatile
  5841  05C9  2DC7               	goto	l400
  5842                           
  5843                           ;main.c: 62: __nop();
  5844  05CA  0000               	nop
  5845                           
  5846                           ;main.c: 63: __nop();
  5847  05CB  0000               	nop
  5848                           
  5849                           ;main.c: 64: __nop();
  5850  05CC  0000               	nop
  5851                           
  5852                           ;main.c: 65: __nop();
  5853  05CD  0000               	nop
  5854                           
  5855                           ;main.c: 66: __nop();
  5856  05CE  0000               	nop
  5857                           
  5858                           ;main.c: 67: ADCON0bits.GO_nDONE = 1;
  5859  05CF  0021               	movlb	1	; select bank1
  5860  05D0  149D               	bsf	29,1	;volatile
  5861  05D1                     l403:	
  5862                           ;main.c: 68: while(ADCON0bits.GO_nDONE){ }
  5863                           
  5864  05D1  189D               	btfsc	29,1	;volatile
  5865  05D2  2DD1               	goto	l403
  5866                           
  5867                           ;main.c: 69: ADCON0bits.ADON = 0;
  5868  05D3  101D               	bcf	29,0	;volatile
  5869                           
  5870                           ;main.c: 74: return 1047552L / ADRES;
  5871  05D4  081B               	movf	27,w	;volatile
  5872  05D5  0020               	movlb	0	; select bank0
  5873  05D6  00A0               	movwf	___aldiv@divisor
  5874  05D7  0021               	movlb	1	; select bank1
  5875  05D8  081C               	movf	28,w	;volatile
  5876  05D9  0020               	movlb	0	; select bank0
  5877  05DA  00A1               	movwf	___aldiv@divisor+1
  5878  05DB  01A2               	clrf	___aldiv@divisor+2
  5879  05DC  01A3               	clrf	___aldiv@divisor+3
  5880  05DD  3000               	movlw	0
  5881  05DE  00A7               	movwf	___aldiv@dividend+3
  5882  05DF  300F               	movlw	15
  5883  05E0  00A6               	movwf	___aldiv@dividend+2
  5884  05E1  30FC               	movlw	252
  5885  05E2  00A5               	movwf	___aldiv@dividend+1
  5886  05E3  3000               	movlw	0
  5887  05E4  00A4               	movwf	___aldiv@dividend
  5888  05E5  3183  2301         	fcall	___aldiv
  5889  05E7  0020               	movlb	0	; select bank0
  5890  05E8  0821               	movf	?___aldiv+1,w
  5891  05E9  00AF               	movwf	?_battery_voltage+1
  5892  05EA  0820               	movf	?___aldiv,w
  5893  05EB  00AE               	movwf	?_battery_voltage
  5894  05EC  0008               	return
  5895  05ED                     __end_of_battery_voltage:	
  5896                           
  5897                           	psect	text13
  5898  0301                     __ptext13:	
  5899 ;; *************** function ___aldiv *****************
  5900 ;; Defined at:
  5901 ;;		line 5 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/aldiv.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;  divisor         4    0[BANK0 ] long 
  5904 ;;  dividend        4    4[BANK0 ] long 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  quotient        4   10[BANK0 ] long 
  5907 ;;  sign            1    9[BANK0 ] unsigned char 
  5908 ;;  counter         1    8[BANK0 ] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  4    0[BANK0 ] long 
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5918 ;;      Params:         0       8       0       0       0       0       0       0
  5919 ;;      Locals:         0       6       0       0       0       0       0       0
  5920 ;;      Temps:          1       0       0       0       0       0       0       0
  5921 ;;      Totals:         1      14       0       0       0       0       0       0
  5922 ;;Total ram usage:       15 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    4
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_battery_voltage
  5929 ;;		_setCurrent
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           
  5934                           ;psect for function ___aldiv
  5935  0301                     ___aldiv:	
  5936                           
  5937                           ;incstack = 0
  5938                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5939  0301  0020               	movlb	0	; select bank0
  5940  0302  01A9               	clrf	___aldiv@sign
  5941  0303  1FA3               	btfss	___aldiv@divisor+3,7
  5942  0304  2B12               	goto	l608
  5943  0305  09A0               	comf	___aldiv@divisor,f
  5944  0306  09A1               	comf	___aldiv@divisor+1,f
  5945  0307  09A2               	comf	___aldiv@divisor+2,f
  5946  0308  09A3               	comf	___aldiv@divisor+3,f
  5947  0309  0AA0               	incf	___aldiv@divisor,f
  5948  030A  1903               	skipnz
  5949  030B  0AA1               	incf	___aldiv@divisor+1,f
  5950  030C  1903               	skipnz
  5951  030D  0AA2               	incf	___aldiv@divisor+2,f
  5952  030E  1903               	skipnz
  5953  030F  0AA3               	incf	___aldiv@divisor+3,f
  5954  0310  01A9               	clrf	___aldiv@sign
  5955  0311  0AA9               	incf	___aldiv@sign,f
  5956  0312                     l608:	
  5957  0312  1FA7               	btfss	___aldiv@dividend+3,7
  5958  0313  2B23               	goto	l2066
  5959  0314  09A4               	comf	___aldiv@dividend,f
  5960  0315  09A5               	comf	___aldiv@dividend+1,f
  5961  0316  09A6               	comf	___aldiv@dividend+2,f
  5962  0317  09A7               	comf	___aldiv@dividend+3,f
  5963  0318  0AA4               	incf	___aldiv@dividend,f
  5964  0319  1903               	skipnz
  5965  031A  0AA5               	incf	___aldiv@dividend+1,f
  5966  031B  1903               	skipnz
  5967  031C  0AA6               	incf	___aldiv@dividend+2,f
  5968  031D  1903               	skipnz
  5969  031E  0AA7               	incf	___aldiv@dividend+3,f
  5970  031F  3001               	movlw	1
  5971  0320  00F9               	movwf	??___aldiv
  5972  0321  0879               	movf	??___aldiv,w
  5973  0322  06A9               	xorwf	___aldiv@sign,f
  5974  0323                     l2066:	
  5975  0323  3000               	movlw	0
  5976  0324  00AD               	movwf	___aldiv@quotient+3
  5977  0325  3000               	movlw	0
  5978  0326  00AC               	movwf	___aldiv@quotient+2
  5979  0327  3000               	movlw	0
  5980  0328  00AB               	movwf	___aldiv@quotient+1
  5981  0329  3000               	movlw	0
  5982  032A  00AA               	movwf	___aldiv@quotient
  5983  032B  0823               	movf	___aldiv@divisor+3,w
  5984  032C  0422               	iorwf	___aldiv@divisor+2,w
  5985  032D  0421               	iorwf	___aldiv@divisor+1,w
  5986  032E  0420               	iorwf	___aldiv@divisor,w
  5987  032F  1903               	skipnz
  5988  0330  2B6C               	goto	l2088
  5989  0331  01A8               	clrf	___aldiv@counter
  5990  0332  0AA8               	incf	___aldiv@counter,f
  5991  0333                     l2074:	
  5992  0333  1BA3               	btfsc	___aldiv@divisor+3,7
  5993  0334  2B41               	goto	l2076
  5994  0335  3001               	movlw	1
  5995  0336                     u1835:	
  5996  0336  35A0               	lslf	___aldiv@divisor,f
  5997  0337  0DA1               	rlf	___aldiv@divisor+1,f
  5998  0338  0DA2               	rlf	___aldiv@divisor+2,f
  5999  0339  0DA3               	rlf	___aldiv@divisor+3,f
  6000  033A  0B89               	decfsz	9,f
  6001  033B  2B36               	goto	u1835
  6002  033C  3001               	movlw	1
  6003  033D  00F9               	movwf	??___aldiv
  6004  033E  0879               	movf	??___aldiv,w
  6005  033F  07A8               	addwf	___aldiv@counter,f
  6006  0340  2B33               	goto	l2074
  6007  0341                     l2076:	
  6008  0341  3001               	movlw	1
  6009  0342                     u1855:	
  6010  0342  35AA               	lslf	___aldiv@quotient,f
  6011  0343  0DAB               	rlf	___aldiv@quotient+1,f
  6012  0344  0DAC               	rlf	___aldiv@quotient+2,f
  6013  0345  0DAD               	rlf	___aldiv@quotient+3,f
  6014  0346  0B89               	decfsz	9,f
  6015  0347  2B42               	goto	u1855
  6016  0348  0823               	movf	___aldiv@divisor+3,w
  6017  0349  0227               	subwf	___aldiv@dividend+3,w
  6018  034A  1D03               	skipz
  6019  034B  2B56               	goto	u1865
  6020  034C  0822               	movf	___aldiv@divisor+2,w
  6021  034D  0226               	subwf	___aldiv@dividend+2,w
  6022  034E  1D03               	skipz
  6023  034F  2B56               	goto	u1865
  6024  0350  0821               	movf	___aldiv@divisor+1,w
  6025  0351  0225               	subwf	___aldiv@dividend+1,w
  6026  0352  1D03               	skipz
  6027  0353  2B56               	goto	u1865
  6028  0354  0820               	movf	___aldiv@divisor,w
  6029  0355  0224               	subwf	___aldiv@dividend,w
  6030  0356                     u1865:	
  6031  0356  1C03               	skipc
  6032  0357  2B61               	goto	l2084
  6033  0358  0820               	movf	___aldiv@divisor,w
  6034  0359  02A4               	subwf	___aldiv@dividend,f
  6035  035A  0821               	movf	___aldiv@divisor+1,w
  6036  035B  3BA5               	subwfb	___aldiv@dividend+1,f
  6037  035C  0822               	movf	___aldiv@divisor+2,w
  6038  035D  3BA6               	subwfb	___aldiv@dividend+2,f
  6039  035E  0823               	movf	___aldiv@divisor+3,w
  6040  035F  3BA7               	subwfb	___aldiv@dividend+3,f
  6041  0360  142A               	bsf	___aldiv@quotient,0
  6042  0361                     l2084:	
  6043  0361  3001               	movlw	1
  6044  0362                     u1875:	
  6045  0362  36A3               	lsrf	___aldiv@divisor+3,f
  6046  0363  0CA2               	rrf	___aldiv@divisor+2,f
  6047  0364  0CA1               	rrf	___aldiv@divisor+1,f
  6048  0365  0CA0               	rrf	___aldiv@divisor,f
  6049  0366  0B89               	decfsz	9,f
  6050  0367  2B62               	goto	u1875
  6051  0368  3001               	movlw	1
  6052  0369  02A8               	subwf	___aldiv@counter,f
  6053  036A  1D03               	btfss	3,2
  6054  036B  2B41               	goto	l2076
  6055  036C                     l2088:	
  6056  036C  0829               	movf	___aldiv@sign,w
  6057  036D  1903               	btfsc	3,2
  6058  036E  2B7A               	goto	l2092
  6059  036F  09AA               	comf	___aldiv@quotient,f
  6060  0370  09AB               	comf	___aldiv@quotient+1,f
  6061  0371  09AC               	comf	___aldiv@quotient+2,f
  6062  0372  09AD               	comf	___aldiv@quotient+3,f
  6063  0373  0AAA               	incf	___aldiv@quotient,f
  6064  0374  1903               	skipnz
  6065  0375  0AAB               	incf	___aldiv@quotient+1,f
  6066  0376  1903               	skipnz
  6067  0377  0AAC               	incf	___aldiv@quotient+2,f
  6068  0378  1903               	skipnz
  6069  0379  0AAD               	incf	___aldiv@quotient+3,f
  6070  037A                     l2092:	
  6071  037A  082D               	movf	___aldiv@quotient+3,w
  6072  037B  00A3               	movwf	?___aldiv+3
  6073  037C  082C               	movf	___aldiv@quotient+2,w
  6074  037D  00A2               	movwf	?___aldiv+2
  6075  037E  082B               	movf	___aldiv@quotient+1,w
  6076  037F  00A1               	movwf	?___aldiv+1
  6077  0380  082A               	movf	___aldiv@quotient,w
  6078  0381  00A0               	movwf	?___aldiv
  6079  0382  0008               	return
  6080  0383                     __end_of___aldiv:	
  6081                           
  6082                           	psect	text14
  6083  0659                     __ptext14:	
  6084 ;; *************** function _SYSTEM_Initialize *****************
  6085 ;; Defined at:
  6086 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;		None
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;		None
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      void 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2, status,0, pclath, cstack
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6100 ;;      Params:         0       0       0       0       0       0       0       0
  6101 ;;      Locals:         0       0       0       0       0       0       0       0
  6102 ;;      Temps:          0       0       0       0       0       0       0       0
  6103 ;;      Totals:         0       0       0       0       0       0       0       0
  6104 ;;Total ram usage:        0 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    6
  6107 ;; This function calls:
  6108 ;;		_DAC_Initialize
  6109 ;;		_EUSART_Initialize
  6110 ;;		_EXT_INT_Initialize
  6111 ;;		_OPA1_Initialize
  6112 ;;		_OPA2_Initialize
  6113 ;;		_OSCILLATOR_Initialize
  6114 ;;		_PIN_MANAGER_Initialize
  6115 ;;		_TMR0_Initialize
  6116 ;;		_TMR2_Initialize
  6117 ;;		_WDT_Initialize
  6118 ;; This function is called by:
  6119 ;;		_main
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           
  6124                           ;psect for function _SYSTEM_Initialize
  6125  0659                     _SYSTEM_Initialize:	
  6126                           
  6127                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  6128                           
  6129                           ;incstack = 0
  6130                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6131  0659  3185  258F  3186   	fcall	_PIN_MANAGER_Initialize
  6132                           
  6133                           ;mcc.c: 54: OSCILLATOR_Initialize();
  6134  065C  3187  2791  3186   	fcall	_OSCILLATOR_Initialize
  6135                           
  6136                           ;mcc.c: 55: WDT_Initialize();
  6137  065F  3187  27C6  3186   	fcall	_WDT_Initialize
  6138                           
  6139                           ;mcc.c: 56: DAC_Initialize();
  6140  0662  3187  27B7  3186   	fcall	_DAC_Initialize
  6141                           
  6142                           ;mcc.c: 57: OPA1_Initialize();
  6143  0665  3187  27CE  3186   	fcall	_OPA1_Initialize
  6144                           
  6145                           ;mcc.c: 58: OPA2_Initialize();
  6146  0668  3187  27CA  3186   	fcall	_OPA2_Initialize
  6147                           
  6148                           ;mcc.c: 59: TMR2_Initialize();
  6149  066B  3187  2789  3186   	fcall	_TMR2_Initialize
  6150                           
  6151                           ;mcc.c: 60: EXT_INT_Initialize();
  6152  066E  3187  2760  3186   	fcall	_EXT_INT_Initialize
  6153                           
  6154                           ;mcc.c: 61: TMR0_Initialize();
  6155  0671  3187  2777  3186   	fcall	_TMR0_Initialize
  6156                           
  6157                           ;mcc.c: 62: EUSART_Initialize();
  6158  0674  3186  2615         	fcall	_EUSART_Initialize
  6159  0676  0008               	return
  6160  0677                     __end_of_SYSTEM_Initialize:	
  6161                           
  6162                           	psect	text15
  6163  07C6                     __ptext15:	
  6164 ;; *************** function _WDT_Initialize *****************
  6165 ;; Defined at:
  6166 ;;		line 77 in file "mcc_generated_files/mcc.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      void 
  6173 ;; Registers used:
  6174 ;;		wreg
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6180 ;;      Params:         0       0       0       0       0       0       0       0
  6181 ;;      Locals:         0       0       0       0       0       0       0       0
  6182 ;;      Temps:          0       0       0       0       0       0       0       0
  6183 ;;      Totals:         0       0       0       0       0       0       0       0
  6184 ;;Total ram usage:        0 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    4
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_SYSTEM_Initialize
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           
  6195                           ;psect for function _WDT_Initialize
  6196  07C6                     _WDT_Initialize:	
  6197                           
  6198                           ;mcc.c: 80: WDTCON = 0x16;
  6199                           
  6200                           ;incstack = 0
  6201                           ; Regs used in _WDT_Initialize: [wreg]
  6202  07C6  3016               	movlw	22
  6203  07C7  0021               	movlb	1	; select bank1
  6204  07C8  0097               	movwf	23	;volatile
  6205  07C9  0008               	return
  6206  07CA                     __end_of_WDT_Initialize:	
  6207                           
  6208                           	psect	text16
  6209  0789                     __ptext16:	
  6210 ;; *************** function _TMR2_Initialize *****************
  6211 ;; Defined at:
  6212 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;		None
  6215 ;; Auto vars:     Size  Location     Type
  6216 ;;		None
  6217 ;; Return value:  Size  Location     Type
  6218 ;;                  1    wreg      void 
  6219 ;; Registers used:
  6220 ;;		wreg, status,2
  6221 ;; Tracked objects:
  6222 ;;		On entry : 0/0
  6223 ;;		On exit  : 0/0
  6224 ;;		Unchanged: 0/0
  6225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6226 ;;      Params:         0       0       0       0       0       0       0       0
  6227 ;;      Locals:         0       0       0       0       0       0       0       0
  6228 ;;      Temps:          0       0       0       0       0       0       0       0
  6229 ;;      Totals:         0       0       0       0       0       0       0       0
  6230 ;;Total ram usage:        0 bytes
  6231 ;; Hardware stack levels used:    1
  6232 ;; Hardware stack levels required when called:    4
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_SYSTEM_Initialize
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           
  6241                           ;psect for function _TMR2_Initialize
  6242  0789                     _TMR2_Initialize:	
  6243                           
  6244                           ;tmr2.c: 67: PR2 = 0x7F;
  6245                           
  6246                           ;incstack = 0
  6247                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6248  0789  307F               	movlw	127
  6249  078A  0020               	movlb	0	; select bank0
  6250  078B  009B               	movwf	27	;volatile
  6251                           
  6252                           ;tmr2.c: 70: TMR2 = 0x00;
  6253  078C  019A               	clrf	26	;volatile
  6254                           
  6255                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
  6256  078D  1091               	bcf	17,1	;volatile
  6257                           
  6258                           ;tmr2.c: 76: T2CON = 0x04;
  6259  078E  3004               	movlw	4
  6260  078F  009C               	movwf	28	;volatile
  6261  0790  0008               	return
  6262  0791                     __end_of_TMR2_Initialize:	
  6263                           
  6264                           	psect	text17
  6265  0777                     __ptext17:	
  6266 ;; *************** function _TMR0_Initialize *****************
  6267 ;; Defined at:
  6268 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6282 ;;      Params:         0       0       0       0       0       0       0       0
  6283 ;;      Locals:         0       0       0       0       0       0       0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0       0
  6285 ;;      Totals:         0       0       0       0       0       0       0       0
  6286 ;;Total ram usage:        0 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    4
  6289 ;; This function calls:
  6290 ;;		Nothing
  6291 ;; This function is called by:
  6292 ;;		_SYSTEM_Initialize
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           
  6297                           ;psect for function _TMR0_Initialize
  6298  0777                     _TMR0_Initialize:	
  6299                           
  6300                           ;tmr0.c: 68: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 & 0x3F));
  6301                           
  6302                           ;incstack = 0
  6303                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  6304  0777  0021               	movlb	1	; select bank1
  6305  0778  0815               	movf	21,w	;volatile
  6306  0779  39C0               	andlw	192
  6307  077A  3815               	iorlw	21
  6308  077B  0095               	movwf	21	;volatile
  6309                           
  6310                           ;tmr0.c: 71: TMR0 = 0x00;
  6311  077C  0020               	movlb	0	; select bank0
  6312  077D  0195               	clrf	21	;volatile
  6313                           
  6314                           ;tmr0.c: 74: timer0ReloadVal= 0;
  6315  077E  01F0               	clrf	_timer0ReloadVal	;volatile
  6316                           
  6317                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  6318  077F  110B               	bcf	11,2	;volatile
  6319  0780  0008               	return
  6320  0781                     __end_of_TMR0_Initialize:	
  6321                           
  6322                           	psect	text18
  6323  058F                     __ptext18:	
  6324 ;; *************** function _PIN_MANAGER_Initialize *****************
  6325 ;; Defined at:
  6326 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;		None
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  1    wreg      void 
  6333 ;; Registers used:
  6334 ;;		wreg, status,2
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6340 ;;      Params:         0       0       0       0       0       0       0       0
  6341 ;;      Locals:         0       0       0       0       0       0       0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0       0
  6343 ;;      Totals:         0       0       0       0       0       0       0       0
  6344 ;;Total ram usage:        0 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    4
  6347 ;; This function calls:
  6348 ;;		Nothing
  6349 ;; This function is called by:
  6350 ;;		_SYSTEM_Initialize
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353                           
  6354                           
  6355                           ;psect for function _PIN_MANAGER_Initialize
  6356  058F                     _PIN_MANAGER_Initialize:	
  6357                           
  6358                           ;pin_manager.c: 60: LATA = 0x00;
  6359                           
  6360                           ;incstack = 0
  6361                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6362  058F  0022               	movlb	2	; select bank2
  6363  0590  018C               	clrf	12	;volatile
  6364                           
  6365                           ;pin_manager.c: 61: LATB = 0x00;
  6366  0591  018D               	clrf	13	;volatile
  6367                           
  6368                           ;pin_manager.c: 62: LATC = 0x00;
  6369  0592  018E               	clrf	14	;volatile
  6370                           
  6371                           ;pin_manager.c: 67: TRISA = 0x04;
  6372  0593  3004               	movlw	4
  6373  0594  0021               	movlb	1	; select bank1
  6374  0595  008C               	movwf	12	;volatile
  6375                           
  6376                           ;pin_manager.c: 68: TRISB = 0x20;
  6377  0596  3020               	movlw	32
  6378  0597  008D               	movwf	13	;volatile
  6379                           
  6380                           ;pin_manager.c: 69: TRISC = 0x00;
  6381  0598  018E               	clrf	14	;volatile
  6382                           
  6383                           ;pin_manager.c: 74: ANSELC = 0x00;
  6384  0599  0023               	movlb	3	; select bank3
  6385  059A  018E               	clrf	14	;volatile
  6386                           
  6387                           ;pin_manager.c: 75: ANSELB = 0x00;
  6388  059B  018D               	clrf	13	;volatile
  6389                           
  6390                           ;pin_manager.c: 76: ANSELA = 0x00;
  6391  059C  018C               	clrf	12	;volatile
  6392                           
  6393                           ;pin_manager.c: 81: WPUB = 0x00;
  6394  059D  0024               	movlb	4	; select bank4
  6395  059E  018D               	clrf	13	;volatile
  6396                           
  6397                           ;pin_manager.c: 82: WPUA = 0x00;
  6398  059F  018C               	clrf	12	;volatile
  6399                           
  6400                           ;pin_manager.c: 83: WPUC = 0x00;
  6401  05A0  018E               	clrf	14	;volatile
  6402                           
  6403                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 0;
  6404  05A1  0021               	movlb	1	; select bank1
  6405  05A2  1395               	bcf	21,7	;volatile
  6406                           
  6407                           ;pin_manager.c: 89: ODCONA = 0x00;
  6408  05A3  0025               	movlb	5	; select bank5
  6409  05A4  018C               	clrf	12	;volatile
  6410                           
  6411                           ;pin_manager.c: 90: ODCONB = 0x00;
  6412  05A5  018D               	clrf	13	;volatile
  6413                           
  6414                           ;pin_manager.c: 91: ODCONC = 0x00;
  6415  05A6  018E               	clrf	14	;volatile
  6416                           
  6417                           ;pin_manager.c: 96: SLRCONA = 0x37;
  6418  05A7  3037               	movlw	55
  6419  05A8  0026               	movlb	6	; select bank6
  6420  05A9  008C               	movwf	12	;volatile
  6421                           
  6422                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  6423  05AA  30F0               	movlw	240
  6424  05AB  008D               	movwf	13	;volatile
  6425                           
  6426                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  6427  05AC  30FF               	movlw	255
  6428  05AD  008E               	movwf	14	;volatile
  6429                           
  6430                           ;pin_manager.c: 103: INLVLA = 0x3F;
  6431  05AE  303F               	movlw	63
  6432  05AF  0027               	movlb	7	; select bank7
  6433  05B0  008C               	movwf	12	;volatile
  6434                           
  6435                           ;pin_manager.c: 104: INLVLB = 0xF0;
  6436  05B1  30F0               	movlw	240
  6437  05B2  008D               	movwf	13	;volatile
  6438                           
  6439                           ;pin_manager.c: 105: INLVLC = 0xFF;
  6440  05B3  30FF               	movlw	255
  6441  05B4  008E               	movwf	14	;volatile
  6442                           
  6443                           ;pin_manager.c: 113: INTCONbits.IOCIE = 1;
  6444  05B5  158B               	bsf	11,3	;volatile
  6445                           
  6446                           ;pin_manager.c: 116: INTPPS = 0x02;
  6447  05B6  3002               	movlw	2
  6448  05B7  003C               	movlb	28	; select bank28
  6449  05B8  0090               	movwf	16	;volatile
  6450                           
  6451                           ;pin_manager.c: 117: RXPPS = 0x0D;
  6452  05B9  300D               	movlw	13
  6453  05BA  00A4               	movwf	36	;volatile
  6454                           
  6455                           ;pin_manager.c: 118: RB7PPS = 0x14;
  6456  05BB  3014               	movlw	20
  6457  05BC  003D               	movlb	29	; select bank29
  6458  05BD  009F               	movwf	31	;volatile
  6459  05BE  0008               	return
  6460  05BF                     __end_of_PIN_MANAGER_Initialize:	
  6461                           
  6462                           	psect	text19
  6463  0791                     __ptext19:	
  6464 ;; *************** function _OSCILLATOR_Initialize *****************
  6465 ;; Defined at:
  6466 ;;		line 65 in file "mcc_generated_files/mcc.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;                  1    wreg      void 
  6473 ;; Registers used:
  6474 ;;		wreg, status,2
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6480 ;;      Params:         0       0       0       0       0       0       0       0
  6481 ;;      Locals:         0       0       0       0       0       0       0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0       0
  6483 ;;      Totals:         0       0       0       0       0       0       0       0
  6484 ;;Total ram usage:        0 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:    4
  6487 ;; This function calls:
  6488 ;;		Nothing
  6489 ;; This function is called by:
  6490 ;;		_SYSTEM_Initialize
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           
  6495                           ;psect for function _OSCILLATOR_Initialize
  6496  0791                     _OSCILLATOR_Initialize:	
  6497                           
  6498                           ;mcc.c: 68: OSCCON = 0x6A;
  6499                           
  6500                           ;incstack = 0
  6501                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6502  0791  306A               	movlw	106
  6503  0792  0021               	movlb	1	; select bank1
  6504  0793  0099               	movwf	25	;volatile
  6505                           
  6506                           ;mcc.c: 70: OSCSTAT = 0x00;
  6507  0794  019A               	clrf	26	;volatile
  6508                           
  6509                           ;mcc.c: 72: OSCTUNE = 0x00;
  6510  0795  0198               	clrf	24	;volatile
  6511                           
  6512                           ;mcc.c: 74: BORCON = 0x00;
  6513  0796  0022               	movlb	2	; select bank2
  6514  0797  0196               	clrf	22	;volatile
  6515  0798  0008               	return
  6516  0799                     __end_of_OSCILLATOR_Initialize:	
  6517                           
  6518                           	psect	text20
  6519  07CA                     __ptext20:	
  6520 ;; *************** function _OPA2_Initialize *****************
  6521 ;; Defined at:
  6522 ;;		line 58 in file "mcc_generated_files/opa2.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;		None
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;		None
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      void 
  6529 ;; Registers used:
  6530 ;;		wreg
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6536 ;;      Params:         0       0       0       0       0       0       0       0
  6537 ;;      Locals:         0       0       0       0       0       0       0       0
  6538 ;;      Temps:          0       0       0       0       0       0       0       0
  6539 ;;      Totals:         0       0       0       0       0       0       0       0
  6540 ;;Total ram usage:        0 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    4
  6543 ;; This function calls:
  6544 ;;		Nothing
  6545 ;; This function is called by:
  6546 ;;		_SYSTEM_Initialize
  6547 ;;		_main
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           
  6552                           ;psect for function _OPA2_Initialize
  6553  07CA                     _OPA2_Initialize:	
  6554                           
  6555                           ;opa2.c: 61: OPA2CON = 0xD2;
  6556                           
  6557                           ;incstack = 0
  6558                           ; Regs used in _OPA2_Initialize: [wreg]
  6559  07CA  30D2               	movlw	210
  6560  07CB  002A               	movlb	10	; select bank10
  6561  07CC  0095               	movwf	21	;volatile
  6562  07CD  0008               	return
  6563  07CE                     __end_of_OPA2_Initialize:	
  6564                           
  6565                           	psect	text21
  6566  07CE                     __ptext21:	
  6567 ;; *************** function _OPA1_Initialize *****************
  6568 ;; Defined at:
  6569 ;;		line 58 in file "mcc_generated_files/opa1.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;		None
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;		None
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  1    wreg      void 
  6576 ;; Registers used:
  6577 ;;		wreg
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6583 ;;      Params:         0       0       0       0       0       0       0       0
  6584 ;;      Locals:         0       0       0       0       0       0       0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0       0
  6586 ;;      Totals:         0       0       0       0       0       0       0       0
  6587 ;;Total ram usage:        0 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    4
  6590 ;; This function calls:
  6591 ;;		Nothing
  6592 ;; This function is called by:
  6593 ;;		_SYSTEM_Initialize
  6594 ;;		_main
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _OPA1_Initialize
  6600  07CE                     _OPA1_Initialize:	
  6601                           
  6602                           ;opa1.c: 61: OPA1CON = 0xD2;
  6603                           
  6604                           ;incstack = 0
  6605                           ; Regs used in _OPA1_Initialize: [wreg]
  6606  07CE  30D2               	movlw	210
  6607  07CF  002A               	movlb	10	; select bank10
  6608  07D0  0091               	movwf	17	;volatile
  6609  07D1  0008               	return
  6610  07D2                     __end_of_OPA1_Initialize:	
  6611                           
  6612                           	psect	text22
  6613  0760                     __ptext22:	
  6614 ;; *************** function _EXT_INT_Initialize *****************
  6615 ;; Defined at:
  6616 ;;		line 132 in file "mcc_generated_files/ext_int.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0, pclath, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6630 ;;      Params:         0       0       0       0       0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0
  6633 ;;      Totals:         0       0       0       0       0       0       0       0
  6634 ;;Total ram usage:        0 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    5
  6637 ;; This function calls:
  6638 ;;		_INT_SetInterruptHandler
  6639 ;; This function is called by:
  6640 ;;		_SYSTEM_Initialize
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _EXT_INT_Initialize
  6646  0760                     _EXT_INT_Initialize:	
  6647                           
  6648                           ;ext_int.c: 137: (INTCONbits.INTF = 0);
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6652  0760  108B               	bcf	11,1	;volatile
  6653                           
  6654                           ;ext_int.c: 138: (OPTION_REGbits.INTEDG = 0);
  6655  0761  0021               	movlb	1	; select bank1
  6656  0762  1315               	bcf	21,6	;volatile
  6657                           
  6658                           ;ext_int.c: 140: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  6659  0763  3063               	movlw	low _INT_DefaultInterruptHandler
  6660  0764  0020               	movlb	0	; select bank0
  6661  0765  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler
  6662  0766  3004               	movlw	high _INT_DefaultInterruptHandler
  6663  0767  00A1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  6664  0768  3187  279F         	fcall	_INT_SetInterruptHandler
  6665                           
  6666                           ;ext_int.c: 141: (INTCONbits.INTE = 1);
  6667  076A  160B               	bsf	11,4	;volatile
  6668  076B  0008               	return
  6669  076C                     __end_of_EXT_INT_Initialize:	
  6670                           
  6671                           	psect	text23
  6672  079F                     __ptext23:	
  6673 ;; *************** function _INT_SetInterruptHandler *****************
  6674 ;; Defined at:
  6675 ;;		line 71 in file "mcc_generated_files/ext_int.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  6678 ;;		 -> INT_DefaultInterruptHandler(1), 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6690 ;;      Params:         0       2       0       0       0       0       0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0
  6693 ;;      Totals:         0       2       0       0       0       0       0       0
  6694 ;;Total ram usage:        2 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    4
  6697 ;; This function calls:
  6698 ;;		Nothing
  6699 ;; This function is called by:
  6700 ;;		_EXT_INT_Initialize
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           
  6705                           ;psect for function _INT_SetInterruptHandler
  6706  079F                     _INT_SetInterruptHandler:	
  6707                           
  6708                           ;ext_int.c: 72: INT_InterruptHandler = InterruptHandler;
  6709                           
  6710                           ;incstack = 0
  6711                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  6712  079F  0020               	movlb	0	; select bank0
  6713  07A0  0821               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  6714  07A1  00DF               	movwf	_INT_InterruptHandler+1
  6715  07A2  0820               	movf	INT_SetInterruptHandler@InterruptHandler,w
  6716  07A3  00DE               	movwf	_INT_InterruptHandler
  6717  07A4  0008               	return
  6718  07A5                     __end_of_INT_SetInterruptHandler:	
  6719                           
  6720                           	psect	text24
  6721  0615                     __ptext24:	
  6722 ;; *************** function _EUSART_Initialize *****************
  6723 ;; Defined at:
  6724 ;;		line 66 in file "mcc_generated_files/eusart.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;		None
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;		None
  6729 ;; Return value:  Size  Location     Type
  6730 ;;                  1    wreg      void 
  6731 ;; Registers used:
  6732 ;;		wreg, status,2, status,0, pclath, cstack
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6738 ;;      Params:         0       0       0       0       0       0       0       0
  6739 ;;      Locals:         0       0       0       0       0       0       0       0
  6740 ;;      Temps:          0       0       0       0       0       0       0       0
  6741 ;;      Totals:         0       0       0       0       0       0       0       0
  6742 ;;Total ram usage:        0 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:    5
  6745 ;; This function calls:
  6746 ;;		_EUSART_SetErrorHandler
  6747 ;;		_EUSART_SetFramingErrorHandler
  6748 ;;		_EUSART_SetOverrunErrorHandler
  6749 ;; This function is called by:
  6750 ;;		_SYSTEM_Initialize
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           
  6755                           ;psect for function _EUSART_Initialize
  6756  0615                     _EUSART_Initialize:	
  6757                           
  6758                           ;eusart.c: 71: BAUD1CON = 0x08;
  6759                           
  6760                           ;incstack = 0
  6761                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6762  0615  3008               	movlw	8
  6763  0616  0023               	movlb	3	; select bank3
  6764  0617  009F               	movwf	31	;volatile
  6765                           
  6766                           ;eusart.c: 74: RC1STA = 0x90;
  6767  0618  3090               	movlw	144
  6768  0619  009D               	movwf	29	;volatile
  6769                           
  6770                           ;eusart.c: 77: TX1STA = 0x24;
  6771  061A  3024               	movlw	36
  6772  061B  009E               	movwf	30	;volatile
  6773                           
  6774                           ;eusart.c: 80: SP1BRGL = 0x08;
  6775  061C  3008               	movlw	8
  6776  061D  009B               	movwf	27	;volatile
  6777                           
  6778                           ;eusart.c: 83: SP1BRGH = 0x00;
  6779  061E  019C               	clrf	28	;volatile
  6780                           
  6781                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  6782  061F  3000               	movlw	0
  6783  0620  0020               	movlb	0	; select bank0
  6784  0621  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6785  0622  3000               	movlw	0
  6786  0623  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6787  0624  3187  27AB  3186   	fcall	_EUSART_SetFramingErrorHandler
  6788                           
  6789                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  6790  0627  3000               	movlw	0
  6791  0628  0020               	movlb	0	; select bank0
  6792  0629  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6793  062A  3000               	movlw	0
  6794  062B  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6795  062C  3187  27A5  3186   	fcall	_EUSART_SetOverrunErrorHandler
  6796                           
  6797                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  6798  062F  3000               	movlw	0
  6799  0630  0020               	movlb	0	; select bank0
  6800  0631  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  6801  0632  3000               	movlw	0
  6802  0633  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6803  0634  3187  27B1         	fcall	_EUSART_SetErrorHandler
  6804                           
  6805                           ;eusart.c: 90: eusartRxLastError.status = 0;
  6806  0636  0020               	movlb	0	; select bank0
  6807  0637  01E9               	clrf	_eusartRxLastError	;volatile
  6808  0638  0008               	return
  6809  0639                     __end_of_EUSART_Initialize:	
  6810                           
  6811                           	psect	text25
  6812  07A5                     __ptext25:	
  6813 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6814 ;; Defined at:
  6815 ;;		line 170 in file "mcc_generated_files/eusart.c"
  6816 ;; Parameters:    Size  Location     Type
  6817 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  6818 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;		None
  6821 ;; Return value:  Size  Location     Type
  6822 ;;                  1    wreg      void 
  6823 ;; Registers used:
  6824 ;;		wreg
  6825 ;; Tracked objects:
  6826 ;;		On entry : 0/0
  6827 ;;		On exit  : 0/0
  6828 ;;		Unchanged: 0/0
  6829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6830 ;;      Params:         0       2       0       0       0       0       0       0
  6831 ;;      Locals:         0       0       0       0       0       0       0       0
  6832 ;;      Temps:          0       0       0       0       0       0       0       0
  6833 ;;      Totals:         0       2       0       0       0       0       0       0
  6834 ;;Total ram usage:        2 bytes
  6835 ;; Hardware stack levels used:    1
  6836 ;; Hardware stack levels required when called:    4
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_EUSART_Initialize
  6841 ;; This function uses a non-reentrant model
  6842 ;;
  6843                           
  6844                           
  6845                           ;psect for function _EUSART_SetOverrunErrorHandler
  6846  07A5                     _EUSART_SetOverrunErrorHandler:	
  6847                           
  6848                           ;eusart.c: 171: EUSART_OverrunErrorHandler = interruptHandler;
  6849                           
  6850                           ;incstack = 0
  6851                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6852  07A5  0020               	movlb	0	; select bank0
  6853  07A6  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6854  07A7  00E3               	movwf	_EUSART_OverrunErrorHandler+1
  6855  07A8  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6856  07A9  00E2               	movwf	_EUSART_OverrunErrorHandler
  6857  07AA  0008               	return
  6858  07AB                     __end_of_EUSART_SetOverrunErrorHandler:	
  6859                           
  6860                           	psect	text26
  6861  07AB                     __ptext26:	
  6862 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6863 ;; Defined at:
  6864 ;;		line 166 in file "mcc_generated_files/eusart.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  6867 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;		None
  6870 ;; Return value:  Size  Location     Type
  6871 ;;                  1    wreg      void 
  6872 ;; Registers used:
  6873 ;;		wreg
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6879 ;;      Params:         0       2       0       0       0       0       0       0
  6880 ;;      Locals:         0       0       0       0       0       0       0       0
  6881 ;;      Temps:          0       0       0       0       0       0       0       0
  6882 ;;      Totals:         0       2       0       0       0       0       0       0
  6883 ;;Total ram usage:        2 bytes
  6884 ;; Hardware stack levels used:    1
  6885 ;; Hardware stack levels required when called:    4
  6886 ;; This function calls:
  6887 ;;		Nothing
  6888 ;; This function is called by:
  6889 ;;		_EUSART_Initialize
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           
  6894                           ;psect for function _EUSART_SetFramingErrorHandler
  6895  07AB                     _EUSART_SetFramingErrorHandler:	
  6896                           
  6897                           ;eusart.c: 167: EUSART_FramingErrorHandler = interruptHandler;
  6898                           
  6899                           ;incstack = 0
  6900                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6901  07AB  0020               	movlb	0	; select bank0
  6902  07AC  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  6903  07AD  00E5               	movwf	_EUSART_FramingErrorHandler+1
  6904  07AE  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  6905  07AF  00E4               	movwf	_EUSART_FramingErrorHandler
  6906  07B0  0008               	return
  6907  07B1                     __end_of_EUSART_SetFramingErrorHandler:	
  6908                           
  6909                           	psect	text27
  6910  07B1                     __ptext27:	
  6911 ;; *************** function _EUSART_SetErrorHandler *****************
  6912 ;; Defined at:
  6913 ;;		line 174 in file "mcc_generated_files/eusart.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  6916 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;		None
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      void 
  6921 ;; Registers used:
  6922 ;;		wreg
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6928 ;;      Params:         0       2       0       0       0       0       0       0
  6929 ;;      Locals:         0       0       0       0       0       0       0       0
  6930 ;;      Temps:          0       0       0       0       0       0       0       0
  6931 ;;      Totals:         0       2       0       0       0       0       0       0
  6932 ;;Total ram usage:        2 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    4
  6935 ;; This function calls:
  6936 ;;		Nothing
  6937 ;; This function is called by:
  6938 ;;		_EUSART_Initialize
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function _EUSART_SetErrorHandler
  6944  07B1                     _EUSART_SetErrorHandler:	
  6945                           
  6946                           ;eusart.c: 175: EUSART_ErrorHandler = interruptHandler;
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  6950  07B1  0020               	movlb	0	; select bank0
  6951  07B2  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  6952  07B3  00E1               	movwf	_EUSART_ErrorHandler+1
  6953  07B4  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  6954  07B5  00E0               	movwf	_EUSART_ErrorHandler
  6955  07B6  0008               	return
  6956  07B7                     __end_of_EUSART_SetErrorHandler:	
  6957                           
  6958                           	psect	text28
  6959  07B7                     __ptext28:	
  6960 ;; *************** function _DAC_Initialize *****************
  6961 ;; Defined at:
  6962 ;;		line 58 in file "mcc_generated_files/dac.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;		None
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6976 ;;      Params:         0       0       0       0       0       0       0       0
  6977 ;;      Locals:         0       0       0       0       0       0       0       0
  6978 ;;      Temps:          0       0       0       0       0       0       0       0
  6979 ;;      Totals:         0       0       0       0       0       0       0       0
  6980 ;;Total ram usage:        0 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    4
  6983 ;; This function calls:
  6984 ;;		Nothing
  6985 ;; This function is called by:
  6986 ;;		_SYSTEM_Initialize
  6987 ;;		_main
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           
  6992                           ;psect for function _DAC_Initialize
  6993  07B7                     _DAC_Initialize:	
  6994                           
  6995                           ;dac.c: 61: DAC1CON0 = 0x80;
  6996                           
  6997                           ;incstack = 0
  6998                           ; Regs used in _DAC_Initialize: [wreg]
  6999  07B7  3080               	movlw	128
  7000  07B8  0022               	movlb	2	; select bank2
  7001  07B9  0098               	movwf	24	;volatile
  7002                           
  7003                           ;dac.c: 63: DAC1CON1 = 0xFF;
  7004  07BA  30FF               	movlw	255
  7005  07BB  0099               	movwf	25	;volatile
  7006  07BC  0008               	return
  7007  07BD                     __end_of_DAC_Initialize:	
  7008                           
  7009                           	psect	intentry
  7010  0004                     __pintentry:	
  7011 ;; *************** function _INTERRUPT_InterruptManager *****************
  7012 ;; Defined at:
  7013 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;		None
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;		None
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  1    wreg      void 
  7020 ;; Registers used:
  7021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7027 ;;      Params:         0       0       0       0       0       0       0       0
  7028 ;;      Locals:         0       0       0       0       0       0       0       0
  7029 ;;      Temps:          0       0       0       0       0       0       0       0
  7030 ;;      Totals:         0       0       0       0       0       0       0       0
  7031 ;;Total ram usage:        0 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    3
  7034 ;; This function calls:
  7035 ;;		_INT_ISR
  7036 ;;		_PIN_MANAGER_IOC
  7037 ;; This function is called by:
  7038 ;;		Interrupt level 1
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042  0004                     _INTERRUPT_InterruptManager:	
  7043                           
  7044                           ;incstack = 0
  7045  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7046                           
  7047                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7048  0005  3180               	pagesel	$
  7049                           
  7050                           ;interrupt_manager.c: 55: if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
  7051  0006  1A0B               	btfsc	11,4	;volatile
  7052  0007  1C8B               	btfss	11,1	;volatile
  7053  0008  280D               	goto	i1l126
  7054                           
  7055                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: INT_ISR();
  7056  0009  3187  27D2  3180   	fcall	_INT_ISR
  7057                           
  7058                           ;interrupt_manager.c: 58: }
  7059  000C  2812               	goto	i1l130
  7060  000D                     i1l126:	
  7061                           
  7062                           ;interrupt_manager.c: 59: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  7063  000D  198B               	btfsc	11,3	;volatile
  7064  000E  1C0B               	btfss	11,0	;volatile
  7065  000F  2812               	goto	i1l130
  7066                           
  7067                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: PIN_MANAGER_IOC();
  7068  0010  3187  27D6         	fcall	_PIN_MANAGER_IOC
  7069  0012                     i1l130:	
  7070                           ;interrupt_manager.c: 63: else;interrupt_manager.c: 64: {
  7071                           
  7072                           ;interrupt_manager.c: 62: }
  7073                           
  7074  0012  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7075  0013  0009               	retfie
  7076  0014                     __end_of_INTERRUPT_InterruptManager:	
  7077                           
  7078                           	psect	text30
  7079  07D6                     __ptext30:	
  7080 ;; *************** function _PIN_MANAGER_IOC *****************
  7081 ;; Defined at:
  7082 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;		None
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;		None
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		None
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7096 ;;      Params:         0       0       0       0       0       0       0       0
  7097 ;;      Locals:         0       0       0       0       0       0       0       0
  7098 ;;      Temps:          0       0       0       0       0       0       0       0
  7099 ;;      Totals:         0       0       0       0       0       0       0       0
  7100 ;;Total ram usage:        0 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; This function calls:
  7103 ;;		Nothing
  7104 ;; This function is called by:
  7105 ;;		_INTERRUPT_InterruptManager
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function _PIN_MANAGER_IOC
  7111  07D6                     _PIN_MANAGER_IOC:	
  7112                           
  7113                           ;incstack = 0
  7114                           ; Regs used in _PIN_MANAGER_IOC: []
  7115  07D6  0008               	return
  7116  07D7                     __end_of_PIN_MANAGER_IOC:	
  7117                           
  7118                           	psect	text31
  7119  07D2                     __ptext31:	
  7120 ;; *************** function _INT_ISR *****************
  7121 ;; Defined at:
  7122 ;;		line 54 in file "mcc_generated_files/ext_int.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;		None
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;		None
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7136 ;;      Params:         0       0       0       0       0       0       0       0
  7137 ;;      Locals:         0       0       0       0       0       0       0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0
  7139 ;;      Totals:         0       0       0       0       0       0       0       0
  7140 ;;Total ram usage:        0 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    2
  7143 ;; This function calls:
  7144 ;;		_INT_CallBack
  7145 ;; This function is called by:
  7146 ;;		_INTERRUPT_InterruptManager
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           
  7151                           ;psect for function _INT_ISR
  7152  07D2                     _INT_ISR:	
  7153                           
  7154                           ;ext_int.c: 56: (INTCONbits.INTF = 0);
  7155                           
  7156                           ;incstack = 0
  7157                           ; Regs used in _INT_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7158  07D2  108B               	bcf	11,1	;volatile
  7159                           
  7160                           ;ext_int.c: 59: INT_CallBack();
  7161  07D3  3187  276C         	fcall	_INT_CallBack
  7162  07D5  0008               	return
  7163  07D6                     __end_of_INT_ISR:	
  7164                           
  7165                           	psect	text32
  7166  076C                     __ptext32:	
  7167 ;; *************** function _INT_CallBack *****************
  7168 ;; Defined at:
  7169 ;;		line 62 in file "mcc_generated_files/ext_int.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;		None
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;		None
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  1    wreg      void 
  7176 ;; Registers used:
  7177 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7183 ;;      Params:         0       0       0       0       0       0       0       0
  7184 ;;      Locals:         0       0       0       0       0       0       0       0
  7185 ;;      Temps:          0       0       0       0       0       0       0       0
  7186 ;;      Totals:         0       0       0       0       0       0       0       0
  7187 ;;Total ram usage:        0 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:    1
  7190 ;; This function calls:
  7191 ;;		Absolute function
  7192 ;;		_INT_DefaultInterruptHandler
  7193 ;; This function is called by:
  7194 ;;		_INT_ISR
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function _INT_CallBack
  7200  076C                     _INT_CallBack:	
  7201                           
  7202                           ;ext_int.c: 65: if(INT_InterruptHandler)
  7203                           
  7204                           ;incstack = 0
  7205                           ; Regs used in _INT_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7206  076C  0020               	movlb	0	; select bank0
  7207  076D  085E               	movf	_INT_InterruptHandler,w
  7208  076E  045F               	iorwf	_INT_InterruptHandler+1,w
  7209  076F  1903               	btfsc	3,2
  7210  0770  0008               	return
  7211                           
  7212                           ;ext_int.c: 66: {;ext_int.c: 67: INT_InterruptHandler();
  7213  0771  085F               	movf	_INT_InterruptHandler+1,w
  7214  0772  008A               	movwf	10
  7215  0773  085E               	movf	_INT_InterruptHandler,w
  7216  0774  000A               	callw
  7217  0775  3187               	pagesel	$
  7218  0776  0008               	return
  7219  0777                     __end_of_INT_CallBack:	
  7220                           
  7221                           	psect	text33
  7222  0463                     __ptext33:	
  7223 ;; *************** function _INT_DefaultInterruptHandler *****************
  7224 ;; Defined at:
  7225 ;;		line 75 in file "mcc_generated_files/ext_int.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;		None
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;  time            1    1[COMMON] unsigned char 
  7230 ;; Return value:  Size  Location     Type
  7231 ;;                  1    wreg      void 
  7232 ;; Registers used:
  7233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7234 ;; Tracked objects:
  7235 ;;		On entry : 0/0
  7236 ;;		On exit  : 0/0
  7237 ;;		Unchanged: 0/0
  7238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7239 ;;      Params:         0       0       0       0       0       0       0       0
  7240 ;;      Locals:         1       0       0       0       0       0       0       0
  7241 ;;      Temps:          1       0       0       0       0       0       0       0
  7242 ;;      Totals:         2       0       0       0       0       0       0       0
  7243 ;;Total ram usage:        2 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; This function calls:
  7246 ;;		Nothing
  7247 ;; This function is called by:
  7248 ;;		_EXT_INT_Initialize
  7249 ;;		_INT_CallBack
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           
  7254                           ;psect for function _INT_DefaultInterruptHandler
  7255  0463                     _INT_DefaultInterruptHandler:	
  7256                           
  7257                           ;ext_int.c: 77: uint8_t time = TMR0;
  7258                           
  7259                           ;incstack = 0
  7260                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr1h+status,2+status,0]
  7261  0463  0020               	movlb	0	; select bank0
  7262  0464  0815               	movf	21,w	;volatile
  7263  0465  00F7               	movwf	??_INT_DefaultInterruptHandler
  7264  0466  0877               	movf	??_INT_DefaultInterruptHandler,w
  7265  0467  00F8               	movwf	INT_DefaultInterruptHandler@time
  7266                           
  7267                           ;ext_int.c: 78: TMR0 = 0;
  7268  0468  0195               	clrf	21	;volatile
  7269                           
  7270                           ;ext_int.c: 81: if (INTCONbits.TMR0IF){
  7271  0469  190B               	btfsc	11,2	;volatile
  7272                           
  7273                           ;ext_int.c: 82: time = 0;
  7274  046A  01F8               	clrf	INT_DefaultInterruptHandler@time
  7275                           
  7276                           ;ext_int.c: 83: };ext_int.c: 84: INTCONbits.TMR0IF = 0;
  7277  046B  110B               	bcf	11,2	;volatile
  7278                           
  7279                           ;ext_int.c: 86: switch(ir_code.state){
  7280  046C  2CBC               	goto	i1l1640
  7281  046D                     i1l1598:	
  7282                           ;ext_int.c: 87: case STATE_RESET:
  7283                           
  7284                           
  7285                           ;ext_int.c: 89: if (time >= 180 && time <= 243){
  7286  046D  30B4               	movlw	180
  7287  046E  0278               	subwf	INT_DefaultInterruptHandler@time,w
  7288  046F  1C03               	skipc
  7289  0470  2CC7               	goto	i1l255
  7290  0471  30F4               	movlw	244
  7291  0472  0278               	subwf	INT_DefaultInterruptHandler@time,w
  7292  0473  1803               	skipnc
  7293  0474  2CC7               	goto	i1l255
  7294                           
  7295                           ;ext_int.c: 90: ir_code.n_bits = 0;
  7296  0475  01F1               	clrf	_ir_code
  7297                           
  7298                           ;ext_int.c: 91: ir_code.state = STATE_RECEIVING;
  7299  0476  01F2               	clrf	_ir_code+1
  7300  0477  0AF2               	incf	_ir_code+1,f
  7301                           
  7302                           ;ext_int.c: 92: stats[0] = time;
  7303  0478  0878               	movf	INT_DefaultInterruptHandler@time,w
  7304  0479  00F7               	movwf	??_INT_DefaultInterruptHandler
  7305  047A  0877               	movf	??_INT_DefaultInterruptHandler,w
  7306  047B  0021               	movlb	1	; select bank1
  7307  047C  00A0               	movwf	_stats^(0+128)
  7308                           
  7309                           ;ext_int.c: 93: };ext_int.c: 94: break;
  7310  047D  2CC7               	goto	i1l255
  7311  047E                     i1l1608:	
  7312                           ;ext_int.c: 95: case STATE_RECEIVING:
  7313                           
  7314                           
  7315                           ;ext_int.c: 97: ir_code.code <<= 1;
  7316  047E  3001               	movlw	1
  7317  047F                     u89_25:	
  7318  047F  35F3               	lslf	_ir_code+2,f
  7319  0480  0DF4               	rlf	_ir_code+3,f
  7320  0481  0DF5               	rlf	_ir_code+4,f
  7321  0482  0DF6               	rlf	_ir_code+5,f
  7322  0483  0B89               	decfsz	9,f
  7323  0484  2C7F               	goto	u89_25
  7324                           
  7325                           ;ext_int.c: 98: if (time >= 29 && time <= 41){
  7326  0485  301D               	movlw	29
  7327  0486  0278               	subwf	INT_DefaultInterruptHandler@time,w
  7328  0487  1C03               	skipc
  7329  0488  2C98               	goto	i1l1620
  7330  0489  302A               	movlw	42
  7331  048A  0278               	subwf	INT_DefaultInterruptHandler@time,w
  7332  048B  1803               	skipnc
  7333  048C  2C98               	goto	i1l1620
  7334                           
  7335                           ;ext_int.c: 99: stats[1+ir_code.n_bits] = time;
  7336  048D  0878               	movf	INT_DefaultInterruptHandler@time,w
  7337  048E  00F7               	movwf	??_INT_DefaultInterruptHandler
  7338  048F  0871               	movf	_ir_code,w
  7339  0490  3E01               	addlw	1
  7340  0491  3EA0               	addlw	(low (_stats| 0))& (0+255)
  7341  0492  0086               	movwf	6
  7342  0493  0187               	clrf	7
  7343  0494  0877               	movf	??_INT_DefaultInterruptHandler,w
  7344  0495  0081               	movwf	1
  7345                           
  7346                           ;ext_int.c: 100: ir_code.code |= 1;
  7347  0496  1473               	bsf	_ir_code+2,0
  7348  0497  2CA9               	goto	i1l1626
  7349  0498                     i1l1620:	
  7350                           ;ext_int.c: 102: } else if (time >= 14 && time <= 20){
  7351                           
  7352                           ;ext_int.c: 101: ir_code.n_bits++;
  7353                           
  7354  0498  300E               	movlw	14
  7355  0499  0278               	subwf	INT_DefaultInterruptHandler@time,w
  7356  049A  1C03               	skipc
  7357  049B  2CBA               	goto	i1l1638
  7358  049C  3015               	movlw	21
  7359  049D  0278               	subwf	INT_DefaultInterruptHandler@time,w
  7360  049E  1803               	skipnc
  7361  049F  2CBA               	goto	i1l1638
  7362                           
  7363                           ;ext_int.c: 103: stats[1+ir_code.n_bits] = time;
  7364  04A0  0878               	movf	INT_DefaultInterruptHandler@time,w
  7365  04A1  00F7               	movwf	??_INT_DefaultInterruptHandler
  7366  04A2  0871               	movf	_ir_code,w
  7367  04A3  3E01               	addlw	1
  7368  04A4  3EA0               	addlw	(low (_stats| 0))& (0+255)
  7369  04A5  0086               	movwf	6
  7370  04A6  0187               	clrf	7
  7371  04A7  0877               	movf	??_INT_DefaultInterruptHandler,w
  7372  04A8  0081               	movwf	1
  7373  04A9                     i1l1626:	
  7374                           
  7375                           ;ext_int.c: 104: ir_code.n_bits++;
  7376  04A9  3001               	movlw	1
  7377  04AA  00F7               	movwf	??_INT_DefaultInterruptHandler
  7378  04AB  0877               	movf	??_INT_DefaultInterruptHandler,w
  7379  04AC  07F1               	addwf	_ir_code,f
  7380                           
  7381                           ;ext_int.c: 109: };ext_int.c: 110: if (32 == ir_code.n_bits){
  7382                           
  7383                           ;ext_int.c: 108: break;
  7384                           
  7385                           ;ext_int.c: 107: ir_code.state = STATE_RESET;
  7386                           
  7387                           ;ext_int.c: 105: } else {
  7388  04AD  3020               	movlw	32
  7389  04AE  0671               	xorwf	_ir_code,w
  7390  04AF  1D03               	btfss	3,2
  7391  04B0  2CC7               	goto	i1l255
  7392                           
  7393                           ;ext_int.c: 113: if (ir_code.command == ((~ir_code.command_b) & 0xff)){
  7394  04B1  0973               	comf	_ir_code+2,w
  7395  04B2  0674               	xorwf	_ir_code+3,w
  7396  04B3  1D03               	skipz
  7397  04B4  2CBA               	goto	i1l1638
  7398                           
  7399                           ;ext_int.c: 114: ir_code.state = STATE_DONE;
  7400  04B5  3002               	movlw	2
  7401  04B6  00F7               	movwf	??_INT_DefaultInterruptHandler
  7402  04B7  0877               	movf	??_INT_DefaultInterruptHandler,w
  7403  04B8  00F2               	movwf	_ir_code+1
  7404                           
  7405                           ;ext_int.c: 115: } else {
  7406  04B9  2CC7               	goto	i1l255
  7407  04BA                     i1l1638:	
  7408                           ;ext_int.c: 124: default:
  7409                           
  7410                           ;ext_int.c: 123: break;
  7411                           
  7412                           ;ext_int.c: 120: case STATE_DONE:
  7413                           
  7414                           ;ext_int.c: 117: };ext_int.c: 118: };ext_int.c: 119: break;
  7415                           
  7416                           ;ext_int.c: 116: ir_code.state = STATE_RESET;
  7417                           
  7418                           
  7419                           ;ext_int.c: 126: ir_code.state = STATE_RESET;
  7420  04BA  01F2               	clrf	_ir_code+1
  7421                           
  7422                           ;ext_int.c: 127: }
  7423  04BB  2CC7               	goto	i1l255
  7424  04BC                     i1l1640:	
  7425  04BC  0872               	movf	_ir_code+1,w
  7426                           
  7427                           ; Switch size 1, requested type "space"
  7428                           ; Number of cases is 3, Range of values is 0 to 2
  7429                           ; switch strategies available:
  7430                           ; Name         Instructions Cycles
  7431                           ; simple_byte           10     6 (average)
  7432                           ; direct_byte           12     6 (fixed)
  7433                           ; jumptable            260     6 (fixed)
  7434                           ;	Chosen strategy is simple_byte
  7435  04BD  3A00               	xorlw	0	; case 0
  7436  04BE  1903               	skipnz
  7437  04BF  2C6D               	goto	i1l1598
  7438  04C0  3A01               	xorlw	1	; case 1
  7439  04C1  1903               	skipnz
  7440  04C2  2C7E               	goto	i1l1608
  7441  04C3  3A03               	xorlw	3	; case 2
  7442  04C4  1903               	skipnz
  7443  04C5  2CC7               	goto	i1l255
  7444  04C6  2CBA               	goto	i1l1638
  7445  04C7                     i1l255:	
  7446                           
  7447                           ;ext_int.c: 129: INTCONbits.INTF = 0;
  7448  04C7  108B               	bcf	11,1	;volatile
  7449  04C8  0008               	return
  7450  04C9                     __end_of_INT_DefaultInterruptHandler:	
  7451  007E                     btemp	set	126	;btemp
  7452  007E                     int$flags	set	126
  7453  007E                     wtemp0	set	126


Data Sizes:
    Strings     182
    Constant    72
    Data        0
    BSS         44
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      12
    BANK0            80     62      74
    BANK1            80      0      33
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_8(CODE[27]), STR_7(CODE[27]), STR_6(CODE[27]), STR_5(CODE[27]), 
		 -> STR_4(CODE[27]), STR_3(CODE[26]), STR_2(CODE[4]), STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(COMMON[6]), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _main->_setCurrent
    _setCurrent->___aldiv
    _setCurrent->___lldiv
    _printf->___llmod
    _putch->_EUSART_Write
    ___llmod->___lldiv
    _battery_voltage->___aldiv

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _main->_process_remote_command
    _setCurrent->___lldiv
    _process_remote_command->_printf
    _printf->___llmod
    ___llmod->___lldiv
    ___lldiv->___lmul
    _battery_voltage->___aldiv
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   14396
                                             60 BANK0      2     2      0
                     _DAC_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                             _printf
             _process_remote_command
                         _setCurrent
 ---------------------------------------------------------------------------------
 (1) _setCurrent                                          16    12      4    2646
                                              3 COMMON     2     2      0
                                             25 BANK0     14    10      4
                            ___aldiv
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     374
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0    5827
                                             57 BANK0      3     3      0
                    _battery_voltage
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          3     1      2     331
                                              2 COMMON     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              32    26      6    4502
                                             33 BANK0     24    18      6
                            ___lldiv
                            ___llmod
                             ___wmul
                    _battery_voltage (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      62
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     374
                                              2 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     470
                                              3 COMMON     2     2      0
                                             25 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     955
                                              2 COMMON     1     1      0
                                             12 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2     921
                                             14 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     921
                                              2 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     500
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     125
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     375
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0     200
                            _INT_ISR
                    _PIN_MANAGER_IOC
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _INT_ISR                                              0     0      0     200
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (7) _INT_CallBack                                         0     0      0     200
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _INT_DefaultInterruptHandler                          2     2      0     200
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _battery_voltage
     ___aldiv
   _printf
     ___lldiv
       ___lmul (ARG)
     ___llmod
       ___lldiv (ARG)
         ___lmul (ARG)
     ___wmul
     _battery_voltage (ARG)
       ___aldiv
     _isdigit (ARG)
     _putch (ARG)
       _EUSART_Write
   _process_remote_command
     _battery_voltage
       ___aldiv
     _printf
       ___lldiv
         ___lmul (ARG)
       ___llmod
         ___lldiv (ARG)
           ___lmul (ARG)
       ___wmul
       _battery_voltage (ARG)
         ___aldiv
       _isdigit (ARG)
       _putch (ARG)
         _EUSART_Write
     _setLEDColor
   _setCurrent
     ___aldiv
     ___lldiv
       ___lmul (ARG)
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      77       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3E      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      21       8       41.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      77      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Jul  3 15:24:09 2020

                                  __CFG_CP$OFF 0000                        __end_of_OPA1_Initialize 07D2  
                          ___wmul@multiplicand 0022                                _timer0ReloadVal 0070  
                                  __CFG_LVP$ON 0000                                            l400 05C7  
                                          l403 05D1                                            l503 0117  
                                          l512 018C                                            l508 0147  
                                          l197 0782                                            l533 025B  
                                          l608 0312                                            l537 0680  
                                          l492 00BF                                            l493 009F  
                                          l478 0053                                            l495 00F6  
                                          l489 009D                                            _PR2 001B  
               ?_EUSART_SetFramingErrorHandler 0020                                _TMR2_Initialize 0789  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                         l2020 0679                                           l2102 0525  
                                         l2014 0751                                           l2040 04E8  
                                         l2104 0533                                           l2112 0556  
                                         l2200 0177                                           l2210 019E  
                                         l2202 0180                                           l2130 004E  
                                         l2052 0513                                           l2108 054B  
                                         l2212 01A1                                           l2038 04DA  
                                         l2230 01CB                                           l2142 006E  
                                         l2048 0508                                           l2224 01BA  
                                         l2160 00D0                                           l2152 00A1  
                                         l2136 0058                                           l2304 029B  
                                         l2074 0333                                           l2066 0323  
                                         l2226 01BE                                           l2234 01D3  
                                         l2218 01AB                                           l2138 0061  
                                         l2250 0032                                           l2092 037A  
                                         l2084 0361                                           l2076 0341  
                                         l2236 01DC                                           l2238 0213  
                                         l2246 0243                                           l2174 0105  
                                         l2270 0405                                           l2254 0568  
                                         l2088 036C                                           l2248 0247  
                                         l2280 0418                                           l2272 0408  
                                         l2274 040D                                           l2258 0572  
                                         l2276 0410                                           l2268 0400  
                                         l2284 0428                                           l2278 0415  
                                         l2286 0456                                           l2296 0276  
                                         STR_1 07C2                                           STR_2 07C2  
                                         STR_3 071A                                           STR_4 0693  
                                         STR_5 06C9                                           STR_6 06AE  
                                         STR_7 06E4                                           STR_8 06FF  
                                         STR_9 0734                                           _LATA 010C  
                                         _LATB 010D                                __end_of_INT_ISR 07D6  
                                         u2135 0193                                           _LATC 010E  
                                         u2065 0140                                           u2245 0573  
                                         u2095 0170                                           u2255 057A  
                                         u1705 0681                                           u1715 0686  
                                         u2275 03E0                                           u2285 0287  
                                         u1745 04DD                                           u1835 0336  
                                         u1915 0528                                           u1765 04E9  
                                         u1855 0342                                           u1775 04FD  
                                         u1935 0541                                           u1865 0356  
                                         u1785 0509                                           u1945 054C  
                                         u1875 0362                                           _TMR0 0015  
                                         _TMR2 001A                        __end_of_OPA2_Initialize 07CE  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                                           _main 025C  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E            __end_of_INT_DefaultInterruptHandler 04C9  
                  _INT_DefaultInterruptHandler 0463                                           start 0014  
                                __CFG_IESO$OFF 0000                __end_of_INT_SetInterruptHandler 07A5  
                                __CFG_MCLRE$ON 0000                        __end_of_TMR0_Initialize 0781  
                                ?_EUSART_Write 0077                 __size_of_OSCILLATOR_Initialize 0008  
                __end_of_OSCILLATOR_Initialize 0799                                __end_of___aldiv 0383  
                                        ?_main 0077                                          _ADRES 009B  
                                __CFG_WDTE$OFF 0000                                __end_of___lldiv 051C  
                              __end_of___llmod 055F                                          _T2CON 001C  
                                        i1l130 0012                                          i1l126 000D  
                                        i1l255 04C7                                   ?_setLEDColor 0020  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _RXPPS 0E24  
                                        u89_25 047F                            ___lmul@multiplicand 0024  
                      __end_of_PIN_MANAGER_IOC 07D7                                __end_of_dpowers 0615  
                               _WDT_Initialize 07C6                                __end_of_isdigit 0753  
                                        _putch 07BD                                          _stats 00A0  
                               __CFG_BOREN$OFF 0000                                          pclath 000A  
                                        status 0003                        ?_process_remote_command 0077  
                                        wtemp0 007E                               ??_DAC_Initialize 0079  
                              __initialization 0016                                   __end_of_main 0301  
                               ??_EUSART_Write 0079                        __end_of_TMR2_Initialize 0791  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0077  
                             ?_OPA1_Initialize 0077                                         ??_main 005C  
                     __size_of_battery_voltage 002E                                 __CFG_PLLEN$OFF 0000  
                       __end_of_WDT_Initialize 07CA                                      ??_INT_ISR 0079  
            _EUSART_DefaultFramingErrorHandler 0000                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 0062  
                             ___llmod@dividend 003D                                         _CCPR1L 0291  
                               __CFG_ZCDDIS$ON 0000                                         _ANSELA 018C  
                                       ?_putch 0077                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                       _RC1REG 0199                                         _RA5PPS 0E95  
                                       _RC1STA 019D                                         _RC4PPS 0EA4  
                                       _RB7PPS 0E9F                                         _RC5PPS 0EA5  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       _ODCONC 028E                                         i1l1620 0498  
                                       i1l1608 047E                                         i1l1640 04BC  
                                       i1l1626 04A9                 __end_of_process_remote_command 0463  
                                       i1l1638 04BA                                         i1l1598 046D  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         _FVRCON 0117  
                                       _INTPPS 0E10                               ?_OPA2_Initialize 0077  
                                       _OSCCON 0099                                         _TX1REG 019A  
                                       _WDTCON 0097                                         _TX1STA 019E  
                               __CFG_PWRTE$OFF 0000                                         ___lmul 055F  
                                    ??___aldiv 0079                                         ___wmul 0677  
                               __CFG_STVREN$ON 0000                                      ??___lldiv 0079  
                                    ??___llmod 007A                               ?_TMR0_Initialize 0077  
                                       _printf 002D                                  ?_INT_CallBack 0077  
                                    ??_isdigit 0079                               setCurrent@Vdd_mv 003B  
                              ?_WDT_Initialize 0077               __size_of_INT_SetInterruptHandler 0006  
      INT_SetInterruptHandler@InterruptHandler 0020                               ?_PIN_MANAGER_IOC 0077  
                            _SYSTEM_Initialize 0659                        __end_of__initialization 0029  
                           ?_SYSTEM_Initialize 0077                                 __pcstackCOMMON 0077  
                          ??_SYSTEM_Initialize 0079                                  __end_of_putch 07C2  
                             ?_TMR2_Initialize 0077                                 ??_INT_CallBack 0079  
                  __size_of_EXT_INT_Initialize 000C                                 _OPTION_REGbits 0095  
                         __size_of_setLEDColor 000D                ??_EUSART_SetOverrunErrorHandler 0079  
                            ??_battery_voltage 007A                      __end_of_SYSTEM_Initialize 0677  
                                      ??_putch 007A                                     __pbssBANK0 0066  
                                   __pbssBANK1 00A0                           __end_of_EUSART_Write 0789  
                                   __pmaintext 025C                                        ?___lmul 0020  
                                      ?___wmul 0020                                __CFG_PPS1WAY$ON 0000  
                                   __pintentry 0004                                 ___lmul@product 0028  
                                      ?_printf 0041                                        _OPA1CON 0511  
                                      _OPA2CON 0515                                        _LED_red 0068  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                                      _INT_ISR 07D2                                        _OSCSTAT 009A  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM4DCH 061B                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                     ??_EUSART_SetErrorHandler 0079                                        ___aldiv 0301  
                              __size_of___lmul 0030                                        ___lldiv 04C9  
                              __size_of___wmul 001C                                        ___llmod 051C  
                                      __ptext1 0383                                        __ptext2 055F  
                                      __ptext3 03FD                                        __ptext4 0753  
                                      __ptext5 002D                                        __ptext6 07BD  
                                      __ptext7 0781                                        __ptext8 0745  
                                      __ptext9 0677                                __size_of_printf 022F  
                            __end_of_hexpowers 0659                                        _ir_code 0071  
                                      _dpowers 05ED                          _OSCILLATOR_Initialize 0791  
                                    _T2CONbits 001C                                        _isdigit 0745  
                             ___aldiv@dividend 0024                       ??_PIN_MANAGER_Initialize 0079  
                      _INT_SetInterruptHandler 079F                     __size_of_SYSTEM_Initialize 001E  
                                      clrloop0 079A                           end_of_initialization 0029  
                                   _setCurrent 0383          __end_of_EUSART_SetOverrunErrorHandler 07AB  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 07A5  
                                    _LED_green 0067                           __end_of_INT_CallBack 0777  
                            _EUSART_Initialize 0615                              setCurrent@Vdac_mv 007A  
                              ___lldiv@divisor 002C                               __CFG_CLKOUTEN$ON 0000  
                              ___lldiv@counter 0038                             ?_EUSART_Initialize 0077  
                                      printf@c 0058                                        printf@f 0041  
                             ___aldiv@quotient 002A                                setLEDColor@blue 0021  
                          ??_EUSART_Initialize 0079                               ??_WDT_Initialize 0079  
                             __CFG_FOSC$INTOSC 0000                          __size_of_EUSART_Write 0008  
                     __size_of_OPA1_Initialize 0004                __size_of_EUSART_SetErrorHandler 0006  
                    __end_of_EUSART_Initialize 0639                                    _CCP1CONbits 0293  
                                  printf@width 0055                       __size_of_OPA2_Initialize 0004  
                               __end_of___lmul 058F                     _EUSART_DefaultErrorHandler 0000  
                               __end_of___wmul 0693                                _battery_voltage 05BF  
                                 _EUSART_Write 0781                         ?_OSCILLATOR_Initialize 0077  
                    ??_INT_SetInterruptHandler 0079                        __size_of_DAC_Initialize 0006  
                               __end_of_printf 025C                            start_initialization 0016  
                     __size_of_TMR0_Initialize 000A                __size_of_PIN_MANAGER_Initialize 0030  
                                  putch@txData 007A                                    ?_setCurrent 0039  
                              ___llmod@divisor 0039                                ___llmod@counter 007B  
                     __size_of_PIN_MANAGER_IOC 0001                   ?_INT_DefaultInterruptHandler 0077  
               ?_EUSART_SetOverrunErrorHandler 0020                     _EUSART_FramingErrorHandler 0064  
                                     ??___lmul 0079                                       ??___wmul 0079  
                       _EUSART_SetErrorHandler 07B1                                    _CCPTMRSbits 029E  
                   __end_of_EXT_INT_Initialize 076C                                       ??_printf 0047  
                                ??_setLEDColor 0079                                    __pbssCOMMON 0070  
                                    ___latbits 0001                       ??_process_remote_command 0059  
                                     ?_INT_ISR 0077                                  __pcstackBANK0 0020  
                     __size_of_TMR2_Initialize 0008                                   _isdigit$1238 0079  
                        __size_of_INT_CallBack 000B                     __size_of_EUSART_Initialize 0024  
                            ??_OPA1_Initialize 0079                                      __pnvBANK0 005E  
                       _PIN_MANAGER_Initialize 058F                        __end_of_battery_voltage 05ED  
                ??_INT_DefaultInterruptHandler 0077                                       ?___aldiv 0020  
                                     ?___lldiv 002C                                       ?___llmod 0039  
                                     _DAC1CON0 0118                                       _DAC1CON1 0119  
                 ??_INTERRUPT_InterruptManager 0079                            __size_of_setCurrent 007A  
                            ??_OPA2_Initialize 0079                                   _INT_CallBack 076C  
                                     _BAUD1CON 019F                                       ?_isdigit 0077  
                                    _hexpowers 0639                            __end_of_setLEDColor 0760  
                               __size_of_putch 0005                                ___aldiv@divisor 0020  
                            ??_TMR0_Initialize 0079                                ___aldiv@counter 0028  
                               ___wmul@product 0079                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 0020                                       _LATCbits 010E  
                                     _LED_blue 0066                                      clear_ram0 0799  
                            _eusartRxLastError 0069            __size_of_INTERRUPT_InterruptManager 0010  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0079  
                               setLEDColor@red 0079              _EUSART_DefaultOverrunErrorHandler 0000  
                            ??_PIN_MANAGER_IOC 0077                                     _ADCON0bits 009D  
                            ___wmul@multiplier 0020                                 _DAC_Initialize 07B7  
                                   printf@flag 0057                                     printf@prec 004E  
         __size_of_INT_DefaultInterruptHandler 0066                __size_of_process_remote_command 0066  
                             __size_of_INT_ISR 0004                              ___lmul@multiplier 0020  
                            ??_TMR2_Initialize 0079                               ?_battery_voltage 002E  
                      ??_OSCILLATOR_Initialize 0079                            _EUSART_ErrorHandler 0060  
                             __size_of___aldiv 0082                         __end_of_DAC_Initialize 07BD  
                             __size_of___lldiv 0053                               __size_of___llmod 0043  
                                  _setLEDColor 0753                               __size_of_isdigit 000E  
                                     __ptext10 051C                                       __ptext11 04C9  
                                     __ptext20 07CA                                       __ptext12 05BF  
                                     __ptext21 07CE                                       __ptext13 0301  
                                     __ptext30 07D6                                       __ptext22 0760  
                                     __ptext14 0659                                       __ptext31 07D2  
                                     __ptext23 079F                                       __ptext15 07C6  
                                     __ptext32 076C                                       __ptext24 0615  
                                     __ptext16 0789                                       __ptext33 0463  
                                     __ptext25 07A5                                       __ptext17 0777  
                                     __ptext26 07AB                                       __ptext18 058F  
                                     __ptext27 07B1                                       __ptext19 0791  
                                     __ptext28 07B7                                   ??_setCurrent 003D  
                                __size_of_main 00A5                        ?_EUSART_SetErrorHandler 0020  
                       _process_remote_command 03FD                                     _RC1STAbits 019D  
EUSART_SetOverrunErrorHandler@interruptHandler 0020                                       int$flags 007E  
           __end_of_INTERRUPT_InterruptManager 0014                     _INTERRUPT_InterruptManager 0004  
                                    printf@idx 004D          __end_of_EUSART_SetFramingErrorHandler 07B1  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 07AB  
                              ?_DAC_Initialize 0077                                      printf@val 0051  
                           __end_of_setCurrent 03FD                                     _INTCONbits 000B  
              INT_DefaultInterruptHandler@time 0078                                    _PWM3DCLbits 0617  
                              _OPA1_Initialize 07CE                                    _PWM4DCLbits 061A  
                                   _FVRCONbits 0117                           _INT_InterruptHandler 005E  
                                  _PWM3CONbits 0619                                 __pstringtext10 07C2  
                               __pstringtext11 0000                                       isdigit@c 007A  
                                  _PWM4CONbits 061C                             _EXT_INT_Initialize 0760  
                      __size_of_WDT_Initialize 0004                                       intlevel1 0000  
                             ___lldiv@dividend 0030                        ?_PIN_MANAGER_Initialize 0077  
                   process_remote_command@code 005B                 __end_of_EUSART_SetErrorHandler 07B7  
                          ?_EXT_INT_Initialize 0077                                _OPA2_Initialize 07CA  
                                     printf@ap 0050  EUSART_SetFramingErrorHandler@interruptHandler 0020  
                     ?_INT_SetInterruptHandler 0020                                  __pstringtext1 05ED  
                                __pstringtext2 0639                                  __pstringtext3 0693  
                                __pstringtext4 06AE                                  __pstringtext5 06C9  
                                __pstringtext6 06E4                                  __pstringtext7 06FF  
                                __pstringtext8 071A                                  __pstringtext9 0734  
                         ??_EXT_INT_Initialize 0079                                     _OPTION_REG 0095  
                             setLEDColor@green 0020                               ___lldiv@quotient 0034  
                              _TMR0_Initialize 0777                            setCurrent@microamps 0039  
                                 ___aldiv@sign 0029                                     _TX1STAbits 019E  
                           EUSART_Write@txData 0079                 __end_of_PIN_MANAGER_Initialize 05BF  
                              _PIN_MANAGER_IOC 07D6  
