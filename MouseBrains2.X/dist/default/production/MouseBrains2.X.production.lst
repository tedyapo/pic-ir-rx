

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Jul 20 15:05:03 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16LF1708
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	psect	text37,local,class=CODE,merge=1,delta=2
    63                           	psect	text38,local,class=CODE,merge=1,delta=2
    64                           	psect	text39,local,class=CODE,merge=1,delta=2
    65                           	psect	text40,local,class=CODE,merge=1,delta=2
    66                           	psect	text41,local,class=CODE,merge=1,delta=2
    67                           	psect	text42,local,class=CODE,merge=1,delta=2
    68                           	psect	text43,local,class=CODE,merge=1,delta=2
    69                           	psect	text44,local,class=CODE,merge=1,delta=2
    70                           	psect	text45,local,class=CODE,merge=1,delta=2
    71                           	psect	text46,local,class=CODE,merge=1,delta=2
    72                           	psect	text47,local,class=CODE,merge=1,delta=2
    73                           	psect	text48,local,class=CODE,merge=1,delta=2
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    75                           	dabs	1,0x7E,2
    76  0000                     
    77                           ; Version 2.20
    78                           ; Generated 09/04/2020 GMT
    79                           ; 
    80                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC16LF1708 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  008C                     	;# 
   139  008D                     	;# 
   140  008E                     	;# 
   141  0091                     	;# 
   142  0092                     	;# 
   143  0093                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0097                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009A                     	;# 
   150  009B                     	;# 
   151  009B                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  0111                     	;# 
   160  0112                     	;# 
   161  0113                     	;# 
   162  0114                     	;# 
   163  0115                     	;# 
   164  0116                     	;# 
   165  0117                     	;# 
   166  0118                     	;# 
   167  0119                     	;# 
   168  011C                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  018E                     	;# 
   172  0191                     	;# 
   173  0191                     	;# 
   174  0192                     	;# 
   175  0193                     	;# 
   176  0193                     	;# 
   177  0194                     	;# 
   178  0195                     	;# 
   179  0196                     	;# 
   180  0199                     	;# 
   181  0199                     	;# 
   182  0199                     	;# 
   183  019A                     	;# 
   184  019A                     	;# 
   185  019A                     	;# 
   186  019B                     	;# 
   187  019B                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019C                     	;# 
   192  019C                     	;# 
   193  019C                     	;# 
   194  019D                     	;# 
   195  019D                     	;# 
   196  019D                     	;# 
   197  019E                     	;# 
   198  019E                     	;# 
   199  019E                     	;# 
   200  019F                     	;# 
   201  019F                     	;# 
   202  019F                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  020C                     	;# 
   206  020D                     	;# 
   207  020E                     	;# 
   208  0211                     	;# 
   209  0211                     	;# 
   210  0212                     	;# 
   211  0212                     	;# 
   212  0213                     	;# 
   213  0213                     	;# 
   214  0214                     	;# 
   215  0214                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0216                     	;# 
   221  0216                     	;# 
   222  0217                     	;# 
   223  0217                     	;# 
   224  028C                     	;# 
   225  028D                     	;# 
   226  028E                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0293                     	;# 
   232  0298                     	;# 
   233  0298                     	;# 
   234  0299                     	;# 
   235  029A                     	;# 
   236  029A                     	;# 
   237  029E                     	;# 
   238  030C                     	;# 
   239  030D                     	;# 
   240  030E                     	;# 
   241  038C                     	;# 
   242  038D                     	;# 
   243  038E                     	;# 
   244  0391                     	;# 
   245  0392                     	;# 
   246  0393                     	;# 
   247  0394                     	;# 
   248  0395                     	;# 
   249  0396                     	;# 
   250  0397                     	;# 
   251  0398                     	;# 
   252  0399                     	;# 
   253  0415                     	;# 
   254  0416                     	;# 
   255  0417                     	;# 
   256  041C                     	;# 
   257  041D                     	;# 
   258  041E                     	;# 
   259  0511                     	;# 
   260  0515                     	;# 
   261  0617                     	;# 
   262  0618                     	;# 
   263  0619                     	;# 
   264  0619                     	;# 
   265  061A                     	;# 
   266  061B                     	;# 
   267  061C                     	;# 
   268  061C                     	;# 
   269  0691                     	;# 
   270  0692                     	;# 
   271  0693                     	;# 
   272  0694                     	;# 
   273  0695                     	;# 
   274  0696                     	;# 
   275  0697                     	;# 
   276  0698                     	;# 
   277  0699                     	;# 
   278  069A                     	;# 
   279  069B                     	;# 
   280  069C                     	;# 
   281  069D                     	;# 
   282  069E                     	;# 
   283  069F                     	;# 
   284  0E0F                     	;# 
   285  0E10                     	;# 
   286  0E11                     	;# 
   287  0E12                     	;# 
   288  0E13                     	;# 
   289  0E14                     	;# 
   290  0E15                     	;# 
   291  0E17                     	;# 
   292  0E20                     	;# 
   293  0E21                     	;# 
   294  0E22                     	;# 
   295  0E24                     	;# 
   296  0E25                     	;# 
   297  0E28                     	;# 
   298  0E29                     	;# 
   299  0E2A                     	;# 
   300  0E2B                     	;# 
   301  0E90                     	;# 
   302  0E91                     	;# 
   303  0E92                     	;# 
   304  0E94                     	;# 
   305  0E95                     	;# 
   306  0E9C                     	;# 
   307  0E9D                     	;# 
   308  0E9E                     	;# 
   309  0E9F                     	;# 
   310  0EA0                     	;# 
   311  0EA1                     	;# 
   312  0EA2                     	;# 
   313  0EA3                     	;# 
   314  0EA4                     	;# 
   315  0EA5                     	;# 
   316  0EA6                     	;# 
   317  0EA7                     	;# 
   318  0F0F                     	;# 
   319  0F10                     	;# 
   320  0F11                     	;# 
   321  0F12                     	;# 
   322  0F13                     	;# 
   323  0F14                     	;# 
   324  0F15                     	;# 
   325  0F16                     	;# 
   326  0F17                     	;# 
   327  0F18                     	;# 
   328  0F19                     	;# 
   329  0F1A                     	;# 
   330  0F1B                     	;# 
   331  0F1C                     	;# 
   332  0F1D                     	;# 
   333  0F1E                     	;# 
   334  0F1F                     	;# 
   335  0F20                     	;# 
   336  0F21                     	;# 
   337  0F22                     	;# 
   338  0F23                     	;# 
   339  0F24                     	;# 
   340  0F25                     	;# 
   341  0F26                     	;# 
   342  0F27                     	;# 
   343  0F28                     	;# 
   344  0F29                     	;# 
   345  0F2A                     	;# 
   346  0F2B                     	;# 
   347  0F2C                     	;# 
   348  0F2D                     	;# 
   349  0FE4                     	;# 
   350  0FE5                     	;# 
   351  0FE6                     	;# 
   352  0FE7                     	;# 
   353  0FE8                     	;# 
   354  0FE9                     	;# 
   355  0FEA                     	;# 
   356  0FEB                     	;# 
   357  0FED                     	;# 
   358  0FEE                     	;# 
   359  0FEF                     	;# 
   360  0000                     	;# 
   361  0001                     	;# 
   362  0002                     	;# 
   363  0003                     	;# 
   364  0004                     	;# 
   365  0005                     	;# 
   366  0006                     	;# 
   367  0007                     	;# 
   368  0008                     	;# 
   369  0009                     	;# 
   370  000A                     	;# 
   371  000B                     	;# 
   372  000C                     	;# 
   373  000D                     	;# 
   374  000E                     	;# 
   375  0011                     	;# 
   376  0012                     	;# 
   377  0013                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0093                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009A                     	;# 
   399  009B                     	;# 
   400  009B                     	;# 
   401  009C                     	;# 
   402  009D                     	;# 
   403  009E                     	;# 
   404  009F                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  0111                     	;# 
   409  0112                     	;# 
   410  0113                     	;# 
   411  0114                     	;# 
   412  0115                     	;# 
   413  0116                     	;# 
   414  0117                     	;# 
   415  0118                     	;# 
   416  0119                     	;# 
   417  011C                     	;# 
   418  018C                     	;# 
   419  018D                     	;# 
   420  018E                     	;# 
   421  0191                     	;# 
   422  0191                     	;# 
   423  0192                     	;# 
   424  0193                     	;# 
   425  0193                     	;# 
   426  0194                     	;# 
   427  0195                     	;# 
   428  0196                     	;# 
   429  0199                     	;# 
   430  0199                     	;# 
   431  0199                     	;# 
   432  019A                     	;# 
   433  019A                     	;# 
   434  019A                     	;# 
   435  019B                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019C                     	;# 
   441  019C                     	;# 
   442  019C                     	;# 
   443  019D                     	;# 
   444  019D                     	;# 
   445  019D                     	;# 
   446  019E                     	;# 
   447  019E                     	;# 
   448  019E                     	;# 
   449  019F                     	;# 
   450  019F                     	;# 
   451  019F                     	;# 
   452  019F                     	;# 
   453  019F                     	;# 
   454  020C                     	;# 
   455  020D                     	;# 
   456  020E                     	;# 
   457  0211                     	;# 
   458  0211                     	;# 
   459  0212                     	;# 
   460  0212                     	;# 
   461  0213                     	;# 
   462  0213                     	;# 
   463  0214                     	;# 
   464  0214                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0216                     	;# 
   470  0216                     	;# 
   471  0217                     	;# 
   472  0217                     	;# 
   473  028C                     	;# 
   474  028D                     	;# 
   475  028E                     	;# 
   476  0291                     	;# 
   477  0291                     	;# 
   478  0292                     	;# 
   479  0293                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  029A                     	;# 
   486  029E                     	;# 
   487  030C                     	;# 
   488  030D                     	;# 
   489  030E                     	;# 
   490  038C                     	;# 
   491  038D                     	;# 
   492  038E                     	;# 
   493  0391                     	;# 
   494  0392                     	;# 
   495  0393                     	;# 
   496  0394                     	;# 
   497  0395                     	;# 
   498  0396                     	;# 
   499  0397                     	;# 
   500  0398                     	;# 
   501  0399                     	;# 
   502  0415                     	;# 
   503  0416                     	;# 
   504  0417                     	;# 
   505  041C                     	;# 
   506  041D                     	;# 
   507  041E                     	;# 
   508  0511                     	;# 
   509  0515                     	;# 
   510  0617                     	;# 
   511  0618                     	;# 
   512  0619                     	;# 
   513  0619                     	;# 
   514  061A                     	;# 
   515  061B                     	;# 
   516  061C                     	;# 
   517  061C                     	;# 
   518  0691                     	;# 
   519  0692                     	;# 
   520  0693                     	;# 
   521  0694                     	;# 
   522  0695                     	;# 
   523  0696                     	;# 
   524  0697                     	;# 
   525  0698                     	;# 
   526  0699                     	;# 
   527  069A                     	;# 
   528  069B                     	;# 
   529  069C                     	;# 
   530  069D                     	;# 
   531  069E                     	;# 
   532  069F                     	;# 
   533  0E0F                     	;# 
   534  0E10                     	;# 
   535  0E11                     	;# 
   536  0E12                     	;# 
   537  0E13                     	;# 
   538  0E14                     	;# 
   539  0E15                     	;# 
   540  0E17                     	;# 
   541  0E20                     	;# 
   542  0E21                     	;# 
   543  0E22                     	;# 
   544  0E24                     	;# 
   545  0E25                     	;# 
   546  0E28                     	;# 
   547  0E29                     	;# 
   548  0E2A                     	;# 
   549  0E2B                     	;# 
   550  0E90                     	;# 
   551  0E91                     	;# 
   552  0E92                     	;# 
   553  0E94                     	;# 
   554  0E95                     	;# 
   555  0E9C                     	;# 
   556  0E9D                     	;# 
   557  0E9E                     	;# 
   558  0E9F                     	;# 
   559  0EA0                     	;# 
   560  0EA1                     	;# 
   561  0EA2                     	;# 
   562  0EA3                     	;# 
   563  0EA4                     	;# 
   564  0EA5                     	;# 
   565  0EA6                     	;# 
   566  0EA7                     	;# 
   567  0F0F                     	;# 
   568  0F10                     	;# 
   569  0F11                     	;# 
   570  0F12                     	;# 
   571  0F13                     	;# 
   572  0F14                     	;# 
   573  0F15                     	;# 
   574  0F16                     	;# 
   575  0F17                     	;# 
   576  0F18                     	;# 
   577  0F19                     	;# 
   578  0F1A                     	;# 
   579  0F1B                     	;# 
   580  0F1C                     	;# 
   581  0F1D                     	;# 
   582  0F1E                     	;# 
   583  0F1F                     	;# 
   584  0F20                     	;# 
   585  0F21                     	;# 
   586  0F22                     	;# 
   587  0F23                     	;# 
   588  0F24                     	;# 
   589  0F25                     	;# 
   590  0F26                     	;# 
   591  0F27                     	;# 
   592  0F28                     	;# 
   593  0F29                     	;# 
   594  0F2A                     	;# 
   595  0F2B                     	;# 
   596  0F2C                     	;# 
   597  0F2D                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0013                     	;# 
   627  0015                     	;# 
   628  0016                     	;# 
   629  0016                     	;# 
   630  0017                     	;# 
   631  0018                     	;# 
   632  0019                     	;# 
   633  001A                     	;# 
   634  001B                     	;# 
   635  001C                     	;# 
   636  008C                     	;# 
   637  008D                     	;# 
   638  008E                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0093                     	;# 
   642  0095                     	;# 
   643  0096                     	;# 
   644  0097                     	;# 
   645  0098                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  009F                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0111                     	;# 
   658  0112                     	;# 
   659  0113                     	;# 
   660  0114                     	;# 
   661  0115                     	;# 
   662  0116                     	;# 
   663  0117                     	;# 
   664  0118                     	;# 
   665  0119                     	;# 
   666  011C                     	;# 
   667  018C                     	;# 
   668  018D                     	;# 
   669  018E                     	;# 
   670  0191                     	;# 
   671  0191                     	;# 
   672  0192                     	;# 
   673  0193                     	;# 
   674  0193                     	;# 
   675  0194                     	;# 
   676  0195                     	;# 
   677  0196                     	;# 
   678  0199                     	;# 
   679  0199                     	;# 
   680  0199                     	;# 
   681  019A                     	;# 
   682  019A                     	;# 
   683  019A                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019C                     	;# 
   690  019C                     	;# 
   691  019C                     	;# 
   692  019D                     	;# 
   693  019D                     	;# 
   694  019D                     	;# 
   695  019E                     	;# 
   696  019E                     	;# 
   697  019E                     	;# 
   698  019F                     	;# 
   699  019F                     	;# 
   700  019F                     	;# 
   701  019F                     	;# 
   702  019F                     	;# 
   703  020C                     	;# 
   704  020D                     	;# 
   705  020E                     	;# 
   706  0211                     	;# 
   707  0211                     	;# 
   708  0212                     	;# 
   709  0212                     	;# 
   710  0213                     	;# 
   711  0213                     	;# 
   712  0214                     	;# 
   713  0214                     	;# 
   714  0215                     	;# 
   715  0215                     	;# 
   716  0215                     	;# 
   717  0215                     	;# 
   718  0216                     	;# 
   719  0216                     	;# 
   720  0217                     	;# 
   721  0217                     	;# 
   722  028C                     	;# 
   723  028D                     	;# 
   724  028E                     	;# 
   725  0291                     	;# 
   726  0291                     	;# 
   727  0292                     	;# 
   728  0293                     	;# 
   729  0293                     	;# 
   730  0298                     	;# 
   731  0298                     	;# 
   732  0299                     	;# 
   733  029A                     	;# 
   734  029A                     	;# 
   735  029E                     	;# 
   736  030C                     	;# 
   737  030D                     	;# 
   738  030E                     	;# 
   739  038C                     	;# 
   740  038D                     	;# 
   741  038E                     	;# 
   742  0391                     	;# 
   743  0392                     	;# 
   744  0393                     	;# 
   745  0394                     	;# 
   746  0395                     	;# 
   747  0396                     	;# 
   748  0397                     	;# 
   749  0398                     	;# 
   750  0399                     	;# 
   751  0415                     	;# 
   752  0416                     	;# 
   753  0417                     	;# 
   754  041C                     	;# 
   755  041D                     	;# 
   756  041E                     	;# 
   757  0511                     	;# 
   758  0515                     	;# 
   759  0617                     	;# 
   760  0618                     	;# 
   761  0619                     	;# 
   762  0619                     	;# 
   763  061A                     	;# 
   764  061B                     	;# 
   765  061C                     	;# 
   766  061C                     	;# 
   767  0691                     	;# 
   768  0692                     	;# 
   769  0693                     	;# 
   770  0694                     	;# 
   771  0695                     	;# 
   772  0696                     	;# 
   773  0697                     	;# 
   774  0698                     	;# 
   775  0699                     	;# 
   776  069A                     	;# 
   777  069B                     	;# 
   778  069C                     	;# 
   779  069D                     	;# 
   780  069E                     	;# 
   781  069F                     	;# 
   782  0E0F                     	;# 
   783  0E10                     	;# 
   784  0E11                     	;# 
   785  0E12                     	;# 
   786  0E13                     	;# 
   787  0E14                     	;# 
   788  0E15                     	;# 
   789  0E17                     	;# 
   790  0E20                     	;# 
   791  0E21                     	;# 
   792  0E22                     	;# 
   793  0E24                     	;# 
   794  0E25                     	;# 
   795  0E28                     	;# 
   796  0E29                     	;# 
   797  0E2A                     	;# 
   798  0E2B                     	;# 
   799  0E90                     	;# 
   800  0E91                     	;# 
   801  0E92                     	;# 
   802  0E94                     	;# 
   803  0E95                     	;# 
   804  0E9C                     	;# 
   805  0E9D                     	;# 
   806  0E9E                     	;# 
   807  0E9F                     	;# 
   808  0EA0                     	;# 
   809  0EA1                     	;# 
   810  0EA2                     	;# 
   811  0EA3                     	;# 
   812  0EA4                     	;# 
   813  0EA5                     	;# 
   814  0EA6                     	;# 
   815  0EA7                     	;# 
   816  0F0F                     	;# 
   817  0F10                     	;# 
   818  0F11                     	;# 
   819  0F12                     	;# 
   820  0F13                     	;# 
   821  0F14                     	;# 
   822  0F15                     	;# 
   823  0F16                     	;# 
   824  0F17                     	;# 
   825  0F18                     	;# 
   826  0F19                     	;# 
   827  0F1A                     	;# 
   828  0F1B                     	;# 
   829  0F1C                     	;# 
   830  0F1D                     	;# 
   831  0F1E                     	;# 
   832  0F1F                     	;# 
   833  0F20                     	;# 
   834  0F21                     	;# 
   835  0F22                     	;# 
   836  0F23                     	;# 
   837  0F24                     	;# 
   838  0F25                     	;# 
   839  0F26                     	;# 
   840  0F27                     	;# 
   841  0F28                     	;# 
   842  0F29                     	;# 
   843  0F2A                     	;# 
   844  0F2B                     	;# 
   845  0F2C                     	;# 
   846  0F2D                     	;# 
   847  0FE4                     	;# 
   848  0FE5                     	;# 
   849  0FE6                     	;# 
   850  0FE7                     	;# 
   851  0FE8                     	;# 
   852  0FE9                     	;# 
   853  0FEA                     	;# 
   854  0FEB                     	;# 
   855  0FED                     	;# 
   856  0FEE                     	;# 
   857  0FEF                     	;# 
   858  0000                     	;# 
   859  0001                     	;# 
   860  0002                     	;# 
   861  0003                     	;# 
   862  0004                     	;# 
   863  0005                     	;# 
   864  0006                     	;# 
   865  0007                     	;# 
   866  0008                     	;# 
   867  0009                     	;# 
   868  000A                     	;# 
   869  000B                     	;# 
   870  000C                     	;# 
   871  000D                     	;# 
   872  000E                     	;# 
   873  0011                     	;# 
   874  0012                     	;# 
   875  0013                     	;# 
   876  0015                     	;# 
   877  0016                     	;# 
   878  0016                     	;# 
   879  0017                     	;# 
   880  0018                     	;# 
   881  0019                     	;# 
   882  001A                     	;# 
   883  001B                     	;# 
   884  001C                     	;# 
   885  008C                     	;# 
   886  008D                     	;# 
   887  008E                     	;# 
   888  0091                     	;# 
   889  0092                     	;# 
   890  0093                     	;# 
   891  0095                     	;# 
   892  0096                     	;# 
   893  0097                     	;# 
   894  0098                     	;# 
   895  0099                     	;# 
   896  009A                     	;# 
   897  009B                     	;# 
   898  009B                     	;# 
   899  009C                     	;# 
   900  009D                     	;# 
   901  009E                     	;# 
   902  009F                     	;# 
   903  010C                     	;# 
   904  010D                     	;# 
   905  010E                     	;# 
   906  0111                     	;# 
   907  0112                     	;# 
   908  0113                     	;# 
   909  0114                     	;# 
   910  0115                     	;# 
   911  0116                     	;# 
   912  0117                     	;# 
   913  0118                     	;# 
   914  0119                     	;# 
   915  011C                     	;# 
   916  018C                     	;# 
   917  018D                     	;# 
   918  018E                     	;# 
   919  0191                     	;# 
   920  0191                     	;# 
   921  0192                     	;# 
   922  0193                     	;# 
   923  0193                     	;# 
   924  0194                     	;# 
   925  0195                     	;# 
   926  0196                     	;# 
   927  0199                     	;# 
   928  0199                     	;# 
   929  0199                     	;# 
   930  019A                     	;# 
   931  019A                     	;# 
   932  019A                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019B                     	;# 
   937  019B                     	;# 
   938  019C                     	;# 
   939  019C                     	;# 
   940  019C                     	;# 
   941  019D                     	;# 
   942  019D                     	;# 
   943  019D                     	;# 
   944  019E                     	;# 
   945  019E                     	;# 
   946  019E                     	;# 
   947  019F                     	;# 
   948  019F                     	;# 
   949  019F                     	;# 
   950  019F                     	;# 
   951  019F                     	;# 
   952  020C                     	;# 
   953  020D                     	;# 
   954  020E                     	;# 
   955  0211                     	;# 
   956  0211                     	;# 
   957  0212                     	;# 
   958  0212                     	;# 
   959  0213                     	;# 
   960  0213                     	;# 
   961  0214                     	;# 
   962  0214                     	;# 
   963  0215                     	;# 
   964  0215                     	;# 
   965  0215                     	;# 
   966  0215                     	;# 
   967  0216                     	;# 
   968  0216                     	;# 
   969  0217                     	;# 
   970  0217                     	;# 
   971  028C                     	;# 
   972  028D                     	;# 
   973  028E                     	;# 
   974  0291                     	;# 
   975  0291                     	;# 
   976  0292                     	;# 
   977  0293                     	;# 
   978  0293                     	;# 
   979  0298                     	;# 
   980  0298                     	;# 
   981  0299                     	;# 
   982  029A                     	;# 
   983  029A                     	;# 
   984  029E                     	;# 
   985  030C                     	;# 
   986  030D                     	;# 
   987  030E                     	;# 
   988  038C                     	;# 
   989  038D                     	;# 
   990  038E                     	;# 
   991  0391                     	;# 
   992  0392                     	;# 
   993  0393                     	;# 
   994  0394                     	;# 
   995  0395                     	;# 
   996  0396                     	;# 
   997  0397                     	;# 
   998  0398                     	;# 
   999  0399                     	;# 
  1000  0415                     	;# 
  1001  0416                     	;# 
  1002  0417                     	;# 
  1003  041C                     	;# 
  1004  041D                     	;# 
  1005  041E                     	;# 
  1006  0511                     	;# 
  1007  0515                     	;# 
  1008  0617                     	;# 
  1009  0618                     	;# 
  1010  0619                     	;# 
  1011  0619                     	;# 
  1012  061A                     	;# 
  1013  061B                     	;# 
  1014  061C                     	;# 
  1015  061C                     	;# 
  1016  0691                     	;# 
  1017  0692                     	;# 
  1018  0693                     	;# 
  1019  0694                     	;# 
  1020  0695                     	;# 
  1021  0696                     	;# 
  1022  0697                     	;# 
  1023  0698                     	;# 
  1024  0699                     	;# 
  1025  069A                     	;# 
  1026  069B                     	;# 
  1027  069C                     	;# 
  1028  069D                     	;# 
  1029  069E                     	;# 
  1030  069F                     	;# 
  1031  0E0F                     	;# 
  1032  0E10                     	;# 
  1033  0E11                     	;# 
  1034  0E12                     	;# 
  1035  0E13                     	;# 
  1036  0E14                     	;# 
  1037  0E15                     	;# 
  1038  0E17                     	;# 
  1039  0E20                     	;# 
  1040  0E21                     	;# 
  1041  0E22                     	;# 
  1042  0E24                     	;# 
  1043  0E25                     	;# 
  1044  0E28                     	;# 
  1045  0E29                     	;# 
  1046  0E2A                     	;# 
  1047  0E2B                     	;# 
  1048  0E90                     	;# 
  1049  0E91                     	;# 
  1050  0E92                     	;# 
  1051  0E94                     	;# 
  1052  0E95                     	;# 
  1053  0E9C                     	;# 
  1054  0E9D                     	;# 
  1055  0E9E                     	;# 
  1056  0E9F                     	;# 
  1057  0EA0                     	;# 
  1058  0EA1                     	;# 
  1059  0EA2                     	;# 
  1060  0EA3                     	;# 
  1061  0EA4                     	;# 
  1062  0EA5                     	;# 
  1063  0EA6                     	;# 
  1064  0EA7                     	;# 
  1065  0F0F                     	;# 
  1066  0F10                     	;# 
  1067  0F11                     	;# 
  1068  0F12                     	;# 
  1069  0F13                     	;# 
  1070  0F14                     	;# 
  1071  0F15                     	;# 
  1072  0F16                     	;# 
  1073  0F17                     	;# 
  1074  0F18                     	;# 
  1075  0F19                     	;# 
  1076  0F1A                     	;# 
  1077  0F1B                     	;# 
  1078  0F1C                     	;# 
  1079  0F1D                     	;# 
  1080  0F1E                     	;# 
  1081  0F1F                     	;# 
  1082  0F20                     	;# 
  1083  0F21                     	;# 
  1084  0F22                     	;# 
  1085  0F23                     	;# 
  1086  0F24                     	;# 
  1087  0F25                     	;# 
  1088  0F26                     	;# 
  1089  0F27                     	;# 
  1090  0F28                     	;# 
  1091  0F29                     	;# 
  1092  0F2A                     	;# 
  1093  0F2B                     	;# 
  1094  0F2C                     	;# 
  1095  0F2D                     	;# 
  1096  0FE4                     	;# 
  1097  0FE5                     	;# 
  1098  0FE6                     	;# 
  1099  0FE7                     	;# 
  1100  0FE8                     	;# 
  1101  0FE9                     	;# 
  1102  0FEA                     	;# 
  1103  0FEB                     	;# 
  1104  0FED                     	;# 
  1105  0FEE                     	;# 
  1106  0FEF                     	;# 
  1107  0000                     	;# 
  1108  0001                     	;# 
  1109  0002                     	;# 
  1110  0003                     	;# 
  1111  0004                     	;# 
  1112  0005                     	;# 
  1113  0006                     	;# 
  1114  0007                     	;# 
  1115  0008                     	;# 
  1116  0009                     	;# 
  1117  000A                     	;# 
  1118  000B                     	;# 
  1119  000C                     	;# 
  1120  000D                     	;# 
  1121  000E                     	;# 
  1122  0011                     	;# 
  1123  0012                     	;# 
  1124  0013                     	;# 
  1125  0015                     	;# 
  1126  0016                     	;# 
  1127  0016                     	;# 
  1128  0017                     	;# 
  1129  0018                     	;# 
  1130  0019                     	;# 
  1131  001A                     	;# 
  1132  001B                     	;# 
  1133  001C                     	;# 
  1134  008C                     	;# 
  1135  008D                     	;# 
  1136  008E                     	;# 
  1137  0091                     	;# 
  1138  0092                     	;# 
  1139  0093                     	;# 
  1140  0095                     	;# 
  1141  0096                     	;# 
  1142  0097                     	;# 
  1143  0098                     	;# 
  1144  0099                     	;# 
  1145  009A                     	;# 
  1146  009B                     	;# 
  1147  009B                     	;# 
  1148  009C                     	;# 
  1149  009D                     	;# 
  1150  009E                     	;# 
  1151  009F                     	;# 
  1152  010C                     	;# 
  1153  010D                     	;# 
  1154  010E                     	;# 
  1155  0111                     	;# 
  1156  0112                     	;# 
  1157  0113                     	;# 
  1158  0114                     	;# 
  1159  0115                     	;# 
  1160  0116                     	;# 
  1161  0117                     	;# 
  1162  0118                     	;# 
  1163  0119                     	;# 
  1164  011C                     	;# 
  1165  018C                     	;# 
  1166  018D                     	;# 
  1167  018E                     	;# 
  1168  0191                     	;# 
  1169  0191                     	;# 
  1170  0192                     	;# 
  1171  0193                     	;# 
  1172  0193                     	;# 
  1173  0194                     	;# 
  1174  0195                     	;# 
  1175  0196                     	;# 
  1176  0199                     	;# 
  1177  0199                     	;# 
  1178  0199                     	;# 
  1179  019A                     	;# 
  1180  019A                     	;# 
  1181  019A                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019C                     	;# 
  1188  019C                     	;# 
  1189  019C                     	;# 
  1190  019D                     	;# 
  1191  019D                     	;# 
  1192  019D                     	;# 
  1193  019E                     	;# 
  1194  019E                     	;# 
  1195  019E                     	;# 
  1196  019F                     	;# 
  1197  019F                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  020C                     	;# 
  1202  020D                     	;# 
  1203  020E                     	;# 
  1204  0211                     	;# 
  1205  0211                     	;# 
  1206  0212                     	;# 
  1207  0212                     	;# 
  1208  0213                     	;# 
  1209  0213                     	;# 
  1210  0214                     	;# 
  1211  0214                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0216                     	;# 
  1217  0216                     	;# 
  1218  0217                     	;# 
  1219  0217                     	;# 
  1220  028C                     	;# 
  1221  028D                     	;# 
  1222  028E                     	;# 
  1223  0291                     	;# 
  1224  0291                     	;# 
  1225  0292                     	;# 
  1226  0293                     	;# 
  1227  0293                     	;# 
  1228  0298                     	;# 
  1229  0298                     	;# 
  1230  0299                     	;# 
  1231  029A                     	;# 
  1232  029A                     	;# 
  1233  029E                     	;# 
  1234  030C                     	;# 
  1235  030D                     	;# 
  1236  030E                     	;# 
  1237  038C                     	;# 
  1238  038D                     	;# 
  1239  038E                     	;# 
  1240  0391                     	;# 
  1241  0392                     	;# 
  1242  0393                     	;# 
  1243  0394                     	;# 
  1244  0395                     	;# 
  1245  0396                     	;# 
  1246  0397                     	;# 
  1247  0398                     	;# 
  1248  0399                     	;# 
  1249  0415                     	;# 
  1250  0416                     	;# 
  1251  0417                     	;# 
  1252  041C                     	;# 
  1253  041D                     	;# 
  1254  041E                     	;# 
  1255  0511                     	;# 
  1256  0515                     	;# 
  1257  0617                     	;# 
  1258  0618                     	;# 
  1259  0619                     	;# 
  1260  0619                     	;# 
  1261  061A                     	;# 
  1262  061B                     	;# 
  1263  061C                     	;# 
  1264  061C                     	;# 
  1265  0691                     	;# 
  1266  0692                     	;# 
  1267  0693                     	;# 
  1268  0694                     	;# 
  1269  0695                     	;# 
  1270  0696                     	;# 
  1271  0697                     	;# 
  1272  0698                     	;# 
  1273  0699                     	;# 
  1274  069A                     	;# 
  1275  069B                     	;# 
  1276  069C                     	;# 
  1277  069D                     	;# 
  1278  069E                     	;# 
  1279  069F                     	;# 
  1280  0E0F                     	;# 
  1281  0E10                     	;# 
  1282  0E11                     	;# 
  1283  0E12                     	;# 
  1284  0E13                     	;# 
  1285  0E14                     	;# 
  1286  0E15                     	;# 
  1287  0E17                     	;# 
  1288  0E20                     	;# 
  1289  0E21                     	;# 
  1290  0E22                     	;# 
  1291  0E24                     	;# 
  1292  0E25                     	;# 
  1293  0E28                     	;# 
  1294  0E29                     	;# 
  1295  0E2A                     	;# 
  1296  0E2B                     	;# 
  1297  0E90                     	;# 
  1298  0E91                     	;# 
  1299  0E92                     	;# 
  1300  0E94                     	;# 
  1301  0E95                     	;# 
  1302  0E9C                     	;# 
  1303  0E9D                     	;# 
  1304  0E9E                     	;# 
  1305  0E9F                     	;# 
  1306  0EA0                     	;# 
  1307  0EA1                     	;# 
  1308  0EA2                     	;# 
  1309  0EA3                     	;# 
  1310  0EA4                     	;# 
  1311  0EA5                     	;# 
  1312  0EA6                     	;# 
  1313  0EA7                     	;# 
  1314  0F0F                     	;# 
  1315  0F10                     	;# 
  1316  0F11                     	;# 
  1317  0F12                     	;# 
  1318  0F13                     	;# 
  1319  0F14                     	;# 
  1320  0F15                     	;# 
  1321  0F16                     	;# 
  1322  0F17                     	;# 
  1323  0F18                     	;# 
  1324  0F19                     	;# 
  1325  0F1A                     	;# 
  1326  0F1B                     	;# 
  1327  0F1C                     	;# 
  1328  0F1D                     	;# 
  1329  0F1E                     	;# 
  1330  0F1F                     	;# 
  1331  0F20                     	;# 
  1332  0F21                     	;# 
  1333  0F22                     	;# 
  1334  0F23                     	;# 
  1335  0F24                     	;# 
  1336  0F25                     	;# 
  1337  0F26                     	;# 
  1338  0F27                     	;# 
  1339  0F28                     	;# 
  1340  0F29                     	;# 
  1341  0F2A                     	;# 
  1342  0F2B                     	;# 
  1343  0F2C                     	;# 
  1344  0F2D                     	;# 
  1345  0FE4                     	;# 
  1346  0FE5                     	;# 
  1347  0FE6                     	;# 
  1348  0FE7                     	;# 
  1349  0FE8                     	;# 
  1350  0FE9                     	;# 
  1351  0FEA                     	;# 
  1352  0FEB                     	;# 
  1353  0FED                     	;# 
  1354  0FEE                     	;# 
  1355  0FEF                     	;# 
  1356  0000                     	;# 
  1357  0001                     	;# 
  1358  0002                     	;# 
  1359  0003                     	;# 
  1360  0004                     	;# 
  1361  0005                     	;# 
  1362  0006                     	;# 
  1363  0007                     	;# 
  1364  0008                     	;# 
  1365  0009                     	;# 
  1366  000A                     	;# 
  1367  000B                     	;# 
  1368  000C                     	;# 
  1369  000D                     	;# 
  1370  000E                     	;# 
  1371  0011                     	;# 
  1372  0012                     	;# 
  1373  0013                     	;# 
  1374  0015                     	;# 
  1375  0016                     	;# 
  1376  0016                     	;# 
  1377  0017                     	;# 
  1378  0018                     	;# 
  1379  0019                     	;# 
  1380  001A                     	;# 
  1381  001B                     	;# 
  1382  001C                     	;# 
  1383  008C                     	;# 
  1384  008D                     	;# 
  1385  008E                     	;# 
  1386  0091                     	;# 
  1387  0092                     	;# 
  1388  0093                     	;# 
  1389  0095                     	;# 
  1390  0096                     	;# 
  1391  0097                     	;# 
  1392  0098                     	;# 
  1393  0099                     	;# 
  1394  009A                     	;# 
  1395  009B                     	;# 
  1396  009B                     	;# 
  1397  009C                     	;# 
  1398  009D                     	;# 
  1399  009E                     	;# 
  1400  009F                     	;# 
  1401  010C                     	;# 
  1402  010D                     	;# 
  1403  010E                     	;# 
  1404  0111                     	;# 
  1405  0112                     	;# 
  1406  0113                     	;# 
  1407  0114                     	;# 
  1408  0115                     	;# 
  1409  0116                     	;# 
  1410  0117                     	;# 
  1411  0118                     	;# 
  1412  0119                     	;# 
  1413  011C                     	;# 
  1414  018C                     	;# 
  1415  018D                     	;# 
  1416  018E                     	;# 
  1417  0191                     	;# 
  1418  0191                     	;# 
  1419  0192                     	;# 
  1420  0193                     	;# 
  1421  0193                     	;# 
  1422  0194                     	;# 
  1423  0195                     	;# 
  1424  0196                     	;# 
  1425  0199                     	;# 
  1426  0199                     	;# 
  1427  0199                     	;# 
  1428  019A                     	;# 
  1429  019A                     	;# 
  1430  019A                     	;# 
  1431  019B                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019C                     	;# 
  1437  019C                     	;# 
  1438  019C                     	;# 
  1439  019D                     	;# 
  1440  019D                     	;# 
  1441  019D                     	;# 
  1442  019E                     	;# 
  1443  019E                     	;# 
  1444  019E                     	;# 
  1445  019F                     	;# 
  1446  019F                     	;# 
  1447  019F                     	;# 
  1448  019F                     	;# 
  1449  019F                     	;# 
  1450  020C                     	;# 
  1451  020D                     	;# 
  1452  020E                     	;# 
  1453  0211                     	;# 
  1454  0211                     	;# 
  1455  0212                     	;# 
  1456  0212                     	;# 
  1457  0213                     	;# 
  1458  0213                     	;# 
  1459  0214                     	;# 
  1460  0214                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  028C                     	;# 
  1470  028D                     	;# 
  1471  028E                     	;# 
  1472  0291                     	;# 
  1473  0291                     	;# 
  1474  0292                     	;# 
  1475  0293                     	;# 
  1476  0293                     	;# 
  1477  0298                     	;# 
  1478  0298                     	;# 
  1479  0299                     	;# 
  1480  029A                     	;# 
  1481  029A                     	;# 
  1482  029E                     	;# 
  1483  030C                     	;# 
  1484  030D                     	;# 
  1485  030E                     	;# 
  1486  038C                     	;# 
  1487  038D                     	;# 
  1488  038E                     	;# 
  1489  0391                     	;# 
  1490  0392                     	;# 
  1491  0393                     	;# 
  1492  0394                     	;# 
  1493  0395                     	;# 
  1494  0396                     	;# 
  1495  0397                     	;# 
  1496  0398                     	;# 
  1497  0399                     	;# 
  1498  0415                     	;# 
  1499  0416                     	;# 
  1500  0417                     	;# 
  1501  041C                     	;# 
  1502  041D                     	;# 
  1503  041E                     	;# 
  1504  0511                     	;# 
  1505  0515                     	;# 
  1506  0617                     	;# 
  1507  0618                     	;# 
  1508  0619                     	;# 
  1509  0619                     	;# 
  1510  061A                     	;# 
  1511  061B                     	;# 
  1512  061C                     	;# 
  1513  061C                     	;# 
  1514  0691                     	;# 
  1515  0692                     	;# 
  1516  0693                     	;# 
  1517  0694                     	;# 
  1518  0695                     	;# 
  1519  0696                     	;# 
  1520  0697                     	;# 
  1521  0698                     	;# 
  1522  0699                     	;# 
  1523  069A                     	;# 
  1524  069B                     	;# 
  1525  069C                     	;# 
  1526  069D                     	;# 
  1527  069E                     	;# 
  1528  069F                     	;# 
  1529  0E0F                     	;# 
  1530  0E10                     	;# 
  1531  0E11                     	;# 
  1532  0E12                     	;# 
  1533  0E13                     	;# 
  1534  0E14                     	;# 
  1535  0E15                     	;# 
  1536  0E17                     	;# 
  1537  0E20                     	;# 
  1538  0E21                     	;# 
  1539  0E22                     	;# 
  1540  0E24                     	;# 
  1541  0E25                     	;# 
  1542  0E28                     	;# 
  1543  0E29                     	;# 
  1544  0E2A                     	;# 
  1545  0E2B                     	;# 
  1546  0E90                     	;# 
  1547  0E91                     	;# 
  1548  0E92                     	;# 
  1549  0E94                     	;# 
  1550  0E95                     	;# 
  1551  0E9C                     	;# 
  1552  0E9D                     	;# 
  1553  0E9E                     	;# 
  1554  0E9F                     	;# 
  1555  0EA0                     	;# 
  1556  0EA1                     	;# 
  1557  0EA2                     	;# 
  1558  0EA3                     	;# 
  1559  0EA4                     	;# 
  1560  0EA5                     	;# 
  1561  0EA6                     	;# 
  1562  0EA7                     	;# 
  1563  0F0F                     	;# 
  1564  0F10                     	;# 
  1565  0F11                     	;# 
  1566  0F12                     	;# 
  1567  0F13                     	;# 
  1568  0F14                     	;# 
  1569  0F15                     	;# 
  1570  0F16                     	;# 
  1571  0F17                     	;# 
  1572  0F18                     	;# 
  1573  0F19                     	;# 
  1574  0F1A                     	;# 
  1575  0F1B                     	;# 
  1576  0F1C                     	;# 
  1577  0F1D                     	;# 
  1578  0F1E                     	;# 
  1579  0F1F                     	;# 
  1580  0F20                     	;# 
  1581  0F21                     	;# 
  1582  0F22                     	;# 
  1583  0F23                     	;# 
  1584  0F24                     	;# 
  1585  0F25                     	;# 
  1586  0F26                     	;# 
  1587  0F27                     	;# 
  1588  0F28                     	;# 
  1589  0F29                     	;# 
  1590  0F2A                     	;# 
  1591  0F2B                     	;# 
  1592  0F2C                     	;# 
  1593  0F2D                     	;# 
  1594  0FE4                     	;# 
  1595  0FE5                     	;# 
  1596  0FE6                     	;# 
  1597  0FE7                     	;# 
  1598  0FE8                     	;# 
  1599  0FE9                     	;# 
  1600  0FEA                     	;# 
  1601  0FEB                     	;# 
  1602  0FED                     	;# 
  1603  0FEE                     	;# 
  1604  0FEF                     	;# 
  1605  0000                     	;# 
  1606  0001                     	;# 
  1607  0002                     	;# 
  1608  0003                     	;# 
  1609  0004                     	;# 
  1610  0005                     	;# 
  1611  0006                     	;# 
  1612  0007                     	;# 
  1613  0008                     	;# 
  1614  0009                     	;# 
  1615  000A                     	;# 
  1616  000B                     	;# 
  1617  000C                     	;# 
  1618  000D                     	;# 
  1619  000E                     	;# 
  1620  0011                     	;# 
  1621  0012                     	;# 
  1622  0013                     	;# 
  1623  0015                     	;# 
  1624  0016                     	;# 
  1625  0016                     	;# 
  1626  0017                     	;# 
  1627  0018                     	;# 
  1628  0019                     	;# 
  1629  001A                     	;# 
  1630  001B                     	;# 
  1631  001C                     	;# 
  1632  008C                     	;# 
  1633  008D                     	;# 
  1634  008E                     	;# 
  1635  0091                     	;# 
  1636  0092                     	;# 
  1637  0093                     	;# 
  1638  0095                     	;# 
  1639  0096                     	;# 
  1640  0097                     	;# 
  1641  0098                     	;# 
  1642  0099                     	;# 
  1643  009A                     	;# 
  1644  009B                     	;# 
  1645  009B                     	;# 
  1646  009C                     	;# 
  1647  009D                     	;# 
  1648  009E                     	;# 
  1649  009F                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0111                     	;# 
  1654  0112                     	;# 
  1655  0113                     	;# 
  1656  0114                     	;# 
  1657  0115                     	;# 
  1658  0116                     	;# 
  1659  0117                     	;# 
  1660  0118                     	;# 
  1661  0119                     	;# 
  1662  011C                     	;# 
  1663  018C                     	;# 
  1664  018D                     	;# 
  1665  018E                     	;# 
  1666  0191                     	;# 
  1667  0191                     	;# 
  1668  0192                     	;# 
  1669  0193                     	;# 
  1670  0193                     	;# 
  1671  0194                     	;# 
  1672  0195                     	;# 
  1673  0196                     	;# 
  1674  0199                     	;# 
  1675  0199                     	;# 
  1676  0199                     	;# 
  1677  019A                     	;# 
  1678  019A                     	;# 
  1679  019A                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019C                     	;# 
  1686  019C                     	;# 
  1687  019C                     	;# 
  1688  019D                     	;# 
  1689  019D                     	;# 
  1690  019D                     	;# 
  1691  019E                     	;# 
  1692  019E                     	;# 
  1693  019E                     	;# 
  1694  019F                     	;# 
  1695  019F                     	;# 
  1696  019F                     	;# 
  1697  019F                     	;# 
  1698  019F                     	;# 
  1699  020C                     	;# 
  1700  020D                     	;# 
  1701  020E                     	;# 
  1702  0211                     	;# 
  1703  0211                     	;# 
  1704  0212                     	;# 
  1705  0212                     	;# 
  1706  0213                     	;# 
  1707  0213                     	;# 
  1708  0214                     	;# 
  1709  0214                     	;# 
  1710  0215                     	;# 
  1711  0215                     	;# 
  1712  0215                     	;# 
  1713  0215                     	;# 
  1714  0216                     	;# 
  1715  0216                     	;# 
  1716  0217                     	;# 
  1717  0217                     	;# 
  1718  028C                     	;# 
  1719  028D                     	;# 
  1720  028E                     	;# 
  1721  0291                     	;# 
  1722  0291                     	;# 
  1723  0292                     	;# 
  1724  0293                     	;# 
  1725  0293                     	;# 
  1726  0298                     	;# 
  1727  0298                     	;# 
  1728  0299                     	;# 
  1729  029A                     	;# 
  1730  029A                     	;# 
  1731  029E                     	;# 
  1732  030C                     	;# 
  1733  030D                     	;# 
  1734  030E                     	;# 
  1735  038C                     	;# 
  1736  038D                     	;# 
  1737  038E                     	;# 
  1738  0391                     	;# 
  1739  0392                     	;# 
  1740  0393                     	;# 
  1741  0394                     	;# 
  1742  0395                     	;# 
  1743  0396                     	;# 
  1744  0397                     	;# 
  1745  0398                     	;# 
  1746  0399                     	;# 
  1747  0415                     	;# 
  1748  0416                     	;# 
  1749  0417                     	;# 
  1750  041C                     	;# 
  1751  041D                     	;# 
  1752  041E                     	;# 
  1753  0511                     	;# 
  1754  0515                     	;# 
  1755  0617                     	;# 
  1756  0618                     	;# 
  1757  0619                     	;# 
  1758  0619                     	;# 
  1759  061A                     	;# 
  1760  061B                     	;# 
  1761  061C                     	;# 
  1762  061C                     	;# 
  1763  0691                     	;# 
  1764  0692                     	;# 
  1765  0693                     	;# 
  1766  0694                     	;# 
  1767  0695                     	;# 
  1768  0696                     	;# 
  1769  0697                     	;# 
  1770  0698                     	;# 
  1771  0699                     	;# 
  1772  069A                     	;# 
  1773  069B                     	;# 
  1774  069C                     	;# 
  1775  069D                     	;# 
  1776  069E                     	;# 
  1777  069F                     	;# 
  1778  0E0F                     	;# 
  1779  0E10                     	;# 
  1780  0E11                     	;# 
  1781  0E12                     	;# 
  1782  0E13                     	;# 
  1783  0E14                     	;# 
  1784  0E15                     	;# 
  1785  0E17                     	;# 
  1786  0E20                     	;# 
  1787  0E21                     	;# 
  1788  0E22                     	;# 
  1789  0E24                     	;# 
  1790  0E25                     	;# 
  1791  0E28                     	;# 
  1792  0E29                     	;# 
  1793  0E2A                     	;# 
  1794  0E2B                     	;# 
  1795  0E90                     	;# 
  1796  0E91                     	;# 
  1797  0E92                     	;# 
  1798  0E94                     	;# 
  1799  0E95                     	;# 
  1800  0E9C                     	;# 
  1801  0E9D                     	;# 
  1802  0E9E                     	;# 
  1803  0E9F                     	;# 
  1804  0EA0                     	;# 
  1805  0EA1                     	;# 
  1806  0EA2                     	;# 
  1807  0EA3                     	;# 
  1808  0EA4                     	;# 
  1809  0EA5                     	;# 
  1810  0EA6                     	;# 
  1811  0EA7                     	;# 
  1812  0F0F                     	;# 
  1813  0F10                     	;# 
  1814  0F11                     	;# 
  1815  0F12                     	;# 
  1816  0F13                     	;# 
  1817  0F14                     	;# 
  1818  0F15                     	;# 
  1819  0F16                     	;# 
  1820  0F17                     	;# 
  1821  0F18                     	;# 
  1822  0F19                     	;# 
  1823  0F1A                     	;# 
  1824  0F1B                     	;# 
  1825  0F1C                     	;# 
  1826  0F1D                     	;# 
  1827  0F1E                     	;# 
  1828  0F1F                     	;# 
  1829  0F20                     	;# 
  1830  0F21                     	;# 
  1831  0F22                     	;# 
  1832  0F23                     	;# 
  1833  0F24                     	;# 
  1834  0F25                     	;# 
  1835  0F26                     	;# 
  1836  0F27                     	;# 
  1837  0F28                     	;# 
  1838  0F29                     	;# 
  1839  0F2A                     	;# 
  1840  0F2B                     	;# 
  1841  0F2C                     	;# 
  1842  0F2D                     	;# 
  1843  0FE4                     	;# 
  1844  0FE5                     	;# 
  1845  0FE6                     	;# 
  1846  0FE7                     	;# 
  1847  0FE8                     	;# 
  1848  0FE9                     	;# 
  1849  0FEA                     	;# 
  1850  0FEB                     	;# 
  1851  0FED                     	;# 
  1852  0FEE                     	;# 
  1853  0FEF                     	;# 
  1854  0000                     	;# 
  1855  0001                     	;# 
  1856  0002                     	;# 
  1857  0003                     	;# 
  1858  0004                     	;# 
  1859  0005                     	;# 
  1860  0006                     	;# 
  1861  0007                     	;# 
  1862  0008                     	;# 
  1863  0009                     	;# 
  1864  000A                     	;# 
  1865  000B                     	;# 
  1866  000C                     	;# 
  1867  000D                     	;# 
  1868  000E                     	;# 
  1869  0011                     	;# 
  1870  0012                     	;# 
  1871  0013                     	;# 
  1872  0015                     	;# 
  1873  0016                     	;# 
  1874  0016                     	;# 
  1875  0017                     	;# 
  1876  0018                     	;# 
  1877  0019                     	;# 
  1878  001A                     	;# 
  1879  001B                     	;# 
  1880  001C                     	;# 
  1881  008C                     	;# 
  1882  008D                     	;# 
  1883  008E                     	;# 
  1884  0091                     	;# 
  1885  0092                     	;# 
  1886  0093                     	;# 
  1887  0095                     	;# 
  1888  0096                     	;# 
  1889  0097                     	;# 
  1890  0098                     	;# 
  1891  0099                     	;# 
  1892  009A                     	;# 
  1893  009B                     	;# 
  1894  009B                     	;# 
  1895  009C                     	;# 
  1896  009D                     	;# 
  1897  009E                     	;# 
  1898  009F                     	;# 
  1899  010C                     	;# 
  1900  010D                     	;# 
  1901  010E                     	;# 
  1902  0111                     	;# 
  1903  0112                     	;# 
  1904  0113                     	;# 
  1905  0114                     	;# 
  1906  0115                     	;# 
  1907  0116                     	;# 
  1908  0117                     	;# 
  1909  0118                     	;# 
  1910  0119                     	;# 
  1911  011C                     	;# 
  1912  018C                     	;# 
  1913  018D                     	;# 
  1914  018E                     	;# 
  1915  0191                     	;# 
  1916  0191                     	;# 
  1917  0192                     	;# 
  1918  0193                     	;# 
  1919  0193                     	;# 
  1920  0194                     	;# 
  1921  0195                     	;# 
  1922  0196                     	;# 
  1923  0199                     	;# 
  1924  0199                     	;# 
  1925  0199                     	;# 
  1926  019A                     	;# 
  1927  019A                     	;# 
  1928  019A                     	;# 
  1929  019B                     	;# 
  1930  019B                     	;# 
  1931  019B                     	;# 
  1932  019B                     	;# 
  1933  019B                     	;# 
  1934  019C                     	;# 
  1935  019C                     	;# 
  1936  019C                     	;# 
  1937  019D                     	;# 
  1938  019D                     	;# 
  1939  019D                     	;# 
  1940  019E                     	;# 
  1941  019E                     	;# 
  1942  019E                     	;# 
  1943  019F                     	;# 
  1944  019F                     	;# 
  1945  019F                     	;# 
  1946  019F                     	;# 
  1947  019F                     	;# 
  1948  020C                     	;# 
  1949  020D                     	;# 
  1950  020E                     	;# 
  1951  0211                     	;# 
  1952  0211                     	;# 
  1953  0212                     	;# 
  1954  0212                     	;# 
  1955  0213                     	;# 
  1956  0213                     	;# 
  1957  0214                     	;# 
  1958  0214                     	;# 
  1959  0215                     	;# 
  1960  0215                     	;# 
  1961  0215                     	;# 
  1962  0215                     	;# 
  1963  0216                     	;# 
  1964  0216                     	;# 
  1965  0217                     	;# 
  1966  0217                     	;# 
  1967  028C                     	;# 
  1968  028D                     	;# 
  1969  028E                     	;# 
  1970  0291                     	;# 
  1971  0291                     	;# 
  1972  0292                     	;# 
  1973  0293                     	;# 
  1974  0293                     	;# 
  1975  0298                     	;# 
  1976  0298                     	;# 
  1977  0299                     	;# 
  1978  029A                     	;# 
  1979  029A                     	;# 
  1980  029E                     	;# 
  1981  030C                     	;# 
  1982  030D                     	;# 
  1983  030E                     	;# 
  1984  038C                     	;# 
  1985  038D                     	;# 
  1986  038E                     	;# 
  1987  0391                     	;# 
  1988  0392                     	;# 
  1989  0393                     	;# 
  1990  0394                     	;# 
  1991  0395                     	;# 
  1992  0396                     	;# 
  1993  0397                     	;# 
  1994  0398                     	;# 
  1995  0399                     	;# 
  1996  0415                     	;# 
  1997  0416                     	;# 
  1998  0417                     	;# 
  1999  041C                     	;# 
  2000  041D                     	;# 
  2001  041E                     	;# 
  2002  0511                     	;# 
  2003  0515                     	;# 
  2004  0617                     	;# 
  2005  0618                     	;# 
  2006  0619                     	;# 
  2007  0619                     	;# 
  2008  061A                     	;# 
  2009  061B                     	;# 
  2010  061C                     	;# 
  2011  061C                     	;# 
  2012  0691                     	;# 
  2013  0692                     	;# 
  2014  0693                     	;# 
  2015  0694                     	;# 
  2016  0695                     	;# 
  2017  0696                     	;# 
  2018  0697                     	;# 
  2019  0698                     	;# 
  2020  0699                     	;# 
  2021  069A                     	;# 
  2022  069B                     	;# 
  2023  069C                     	;# 
  2024  069D                     	;# 
  2025  069E                     	;# 
  2026  069F                     	;# 
  2027  0E0F                     	;# 
  2028  0E10                     	;# 
  2029  0E11                     	;# 
  2030  0E12                     	;# 
  2031  0E13                     	;# 
  2032  0E14                     	;# 
  2033  0E15                     	;# 
  2034  0E17                     	;# 
  2035  0E20                     	;# 
  2036  0E21                     	;# 
  2037  0E22                     	;# 
  2038  0E24                     	;# 
  2039  0E25                     	;# 
  2040  0E28                     	;# 
  2041  0E29                     	;# 
  2042  0E2A                     	;# 
  2043  0E2B                     	;# 
  2044  0E90                     	;# 
  2045  0E91                     	;# 
  2046  0E92                     	;# 
  2047  0E94                     	;# 
  2048  0E95                     	;# 
  2049  0E9C                     	;# 
  2050  0E9D                     	;# 
  2051  0E9E                     	;# 
  2052  0E9F                     	;# 
  2053  0EA0                     	;# 
  2054  0EA1                     	;# 
  2055  0EA2                     	;# 
  2056  0EA3                     	;# 
  2057  0EA4                     	;# 
  2058  0EA5                     	;# 
  2059  0EA6                     	;# 
  2060  0EA7                     	;# 
  2061  0F0F                     	;# 
  2062  0F10                     	;# 
  2063  0F11                     	;# 
  2064  0F12                     	;# 
  2065  0F13                     	;# 
  2066  0F14                     	;# 
  2067  0F15                     	;# 
  2068  0F16                     	;# 
  2069  0F17                     	;# 
  2070  0F18                     	;# 
  2071  0F19                     	;# 
  2072  0F1A                     	;# 
  2073  0F1B                     	;# 
  2074  0F1C                     	;# 
  2075  0F1D                     	;# 
  2076  0F1E                     	;# 
  2077  0F1F                     	;# 
  2078  0F20                     	;# 
  2079  0F21                     	;# 
  2080  0F22                     	;# 
  2081  0F23                     	;# 
  2082  0F24                     	;# 
  2083  0F25                     	;# 
  2084  0F26                     	;# 
  2085  0F27                     	;# 
  2086  0F28                     	;# 
  2087  0F29                     	;# 
  2088  0F2A                     	;# 
  2089  0F2B                     	;# 
  2090  0F2C                     	;# 
  2091  0F2D                     	;# 
  2092  0FE4                     	;# 
  2093  0FE5                     	;# 
  2094  0FE6                     	;# 
  2095  0FE7                     	;# 
  2096  0FE8                     	;# 
  2097  0FE9                     	;# 
  2098  0FEA                     	;# 
  2099  0FEB                     	;# 
  2100  0FED                     	;# 
  2101  0FEE                     	;# 
  2102  0FEF                     	;# 
  2103  0000                     	;# 
  2104  0001                     	;# 
  2105  0002                     	;# 
  2106  0003                     	;# 
  2107  0004                     	;# 
  2108  0005                     	;# 
  2109  0006                     	;# 
  2110  0007                     	;# 
  2111  0008                     	;# 
  2112  0009                     	;# 
  2113  000A                     	;# 
  2114  000B                     	;# 
  2115  000C                     	;# 
  2116  000D                     	;# 
  2117  000E                     	;# 
  2118  0011                     	;# 
  2119  0012                     	;# 
  2120  0013                     	;# 
  2121  0015                     	;# 
  2122  0016                     	;# 
  2123  0016                     	;# 
  2124  0017                     	;# 
  2125  0018                     	;# 
  2126  0019                     	;# 
  2127  001A                     	;# 
  2128  001B                     	;# 
  2129  001C                     	;# 
  2130  008C                     	;# 
  2131  008D                     	;# 
  2132  008E                     	;# 
  2133  0091                     	;# 
  2134  0092                     	;# 
  2135  0093                     	;# 
  2136  0095                     	;# 
  2137  0096                     	;# 
  2138  0097                     	;# 
  2139  0098                     	;# 
  2140  0099                     	;# 
  2141  009A                     	;# 
  2142  009B                     	;# 
  2143  009B                     	;# 
  2144  009C                     	;# 
  2145  009D                     	;# 
  2146  009E                     	;# 
  2147  009F                     	;# 
  2148  010C                     	;# 
  2149  010D                     	;# 
  2150  010E                     	;# 
  2151  0111                     	;# 
  2152  0112                     	;# 
  2153  0113                     	;# 
  2154  0114                     	;# 
  2155  0115                     	;# 
  2156  0116                     	;# 
  2157  0117                     	;# 
  2158  0118                     	;# 
  2159  0119                     	;# 
  2160  011C                     	;# 
  2161  018C                     	;# 
  2162  018D                     	;# 
  2163  018E                     	;# 
  2164  0191                     	;# 
  2165  0191                     	;# 
  2166  0192                     	;# 
  2167  0193                     	;# 
  2168  0193                     	;# 
  2169  0194                     	;# 
  2170  0195                     	;# 
  2171  0196                     	;# 
  2172  0199                     	;# 
  2173  0199                     	;# 
  2174  0199                     	;# 
  2175  019A                     	;# 
  2176  019A                     	;# 
  2177  019A                     	;# 
  2178  019B                     	;# 
  2179  019B                     	;# 
  2180  019B                     	;# 
  2181  019B                     	;# 
  2182  019B                     	;# 
  2183  019C                     	;# 
  2184  019C                     	;# 
  2185  019C                     	;# 
  2186  019D                     	;# 
  2187  019D                     	;# 
  2188  019D                     	;# 
  2189  019E                     	;# 
  2190  019E                     	;# 
  2191  019E                     	;# 
  2192  019F                     	;# 
  2193  019F                     	;# 
  2194  019F                     	;# 
  2195  019F                     	;# 
  2196  019F                     	;# 
  2197  020C                     	;# 
  2198  020D                     	;# 
  2199  020E                     	;# 
  2200  0211                     	;# 
  2201  0211                     	;# 
  2202  0212                     	;# 
  2203  0212                     	;# 
  2204  0213                     	;# 
  2205  0213                     	;# 
  2206  0214                     	;# 
  2207  0214                     	;# 
  2208  0215                     	;# 
  2209  0215                     	;# 
  2210  0215                     	;# 
  2211  0215                     	;# 
  2212  0216                     	;# 
  2213  0216                     	;# 
  2214  0217                     	;# 
  2215  0217                     	;# 
  2216  028C                     	;# 
  2217  028D                     	;# 
  2218  028E                     	;# 
  2219  0291                     	;# 
  2220  0291                     	;# 
  2221  0292                     	;# 
  2222  0293                     	;# 
  2223  0293                     	;# 
  2224  0298                     	;# 
  2225  0298                     	;# 
  2226  0299                     	;# 
  2227  029A                     	;# 
  2228  029A                     	;# 
  2229  029E                     	;# 
  2230  030C                     	;# 
  2231  030D                     	;# 
  2232  030E                     	;# 
  2233  038C                     	;# 
  2234  038D                     	;# 
  2235  038E                     	;# 
  2236  0391                     	;# 
  2237  0392                     	;# 
  2238  0393                     	;# 
  2239  0394                     	;# 
  2240  0395                     	;# 
  2241  0396                     	;# 
  2242  0397                     	;# 
  2243  0398                     	;# 
  2244  0399                     	;# 
  2245  0415                     	;# 
  2246  0416                     	;# 
  2247  0417                     	;# 
  2248  041C                     	;# 
  2249  041D                     	;# 
  2250  041E                     	;# 
  2251  0511                     	;# 
  2252  0515                     	;# 
  2253  0617                     	;# 
  2254  0618                     	;# 
  2255  0619                     	;# 
  2256  0619                     	;# 
  2257  061A                     	;# 
  2258  061B                     	;# 
  2259  061C                     	;# 
  2260  061C                     	;# 
  2261  0691                     	;# 
  2262  0692                     	;# 
  2263  0693                     	;# 
  2264  0694                     	;# 
  2265  0695                     	;# 
  2266  0696                     	;# 
  2267  0697                     	;# 
  2268  0698                     	;# 
  2269  0699                     	;# 
  2270  069A                     	;# 
  2271  069B                     	;# 
  2272  069C                     	;# 
  2273  069D                     	;# 
  2274  069E                     	;# 
  2275  069F                     	;# 
  2276  0E0F                     	;# 
  2277  0E10                     	;# 
  2278  0E11                     	;# 
  2279  0E12                     	;# 
  2280  0E13                     	;# 
  2281  0E14                     	;# 
  2282  0E15                     	;# 
  2283  0E17                     	;# 
  2284  0E20                     	;# 
  2285  0E21                     	;# 
  2286  0E22                     	;# 
  2287  0E24                     	;# 
  2288  0E25                     	;# 
  2289  0E28                     	;# 
  2290  0E29                     	;# 
  2291  0E2A                     	;# 
  2292  0E2B                     	;# 
  2293  0E90                     	;# 
  2294  0E91                     	;# 
  2295  0E92                     	;# 
  2296  0E94                     	;# 
  2297  0E95                     	;# 
  2298  0E9C                     	;# 
  2299  0E9D                     	;# 
  2300  0E9E                     	;# 
  2301  0E9F                     	;# 
  2302  0EA0                     	;# 
  2303  0EA1                     	;# 
  2304  0EA2                     	;# 
  2305  0EA3                     	;# 
  2306  0EA4                     	;# 
  2307  0EA5                     	;# 
  2308  0EA6                     	;# 
  2309  0EA7                     	;# 
  2310  0F0F                     	;# 
  2311  0F10                     	;# 
  2312  0F11                     	;# 
  2313  0F12                     	;# 
  2314  0F13                     	;# 
  2315  0F14                     	;# 
  2316  0F15                     	;# 
  2317  0F16                     	;# 
  2318  0F17                     	;# 
  2319  0F18                     	;# 
  2320  0F19                     	;# 
  2321  0F1A                     	;# 
  2322  0F1B                     	;# 
  2323  0F1C                     	;# 
  2324  0F1D                     	;# 
  2325  0F1E                     	;# 
  2326  0F1F                     	;# 
  2327  0F20                     	;# 
  2328  0F21                     	;# 
  2329  0F22                     	;# 
  2330  0F23                     	;# 
  2331  0F24                     	;# 
  2332  0F25                     	;# 
  2333  0F26                     	;# 
  2334  0F27                     	;# 
  2335  0F28                     	;# 
  2336  0F29                     	;# 
  2337  0F2A                     	;# 
  2338  0F2B                     	;# 
  2339  0F2C                     	;# 
  2340  0F2D                     	;# 
  2341  0FE4                     	;# 
  2342  0FE5                     	;# 
  2343  0FE6                     	;# 
  2344  0FE7                     	;# 
  2345  0FE8                     	;# 
  2346  0FE9                     	;# 
  2347  0FEA                     	;# 
  2348  0FEB                     	;# 
  2349  0FED                     	;# 
  2350  0FEE                     	;# 
  2351  0FEF                     	;# 
  2352  0000                     	;# 
  2353  0001                     	;# 
  2354  0002                     	;# 
  2355  0003                     	;# 
  2356  0004                     	;# 
  2357  0005                     	;# 
  2358  0006                     	;# 
  2359  0007                     	;# 
  2360  0008                     	;# 
  2361  0009                     	;# 
  2362  000A                     	;# 
  2363  000B                     	;# 
  2364  000C                     	;# 
  2365  000D                     	;# 
  2366  000E                     	;# 
  2367  0011                     	;# 
  2368  0012                     	;# 
  2369  0013                     	;# 
  2370  0015                     	;# 
  2371  0016                     	;# 
  2372  0016                     	;# 
  2373  0017                     	;# 
  2374  0018                     	;# 
  2375  0019                     	;# 
  2376  001A                     	;# 
  2377  001B                     	;# 
  2378  001C                     	;# 
  2379  008C                     	;# 
  2380  008D                     	;# 
  2381  008E                     	;# 
  2382  0091                     	;# 
  2383  0092                     	;# 
  2384  0093                     	;# 
  2385  0095                     	;# 
  2386  0096                     	;# 
  2387  0097                     	;# 
  2388  0098                     	;# 
  2389  0099                     	;# 
  2390  009A                     	;# 
  2391  009B                     	;# 
  2392  009B                     	;# 
  2393  009C                     	;# 
  2394  009D                     	;# 
  2395  009E                     	;# 
  2396  009F                     	;# 
  2397  010C                     	;# 
  2398  010D                     	;# 
  2399  010E                     	;# 
  2400  0111                     	;# 
  2401  0112                     	;# 
  2402  0113                     	;# 
  2403  0114                     	;# 
  2404  0115                     	;# 
  2405  0116                     	;# 
  2406  0117                     	;# 
  2407  0118                     	;# 
  2408  0119                     	;# 
  2409  011C                     	;# 
  2410  018C                     	;# 
  2411  018D                     	;# 
  2412  018E                     	;# 
  2413  0191                     	;# 
  2414  0191                     	;# 
  2415  0192                     	;# 
  2416  0193                     	;# 
  2417  0193                     	;# 
  2418  0194                     	;# 
  2419  0195                     	;# 
  2420  0196                     	;# 
  2421  0199                     	;# 
  2422  0199                     	;# 
  2423  0199                     	;# 
  2424  019A                     	;# 
  2425  019A                     	;# 
  2426  019A                     	;# 
  2427  019B                     	;# 
  2428  019B                     	;# 
  2429  019B                     	;# 
  2430  019B                     	;# 
  2431  019B                     	;# 
  2432  019C                     	;# 
  2433  019C                     	;# 
  2434  019C                     	;# 
  2435  019D                     	;# 
  2436  019D                     	;# 
  2437  019D                     	;# 
  2438  019E                     	;# 
  2439  019E                     	;# 
  2440  019E                     	;# 
  2441  019F                     	;# 
  2442  019F                     	;# 
  2443  019F                     	;# 
  2444  019F                     	;# 
  2445  019F                     	;# 
  2446  020C                     	;# 
  2447  020D                     	;# 
  2448  020E                     	;# 
  2449  0211                     	;# 
  2450  0211                     	;# 
  2451  0212                     	;# 
  2452  0212                     	;# 
  2453  0213                     	;# 
  2454  0213                     	;# 
  2455  0214                     	;# 
  2456  0214                     	;# 
  2457  0215                     	;# 
  2458  0215                     	;# 
  2459  0215                     	;# 
  2460  0215                     	;# 
  2461  0216                     	;# 
  2462  0216                     	;# 
  2463  0217                     	;# 
  2464  0217                     	;# 
  2465  028C                     	;# 
  2466  028D                     	;# 
  2467  028E                     	;# 
  2468  0291                     	;# 
  2469  0291                     	;# 
  2470  0292                     	;# 
  2471  0293                     	;# 
  2472  0293                     	;# 
  2473  0298                     	;# 
  2474  0298                     	;# 
  2475  0299                     	;# 
  2476  029A                     	;# 
  2477  029A                     	;# 
  2478  029E                     	;# 
  2479  030C                     	;# 
  2480  030D                     	;# 
  2481  030E                     	;# 
  2482  038C                     	;# 
  2483  038D                     	;# 
  2484  038E                     	;# 
  2485  0391                     	;# 
  2486  0392                     	;# 
  2487  0393                     	;# 
  2488  0394                     	;# 
  2489  0395                     	;# 
  2490  0396                     	;# 
  2491  0397                     	;# 
  2492  0398                     	;# 
  2493  0399                     	;# 
  2494  0415                     	;# 
  2495  0416                     	;# 
  2496  0417                     	;# 
  2497  041C                     	;# 
  2498  041D                     	;# 
  2499  041E                     	;# 
  2500  0511                     	;# 
  2501  0515                     	;# 
  2502  0617                     	;# 
  2503  0618                     	;# 
  2504  0619                     	;# 
  2505  0619                     	;# 
  2506  061A                     	;# 
  2507  061B                     	;# 
  2508  061C                     	;# 
  2509  061C                     	;# 
  2510  0691                     	;# 
  2511  0692                     	;# 
  2512  0693                     	;# 
  2513  0694                     	;# 
  2514  0695                     	;# 
  2515  0696                     	;# 
  2516  0697                     	;# 
  2517  0698                     	;# 
  2518  0699                     	;# 
  2519  069A                     	;# 
  2520  069B                     	;# 
  2521  069C                     	;# 
  2522  069D                     	;# 
  2523  069E                     	;# 
  2524  069F                     	;# 
  2525  0E0F                     	;# 
  2526  0E10                     	;# 
  2527  0E11                     	;# 
  2528  0E12                     	;# 
  2529  0E13                     	;# 
  2530  0E14                     	;# 
  2531  0E15                     	;# 
  2532  0E17                     	;# 
  2533  0E20                     	;# 
  2534  0E21                     	;# 
  2535  0E22                     	;# 
  2536  0E24                     	;# 
  2537  0E25                     	;# 
  2538  0E28                     	;# 
  2539  0E29                     	;# 
  2540  0E2A                     	;# 
  2541  0E2B                     	;# 
  2542  0E90                     	;# 
  2543  0E91                     	;# 
  2544  0E92                     	;# 
  2545  0E94                     	;# 
  2546  0E95                     	;# 
  2547  0E9C                     	;# 
  2548  0E9D                     	;# 
  2549  0E9E                     	;# 
  2550  0E9F                     	;# 
  2551  0EA0                     	;# 
  2552  0EA1                     	;# 
  2553  0EA2                     	;# 
  2554  0EA3                     	;# 
  2555  0EA4                     	;# 
  2556  0EA5                     	;# 
  2557  0EA6                     	;# 
  2558  0EA7                     	;# 
  2559  0F0F                     	;# 
  2560  0F10                     	;# 
  2561  0F11                     	;# 
  2562  0F12                     	;# 
  2563  0F13                     	;# 
  2564  0F14                     	;# 
  2565  0F15                     	;# 
  2566  0F16                     	;# 
  2567  0F17                     	;# 
  2568  0F18                     	;# 
  2569  0F19                     	;# 
  2570  0F1A                     	;# 
  2571  0F1B                     	;# 
  2572  0F1C                     	;# 
  2573  0F1D                     	;# 
  2574  0F1E                     	;# 
  2575  0F1F                     	;# 
  2576  0F20                     	;# 
  2577  0F21                     	;# 
  2578  0F22                     	;# 
  2579  0F23                     	;# 
  2580  0F24                     	;# 
  2581  0F25                     	;# 
  2582  0F26                     	;# 
  2583  0F27                     	;# 
  2584  0F28                     	;# 
  2585  0F29                     	;# 
  2586  0F2A                     	;# 
  2587  0F2B                     	;# 
  2588  0F2C                     	;# 
  2589  0F2D                     	;# 
  2590  0FE4                     	;# 
  2591  0FE5                     	;# 
  2592  0FE6                     	;# 
  2593  0FE7                     	;# 
  2594  0FE8                     	;# 
  2595  0FE9                     	;# 
  2596  0FEA                     	;# 
  2597  0FEB                     	;# 
  2598  0FED                     	;# 
  2599  0FEE                     	;# 
  2600  0FEF                     	;# 
  2601  0000                     	;# 
  2602  0001                     	;# 
  2603  0002                     	;# 
  2604  0003                     	;# 
  2605  0004                     	;# 
  2606  0005                     	;# 
  2607  0006                     	;# 
  2608  0007                     	;# 
  2609  0008                     	;# 
  2610  0009                     	;# 
  2611  000A                     	;# 
  2612  000B                     	;# 
  2613  000C                     	;# 
  2614  000D                     	;# 
  2615  000E                     	;# 
  2616  0011                     	;# 
  2617  0012                     	;# 
  2618  0013                     	;# 
  2619  0015                     	;# 
  2620  0016                     	;# 
  2621  0016                     	;# 
  2622  0017                     	;# 
  2623  0018                     	;# 
  2624  0019                     	;# 
  2625  001A                     	;# 
  2626  001B                     	;# 
  2627  001C                     	;# 
  2628  008C                     	;# 
  2629  008D                     	;# 
  2630  008E                     	;# 
  2631  0091                     	;# 
  2632  0092                     	;# 
  2633  0093                     	;# 
  2634  0095                     	;# 
  2635  0096                     	;# 
  2636  0097                     	;# 
  2637  0098                     	;# 
  2638  0099                     	;# 
  2639  009A                     	;# 
  2640  009B                     	;# 
  2641  009B                     	;# 
  2642  009C                     	;# 
  2643  009D                     	;# 
  2644  009E                     	;# 
  2645  009F                     	;# 
  2646  010C                     	;# 
  2647  010D                     	;# 
  2648  010E                     	;# 
  2649  0111                     	;# 
  2650  0112                     	;# 
  2651  0113                     	;# 
  2652  0114                     	;# 
  2653  0115                     	;# 
  2654  0116                     	;# 
  2655  0117                     	;# 
  2656  0118                     	;# 
  2657  0119                     	;# 
  2658  011C                     	;# 
  2659  018C                     	;# 
  2660  018D                     	;# 
  2661  018E                     	;# 
  2662  0191                     	;# 
  2663  0191                     	;# 
  2664  0192                     	;# 
  2665  0193                     	;# 
  2666  0193                     	;# 
  2667  0194                     	;# 
  2668  0195                     	;# 
  2669  0196                     	;# 
  2670  0199                     	;# 
  2671  0199                     	;# 
  2672  0199                     	;# 
  2673  019A                     	;# 
  2674  019A                     	;# 
  2675  019A                     	;# 
  2676  019B                     	;# 
  2677  019B                     	;# 
  2678  019B                     	;# 
  2679  019B                     	;# 
  2680  019B                     	;# 
  2681  019C                     	;# 
  2682  019C                     	;# 
  2683  019C                     	;# 
  2684  019D                     	;# 
  2685  019D                     	;# 
  2686  019D                     	;# 
  2687  019E                     	;# 
  2688  019E                     	;# 
  2689  019E                     	;# 
  2690  019F                     	;# 
  2691  019F                     	;# 
  2692  019F                     	;# 
  2693  019F                     	;# 
  2694  019F                     	;# 
  2695  020C                     	;# 
  2696  020D                     	;# 
  2697  020E                     	;# 
  2698  0211                     	;# 
  2699  0211                     	;# 
  2700  0212                     	;# 
  2701  0212                     	;# 
  2702  0213                     	;# 
  2703  0213                     	;# 
  2704  0214                     	;# 
  2705  0214                     	;# 
  2706  0215                     	;# 
  2707  0215                     	;# 
  2708  0215                     	;# 
  2709  0215                     	;# 
  2710  0216                     	;# 
  2711  0216                     	;# 
  2712  0217                     	;# 
  2713  0217                     	;# 
  2714  028C                     	;# 
  2715  028D                     	;# 
  2716  028E                     	;# 
  2717  0291                     	;# 
  2718  0291                     	;# 
  2719  0292                     	;# 
  2720  0293                     	;# 
  2721  0293                     	;# 
  2722  0298                     	;# 
  2723  0298                     	;# 
  2724  0299                     	;# 
  2725  029A                     	;# 
  2726  029A                     	;# 
  2727  029E                     	;# 
  2728  030C                     	;# 
  2729  030D                     	;# 
  2730  030E                     	;# 
  2731  038C                     	;# 
  2732  038D                     	;# 
  2733  038E                     	;# 
  2734  0391                     	;# 
  2735  0392                     	;# 
  2736  0393                     	;# 
  2737  0394                     	;# 
  2738  0395                     	;# 
  2739  0396                     	;# 
  2740  0397                     	;# 
  2741  0398                     	;# 
  2742  0399                     	;# 
  2743  0415                     	;# 
  2744  0416                     	;# 
  2745  0417                     	;# 
  2746  041C                     	;# 
  2747  041D                     	;# 
  2748  041E                     	;# 
  2749  0511                     	;# 
  2750  0515                     	;# 
  2751  0617                     	;# 
  2752  0618                     	;# 
  2753  0619                     	;# 
  2754  0619                     	;# 
  2755  061A                     	;# 
  2756  061B                     	;# 
  2757  061C                     	;# 
  2758  061C                     	;# 
  2759  0691                     	;# 
  2760  0692                     	;# 
  2761  0693                     	;# 
  2762  0694                     	;# 
  2763  0695                     	;# 
  2764  0696                     	;# 
  2765  0697                     	;# 
  2766  0698                     	;# 
  2767  0699                     	;# 
  2768  069A                     	;# 
  2769  069B                     	;# 
  2770  069C                     	;# 
  2771  069D                     	;# 
  2772  069E                     	;# 
  2773  069F                     	;# 
  2774  0E0F                     	;# 
  2775  0E10                     	;# 
  2776  0E11                     	;# 
  2777  0E12                     	;# 
  2778  0E13                     	;# 
  2779  0E14                     	;# 
  2780  0E15                     	;# 
  2781  0E17                     	;# 
  2782  0E20                     	;# 
  2783  0E21                     	;# 
  2784  0E22                     	;# 
  2785  0E24                     	;# 
  2786  0E25                     	;# 
  2787  0E28                     	;# 
  2788  0E29                     	;# 
  2789  0E2A                     	;# 
  2790  0E2B                     	;# 
  2791  0E90                     	;# 
  2792  0E91                     	;# 
  2793  0E92                     	;# 
  2794  0E94                     	;# 
  2795  0E95                     	;# 
  2796  0E9C                     	;# 
  2797  0E9D                     	;# 
  2798  0E9E                     	;# 
  2799  0E9F                     	;# 
  2800  0EA0                     	;# 
  2801  0EA1                     	;# 
  2802  0EA2                     	;# 
  2803  0EA3                     	;# 
  2804  0EA4                     	;# 
  2805  0EA5                     	;# 
  2806  0EA6                     	;# 
  2807  0EA7                     	;# 
  2808  0F0F                     	;# 
  2809  0F10                     	;# 
  2810  0F11                     	;# 
  2811  0F12                     	;# 
  2812  0F13                     	;# 
  2813  0F14                     	;# 
  2814  0F15                     	;# 
  2815  0F16                     	;# 
  2816  0F17                     	;# 
  2817  0F18                     	;# 
  2818  0F19                     	;# 
  2819  0F1A                     	;# 
  2820  0F1B                     	;# 
  2821  0F1C                     	;# 
  2822  0F1D                     	;# 
  2823  0F1E                     	;# 
  2824  0F1F                     	;# 
  2825  0F20                     	;# 
  2826  0F21                     	;# 
  2827  0F22                     	;# 
  2828  0F23                     	;# 
  2829  0F24                     	;# 
  2830  0F25                     	;# 
  2831  0F26                     	;# 
  2832  0F27                     	;# 
  2833  0F28                     	;# 
  2834  0F29                     	;# 
  2835  0F2A                     	;# 
  2836  0F2B                     	;# 
  2837  0F2C                     	;# 
  2838  0F2D                     	;# 
  2839  0FE4                     	;# 
  2840  0FE5                     	;# 
  2841  0FE6                     	;# 
  2842  0FE7                     	;# 
  2843  0FE8                     	;# 
  2844  0FE9                     	;# 
  2845  0FEA                     	;# 
  2846  0FEB                     	;# 
  2847  0FED                     	;# 
  2848  0FEE                     	;# 
  2849  0FEF                     	;# 
  2850  0000                     	;# 
  2851  0001                     	;# 
  2852  0002                     	;# 
  2853  0003                     	;# 
  2854  0004                     	;# 
  2855  0005                     	;# 
  2856  0006                     	;# 
  2857  0007                     	;# 
  2858  0008                     	;# 
  2859  0009                     	;# 
  2860  000A                     	;# 
  2861  000B                     	;# 
  2862  000C                     	;# 
  2863  000D                     	;# 
  2864  000E                     	;# 
  2865  0011                     	;# 
  2866  0012                     	;# 
  2867  0013                     	;# 
  2868  0015                     	;# 
  2869  0016                     	;# 
  2870  0016                     	;# 
  2871  0017                     	;# 
  2872  0018                     	;# 
  2873  0019                     	;# 
  2874  001A                     	;# 
  2875  001B                     	;# 
  2876  001C                     	;# 
  2877  008C                     	;# 
  2878  008D                     	;# 
  2879  008E                     	;# 
  2880  0091                     	;# 
  2881  0092                     	;# 
  2882  0093                     	;# 
  2883  0095                     	;# 
  2884  0096                     	;# 
  2885  0097                     	;# 
  2886  0098                     	;# 
  2887  0099                     	;# 
  2888  009A                     	;# 
  2889  009B                     	;# 
  2890  009B                     	;# 
  2891  009C                     	;# 
  2892  009D                     	;# 
  2893  009E                     	;# 
  2894  009F                     	;# 
  2895  010C                     	;# 
  2896  010D                     	;# 
  2897  010E                     	;# 
  2898  0111                     	;# 
  2899  0112                     	;# 
  2900  0113                     	;# 
  2901  0114                     	;# 
  2902  0115                     	;# 
  2903  0116                     	;# 
  2904  0117                     	;# 
  2905  0118                     	;# 
  2906  0119                     	;# 
  2907  011C                     	;# 
  2908  018C                     	;# 
  2909  018D                     	;# 
  2910  018E                     	;# 
  2911  0191                     	;# 
  2912  0191                     	;# 
  2913  0192                     	;# 
  2914  0193                     	;# 
  2915  0193                     	;# 
  2916  0194                     	;# 
  2917  0195                     	;# 
  2918  0196                     	;# 
  2919  0199                     	;# 
  2920  0199                     	;# 
  2921  0199                     	;# 
  2922  019A                     	;# 
  2923  019A                     	;# 
  2924  019A                     	;# 
  2925  019B                     	;# 
  2926  019B                     	;# 
  2927  019B                     	;# 
  2928  019B                     	;# 
  2929  019B                     	;# 
  2930  019C                     	;# 
  2931  019C                     	;# 
  2932  019C                     	;# 
  2933  019D                     	;# 
  2934  019D                     	;# 
  2935  019D                     	;# 
  2936  019E                     	;# 
  2937  019E                     	;# 
  2938  019E                     	;# 
  2939  019F                     	;# 
  2940  019F                     	;# 
  2941  019F                     	;# 
  2942  019F                     	;# 
  2943  019F                     	;# 
  2944  020C                     	;# 
  2945  020D                     	;# 
  2946  020E                     	;# 
  2947  0211                     	;# 
  2948  0211                     	;# 
  2949  0212                     	;# 
  2950  0212                     	;# 
  2951  0213                     	;# 
  2952  0213                     	;# 
  2953  0214                     	;# 
  2954  0214                     	;# 
  2955  0215                     	;# 
  2956  0215                     	;# 
  2957  0215                     	;# 
  2958  0215                     	;# 
  2959  0216                     	;# 
  2960  0216                     	;# 
  2961  0217                     	;# 
  2962  0217                     	;# 
  2963  028C                     	;# 
  2964  028D                     	;# 
  2965  028E                     	;# 
  2966  0291                     	;# 
  2967  0291                     	;# 
  2968  0292                     	;# 
  2969  0293                     	;# 
  2970  0293                     	;# 
  2971  0298                     	;# 
  2972  0298                     	;# 
  2973  0299                     	;# 
  2974  029A                     	;# 
  2975  029A                     	;# 
  2976  029E                     	;# 
  2977  030C                     	;# 
  2978  030D                     	;# 
  2979  030E                     	;# 
  2980  038C                     	;# 
  2981  038D                     	;# 
  2982  038E                     	;# 
  2983  0391                     	;# 
  2984  0392                     	;# 
  2985  0393                     	;# 
  2986  0394                     	;# 
  2987  0395                     	;# 
  2988  0396                     	;# 
  2989  0397                     	;# 
  2990  0398                     	;# 
  2991  0399                     	;# 
  2992  0415                     	;# 
  2993  0416                     	;# 
  2994  0417                     	;# 
  2995  041C                     	;# 
  2996  041D                     	;# 
  2997  041E                     	;# 
  2998  0511                     	;# 
  2999  0515                     	;# 
  3000  0617                     	;# 
  3001  0618                     	;# 
  3002  0619                     	;# 
  3003  0619                     	;# 
  3004  061A                     	;# 
  3005  061B                     	;# 
  3006  061C                     	;# 
  3007  061C                     	;# 
  3008  0691                     	;# 
  3009  0692                     	;# 
  3010  0693                     	;# 
  3011  0694                     	;# 
  3012  0695                     	;# 
  3013  0696                     	;# 
  3014  0697                     	;# 
  3015  0698                     	;# 
  3016  0699                     	;# 
  3017  069A                     	;# 
  3018  069B                     	;# 
  3019  069C                     	;# 
  3020  069D                     	;# 
  3021  069E                     	;# 
  3022  069F                     	;# 
  3023  0E0F                     	;# 
  3024  0E10                     	;# 
  3025  0E11                     	;# 
  3026  0E12                     	;# 
  3027  0E13                     	;# 
  3028  0E14                     	;# 
  3029  0E15                     	;# 
  3030  0E17                     	;# 
  3031  0E20                     	;# 
  3032  0E21                     	;# 
  3033  0E22                     	;# 
  3034  0E24                     	;# 
  3035  0E25                     	;# 
  3036  0E28                     	;# 
  3037  0E29                     	;# 
  3038  0E2A                     	;# 
  3039  0E2B                     	;# 
  3040  0E90                     	;# 
  3041  0E91                     	;# 
  3042  0E92                     	;# 
  3043  0E94                     	;# 
  3044  0E95                     	;# 
  3045  0E9C                     	;# 
  3046  0E9D                     	;# 
  3047  0E9E                     	;# 
  3048  0E9F                     	;# 
  3049  0EA0                     	;# 
  3050  0EA1                     	;# 
  3051  0EA2                     	;# 
  3052  0EA3                     	;# 
  3053  0EA4                     	;# 
  3054  0EA5                     	;# 
  3055  0EA6                     	;# 
  3056  0EA7                     	;# 
  3057  0F0F                     	;# 
  3058  0F10                     	;# 
  3059  0F11                     	;# 
  3060  0F12                     	;# 
  3061  0F13                     	;# 
  3062  0F14                     	;# 
  3063  0F15                     	;# 
  3064  0F16                     	;# 
  3065  0F17                     	;# 
  3066  0F18                     	;# 
  3067  0F19                     	;# 
  3068  0F1A                     	;# 
  3069  0F1B                     	;# 
  3070  0F1C                     	;# 
  3071  0F1D                     	;# 
  3072  0F1E                     	;# 
  3073  0F1F                     	;# 
  3074  0F20                     	;# 
  3075  0F21                     	;# 
  3076  0F22                     	;# 
  3077  0F23                     	;# 
  3078  0F24                     	;# 
  3079  0F25                     	;# 
  3080  0F26                     	;# 
  3081  0F27                     	;# 
  3082  0F28                     	;# 
  3083  0F29                     	;# 
  3084  0F2A                     	;# 
  3085  0F2B                     	;# 
  3086  0F2C                     	;# 
  3087  0F2D                     	;# 
  3088  0FE4                     	;# 
  3089  0FE5                     	;# 
  3090  0FE6                     	;# 
  3091  0FE7                     	;# 
  3092  0FE8                     	;# 
  3093  0FE9                     	;# 
  3094  0FEA                     	;# 
  3095  0FEB                     	;# 
  3096  0FED                     	;# 
  3097  0FEE                     	;# 
  3098  0FEF                     	;# 
  3099                           
  3100 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3101  0000                     
  3102 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3103  0000                     
  3104 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3105  0000                     
  3106                           	psect	idataBANK0
  3107  0003                     __pidataBANK0:
  3108                           
  3109                           ;initializer for _currentIsOn
  3110  0003  3401               	retlw	1
  3111                           
  3112                           	psect	idataBANK1
  3113  0EFD                     __pidataBANK1:
  3114                           
  3115                           ;initializer for _maxFrequencyIndex
  3116  0EFD  3406               	retlw	6
  3117  0EFE  3400               	retlw	0
  3118                           
  3119                           ;initializer for _maxCurrentIndex
  3120  0EFF  340B               	retlw	11
  3121  0F00  3400               	retlw	0
  3122                           
  3123                           ;initializer for _frequencyValue
  3124  0F01  3400               	retlw	0
  3125  0F02  3400               	retlw	0
  3126  0F03  3432               	retlw	50
  3127  0F04  3400               	retlw	0
  3128  0F05  3464               	retlw	100
  3129  0F06  3400               	retlw	0
  3130  0F07  3478               	retlw	120
  3131  0F08  3400               	retlw	0
  3132  0F09  3482               	retlw	130
  3133  0F0A  3400               	retlw	0
  3134  0F0B  348C               	retlw	140
  3135  0F0C  3400               	retlw	0
  3136                           
  3137                           	psect	idataBANK2
  3138  0F1F                     __pidataBANK2:
  3139                           
  3140                           ;initializer for _currentValue
  3141  0F1F  3400               	retlw	0
  3142  0F20  3400               	retlw	0
  3143  0F21  341E               	retlw	30
  3144  0F22  3400               	retlw	0
  3145  0F23  3432               	retlw	50
  3146  0F24  3400               	retlw	0
  3147  0F25  3446               	retlw	70
  3148  0F26  3400               	retlw	0
  3149  0F27  345A               	retlw	90
  3150  0F28  3400               	retlw	0
  3151  0F29  346E               	retlw	110
  3152  0F2A  3400               	retlw	0
  3153  0F2B  3482               	retlw	130
  3154  0F2C  3400               	retlw	0
  3155  0F2D  34A0               	retlw	160
  3156  0F2E  3400               	retlw	0
  3157  0F2F  34BE               	retlw	190
  3158  0F30  3400               	retlw	0
  3159  0F31  34DC               	retlw	220
  3160  0F32  3400               	retlw	0
  3161  0F33  34FA               	retlw	250
  3162  0F34  3400               	retlw	0
  3163                           
  3164                           	psect	nvBANK0
  3165  004E                     __pnvBANK0:
  3166  004E                     _TMR4_InterruptHandler:
  3167  004E                     	ds	2
  3168  0050                     _INT_InterruptHandler:
  3169  0050                     	ds	2
  3170  0052                     _EUSART_ErrorHandler:
  3171  0052                     	ds	2
  3172  0054                     _EUSART_OverrunErrorHandler:
  3173  0054                     	ds	2
  3174  0056                     _EUSART_FramingErrorHandler:
  3175  0056                     	ds	2
  3176  001C                     _T2CONbits	set	28
  3177  001C                     _T2CON	set	28
  3178  001A                     _TMR2	set	26
  3179  001B                     _PR2	set	27
  3180  0015                     _TMR0	set	21
  3181  0011                     _PIR1bits	set	17
  3182  0012                     _PIR2bits	set	18
  3183  000B                     _INTCONbits	set	11
  3184  009D                     _ADCON0bits	set	157
  3185  009E                     _ADCON1	set	158
  3186  009D                     _ADCON0	set	157
  3187  0095                     _OPTION_REG	set	149
  3188  0092                     _PIE2bits	set	146
  3189  0095                     _OPTION_REGbits	set	149
  3190  008E                     _TRISC	set	142
  3191  008D                     _TRISB	set	141
  3192  008C                     _TRISA	set	140
  3193  0097                     _WDTCON	set	151
  3194  0098                     _OSCTUNE	set	152
  3195  009A                     _OSCSTAT	set	154
  3196  0099                     _OSCCON	set	153
  3197  009B                     _ADRES	set	155
  3198  0117                     _FVRCONbits	set	279
  3199  0117                     _FVRCON	set	279
  3200  010E                     _LATC	set	270
  3201  010D                     _LATB	set	269
  3202  010C                     _LATA	set	268
  3203  0116                     _BORCON	set	278
  3204  0119                     _DAC1CON1	set	281
  3205  0118                     _DAC1CON0	set	280
  3206  019A                     _TX1REG	set	410
  3207  0199                     _RC1REG	set	409
  3208  019D                     _RC1STAbits	set	413
  3209  019E                     _TX1STAbits	set	414
  3210  019C                     _SP1BRGH	set	412
  3211  019B                     _SP1BRGL	set	411
  3212  019E                     _TX1STA	set	414
  3213  019D                     _RC1STA	set	413
  3214  019F                     _BAUD1CON	set	415
  3215  018C                     _ANSELA	set	396
  3216  018D                     _ANSELB	set	397
  3217  018E                     _ANSELC	set	398
  3218  020E                     _WPUC	set	526
  3219  020C                     _WPUA	set	524
  3220  020D                     _WPUB	set	525
  3221  0291                     _CCPR1L	set	657
  3222  0293                     _CCP1CONbits	set	659
  3223  029E                     _CCPTMRSbits	set	670
  3224  028E                     _ODCONC	set	654
  3225  028D                     _ODCONB	set	653
  3226  028C                     _ODCONA	set	652
  3227  030E                     _SLRCONC	set	782
  3228  030D                     _SLRCONB	set	781
  3229  030C                     _SLRCONA	set	780
  3230  038E                     _INLVLC	set	910
  3231  038D                     _INLVLB	set	909
  3232  038C                     _INLVLA	set	908
  3233  0417                     _T4CONbits	set	1047
  3234  0417                     _T4CON	set	1047
  3235  0415                     _TMR4	set	1045
  3236  0416                     _PR4	set	1046
  3237  0515                     _OPA2CON	set	1301
  3238  0511                     _OPA1CON	set	1297
  3239  061C                     _PWM4CONbits	set	1564
  3240  061A                     _PWM4DCLbits	set	1562
  3241  061B                     _PWM4DCH	set	1563
  3242  0619                     _PWM3CONbits	set	1561
  3243  0617                     _PWM3DCLbits	set	1559
  3244  0618                     _PWM3DCH	set	1560
  3245  0E24                     _RXPPS	set	3620
  3246  0E10                     _INTPPS	set	3600
  3247  0EA5                     _RC5PPS	set	3749
  3248  0E95                     _RA5PPS	set	3733
  3249  0EA4                     _RC4PPS	set	3748
  3250  0E9F                     _RB7PPS	set	3743
  3251                           
  3252                           	psect	stringtext1
  3253  07EC                     __pstringtext1:
  3254  07EC                     STR_1:
  3255  07EC  340A               	retlw	10
  3256  07ED  3420               	retlw	32	;' '
  3257  07EE  3446               	retlw	70	;'F'
  3258  07EF  3472               	retlw	114	;'r'
  3259  07F0  3465               	retlw	101	;'e'
  3260  07F1  3471               	retlw	113	;'q'
  3261  07F2  3475               	retlw	117	;'u'
  3262  07F3  3465               	retlw	101	;'e'
  3263  07F4  346E               	retlw	110	;'n'
  3264  07F5  3463               	retlw	99	;'c'
  3265  07F6  3479               	retlw	121	;'y'
  3266  07F7  3420               	retlw	32	;' '
  3267  07F8  3473               	retlw	115	;'s'
  3268  07F9  3465               	retlw	101	;'e'
  3269  07FA  346C               	retlw	108	;'l'
  3270  07FB  3465               	retlw	101	;'e'
  3271  07FC  3463               	retlw	99	;'c'
  3272  07FD  3474               	retlw	116	;'t'
  3273  07FE  3465               	retlw	101	;'e'
  3274  07FF  3464               	retlw	100	;'d'
  3275  0800  3400               	retlw	0
  3276                           
  3277                           	psect	stringtext2
  3278  0801                     __pstringtext2:
  3279  0801                     STR_2:
  3280  0801  340A               	retlw	10
  3281  0802  3420               	retlw	32	;' '
  3282  0803  3463               	retlw	99	;'c'
  3283  0804  3475               	retlw	117	;'u'
  3284  0805  3472               	retlw	114	;'r'
  3285  0806  3472               	retlw	114	;'r'
  3286  0807  3465               	retlw	101	;'e'
  3287  0808  346E               	retlw	110	;'n'
  3288  0809  3474               	retlw	116	;'t'
  3289  080A  3420               	retlw	32	;' '
  3290  080B  3473               	retlw	115	;'s'
  3291  080C  3465               	retlw	101	;'e'
  3292  080D  346C               	retlw	108	;'l'
  3293  080E  3465               	retlw	101	;'e'
  3294  080F  3463               	retlw	99	;'c'
  3295  0810  3474               	retlw	116	;'t'
  3296  0811  3465               	retlw	101	;'e'
  3297  0812  3464               	retlw	100	;'d'
  3298  0813  3400               	retlw	0
  3299                           
  3300                           	psect	stringtext3
  3301  0814                     __pstringtext3:
  3302  0814                     STR_3:
  3303  0814  340A               	retlw	10
  3304  0815  3420               	retlw	32	;' '
  3305  0816  3472               	retlw	114	;'r'
  3306  0817  3465               	retlw	101	;'e'
  3307  0818  3473               	retlw	115	;'s'
  3308  0819  3465               	retlw	101	;'e'
  3309  081A  3474               	retlw	116	;'t'
  3310  081B  3420               	retlw	32	;' '
  3311  081C  3473               	retlw	115	;'s'
  3312  081D  3465               	retlw	101	;'e'
  3313  081E  346C               	retlw	108	;'l'
  3314  081F  3465               	retlw	101	;'e'
  3315  0820  3463               	retlw	99	;'c'
  3316  0821  3474               	retlw	116	;'t'
  3317  0822  3400               	retlw	0
  3318                           
  3319                           	psect	stringtext4
  3320  0000                     __pstringtext4:
  3321                           
  3322                           	psect	cinit
  3323  0022                     start_initialization:	
  3324                           ; #config settings
  3325                           
  3326  0022                     __initialization:
  3327                           
  3328                           ; Initialize objects allocated to BANK0
  3329  0022  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  3330  0025  00D8               	movwf	__pdataBANK0& (0+127)
  3331                           
  3332                           ; Initialize objects allocated to BANK1
  3333  0026  30FD               	movlw	low __pidataBANK1
  3334  0027  0084               	movwf	4
  3335  0028  308E               	movlw	(high __pidataBANK1)| (0+128)
  3336  0029  0085               	movwf	5
  3337  002A  30CF               	movlw	low __pdataBANK1
  3338  002B  0086               	movwf	6
  3339  002C  3000               	movlw	high __pdataBANK1
  3340  002D  0087               	movwf	7
  3341  002E  3010               	movlw	16
  3342  002F  318E  2684  3180   	fcall	init_ram
  3343                           
  3344                           ; Initialize objects allocated to BANK2
  3345  0032  301F               	movlw	low __pidataBANK2
  3346  0033  0084               	movwf	4
  3347  0034  308F               	movlw	(high __pidataBANK2)| (0+128)
  3348  0035  0085               	movwf	5
  3349  0036  3041               	movlw	low __pdataBANK2
  3350  0037  0086               	movwf	6
  3351  0038  3001               	movlw	high __pdataBANK2
  3352  0039  0087               	movwf	7
  3353  003A  3016               	movlw	22
  3354  003B  318E  2684  3180   	fcall	init_ram
  3355                           
  3356                           ; Clear objects allocated to COMMON
  3357  003E  01FD               	clrf	__pbssCOMMON& (0+127)
  3358                           
  3359                           ; Clear objects allocated to BANK0
  3360  003F  3040               	movlw	low __pbssBANK0
  3361  0040  0084               	movwf	4
  3362  0041  3000               	movlw	high __pbssBANK0
  3363  0042  0085               	movwf	5
  3364  0043  300E               	movlw	14
  3365  0044  318E  267E  3180   	fcall	clear_ram0
  3366                           
  3367                           ; Clear objects allocated to BANK1
  3368  0047  30DF               	movlw	low __pbssBANK1
  3369  0048  0084               	movwf	4
  3370  0049  3000               	movlw	high __pbssBANK1
  3371  004A  0085               	movwf	5
  3372  004B  300B               	movlw	11
  3373  004C  318E  267E  3180   	fcall	clear_ram0
  3374                           
  3375                           ; Clear objects allocated to BANK2
  3376  004F  3020               	movlw	low __pbssBANK2
  3377  0050  0084               	movwf	4
  3378  0051  3001               	movlw	high __pbssBANK2
  3379  0052  0085               	movwf	5
  3380  0053  3021               	movlw	33
  3381  0054  318E  267E         	fcall	clear_ram0
  3382  0056                     end_of_initialization:	
  3383                           ;End of C runtime variable initialization code
  3384                           
  3385  0056                     __end_of__initialization:
  3386  0056  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3387  0057  0020               	movlb	0
  3388  0058  3186  2ED5         	ljmp	_main	;jump to C main() function
  3389                           
  3390                           	psect	bssCOMMON
  3391  007D                     __pbssCOMMON:
  3392  007D                     _timer0ReloadVal:
  3393  007D                     	ds	1
  3394                           
  3395                           	psect	bssBANK0
  3396  0040                     __pbssBANK0:
  3397  0040                     _Vdd_mv:
  3398  0040                     	ds	2
  3399  0042                     _microamps:
  3400  0042                     	ds	2
  3401  0044                     _current:
  3402  0044                     	ds	1
  3403  0045                     _duty:
  3404  0045                     	ds	1
  3405  0046                     _frequency:
  3406  0046                     	ds	1
  3407  0047                     _eusartRxLastError:
  3408  0047                     	ds	1
  3409  0048                     _ir_code:
  3410  0048                     	ds	6
  3411                           
  3412                           	psect	dataBANK0
  3413  0058                     __pdataBANK0:
  3414  0058                     _currentIsOn:
  3415  0058                     	ds	1
  3416                           
  3417                           	psect	bssBANK1
  3418  00DF                     __pbssBANK1:
  3419  00DF                     _frequencyIndex:
  3420  00DF                     	ds	2
  3421  00E1                     _currentIndex:
  3422  00E1                     	ds	2
  3423  00E3                     _interfaceState:
  3424  00E3                     	ds	1
  3425  00E4                     _flag:
  3426  00E4                     	ds	1
  3427  00E5                     _LED_blue:
  3428  00E5                     	ds	1
  3429  00E6                     _LED_green:
  3430  00E6                     	ds	1
  3431  00E7                     _LED_red:
  3432  00E7                     	ds	1
  3433  00E8                     _Vdac_mv:
  3434  00E8                     	ds	2
  3435                           
  3436                           	psect	dataBANK1
  3437  00CF                     __pdataBANK1:
  3438  00CF                     _maxFrequencyIndex:
  3439  00CF                     	ds	2
  3440  00D1                     _maxCurrentIndex:
  3441  00D1                     	ds	2
  3442  00D3                     _frequencyValue:
  3443  00D3                     	ds	12
  3444                           
  3445                           	psect	bssBANK2
  3446  0120                     __pbssBANK2:
  3447  0120                     _stats:
  3448  0120                     	ds	33
  3449                           
  3450                           	psect	dataBANK2
  3451  0141                     __pdataBANK2:
  3452  0141                     _currentValue:
  3453  0141                     	ds	22
  3454                           
  3455                           	psect	inittext
  3456  0E84                     init_ram:
  3457  0E84  00FE               	movwf	126
  3458  0E85                     initloop:
  3459  0E85  0012               	moviw fsr0++
  3460  0E86  001E               	movwi fsr1++
  3461  0E87  0BFE               	decfsz	126,f
  3462  0E88  2E85               	goto	initloop
  3463  0E89  3400               	retlw	0
  3464                           
  3465                           	psect	clrtext
  3466  0E7E                     clear_ram0:	
  3467                           ;	Called with FSR0 containing the base address, and
  3468                           ;	WREG with the size to clear
  3469                           
  3470  0E7E  0064               	clrwdt	;clear the watchdog before getting into this loop
  3471  0E7F                     clrloop0:
  3472  0E7F  0180               	clrf	0	;clear RAM location pointed to by FSR
  3473  0E80  3101               	addfsr 0,1
  3474  0E81  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3475  0E82  2E7F               	goto	clrloop0	;have we reached the end yet?
  3476  0E83  3400               	retlw	0	;all done for this memory range, return
  3477                           
  3478                           	psect	cstackBANK1
  3479  00A0                     __pcstackBANK1:
  3480  00A0                     ??_PIN_MANAGER_Initialize:
  3481  00A0                     ??_OSCILLATOR_Initialize:	
  3482                           ; 1 bytes @ 0x0
  3483                           
  3484  00A0                     ??_WDT_Initialize:	
  3485                           ; 1 bytes @ 0x0
  3486                           
  3487  00A0                     ??_OPA1_Initialize:	
  3488                           ; 1 bytes @ 0x0
  3489                           
  3490  00A0                     ??_OPA2_Initialize:	
  3491                           ; 1 bytes @ 0x0
  3492                           
  3493  00A0                     ??_TMR2_Initialize:	
  3494                           ; 1 bytes @ 0x0
  3495                           
  3496  00A0                     ??_TMR0_Initialize:	
  3497                           ; 1 bytes @ 0x0
  3498                           
  3499  00A0                     ?_EUSART_SetFramingErrorHandler:	
  3500                           ; 1 bytes @ 0x0
  3501                           
  3502  00A0                     ?_EUSART_SetOverrunErrorHandler:	
  3503                           ; 1 bytes @ 0x0
  3504                           
  3505  00A0                     ?_EUSART_SetErrorHandler:	
  3506                           ; 1 bytes @ 0x0
  3507                           
  3508  00A0                     ?_TMR4_SetInterruptHandler:	
  3509                           ; 1 bytes @ 0x0
  3510                           
  3511  00A0                     ??_DAC_Initialize:	
  3512                           ; 1 bytes @ 0x0
  3513                           
  3514  00A0                     ??_EUSART_Write:	
  3515                           ; 1 bytes @ 0x0
  3516                           
  3517  00A0                     ?_INT_SetInterruptHandler:	
  3518                           ; 1 bytes @ 0x0
  3519                           
  3520  00A0                     ??_initLED:	
  3521                           ; 1 bytes @ 0x0
  3522                           
  3523  00A0                     ?_setLEDColor:	
  3524                           ; 1 bytes @ 0x0
  3525                           
  3526  00A0                     ?___awdiv:	
  3527                           ; 1 bytes @ 0x0
  3528                           
  3529  00A0                     ?___lmul:	
  3530                           ; 2 bytes @ 0x0
  3531                           
  3532  00A0                     EUSART_Write@txData:	
  3533                           ; 4 bytes @ 0x0
  3534                           
  3535  00A0                     setLEDColor@green:	
  3536                           ; 1 bytes @ 0x0
  3537                           
  3538  00A0                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3539                           ; 1 bytes @ 0x0
  3540                           
  3541  00A0                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3542                           ; 2 bytes @ 0x0
  3543                           
  3544  00A0                     EUSART_SetErrorHandler@interruptHandler:	
  3545                           ; 2 bytes @ 0x0
  3546                           
  3547  00A0                     INT_SetInterruptHandler@InterruptHandler:	
  3548                           ; 2 bytes @ 0x0
  3549                           
  3550  00A0                     TMR4_SetInterruptHandler@InterruptHandler:	
  3551                           ; 2 bytes @ 0x0
  3552                           
  3553  00A0                     ___awdiv@divisor:	
  3554                           ; 2 bytes @ 0x0
  3555                           
  3556  00A0                     ___lmul@multiplier:	
  3557                           ; 2 bytes @ 0x0
  3558                           
  3559                           
  3560                           ; 4 bytes @ 0x0
  3561  00A0                     	ds	1
  3562  00A1                     ??_putch:
  3563  00A1                     putch@txData:	
  3564                           ; 1 bytes @ 0x1
  3565                           
  3566  00A1                     setLEDColor@blue:	
  3567                           ; 1 bytes @ 0x1
  3568                           
  3569                           
  3570                           ; 1 bytes @ 0x1
  3571  00A1                     	ds	1
  3572  00A2                     ??_TMR4_Initialize:
  3573  00A2                     ??_EXT_INT_Initialize:	
  3574                           ; 1 bytes @ 0x2
  3575                           
  3576  00A2                     ??_EUSART_Initialize:	
  3577                           ; 1 bytes @ 0x2
  3578                           
  3579  00A2                     ??_EUSART_SetFramingErrorHandler:	
  3580                           ; 1 bytes @ 0x2
  3581                           
  3582  00A2                     ??_EUSART_SetOverrunErrorHandler:	
  3583                           ; 1 bytes @ 0x2
  3584                           
  3585  00A2                     ??_EUSART_SetErrorHandler:	
  3586                           ; 1 bytes @ 0x2
  3587                           
  3588  00A2                     ??_TMR4_SetInterruptHandler:	
  3589                           ; 1 bytes @ 0x2
  3590                           
  3591  00A2                     ??_SYSTEM_Initialize:	
  3592                           ; 1 bytes @ 0x2
  3593                           
  3594  00A2                     ??_INT_SetInterruptHandler:	
  3595                           ; 1 bytes @ 0x2
  3596                           
  3597  00A2                     ??_setLEDColor:	
  3598                           ; 1 bytes @ 0x2
  3599                           
  3600  00A2                     ?_printf:	
  3601                           ; 1 bytes @ 0x2
  3602                           
  3603  00A2                     printf@f:	
  3604                           ; 2 bytes @ 0x2
  3605                           
  3606  00A2                     ___awdiv@dividend:	
  3607                           ; 2 bytes @ 0x2
  3608                           
  3609                           
  3610                           ; 2 bytes @ 0x2
  3611  00A2                     	ds	1
  3612  00A3                     setLEDColor@red:
  3613                           
  3614                           ; 1 bytes @ 0x3
  3615  00A3                     	ds	1
  3616  00A4                     ??_printf:
  3617  00A4                     ??_lowBattery:	
  3618                           ; 1 bytes @ 0x4
  3619                           
  3620  00A4                     ??_startUp:	
  3621                           ; 1 bytes @ 0x4
  3622                           
  3623  00A4                     ??_selectSomething:	
  3624                           ; 1 bytes @ 0x4
  3625                           
  3626  00A4                     ??___awdiv:	
  3627                           ; 1 bytes @ 0x4
  3628                           
  3629  00A4                     ___lmul@multiplicand:	
  3630                           ; 1 bytes @ 0x4
  3631                           
  3632                           
  3633                           ; 4 bytes @ 0x4
  3634  00A4                     	ds	1
  3635  00A5                     ___awdiv@counter:
  3636                           
  3637                           ; 1 bytes @ 0x5
  3638  00A5                     	ds	1
  3639  00A6                     ___awdiv@sign:
  3640  00A6                     startUp@i:	
  3641                           ; 1 bytes @ 0x6
  3642                           
  3643                           
  3644                           ; 2 bytes @ 0x6
  3645  00A6                     	ds	1
  3646  00A7                     printf@ap:
  3647  00A7                     ___awdiv@quotient:	
  3648                           ; 1 bytes @ 0x7
  3649                           
  3650                           
  3651                           ; 2 bytes @ 0x7
  3652  00A7                     	ds	1
  3653  00A8                     ??___lmul:
  3654  00A8                     printf@c:	
  3655                           ; 1 bytes @ 0x8
  3656                           
  3657  00A8                     ___lmul@product:	
  3658                           ; 1 bytes @ 0x8
  3659                           
  3660                           
  3661                           ; 4 bytes @ 0x8
  3662  00A8                     	ds	1
  3663  00A9                     ??_selectFrequency:
  3664  00A9                     ??_selectCurrent:	
  3665                           ; 1 bytes @ 0x9
  3666                           
  3667                           
  3668                           ; 1 bytes @ 0x9
  3669  00A9                     	ds	3
  3670  00AC                     ?___lldiv:
  3671  00AC                     ?___aldiv:	
  3672                           ; 4 bytes @ 0xC
  3673                           
  3674  00AC                     ___lldiv@divisor:	
  3675                           ; 4 bytes @ 0xC
  3676                           
  3677  00AC                     ___aldiv@divisor:	
  3678                           ; 4 bytes @ 0xC
  3679                           
  3680                           
  3681                           ; 4 bytes @ 0xC
  3682  00AC                     	ds	4
  3683  00B0                     ___lldiv@dividend:
  3684  00B0                     ___aldiv@dividend:	
  3685                           ; 4 bytes @ 0x10
  3686                           
  3687                           
  3688                           ; 4 bytes @ 0x10
  3689  00B0                     	ds	4
  3690  00B4                     ??___lldiv:
  3691  00B4                     ??___aldiv:	
  3692                           ; 1 bytes @ 0x14
  3693                           
  3694                           
  3695                           ; 1 bytes @ 0x14
  3696  00B4                     	ds	1
  3697  00B5                     ___aldiv@counter:
  3698  00B5                     ___lldiv@quotient:	
  3699                           ; 1 bytes @ 0x15
  3700                           
  3701                           
  3702                           ; 4 bytes @ 0x15
  3703  00B5                     	ds	1
  3704  00B6                     ___aldiv@sign:
  3705                           
  3706                           ; 1 bytes @ 0x16
  3707  00B6                     	ds	1
  3708  00B7                     ___aldiv@quotient:
  3709                           
  3710                           ; 4 bytes @ 0x17
  3711  00B7                     	ds	2
  3712  00B9                     ___lldiv@counter:
  3713                           
  3714                           ; 1 bytes @ 0x19
  3715  00B9                     	ds	2
  3716  00BB                     ?_setFrequency:
  3717  00BB                     ?_battery_voltage:	
  3718                           ; 1 bytes @ 0x1B
  3719                           
  3720  00BB                     setFrequency@frequency_hz:	
  3721                           ; 2 bytes @ 0x1B
  3722                           
  3723                           
  3724                           ; 2 bytes @ 0x1B
  3725  00BB                     	ds	2
  3726  00BD                     ??_battery_voltage:
  3727  00BD                     ?_setCurrent:	
  3728                           ; 1 bytes @ 0x1D
  3729                           
  3730  00BD                     ??_setFrequency:	
  3731                           ; 1 bytes @ 0x1D
  3732                           
  3733  00BD                     setCurrent@microamps:	
  3734                           ; 1 bytes @ 0x1D
  3735                           
  3736                           
  3737                           ; 2 bytes @ 0x1D
  3738  00BD                     	ds	1
  3739  00BE                     setFrequency@pr4_val:
  3740                           
  3741                           ; 2 bytes @ 0x1E
  3742  00BE                     	ds	1
  3743  00BF                     setCurrent@Vdd_mv:
  3744                           
  3745                           ; 2 bytes @ 0x1F
  3746  00BF                     	ds	2
  3747  00C1                     ??_setCurrent:
  3748                           
  3749                           ; 1 bytes @ 0x21
  3750  00C1                     	ds	8
  3751  00C9                     setCurrent@DACValue:
  3752                           
  3753                           ; 2 bytes @ 0x29
  3754  00C9                     	ds	2
  3755  00CB                     ??_process_remote_command:
  3756                           
  3757                           ; 1 bytes @ 0x2B
  3758  00CB                     	ds	2
  3759  00CD                     process_remote_command@code:
  3760                           
  3761                           ; 1 bytes @ 0x2D
  3762  00CD                     	ds	1
  3763  00CE                     ??_main:
  3764                           
  3765                           ; 1 bytes @ 0x2E
  3766  00CE                     	ds	1
  3767                           
  3768                           	psect	cstackCOMMON
  3769  0070                     __pcstackCOMMON:
  3770  0070                     ?_PIN_MANAGER_Initialize:
  3771  0070                     ?_OSCILLATOR_Initialize:	
  3772                           ; 1 bytes @ 0x0
  3773                           
  3774  0070                     ?_WDT_Initialize:	
  3775                           ; 1 bytes @ 0x0
  3776                           
  3777  0070                     ?_OPA1_Initialize:	
  3778                           ; 1 bytes @ 0x0
  3779                           
  3780  0070                     ?_OPA2_Initialize:	
  3781                           ; 1 bytes @ 0x0
  3782                           
  3783  0070                     ?_TMR4_Initialize:	
  3784                           ; 1 bytes @ 0x0
  3785                           
  3786  0070                     ?_TMR2_Initialize:	
  3787                           ; 1 bytes @ 0x0
  3788                           
  3789  0070                     ?_EXT_INT_Initialize:	
  3790                           ; 1 bytes @ 0x0
  3791                           
  3792  0070                     ?_TMR0_Initialize:	
  3793                           ; 1 bytes @ 0x0
  3794                           
  3795  0070                     ?_EUSART_Initialize:	
  3796                           ; 1 bytes @ 0x0
  3797                           
  3798  0070                     ?_INT_ISR:	
  3799                           ; 1 bytes @ 0x0
  3800                           
  3801  0070                     ?_TMR4_ISR:	
  3802                           ; 1 bytes @ 0x0
  3803                           
  3804  0070                     ?_INT_CallBack:	
  3805                           ; 1 bytes @ 0x0
  3806                           
  3807  0070                     ?_TMR4_DefaultInterruptHandler:	
  3808                           ; 1 bytes @ 0x0
  3809                           
  3810  0070                     ?_DAC_Initialize:	
  3811                           ; 1 bytes @ 0x0
  3812                           
  3813  0070                     ?_SYSTEM_Initialize:	
  3814                           ; 1 bytes @ 0x0
  3815                           
  3816  0070                     ?_PIN_MANAGER_IOC:	
  3817                           ; 1 bytes @ 0x0
  3818                           
  3819  0070                     ??_PIN_MANAGER_IOC:	
  3820                           ; 1 bytes @ 0x0
  3821                           
  3822  0070                     ?_INTERRUPT_InterruptManager:	
  3823                           ; 1 bytes @ 0x0
  3824                           
  3825  0070                     ?_EUSART_Write:	
  3826                           ; 1 bytes @ 0x0
  3827                           
  3828  0070                     ?_putch:	
  3829                           ; 1 bytes @ 0x0
  3830                           
  3831  0070                     ?_INT_DefaultInterruptHandler:	
  3832                           ; 1 bytes @ 0x0
  3833                           
  3834  0070                     ??_INT_DefaultInterruptHandler:	
  3835                           ; 1 bytes @ 0x0
  3836                           
  3837  0070                     ?_initLED:	
  3838                           ; 1 bytes @ 0x0
  3839                           
  3840  0070                     ?_lowBattery:	
  3841                           ; 1 bytes @ 0x0
  3842                           
  3843  0070                     ?_startUp:	
  3844                           ; 1 bytes @ 0x0
  3845                           
  3846  0070                     ?_selectSomething:	
  3847                           ; 1 bytes @ 0x0
  3848                           
  3849  0070                     ?_selectFrequency:	
  3850                           ; 1 bytes @ 0x0
  3851                           
  3852  0070                     ?_selectCurrent:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855  0070                     ?_process_remote_command:	
  3856                           ; 1 bytes @ 0x0
  3857                           
  3858  0070                     ?_main:	
  3859                           ; 1 bytes @ 0x0
  3860                           
  3861  0070                     ?i1___awdiv:	
  3862                           ; 1 bytes @ 0x0
  3863                           
  3864  0070                     ?i1___lmul:	
  3865                           ; 2 bytes @ 0x0
  3866                           
  3867  0070                     i1___awdiv@divisor:	
  3868                           ; 4 bytes @ 0x0
  3869                           
  3870  0070                     i1___lmul@multiplier:	
  3871                           ; 2 bytes @ 0x0
  3872                           
  3873                           
  3874                           ; 4 bytes @ 0x0
  3875  0070                     	ds	1
  3876  0071                     INT_DefaultInterruptHandler@time:
  3877                           
  3878                           ; 1 bytes @ 0x1
  3879  0071                     	ds	1
  3880  0072                     ??_INT_ISR:
  3881  0072                     ??_INT_CallBack:	
  3882                           ; 1 bytes @ 0x2
  3883                           
  3884  0072                     i1___awdiv@dividend:	
  3885                           ; 1 bytes @ 0x2
  3886                           
  3887                           
  3888                           ; 2 bytes @ 0x2
  3889  0072                     	ds	2
  3890  0074                     ??i1___awdiv:
  3891  0074                     i1___lmul@multiplicand:	
  3892                           ; 1 bytes @ 0x4
  3893                           
  3894                           
  3895                           ; 4 bytes @ 0x4
  3896  0074                     	ds	1
  3897  0075                     i1___awdiv@counter:
  3898                           
  3899                           ; 1 bytes @ 0x5
  3900  0075                     	ds	1
  3901  0076                     i1___awdiv@sign:
  3902                           
  3903                           ; 1 bytes @ 0x6
  3904  0076                     	ds	1
  3905  0077                     i1___awdiv@quotient:
  3906                           
  3907                           ; 2 bytes @ 0x7
  3908  0077                     	ds	1
  3909  0078                     ??i1___lmul:
  3910  0078                     i1___lmul@product:	
  3911                           ; 1 bytes @ 0x8
  3912                           
  3913                           
  3914                           ; 4 bytes @ 0x8
  3915  0078                     	ds	1
  3916  0079                     ??i1___aldiv:
  3917                           
  3918                           ; 1 bytes @ 0x9
  3919  0079                     	ds	1
  3920  007A                     ??i1_battery_voltage:
  3921                           
  3922                           ; 1 bytes @ 0xA
  3923  007A                     	ds	2
  3924  007C                     ??i1___lldiv:
  3925                           
  3926                           ; 1 bytes @ 0xC
  3927  007C                     	ds	1
  3928  007D                     ??_TMR4_ISR:
  3929  007D                     ??_INTERRUPT_InterruptManager:	
  3930                           ; 1 bytes @ 0xD
  3931                           
  3932                           
  3933                           	psect	cstackBANK0
  3934  0020                     __pcstackBANK0:	
  3935                           ; 1 bytes @ 0xD
  3936                           
  3937  0020                     ?i1___lldiv:
  3938  0020                     ?i1___aldiv:	
  3939                           ; 4 bytes @ 0x0
  3940                           
  3941  0020                     i1___lldiv@divisor:	
  3942                           ; 4 bytes @ 0x0
  3943                           
  3944  0020                     i1___aldiv@divisor:	
  3945                           ; 4 bytes @ 0x0
  3946                           
  3947                           
  3948                           ; 4 bytes @ 0x0
  3949  0020                     	ds	4
  3950  0024                     i1___lldiv@dividend:
  3951  0024                     i1___aldiv@dividend:	
  3952                           ; 4 bytes @ 0x4
  3953                           
  3954                           
  3955                           ; 4 bytes @ 0x4
  3956  0024                     	ds	4
  3957  0028                     i1___aldiv@counter:
  3958  0028                     i1___lldiv@quotient:	
  3959                           ; 1 bytes @ 0x8
  3960                           
  3961                           
  3962                           ; 4 bytes @ 0x8
  3963  0028                     	ds	1
  3964  0029                     i1___aldiv@sign:
  3965                           
  3966                           ; 1 bytes @ 0x9
  3967  0029                     	ds	1
  3968  002A                     i1___aldiv@quotient:
  3969                           
  3970                           ; 4 bytes @ 0xA
  3971  002A                     	ds	2
  3972  002C                     i1___lldiv@counter:
  3973                           
  3974                           ; 1 bytes @ 0xC
  3975  002C                     	ds	2
  3976  002E                     ?i1_battery_voltage:
  3977                           
  3978                           ; 2 bytes @ 0xE
  3979  002E                     	ds	2
  3980  0030                     ?i1_setCurrent:
  3981  0030                     i1setCurrent@microamps:	
  3982                           ; 1 bytes @ 0x10
  3983                           
  3984                           
  3985                           ; 2 bytes @ 0x10
  3986  0030                     	ds	2
  3987  0032                     i1setCurrent@Vdd_mv:
  3988                           
  3989                           ; 2 bytes @ 0x12
  3990  0032                     	ds	2
  3991  0034                     ??i1_setCurrent:
  3992                           
  3993                           ; 1 bytes @ 0x14
  3994  0034                     	ds	8
  3995  003C                     i1setCurrent@DACValue:
  3996                           
  3997                           ; 2 bytes @ 0x1C
  3998  003C                     	ds	2
  3999  003E                     ??_TMR4_DefaultInterruptHandler:
  4000                           
  4001                           ; 1 bytes @ 0x1E
  4002  003E                     	ds	2
  4003                           
  4004                           	psect	maintext
  4005  06D5                     __pmaintext:	
  4006 ;;
  4007 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4008 ;;
  4009 ;; *************** function _main *****************
  4010 ;; Defined at:
  4011 ;;		line 380 in file "main.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;		None
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;		None
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : B1F/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4025 ;;      Params:         0       0       0       0       0       0       0       0
  4026 ;;      Locals:         0       0       0       0       0       0       0       0
  4027 ;;      Temps:          0       0       1       0       0       0       0       0
  4028 ;;      Totals:         0       0       1       0       0       0       0       0
  4029 ;;Total ram usage:        1 bytes
  4030 ;; Hardware stack levels required when called:   10
  4031 ;; This function calls:
  4032 ;;		_DAC_Initialize
  4033 ;;		_OPA1_Initialize
  4034 ;;		_OPA2_Initialize
  4035 ;;		_SYSTEM_Initialize
  4036 ;;		_battery_voltage
  4037 ;;		_initLED
  4038 ;;		_lowBattery
  4039 ;;		_process_remote_command
  4040 ;;		_startUp
  4041 ;; This function is called by:
  4042 ;;		Startup code after reset
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           
  4047                           ;psect for function _main
  4048  06D5                     _main:
  4049                           
  4050                           ;main.c: 383: SYSTEM_Initialize();
  4051                           
  4052                           ;incstack = 0
  4053                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4054  06D5  318F  2769  3186   	fcall	_SYSTEM_Initialize
  4055                           
  4056                           ;main.c: 384: DAC_Initialize();
  4057  06D8  318E  2672  3186   	fcall	_DAC_Initialize
  4058                           
  4059                           ;main.c: 385: OPA1_Initialize();
  4060  06DB  318E  2666  3186   	fcall	_OPA1_Initialize
  4061                           
  4062                           ;main.c: 386: OPA2_Initialize();
  4063  06DE  318E  266A  3186   	fcall	_OPA2_Initialize
  4064                           
  4065                           ;main.c: 387: initLED();
  4066  06E1  3185  25EB  3186   	fcall	_initLED
  4067                           
  4068                           ;main.c: 388: (INTCONbits.GIE = 1);
  4069  06E4  178B               	bsf	11,7	;volatile
  4070                           
  4071                           ;main.c: 389: (INTCONbits.PEIE = 1);
  4072  06E5  170B               	bsf	11,6	;volatile
  4073                           
  4074                           ;main.c: 390: startUp();
  4075  06E6  3186  262F  3186   	fcall	_startUp
  4076  06E9                     l523:	
  4077                           ;main.c: 401: while(1){
  4078                           
  4079                           
  4080                           ;main.c: 403: if ((int)battery_voltage() < 2500)
  4081  06E9  3187  27C1  3186   	fcall	_battery_voltage
  4082  06EC  0021               	movlb	1	; select bank1
  4083  06ED  083C               	movf	(?_battery_voltage+1)^(0+128),w
  4084  06EE  3A80               	xorlw	128
  4085  06EF  00CE               	movwf	??_main^(0+128)
  4086  06F0  3089               	movlw	137
  4087  06F1  024E               	subwf	??_main^(0+128),w
  4088  06F2  1D03               	skipz
  4089  06F3  2EF6               	goto	u2715
  4090  06F4  30C4               	movlw	196
  4091  06F5  023B               	subwf	?_battery_voltage^(0+128),w
  4092  06F6                     u2715:
  4093  06F6  1803               	skipnc
  4094  06F7  2EFB               	goto	l3037
  4095                           
  4096                           ;main.c: 404: {;main.c: 405: lowBattery();
  4097  06F8  3187  2794  3186   	fcall	_lowBattery
  4098  06FB                     l3037:
  4099                           
  4100                           ;main.c: 407: };main.c: 413: if (STATE_DONE == ir_code.state){
  4101  06FB  3002               	movlw	2
  4102  06FC  0020               	movlb	0	; select bank0
  4103  06FD  0649               	xorwf	_ir_code+1,w
  4104  06FE  1D03               	btfss	3,2
  4105  06FF  2EE9               	goto	l523
  4106                           
  4107                           ;main.c: 431: process_remote_command(&ir_code);
  4108  0700  3048               	movlw	(low (_ir_code| 0))& (0+255)
  4109  0701  3180  205A  3186   	fcall	_process_remote_command
  4110                           
  4111                           ;main.c: 434: ir_code.state = STATE_RESET;
  4112  0704  0020               	movlb	0	; select bank0
  4113  0705  01C9               	clrf	_ir_code+1
  4114  0706  2EE9               	goto	l523
  4115  0707                     __end_of_main:
  4116                           
  4117                           	psect	text1
  4118  062F                     __ptext1:	
  4119 ;; *************** function _startUp *****************
  4120 ;; Defined at:
  4121 ;;		line 186 in file "main.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  i               2    6[BANK1 ] int 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0, pclath, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4135 ;;      Params:         0       0       0       0       0       0       0       0
  4136 ;;      Locals:         0       0       2       0       0       0       0       0
  4137 ;;      Temps:          0       0       2       0       0       0       0       0
  4138 ;;      Totals:         0       0       4       0       0       0       0       0
  4139 ;;Total ram usage:        4 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    6
  4142 ;; This function calls:
  4143 ;;		_setLEDColor
  4144 ;; This function is called by:
  4145 ;;		_main
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           
  4150                           ;psect for function _startUp
  4151  062F                     _startUp:
  4152                           
  4153                           ;main.c: 187: interfaceState = STATE_RUNNING;
  4154                           
  4155                           ;incstack = 0
  4156                           ; Regs used in _startUp: [wreg+status,2+status,0+pclath+cstack]
  4157  062F  0021               	movlb	1	; select bank1
  4158  0630  01E3               	clrf	_interfaceState^(0+128)
  4159                           
  4160                           ;main.c: 188: for (int i = 0; i < 5; i++){
  4161  0631  01A6               	clrf	startUp@i^(0+128)
  4162  0632  01A7               	clrf	(startUp@i+1)^(0+128)
  4163  0633                     l2941:
  4164                           
  4165                           ;main.c: 189: setLEDColor(0, 180, 230);
  4166  0633  30B4               	movlw	180
  4167  0634  0021               	movlb	1	; select bank1
  4168  0635  00A4               	movwf	??_startUp^(0+128)
  4169  0636  0824               	movf	??_startUp^(0+128),w
  4170  0637  00A0               	movwf	setLEDColor@green^(0+128)
  4171  0638  30E6               	movlw	230
  4172  0639  00A5               	movwf	(??_startUp+1)^(0+128)
  4173  063A  0825               	movf	(??_startUp+1)^(0+128),w
  4174  063B  00A1               	movwf	setLEDColor@blue^(0+128)
  4175  063C  3000               	movlw	0
  4176  063D  318F  2735  3186   	fcall	_setLEDColor
  4177                           
  4178                           ;main.c: 190: _delay((unsigned long)((100)*(4000000/4000.0)));
  4179  0640  3082               	movlw	130
  4180  0641  0021               	movlb	1	; select bank1
  4181  0642  00A4               	movwf	??_startUp^(0+128)
  4182  0643  30DD               	movlw	221
  4183  0644                     u2737:
  4184  0644  0B89               	decfsz	9,f
  4185  0645  2E44               	goto	u2737
  4186  0646  0BA4               	decfsz	??_startUp^(0+128),f
  4187  0647  2E44               	goto	u2737
  4188  0648  3200               	nop2
  4189                           
  4190                           ;main.c: 191: setLEDColor(0, 0, 0);
  4191  0649  0021               	movlb	1	; select bank1
  4192  064A  01A0               	clrf	setLEDColor@green^(0+128)
  4193  064B  01A1               	clrf	setLEDColor@blue^(0+128)
  4194  064C  3000               	movlw	0
  4195  064D  318F  2735  3186   	fcall	_setLEDColor
  4196                           
  4197                           ;main.c: 192: _delay((unsigned long)((100)*(4000000/4000.0)));
  4198  0650  3082               	movlw	130
  4199  0651  0021               	movlb	1	; select bank1
  4200  0652  00A4               	movwf	??_startUp^(0+128)
  4201  0653  30DD               	movlw	221
  4202  0654                     u2747:
  4203  0654  0B89               	decfsz	9,f
  4204  0655  2E54               	goto	u2747
  4205  0656  0BA4               	decfsz	??_startUp^(0+128),f
  4206  0657  2E54               	goto	u2747
  4207  0658  3200               	nop2
  4208  0659  3001               	movlw	1
  4209  065A  0021               	movlb	1	; select bank1
  4210  065B  07A6               	addwf	startUp@i^(0+128),f
  4211  065C  3000               	movlw	0
  4212  065D  3DA7               	addwfc	(startUp@i+1)^(0+128),f
  4213  065E  0827               	movf	(startUp@i+1)^(0+128),w
  4214  065F  3A80               	xorlw	128
  4215  0660  00A4               	movwf	??_startUp^(0+128)
  4216  0661  3080               	movlw	128
  4217  0662  0224               	subwf	??_startUp^(0+128),w
  4218  0663  1D03               	skipz
  4219  0664  2E67               	goto	u2585
  4220  0665  3005               	movlw	5
  4221  0666  0226               	subwf	startUp@i^(0+128),w
  4222  0667                     u2585:
  4223  0667  1C03               	skipc
  4224  0668  2E33               	goto	l2941
  4225                           
  4226                           ;main.c: 193: };main.c: 194: duty = 0;
  4227  0669  0020               	movlb	0	; select bank0
  4228  066A  01C5               	clrf	_duty
  4229  066B  0008               	return
  4230  066C                     __end_of_startUp:
  4231                           
  4232                           	psect	text2
  4233  005A                     __ptext2:	
  4234 ;; *************** function _process_remote_command *****************
  4235 ;; Defined at:
  4236 ;;		line 285 in file "main.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  code            1    wreg     PTR struct .
  4239 ;;		 -> ir_code(6), 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  code            1   45[BANK1 ] PTR struct .
  4242 ;;		 -> ir_code(6), 
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  1    wreg      void 
  4245 ;; Registers used:
  4246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4252 ;;      Params:         0       0       0       0       0       0       0       0
  4253 ;;      Locals:         0       0       1       0       0       0       0       0
  4254 ;;      Temps:          0       0       2       0       0       0       0       0
  4255 ;;      Totals:         0       0       3       0       0       0       0       0
  4256 ;;Total ram usage:        3 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:    9
  4259 ;; This function calls:
  4260 ;;		_battery_voltage
  4261 ;;		_printf
  4262 ;;		_selectCurrent
  4263 ;;		_selectFrequency
  4264 ;;		_selectSomething
  4265 ;;		_setCurrent
  4266 ;;		_setFrequency
  4267 ;;		_setLEDColor
  4268 ;; This function is called by:
  4269 ;;		_main
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           
  4274                           ;psect for function _process_remote_command
  4275  005A                     _process_remote_command:
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4279                           ;process_remote_command@code stored from wreg
  4280  005A  0021               	movlb	1	; select bank1
  4281  005B  00CD               	movwf	process_remote_command@code^(0+128)
  4282                           
  4283                           ;main.c: 286: setLEDColor(0, 0, 0);
  4284  005C  01A0               	clrf	setLEDColor@green^(0+128)
  4285  005D  01A1               	clrf	setLEDColor@blue^(0+128)
  4286  005E  3000               	movlw	0
  4287  005F  318F  2735  3180   	fcall	_setLEDColor
  4288                           
  4289                           ;main.c: 288: switch(code->command){
  4290  0062  2913               	goto	l3021
  4291  0063                     l2951:
  4292                           
  4293                           ;main.c: 290: if(STATE_CURRENT == interfaceState){
  4294  0063  0363               	decf	_interfaceState^(0+128),w
  4295  0064  1D03               	btfss	3,2
  4296  0065  288F               	goto	l2959
  4297                           
  4298                           ;main.c: 291: currentIndex++;
  4299  0066  3001               	movlw	1
  4300  0067  07E1               	addwf	_currentIndex^(0+128),f
  4301  0068  3000               	movlw	0
  4302  0069  3DE2               	addwfc	(_currentIndex+1)^(0+128),f
  4303                           
  4304                           ;main.c: 292: if (currentIndex > maxCurrentIndex - 1)
  4305  006A  0862               	movf	(_currentIndex+1)^(0+128),w
  4306  006B  3A80               	xorlw	128
  4307  006C  00CB               	movwf	??_process_remote_command^(0+128)
  4308  006D  3080               	movlw	128
  4309  006E  024B               	subwf	??_process_remote_command^(0+128),w
  4310  006F  1D03               	skipz
  4311  0070  2873               	goto	u2605
  4312  0071  300B               	movlw	11
  4313  0072  0261               	subwf	_currentIndex^(0+128),w
  4314  0073                     u2605:
  4315  0073  1C03               	skipc
  4316  0074  287A               	goto	l2957
  4317                           
  4318                           ;main.c: 293: {;main.c: 294: currentIndex = maxCurrentIndex - 1;
  4319  0075  300A               	movlw	10
  4320  0076  0021               	movlb	1	; select bank1
  4321  0077  00E1               	movwf	_currentIndex^(0+128)
  4322  0078  3000               	movlw	0
  4323  0079  00E2               	movwf	(_currentIndex^(0+128)+1)
  4324  007A                     l2957:
  4325                           
  4326                           ;main.c: 295: };main.c: 296: setCurrent(currentValue[currentIndex],battery_voltage());
  4327  007A  0021               	movlb	1	; select bank1
  4328  007B  3561               	lslf	_currentIndex^(0+128),w
  4329  007C  3E41               	addlw	(low (_currentValue| (0+256)))& (0+255)
  4330  007D  0086               	movwf	6
  4331  007E  3001               	movlw	1	; select bank2/3
  4332  007F  0087               	movwf	7
  4333  0080  3F40               	moviw [0]fsr1
  4334  0081  00BD               	movwf	setCurrent@microamps^(0+128)
  4335  0082  3F41               	moviw [1]fsr1
  4336  0083  00BE               	movwf	(setCurrent@microamps+1)^(0+128)
  4337  0084  3187  27C1  3180   	fcall	_battery_voltage
  4338  0087  0021               	movlb	1	; select bank1
  4339  0088  083C               	movf	(?_battery_voltage+1)^(0+128),w
  4340  0089  00C0               	movwf	(setCurrent@Vdd_mv+1)^(0+128)
  4341  008A  083B               	movf	?_battery_voltage^(0+128),w
  4342  008B  00BF               	movwf	setCurrent@Vdd_mv^(0+128)
  4343  008C  3182  2206  3180   	fcall	_setCurrent
  4344  008F                     l2959:
  4345                           
  4346                           ;main.c: 297: };main.c: 298: if(STATE_FREQUENCY == interfaceState){
  4347  008F  3002               	movlw	2
  4348  0090  0021               	movlb	1	; select bank1
  4349  0091  0663               	xorwf	_interfaceState^(0+128),w
  4350  0092  1D03               	btfss	3,2
  4351  0093  28B4               	goto	l2967
  4352                           
  4353                           ;main.c: 299: frequencyIndex++;
  4354  0094  3001               	movlw	1
  4355  0095  07DF               	addwf	_frequencyIndex^(0+128),f
  4356  0096  3000               	movlw	0
  4357  0097  3DE0               	addwfc	(_frequencyIndex+1)^(0+128),f
  4358                           
  4359                           ;main.c: 300: if (frequencyIndex > maxFrequencyIndex - 1)
  4360  0098  0860               	movf	(_frequencyIndex+1)^(0+128),w
  4361  0099  3A80               	xorlw	128
  4362  009A  00CB               	movwf	??_process_remote_command^(0+128)
  4363  009B  3080               	movlw	128
  4364  009C  024B               	subwf	??_process_remote_command^(0+128),w
  4365  009D  1D03               	skipz
  4366  009E  28A1               	goto	u2625
  4367  009F  3006               	movlw	6
  4368  00A0  025F               	subwf	_frequencyIndex^(0+128),w
  4369  00A1                     u2625:
  4370  00A1  1C03               	skipc
  4371  00A2  28A8               	goto	l2965
  4372                           
  4373                           ;main.c: 301: {;main.c: 302: frequencyIndex = maxFrequencyIndex - 1;
  4374  00A3  3005               	movlw	5
  4375  00A4  0021               	movlb	1	; select bank1
  4376  00A5  00DF               	movwf	_frequencyIndex^(0+128)
  4377  00A6  3000               	movlw	0
  4378  00A7  00E0               	movwf	(_frequencyIndex^(0+128)+1)
  4379  00A8                     l2965:
  4380                           
  4381                           ;main.c: 303: };main.c: 304: setFrequency(frequencyValue[frequencyIndex]);
  4382  00A8  0021               	movlb	1	; select bank1
  4383  00A9  355F               	lslf	_frequencyIndex^(0+128),w
  4384  00AA  3ED3               	addlw	(low (_frequencyValue| 0))& (0+255)
  4385  00AB  0086               	movwf	6
  4386  00AC  0187               	clrf	7
  4387  00AD  3F40               	moviw [0]fsr1
  4388  00AE  00BB               	movwf	setFrequency@frequency_hz^(0+128)
  4389  00AF  3F41               	moviw [1]fsr1
  4390  00B0                     L1:
  4391  00B0  00BC               	movwf	(setFrequency@frequency_hz+1)^(0+128)
  4392  00B1  3185  25A7  3180   	fcall	_setFrequency
  4393  00B4                     l2967:
  4394                           
  4395                           ;main.c: 305: };main.c: 306: if(STATE_RUNNING == interfaceState){
  4396  00B4  0021               	movlb	1	; select bank1
  4397  00B5  0863               	movf	_interfaceState^(0+128),w
  4398  00B6  1D03               	btfss	3,2
  4399  00B7  28BB               	goto	l2971
  4400                           
  4401                           ;main.c: 307: selectSomething();
  4402  00B8  3185  2505  3180   	fcall	_selectSomething
  4403  00BB                     l2971:
  4404                           
  4405                           ;main.c: 308: };main.c: 309: if(STATE_LOWBATTERY == interfaceState){
  4406  00BB  3003               	movlw	3
  4407  00BC  0021               	movlb	1	; select bank1
  4408  00BD  0663               	xorwf	_interfaceState^(0+128),w
  4409  00BE  1D03               	btfss	3,2
  4410  00BF  2941               	goto	l3023
  4411                           
  4412                           ;main.c: 310: selectSomething();
  4413  00C0  3185  2505  3180   	fcall	_selectSomething
  4414  00C3  2941               	goto	l3023
  4415  00C4                     l2975:
  4416                           
  4417                           ;main.c: 314: if(STATE_CURRENT == interfaceState){
  4418  00C4  0363               	decf	_interfaceState^(0+128),w
  4419  00C5  1D03               	btfss	3,2
  4420  00C6  28E3               	goto	l2985
  4421                           
  4422                           ;main.c: 315: currentIndex--;
  4423  00C7  30FF               	movlw	255
  4424  00C8  07E1               	addwf	_currentIndex^(0+128),f
  4425  00C9  30FF               	movlw	255
  4426  00CA  3DE2               	addwfc	(_currentIndex+1)^(0+128),f
  4427                           
  4428                           ;main.c: 316: if (currentIndex < 0)
  4429  00CB  1FE2               	btfss	(_currentIndex+1)^(0+128),7
  4430  00CC  28CF               	goto	l2983
  4431                           
  4432                           ;main.c: 317: {;main.c: 318: currentIndex = 0;
  4433  00CD  01E1               	clrf	_currentIndex^(0+128)
  4434  00CE  01E2               	clrf	(_currentIndex+1)^(0+128)
  4435  00CF                     l2983:
  4436                           
  4437                           ;main.c: 319: };main.c: 320: setCurrent(currentValue[currentIndex],battery_voltage());
  4438  00CF  3561               	lslf	_currentIndex^(0+128),w
  4439  00D0  3E41               	addlw	(low (_currentValue| (0+256)))& (0+255)
  4440  00D1  0086               	movwf	6
  4441  00D2  3001               	movlw	1	; select bank2/3
  4442  00D3  0087               	movwf	7
  4443  00D4  3F40               	moviw [0]fsr1
  4444  00D5  00BD               	movwf	setCurrent@microamps^(0+128)
  4445  00D6  3F41               	moviw [1]fsr1
  4446  00D7  00BE               	movwf	(setCurrent@microamps+1)^(0+128)
  4447  00D8  3187  27C1  3180   	fcall	_battery_voltage
  4448  00DB  0021               	movlb	1	; select bank1
  4449  00DC  083C               	movf	(?_battery_voltage+1)^(0+128),w
  4450  00DD  00C0               	movwf	(setCurrent@Vdd_mv+1)^(0+128)
  4451  00DE  083B               	movf	?_battery_voltage^(0+128),w
  4452  00DF  00BF               	movwf	setCurrent@Vdd_mv^(0+128)
  4453  00E0  3182  2206  3180   	fcall	_setCurrent
  4454  00E3                     l2985:
  4455                           
  4456                           ;main.c: 321: };main.c: 322: if(STATE_FREQUENCY == interfaceState){
  4457  00E3  3002               	movlw	2
  4458  00E4  0021               	movlb	1	; select bank1
  4459  00E5  0663               	xorwf	_interfaceState^(0+128),w
  4460  00E6  1D03               	btfss	3,2
  4461  00E7  28B4               	goto	l2967
  4462                           
  4463                           ;main.c: 323: frequencyIndex--;
  4464  00E8  30FF               	movlw	255
  4465  00E9  07DF               	addwf	_frequencyIndex^(0+128),f
  4466  00EA  30FF               	movlw	255
  4467  00EB  3DE0               	addwfc	(_frequencyIndex+1)^(0+128),f
  4468                           
  4469                           ;main.c: 324: if (frequencyIndex < 0)
  4470  00EC  1FE0               	btfss	(_frequencyIndex+1)^(0+128),7
  4471  00ED  28F0               	goto	l2993
  4472                           
  4473                           ;main.c: 325: {;main.c: 326: frequencyIndex = 0;
  4474  00EE  01DF               	clrf	_frequencyIndex^(0+128)
  4475  00EF  01E0               	clrf	(_frequencyIndex+1)^(0+128)
  4476  00F0                     l2993:
  4477                           
  4478                           ;main.c: 327: };main.c: 328: setFrequency(frequencyValue[frequencyIndex]);
  4479  00F0  355F               	lslf	_frequencyIndex^(0+128),w
  4480  00F1  3ED3               	addlw	(low (_frequencyValue| 0))& (0+255)
  4481  00F2  0086               	movwf	6
  4482  00F3  0187               	clrf	7
  4483  00F4  3F40               	moviw [0]fsr1
  4484  00F5  00BB               	movwf	setFrequency@frequency_hz^(0+128)
  4485  00F6  3F41               	moviw [1]fsr1
  4486  00F7  28B0               	goto	L1
  4487  00F8                     l3003:	
  4488                           ;main.c: 332: };main.c: 333: if(STATE_LOWBATTERY == interfaceState){
  4489                           
  4490                           ;main.c: 331: selectSomething();
  4491                           
  4492                           ;main.c: 329: };main.c: 330: if(STATE_RUNNING == interfaceState){
  4493                           
  4494                           
  4495                           ;main.c: 338: selectFrequency();
  4496  00F8  318F  27D6  3180   	fcall	_selectFrequency
  4497                           
  4498                           ;main.c: 339: break;
  4499  00FB  2941               	goto	l3023
  4500  00FC                     l3005:
  4501                           
  4502                           ;main.c: 341: selectCurrent();
  4503  00FC  318F  27AE  3180   	fcall	_selectCurrent
  4504                           
  4505                           ;main.c: 342: break;
  4506  00FF  2941               	goto	l3023
  4507  0100                     l3007:
  4508                           
  4509                           ;main.c: 344: LED_red = 0;
  4510  0100  01E7               	clrf	_LED_red^(0+128)
  4511                           
  4512                           ;main.c: 345: LED_green = 255;
  4513  0101  30FF               	movlw	255
  4514  0102  00CB               	movwf	??_process_remote_command^(0+128)
  4515  0103  084B               	movf	??_process_remote_command^(0+128),w
  4516  0104  00E6               	movwf	_LED_green^(0+128)
  4517                           
  4518                           ;main.c: 346: LED_blue = 0;
  4519  0105  01E5               	clrf	_LED_blue^(0+128)
  4520                           
  4521                           ;main.c: 347: printf("\n reset select");
  4522  0106  3014               	movlw	low (STR_3| (0+32768))
  4523  0107  00A2               	movwf	printf@f^(0+128)
  4524  0108  3088               	movlw	high (STR_3| (0+32768))
  4525  0109  00A3               	movwf	(printf@f^(0+128)+1)
  4526  010A  318F  274C  3180   	fcall	_printf
  4527                           
  4528                           ;main.c: 348: flag = 0;
  4529  010D  0021               	movlb	1	; select bank1
  4530  010E  01E4               	clrf	_flag^(0+128)
  4531                           
  4532                           ;main.c: 349: break;
  4533  010F  2941               	goto	l3023
  4534  0110                     l3017:
  4535                           
  4536                           ;main.c: 351: duty = 0;
  4537  0110  0020               	movlb	0	; select bank0
  4538  0111  01C5               	clrf	_duty
  4539                           
  4540                           ;main.c: 352: break;
  4541  0112  2941               	goto	l3023
  4542  0113                     l3021:
  4543  0113  0021               	movlb	1	; select bank1
  4544  0114  084D               	movf	process_remote_command@code^(0+128),w
  4545  0115  3E03               	addlw	3
  4546  0116  0086               	movwf	6
  4547  0117  0187               	clrf	7
  4548  0118  0801               	movf	1,w
  4549                           
  4550                           ; Switch size 1, requested type "simple"
  4551                           ; Number of cases is 13, Range of values is 8 to 176
  4552                           ; switch strategies available:
  4553                           ; Name         Instructions Cycles
  4554                           ; simple_byte           40    21 (average)
  4555                           ; jumptable            263     9 (fixed)
  4556                           ;	Chosen strategy is simple_byte
  4557  0119  3A08               	xorlw	8	; case 8
  4558  011A  1903               	skipnz
  4559  011B  2900               	goto	l3007
  4560  011C  3A18               	xorlw	24	; case 16
  4561  011D  1903               	skipnz
  4562  011E  28FC               	goto	l3005
  4563  011F  3A08               	xorlw	8	; case 24
  4564  0120  1903               	skipnz
  4565  0121  2941               	goto	l3023
  4566  0122  3A30               	xorlw	48	; case 40
  4567  0123  1903               	skipnz
  4568  0124  2941               	goto	l3023
  4569  0125  3A60               	xorlw	96	; case 72
  4570  0126  1903               	skipnz
  4571  0127  2941               	goto	l3023
  4572  0128  3A18               	xorlw	24	; case 80
  4573  0129  1903               	skipnz
  4574  012A  28F8               	goto	l3003
  4575  012B  3A08               	xorlw	8	; case 88
  4576  012C  1903               	skipnz
  4577  012D  2941               	goto	l3023
  4578  012E  3A30               	xorlw	48	; case 104
  4579  012F  1903               	skipnz
  4580  0130  2941               	goto	l3023
  4581  0131  3AE0               	xorlw	224	; case 136
  4582  0132  1903               	skipnz
  4583  0133  2910               	goto	l3017
  4584  0134  3A10               	xorlw	16	; case 152
  4585  0135  1903               	skipnz
  4586  0136  2941               	goto	l3023
  4587  0137  3A38               	xorlw	56	; case 160
  4588  0138  1903               	skipnz
  4589  0139  2863               	goto	l2951
  4590  013A  3A08               	xorlw	8	; case 168
  4591  013B  1903               	skipnz
  4592  013C  2941               	goto	l3023
  4593  013D  3A18               	xorlw	24	; case 176
  4594  013E  1903               	skipnz
  4595  013F  28C4               	goto	l2975
  4596  0140  2941               	goto	l3023
  4597  0141                     l3023:
  4598                           
  4599                           ;main.c: 371: setLEDColor(LED_red, LED_green, LED_blue);
  4600  0141  0021               	movlb	1	; select bank1
  4601  0142  0866               	movf	_LED_green^(0+128),w
  4602  0143  00CB               	movwf	??_process_remote_command^(0+128)
  4603  0144  084B               	movf	??_process_remote_command^(0+128),w
  4604  0145  00A0               	movwf	setLEDColor@green^(0+128)
  4605  0146  0865               	movf	_LED_blue^(0+128),w
  4606  0147  00CC               	movwf	(??_process_remote_command+1)^(0+128)
  4607  0148  084C               	movf	(??_process_remote_command+1)^(0+128),w
  4608  0149  00A1               	movwf	setLEDColor@blue^(0+128)
  4609  014A  0867               	movf	_LED_red^(0+128),w
  4610  014B  318F  2735  3180   	fcall	_setLEDColor
  4611                           
  4612                           ;main.c: 372: _delay((unsigned long)((1000)*(4000000/4000.0)));
  4613  014E  3006               	movlw	6
  4614  014F  0021               	movlb	1	; select bank1
  4615  0150  00CC               	movwf	(??_process_remote_command^(0+128)+1)
  4616  0151  3013               	movlw	19
  4617  0152  00CB               	movwf	??_process_remote_command^(0+128)
  4618  0153  30AD               	movlw	173
  4619  0154                     u2757:
  4620  0154  0B89               	decfsz	9,f
  4621  0155  2954               	goto	u2757
  4622  0156  0BCB               	decfsz	??_process_remote_command^(0+128),f
  4623  0157  2954               	goto	u2757
  4624  0158  0BCC               	decfsz	(??_process_remote_command^(0+128)+1),f
  4625  0159  2954               	goto	u2757
  4626  015A  3200               	nop2
  4627                           
  4628                           ;main.c: 373: setLEDColor(0, 0, 0);
  4629  015B  0021               	movlb	1	; select bank1
  4630  015C  01A0               	clrf	setLEDColor@green^(0+128)
  4631  015D  01A1               	clrf	setLEDColor@blue^(0+128)
  4632  015E  3000               	movlw	0
  4633  015F  318F  2735         	fcall	_setLEDColor
  4634  0161  0008               	return
  4635  0162                     __end_of_process_remote_command:
  4636                           
  4637                           	psect	text3
  4638  05A7                     __ptext3:	
  4639 ;; *************** function _setFrequency *****************
  4640 ;; Defined at:
  4641 ;;		line 246 in file "main.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  frequency_hz    2   27[BANK1 ] unsigned int 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  pr4_val         2   30[BANK1 ] int 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      void 
  4648 ;; Registers used:
  4649 ;;		wreg, status,2, status,0, pclath, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4655 ;;      Params:         0       0       2       0       0       0       0       0
  4656 ;;      Locals:         0       0       2       0       0       0       0       0
  4657 ;;      Temps:          0       0       1       0       0       0       0       0
  4658 ;;      Totals:         0       0       5       0       0       0       0       0
  4659 ;;Total ram usage:        5 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    6
  4662 ;; This function calls:
  4663 ;;		___aldiv
  4664 ;;		___lmul
  4665 ;; This function is called by:
  4666 ;;		_process_remote_command
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           
  4671                           ;psect for function _setFrequency
  4672  05A7                     _setFrequency:
  4673                           
  4674                           ;main.c: 262: int16_t pr4_val = 1000000L / (96L * frequency_hz);
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  4678  05A7  0021               	movlb	1	; select bank1
  4679  05A8  083B               	movf	setFrequency@frequency_hz^(0+128),w
  4680  05A9  00A0               	movwf	___lmul@multiplier^(0+128)
  4681  05AA  083C               	movf	(setFrequency@frequency_hz+1)^(0+128),w
  4682  05AB  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
  4683  05AC  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
  4684  05AD  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
  4685  05AE  3000               	movlw	0
  4686  05AF  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  4687  05B0  3000               	movlw	0
  4688  05B1  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  4689  05B2  3000               	movlw	0
  4690  05B3  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  4691  05B4  3060               	movlw	96
  4692  05B5  00A4               	movwf	___lmul@multiplicand^(0+128)
  4693  05B6  3187  2707  3185   	fcall	___lmul
  4694  05B9  0021               	movlb	1	; select bank1
  4695  05BA  0823               	movf	(?___lmul+3)^(0+128),w
  4696  05BB  00AF               	movwf	(___aldiv@divisor+3)^(0+128)
  4697  05BC  0822               	movf	(?___lmul+2)^(0+128),w
  4698  05BD  00AE               	movwf	(___aldiv@divisor+2)^(0+128)
  4699  05BE  0821               	movf	(?___lmul+1)^(0+128),w
  4700  05BF  00AD               	movwf	(___aldiv@divisor+1)^(0+128)
  4701  05C0  0820               	movf	?___lmul^(0+128),w
  4702  05C1  00AC               	movwf	___aldiv@divisor^(0+128)
  4703  05C2  3000               	movlw	0
  4704  05C3  00B3               	movwf	(___aldiv@dividend+3)^(0+128)
  4705  05C4  300F               	movlw	15
  4706  05C5  00B2               	movwf	(___aldiv@dividend+2)^(0+128)
  4707  05C6  3042               	movlw	66
  4708  05C7  00B1               	movwf	(___aldiv@dividend+1)^(0+128)
  4709  05C8  3040               	movlw	64
  4710  05C9  00B0               	movwf	___aldiv@dividend^(0+128)
  4711  05CA  3182  22A2  3185   	fcall	___aldiv
  4712  05CD  0021               	movlb	1	; select bank1
  4713  05CE  082D               	movf	(?___aldiv+1)^(0+128),w
  4714  05CF  00BF               	movwf	(setFrequency@pr4_val+1)^(0+128)
  4715  05D0  082C               	movf	?___aldiv^(0+128),w
  4716  05D1  00BE               	movwf	setFrequency@pr4_val^(0+128)
  4717                           
  4718                           ;main.c: 263: if (pr4_val > 255){
  4719  05D2  083F               	movf	(setFrequency@pr4_val+1)^(0+128),w
  4720  05D3  3A80               	xorlw	128
  4721  05D4  00BD               	movwf	??_setFrequency^(0+128)
  4722  05D5  3081               	movlw	129
  4723  05D6  023D               	subwf	??_setFrequency^(0+128),w
  4724  05D7  1D03               	skipz
  4725  05D8  2DDB               	goto	u2565
  4726  05D9  3000               	movlw	0
  4727  05DA  023E               	subwf	setFrequency@pr4_val^(0+128),w
  4728  05DB                     u2565:
  4729  05DB  1C03               	skipc
  4730  05DC  2DE2               	goto	l2877
  4731                           
  4732                           ;main.c: 264: pr4_val = 255;
  4733  05DD  30FF               	movlw	255
  4734  05DE  0021               	movlb	1	; select bank1
  4735  05DF  00BE               	movwf	setFrequency@pr4_val^(0+128)
  4736  05E0  3000               	movlw	0
  4737  05E1  00BF               	movwf	(setFrequency@pr4_val^(0+128)+1)
  4738  05E2                     l2877:
  4739                           
  4740                           ;main.c: 265: };main.c: 266: if (pr4_val < 0){
  4741  05E2  0021               	movlb	1	; select bank1
  4742  05E3  1FBF               	btfss	(setFrequency@pr4_val+1)^(0+128),7
  4743  05E4  2DE7               	goto	l2881
  4744                           
  4745                           ;main.c: 267: pr4_val = 0;
  4746  05E5  01BE               	clrf	setFrequency@pr4_val^(0+128)
  4747  05E6  01BF               	clrf	(setFrequency@pr4_val+1)^(0+128)
  4748  05E7                     l2881:
  4749                           
  4750                           ;main.c: 268: };main.c: 269: PR4 = pr4_val;
  4751  05E7  083E               	movf	setFrequency@pr4_val^(0+128),w
  4752  05E8  0028               	movlb	8	; select bank8
  4753  05E9  0096               	movwf	22	;volatile
  4754  05EA  0008               	return
  4755  05EB                     __end_of_setFrequency:
  4756                           
  4757                           	psect	text4
  4758  0206                     __ptext4:	
  4759 ;; *************** function _setCurrent *****************
  4760 ;; Defined at:
  4761 ;;		line 235 in file "main.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  microamps       2   29[BANK1 ] int 
  4764 ;;  Vdd_mv          2   31[BANK1 ] int 
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;  DACValue        2   41[BANK1 ] int 
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      void 
  4769 ;; Registers used:
  4770 ;;		wreg, status,2, status,0, pclath, cstack
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4776 ;;      Params:         0       0       4       0       0       0       0       0
  4777 ;;      Locals:         0       0       2       0       0       0       0       0
  4778 ;;      Temps:          0       0       8       0       0       0       0       0
  4779 ;;      Totals:         0       0      14       0       0       0       0       0
  4780 ;;Total ram usage:       14 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    6
  4783 ;; This function calls:
  4784 ;;		___aldiv
  4785 ;;		___awdiv
  4786 ;;		___lldiv
  4787 ;;		___lmul
  4788 ;; This function is called by:
  4789 ;;		_process_remote_command
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           
  4794                           ;psect for function _setCurrent
  4795  0206                     _setCurrent:
  4796                           
  4797                           ;main.c: 237: Vdac_mv = Vdd_mv - ((uint32_t)(4700) * microamps + 500) / 1000;
  4798                           
  4799                           ;incstack = 0
  4800                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  4801  0206  3000               	movlw	0
  4802  0207  0021               	movlb	1	; select bank1
  4803  0208  00AF               	movwf	(___lldiv@divisor+3)^(0+128)
  4804  0209  3000               	movlw	0
  4805  020A  00AE               	movwf	(___lldiv@divisor+2)^(0+128)
  4806  020B  3003               	movlw	3
  4807  020C  00AD               	movwf	(___lldiv@divisor+1)^(0+128)
  4808  020D  30E8               	movlw	232
  4809  020E  00AC               	movwf	___lldiv@divisor^(0+128)
  4810  020F  30F4               	movlw	244
  4811  0210  00C1               	movwf	??_setCurrent^(0+128)
  4812  0211  3001               	movlw	1
  4813  0212  00C2               	movwf	(??_setCurrent^(0+128)+1)
  4814  0213  3000               	movlw	0
  4815  0214  00C3               	movwf	(??_setCurrent^(0+128)+2)
  4816  0215  3000               	movlw	0
  4817  0216  00C4               	movwf	(??_setCurrent^(0+128)+3)
  4818  0217  083D               	movf	setCurrent@microamps^(0+128),w
  4819  0218  00A0               	movwf	___lmul@multiplier^(0+128)
  4820  0219  083E               	movf	(setCurrent@microamps+1)^(0+128),w
  4821  021A  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  4822  021B  0D89               	rlf	9,f
  4823  021C  3B89               	subwfb	9,f
  4824  021D  0989               	comf	9,f
  4825  021E  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  4826  021F  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  4827  0220  3000               	movlw	0
  4828  0221  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  4829  0222  3000               	movlw	0
  4830  0223  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  4831  0224  3012               	movlw	18
  4832  0225  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  4833  0226  305C               	movlw	92
  4834  0227  00A4               	movwf	___lmul@multiplicand^(0+128)
  4835  0228  3187  2707  3182   	fcall	___lmul
  4836  022B  0021               	movlb	1	; select bank1
  4837  022C  0820               	movf	?___lmul^(0+128),w
  4838  022D  07C1               	addwf	??_setCurrent^(0+128),f
  4839  022E  0821               	movf	(?___lmul+1)^(0+128),w
  4840  022F  3DC2               	addwfc	(??_setCurrent^(0+128)+1),f
  4841  0230  0822               	movf	(?___lmul+2)^(0+128),w
  4842  0231  3DC3               	addwfc	(??_setCurrent^(0+128)+2),f
  4843  0232  0823               	movf	(?___lmul+3)^(0+128),w
  4844  0233  3DC4               	addwfc	(??_setCurrent^(0+128)+3),f
  4845  0234  0844               	movf	(??_setCurrent+3)^(0+128),w
  4846  0235  00B3               	movwf	(___lldiv@dividend+3)^(0+128)
  4847  0236  0843               	movf	(??_setCurrent+2)^(0+128),w
  4848  0237  00B2               	movwf	(___lldiv@dividend+2)^(0+128)
  4849  0238  0842               	movf	(??_setCurrent+1)^(0+128),w
  4850  0239  00B1               	movwf	(___lldiv@dividend+1)^(0+128)
  4851  023A  0841               	movf	??_setCurrent^(0+128),w
  4852  023B  00B0               	movwf	___lldiv@dividend^(0+128)
  4853  023C  3184  240D  3182   	fcall	___lldiv
  4854  023F  0021               	movlb	1	; select bank1
  4855  0240  082C               	movf	?___lldiv^(0+128),w
  4856  0241  023F               	subwf	setCurrent@Vdd_mv^(0+128),w
  4857  0242  00E8               	movwf	_Vdac_mv^(0+128)
  4858  0243  082D               	movf	(?___lldiv+1)^(0+128),w
  4859  0244  3B40               	subwfb	(setCurrent@Vdd_mv+1)^(0+128),w
  4860  0245  00E9               	movwf	(_Vdac_mv+1)^(0+128)
  4861                           
  4862                           ;main.c: 238: int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  4863  0246  083F               	movf	setCurrent@Vdd_mv^(0+128),w
  4864  0247  00AC               	movwf	___aldiv@divisor^(0+128)
  4865  0248  0840               	movf	(setCurrent@Vdd_mv+1)^(0+128),w
  4866  0249  00AD               	movwf	(___aldiv@divisor+1)^(0+128)
  4867  024A  0D89               	rlf	9,f
  4868  024B  3B89               	subwfb	9,f
  4869  024C  0989               	comf	9,f
  4870  024D  00AE               	movwf	(___aldiv@divisor+2)^(0+128)
  4871  024E  00AF               	movwf	(___aldiv@divisor+3)^(0+128)
  4872  024F  3002               	movlw	2
  4873  0250  00A0               	movwf	___awdiv@divisor^(0+128)
  4874  0251  3000               	movlw	0
  4875  0252  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  4876  0253  0840               	movf	(setCurrent@Vdd_mv+1)^(0+128),w
  4877  0254  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  4878  0255  083F               	movf	setCurrent@Vdd_mv^(0+128),w
  4879  0256  00A2               	movwf	___awdiv@dividend^(0+128)
  4880  0257  3184  24B3  3182   	fcall	___awdiv
  4881  025A  0021               	movlb	1	; select bank1
  4882  025B  0820               	movf	?___awdiv^(0+128),w
  4883  025C  00C1               	movwf	??_setCurrent^(0+128)
  4884  025D  0821               	movf	(?___awdiv+1)^(0+128),w
  4885  025E  00C2               	movwf	(??_setCurrent^(0+128)+1)
  4886  025F  3000               	movlw	0
  4887  0260  1BC2               	btfsc	(??_setCurrent^(0+128)+1),7
  4888  0261  30FF               	movlw	255
  4889  0262  00C3               	movwf	(??_setCurrent^(0+128)+2)
  4890  0263  00C4               	movwf	(??_setCurrent^(0+128)+3)
  4891  0264  0868               	movf	_Vdac_mv^(0+128),w
  4892  0265  00C5               	movwf	(??_setCurrent+4)^(0+128)
  4893  0266  0869               	movf	(_Vdac_mv+1)^(0+128),w
  4894  0267  00C6               	movwf	((??_setCurrent+4)^(0+128)+1)
  4895  0268  01C7               	clrf	((??_setCurrent+4)^(0+128)+2)
  4896  0269  01C8               	clrf	((??_setCurrent+4)^(0+128)+3)
  4897  026A  3008               	movlw	8
  4898  026B                     u2535:
  4899  026B  35C5               	lslf	(??_setCurrent+4)^(0+128),f
  4900  026C  0DC6               	rlf	((??_setCurrent+4)^(0+128)+1),f
  4901  026D  0DC7               	rlf	((??_setCurrent+4)^(0+128)+2),f
  4902  026E  0DC8               	rlf	((??_setCurrent+4)^(0+128)+3),f
  4903  026F  0B89               	decfsz	9,f
  4904  0270  2A6B               	goto	u2535
  4905  0271  0845               	movf	(??_setCurrent+4)^(0+128),w
  4906  0272  07C1               	addwf	??_setCurrent^(0+128),f
  4907  0273  0846               	movf	(??_setCurrent+5)^(0+128),w
  4908  0274  3DC2               	addwfc	(??_setCurrent^(0+128)+1),f
  4909  0275  0847               	movf	(??_setCurrent+6)^(0+128),w
  4910  0276  3DC3               	addwfc	(??_setCurrent^(0+128)+2),f
  4911  0277  0848               	movf	(??_setCurrent+7)^(0+128),w
  4912  0278  3DC4               	addwfc	(??_setCurrent^(0+128)+3),f
  4913  0279  0844               	movf	(??_setCurrent+3)^(0+128),w
  4914  027A  00B3               	movwf	(___aldiv@dividend+3)^(0+128)
  4915  027B  0843               	movf	(??_setCurrent+2)^(0+128),w
  4916  027C  00B2               	movwf	(___aldiv@dividend+2)^(0+128)
  4917  027D  0842               	movf	(??_setCurrent+1)^(0+128),w
  4918  027E  00B1               	movwf	(___aldiv@dividend+1)^(0+128)
  4919  027F  0841               	movf	??_setCurrent^(0+128),w
  4920  0280  00B0               	movwf	___aldiv@dividend^(0+128)
  4921  0281  3182  22A2  3182   	fcall	___aldiv
  4922  0284  0021               	movlb	1	; select bank1
  4923  0285  082D               	movf	(?___aldiv+1)^(0+128),w
  4924  0286  00CA               	movwf	(setCurrent@DACValue+1)^(0+128)
  4925  0287  082C               	movf	?___aldiv^(0+128),w
  4926  0288  00C9               	movwf	setCurrent@DACValue^(0+128)
  4927                           
  4928                           ;main.c: 239: if(DACValue > 255){DACValue = 255;}
  4929  0289  084A               	movf	(setCurrent@DACValue+1)^(0+128),w
  4930  028A  3A80               	xorlw	128
  4931  028B  00C1               	movwf	??_setCurrent^(0+128)
  4932  028C  3081               	movlw	129
  4933  028D  0241               	subwf	??_setCurrent^(0+128),w
  4934  028E  1D03               	skipz
  4935  028F  2A92               	goto	u2545
  4936  0290  3000               	movlw	0
  4937  0291  0249               	subwf	setCurrent@DACValue^(0+128),w
  4938  0292                     u2545:
  4939  0292  1C03               	skipc
  4940  0293  2A99               	goto	l2865
  4941  0294  30FF               	movlw	255
  4942  0295  0021               	movlb	1	; select bank1
  4943  0296  00C9               	movwf	setCurrent@DACValue^(0+128)
  4944  0297  3000               	movlw	0
  4945  0298  00CA               	movwf	(setCurrent@DACValue^(0+128)+1)
  4946  0299                     l2865:
  4947                           
  4948                           ;main.c: 240: if(DACValue < 0){DACValue = 0;}
  4949  0299  0021               	movlb	1	; select bank1
  4950  029A  1FCA               	btfss	(setCurrent@DACValue+1)^(0+128),7
  4951  029B  2A9E               	goto	l2869
  4952  029C  01C9               	clrf	setCurrent@DACValue^(0+128)
  4953  029D  01CA               	clrf	(setCurrent@DACValue+1)^(0+128)
  4954  029E                     l2869:
  4955                           
  4956                           ;main.c: 241: DAC1CON1 = DACValue;
  4957  029E  0849               	movf	setCurrent@DACValue^(0+128),w
  4958  029F  0022               	movlb	2	; select bank2
  4959  02A0  0099               	movwf	25	;volatile
  4960  02A1  0008               	return
  4961  02A2                     __end_of_setCurrent:
  4962                           
  4963                           	psect	text5
  4964  0707                     __ptext5:	
  4965 ;; *************** function ___lmul *****************
  4966 ;; Defined at:
  4967 ;;		line 15 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/Umul32.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  multiplier      4    0[BANK1 ] unsigned long 
  4970 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  product         4    8[BANK1 ] unsigned long 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  4    0[BANK1 ] unsigned long 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4982 ;;      Params:         0       0       8       0       0       0       0       0
  4983 ;;      Locals:         0       0       4       0       0       0       0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0
  4985 ;;      Totals:         0       0      12       0       0       0       0       0
  4986 ;;Total ram usage:       12 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    5
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_setCurrent
  4993 ;;		_setFrequency
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           
  4998                           ;psect for function ___lmul
  4999  0707                     ___lmul:
  5000                           
  5001                           ;incstack = 0
  5002                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5003  0707  3000               	movlw	0
  5004  0708  0021               	movlb	1	; select bank1
  5005  0709  00AB               	movwf	(___lmul@product+3)^(0+128)
  5006  070A  3000               	movlw	0
  5007  070B  00AA               	movwf	(___lmul@product+2)^(0+128)
  5008  070C  3000               	movlw	0
  5009  070D  00A9               	movwf	(___lmul@product+1)^(0+128)
  5010  070E  3000               	movlw	0
  5011  070F  00A8               	movwf	___lmul@product^(0+128)
  5012  0710                     l2675:
  5013  0710  1C20               	btfss	___lmul@multiplier^(0+128),0
  5014  0711  2F1A               	goto	l2679
  5015  0712  0824               	movf	___lmul@multiplicand^(0+128),w
  5016  0713  07A8               	addwf	___lmul@product^(0+128),f
  5017  0714  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  5018  0715  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
  5019  0716  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  5020  0717  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
  5021  0718  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  5022  0719  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
  5023  071A                     l2679:
  5024  071A  3001               	movlw	1
  5025  071B                     u2385:
  5026  071B  35A4               	lslf	___lmul@multiplicand^(0+128),f
  5027  071C  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  5028  071D  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  5029  071E  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  5030  071F  0B89               	decfsz	9,f
  5031  0720  2F1B               	goto	u2385
  5032  0721  3001               	movlw	1
  5033  0722                     u2395:
  5034  0722  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
  5035  0723  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  5036  0724  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  5037  0725  0CA0               	rrf	___lmul@multiplier^(0+128),f
  5038  0726  0B89               	decfsz	9,f
  5039  0727  2F22               	goto	u2395
  5040  0728  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  5041  0729  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  5042  072A  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  5043  072B  0420               	iorwf	___lmul@multiplier^(0+128),w
  5044  072C  1D03               	skipz
  5045  072D  2F10               	goto	l2675
  5046  072E  082B               	movf	(___lmul@product+3)^(0+128),w
  5047  072F  00A3               	movwf	(?___lmul+3)^(0+128)
  5048  0730  082A               	movf	(___lmul@product+2)^(0+128),w
  5049  0731  00A2               	movwf	(?___lmul+2)^(0+128)
  5050  0732  0829               	movf	(___lmul@product+1)^(0+128),w
  5051  0733  00A1               	movwf	(?___lmul+1)^(0+128)
  5052  0734  0828               	movf	___lmul@product^(0+128),w
  5053  0735  00A0               	movwf	?___lmul^(0+128)
  5054  0736  0008               	return
  5055  0737                     __end_of___lmul:
  5056                           
  5057                           	psect	text6
  5058  040D                     __ptext6:	
  5059 ;; *************** function ___lldiv *****************
  5060 ;; Defined at:
  5061 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/__lldiv.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  divisor         4   12[BANK1 ] unsigned long 
  5064 ;;  dividend        4   16[BANK1 ] unsigned long 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  quotient        4   21[BANK1 ] unsigned long 
  5067 ;;  counter         1   25[BANK1 ] unsigned char 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  4   12[BANK1 ] unsigned long 
  5070 ;; Registers used:
  5071 ;;		wreg, status,2, status,0
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5077 ;;      Params:         0       0       8       0       0       0       0       0
  5078 ;;      Locals:         0       0       5       0       0       0       0       0
  5079 ;;      Temps:          0       0       1       0       0       0       0       0
  5080 ;;      Totals:         0       0      14       0       0       0       0       0
  5081 ;;Total ram usage:       14 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    5
  5084 ;; This function calls:
  5085 ;;		Nothing
  5086 ;; This function is called by:
  5087 ;;		_setCurrent
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           
  5092                           ;psect for function ___lldiv
  5093  040D                     ___lldiv:
  5094                           
  5095                           ;incstack = 0
  5096                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5097  040D  3000               	movlw	0
  5098  040E  0021               	movlb	1	; select bank1
  5099  040F  00B8               	movwf	(___lldiv@quotient+3)^(0+128)
  5100  0410  3000               	movlw	0
  5101  0411  00B7               	movwf	(___lldiv@quotient+2)^(0+128)
  5102  0412  3000               	movlw	0
  5103  0413  00B6               	movwf	(___lldiv@quotient+1)^(0+128)
  5104  0414  3000               	movlw	0
  5105  0415  00B5               	movwf	___lldiv@quotient^(0+128)
  5106  0416  082F               	movf	(___lldiv@divisor+3)^(0+128),w
  5107  0417  042E               	iorwf	(___lldiv@divisor+2)^(0+128),w
  5108  0418  042D               	iorwf	(___lldiv@divisor+1)^(0+128),w
  5109  0419  042C               	iorwf	___lldiv@divisor^(0+128),w
  5110  041A  1903               	skipnz
  5111  041B  2C57               	goto	l2163
  5112  041C  01B9               	clrf	___lldiv@counter^(0+128)
  5113  041D  0AB9               	incf	___lldiv@counter^(0+128),f
  5114  041E                     l2149:
  5115  041E  1BAF               	btfsc	(___lldiv@divisor+3)^(0+128),7
  5116  041F  2C2C               	goto	l2151
  5117  0420  3001               	movlw	1
  5118  0421                     u1685:
  5119  0421  35AC               	lslf	___lldiv@divisor^(0+128),f
  5120  0422  0DAD               	rlf	(___lldiv@divisor+1)^(0+128),f
  5121  0423  0DAE               	rlf	(___lldiv@divisor+2)^(0+128),f
  5122  0424  0DAF               	rlf	(___lldiv@divisor+3)^(0+128),f
  5123  0425  0B89               	decfsz	9,f
  5124  0426  2C21               	goto	u1685
  5125  0427  3001               	movlw	1
  5126  0428  00B4               	movwf	??___lldiv^(0+128)
  5127  0429  0834               	movf	??___lldiv^(0+128),w
  5128  042A  07B9               	addwf	___lldiv@counter^(0+128),f
  5129  042B  2C1E               	goto	l2149
  5130  042C                     l2151:
  5131  042C  3001               	movlw	1
  5132  042D                     u1705:
  5133  042D  35B5               	lslf	___lldiv@quotient^(0+128),f
  5134  042E  0DB6               	rlf	(___lldiv@quotient+1)^(0+128),f
  5135  042F  0DB7               	rlf	(___lldiv@quotient+2)^(0+128),f
  5136  0430  0DB8               	rlf	(___lldiv@quotient+3)^(0+128),f
  5137  0431  0B89               	decfsz	9,f
  5138  0432  2C2D               	goto	u1705
  5139  0433  082F               	movf	(___lldiv@divisor+3)^(0+128),w
  5140  0434  0233               	subwf	(___lldiv@dividend+3)^(0+128),w
  5141  0435  1D03               	skipz
  5142  0436  2C41               	goto	u1715
  5143  0437  082E               	movf	(___lldiv@divisor+2)^(0+128),w
  5144  0438  0232               	subwf	(___lldiv@dividend+2)^(0+128),w
  5145  0439  1D03               	skipz
  5146  043A  2C41               	goto	u1715
  5147  043B  082D               	movf	(___lldiv@divisor+1)^(0+128),w
  5148  043C  0231               	subwf	(___lldiv@dividend+1)^(0+128),w
  5149  043D  1D03               	skipz
  5150  043E  2C41               	goto	u1715
  5151  043F  082C               	movf	___lldiv@divisor^(0+128),w
  5152  0440  0230               	subwf	___lldiv@dividend^(0+128),w
  5153  0441                     u1715:
  5154  0441  1C03               	skipc
  5155  0442  2C4C               	goto	l2159
  5156  0443  082C               	movf	___lldiv@divisor^(0+128),w
  5157  0444  02B0               	subwf	___lldiv@dividend^(0+128),f
  5158  0445  082D               	movf	(___lldiv@divisor+1)^(0+128),w
  5159  0446  3BB1               	subwfb	(___lldiv@dividend+1)^(0+128),f
  5160  0447  082E               	movf	(___lldiv@divisor+2)^(0+128),w
  5161  0448  3BB2               	subwfb	(___lldiv@dividend+2)^(0+128),f
  5162  0449  082F               	movf	(___lldiv@divisor+3)^(0+128),w
  5163  044A  3BB3               	subwfb	(___lldiv@dividend+3)^(0+128),f
  5164  044B  1435               	bsf	___lldiv@quotient^(0+128),0
  5165  044C                     l2159:
  5166  044C  3001               	movlw	1
  5167  044D                     u1725:
  5168  044D  36AF               	lsrf	(___lldiv@divisor+3)^(0+128),f
  5169  044E  0CAE               	rrf	(___lldiv@divisor+2)^(0+128),f
  5170  044F  0CAD               	rrf	(___lldiv@divisor+1)^(0+128),f
  5171  0450  0CAC               	rrf	___lldiv@divisor^(0+128),f
  5172  0451  0B89               	decfsz	9,f
  5173  0452  2C4D               	goto	u1725
  5174  0453  3001               	movlw	1
  5175  0454  02B9               	subwf	___lldiv@counter^(0+128),f
  5176  0455  1D03               	btfss	3,2
  5177  0456  2C2C               	goto	l2151
  5178  0457                     l2163:
  5179  0457  0838               	movf	(___lldiv@quotient+3)^(0+128),w
  5180  0458  00AF               	movwf	(?___lldiv+3)^(0+128)
  5181  0459  0837               	movf	(___lldiv@quotient+2)^(0+128),w
  5182  045A  00AE               	movwf	(?___lldiv+2)^(0+128)
  5183  045B  0836               	movf	(___lldiv@quotient+1)^(0+128),w
  5184  045C  00AD               	movwf	(?___lldiv+1)^(0+128)
  5185  045D  0835               	movf	___lldiv@quotient^(0+128),w
  5186  045E  00AC               	movwf	?___lldiv^(0+128)
  5187  045F  0008               	return
  5188  0460                     __end_of___lldiv:
  5189                           
  5190                           	psect	text7
  5191  04B3                     __ptext7:	
  5192 ;; *************** function ___awdiv *****************
  5193 ;; Defined at:
  5194 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/awdiv.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  divisor         2    0[BANK1 ] int 
  5197 ;;  dividend        2    2[BANK1 ] int 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  quotient        2    7[BANK1 ] int 
  5200 ;;  sign            1    6[BANK1 ] unsigned char 
  5201 ;;  counter         1    5[BANK1 ] unsigned char 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  2    0[BANK1 ] int 
  5204 ;; Registers used:
  5205 ;;		wreg, status,2, status,0
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5211 ;;      Params:         0       0       4       0       0       0       0       0
  5212 ;;      Locals:         0       0       4       0       0       0       0       0
  5213 ;;      Temps:          0       0       1       0       0       0       0       0
  5214 ;;      Totals:         0       0       9       0       0       0       0       0
  5215 ;;Total ram usage:        9 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    5
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_setCurrent
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function ___awdiv
  5227  04B3                     ___awdiv:
  5228                           
  5229                           ;incstack = 0
  5230                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5231  04B3  0021               	movlb	1	; select bank1
  5232  04B4  01A6               	clrf	___awdiv@sign^(0+128)
  5233  04B5  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
  5234  04B6  2CBE               	goto	l2695
  5235  04B7  09A0               	comf	___awdiv@divisor^(0+128),f
  5236  04B8  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
  5237  04B9  0AA0               	incf	___awdiv@divisor^(0+128),f
  5238  04BA  1903               	skipnz
  5239  04BB  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
  5240  04BC  01A6               	clrf	___awdiv@sign^(0+128)
  5241  04BD  0AA6               	incf	___awdiv@sign^(0+128),f
  5242  04BE                     l2695:
  5243  04BE  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
  5244  04BF  2CC9               	goto	l2701
  5245  04C0  09A2               	comf	___awdiv@dividend^(0+128),f
  5246  04C1  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
  5247  04C2  0AA2               	incf	___awdiv@dividend^(0+128),f
  5248  04C3  1903               	skipnz
  5249  04C4  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
  5250  04C5  3001               	movlw	1
  5251  04C6  00A4               	movwf	??___awdiv^(0+128)
  5252  04C7  0824               	movf	??___awdiv^(0+128),w
  5253  04C8  06A6               	xorwf	___awdiv@sign^(0+128),f
  5254  04C9                     l2701:
  5255  04C9  01A7               	clrf	___awdiv@quotient^(0+128)
  5256  04CA  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
  5257  04CB  0820               	movf	___awdiv@divisor^(0+128),w
  5258  04CC  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
  5259  04CD  1903               	btfsc	3,2
  5260  04CE  2CF8               	goto	l2723
  5261  04CF  01A5               	clrf	___awdiv@counter^(0+128)
  5262  04D0  0AA5               	incf	___awdiv@counter^(0+128),f
  5263  04D1                     l2711:
  5264  04D1  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
  5265  04D2  2CDD               	goto	l2713
  5266  04D3  3001               	movlw	1
  5267  04D4                     u2445:
  5268  04D4  35A0               	lslf	___awdiv@divisor^(0+128),f
  5269  04D5  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
  5270  04D6  0B89               	decfsz	9,f
  5271  04D7  2CD4               	goto	u2445
  5272  04D8  3001               	movlw	1
  5273  04D9  00A4               	movwf	??___awdiv^(0+128)
  5274  04DA  0824               	movf	??___awdiv^(0+128),w
  5275  04DB  07A5               	addwf	___awdiv@counter^(0+128),f
  5276  04DC  2CD1               	goto	l2711
  5277  04DD                     l2713:
  5278  04DD  3001               	movlw	1
  5279  04DE                     u2465:
  5280  04DE  35A7               	lslf	___awdiv@quotient^(0+128),f
  5281  04DF  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
  5282  04E0  0B89               	decfsz	9,f
  5283  04E1  2CDE               	goto	u2465
  5284  04E2  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  5285  04E3  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
  5286  04E4  1D03               	skipz
  5287  04E5  2CE8               	goto	u2475
  5288  04E6  0820               	movf	___awdiv@divisor^(0+128),w
  5289  04E7  0222               	subwf	___awdiv@dividend^(0+128),w
  5290  04E8                     u2475:
  5291  04E8  1C03               	skipc
  5292  04E9  2CEF               	goto	l2719
  5293  04EA  0820               	movf	___awdiv@divisor^(0+128),w
  5294  04EB  02A2               	subwf	___awdiv@dividend^(0+128),f
  5295  04EC  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  5296  04ED  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
  5297  04EE  1427               	bsf	___awdiv@quotient^(0+128),0
  5298  04EF                     l2719:
  5299  04EF  3001               	movlw	1
  5300  04F0                     u2485:
  5301  04F0  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
  5302  04F1  0CA0               	rrf	___awdiv@divisor^(0+128),f
  5303  04F2  0B89               	decfsz	9,f
  5304  04F3  2CF0               	goto	u2485
  5305  04F4  3001               	movlw	1
  5306  04F5  02A5               	subwf	___awdiv@counter^(0+128),f
  5307  04F6  1D03               	btfss	3,2
  5308  04F7  2CDD               	goto	l2713
  5309  04F8                     l2723:
  5310  04F8  0826               	movf	___awdiv@sign^(0+128),w
  5311  04F9  1903               	btfsc	3,2
  5312  04FA  2D00               	goto	l2727
  5313  04FB  09A7               	comf	___awdiv@quotient^(0+128),f
  5314  04FC  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
  5315  04FD  0AA7               	incf	___awdiv@quotient^(0+128),f
  5316  04FE  1903               	skipnz
  5317  04FF  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
  5318  0500                     l2727:
  5319  0500  0828               	movf	(___awdiv@quotient+1)^(0+128),w
  5320  0501  00A1               	movwf	(?___awdiv+1)^(0+128)
  5321  0502  0827               	movf	___awdiv@quotient^(0+128),w
  5322  0503  00A0               	movwf	?___awdiv^(0+128)
  5323  0504  0008               	return
  5324  0505                     __end_of___awdiv:
  5325                           
  5326                           	psect	text8
  5327  0505                     __ptext8:	
  5328 ;; *************** function _selectSomething *****************
  5329 ;; Defined at:
  5330 ;;		line 197 in file "main.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;		None
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      void 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0, pclath, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5344 ;;      Params:         0       0       0       0       0       0       0       0
  5345 ;;      Locals:         0       0       0       0       0       0       0       0
  5346 ;;      Temps:          0       0       2       0       0       0       0       0
  5347 ;;      Totals:         0       0       2       0       0       0       0       0
  5348 ;;Total ram usage:        2 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    6
  5351 ;; This function calls:
  5352 ;;		_setLEDColor
  5353 ;; This function is called by:
  5354 ;;		_process_remote_command
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function _selectSomething
  5360  0505                     _selectSomething:
  5361                           
  5362                           ;main.c: 199: setLEDColor(255, 0, 0);
  5363                           
  5364                           ;incstack = 0
  5365                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  5366  0505  0021               	movlb	1	; select bank1
  5367  0506  01A0               	clrf	setLEDColor@green^(0+128)
  5368  0507  01A1               	clrf	setLEDColor@blue^(0+128)
  5369  0508  30FF               	movlw	255
  5370  0509  318F  2735  3185   	fcall	_setLEDColor
  5371                           
  5372                           ;main.c: 200: _delay((unsigned long)((500)*(4000000/4000.0)));
  5373  050C  3003               	movlw	3
  5374  050D  0021               	movlb	1	; select bank1
  5375  050E  00A5               	movwf	(??_selectSomething^(0+128)+1)
  5376  050F  308A               	movlw	138
  5377  0510  00A4               	movwf	??_selectSomething^(0+128)
  5378  0511  3055               	movlw	85
  5379  0512                     u2767:
  5380  0512  0B89               	decfsz	9,f
  5381  0513  2D12               	goto	u2767
  5382  0514  0BA4               	decfsz	??_selectSomething^(0+128),f
  5383  0515  2D12               	goto	u2767
  5384  0516  0BA5               	decfsz	(??_selectSomething^(0+128)+1),f
  5385  0517  2D12               	goto	u2767
  5386  0518  3200               	nop2
  5387                           
  5388                           ;main.c: 201: setLEDColor(0, 0, 0);
  5389  0519  0021               	movlb	1	; select bank1
  5390  051A  01A0               	clrf	setLEDColor@green^(0+128)
  5391  051B  01A1               	clrf	setLEDColor@blue^(0+128)
  5392  051C  3000               	movlw	0
  5393  051D  318F  2735  3185   	fcall	_setLEDColor
  5394                           
  5395                           ;main.c: 202: _delay((unsigned long)((500)*(4000000/4000.0)));
  5396  0520  3003               	movlw	3
  5397  0521  0021               	movlb	1	; select bank1
  5398  0522  00A5               	movwf	(??_selectSomething^(0+128)+1)
  5399  0523  308A               	movlw	138
  5400  0524  00A4               	movwf	??_selectSomething^(0+128)
  5401  0525  3055               	movlw	85
  5402  0526                     u2777:
  5403  0526  0B89               	decfsz	9,f
  5404  0527  2D26               	goto	u2777
  5405  0528  0BA4               	decfsz	??_selectSomething^(0+128),f
  5406  0529  2D26               	goto	u2777
  5407  052A  0BA5               	decfsz	(??_selectSomething^(0+128)+1),f
  5408  052B  2D26               	goto	u2777
  5409  052C  3200               	nop2
  5410                           
  5411                           ;main.c: 203: setLEDColor(255, 0, 0);
  5412  052D  0021               	movlb	1	; select bank1
  5413  052E  01A0               	clrf	setLEDColor@green^(0+128)
  5414  052F  01A1               	clrf	setLEDColor@blue^(0+128)
  5415  0530  30FF               	movlw	255
  5416  0531  318F  2735  3185   	fcall	_setLEDColor
  5417                           
  5418                           ;main.c: 204: _delay((unsigned long)((500)*(4000000/4000.0)));
  5419  0534  3003               	movlw	3
  5420  0535  0021               	movlb	1	; select bank1
  5421  0536  00A5               	movwf	(??_selectSomething^(0+128)+1)
  5422  0537  308A               	movlw	138
  5423  0538  00A4               	movwf	??_selectSomething^(0+128)
  5424  0539  3055               	movlw	85
  5425  053A                     u2787:
  5426  053A  0B89               	decfsz	9,f
  5427  053B  2D3A               	goto	u2787
  5428  053C  0BA4               	decfsz	??_selectSomething^(0+128),f
  5429  053D  2D3A               	goto	u2787
  5430  053E  0BA5               	decfsz	(??_selectSomething^(0+128)+1),f
  5431  053F  2D3A               	goto	u2787
  5432  0540  3200               	nop2
  5433                           
  5434                           ;main.c: 205: setLEDColor(0, 0, 0);
  5435  0541  0021               	movlb	1	; select bank1
  5436  0542  01A0               	clrf	setLEDColor@green^(0+128)
  5437  0543  01A1               	clrf	setLEDColor@blue^(0+128)
  5438  0544  3000               	movlw	0
  5439  0545  318F  2735  3185   	fcall	_setLEDColor
  5440                           
  5441                           ;main.c: 206: _delay((unsigned long)((500)*(4000000/4000.0)));
  5442  0548  3003               	movlw	3
  5443  0549  0021               	movlb	1	; select bank1
  5444  054A  00A5               	movwf	(??_selectSomething^(0+128)+1)
  5445  054B  308A               	movlw	138
  5446  054C  00A4               	movwf	??_selectSomething^(0+128)
  5447  054D  3055               	movlw	85
  5448  054E                     u2797:
  5449  054E  0B89               	decfsz	9,f
  5450  054F  2D4E               	goto	u2797
  5451  0550  0BA4               	decfsz	??_selectSomething^(0+128),f
  5452  0551  2D4E               	goto	u2797
  5453  0552  0BA5               	decfsz	(??_selectSomething^(0+128)+1),f
  5454  0553  2D4E               	goto	u2797
  5455  0554  3200               	nop2
  5456  0555  0008               	return
  5457  0556                     __end_of_selectSomething:
  5458                           
  5459                           	psect	text9
  5460  0FD6                     __ptext9:	
  5461 ;; *************** function _selectFrequency *****************
  5462 ;; Defined at:
  5463 ;;		line 209 in file "main.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;		None
  5466 ;; Auto vars:     Size  Location     Type
  5467 ;;		None
  5468 ;; Return value:  Size  Location     Type
  5469 ;;                  1    wreg      void 
  5470 ;; Registers used:
  5471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5472 ;; Tracked objects:
  5473 ;;		On entry : 0/0
  5474 ;;		On exit  : 0/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5477 ;;      Params:         0       0       0       0       0       0       0       0
  5478 ;;      Locals:         0       0       0       0       0       0       0       0
  5479 ;;      Temps:          0       0       2       0       0       0       0       0
  5480 ;;      Totals:         0       0       2       0       0       0       0       0
  5481 ;;Total ram usage:        2 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; Hardware stack levels required when called:    8
  5484 ;; This function calls:
  5485 ;;		_printf
  5486 ;;		_setLEDColor
  5487 ;; This function is called by:
  5488 ;;		_process_remote_command
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           
  5493                           ;psect for function _selectFrequency
  5494  0FD6                     _selectFrequency:
  5495                           
  5496                           ;main.c: 210: interfaceState = STATE_FREQUENCY;
  5497                           
  5498                           ;incstack = 0
  5499                           ; Regs used in _selectFrequency: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5500  0FD6  3002               	movlw	2
  5501  0FD7  0021               	movlb	1	; select bank1
  5502  0FD8  00A9               	movwf	??_selectFrequency^(0+128)
  5503  0FD9  0829               	movf	??_selectFrequency^(0+128),w
  5504  0FDA  00E3               	movwf	_interfaceState^(0+128)
  5505                           
  5506                           ;main.c: 211: setLEDColor(255, 0, 255);
  5507  0FDB  01A0               	clrf	setLEDColor@green^(0+128)
  5508  0FDC  30FF               	movlw	255
  5509  0FDD  00A9               	movwf	??_selectFrequency^(0+128)
  5510  0FDE  0829               	movf	??_selectFrequency^(0+128),w
  5511  0FDF  00A1               	movwf	setLEDColor@blue^(0+128)
  5512  0FE0  30FF               	movlw	255
  5513  0FE1  318F  2735  318F   	fcall	_setLEDColor
  5514                           
  5515                           ;main.c: 212: _delay((unsigned long)((1000)*(4000000/4000.0)));
  5516  0FE4  3006               	movlw	6
  5517  0FE5  0021               	movlb	1	; select bank1
  5518  0FE6  00AA               	movwf	(??_selectFrequency^(0+128)+1)
  5519  0FE7  3013               	movlw	19
  5520  0FE8  00A9               	movwf	??_selectFrequency^(0+128)
  5521  0FE9  30AD               	movlw	173
  5522  0FEA                     u2807:
  5523  0FEA  0B89               	decfsz	9,f
  5524  0FEB  2FEA               	goto	u2807
  5525  0FEC  0BA9               	decfsz	??_selectFrequency^(0+128),f
  5526  0FED  2FEA               	goto	u2807
  5527  0FEE  0BAA               	decfsz	(??_selectFrequency^(0+128)+1),f
  5528  0FEF  2FEA               	goto	u2807
  5529  0FF0  3200               	nop2
  5530                           
  5531                           ;main.c: 213: setLEDColor(0, 0, 0);
  5532  0FF1  0021               	movlb	1	; select bank1
  5533  0FF2  01A0               	clrf	setLEDColor@green^(0+128)
  5534  0FF3  01A1               	clrf	setLEDColor@blue^(0+128)
  5535  0FF4  3000               	movlw	0
  5536  0FF5  318F  2735  318F   	fcall	_setLEDColor
  5537                           
  5538                           ;main.c: 214: printf("\n Frequency selected");
  5539  0FF8  30EC               	movlw	low (STR_1| (0+32768))
  5540  0FF9  0021               	movlb	1	; select bank1
  5541  0FFA  00A2               	movwf	printf@f^(0+128)
  5542  0FFB  3087               	movlw	high (STR_1| (0+32768))
  5543  0FFC  00A3               	movwf	(printf@f^(0+128)+1)
  5544  0FFD  318F  274C         	fcall	_printf
  5545  0FFF  0008               	return
  5546  1000                     __end_of_selectFrequency:
  5547                           
  5548                           	psect	text10
  5549  0FAE                     __ptext10:	
  5550 ;; *************** function _selectCurrent *****************
  5551 ;; Defined at:
  5552 ;;		line 217 in file "main.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;		None
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;		None
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5566 ;;      Params:         0       0       0       0       0       0       0       0
  5567 ;;      Locals:         0       0       0       0       0       0       0       0
  5568 ;;      Temps:          0       0       2       0       0       0       0       0
  5569 ;;      Totals:         0       0       2       0       0       0       0       0
  5570 ;;Total ram usage:        2 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    8
  5573 ;; This function calls:
  5574 ;;		_printf
  5575 ;;		_setLEDColor
  5576 ;; This function is called by:
  5577 ;;		_process_remote_command
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function _selectCurrent
  5583  0FAE                     _selectCurrent:
  5584                           
  5585                           ;main.c: 218: interfaceState = STATE_CURRENT;
  5586                           
  5587                           ;incstack = 0
  5588                           ; Regs used in _selectCurrent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5589  0FAE  0021               	movlb	1	; select bank1
  5590  0FAF  01E3               	clrf	_interfaceState^(0+128)
  5591  0FB0  0AE3               	incf	_interfaceState^(0+128),f
  5592                           
  5593                           ;main.c: 219: setLEDColor(0, 0, 255);
  5594  0FB1  01A0               	clrf	setLEDColor@green^(0+128)
  5595  0FB2  30FF               	movlw	255
  5596  0FB3  00A9               	movwf	??_selectCurrent^(0+128)
  5597  0FB4  0829               	movf	??_selectCurrent^(0+128),w
  5598  0FB5  00A1               	movwf	setLEDColor@blue^(0+128)
  5599  0FB6  3000               	movlw	0
  5600  0FB7  318F  2735  318F   	fcall	_setLEDColor
  5601                           
  5602                           ;main.c: 220: _delay((unsigned long)((1000)*(4000000/4000.0)));
  5603  0FBA  3006               	movlw	6
  5604  0FBB  0021               	movlb	1	; select bank1
  5605  0FBC  00AA               	movwf	(??_selectCurrent^(0+128)+1)
  5606  0FBD  3013               	movlw	19
  5607  0FBE  00A9               	movwf	??_selectCurrent^(0+128)
  5608  0FBF  30AD               	movlw	173
  5609  0FC0                     u2817:
  5610  0FC0  0B89               	decfsz	9,f
  5611  0FC1  2FC0               	goto	u2817
  5612  0FC2  0BA9               	decfsz	??_selectCurrent^(0+128),f
  5613  0FC3  2FC0               	goto	u2817
  5614  0FC4  0BAA               	decfsz	(??_selectCurrent^(0+128)+1),f
  5615  0FC5  2FC0               	goto	u2817
  5616  0FC6  3200               	nop2
  5617                           
  5618                           ;main.c: 221: setLEDColor(0, 0, 0);
  5619  0FC7  0021               	movlb	1	; select bank1
  5620  0FC8  01A0               	clrf	setLEDColor@green^(0+128)
  5621  0FC9  01A1               	clrf	setLEDColor@blue^(0+128)
  5622  0FCA  3000               	movlw	0
  5623  0FCB  318F  2735  318F   	fcall	_setLEDColor
  5624                           
  5625                           ;main.c: 222: printf("\n current selected");
  5626  0FCE  3001               	movlw	low (STR_2| (0+32768))
  5627  0FCF  0021               	movlb	1	; select bank1
  5628  0FD0  00A2               	movwf	printf@f^(0+128)
  5629  0FD1  3088               	movlw	high (STR_2| (0+32768))
  5630  0FD2  00A3               	movwf	(printf@f^(0+128)+1)
  5631  0FD3  318F  274C         	fcall	_printf
  5632  0FD5  0008               	return
  5633  0FD6                     __end_of_selectCurrent:
  5634                           
  5635                           	psect	text11
  5636  0F4C                     __ptext11:	
  5637 ;; *************** function _printf *****************
  5638 ;; Defined at:
  5639 ;;		line 477 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/doprnt.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  f               2    2[BANK1 ] PTR const unsigned char 
  5642 ;;		 -> STR_3(15), STR_2(19), STR_1(21), 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;  tmpval          4    0        struct .
  5645 ;;  cp              2    0        PTR const unsigned char 
  5646 ;;  len             2    0        unsigned int 
  5647 ;;  val             2    0        unsigned int 
  5648 ;;  c               1    8[BANK1 ] unsigned char 
  5649 ;;  ap              1    7[BANK1 ] PTR void [1]
  5650 ;;		 -> ?_printf(2), 
  5651 ;;  flag            1    0        unsigned char 
  5652 ;;  prec            1    0        char 
  5653 ;; Return value:  Size  Location     Type
  5654 ;;                  2    2[BANK1 ] int 
  5655 ;; Registers used:
  5656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/0
  5659 ;;		On exit  : 0/0
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5662 ;;      Params:         0       0       2       0       0       0       0       0
  5663 ;;      Locals:         0       0       2       0       0       0       0       0
  5664 ;;      Temps:          0       0       3       0       0       0       0       0
  5665 ;;      Totals:         0       0       7       0       0       0       0       0
  5666 ;;Total ram usage:        7 bytes
  5667 ;; Hardware stack levels used:    1
  5668 ;; Hardware stack levels required when called:    7
  5669 ;; This function calls:
  5670 ;;		_putch
  5671 ;; This function is called by:
  5672 ;;		_selectFrequency
  5673 ;;		_selectCurrent
  5674 ;;		_process_remote_command
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           
  5679                           ;psect for function _printf
  5680  0F4C                     _printf:
  5681                           
  5682                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
  5683                           
  5684                           ;incstack = 0
  5685                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5686  0F4C  30A4               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5687  0F4D  0021               	movlb	1	; select bank1
  5688  0F4E  00A4               	movwf	??_printf^(0+128)
  5689  0F4F  0824               	movf	??_printf^(0+128),w
  5690  0F50  00A7               	movwf	printf@ap^(0+128)
  5691  0F51                     l2669:	
  5692                           ;doprnt.c: 559: continue;
  5693                           
  5694                           ;doprnt.c: 553: while((c = *f++)) {
  5695                           
  5696  0F51  0021               	movlb	1	; select bank1
  5697  0F52  0823               	movf	(printf@f+1)^(0+128),w
  5698  0F53  00A5               	movwf	(??_printf^(0+128)+1)
  5699  0F54  0822               	movf	printf@f^(0+128),w
  5700  0F55  00A4               	movwf	??_printf^(0+128)
  5701  0F56  0AA2               	incf	printf@f^(0+128),f
  5702  0F57  1903               	skipnz
  5703  0F58  0AA3               	incf	(printf@f+1)^(0+128),f
  5704  0F59  0824               	movf	??_printf^(0+128),w
  5705  0F5A  0084               	movwf	4
  5706  0F5B  0825               	movf	(??_printf+1)^(0+128),w
  5707  0F5C  0085               	movwf	5
  5708  0F5D  0800               	movf	0,w	;code access
  5709  0F5E  00A6               	movwf	(??_printf+2)^(0+128)
  5710  0F5F  0826               	movf	(??_printf+2)^(0+128),w
  5711  0F60  00A8               	movwf	printf@c^(0+128)
  5712  0F61  0828               	movf	printf@c^(0+128),w
  5713  0F62  1903               	btfsc	3,2
  5714  0F63  0008               	return
  5715                           
  5716                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
  5717  0F64  0828               	movf	printf@c^(0+128),w
  5718  0F65  318E  2678  318F   	fcall	_putch
  5719  0F68  2F51               	goto	l2669
  5720  0F69                     __end_of_printf:
  5721                           
  5722                           	psect	text12
  5723  0E78                     __ptext12:	
  5724 ;; *************** function _putch *****************
  5725 ;; Defined at:
  5726 ;;		line 146 in file "mcc_generated_files/eusart.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  txData          1    wreg     unsigned char 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  txData          1    1[BANK1 ] unsigned char 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  1    wreg      void 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2, status,0, pclath, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5740 ;;      Params:         0       0       0       0       0       0       0       0
  5741 ;;      Locals:         0       0       1       0       0       0       0       0
  5742 ;;      Temps:          0       0       0       0       0       0       0       0
  5743 ;;      Totals:         0       0       1       0       0       0       0       0
  5744 ;;Total ram usage:        1 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    6
  5747 ;; This function calls:
  5748 ;;		_EUSART_Write
  5749 ;; This function is called by:
  5750 ;;		_printf
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           
  5755                           ;psect for function _putch
  5756  0E78                     _putch:
  5757                           
  5758                           ;incstack = 0
  5759                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  5760                           ;putch@txData stored from wreg
  5761  0E78  0021               	movlb	1	; select bank1
  5762  0E79  00A1               	movwf	putch@txData^(0+128)
  5763                           
  5764                           ;eusart.c: 148: EUSART_Write(txData);
  5765  0E7A  0821               	movf	putch@txData^(0+128),w
  5766  0E7B  318E  26D1         	fcall	_EUSART_Write
  5767  0E7D  0008               	return
  5768  0E7E                     __end_of_putch:
  5769                           
  5770                           	psect	text13
  5771  0ED1                     __ptext13:	
  5772 ;; *************** function _EUSART_Write *****************
  5773 ;; Defined at:
  5774 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;  txData          1    wreg     unsigned char 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  txData          1    0[BANK1 ] unsigned char 
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  1    wreg      void 
  5781 ;; Registers used:
  5782 ;;		wreg
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5788 ;;      Params:         0       0       0       0       0       0       0       0
  5789 ;;      Locals:         0       0       1       0       0       0       0       0
  5790 ;;      Temps:          0       0       0       0       0       0       0       0
  5791 ;;      Totals:         0       0       1       0       0       0       0       0
  5792 ;;Total ram usage:        1 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    5
  5795 ;; This function calls:
  5796 ;;		Nothing
  5797 ;; This function is called by:
  5798 ;;		_putch
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           
  5803                           ;psect for function _EUSART_Write
  5804  0ED1                     _EUSART_Write:
  5805                           
  5806                           ;incstack = 0
  5807                           ; Regs used in _EUSART_Write: [wreg]
  5808                           ;EUSART_Write@txData stored from wreg
  5809  0ED1  0021               	movlb	1	; select bank1
  5810  0ED2  00A0               	movwf	EUSART_Write@txData^(0+128)
  5811  0ED3                     l209:	
  5812                           ;eusart.c: 135: {
  5813                           
  5814  0ED3  0020               	movlb	0	; select bank0
  5815  0ED4  1E11               	btfss	17,4	;volatile
  5816  0ED5  2ED3               	goto	l209
  5817                           
  5818                           ;eusart.c: 136: };eusart.c: 138: TX1REG = txData;
  5819  0ED6  0021               	movlb	1	; select bank1
  5820  0ED7  0820               	movf	EUSART_Write@txData^(0+128),w
  5821  0ED8  0023               	movlb	3	; select bank3
  5822  0ED9  009A               	movwf	26	;volatile
  5823  0EDA  0008               	return
  5824  0EDB                     __end_of_EUSART_Write:
  5825                           
  5826                           	psect	text14
  5827  07C1                     __ptext14:	
  5828 ;; *************** function _battery_voltage *****************
  5829 ;; Defined at:
  5830 ;;		line 91 in file "main.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;		None
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;		None
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  2   27[BANK1 ] unsigned int 
  5837 ;; Registers used:
  5838 ;;		wreg, status,2, status,0, pclath, cstack
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5844 ;;      Params:         0       0       2       0       0       0       0       0
  5845 ;;      Locals:         0       0       0       0       0       0       0       0
  5846 ;;      Temps:          0       0       0       0       0       0       0       0
  5847 ;;      Totals:         0       0       2       0       0       0       0       0
  5848 ;;Total ram usage:        2 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; Hardware stack levels required when called:    6
  5851 ;; This function calls:
  5852 ;;		___aldiv
  5853 ;; This function is called by:
  5854 ;;		_process_remote_command
  5855 ;;		_main
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           
  5860                           ;psect for function _battery_voltage
  5861  07C1                     _battery_voltage:
  5862                           
  5863                           ;main.c: 93: FVRCON = 0b10000001;
  5864                           
  5865                           ;incstack = 0
  5866                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  5867  07C1  3081               	movlw	129
  5868  07C2  0022               	movlb	2	; select bank2
  5869  07C3  0097               	movwf	23	;volatile
  5870                           
  5871                           ;main.c: 94: ADCON0 = 0b01111101;
  5872  07C4  307D               	movlw	125
  5873  07C5  0021               	movlb	1	; select bank1
  5874  07C6  009D               	movwf	29	;volatile
  5875                           
  5876                           ;main.c: 95: ADCON1 = 0b10010000;
  5877  07C7  3090               	movlw	144
  5878  07C8  009E               	movwf	30	;volatile
  5879  07C9                     l446:	
  5880                           ;main.c: 96: while(!FVRCONbits.FVRRDY){ }
  5881                           
  5882  07C9  0022               	movlb	2	; select bank2
  5883  07CA  1F17               	btfss	23,6	;volatile
  5884  07CB  2FC9               	goto	l446
  5885                           
  5886                           ;main.c: 97: __nop();
  5887  07CC  0000               	nop
  5888                           
  5889                           ;main.c: 98: __nop();
  5890  07CD  0000               	nop
  5891                           
  5892                           ;main.c: 99: __nop();
  5893  07CE  0000               	nop
  5894                           
  5895                           ;main.c: 100: __nop();
  5896  07CF  0000               	nop
  5897                           
  5898                           ;main.c: 101: __nop();
  5899  07D0  0000               	nop
  5900                           
  5901                           ;main.c: 102: ADCON0bits.GO_nDONE = 1;
  5902  07D1  0021               	movlb	1	; select bank1
  5903  07D2  149D               	bsf	29,1	;volatile
  5904  07D3                     l449:	
  5905                           ;main.c: 103: while(ADCON0bits.GO_nDONE){ }
  5906                           
  5907  07D3  189D               	btfsc	29,1	;volatile
  5908  07D4  2FD3               	goto	l449
  5909                           
  5910                           ;main.c: 104: ADCON0bits.ADON = 0;
  5911  07D5  101D               	bcf	29,0	;volatile
  5912                           
  5913                           ;main.c: 109: return 1047552L / ADRES;
  5914  07D6  081B               	movf	27,w	;volatile
  5915  07D7  00AC               	movwf	___aldiv@divisor^(0+128)
  5916  07D8  081C               	movf	28,w	;volatile
  5917  07D9  00AD               	movwf	(___aldiv@divisor^(0+128)+1)
  5918  07DA  01AE               	clrf	(___aldiv@divisor^(0+128)+2)
  5919  07DB  01AF               	clrf	(___aldiv@divisor^(0+128)+3)
  5920  07DC  3000               	movlw	0
  5921  07DD  00B3               	movwf	(___aldiv@dividend+3)^(0+128)
  5922  07DE  300F               	movlw	15
  5923  07DF  00B2               	movwf	(___aldiv@dividend+2)^(0+128)
  5924  07E0  30FC               	movlw	252
  5925  07E1  00B1               	movwf	(___aldiv@dividend+1)^(0+128)
  5926  07E2  3000               	movlw	0
  5927  07E3  00B0               	movwf	___aldiv@dividend^(0+128)
  5928  07E4  3182  22A2         	fcall	___aldiv
  5929  07E6  0021               	movlb	1	; select bank1
  5930  07E7  082D               	movf	(?___aldiv+1)^(0+128),w
  5931  07E8  00BC               	movwf	(?_battery_voltage+1)^(0+128)
  5932  07E9  082C               	movf	?___aldiv^(0+128),w
  5933  07EA  00BB               	movwf	?_battery_voltage^(0+128)
  5934  07EB  0008               	return
  5935  07EC                     __end_of_battery_voltage:
  5936                           
  5937                           	psect	text15
  5938  02A2                     __ptext15:	
  5939 ;; *************** function ___aldiv *****************
  5940 ;; Defined at:
  5941 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/aldiv.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  divisor         4   12[BANK1 ] long 
  5944 ;;  dividend        4   16[BANK1 ] long 
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;  quotient        4   23[BANK1 ] long 
  5947 ;;  sign            1   22[BANK1 ] unsigned char 
  5948 ;;  counter         1   21[BANK1 ] unsigned char 
  5949 ;; Return value:  Size  Location     Type
  5950 ;;                  4   12[BANK1 ] long 
  5951 ;; Registers used:
  5952 ;;		wreg, status,2, status,0
  5953 ;; Tracked objects:
  5954 ;;		On entry : 0/0
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5958 ;;      Params:         0       0       8       0       0       0       0       0
  5959 ;;      Locals:         0       0       6       0       0       0       0       0
  5960 ;;      Temps:          0       0       1       0       0       0       0       0
  5961 ;;      Totals:         0       0      15       0       0       0       0       0
  5962 ;;Total ram usage:       15 bytes
  5963 ;; Hardware stack levels used:    1
  5964 ;; Hardware stack levels required when called:    5
  5965 ;; This function calls:
  5966 ;;		Nothing
  5967 ;; This function is called by:
  5968 ;;		_battery_voltage
  5969 ;;		_setCurrent
  5970 ;;		_setFrequency
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           
  5975                           ;psect for function ___aldiv
  5976  02A2                     ___aldiv:
  5977                           
  5978                           ;incstack = 0
  5979                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5980  02A2  0021               	movlb	1	; select bank1
  5981  02A3  01B6               	clrf	___aldiv@sign^(0+128)
  5982  02A4  1FAF               	btfss	(___aldiv@divisor+3)^(0+128),7
  5983  02A5  2AB3               	goto	l741
  5984  02A6  09AC               	comf	___aldiv@divisor^(0+128),f
  5985  02A7  09AD               	comf	(___aldiv@divisor+1)^(0+128),f
  5986  02A8  09AE               	comf	(___aldiv@divisor+2)^(0+128),f
  5987  02A9  09AF               	comf	(___aldiv@divisor+3)^(0+128),f
  5988  02AA  0AAC               	incf	___aldiv@divisor^(0+128),f
  5989  02AB  1903               	skipnz
  5990  02AC  0AAD               	incf	(___aldiv@divisor+1)^(0+128),f
  5991  02AD  1903               	skipnz
  5992  02AE  0AAE               	incf	(___aldiv@divisor+2)^(0+128),f
  5993  02AF  1903               	skipnz
  5994  02B0  0AAF               	incf	(___aldiv@divisor+3)^(0+128),f
  5995  02B1  01B6               	clrf	___aldiv@sign^(0+128)
  5996  02B2  0AB6               	incf	___aldiv@sign^(0+128),f
  5997  02B3                     l741:
  5998  02B3  1FB3               	btfss	(___aldiv@dividend+3)^(0+128),7
  5999  02B4  2AC4               	goto	l2177
  6000  02B5  09B0               	comf	___aldiv@dividend^(0+128),f
  6001  02B6  09B1               	comf	(___aldiv@dividend+1)^(0+128),f
  6002  02B7  09B2               	comf	(___aldiv@dividend+2)^(0+128),f
  6003  02B8  09B3               	comf	(___aldiv@dividend+3)^(0+128),f
  6004  02B9  0AB0               	incf	___aldiv@dividend^(0+128),f
  6005  02BA  1903               	skipnz
  6006  02BB  0AB1               	incf	(___aldiv@dividend+1)^(0+128),f
  6007  02BC  1903               	skipnz
  6008  02BD  0AB2               	incf	(___aldiv@dividend+2)^(0+128),f
  6009  02BE  1903               	skipnz
  6010  02BF  0AB3               	incf	(___aldiv@dividend+3)^(0+128),f
  6011  02C0  3001               	movlw	1
  6012  02C1  00B4               	movwf	??___aldiv^(0+128)
  6013  02C2  0834               	movf	??___aldiv^(0+128),w
  6014  02C3  06B6               	xorwf	___aldiv@sign^(0+128),f
  6015  02C4                     l2177:
  6016  02C4  3000               	movlw	0
  6017  02C5  00BA               	movwf	(___aldiv@quotient+3)^(0+128)
  6018  02C6  3000               	movlw	0
  6019  02C7  00B9               	movwf	(___aldiv@quotient+2)^(0+128)
  6020  02C8  3000               	movlw	0
  6021  02C9  00B8               	movwf	(___aldiv@quotient+1)^(0+128)
  6022  02CA  3000               	movlw	0
  6023  02CB  00B7               	movwf	___aldiv@quotient^(0+128)
  6024  02CC  082F               	movf	(___aldiv@divisor+3)^(0+128),w
  6025  02CD  042E               	iorwf	(___aldiv@divisor+2)^(0+128),w
  6026  02CE  042D               	iorwf	(___aldiv@divisor+1)^(0+128),w
  6027  02CF  042C               	iorwf	___aldiv@divisor^(0+128),w
  6028  02D0  1903               	skipnz
  6029  02D1  2B0D               	goto	l2199
  6030  02D2  01B5               	clrf	___aldiv@counter^(0+128)
  6031  02D3  0AB5               	incf	___aldiv@counter^(0+128),f
  6032  02D4                     l2185:
  6033  02D4  1BAF               	btfsc	(___aldiv@divisor+3)^(0+128),7
  6034  02D5  2AE2               	goto	l2187
  6035  02D6  3001               	movlw	1
  6036  02D7                     u1775:
  6037  02D7  35AC               	lslf	___aldiv@divisor^(0+128),f
  6038  02D8  0DAD               	rlf	(___aldiv@divisor+1)^(0+128),f
  6039  02D9  0DAE               	rlf	(___aldiv@divisor+2)^(0+128),f
  6040  02DA  0DAF               	rlf	(___aldiv@divisor+3)^(0+128),f
  6041  02DB  0B89               	decfsz	9,f
  6042  02DC  2AD7               	goto	u1775
  6043  02DD  3001               	movlw	1
  6044  02DE  00B4               	movwf	??___aldiv^(0+128)
  6045  02DF  0834               	movf	??___aldiv^(0+128),w
  6046  02E0  07B5               	addwf	___aldiv@counter^(0+128),f
  6047  02E1  2AD4               	goto	l2185
  6048  02E2                     l2187:
  6049  02E2  3001               	movlw	1
  6050  02E3                     u1795:
  6051  02E3  35B7               	lslf	___aldiv@quotient^(0+128),f
  6052  02E4  0DB8               	rlf	(___aldiv@quotient+1)^(0+128),f
  6053  02E5  0DB9               	rlf	(___aldiv@quotient+2)^(0+128),f
  6054  02E6  0DBA               	rlf	(___aldiv@quotient+3)^(0+128),f
  6055  02E7  0B89               	decfsz	9,f
  6056  02E8  2AE3               	goto	u1795
  6057  02E9  082F               	movf	(___aldiv@divisor+3)^(0+128),w
  6058  02EA  0233               	subwf	(___aldiv@dividend+3)^(0+128),w
  6059  02EB  1D03               	skipz
  6060  02EC  2AF7               	goto	u1805
  6061  02ED  082E               	movf	(___aldiv@divisor+2)^(0+128),w
  6062  02EE  0232               	subwf	(___aldiv@dividend+2)^(0+128),w
  6063  02EF  1D03               	skipz
  6064  02F0  2AF7               	goto	u1805
  6065  02F1  082D               	movf	(___aldiv@divisor+1)^(0+128),w
  6066  02F2  0231               	subwf	(___aldiv@dividend+1)^(0+128),w
  6067  02F3  1D03               	skipz
  6068  02F4  2AF7               	goto	u1805
  6069  02F5  082C               	movf	___aldiv@divisor^(0+128),w
  6070  02F6  0230               	subwf	___aldiv@dividend^(0+128),w
  6071  02F7                     u1805:
  6072  02F7  1C03               	skipc
  6073  02F8  2B02               	goto	l2195
  6074  02F9  082C               	movf	___aldiv@divisor^(0+128),w
  6075  02FA  02B0               	subwf	___aldiv@dividend^(0+128),f
  6076  02FB  082D               	movf	(___aldiv@divisor+1)^(0+128),w
  6077  02FC  3BB1               	subwfb	(___aldiv@dividend+1)^(0+128),f
  6078  02FD  082E               	movf	(___aldiv@divisor+2)^(0+128),w
  6079  02FE  3BB2               	subwfb	(___aldiv@dividend+2)^(0+128),f
  6080  02FF  082F               	movf	(___aldiv@divisor+3)^(0+128),w
  6081  0300  3BB3               	subwfb	(___aldiv@dividend+3)^(0+128),f
  6082  0301  1437               	bsf	___aldiv@quotient^(0+128),0
  6083  0302                     l2195:
  6084  0302  3001               	movlw	1
  6085  0303                     u1815:
  6086  0303  36AF               	lsrf	(___aldiv@divisor+3)^(0+128),f
  6087  0304  0CAE               	rrf	(___aldiv@divisor+2)^(0+128),f
  6088  0305  0CAD               	rrf	(___aldiv@divisor+1)^(0+128),f
  6089  0306  0CAC               	rrf	___aldiv@divisor^(0+128),f
  6090  0307  0B89               	decfsz	9,f
  6091  0308  2B03               	goto	u1815
  6092  0309  3001               	movlw	1
  6093  030A  02B5               	subwf	___aldiv@counter^(0+128),f
  6094  030B  1D03               	btfss	3,2
  6095  030C  2AE2               	goto	l2187
  6096  030D                     l2199:
  6097  030D  0836               	movf	___aldiv@sign^(0+128),w
  6098  030E  1903               	btfsc	3,2
  6099  030F  2B1B               	goto	l2203
  6100  0310  09B7               	comf	___aldiv@quotient^(0+128),f
  6101  0311  09B8               	comf	(___aldiv@quotient+1)^(0+128),f
  6102  0312  09B9               	comf	(___aldiv@quotient+2)^(0+128),f
  6103  0313  09BA               	comf	(___aldiv@quotient+3)^(0+128),f
  6104  0314  0AB7               	incf	___aldiv@quotient^(0+128),f
  6105  0315  1903               	skipnz
  6106  0316  0AB8               	incf	(___aldiv@quotient+1)^(0+128),f
  6107  0317  1903               	skipnz
  6108  0318  0AB9               	incf	(___aldiv@quotient+2)^(0+128),f
  6109  0319  1903               	skipnz
  6110  031A  0ABA               	incf	(___aldiv@quotient+3)^(0+128),f
  6111  031B                     l2203:
  6112  031B  083A               	movf	(___aldiv@quotient+3)^(0+128),w
  6113  031C  00AF               	movwf	(?___aldiv+3)^(0+128)
  6114  031D  0839               	movf	(___aldiv@quotient+2)^(0+128),w
  6115  031E  00AE               	movwf	(?___aldiv+2)^(0+128)
  6116  031F  0838               	movf	(___aldiv@quotient+1)^(0+128),w
  6117  0320  00AD               	movwf	(?___aldiv+1)^(0+128)
  6118  0321  0837               	movf	___aldiv@quotient^(0+128),w
  6119  0322  00AC               	movwf	?___aldiv^(0+128)
  6120  0323  0008               	return
  6121  0324                     __end_of___aldiv:
  6122                           
  6123                           	psect	text16
  6124  0794                     __ptext16:	
  6125 ;; *************** function _lowBattery *****************
  6126 ;; Defined at:
  6127 ;;		line 178 in file "main.c"
  6128 ;; Parameters:    Size  Location     Type
  6129 ;;		None
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;		None
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  1    wreg      void 
  6134 ;; Registers used:
  6135 ;;		wreg, status,2, status,0, pclath, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6141 ;;      Params:         0       0       0       0       0       0       0       0
  6142 ;;      Locals:         0       0       0       0       0       0       0       0
  6143 ;;      Temps:          0       0       2       0       0       0       0       0
  6144 ;;      Totals:         0       0       2       0       0       0       0       0
  6145 ;;Total ram usage:        2 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    6
  6148 ;; This function calls:
  6149 ;;		_setLEDColor
  6150 ;; This function is called by:
  6151 ;;		_main
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           
  6156                           ;psect for function _lowBattery
  6157  0794                     _lowBattery:
  6158                           
  6159                           ;main.c: 179: interfaceState = STATE_LOWBATTERY;
  6160                           
  6161                           ;incstack = 0
  6162                           ; Regs used in _lowBattery: [wreg+status,2+status,0+pclath+cstack]
  6163  0794  3003               	movlw	3
  6164  0795  0021               	movlb	1	; select bank1
  6165  0796  00A4               	movwf	??_lowBattery^(0+128)
  6166  0797  0824               	movf	??_lowBattery^(0+128),w
  6167  0798  00E3               	movwf	_interfaceState^(0+128)
  6168                           
  6169                           ;main.c: 180: setLEDColor(255, 0, 0);
  6170  0799  01A0               	clrf	setLEDColor@green^(0+128)
  6171  079A  01A1               	clrf	setLEDColor@blue^(0+128)
  6172  079B  30FF               	movlw	255
  6173  079C  318F  2735  3187   	fcall	_setLEDColor
  6174                           
  6175                           ;main.c: 181: _delay((unsigned long)((250)*(4000000/4000.0)));
  6176  079F  3002               	movlw	2
  6177  07A0  0021               	movlb	1	; select bank1
  6178  07A1  00A5               	movwf	(??_lowBattery^(0+128)+1)
  6179  07A2  3045               	movlw	69
  6180  07A3  00A4               	movwf	??_lowBattery^(0+128)
  6181  07A4  30A9               	movlw	169
  6182  07A5                     u2827:
  6183  07A5  0B89               	decfsz	9,f
  6184  07A6  2FA5               	goto	u2827
  6185  07A7  0BA4               	decfsz	??_lowBattery^(0+128),f
  6186  07A8  2FA5               	goto	u2827
  6187  07A9  0BA5               	decfsz	(??_lowBattery^(0+128)+1),f
  6188  07AA  2FA5               	goto	u2827
  6189  07AB  3200               	nop2
  6190                           
  6191                           ;main.c: 182: setLEDColor(0, 0, 0);
  6192  07AC  0021               	movlb	1	; select bank1
  6193  07AD  01A0               	clrf	setLEDColor@green^(0+128)
  6194  07AE  01A1               	clrf	setLEDColor@blue^(0+128)
  6195  07AF  3000               	movlw	0
  6196  07B0  318F  2735  3187   	fcall	_setLEDColor
  6197                           
  6198                           ;main.c: 183: _delay((unsigned long)((500)*(4000000/4000.0)));
  6199  07B3  3003               	movlw	3
  6200  07B4  0021               	movlb	1	; select bank1
  6201  07B5  00A5               	movwf	(??_lowBattery^(0+128)+1)
  6202  07B6  308A               	movlw	138
  6203  07B7  00A4               	movwf	??_lowBattery^(0+128)
  6204  07B8  3055               	movlw	85
  6205  07B9                     u2837:
  6206  07B9  0B89               	decfsz	9,f
  6207  07BA  2FB9               	goto	u2837
  6208  07BB  0BA4               	decfsz	??_lowBattery^(0+128),f
  6209  07BC  2FB9               	goto	u2837
  6210  07BD  0BA5               	decfsz	(??_lowBattery^(0+128)+1),f
  6211  07BE  2FB9               	goto	u2837
  6212  07BF  3200               	nop2
  6213  07C0  0008               	return
  6214  07C1                     __end_of_lowBattery:
  6215                           
  6216                           	psect	text17
  6217  0F35                     __ptext17:	
  6218 ;; *************** function _setLEDColor *****************
  6219 ;; Defined at:
  6220 ;;		line 157 in file "main.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;  red             1    wreg     unsigned char 
  6223 ;;  green           1    0[BANK1 ] unsigned char 
  6224 ;;  blue            1    1[BANK1 ] unsigned char 
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;  red             1    3[BANK1 ] unsigned char 
  6227 ;; Return value:  Size  Location     Type
  6228 ;;                  1    wreg      void 
  6229 ;; Registers used:
  6230 ;;		wreg, status,2, status,0
  6231 ;; Tracked objects:
  6232 ;;		On entry : 0/0
  6233 ;;		On exit  : 0/0
  6234 ;;		Unchanged: 0/0
  6235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6236 ;;      Params:         0       0       2       0       0       0       0       0
  6237 ;;      Locals:         0       0       1       0       0       0       0       0
  6238 ;;      Temps:          0       0       1       0       0       0       0       0
  6239 ;;      Totals:         0       0       4       0       0       0       0       0
  6240 ;;Total ram usage:        4 bytes
  6241 ;; Hardware stack levels used:    1
  6242 ;; Hardware stack levels required when called:    5
  6243 ;; This function calls:
  6244 ;;		Nothing
  6245 ;; This function is called by:
  6246 ;;		_lowBattery
  6247 ;;		_startUp
  6248 ;;		_selectSomething
  6249 ;;		_selectFrequency
  6250 ;;		_selectCurrent
  6251 ;;		_process_remote_command
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           
  6256                           ;psect for function _setLEDColor
  6257  0F35                     _setLEDColor:
  6258                           
  6259                           ;incstack = 0
  6260                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  6261                           ;setLEDColor@red stored from wreg
  6262  0F35  0021               	movlb	1	; select bank1
  6263  0F36  00A3               	movwf	setLEDColor@red^(0+128)
  6264                           
  6265                           ;main.c: 164: if (0 == blue){
  6266  0F37  0821               	movf	setLEDColor@blue^(0+128),w
  6267  0F38  1D03               	btfss	3,2
  6268  0F39  2F3C               	goto	l2657
  6269                           
  6270                           ;main.c: 165: TRISC |= 0b00100000;
  6271  0F3A  168E               	bsf	14,5	;volatile
  6272                           
  6273                           ;main.c: 166: } else {
  6274  0F3B  2F40               	goto	l2659
  6275  0F3C                     l2657:
  6276                           
  6277                           ;main.c: 167: TRISC &= 0b11011111;
  6278  0F3C  30DF               	movlw	223
  6279  0F3D  00A2               	movwf	??_setLEDColor^(0+128)
  6280  0F3E  0822               	movf	??_setLEDColor^(0+128),w
  6281  0F3F  058E               	andwf	14,f	;volatile
  6282  0F40                     l2659:
  6283                           
  6284                           ;main.c: 168: };main.c: 169: CCPR1L = 255 - blue;
  6285  0F40  0921               	comf	setLEDColor@blue^(0+128),w
  6286  0F41  0025               	movlb	5	; select bank5
  6287  0F42  0091               	movwf	17	;volatile
  6288                           
  6289                           ;main.c: 171: PWM3DCH = red;
  6290  0F43  0021               	movlb	1	; select bank1
  6291  0F44  0823               	movf	setLEDColor@red^(0+128),w
  6292  0F45  002C               	movlb	12	; select bank12
  6293  0F46  0098               	movwf	24	;volatile
  6294                           
  6295                           ;main.c: 173: PWM4DCH = green;
  6296  0F47  0021               	movlb	1	; select bank1
  6297  0F48  0820               	movf	setLEDColor@green^(0+128),w
  6298  0F49  002C               	movlb	12	; select bank12
  6299  0F4A  009B               	movwf	27	;volatile
  6300  0F4B  0008               	return
  6301  0F4C                     __end_of_setLEDColor:
  6302                           
  6303                           	psect	text18
  6304  05EB                     __ptext18:	
  6305 ;; *************** function _initLED *****************
  6306 ;; Defined at:
  6307 ;;		line 116 in file "main.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;		None
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;		None
  6312 ;; Return value:  Size  Location     Type
  6313 ;;                  1    wreg      void 
  6314 ;; Registers used:
  6315 ;;		wreg, status,2, status,0
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6321 ;;      Params:         0       0       0       0       0       0       0       0
  6322 ;;      Locals:         0       0       0       0       0       0       0       0
  6323 ;;      Temps:          0       0       1       0       0       0       0       0
  6324 ;;      Totals:         0       0       1       0       0       0       0       0
  6325 ;;Total ram usage:        1 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    5
  6328 ;; This function calls:
  6329 ;;		Nothing
  6330 ;; This function is called by:
  6331 ;;		_main
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           
  6336                           ;psect for function _initLED
  6337  05EB                     _initLED:
  6338                           
  6339                           ;main.c: 119: PR2 = 255;
  6340                           
  6341                           ;incstack = 0
  6342                           ; Regs used in _initLED: [wreg+status,2+status,0]
  6343  05EB  30FF               	movlw	255
  6344  05EC  0020               	movlb	0	; select bank0
  6345  05ED  009B               	movwf	27	;volatile
  6346                           
  6347                           ;main.c: 120: T2CONbits.T2CKPS = 0b10;
  6348  05EE  081C               	movf	28,w	;volatile
  6349  05EF  39FC               	andlw	-4
  6350  05F0  3802               	iorlw	2
  6351  05F1  009C               	movwf	28	;volatile
  6352                           
  6353                           ;main.c: 121: T2CONbits.TMR2ON = 1;
  6354  05F2  151C               	bsf	28,2	;volatile
  6355                           
  6356                           ;main.c: 125: TRISC |= 0b00010000;
  6357  05F3  0021               	movlb	1	; select bank1
  6358  05F4  160E               	bsf	14,4	;volatile
  6359                           
  6360                           ;main.c: 126: RC4PPS = 0b01110;
  6361  05F5  300E               	movlw	14
  6362  05F6  003D               	movlb	29	; select bank29
  6363  05F7  00A4               	movwf	36	;volatile
  6364                           
  6365                           ;main.c: 127: CCPTMRSbits.P3TSEL = 0b00;
  6366  05F8  30CF               	movlw	-49
  6367  05F9  0025               	movlb	5	; select bank5
  6368  05FA  059E               	andwf	30,f	;volatile
  6369                           
  6370                           ;main.c: 128: PWM3DCH = 0;
  6371  05FB  002C               	movlb	12	; select bank12
  6372  05FC  0198               	clrf	24	;volatile
  6373                           
  6374                           ;main.c: 129: PWM3DCLbits.PWM3DCL = 0;
  6375  05FD  303F               	movlw	-193
  6376  05FE  0597               	andwf	23,f	;volatile
  6377                           
  6378                           ;main.c: 130: PWM3CONbits.PWM3POL = 1;
  6379  05FF  1619               	bsf	25,4	;volatile
  6380                           
  6381                           ;main.c: 131: TRISC &= 0b11101111;
  6382  0600  30EF               	movlw	239
  6383  0601  0021               	movlb	1	; select bank1
  6384  0602  00A0               	movwf	??_initLED^(0+128)
  6385  0603  0820               	movf	??_initLED^(0+128),w
  6386  0604  058E               	andwf	14,f	;volatile
  6387                           
  6388                           ;main.c: 132: PWM3CONbits.PWM3EN = 1;
  6389  0605  002C               	movlb	12	; select bank12
  6390  0606  1799               	bsf	25,7	;volatile
  6391                           
  6392                           ;main.c: 136: TRISA |= 0b00100000;
  6393  0607  0021               	movlb	1	; select bank1
  6394  0608  168C               	bsf	12,5	;volatile
  6395                           
  6396                           ;main.c: 137: RA5PPS = 0b01111;
  6397  0609  300F               	movlw	15
  6398  060A  003D               	movlb	29	; select bank29
  6399  060B  0095               	movwf	21	;volatile
  6400                           
  6401                           ;main.c: 138: CCPTMRSbits.P4TSEL = 0b00;
  6402  060C  303F               	movlw	-193
  6403  060D  0025               	movlb	5	; select bank5
  6404  060E  059E               	andwf	30,f	;volatile
  6405                           
  6406                           ;main.c: 139: PWM4DCH = 0;
  6407  060F  002C               	movlb	12	; select bank12
  6408  0610  019B               	clrf	27	;volatile
  6409                           
  6410                           ;main.c: 140: PWM4DCLbits.PWM4DCL = 0;
  6411  0611  303F               	movlw	-193
  6412  0612  059A               	andwf	26,f	;volatile
  6413                           
  6414                           ;main.c: 141: PWM4CONbits.PWM4POL = 1;
  6415  0613  161C               	bsf	28,4	;volatile
  6416                           
  6417                           ;main.c: 142: TRISA &= 0b11011111;
  6418  0614  30DF               	movlw	223
  6419  0615  0021               	movlb	1	; select bank1
  6420  0616  00A0               	movwf	??_initLED^(0+128)
  6421  0617  0820               	movf	??_initLED^(0+128),w
  6422  0618  058C               	andwf	12,f	;volatile
  6423                           
  6424                           ;main.c: 143: PWM4CONbits.PWM4EN = 1;
  6425  0619  002C               	movlb	12	; select bank12
  6426  061A  179C               	bsf	28,7	;volatile
  6427                           
  6428                           ;main.c: 149: TRISC |= 0b00100000;
  6429  061B  0021               	movlb	1	; select bank1
  6430  061C  168E               	bsf	14,5	;volatile
  6431                           
  6432                           ;main.c: 150: RC5PPS = 0b01100;
  6433  061D  300C               	movlw	12
  6434  061E  003D               	movlb	29	; select bank29
  6435  061F  00A5               	movwf	37	;volatile
  6436                           
  6437                           ;main.c: 151: CCP1CONbits.CCP1M = 0b1100;
  6438  0620  0025               	movlb	5	; select bank5
  6439  0621  0813               	movf	19,w	;volatile
  6440  0622  39F0               	andlw	-16
  6441  0623  380C               	iorlw	12
  6442  0624  0093               	movwf	19	;volatile
  6443                           
  6444                           ;main.c: 152: CCPR1L = 255;
  6445  0625  30FF               	movlw	255
  6446  0626  0091               	movwf	17	;volatile
  6447                           
  6448                           ;main.c: 153: CCP1CONbits.DC1B = 0x3;
  6449  0627  3030               	movlw	48
  6450  0628  0493               	iorwf	19,f	;volatile
  6451                           
  6452                           ;main.c: 154: TRISC &= 0b11011111;
  6453  0629  30DF               	movlw	223
  6454  062A  0021               	movlb	1	; select bank1
  6455  062B  00A0               	movwf	??_initLED^(0+128)
  6456  062C  0820               	movf	??_initLED^(0+128),w
  6457  062D  058E               	andwf	14,f	;volatile
  6458  062E  0008               	return
  6459  062F                     __end_of_initLED:
  6460                           
  6461                           	psect	text19
  6462  0F69                     __ptext19:	
  6463 ;; *************** function _SYSTEM_Initialize *****************
  6464 ;; Defined at:
  6465 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;		None
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;		None
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  1    wreg      void 
  6472 ;; Registers used:
  6473 ;;		wreg, status,2, status,0, pclath, cstack
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6479 ;;      Params:         0       0       0       0       0       0       0       0
  6480 ;;      Locals:         0       0       0       0       0       0       0       0
  6481 ;;      Temps:          0       0       0       0       0       0       0       0
  6482 ;;      Totals:         0       0       0       0       0       0       0       0
  6483 ;;Total ram usage:        0 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    7
  6486 ;; This function calls:
  6487 ;;		_DAC_Initialize
  6488 ;;		_EUSART_Initialize
  6489 ;;		_EXT_INT_Initialize
  6490 ;;		_OPA1_Initialize
  6491 ;;		_OPA2_Initialize
  6492 ;;		_OSCILLATOR_Initialize
  6493 ;;		_PIN_MANAGER_Initialize
  6494 ;;		_TMR0_Initialize
  6495 ;;		_TMR2_Initialize
  6496 ;;		_TMR4_Initialize
  6497 ;;		_WDT_Initialize
  6498 ;; This function is called by:
  6499 ;;		_main
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           
  6504                           ;psect for function _SYSTEM_Initialize
  6505  0F69                     _SYSTEM_Initialize:
  6506                           
  6507                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  6508                           
  6509                           ;incstack = 0
  6510                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6511  0F69  3186  26A2  318F   	fcall	_PIN_MANAGER_Initialize
  6512                           
  6513                           ;mcc.c: 54: OSCILLATOR_Initialize();
  6514  0F6C  318E  268A  318F   	fcall	_OSCILLATOR_Initialize
  6515                           
  6516                           ;mcc.c: 55: WDT_Initialize();
  6517  0F6F  318E  266E  318F   	fcall	_WDT_Initialize
  6518                           
  6519                           ;mcc.c: 56: DAC_Initialize();
  6520  0F72  318E  2672  318F   	fcall	_DAC_Initialize
  6521                           
  6522                           ;mcc.c: 57: OPA1_Initialize();
  6523  0F75  318E  2666  318F   	fcall	_OPA1_Initialize
  6524                           
  6525                           ;mcc.c: 58: OPA2_Initialize();
  6526  0F78  318E  266A  318F   	fcall	_OPA2_Initialize
  6527                           
  6528                           ;mcc.c: 59: TMR4_Initialize();
  6529  0F7B  318F  270D  318F   	fcall	_TMR4_Initialize
  6530                           
  6531                           ;mcc.c: 60: TMR2_Initialize();
  6532  0F7E  318E  2692  318F   	fcall	_TMR2_Initialize
  6533                           
  6534                           ;mcc.c: 61: EXT_INT_Initialize();
  6535  0F81  318E  26E6  318F   	fcall	_EXT_INT_Initialize
  6536                           
  6537                           ;mcc.c: 62: TMR0_Initialize();
  6538  0F84  318E  26C7  318F   	fcall	_TMR0_Initialize
  6539                           
  6540                           ;mcc.c: 63: EUSART_Initialize();
  6541  0F87  318F  278A         	fcall	_EUSART_Initialize
  6542  0F89  0008               	return
  6543  0F8A                     __end_of_SYSTEM_Initialize:
  6544                           
  6545                           	psect	text20
  6546  0E6E                     __ptext20:	
  6547 ;; *************** function _WDT_Initialize *****************
  6548 ;; Defined at:
  6549 ;;		line 78 in file "mcc_generated_files/mcc.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6563 ;;      Params:         0       0       0       0       0       0       0       0
  6564 ;;      Locals:         0       0       0       0       0       0       0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0       0
  6566 ;;      Totals:         0       0       0       0       0       0       0       0
  6567 ;;Total ram usage:        0 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    5
  6570 ;; This function calls:
  6571 ;;		Nothing
  6572 ;; This function is called by:
  6573 ;;		_SYSTEM_Initialize
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _WDT_Initialize
  6579  0E6E                     _WDT_Initialize:
  6580                           
  6581                           ;mcc.c: 81: WDTCON = 0x16;
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _WDT_Initialize: [wreg]
  6585  0E6E  3016               	movlw	22
  6586  0E6F  0021               	movlb	1	; select bank1
  6587  0E70  0097               	movwf	23	;volatile
  6588  0E71  0008               	return
  6589  0E72                     __end_of_WDT_Initialize:
  6590                           
  6591                           	psect	text21
  6592  0F0D                     __ptext21:	
  6593 ;; *************** function _TMR4_Initialize *****************
  6594 ;; Defined at:
  6595 ;;		line 64 in file "mcc_generated_files/tmr4.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;		None
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;		None
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  1    wreg      void 
  6602 ;; Registers used:
  6603 ;;		wreg, status,2, status,0, pclath, cstack
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6609 ;;      Params:         0       0       0       0       0       0       0       0
  6610 ;;      Locals:         0       0       0       0       0       0       0       0
  6611 ;;      Temps:          0       0       0       0       0       0       0       0
  6612 ;;      Totals:         0       0       0       0       0       0       0       0
  6613 ;;Total ram usage:        0 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    6
  6616 ;; This function calls:
  6617 ;;		_TMR4_SetInterruptHandler
  6618 ;; This function is called by:
  6619 ;;		_SYSTEM_Initialize
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           
  6624                           ;psect for function _TMR4_Initialize
  6625  0F0D                     _TMR4_Initialize:
  6626                           
  6627                           ;tmr4.c: 69: PR4 = 0x04;
  6628                           
  6629                           ;incstack = 0
  6630                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6631  0F0D  3004               	movlw	4
  6632  0F0E  0028               	movlb	8	; select bank8
  6633  0F0F  0096               	movwf	22	;volatile
  6634                           
  6635                           ;tmr4.c: 72: TMR4 = 0x00;
  6636  0F10  0195               	clrf	21	;volatile
  6637                           
  6638                           ;tmr4.c: 75: PIR2bits.TMR4IF = 0;
  6639  0F11  0020               	movlb	0	; select bank0
  6640  0F12  1092               	bcf	18,1	;volatile
  6641                           
  6642                           ;tmr4.c: 78: PIE2bits.TMR4IE = 1;
  6643  0F13  0021               	movlb	1	; select bank1
  6644  0F14  1492               	bsf	18,1	;volatile
  6645                           
  6646                           ;tmr4.c: 81: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
  6647  0F15  306C               	movlw	low _TMR4_DefaultInterruptHandler
  6648  0F16  00A0               	movwf	TMR4_SetInterruptHandler@InterruptHandler^(0+128)
  6649  0F17  3006               	movlw	high _TMR4_DefaultInterruptHandler
  6650  0F18  00A1               	movwf	(TMR4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  6651  0F19  318E  26BE         	fcall	_TMR4_SetInterruptHandler
  6652                           
  6653                           ;tmr4.c: 84: T4CON = 0x16;
  6654  0F1B  3016               	movlw	22
  6655  0F1C  0028               	movlb	8	; select bank8
  6656  0F1D  0097               	movwf	23	;volatile
  6657  0F1E  0008               	return
  6658  0F1F                     __end_of_TMR4_Initialize:
  6659                           
  6660                           	psect	text22
  6661  0EBE                     __ptext22:	
  6662 ;; *************** function _TMR4_SetInterruptHandler *****************
  6663 ;; Defined at:
  6664 ;;		line 131 in file "mcc_generated_files/tmr4.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  6667 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;		None
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  1    wreg      void 
  6672 ;; Registers used:
  6673 ;;		wreg
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6679 ;;      Params:         0       0       2       0       0       0       0       0
  6680 ;;      Locals:         0       0       0       0       0       0       0       0
  6681 ;;      Temps:          0       0       0       0       0       0       0       0
  6682 ;;      Totals:         0       0       2       0       0       0       0       0
  6683 ;;Total ram usage:        2 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    5
  6686 ;; This function calls:
  6687 ;;		Nothing
  6688 ;; This function is called by:
  6689 ;;		_TMR4_Initialize
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           
  6694                           ;psect for function _TMR4_SetInterruptHandler
  6695  0EBE                     _TMR4_SetInterruptHandler:
  6696                           
  6697                           ;tmr4.c: 132: TMR4_InterruptHandler = InterruptHandler;
  6698                           
  6699                           ;incstack = 0
  6700                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  6701  0EBE  0021               	movlb	1	; select bank1
  6702  0EBF  0821               	movf	(TMR4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  6703  0EC0  0020               	movlb	0	; select bank0
  6704  0EC1  00CF               	movwf	_TMR4_InterruptHandler+1
  6705  0EC2  0021               	movlb	1	; select bank1
  6706  0EC3  0820               	movf	TMR4_SetInterruptHandler@InterruptHandler^(0+128),w
  6707  0EC4  0020               	movlb	0	; select bank0
  6708  0EC5  00CE               	movwf	_TMR4_InterruptHandler
  6709  0EC6  0008               	return
  6710  0EC7                     __end_of_TMR4_SetInterruptHandler:
  6711                           
  6712                           	psect	text23
  6713  0E92                     __ptext23:	
  6714 ;; *************** function _TMR2_Initialize *****************
  6715 ;; Defined at:
  6716 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;		None
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;		None
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  1    wreg      void 
  6723 ;; Registers used:
  6724 ;;		wreg, status,2
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6730 ;;      Params:         0       0       0       0       0       0       0       0
  6731 ;;      Locals:         0       0       0       0       0       0       0       0
  6732 ;;      Temps:          0       0       0       0       0       0       0       0
  6733 ;;      Totals:         0       0       0       0       0       0       0       0
  6734 ;;Total ram usage:        0 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:    5
  6737 ;; This function calls:
  6738 ;;		Nothing
  6739 ;; This function is called by:
  6740 ;;		_SYSTEM_Initialize
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           
  6745                           ;psect for function _TMR2_Initialize
  6746  0E92                     _TMR2_Initialize:
  6747                           
  6748                           ;tmr2.c: 67: PR2 = 255;
  6749                           
  6750                           ;incstack = 0
  6751                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6752  0E92  30FF               	movlw	255
  6753  0E93  0020               	movlb	0	; select bank0
  6754  0E94  009B               	movwf	27	;volatile
  6755                           
  6756                           ;tmr2.c: 70: TMR2 = 0x00;
  6757  0E95  019A               	clrf	26	;volatile
  6758                           
  6759                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
  6760  0E96  1091               	bcf	17,1	;volatile
  6761                           
  6762                           ;tmr2.c: 76: T2CON = 0x06;
  6763  0E97  3006               	movlw	6
  6764  0E98  009C               	movwf	28	;volatile
  6765  0E99  0008               	return
  6766  0E9A                     __end_of_TMR2_Initialize:
  6767                           
  6768                           	psect	text24
  6769  0EC7                     __ptext24:	
  6770 ;; *************** function _TMR0_Initialize *****************
  6771 ;; Defined at:
  6772 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, status,2
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6786 ;;      Params:         0       0       0       0       0       0       0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0       0
  6788 ;;      Temps:          0       0       0       0       0       0       0       0
  6789 ;;      Totals:         0       0       0       0       0       0       0       0
  6790 ;;Total ram usage:        0 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    5
  6793 ;; This function calls:
  6794 ;;		Nothing
  6795 ;; This function is called by:
  6796 ;;		_SYSTEM_Initialize
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           
  6801                           ;psect for function _TMR0_Initialize
  6802  0EC7                     _TMR0_Initialize:
  6803                           
  6804                           ;tmr0.c: 68: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 & 0x3F));
  6805                           
  6806                           ;incstack = 0
  6807                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  6808  0EC7  0021               	movlb	1	; select bank1
  6809  0EC8  0815               	movf	21,w	;volatile
  6810  0EC9  39C0               	andlw	192
  6811  0ECA  3815               	iorlw	21
  6812  0ECB  0095               	movwf	21	;volatile
  6813                           
  6814                           ;tmr0.c: 71: TMR0 = 0x00;
  6815  0ECC  0020               	movlb	0	; select bank0
  6816  0ECD  0195               	clrf	21	;volatile
  6817                           
  6818                           ;tmr0.c: 74: timer0ReloadVal= 0;
  6819  0ECE  01FD               	clrf	_timer0ReloadVal	;volatile
  6820                           
  6821                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  6822  0ECF  110B               	bcf	11,2	;volatile
  6823  0ED0  0008               	return
  6824  0ED1                     __end_of_TMR0_Initialize:
  6825                           
  6826                           	psect	text25
  6827  06A2                     __ptext25:	
  6828 ;; *************** function _PIN_MANAGER_Initialize *****************
  6829 ;; Defined at:
  6830 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;		None
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;		None
  6835 ;; Return value:  Size  Location     Type
  6836 ;;                  1    wreg      void 
  6837 ;; Registers used:
  6838 ;;		wreg, status,2
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6844 ;;      Params:         0       0       0       0       0       0       0       0
  6845 ;;      Locals:         0       0       0       0       0       0       0       0
  6846 ;;      Temps:          0       0       0       0       0       0       0       0
  6847 ;;      Totals:         0       0       0       0       0       0       0       0
  6848 ;;Total ram usage:        0 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:    5
  6851 ;; This function calls:
  6852 ;;		Nothing
  6853 ;; This function is called by:
  6854 ;;		_SYSTEM_Initialize
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           
  6859                           ;psect for function _PIN_MANAGER_Initialize
  6860  06A2                     _PIN_MANAGER_Initialize:
  6861                           
  6862                           ;pin_manager.c: 60: LATA = 0x00;
  6863                           
  6864                           ;incstack = 0
  6865                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6866  06A2  0022               	movlb	2	; select bank2
  6867  06A3  018C               	clrf	12	;volatile
  6868                           
  6869                           ;pin_manager.c: 61: LATB = 0x00;
  6870  06A4  018D               	clrf	13	;volatile
  6871                           
  6872                           ;pin_manager.c: 62: LATC = 0x00;
  6873  06A5  018E               	clrf	14	;volatile
  6874                           
  6875                           ;pin_manager.c: 67: TRISA = 0x04;
  6876  06A6  3004               	movlw	4
  6877  06A7  0021               	movlb	1	; select bank1
  6878  06A8  008C               	movwf	12	;volatile
  6879                           
  6880                           ;pin_manager.c: 68: TRISB = 0x30;
  6881  06A9  3030               	movlw	48
  6882  06AA  008D               	movwf	13	;volatile
  6883                           
  6884                           ;pin_manager.c: 69: TRISC = 0x50;
  6885  06AB  3050               	movlw	80
  6886  06AC  008E               	movwf	14	;volatile
  6887                           
  6888                           ;pin_manager.c: 74: ANSELC = 0x40;
  6889  06AD  3040               	movlw	64
  6890  06AE  0023               	movlb	3	; select bank3
  6891  06AF  008E               	movwf	14	;volatile
  6892                           
  6893                           ;pin_manager.c: 75: ANSELB = 0x10;
  6894  06B0  3010               	movlw	16
  6895  06B1  008D               	movwf	13	;volatile
  6896                           
  6897                           ;pin_manager.c: 76: ANSELA = 0x00;
  6898  06B2  018C               	clrf	12	;volatile
  6899                           
  6900                           ;pin_manager.c: 81: WPUB = 0x00;
  6901  06B3  0024               	movlb	4	; select bank4
  6902  06B4  018D               	clrf	13	;volatile
  6903                           
  6904                           ;pin_manager.c: 82: WPUA = 0x00;
  6905  06B5  018C               	clrf	12	;volatile
  6906                           
  6907                           ;pin_manager.c: 83: WPUC = 0x00;
  6908  06B6  018E               	clrf	14	;volatile
  6909                           
  6910                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 0;
  6911  06B7  0021               	movlb	1	; select bank1
  6912  06B8  1395               	bcf	21,7	;volatile
  6913                           
  6914                           ;pin_manager.c: 89: ODCONA = 0x00;
  6915  06B9  0025               	movlb	5	; select bank5
  6916  06BA  018C               	clrf	12	;volatile
  6917                           
  6918                           ;pin_manager.c: 90: ODCONB = 0x00;
  6919  06BB  018D               	clrf	13	;volatile
  6920                           
  6921                           ;pin_manager.c: 91: ODCONC = 0x00;
  6922  06BC  018E               	clrf	14	;volatile
  6923                           
  6924                           ;pin_manager.c: 96: SLRCONA = 0x37;
  6925  06BD  3037               	movlw	55
  6926  06BE  0026               	movlb	6	; select bank6
  6927  06BF  008C               	movwf	12	;volatile
  6928                           
  6929                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  6930  06C0  30F0               	movlw	240
  6931  06C1  008D               	movwf	13	;volatile
  6932                           
  6933                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  6934  06C2  30FF               	movlw	255
  6935  06C3  008E               	movwf	14	;volatile
  6936                           
  6937                           ;pin_manager.c: 103: INLVLA = 0x3F;
  6938  06C4  303F               	movlw	63
  6939  06C5  0027               	movlb	7	; select bank7
  6940  06C6  008C               	movwf	12	;volatile
  6941                           
  6942                           ;pin_manager.c: 104: INLVLB = 0xF0;
  6943  06C7  30F0               	movlw	240
  6944  06C8  008D               	movwf	13	;volatile
  6945                           
  6946                           ;pin_manager.c: 105: INLVLC = 0xFF;
  6947  06C9  30FF               	movlw	255
  6948  06CA  008E               	movwf	14	;volatile
  6949                           
  6950                           ;pin_manager.c: 113: INTCONbits.IOCIE = 1;
  6951  06CB  158B               	bsf	11,3	;volatile
  6952                           
  6953                           ;pin_manager.c: 116: INTPPS = 0x02;
  6954  06CC  3002               	movlw	2
  6955  06CD  003C               	movlb	28	; select bank28
  6956  06CE  0090               	movwf	16	;volatile
  6957                           
  6958                           ;pin_manager.c: 117: RXPPS = 0x0D;
  6959  06CF  300D               	movlw	13
  6960  06D0  00A4               	movwf	36	;volatile
  6961                           
  6962                           ;pin_manager.c: 118: RB7PPS = 0x14;
  6963  06D1  3014               	movlw	20
  6964  06D2  003D               	movlb	29	; select bank29
  6965  06D3  009F               	movwf	31	;volatile
  6966  06D4  0008               	return
  6967  06D5                     __end_of_PIN_MANAGER_Initialize:
  6968                           
  6969                           	psect	text26
  6970  0E8A                     __ptext26:	
  6971 ;; *************** function _OSCILLATOR_Initialize *****************
  6972 ;; Defined at:
  6973 ;;		line 66 in file "mcc_generated_files/mcc.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;		None
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;		None
  6978 ;; Return value:  Size  Location     Type
  6979 ;;                  1    wreg      void 
  6980 ;; Registers used:
  6981 ;;		wreg, status,2
  6982 ;; Tracked objects:
  6983 ;;		On entry : 0/0
  6984 ;;		On exit  : 0/0
  6985 ;;		Unchanged: 0/0
  6986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6987 ;;      Params:         0       0       0       0       0       0       0       0
  6988 ;;      Locals:         0       0       0       0       0       0       0       0
  6989 ;;      Temps:          0       0       0       0       0       0       0       0
  6990 ;;      Totals:         0       0       0       0       0       0       0       0
  6991 ;;Total ram usage:        0 bytes
  6992 ;; Hardware stack levels used:    1
  6993 ;; Hardware stack levels required when called:    5
  6994 ;; This function calls:
  6995 ;;		Nothing
  6996 ;; This function is called by:
  6997 ;;		_SYSTEM_Initialize
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           
  7002                           ;psect for function _OSCILLATOR_Initialize
  7003  0E8A                     _OSCILLATOR_Initialize:
  7004                           
  7005                           ;mcc.c: 69: OSCCON = 0x6A;
  7006                           
  7007                           ;incstack = 0
  7008                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7009  0E8A  306A               	movlw	106
  7010  0E8B  0021               	movlb	1	; select bank1
  7011  0E8C  0099               	movwf	25	;volatile
  7012                           
  7013                           ;mcc.c: 71: OSCSTAT = 0x00;
  7014  0E8D  019A               	clrf	26	;volatile
  7015                           
  7016                           ;mcc.c: 73: OSCTUNE = 0x00;
  7017  0E8E  0198               	clrf	24	;volatile
  7018                           
  7019                           ;mcc.c: 75: BORCON = 0x00;
  7020  0E8F  0022               	movlb	2	; select bank2
  7021  0E90  0196               	clrf	22	;volatile
  7022  0E91  0008               	return
  7023  0E92                     __end_of_OSCILLATOR_Initialize:
  7024                           
  7025                           	psect	text27
  7026  0E6A                     __ptext27:	
  7027 ;; *************** function _OPA2_Initialize *****************
  7028 ;; Defined at:
  7029 ;;		line 58 in file "mcc_generated_files/opa2.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;		None
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;		None
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  1    wreg      void 
  7036 ;; Registers used:
  7037 ;;		wreg
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7043 ;;      Params:         0       0       0       0       0       0       0       0
  7044 ;;      Locals:         0       0       0       0       0       0       0       0
  7045 ;;      Temps:          0       0       0       0       0       0       0       0
  7046 ;;      Totals:         0       0       0       0       0       0       0       0
  7047 ;;Total ram usage:        0 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    5
  7050 ;; This function calls:
  7051 ;;		Nothing
  7052 ;; This function is called by:
  7053 ;;		_SYSTEM_Initialize
  7054 ;;		_main
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           
  7059                           ;psect for function _OPA2_Initialize
  7060  0E6A                     _OPA2_Initialize:
  7061                           
  7062                           ;opa2.c: 61: OPA2CON = 0xC2;
  7063                           
  7064                           ;incstack = 0
  7065                           ; Regs used in _OPA2_Initialize: [wreg]
  7066  0E6A  30C2               	movlw	194
  7067  0E6B  002A               	movlb	10	; select bank10
  7068  0E6C  0095               	movwf	21	;volatile
  7069  0E6D  0008               	return
  7070  0E6E                     __end_of_OPA2_Initialize:
  7071                           
  7072                           	psect	text28
  7073  0E66                     __ptext28:	
  7074 ;; *************** function _OPA1_Initialize *****************
  7075 ;; Defined at:
  7076 ;;		line 58 in file "mcc_generated_files/opa1.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;		None
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;		None
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  1    wreg      void 
  7083 ;; Registers used:
  7084 ;;		wreg
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7090 ;;      Params:         0       0       0       0       0       0       0       0
  7091 ;;      Locals:         0       0       0       0       0       0       0       0
  7092 ;;      Temps:          0       0       0       0       0       0       0       0
  7093 ;;      Totals:         0       0       0       0       0       0       0       0
  7094 ;;Total ram usage:        0 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    5
  7097 ;; This function calls:
  7098 ;;		Nothing
  7099 ;; This function is called by:
  7100 ;;		_SYSTEM_Initialize
  7101 ;;		_main
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           
  7106                           ;psect for function _OPA1_Initialize
  7107  0E66                     _OPA1_Initialize:
  7108                           
  7109                           ;opa1.c: 61: OPA1CON = 0xC2;
  7110                           
  7111                           ;incstack = 0
  7112                           ; Regs used in _OPA1_Initialize: [wreg]
  7113  0E66  30C2               	movlw	194
  7114  0E67  002A               	movlb	10	; select bank10
  7115  0E68  0091               	movwf	17	;volatile
  7116  0E69  0008               	return
  7117  0E6A                     __end_of_OPA1_Initialize:
  7118                           
  7119                           	psect	text29
  7120  0EE6                     __ptext29:	
  7121 ;; *************** function _EXT_INT_Initialize *****************
  7122 ;; Defined at:
  7123 ;;		line 135 in file "mcc_generated_files/ext_int.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;		None
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;		None
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  1    wreg      void 
  7130 ;; Registers used:
  7131 ;;		wreg, status,2, status,0, pclath, cstack
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7137 ;;      Params:         0       0       0       0       0       0       0       0
  7138 ;;      Locals:         0       0       0       0       0       0       0       0
  7139 ;;      Temps:          0       0       0       0       0       0       0       0
  7140 ;;      Totals:         0       0       0       0       0       0       0       0
  7141 ;;Total ram usage:        0 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    6
  7144 ;; This function calls:
  7145 ;;		_INT_SetInterruptHandler
  7146 ;; This function is called by:
  7147 ;;		_SYSTEM_Initialize
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           
  7152                           ;psect for function _EXT_INT_Initialize
  7153  0EE6                     _EXT_INT_Initialize:
  7154                           
  7155                           ;ext_int.c: 140: (INTCONbits.INTF = 0);
  7156                           
  7157                           ;incstack = 0
  7158                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7159  0EE6  108B               	bcf	11,1	;volatile
  7160                           
  7161                           ;ext_int.c: 141: (OPTION_REGbits.INTEDG = 0);
  7162  0EE7  0021               	movlb	1	; select bank1
  7163  0EE8  1315               	bcf	21,6	;volatile
  7164                           
  7165                           ;ext_int.c: 143: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  7166  0EE9  30A6               	movlw	low _INT_DefaultInterruptHandler
  7167  0EEA  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler^(0+128)
  7168  0EEB  3003               	movlw	high _INT_DefaultInterruptHandler
  7169  0EEC  00A1               	movwf	(INT_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7170  0EED  318E  26B5         	fcall	_INT_SetInterruptHandler
  7171                           
  7172                           ;ext_int.c: 144: (INTCONbits.INTE = 1);
  7173  0EEF  160B               	bsf	11,4	;volatile
  7174  0EF0  0008               	return
  7175  0EF1                     __end_of_EXT_INT_Initialize:
  7176                           
  7177                           	psect	text30
  7178  0EB5                     __ptext30:	
  7179 ;; *************** function _INT_SetInterruptHandler *****************
  7180 ;; Defined at:
  7181 ;;		line 71 in file "mcc_generated_files/ext_int.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  7184 ;;		 -> INT_DefaultInterruptHandler(1), 
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;		None
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  1    wreg      void 
  7189 ;; Registers used:
  7190 ;;		wreg
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7196 ;;      Params:         0       0       2       0       0       0       0       0
  7197 ;;      Locals:         0       0       0       0       0       0       0       0
  7198 ;;      Temps:          0       0       0       0       0       0       0       0
  7199 ;;      Totals:         0       0       2       0       0       0       0       0
  7200 ;;Total ram usage:        2 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    5
  7203 ;; This function calls:
  7204 ;;		Nothing
  7205 ;; This function is called by:
  7206 ;;		_EXT_INT_Initialize
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           
  7211                           ;psect for function _INT_SetInterruptHandler
  7212  0EB5                     _INT_SetInterruptHandler:
  7213                           
  7214                           ;ext_int.c: 72: INT_InterruptHandler = InterruptHandler;
  7215                           
  7216                           ;incstack = 0
  7217                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  7218  0EB5  0021               	movlb	1	; select bank1
  7219  0EB6  0821               	movf	(INT_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7220  0EB7  0020               	movlb	0	; select bank0
  7221  0EB8  00D1               	movwf	_INT_InterruptHandler+1
  7222  0EB9  0021               	movlb	1	; select bank1
  7223  0EBA  0820               	movf	INT_SetInterruptHandler@InterruptHandler^(0+128),w
  7224  0EBB  0020               	movlb	0	; select bank0
  7225  0EBC  00D0               	movwf	_INT_InterruptHandler
  7226  0EBD  0008               	return
  7227  0EBE                     __end_of_INT_SetInterruptHandler:
  7228                           
  7229                           	psect	text31
  7230  0F8A                     __ptext31:	
  7231 ;; *************** function _EUSART_Initialize *****************
  7232 ;; Defined at:
  7233 ;;		line 66 in file "mcc_generated_files/eusart.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;		None
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;		None
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      void 
  7240 ;; Registers used:
  7241 ;;		wreg, status,2, status,0, pclath, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7247 ;;      Params:         0       0       0       0       0       0       0       0
  7248 ;;      Locals:         0       0       0       0       0       0       0       0
  7249 ;;      Temps:          0       0       0       0       0       0       0       0
  7250 ;;      Totals:         0       0       0       0       0       0       0       0
  7251 ;;Total ram usage:        0 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    6
  7254 ;; This function calls:
  7255 ;;		_EUSART_SetErrorHandler
  7256 ;;		_EUSART_SetFramingErrorHandler
  7257 ;;		_EUSART_SetOverrunErrorHandler
  7258 ;; This function is called by:
  7259 ;;		_SYSTEM_Initialize
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _EUSART_Initialize
  7265  0F8A                     _EUSART_Initialize:
  7266                           
  7267                           ;eusart.c: 71: BAUD1CON = 0x08;
  7268                           
  7269                           ;incstack = 0
  7270                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7271  0F8A  3008               	movlw	8
  7272  0F8B  0023               	movlb	3	; select bank3
  7273  0F8C  009F               	movwf	31	;volatile
  7274                           
  7275                           ;eusart.c: 74: RC1STA = 0x90;
  7276  0F8D  3090               	movlw	144
  7277  0F8E  009D               	movwf	29	;volatile
  7278                           
  7279                           ;eusart.c: 77: TX1STA = 0x24;
  7280  0F8F  3024               	movlw	36
  7281  0F90  009E               	movwf	30	;volatile
  7282                           
  7283                           ;eusart.c: 80: SP1BRGL = 0x08;
  7284  0F91  3008               	movlw	8
  7285  0F92  009B               	movwf	27	;volatile
  7286                           
  7287                           ;eusart.c: 83: SP1BRGH = 0x00;
  7288  0F93  019C               	clrf	28	;volatile
  7289                           
  7290                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  7291  0F94  3000               	movlw	0
  7292  0F95  0021               	movlb	1	; select bank1
  7293  0F96  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  7294  0F97  3000               	movlw	0
  7295  0F98  00A1               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  7296  0F99  318E  26A3  318F   	fcall	_EUSART_SetFramingErrorHandler
  7297                           
  7298                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  7299  0F9C  3000               	movlw	0
  7300  0F9D  0021               	movlb	1	; select bank1
  7301  0F9E  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  7302  0F9F  3000               	movlw	0
  7303  0FA0  00A1               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  7304  0FA1  318E  26AC  318F   	fcall	_EUSART_SetOverrunErrorHandler
  7305                           
  7306                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  7307  0FA4  3000               	movlw	0
  7308  0FA5  0021               	movlb	1	; select bank1
  7309  0FA6  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  7310  0FA7  3000               	movlw	0
  7311  0FA8  00A1               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  7312  0FA9  318E  269A         	fcall	_EUSART_SetErrorHandler
  7313                           
  7314                           ;eusart.c: 90: eusartRxLastError.status = 0;
  7315  0FAB  0020               	movlb	0	; select bank0
  7316  0FAC  01C7               	clrf	_eusartRxLastError	;volatile
  7317  0FAD  0008               	return
  7318  0FAE                     __end_of_EUSART_Initialize:
  7319                           
  7320                           	psect	text32
  7321  0EAC                     __ptext32:	
  7322 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7323 ;; Defined at:
  7324 ;;		line 170 in file "mcc_generated_files/eusart.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7327 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;		None
  7330 ;; Return value:  Size  Location     Type
  7331 ;;                  1    wreg      void 
  7332 ;; Registers used:
  7333 ;;		wreg
  7334 ;; Tracked objects:
  7335 ;;		On entry : 0/0
  7336 ;;		On exit  : 0/0
  7337 ;;		Unchanged: 0/0
  7338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7339 ;;      Params:         0       0       2       0       0       0       0       0
  7340 ;;      Locals:         0       0       0       0       0       0       0       0
  7341 ;;      Temps:          0       0       0       0       0       0       0       0
  7342 ;;      Totals:         0       0       2       0       0       0       0       0
  7343 ;;Total ram usage:        2 bytes
  7344 ;; Hardware stack levels used:    1
  7345 ;; Hardware stack levels required when called:    5
  7346 ;; This function calls:
  7347 ;;		Nothing
  7348 ;; This function is called by:
  7349 ;;		_EUSART_Initialize
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           
  7354                           ;psect for function _EUSART_SetOverrunErrorHandler
  7355  0EAC                     _EUSART_SetOverrunErrorHandler:
  7356                           
  7357                           ;eusart.c: 171: EUSART_OverrunErrorHandler = interruptHandler;
  7358                           
  7359                           ;incstack = 0
  7360                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7361  0EAC  0021               	movlb	1	; select bank1
  7362  0EAD  0821               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  7363  0EAE  0020               	movlb	0	; select bank0
  7364  0EAF  00D5               	movwf	_EUSART_OverrunErrorHandler+1
  7365  0EB0  0021               	movlb	1	; select bank1
  7366  0EB1  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  7367  0EB2  0020               	movlb	0	; select bank0
  7368  0EB3  00D4               	movwf	_EUSART_OverrunErrorHandler
  7369  0EB4  0008               	return
  7370  0EB5                     __end_of_EUSART_SetOverrunErrorHandler:
  7371                           
  7372                           	psect	text33
  7373  0EA3                     __ptext33:	
  7374 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7375 ;; Defined at:
  7376 ;;		line 166 in file "mcc_generated_files/eusart.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7379 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;		None
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  1    wreg      void 
  7384 ;; Registers used:
  7385 ;;		wreg
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7391 ;;      Params:         0       0       2       0       0       0       0       0
  7392 ;;      Locals:         0       0       0       0       0       0       0       0
  7393 ;;      Temps:          0       0       0       0       0       0       0       0
  7394 ;;      Totals:         0       0       2       0       0       0       0       0
  7395 ;;Total ram usage:        2 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; Hardware stack levels required when called:    5
  7398 ;; This function calls:
  7399 ;;		Nothing
  7400 ;; This function is called by:
  7401 ;;		_EUSART_Initialize
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           
  7406                           ;psect for function _EUSART_SetFramingErrorHandler
  7407  0EA3                     _EUSART_SetFramingErrorHandler:
  7408                           
  7409                           ;eusart.c: 167: EUSART_FramingErrorHandler = interruptHandler;
  7410                           
  7411                           ;incstack = 0
  7412                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7413  0EA3  0021               	movlb	1	; select bank1
  7414  0EA4  0821               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  7415  0EA5  0020               	movlb	0	; select bank0
  7416  0EA6  00D7               	movwf	_EUSART_FramingErrorHandler+1
  7417  0EA7  0021               	movlb	1	; select bank1
  7418  0EA8  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  7419  0EA9  0020               	movlb	0	; select bank0
  7420  0EAA  00D6               	movwf	_EUSART_FramingErrorHandler
  7421  0EAB  0008               	return
  7422  0EAC                     __end_of_EUSART_SetFramingErrorHandler:
  7423                           
  7424                           	psect	text34
  7425  0E9A                     __ptext34:	
  7426 ;; *************** function _EUSART_SetErrorHandler *****************
  7427 ;; Defined at:
  7428 ;;		line 174 in file "mcc_generated_files/eusart.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7431 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;		None
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  1    wreg      void 
  7436 ;; Registers used:
  7437 ;;		wreg
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7443 ;;      Params:         0       0       2       0       0       0       0       0
  7444 ;;      Locals:         0       0       0       0       0       0       0       0
  7445 ;;      Temps:          0       0       0       0       0       0       0       0
  7446 ;;      Totals:         0       0       2       0       0       0       0       0
  7447 ;;Total ram usage:        2 bytes
  7448 ;; Hardware stack levels used:    1
  7449 ;; Hardware stack levels required when called:    5
  7450 ;; This function calls:
  7451 ;;		Nothing
  7452 ;; This function is called by:
  7453 ;;		_EUSART_Initialize
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           
  7458                           ;psect for function _EUSART_SetErrorHandler
  7459  0E9A                     _EUSART_SetErrorHandler:
  7460                           
  7461                           ;eusart.c: 175: EUSART_ErrorHandler = interruptHandler;
  7462                           
  7463                           ;incstack = 0
  7464                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7465  0E9A  0021               	movlb	1	; select bank1
  7466  0E9B  0821               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  7467  0E9C  0020               	movlb	0	; select bank0
  7468  0E9D  00D3               	movwf	_EUSART_ErrorHandler+1
  7469  0E9E  0021               	movlb	1	; select bank1
  7470  0E9F  0820               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  7471  0EA0  0020               	movlb	0	; select bank0
  7472  0EA1  00D2               	movwf	_EUSART_ErrorHandler
  7473  0EA2  0008               	return
  7474  0EA3                     __end_of_EUSART_SetErrorHandler:
  7475                           
  7476                           	psect	text35
  7477  0E72                     __ptext35:	
  7478 ;; *************** function _DAC_Initialize *****************
  7479 ;; Defined at:
  7480 ;;		line 58 in file "mcc_generated_files/dac.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;		None
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;		None
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  1    wreg      void 
  7487 ;; Registers used:
  7488 ;;		wreg
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7494 ;;      Params:         0       0       0       0       0       0       0       0
  7495 ;;      Locals:         0       0       0       0       0       0       0       0
  7496 ;;      Temps:          0       0       0       0       0       0       0       0
  7497 ;;      Totals:         0       0       0       0       0       0       0       0
  7498 ;;Total ram usage:        0 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    5
  7501 ;; This function calls:
  7502 ;;		Nothing
  7503 ;; This function is called by:
  7504 ;;		_SYSTEM_Initialize
  7505 ;;		_main
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           
  7510                           ;psect for function _DAC_Initialize
  7511  0E72                     _DAC_Initialize:
  7512                           
  7513                           ;dac.c: 61: DAC1CON0 = 0x80;
  7514                           
  7515                           ;incstack = 0
  7516                           ; Regs used in _DAC_Initialize: [wreg]
  7517  0E72  3080               	movlw	128
  7518  0E73  0022               	movlb	2	; select bank2
  7519  0E74  0098               	movwf	24	;volatile
  7520                           
  7521                           ;dac.c: 63: DAC1CON1 = 0xFF;
  7522  0E75  30FF               	movlw	255
  7523  0E76  0099               	movwf	25	;volatile
  7524  0E77  0008               	return
  7525  0E78                     __end_of_DAC_Initialize:
  7526                           
  7527                           	psect	intentry
  7528  0004                     __pintentry:	
  7529 ;; *************** function _INTERRUPT_InterruptManager *****************
  7530 ;; Defined at:
  7531 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;		None
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  1    wreg      void 
  7538 ;; Registers used:
  7539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7545 ;;      Params:         0       0       0       0       0       0       0       0
  7546 ;;      Locals:         0       0       0       0       0       0       0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0       0
  7548 ;;      Totals:         0       0       0       0       0       0       0       0
  7549 ;;Total ram usage:        0 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:    4
  7552 ;; This function calls:
  7553 ;;		_INT_ISR
  7554 ;;		_PIN_MANAGER_IOC
  7555 ;;		_TMR4_ISR
  7556 ;; This function is called by:
  7557 ;;		Interrupt level 1
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561  0004                     _INTERRUPT_InterruptManager:
  7562                           
  7563                           ;incstack = 0
  7564  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7565                           
  7566                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7567  0005  3180               	pagesel	$
  7568                           
  7569                           ;interrupt_manager.c: 55: if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
  7570  0006  1A0B               	btfsc	11,4	;volatile
  7571  0007  1C8B               	btfss	11,1	;volatile
  7572  0008  280D               	goto	i1l134
  7573                           
  7574                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: INT_ISR();
  7575  0009  318E  2662  3180   	fcall	_INT_ISR
  7576                           
  7577                           ;interrupt_manager.c: 58: }
  7578  000C  281E               	goto	i1l142
  7579  000D                     i1l134:
  7580                           
  7581                           ;interrupt_manager.c: 59: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  7582  000D  198B               	btfsc	11,3	;volatile
  7583  000E  1C0B               	btfss	11,0	;volatile
  7584  000F  2814               	goto	i1l136
  7585                           
  7586                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: PIN_MANAGER_IOC();
  7587  0010  3180  2002  3180   	fcall	_PIN_MANAGER_IOC
  7588                           
  7589                           ;interrupt_manager.c: 62: }
  7590  0013  281E               	goto	i1l142
  7591  0014                     i1l136:
  7592                           
  7593                           ;interrupt_manager.c: 63: else if(INTCONbits.PEIE == 1)
  7594  0014  1F0B               	btfss	11,6	;volatile
  7595  0015  281E               	goto	i1l142
  7596                           
  7597                           ;interrupt_manager.c: 64: {;interrupt_manager.c: 65: if(PIE2bits.TMR4IE == 1 && PIR2bits
      +                          .TMR4IF == 1)
  7598  0016  0021               	movlb	1	; select bank1
  7599  0017  1C92               	btfss	18,1	;volatile
  7600  0018  281E               	goto	i1l142
  7601  0019  0020               	movlb	0	; select bank0
  7602  001A  1C92               	btfss	18,1	;volatile
  7603  001B  281E               	goto	i1l142
  7604                           
  7605                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: TMR4_ISR();
  7606  001C  318E  26F1         	fcall	_TMR4_ISR
  7607  001E                     i1l142:	
  7608                           ;interrupt_manager.c: 68: }
  7609                           
  7610  001E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7611  001F  0009               	retfie
  7612  0020                     __end_of_INTERRUPT_InterruptManager:
  7613                           
  7614                           	psect	text37
  7615  0EF1                     __ptext37:	
  7616 ;; *************** function _TMR4_ISR *****************
  7617 ;; Defined at:
  7618 ;;		line 119 in file "mcc_generated_files/tmr4.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;		None
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;		None
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      void 
  7625 ;; Registers used:
  7626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7632 ;;      Params:         0       0       0       0       0       0       0       0
  7633 ;;      Locals:         0       0       0       0       0       0       0       0
  7634 ;;      Temps:          0       0       0       0       0       0       0       0
  7635 ;;      Totals:         0       0       0       0       0       0       0       0
  7636 ;;Total ram usage:        0 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    3
  7639 ;; This function calls:
  7640 ;;		Absolute function
  7641 ;;		_TMR4_DefaultInterruptHandler
  7642 ;; This function is called by:
  7643 ;;		_INTERRUPT_InterruptManager
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           
  7648                           ;psect for function _TMR4_ISR
  7649  0EF1                     _TMR4_ISR:
  7650                           
  7651                           ;tmr4.c: 123: PIR2bits.TMR4IF = 0;
  7652                           
  7653                           ;incstack = 0
  7654                           ; Regs used in _TMR4_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7655  0EF1  0020               	movlb	0	; select bank0
  7656  0EF2  1092               	bcf	18,1	;volatile
  7657                           
  7658                           ;tmr4.c: 125: if(TMR4_InterruptHandler)
  7659  0EF3  084E               	movf	_TMR4_InterruptHandler,w
  7660  0EF4  044F               	iorwf	_TMR4_InterruptHandler+1,w
  7661  0EF5  1903               	btfsc	3,2
  7662  0EF6  0008               	return
  7663                           
  7664                           ;tmr4.c: 126: {;tmr4.c: 127: TMR4_InterruptHandler();
  7665  0EF7  084F               	movf	_TMR4_InterruptHandler+1,w
  7666  0EF8  008A               	movwf	10
  7667  0EF9  084E               	movf	_TMR4_InterruptHandler,w
  7668  0EFA  000A               	callw
  7669  0EFB  318E               	pagesel	$
  7670  0EFC  0008               	return
  7671  0EFD                     __end_of_TMR4_ISR:
  7672                           
  7673                           	psect	text38
  7674  066C                     __ptext38:	
  7675 ;; *************** function _TMR4_DefaultInterruptHandler *****************
  7676 ;; Defined at:
  7677 ;;		line 147 in file "mcc_generated_files/tmr4.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;		None
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      void 
  7684 ;; Registers used:
  7685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7691 ;;      Params:         0       0       0       0       0       0       0       0
  7692 ;;      Locals:         0       0       0       0       0       0       0       0
  7693 ;;      Temps:          0       2       0       0       0       0       0       0
  7694 ;;      Totals:         0       2       0       0       0       0       0       0
  7695 ;;Total ram usage:        2 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    2
  7698 ;; This function calls:
  7699 ;;		i1_battery_voltage
  7700 ;;		i1_setCurrent
  7701 ;; This function is called by:
  7702 ;;		_TMR4_Initialize
  7703 ;;		_TMR4_ISR
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           
  7708                           ;psect for function _TMR4_DefaultInterruptHandler
  7709  066C                     _TMR4_DefaultInterruptHandler:
  7710                           
  7711                           ;tmr4.c: 152: if (currentIsOn){
  7712                           
  7713                           ;incstack = 0
  7714                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  7715  066C  0020               	movlb	0	; select bank0
  7716  066D  0858               	movf	_currentIsOn,w
  7717  066E  1903               	btfsc	3,2
  7718  066F  2E9F               	goto	i1l588
  7719                           
  7720                           ;tmr4.c: 153: currentIsOn = 0;
  7721  0670  01D8               	clrf	_currentIsOn
  7722                           
  7723                           ;tmr4.c: 154: if (0 == frequencyValue[frequencyIndex]){
  7724  0671  0021               	movlb	1	; select bank1
  7725  0672  355F               	lslf	_frequencyIndex^(0+128),w
  7726  0673  3ED3               	addlw	(low (_frequencyValue| 0))& (0+255)
  7727  0674  0086               	movwf	6
  7728  0675  0187               	clrf	7
  7729  0676  0016               	moviw fsr1++
  7730  0677  0401               	iorwf	1,w
  7731  0678  1D03               	btfss	3,2
  7732  0679  2E90               	goto	i1l2433
  7733  067A                     i1l2431:
  7734                           
  7735                           ;tmr4.c: 156: setCurrent(currentValue[currentIndex], battery_voltage());
  7736  067A  0021               	movlb	1	; select bank1
  7737  067B  3561               	lslf	_currentIndex^(0+128),w
  7738  067C  3E41               	addlw	(low (_currentValue| (0+256)))& (0+255)
  7739  067D  0086               	movwf	6
  7740  067E  3001               	movlw	1	; select bank2/3
  7741  067F  0087               	movwf	7
  7742  0680  3F40               	moviw [0]fsr1
  7743  0681  0020               	movlb	0	; select bank0
  7744  0682  00B0               	movwf	i1setCurrent@microamps
  7745  0683  3F41               	moviw [1]fsr1
  7746  0684  00B1               	movwf	i1setCurrent@microamps+1
  7747  0685  3187  2766  3186   	fcall	i1_battery_voltage
  7748  0688  0020               	movlb	0	; select bank0
  7749  0689  082F               	movf	?i1_battery_voltage+1,w
  7750  068A  00B3               	movwf	i1setCurrent@Vdd_mv+1
  7751  068B  082E               	movf	?i1_battery_voltage,w
  7752  068C  00B2               	movwf	i1setCurrent@Vdd_mv
  7753  068D  3181  2162         	fcall	i1_setCurrent
  7754                           
  7755                           ;tmr4.c: 157: } else {
  7756  068F  0008               	return
  7757  0690                     i1l2433:
  7758                           
  7759                           ;tmr4.c: 158: setCurrent(0, battery_voltage());
  7760  0690  3000               	movlw	0
  7761  0691  0020               	movlb	0	; select bank0
  7762  0692  00B0               	movwf	i1setCurrent@microamps
  7763  0693  00B1               	movwf	i1setCurrent@microamps+1
  7764  0694  3187  2766  3186   	fcall	i1_battery_voltage
  7765  0697  0020               	movlb	0	; select bank0
  7766  0698  082F               	movf	?i1_battery_voltage+1,w
  7767  0699  00B3               	movwf	i1setCurrent@Vdd_mv+1
  7768  069A  082E               	movf	?i1_battery_voltage,w
  7769  069B  00B2               	movwf	i1setCurrent@Vdd_mv
  7770  069C  3181  2162         	fcall	i1_setCurrent
  7771  069E  0008               	return
  7772  069F                     i1l588:
  7773                           
  7774                           ;tmr4.c: 161: currentIsOn = 1;
  7775  069F  01D8               	clrf	_currentIsOn
  7776  06A0  0AD8               	incf	_currentIsOn,f
  7777  06A1  2E7A               	goto	i1l2431
  7778  06A2                     __end_of_TMR4_DefaultInterruptHandler:
  7779                           
  7780                           	psect	text39
  7781  0162                     __ptext39:	
  7782 ;; *************** function i1_setCurrent *****************
  7783 ;; Defined at:
  7784 ;;		line 235 in file "main.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;  microamps       2   16[BANK0 ] int 
  7787 ;;  Vdd_mv          2   18[BANK0 ] int 
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  DACValue        2   28[BANK0 ] int 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, status,0, pclath, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7799 ;;      Params:         0       4       0       0       0       0       0       0
  7800 ;;      Locals:         0       2       0       0       0       0       0       0
  7801 ;;      Temps:          0       8       0       0       0       0       0       0
  7802 ;;      Totals:         0      14       0       0       0       0       0       0
  7803 ;;Total ram usage:       14 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    1
  7806 ;; This function calls:
  7807 ;;		i1___aldiv
  7808 ;;		i1___awdiv
  7809 ;;		i1___lldiv
  7810 ;;		i1___lmul
  7811 ;; This function is called by:
  7812 ;;		_TMR4_DefaultInterruptHandler
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           
  7817                           ;psect for function i1_setCurrent
  7818  0162                     i1_setCurrent:
  7819                           
  7820                           ;main.c: 237: Vdac_mv = Vdd_mv - ((uint32_t)(4700) * microamps + 500) / 1000;
  7821                           
  7822                           ;incstack = 0
  7823                           ; Regs used in i1_setCurrent: [wreg+status,2+status,0+pclath+cstack]
  7824  0162  3000               	movlw	0
  7825  0163  0020               	movlb	0	; select bank0
  7826  0164  00A3               	movwf	i1___lldiv@divisor+3
  7827  0165  3000               	movlw	0
  7828  0166  00A2               	movwf	i1___lldiv@divisor+2
  7829  0167  3003               	movlw	3
  7830  0168  00A1               	movwf	i1___lldiv@divisor+1
  7831  0169  30E8               	movlw	232
  7832  016A  00A0               	movwf	i1___lldiv@divisor
  7833  016B  30F4               	movlw	244
  7834  016C  00B4               	movwf	??i1_setCurrent
  7835  016D  3001               	movlw	1
  7836  016E  00B5               	movwf	??i1_setCurrent+1
  7837  016F  3000               	movlw	0
  7838  0170  00B6               	movwf	??i1_setCurrent+2
  7839  0171  3000               	movlw	0
  7840  0172  00B7               	movwf	??i1_setCurrent+3
  7841  0173  0830               	movf	i1setCurrent@microamps,w
  7842  0174  00F0               	movwf	i1___lmul@multiplier
  7843  0175  0831               	movf	i1setCurrent@microamps+1,w
  7844  0176  00F1               	movwf	i1___lmul@multiplier+1
  7845  0177  0D89               	rlf	9,f
  7846  0178  3B89               	subwfb	9,f
  7847  0179  0989               	comf	9,f
  7848  017A  00F2               	movwf	i1___lmul@multiplier+2
  7849  017B  00F3               	movwf	i1___lmul@multiplier+3
  7850  017C  3000               	movlw	0
  7851  017D  00F7               	movwf	i1___lmul@multiplicand+3
  7852  017E  3000               	movlw	0
  7853  017F  00F6               	movwf	i1___lmul@multiplicand+2
  7854  0180  3012               	movlw	18
  7855  0181  00F5               	movwf	i1___lmul@multiplicand+1
  7856  0182  305C               	movlw	92
  7857  0183  00F4               	movwf	i1___lmul@multiplicand
  7858  0184  3187  2737  3181   	fcall	i1___lmul
  7859  0187  0870               	movf	?i1___lmul,w
  7860  0188  0020               	movlb	0	; select bank0
  7861  0189  07B4               	addwf	??i1_setCurrent,f
  7862  018A  0871               	movf	?i1___lmul+1,w
  7863  018B  3DB5               	addwfc	??i1_setCurrent+1,f
  7864  018C  0872               	movf	?i1___lmul+2,w
  7865  018D  3DB6               	addwfc	??i1_setCurrent+2,f
  7866  018E  0873               	movf	?i1___lmul+3,w
  7867  018F  3DB7               	addwfc	??i1_setCurrent+3,f
  7868  0190  0837               	movf	??i1_setCurrent+3,w
  7869  0191  00A7               	movwf	i1___lldiv@dividend+3
  7870  0192  0836               	movf	??i1_setCurrent+2,w
  7871  0193  00A6               	movwf	i1___lldiv@dividend+2
  7872  0194  0835               	movf	??i1_setCurrent+1,w
  7873  0195  00A5               	movwf	i1___lldiv@dividend+1
  7874  0196  0834               	movf	??i1_setCurrent,w
  7875  0197  00A4               	movwf	i1___lldiv@dividend
  7876  0198  3184  2460  3181   	fcall	i1___lldiv
  7877  019B  0020               	movlb	0	; select bank0
  7878  019C  0820               	movf	?i1___lldiv,w
  7879  019D  0232               	subwf	i1setCurrent@Vdd_mv,w
  7880  019E  0021               	movlb	1	; select bank1
  7881  019F  00E8               	movwf	_Vdac_mv^(0+128)
  7882  01A0  0020               	movlb	0	; select bank0
  7883  01A1  0821               	movf	?i1___lldiv+1,w
  7884  01A2  3B33               	subwfb	i1setCurrent@Vdd_mv+1,w
  7885  01A3  0021               	movlb	1	; select bank1
  7886  01A4  00E9               	movwf	(_Vdac_mv+1)^(0+128)
  7887                           
  7888                           ;main.c: 238: int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  7889  01A5  0020               	movlb	0	; select bank0
  7890  01A6  0832               	movf	i1setCurrent@Vdd_mv,w
  7891  01A7  00A0               	movwf	i1___aldiv@divisor
  7892  01A8  0833               	movf	i1setCurrent@Vdd_mv+1,w
  7893  01A9  00A1               	movwf	i1___aldiv@divisor+1
  7894  01AA  0D89               	rlf	9,f
  7895  01AB  3B89               	subwfb	9,f
  7896  01AC  0989               	comf	9,f
  7897  01AD  00A2               	movwf	i1___aldiv@divisor+2
  7898  01AE  00A3               	movwf	i1___aldiv@divisor+3
  7899  01AF  3002               	movlw	2
  7900  01B0  00F0               	movwf	i1___awdiv@divisor
  7901  01B1  3000               	movlw	0
  7902  01B2  00F1               	movwf	i1___awdiv@divisor+1
  7903  01B3  0833               	movf	i1setCurrent@Vdd_mv+1,w
  7904  01B4  00F3               	movwf	i1___awdiv@dividend+1
  7905  01B5  0832               	movf	i1setCurrent@Vdd_mv,w
  7906  01B6  00F2               	movwf	i1___awdiv@dividend
  7907  01B7  3185  2556  3181   	fcall	i1___awdiv
  7908  01BA  0870               	movf	?i1___awdiv,w
  7909  01BB  0020               	movlb	0	; select bank0
  7910  01BC  00B4               	movwf	??i1_setCurrent
  7911  01BD  0871               	movf	?i1___awdiv+1,w
  7912  01BE  00B5               	movwf	??i1_setCurrent+1
  7913  01BF  3000               	movlw	0
  7914  01C0  1BB5               	btfsc	??i1_setCurrent+1,7
  7915  01C1  30FF               	movlw	255
  7916  01C2  00B6               	movwf	??i1_setCurrent+2
  7917  01C3  00B7               	movwf	??i1_setCurrent+3
  7918  01C4  0021               	movlb	1	; select bank1
  7919  01C5  0868               	movf	_Vdac_mv^(0+128),w
  7920  01C6  0020               	movlb	0	; select bank0
  7921  01C7  00B8               	movwf	??i1_setCurrent+4
  7922  01C8  0021               	movlb	1	; select bank1
  7923  01C9  0869               	movf	(_Vdac_mv+1)^(0+128),w
  7924  01CA  0020               	movlb	0	; select bank0
  7925  01CB  00B9               	movwf	??i1_setCurrent+5
  7926  01CC  01BA               	clrf	??i1_setCurrent+6
  7927  01CD  01BB               	clrf	??i1_setCurrent+7
  7928  01CE  3008               	movlw	8
  7929  01CF                     u196_25:
  7930  01CF  35B8               	lslf	??i1_setCurrent+4,f
  7931  01D0  0DB9               	rlf	??i1_setCurrent+5,f
  7932  01D1  0DBA               	rlf	??i1_setCurrent+6,f
  7933  01D2  0DBB               	rlf	??i1_setCurrent+7,f
  7934  01D3  0B89               	decfsz	9,f
  7935  01D4  29CF               	goto	u196_25
  7936  01D5  0838               	movf	??i1_setCurrent+4,w
  7937  01D6  07B4               	addwf	??i1_setCurrent,f
  7938  01D7  0839               	movf	??i1_setCurrent+5,w
  7939  01D8  3DB5               	addwfc	??i1_setCurrent+1,f
  7940  01D9  083A               	movf	??i1_setCurrent+6,w
  7941  01DA  3DB6               	addwfc	??i1_setCurrent+2,f
  7942  01DB  083B               	movf	??i1_setCurrent+7,w
  7943  01DC  3DB7               	addwfc	??i1_setCurrent+3,f
  7944  01DD  0837               	movf	??i1_setCurrent+3,w
  7945  01DE  00A7               	movwf	i1___aldiv@dividend+3
  7946  01DF  0836               	movf	??i1_setCurrent+2,w
  7947  01E0  00A6               	movwf	i1___aldiv@dividend+2
  7948  01E1  0835               	movf	??i1_setCurrent+1,w
  7949  01E2  00A5               	movwf	i1___aldiv@dividend+1
  7950  01E3  0834               	movf	??i1_setCurrent,w
  7951  01E4  00A4               	movwf	i1___aldiv@dividend
  7952  01E5  3183  2324  3181   	fcall	i1___aldiv
  7953  01E8  0020               	movlb	0	; select bank0
  7954  01E9  0821               	movf	?i1___aldiv+1,w
  7955  01EA  00BD               	movwf	i1setCurrent@DACValue+1
  7956  01EB  0820               	movf	?i1___aldiv,w
  7957  01EC  00BC               	movwf	i1setCurrent@DACValue
  7958                           
  7959                           ;main.c: 239: if(DACValue > 255){DACValue = 255;}
  7960  01ED  083D               	movf	i1setCurrent@DACValue+1,w
  7961  01EE  3A80               	xorlw	128
  7962  01EF  00B4               	movwf	??i1_setCurrent
  7963  01F0  3081               	movlw	129
  7964  01F1  0234               	subwf	??i1_setCurrent,w
  7965  01F2  1D03               	skipz
  7966  01F3  29F6               	goto	u197_25
  7967  01F4  3000               	movlw	0
  7968  01F5  023C               	subwf	i1setCurrent@DACValue,w
  7969  01F6                     u197_25:
  7970  01F6  1C03               	skipc
  7971  01F7  29FD               	goto	i1l2263
  7972  01F8  30FF               	movlw	255
  7973  01F9  0020               	movlb	0	; select bank0
  7974  01FA  00BC               	movwf	i1setCurrent@DACValue
  7975  01FB  3000               	movlw	0
  7976  01FC  00BD               	movwf	i1setCurrent@DACValue+1
  7977  01FD                     i1l2263:
  7978                           
  7979                           ;main.c: 240: if(DACValue < 0){DACValue = 0;}
  7980  01FD  0020               	movlb	0	; select bank0
  7981  01FE  1FBD               	btfss	i1setCurrent@DACValue+1,7
  7982  01FF  2A02               	goto	i1l2267
  7983  0200  01BC               	clrf	i1setCurrent@DACValue
  7984  0201  01BD               	clrf	i1setCurrent@DACValue+1
  7985  0202                     i1l2267:
  7986                           
  7987                           ;main.c: 241: DAC1CON1 = DACValue;
  7988  0202  083C               	movf	i1setCurrent@DACValue,w
  7989  0203  0022               	movlb	2	; select bank2
  7990  0204  0099               	movwf	25	;volatile
  7991  0205  0008               	return
  7992  0206                     __end_ofi1_setCurrent:
  7993                           
  7994                           	psect	text40
  7995  0737                     __ptext40:	
  7996 ;; *************** function i1___lmul *****************
  7997 ;; Defined at:
  7998 ;;		line 15 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/Umul32.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;  multiplier      4    0[COMMON] unsigned long 
  8001 ;;  multiplicand    4    4[COMMON] unsigned long 
  8002 ;; Auto vars:     Size  Location     Type
  8003 ;;  product         4    8[COMMON] unsigned long 
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  4    0[COMMON] unsigned long 
  8006 ;; Registers used:
  8007 ;;		wreg, status,2, status,0
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8013 ;;      Params:         8       0       0       0       0       0       0       0
  8014 ;;      Locals:         4       0       0       0       0       0       0       0
  8015 ;;      Temps:          0       0       0       0       0       0       0       0
  8016 ;;      Totals:        12       0       0       0       0       0       0       0
  8017 ;;Total ram usage:       12 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; This function calls:
  8020 ;;		Nothing
  8021 ;; This function is called by:
  8022 ;;		i1_setCurrent
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           
  8027                           ;psect for function i1___lmul
  8028  0737                     i1___lmul:
  8029                           
  8030                           ;incstack = 0
  8031                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  8032  0737  3000               	movlw	0
  8033  0738  00FB               	movwf	i1___lmul@product+3
  8034  0739  3000               	movlw	0
  8035  073A  00FA               	movwf	i1___lmul@product+2
  8036  073B  3000               	movlw	0
  8037  073C  00F9               	movwf	i1___lmul@product+1
  8038  073D  3000               	movlw	0
  8039  073E  00F8               	movwf	i1___lmul@product
  8040  073F                     i1l1927:
  8041  073F  1C70               	btfss	i1___lmul@multiplier,0
  8042  0740  2F49               	goto	i1l1931
  8043  0741  0874               	movf	i1___lmul@multiplicand,w
  8044  0742  07F8               	addwf	i1___lmul@product,f
  8045  0743  0875               	movf	i1___lmul@multiplicand+1,w
  8046  0744  3DF9               	addwfc	i1___lmul@product+1,f
  8047  0745  0876               	movf	i1___lmul@multiplicand+2,w
  8048  0746  3DFA               	addwfc	i1___lmul@product+2,f
  8049  0747  0877               	movf	i1___lmul@multiplicand+3,w
  8050  0748  3DFB               	addwfc	i1___lmul@product+3,f
  8051  0749                     i1l1931:
  8052  0749  3001               	movlw	1
  8053  074A                     u121_25:
  8054  074A  35F4               	lslf	i1___lmul@multiplicand,f
  8055  074B  0DF5               	rlf	i1___lmul@multiplicand+1,f
  8056  074C  0DF6               	rlf	i1___lmul@multiplicand+2,f
  8057  074D  0DF7               	rlf	i1___lmul@multiplicand+3,f
  8058  074E  0B89               	decfsz	9,f
  8059  074F  2F4A               	goto	u121_25
  8060  0750  3001               	movlw	1
  8061  0751                     u122_25:
  8062  0751  36F3               	lsrf	i1___lmul@multiplier+3,f
  8063  0752  0CF2               	rrf	i1___lmul@multiplier+2,f
  8064  0753  0CF1               	rrf	i1___lmul@multiplier+1,f
  8065  0754  0CF0               	rrf	i1___lmul@multiplier,f
  8066  0755  0B89               	decfsz	9,f
  8067  0756  2F51               	goto	u122_25
  8068  0757  0873               	movf	i1___lmul@multiplier+3,w
  8069  0758  0472               	iorwf	i1___lmul@multiplier+2,w
  8070  0759  0471               	iorwf	i1___lmul@multiplier+1,w
  8071  075A  0470               	iorwf	i1___lmul@multiplier,w
  8072  075B  1D03               	skipz
  8073  075C  2F3F               	goto	i1l1927
  8074  075D  087B               	movf	i1___lmul@product+3,w
  8075  075E  00F3               	movwf	?i1___lmul+3
  8076  075F  087A               	movf	i1___lmul@product+2,w
  8077  0760  00F2               	movwf	?i1___lmul+2
  8078  0761  0879               	movf	i1___lmul@product+1,w
  8079  0762  00F1               	movwf	?i1___lmul+1
  8080  0763  0878               	movf	i1___lmul@product,w
  8081  0764  00F0               	movwf	?i1___lmul
  8082  0765  0008               	return
  8083  0766                     __end_ofi1___lmul:
  8084                           
  8085                           	psect	text41
  8086  0460                     __ptext41:	
  8087 ;; *************** function i1___lldiv *****************
  8088 ;; Defined at:
  8089 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/__lldiv.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  divisor         4    0[BANK0 ] unsigned long 
  8092 ;;  dividend        4    4[BANK0 ] unsigned long 
  8093 ;; Auto vars:     Size  Location     Type
  8094 ;;  quotient        4    8[BANK0 ] unsigned long 
  8095 ;;  counter         1   12[BANK0 ] unsigned char 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  4    0[BANK0 ] unsigned long 
  8098 ;; Registers used:
  8099 ;;		wreg, status,2, status,0
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8105 ;;      Params:         0       8       0       0       0       0       0       0
  8106 ;;      Locals:         0       5       0       0       0       0       0       0
  8107 ;;      Temps:          1       0       0       0       0       0       0       0
  8108 ;;      Totals:         1      13       0       0       0       0       0       0
  8109 ;;Total ram usage:       14 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; This function calls:
  8112 ;;		Nothing
  8113 ;; This function is called by:
  8114 ;;		i1_setCurrent
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           
  8119                           ;psect for function i1___lldiv
  8120  0460                     i1___lldiv:
  8121                           
  8122                           ;incstack = 0
  8123                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
  8124  0460  3000               	movlw	0
  8125  0461  0020               	movlb	0	; select bank0
  8126  0462  00AB               	movwf	i1___lldiv@quotient+3
  8127  0463  3000               	movlw	0
  8128  0464  00AA               	movwf	i1___lldiv@quotient+2
  8129  0465  3000               	movlw	0
  8130  0466  00A9               	movwf	i1___lldiv@quotient+1
  8131  0467  3000               	movlw	0
  8132  0468  00A8               	movwf	i1___lldiv@quotient
  8133  0469  0823               	movf	i1___lldiv@divisor+3,w
  8134  046A  0422               	iorwf	i1___lldiv@divisor+2,w
  8135  046B  0421               	iorwf	i1___lldiv@divisor+1,w
  8136  046C  0420               	iorwf	i1___lldiv@divisor,w
  8137  046D  1903               	skipnz
  8138  046E  2CAA               	goto	i1l1959
  8139  046F  01AC               	clrf	i1___lldiv@counter
  8140  0470  0AAC               	incf	i1___lldiv@counter,f
  8141  0471                     i1l1945:
  8142  0471  1BA3               	btfsc	i1___lldiv@divisor+3,7
  8143  0472  2C7F               	goto	i1l1947
  8144  0473  3001               	movlw	1
  8145  0474                     u125_25:
  8146  0474  35A0               	lslf	i1___lldiv@divisor,f
  8147  0475  0DA1               	rlf	i1___lldiv@divisor+1,f
  8148  0476  0DA2               	rlf	i1___lldiv@divisor+2,f
  8149  0477  0DA3               	rlf	i1___lldiv@divisor+3,f
  8150  0478  0B89               	decfsz	9,f
  8151  0479  2C74               	goto	u125_25
  8152  047A  3001               	movlw	1
  8153  047B  00FC               	movwf	??i1___lldiv
  8154  047C  087C               	movf	??i1___lldiv,w
  8155  047D  07AC               	addwf	i1___lldiv@counter,f
  8156  047E  2C71               	goto	i1l1945
  8157  047F                     i1l1947:
  8158  047F  3001               	movlw	1
  8159  0480                     u127_25:
  8160  0480  35A8               	lslf	i1___lldiv@quotient,f
  8161  0481  0DA9               	rlf	i1___lldiv@quotient+1,f
  8162  0482  0DAA               	rlf	i1___lldiv@quotient+2,f
  8163  0483  0DAB               	rlf	i1___lldiv@quotient+3,f
  8164  0484  0B89               	decfsz	9,f
  8165  0485  2C80               	goto	u127_25
  8166  0486  0823               	movf	i1___lldiv@divisor+3,w
  8167  0487  0227               	subwf	i1___lldiv@dividend+3,w
  8168  0488  1D03               	skipz
  8169  0489  2C94               	goto	u128_25
  8170  048A  0822               	movf	i1___lldiv@divisor+2,w
  8171  048B  0226               	subwf	i1___lldiv@dividend+2,w
  8172  048C  1D03               	skipz
  8173  048D  2C94               	goto	u128_25
  8174  048E  0821               	movf	i1___lldiv@divisor+1,w
  8175  048F  0225               	subwf	i1___lldiv@dividend+1,w
  8176  0490  1D03               	skipz
  8177  0491  2C94               	goto	u128_25
  8178  0492  0820               	movf	i1___lldiv@divisor,w
  8179  0493  0224               	subwf	i1___lldiv@dividend,w
  8180  0494                     u128_25:
  8181  0494  1C03               	skipc
  8182  0495  2C9F               	goto	i1l1955
  8183  0496  0820               	movf	i1___lldiv@divisor,w
  8184  0497  02A4               	subwf	i1___lldiv@dividend,f
  8185  0498  0821               	movf	i1___lldiv@divisor+1,w
  8186  0499  3BA5               	subwfb	i1___lldiv@dividend+1,f
  8187  049A  0822               	movf	i1___lldiv@divisor+2,w
  8188  049B  3BA6               	subwfb	i1___lldiv@dividend+2,f
  8189  049C  0823               	movf	i1___lldiv@divisor+3,w
  8190  049D  3BA7               	subwfb	i1___lldiv@dividend+3,f
  8191  049E  1428               	bsf	i1___lldiv@quotient,0
  8192  049F                     i1l1955:
  8193  049F  3001               	movlw	1
  8194  04A0                     u129_25:
  8195  04A0  36A3               	lsrf	i1___lldiv@divisor+3,f
  8196  04A1  0CA2               	rrf	i1___lldiv@divisor+2,f
  8197  04A2  0CA1               	rrf	i1___lldiv@divisor+1,f
  8198  04A3  0CA0               	rrf	i1___lldiv@divisor,f
  8199  04A4  0B89               	decfsz	9,f
  8200  04A5  2CA0               	goto	u129_25
  8201  04A6  3001               	movlw	1
  8202  04A7  02AC               	subwf	i1___lldiv@counter,f
  8203  04A8  1D03               	btfss	3,2
  8204  04A9  2C7F               	goto	i1l1947
  8205  04AA                     i1l1959:
  8206  04AA  082B               	movf	i1___lldiv@quotient+3,w
  8207  04AB  00A3               	movwf	?i1___lldiv+3
  8208  04AC  082A               	movf	i1___lldiv@quotient+2,w
  8209  04AD  00A2               	movwf	?i1___lldiv+2
  8210  04AE  0829               	movf	i1___lldiv@quotient+1,w
  8211  04AF  00A1               	movwf	?i1___lldiv+1
  8212  04B0  0828               	movf	i1___lldiv@quotient,w
  8213  04B1  00A0               	movwf	?i1___lldiv
  8214  04B2  0008               	return
  8215  04B3                     __end_ofi1___lldiv:
  8216                           
  8217                           	psect	text42
  8218  0556                     __ptext42:	
  8219 ;; *************** function i1___awdiv *****************
  8220 ;; Defined at:
  8221 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/awdiv.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;  divisor         2    0[COMMON] int 
  8224 ;;  dividend        2    2[COMMON] int 
  8225 ;; Auto vars:     Size  Location     Type
  8226 ;;  quotient        2    7[COMMON] int 
  8227 ;;  sign            1    6[COMMON] unsigned char 
  8228 ;;  counter         1    5[COMMON] unsigned char 
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  2    0[COMMON] int 
  8231 ;; Registers used:
  8232 ;;		wreg, status,2, status,0
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8238 ;;      Params:         4       0       0       0       0       0       0       0
  8239 ;;      Locals:         4       0       0       0       0       0       0       0
  8240 ;;      Temps:          1       0       0       0       0       0       0       0
  8241 ;;      Totals:         9       0       0       0       0       0       0       0
  8242 ;;Total ram usage:        9 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; This function calls:
  8245 ;;		Nothing
  8246 ;; This function is called by:
  8247 ;;		i1_setCurrent
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           
  8252                           ;psect for function i1___awdiv
  8253  0556                     i1___awdiv:
  8254                           
  8255                           ;incstack = 0
  8256                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  8257  0556  01F6               	clrf	i1___awdiv@sign
  8258  0557  1FF1               	btfss	i1___awdiv@divisor+1,7
  8259  0558  2D60               	goto	i1l2011
  8260  0559  09F0               	comf	i1___awdiv@divisor,f
  8261  055A  09F1               	comf	i1___awdiv@divisor+1,f
  8262  055B  0AF0               	incf	i1___awdiv@divisor,f
  8263  055C  1903               	skipnz
  8264  055D  0AF1               	incf	i1___awdiv@divisor+1,f
  8265  055E  01F6               	clrf	i1___awdiv@sign
  8266  055F  0AF6               	incf	i1___awdiv@sign,f
  8267  0560                     i1l2011:
  8268  0560  1FF3               	btfss	i1___awdiv@dividend+1,7
  8269  0561  2D6B               	goto	i1l2017
  8270  0562  09F2               	comf	i1___awdiv@dividend,f
  8271  0563  09F3               	comf	i1___awdiv@dividend+1,f
  8272  0564  0AF2               	incf	i1___awdiv@dividend,f
  8273  0565  1903               	skipnz
  8274  0566  0AF3               	incf	i1___awdiv@dividend+1,f
  8275  0567  3001               	movlw	1
  8276  0568  00F4               	movwf	??i1___awdiv
  8277  0569  0874               	movf	??i1___awdiv,w
  8278  056A  06F6               	xorwf	i1___awdiv@sign,f
  8279  056B                     i1l2017:
  8280  056B  01F7               	clrf	i1___awdiv@quotient
  8281  056C  01F8               	clrf	i1___awdiv@quotient+1
  8282  056D  0870               	movf	i1___awdiv@divisor,w
  8283  056E  0471               	iorwf	i1___awdiv@divisor+1,w
  8284  056F  1903               	btfsc	3,2
  8285  0570  2D9A               	goto	i1l2039
  8286  0571  01F5               	clrf	i1___awdiv@counter
  8287  0572  0AF5               	incf	i1___awdiv@counter,f
  8288  0573                     i1l2027:
  8289  0573  1BF1               	btfsc	i1___awdiv@divisor+1,7
  8290  0574  2D7F               	goto	i1l2029
  8291  0575  3001               	movlw	1
  8292  0576                     u144_25:
  8293  0576  35F0               	lslf	i1___awdiv@divisor,f
  8294  0577  0DF1               	rlf	i1___awdiv@divisor+1,f
  8295  0578  0B89               	decfsz	9,f
  8296  0579  2D76               	goto	u144_25
  8297  057A  3001               	movlw	1
  8298  057B  00F4               	movwf	??i1___awdiv
  8299  057C  0874               	movf	??i1___awdiv,w
  8300  057D  07F5               	addwf	i1___awdiv@counter,f
  8301  057E  2D73               	goto	i1l2027
  8302  057F                     i1l2029:
  8303  057F  3001               	movlw	1
  8304  0580                     u146_25:
  8305  0580  35F7               	lslf	i1___awdiv@quotient,f
  8306  0581  0DF8               	rlf	i1___awdiv@quotient+1,f
  8307  0582  0B89               	decfsz	9,f
  8308  0583  2D80               	goto	u146_25
  8309  0584  0871               	movf	i1___awdiv@divisor+1,w
  8310  0585  0273               	subwf	i1___awdiv@dividend+1,w
  8311  0586  1D03               	skipz
  8312  0587  2D8A               	goto	u147_25
  8313  0588  0870               	movf	i1___awdiv@divisor,w
  8314  0589  0272               	subwf	i1___awdiv@dividend,w
  8315  058A                     u147_25:
  8316  058A  1C03               	skipc
  8317  058B  2D91               	goto	i1l2035
  8318  058C  0870               	movf	i1___awdiv@divisor,w
  8319  058D  02F2               	subwf	i1___awdiv@dividend,f
  8320  058E  0871               	movf	i1___awdiv@divisor+1,w
  8321  058F  3BF3               	subwfb	i1___awdiv@dividend+1,f
  8322  0590  1477               	bsf	i1___awdiv@quotient,0
  8323  0591                     i1l2035:
  8324  0591  3001               	movlw	1
  8325  0592                     u148_25:
  8326  0592  36F1               	lsrf	i1___awdiv@divisor+1,f
  8327  0593  0CF0               	rrf	i1___awdiv@divisor,f
  8328  0594  0B89               	decfsz	9,f
  8329  0595  2D92               	goto	u148_25
  8330  0596  3001               	movlw	1
  8331  0597  02F5               	subwf	i1___awdiv@counter,f
  8332  0598  1D03               	btfss	3,2
  8333  0599  2D7F               	goto	i1l2029
  8334  059A                     i1l2039:
  8335  059A  0876               	movf	i1___awdiv@sign,w
  8336  059B  1903               	btfsc	3,2
  8337  059C  2DA2               	goto	i1l2043
  8338  059D  09F7               	comf	i1___awdiv@quotient,f
  8339  059E  09F8               	comf	i1___awdiv@quotient+1,f
  8340  059F  0AF7               	incf	i1___awdiv@quotient,f
  8341  05A0  1903               	skipnz
  8342  05A1  0AF8               	incf	i1___awdiv@quotient+1,f
  8343  05A2                     i1l2043:
  8344  05A2  0878               	movf	i1___awdiv@quotient+1,w
  8345  05A3  00F1               	movwf	?i1___awdiv+1
  8346  05A4  0877               	movf	i1___awdiv@quotient,w
  8347  05A5  00F0               	movwf	?i1___awdiv
  8348  05A6  0008               	return
  8349  05A7                     __end_ofi1___awdiv:
  8350                           
  8351                           	psect	text43
  8352  0766                     __ptext43:	
  8353 ;; *************** function i1_battery_voltage *****************
  8354 ;; Defined at:
  8355 ;;		line 91 in file "main.c"
  8356 ;; Parameters:    Size  Location     Type
  8357 ;;		None
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;		None
  8360 ;; Return value:  Size  Location     Type
  8361 ;;                  2   14[BANK0 ] unsigned int 
  8362 ;; Registers used:
  8363 ;;		wreg, status,2, status,0, pclath, cstack
  8364 ;; Tracked objects:
  8365 ;;		On entry : 0/0
  8366 ;;		On exit  : 0/0
  8367 ;;		Unchanged: 0/0
  8368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8369 ;;      Params:         0       2       0       0       0       0       0       0
  8370 ;;      Locals:         0       0       0       0       0       0       0       0
  8371 ;;      Temps:          0       0       0       0       0       0       0       0
  8372 ;;      Totals:         0       2       0       0       0       0       0       0
  8373 ;;Total ram usage:        2 bytes
  8374 ;; Hardware stack levels used:    1
  8375 ;; Hardware stack levels required when called:    1
  8376 ;; This function calls:
  8377 ;;		i1___aldiv
  8378 ;; This function is called by:
  8379 ;;		_TMR4_DefaultInterruptHandler
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           
  8384                           ;psect for function i1_battery_voltage
  8385  0766                     i1_battery_voltage:
  8386                           
  8387                           ;main.c: 93: FVRCON = 0b10000001;
  8388                           
  8389                           ;incstack = 0
  8390                           ; Regs used in i1_battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  8391  0766  3081               	movlw	129
  8392  0767  0022               	movlb	2	; select bank2
  8393  0768  0097               	movwf	23	;volatile
  8394                           
  8395                           ;main.c: 94: ADCON0 = 0b01111101;
  8396  0769  307D               	movlw	125
  8397  076A  0021               	movlb	1	; select bank1
  8398  076B  009D               	movwf	29	;volatile
  8399                           
  8400                           ;main.c: 95: ADCON1 = 0b10010000;
  8401  076C  3090               	movlw	144
  8402  076D  009E               	movwf	30	;volatile
  8403  076E                     i1l446:	
  8404                           ;main.c: 96: while(!FVRCONbits.FVRRDY){ }
  8405                           
  8406  076E  0022               	movlb	2	; select bank2
  8407  076F  1F17               	btfss	23,6	;volatile
  8408  0770  2F6E               	goto	i1l446
  8409                           
  8410                           ;main.c: 97: __nop();
  8411  0771  0000               	nop
  8412                           
  8413                           ;main.c: 98: __nop();
  8414  0772  0000               	nop
  8415                           
  8416                           ;main.c: 99: __nop();
  8417  0773  0000               	nop
  8418                           
  8419                           ;main.c: 100: __nop();
  8420  0774  0000               	nop
  8421                           
  8422                           ;main.c: 101: __nop();
  8423  0775  0000               	nop
  8424                           
  8425                           ;main.c: 102: ADCON0bits.GO_nDONE = 1;
  8426  0776  0021               	movlb	1	; select bank1
  8427  0777  149D               	bsf	29,1	;volatile
  8428  0778                     i1l449:	
  8429                           ;main.c: 103: while(ADCON0bits.GO_nDONE){ }
  8430                           
  8431  0778  189D               	btfsc	29,1	;volatile
  8432  0779  2F78               	goto	i1l449
  8433                           
  8434                           ;main.c: 104: ADCON0bits.ADON = 0;
  8435  077A  101D               	bcf	29,0	;volatile
  8436                           
  8437                           ;main.c: 109: return 1047552L / ADRES;
  8438  077B  081B               	movf	27,w	;volatile
  8439  077C  0020               	movlb	0	; select bank0
  8440  077D  00A0               	movwf	i1___aldiv@divisor
  8441  077E  0021               	movlb	1	; select bank1
  8442  077F  081C               	movf	28,w	;volatile
  8443  0780  0020               	movlb	0	; select bank0
  8444  0781  00A1               	movwf	i1___aldiv@divisor+1
  8445  0782  01A2               	clrf	i1___aldiv@divisor+2
  8446  0783  01A3               	clrf	i1___aldiv@divisor+3
  8447  0784  3000               	movlw	0
  8448  0785  00A7               	movwf	i1___aldiv@dividend+3
  8449  0786  300F               	movlw	15
  8450  0787  00A6               	movwf	i1___aldiv@dividend+2
  8451  0788  30FC               	movlw	252
  8452  0789  00A5               	movwf	i1___aldiv@dividend+1
  8453  078A  3000               	movlw	0
  8454  078B  00A4               	movwf	i1___aldiv@dividend
  8455  078C  3183  2324         	fcall	i1___aldiv
  8456  078E  0020               	movlb	0	; select bank0
  8457  078F  0821               	movf	?i1___aldiv+1,w
  8458  0790  00AF               	movwf	?i1_battery_voltage+1
  8459  0791  0820               	movf	?i1___aldiv,w
  8460  0792  00AE               	movwf	?i1_battery_voltage
  8461  0793  0008               	return
  8462  0794                     __end_ofi1_battery_voltage:
  8463                           
  8464                           	psect	text44
  8465  0324                     __ptext44:	
  8466 ;; *************** function i1___aldiv *****************
  8467 ;; Defined at:
  8468 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/aldiv.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;  divisor         4    0[BANK0 ] long 
  8471 ;;  dividend        4    4[BANK0 ] long 
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;  quotient        4   10[BANK0 ] long 
  8474 ;;  sign            1    9[BANK0 ] unsigned char 
  8475 ;;  counter         1    8[BANK0 ] unsigned char 
  8476 ;; Return value:  Size  Location     Type
  8477 ;;                  4    0[BANK0 ] long 
  8478 ;; Registers used:
  8479 ;;		wreg, status,2, status,0
  8480 ;; Tracked objects:
  8481 ;;		On entry : 0/0
  8482 ;;		On exit  : 0/0
  8483 ;;		Unchanged: 0/0
  8484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8485 ;;      Params:         0       8       0       0       0       0       0       0
  8486 ;;      Locals:         0       6       0       0       0       0       0       0
  8487 ;;      Temps:          1       0       0       0       0       0       0       0
  8488 ;;      Totals:         1      14       0       0       0       0       0       0
  8489 ;;Total ram usage:       15 bytes
  8490 ;; Hardware stack levels used:    1
  8491 ;; This function calls:
  8492 ;;		Nothing
  8493 ;; This function is called by:
  8494 ;;		i1_battery_voltage
  8495 ;;		i1_setCurrent
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           
  8500                           ;psect for function i1___aldiv
  8501  0324                     i1___aldiv:
  8502                           
  8503                           ;incstack = 0
  8504                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
  8505  0324  0020               	movlb	0	; select bank0
  8506  0325  01A9               	clrf	i1___aldiv@sign
  8507  0326  1FA3               	btfss	i1___aldiv@divisor+3,7
  8508  0327  2B35               	goto	i1l741
  8509  0328  09A0               	comf	i1___aldiv@divisor,f
  8510  0329  09A1               	comf	i1___aldiv@divisor+1,f
  8511  032A  09A2               	comf	i1___aldiv@divisor+2,f
  8512  032B  09A3               	comf	i1___aldiv@divisor+3,f
  8513  032C  0AA0               	incf	i1___aldiv@divisor,f
  8514  032D  1903               	skipnz
  8515  032E  0AA1               	incf	i1___aldiv@divisor+1,f
  8516  032F  1903               	skipnz
  8517  0330  0AA2               	incf	i1___aldiv@divisor+2,f
  8518  0331  1903               	skipnz
  8519  0332  0AA3               	incf	i1___aldiv@divisor+3,f
  8520  0333  01A9               	clrf	i1___aldiv@sign
  8521  0334  0AA9               	incf	i1___aldiv@sign,f
  8522  0335                     i1l741:
  8523  0335  1FA7               	btfss	i1___aldiv@dividend+3,7
  8524  0336  2B46               	goto	i1l1973
  8525  0337  09A4               	comf	i1___aldiv@dividend,f
  8526  0338  09A5               	comf	i1___aldiv@dividend+1,f
  8527  0339  09A6               	comf	i1___aldiv@dividend+2,f
  8528  033A  09A7               	comf	i1___aldiv@dividend+3,f
  8529  033B  0AA4               	incf	i1___aldiv@dividend,f
  8530  033C  1903               	skipnz
  8531  033D  0AA5               	incf	i1___aldiv@dividend+1,f
  8532  033E  1903               	skipnz
  8533  033F  0AA6               	incf	i1___aldiv@dividend+2,f
  8534  0340  1903               	skipnz
  8535  0341  0AA7               	incf	i1___aldiv@dividend+3,f
  8536  0342  3001               	movlw	1
  8537  0343  00F9               	movwf	??i1___aldiv
  8538  0344  0879               	movf	??i1___aldiv,w
  8539  0345  06A9               	xorwf	i1___aldiv@sign,f
  8540  0346                     i1l1973:
  8541  0346  3000               	movlw	0
  8542  0347  00AD               	movwf	i1___aldiv@quotient+3
  8543  0348  3000               	movlw	0
  8544  0349  00AC               	movwf	i1___aldiv@quotient+2
  8545  034A  3000               	movlw	0
  8546  034B  00AB               	movwf	i1___aldiv@quotient+1
  8547  034C  3000               	movlw	0
  8548  034D  00AA               	movwf	i1___aldiv@quotient
  8549  034E  0823               	movf	i1___aldiv@divisor+3,w
  8550  034F  0422               	iorwf	i1___aldiv@divisor+2,w
  8551  0350  0421               	iorwf	i1___aldiv@divisor+1,w
  8552  0351  0420               	iorwf	i1___aldiv@divisor,w
  8553  0352  1903               	skipnz
  8554  0353  2B8F               	goto	i1l1995
  8555  0354  01A8               	clrf	i1___aldiv@counter
  8556  0355  0AA8               	incf	i1___aldiv@counter,f
  8557  0356                     i1l1981:
  8558  0356  1BA3               	btfsc	i1___aldiv@divisor+3,7
  8559  0357  2B64               	goto	i1l1983
  8560  0358  3001               	movlw	1
  8561  0359                     u134_25:
  8562  0359  35A0               	lslf	i1___aldiv@divisor,f
  8563  035A  0DA1               	rlf	i1___aldiv@divisor+1,f
  8564  035B  0DA2               	rlf	i1___aldiv@divisor+2,f
  8565  035C  0DA3               	rlf	i1___aldiv@divisor+3,f
  8566  035D  0B89               	decfsz	9,f
  8567  035E  2B59               	goto	u134_25
  8568  035F  3001               	movlw	1
  8569  0360  00F9               	movwf	??i1___aldiv
  8570  0361  0879               	movf	??i1___aldiv,w
  8571  0362  07A8               	addwf	i1___aldiv@counter,f
  8572  0363  2B56               	goto	i1l1981
  8573  0364                     i1l1983:
  8574  0364  3001               	movlw	1
  8575  0365                     u136_25:
  8576  0365  35AA               	lslf	i1___aldiv@quotient,f
  8577  0366  0DAB               	rlf	i1___aldiv@quotient+1,f
  8578  0367  0DAC               	rlf	i1___aldiv@quotient+2,f
  8579  0368  0DAD               	rlf	i1___aldiv@quotient+3,f
  8580  0369  0B89               	decfsz	9,f
  8581  036A  2B65               	goto	u136_25
  8582  036B  0823               	movf	i1___aldiv@divisor+3,w
  8583  036C  0227               	subwf	i1___aldiv@dividend+3,w
  8584  036D  1D03               	skipz
  8585  036E  2B79               	goto	u137_25
  8586  036F  0822               	movf	i1___aldiv@divisor+2,w
  8587  0370  0226               	subwf	i1___aldiv@dividend+2,w
  8588  0371  1D03               	skipz
  8589  0372  2B79               	goto	u137_25
  8590  0373  0821               	movf	i1___aldiv@divisor+1,w
  8591  0374  0225               	subwf	i1___aldiv@dividend+1,w
  8592  0375  1D03               	skipz
  8593  0376  2B79               	goto	u137_25
  8594  0377  0820               	movf	i1___aldiv@divisor,w
  8595  0378  0224               	subwf	i1___aldiv@dividend,w
  8596  0379                     u137_25:
  8597  0379  1C03               	skipc
  8598  037A  2B84               	goto	i1l1991
  8599  037B  0820               	movf	i1___aldiv@divisor,w
  8600  037C  02A4               	subwf	i1___aldiv@dividend,f
  8601  037D  0821               	movf	i1___aldiv@divisor+1,w
  8602  037E  3BA5               	subwfb	i1___aldiv@dividend+1,f
  8603  037F  0822               	movf	i1___aldiv@divisor+2,w
  8604  0380  3BA6               	subwfb	i1___aldiv@dividend+2,f
  8605  0381  0823               	movf	i1___aldiv@divisor+3,w
  8606  0382  3BA7               	subwfb	i1___aldiv@dividend+3,f
  8607  0383  142A               	bsf	i1___aldiv@quotient,0
  8608  0384                     i1l1991:
  8609  0384  3001               	movlw	1
  8610  0385                     u138_25:
  8611  0385  36A3               	lsrf	i1___aldiv@divisor+3,f
  8612  0386  0CA2               	rrf	i1___aldiv@divisor+2,f
  8613  0387  0CA1               	rrf	i1___aldiv@divisor+1,f
  8614  0388  0CA0               	rrf	i1___aldiv@divisor,f
  8615  0389  0B89               	decfsz	9,f
  8616  038A  2B85               	goto	u138_25
  8617  038B  3001               	movlw	1
  8618  038C  02A8               	subwf	i1___aldiv@counter,f
  8619  038D  1D03               	btfss	3,2
  8620  038E  2B64               	goto	i1l1983
  8621  038F                     i1l1995:
  8622  038F  0829               	movf	i1___aldiv@sign,w
  8623  0390  1903               	btfsc	3,2
  8624  0391  2B9D               	goto	i1l1999
  8625  0392  09AA               	comf	i1___aldiv@quotient,f
  8626  0393  09AB               	comf	i1___aldiv@quotient+1,f
  8627  0394  09AC               	comf	i1___aldiv@quotient+2,f
  8628  0395  09AD               	comf	i1___aldiv@quotient+3,f
  8629  0396  0AAA               	incf	i1___aldiv@quotient,f
  8630  0397  1903               	skipnz
  8631  0398  0AAB               	incf	i1___aldiv@quotient+1,f
  8632  0399  1903               	skipnz
  8633  039A  0AAC               	incf	i1___aldiv@quotient+2,f
  8634  039B  1903               	skipnz
  8635  039C  0AAD               	incf	i1___aldiv@quotient+3,f
  8636  039D                     i1l1999:
  8637  039D  082D               	movf	i1___aldiv@quotient+3,w
  8638  039E  00A3               	movwf	?i1___aldiv+3
  8639  039F  082C               	movf	i1___aldiv@quotient+2,w
  8640  03A0  00A2               	movwf	?i1___aldiv+2
  8641  03A1  082B               	movf	i1___aldiv@quotient+1,w
  8642  03A2  00A1               	movwf	?i1___aldiv+1
  8643  03A3  082A               	movf	i1___aldiv@quotient,w
  8644  03A4  00A0               	movwf	?i1___aldiv
  8645  03A5  0008               	return
  8646  03A6                     __end_ofi1___aldiv:
  8647                           
  8648                           	psect	text45
  8649  0002                     __ptext45:	
  8650 ;; *************** function _PIN_MANAGER_IOC *****************
  8651 ;; Defined at:
  8652 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
  8653 ;; Parameters:    Size  Location     Type
  8654 ;;		None
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;		None
  8657 ;; Return value:  Size  Location     Type
  8658 ;;                  1    wreg      void 
  8659 ;; Registers used:
  8660 ;;		None
  8661 ;; Tracked objects:
  8662 ;;		On entry : 0/0
  8663 ;;		On exit  : 0/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8666 ;;      Params:         0       0       0       0       0       0       0       0
  8667 ;;      Locals:         0       0       0       0       0       0       0       0
  8668 ;;      Temps:          0       0       0       0       0       0       0       0
  8669 ;;      Totals:         0       0       0       0       0       0       0       0
  8670 ;;Total ram usage:        0 bytes
  8671 ;; Hardware stack levels used:    1
  8672 ;; This function calls:
  8673 ;;		Nothing
  8674 ;; This function is called by:
  8675 ;;		_INTERRUPT_InterruptManager
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           
  8680                           ;psect for function _PIN_MANAGER_IOC
  8681  0002                     _PIN_MANAGER_IOC:
  8682                           
  8683                           ;incstack = 0
  8684                           ; Regs used in _PIN_MANAGER_IOC: []
  8685  0002  0008               	return
  8686  0003                     __end_of_PIN_MANAGER_IOC:
  8687                           
  8688                           	psect	text46
  8689  0E62                     __ptext46:	
  8690 ;; *************** function _INT_ISR *****************
  8691 ;; Defined at:
  8692 ;;		line 54 in file "mcc_generated_files/ext_int.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;		None
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;		None
  8697 ;; Return value:  Size  Location     Type
  8698 ;;                  1    wreg      void 
  8699 ;; Registers used:
  8700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8706 ;;      Params:         0       0       0       0       0       0       0       0
  8707 ;;      Locals:         0       0       0       0       0       0       0       0
  8708 ;;      Temps:          0       0       0       0       0       0       0       0
  8709 ;;      Totals:         0       0       0       0       0       0       0       0
  8710 ;;Total ram usage:        0 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:    2
  8713 ;; This function calls:
  8714 ;;		_INT_CallBack
  8715 ;; This function is called by:
  8716 ;;		_INTERRUPT_InterruptManager
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           
  8721                           ;psect for function _INT_ISR
  8722  0E62                     _INT_ISR:
  8723                           
  8724                           ;ext_int.c: 56: (INTCONbits.INTF = 0);
  8725                           
  8726                           ;incstack = 0
  8727                           ; Regs used in _INT_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8728  0E62  108B               	bcf	11,1	;volatile
  8729                           
  8730                           ;ext_int.c: 59: INT_CallBack();
  8731  0E63  318E  26DB         	fcall	_INT_CallBack
  8732  0E65  0008               	return
  8733  0E66                     __end_of_INT_ISR:
  8734                           
  8735                           	psect	text47
  8736  0EDB                     __ptext47:	
  8737 ;; *************** function _INT_CallBack *****************
  8738 ;; Defined at:
  8739 ;;		line 62 in file "mcc_generated_files/ext_int.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;		None
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;		None
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  1    wreg      void 
  8746 ;; Registers used:
  8747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8753 ;;      Params:         0       0       0       0       0       0       0       0
  8754 ;;      Locals:         0       0       0       0       0       0       0       0
  8755 ;;      Temps:          0       0       0       0       0       0       0       0
  8756 ;;      Totals:         0       0       0       0       0       0       0       0
  8757 ;;Total ram usage:        0 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:    1
  8760 ;; This function calls:
  8761 ;;		Absolute function
  8762 ;;		_INT_DefaultInterruptHandler
  8763 ;; This function is called by:
  8764 ;;		_INT_ISR
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           
  8769                           ;psect for function _INT_CallBack
  8770  0EDB                     _INT_CallBack:
  8771                           
  8772                           ;ext_int.c: 65: if(INT_InterruptHandler)
  8773                           
  8774                           ;incstack = 0
  8775                           ; Regs used in _INT_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8776  0EDB  0020               	movlb	0	; select bank0
  8777  0EDC  0850               	movf	_INT_InterruptHandler,w
  8778  0EDD  0451               	iorwf	_INT_InterruptHandler+1,w
  8779  0EDE  1903               	btfsc	3,2
  8780  0EDF  0008               	return
  8781                           
  8782                           ;ext_int.c: 66: {;ext_int.c: 67: INT_InterruptHandler();
  8783  0EE0  0851               	movf	_INT_InterruptHandler+1,w
  8784  0EE1  008A               	movwf	10
  8785  0EE2  0850               	movf	_INT_InterruptHandler,w
  8786  0EE3  000A               	callw
  8787  0EE4  318E               	pagesel	$
  8788  0EE5  0008               	return
  8789  0EE6                     __end_of_INT_CallBack:
  8790                           
  8791                           	psect	text48
  8792  03A6                     __ptext48:	
  8793 ;; *************** function _INT_DefaultInterruptHandler *****************
  8794 ;; Defined at:
  8795 ;;		line 76 in file "mcc_generated_files/ext_int.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;		None
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;  time            1    1[COMMON] unsigned char 
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  1    wreg      void 
  8802 ;; Registers used:
  8803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8809 ;;      Params:         0       0       0       0       0       0       0       0
  8810 ;;      Locals:         1       0       0       0       0       0       0       0
  8811 ;;      Temps:          1       0       0       0       0       0       0       0
  8812 ;;      Totals:         2       0       0       0       0       0       0       0
  8813 ;;Total ram usage:        2 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; This function calls:
  8816 ;;		Nothing
  8817 ;; This function is called by:
  8818 ;;		_EXT_INT_Initialize
  8819 ;;		_INT_CallBack
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           
  8824                           ;psect for function _INT_DefaultInterruptHandler
  8825  03A6                     _INT_DefaultInterruptHandler:
  8826                           
  8827                           ;ext_int.c: 80: uint8_t time = TMR0;
  8828                           
  8829                           ;incstack = 0
  8830                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr1h+status,2+status,0]
  8831  03A6  0020               	movlb	0	; select bank0
  8832  03A7  0815               	movf	21,w	;volatile
  8833  03A8  00F0               	movwf	??_INT_DefaultInterruptHandler
  8834  03A9  0870               	movf	??_INT_DefaultInterruptHandler,w
  8835  03AA  00F1               	movwf	INT_DefaultInterruptHandler@time
  8836                           
  8837                           ;ext_int.c: 81: TMR0 = 0;
  8838  03AB  0195               	clrf	21	;volatile
  8839                           
  8840                           ;ext_int.c: 84: if (INTCONbits.TMR0IF){
  8841  03AC  190B               	btfsc	11,2	;volatile
  8842                           
  8843                           ;ext_int.c: 85: time = 0;
  8844  03AD  01F1               	clrf	INT_DefaultInterruptHandler@time
  8845                           
  8846                           ;ext_int.c: 86: };ext_int.c: 87: INTCONbits.TMR0IF = 0;
  8847  03AE  110B               	bcf	11,2	;volatile
  8848                           
  8849                           ;ext_int.c: 89: switch(ir_code.state){
  8850  03AF  2C00               	goto	i1l2107
  8851  03B0                     i1l2065:
  8852                           
  8853                           ;ext_int.c: 92: if (time >= 180 && time <= 243){
  8854  03B0  30B4               	movlw	180
  8855  03B1  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8856  03B2  1C03               	skipc
  8857  03B3  2C0B               	goto	i1l267
  8858  03B4  30F4               	movlw	244
  8859  03B5  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8860  03B6  1803               	skipnc
  8861  03B7  2C0B               	goto	i1l267
  8862                           
  8863                           ;ext_int.c: 93: ir_code.n_bits = 0;
  8864  03B8  01C8               	clrf	_ir_code
  8865                           
  8866                           ;ext_int.c: 94: ir_code.state = STATE_RECEIVING;
  8867  03B9  01C9               	clrf	_ir_code+1
  8868  03BA  0AC9               	incf	_ir_code+1,f
  8869                           
  8870                           ;ext_int.c: 95: stats[0] = time;
  8871  03BB  0871               	movf	INT_DefaultInterruptHandler@time,w
  8872  03BC  00F0               	movwf	??_INT_DefaultInterruptHandler
  8873  03BD  0870               	movf	??_INT_DefaultInterruptHandler,w
  8874  03BE  0022               	movlb	2	; select bank2
  8875  03BF  00A0               	movwf	_stats^(0+256)
  8876  03C0  2C0B               	goto	i1l267
  8877  03C1                     i1l2075:
  8878                           
  8879                           ;ext_int.c: 100: ir_code.code <<= 1;
  8880  03C1  3001               	movlw	1
  8881  03C2                     u154_25:
  8882  03C2  35CA               	lslf	_ir_code+2,f
  8883  03C3  0DCB               	rlf	_ir_code+3,f
  8884  03C4  0DCC               	rlf	_ir_code+4,f
  8885  03C5  0DCD               	rlf	_ir_code+5,f
  8886  03C6  0B89               	decfsz	9,f
  8887  03C7  2BC2               	goto	u154_25
  8888                           
  8889                           ;ext_int.c: 101: if (time >= 29 && time <= 41){
  8890  03C8  301D               	movlw	29
  8891  03C9  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8892  03CA  1C03               	skipc
  8893  03CB  2BDF               	goto	i1l2087
  8894  03CC  302A               	movlw	42
  8895  03CD  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8896  03CE  1803               	skipnc
  8897  03CF  2BDF               	goto	i1l2087
  8898                           
  8899                           ;ext_int.c: 102: stats[1+ir_code.n_bits] = time;
  8900  03D0  0871               	movf	INT_DefaultInterruptHandler@time,w
  8901  03D1  00F0               	movwf	??_INT_DefaultInterruptHandler
  8902  03D2  0848               	movf	_ir_code,w
  8903  03D3  3E21               	addlw	(low ((_stats| (0+256)+1)))& (0+255)
  8904  03D4  0086               	movwf	6
  8905  03D5  3001               	movlw	1	; select bank2/3
  8906  03D6  0087               	movwf	7
  8907  03D7  0870               	movf	??_INT_DefaultInterruptHandler,w
  8908  03D8  0081               	movwf	1
  8909                           
  8910                           ;ext_int.c: 103: ir_code.code |= 1;
  8911  03D9  144A               	bsf	_ir_code+2,0
  8912  03DA                     i1l2085:
  8913                           
  8914                           ;ext_int.c: 104: ir_code.n_bits++;
  8915  03DA  3001               	movlw	1
  8916  03DB  00F0               	movwf	??_INT_DefaultInterruptHandler
  8917  03DC  0870               	movf	??_INT_DefaultInterruptHandler,w
  8918  03DD  07C8               	addwf	_ir_code,f
  8919                           
  8920                           ;ext_int.c: 105: } else if (time >= 14 && time <= 20){
  8921  03DE  2BF3               	goto	i1l2097
  8922  03DF                     i1l2087:
  8923  03DF  300E               	movlw	14
  8924  03E0  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8925  03E1  1C03               	skipc
  8926  03E2  2BF1               	goto	i1l2095
  8927  03E3  3015               	movlw	21
  8928  03E4  0271               	subwf	INT_DefaultInterruptHandler@time,w
  8929  03E5  1803               	skipnc
  8930  03E6  2BF1               	goto	i1l2095
  8931                           
  8932                           ;ext_int.c: 106: stats[1+ir_code.n_bits] = time;
  8933  03E7  0871               	movf	INT_DefaultInterruptHandler@time,w
  8934  03E8  00F0               	movwf	??_INT_DefaultInterruptHandler
  8935  03E9  0848               	movf	_ir_code,w
  8936  03EA  3E21               	addlw	(low ((_stats| (0+256)+1)))& (0+255)
  8937  03EB  0086               	movwf	6
  8938  03EC  3001               	movlw	1	; select bank2/3
  8939  03ED  0087               	movwf	7
  8940  03EE  0870               	movf	??_INT_DefaultInterruptHandler,w
  8941  03EF  0081               	movwf	1
  8942  03F0  2BDA               	goto	i1l2085
  8943  03F1                     i1l2095:
  8944                           
  8945                           ;ext_int.c: 110: ir_code.state = STATE_RESET;
  8946  03F1  01C9               	clrf	_ir_code+1
  8947                           
  8948                           ;ext_int.c: 111: break;
  8949  03F2  2C0B               	goto	i1l267
  8950  03F3                     i1l2097:
  8951                           
  8952                           ;ext_int.c: 112: };ext_int.c: 113: if (32 == ir_code.n_bits){
  8953  03F3  3020               	movlw	32
  8954  03F4  0648               	xorwf	_ir_code,w
  8955  03F5  1D03               	btfss	3,2
  8956  03F6  2C0B               	goto	i1l267
  8957                           
  8958                           ;ext_int.c: 116: if (ir_code.command == ((~ir_code.command_b) & 0xff)){
  8959  03F7  094A               	comf	_ir_code+2,w
  8960  03F8  064B               	xorwf	_ir_code+3,w
  8961  03F9  1D03               	skipz
  8962  03FA  2BF1               	goto	i1l2095
  8963                           
  8964                           ;ext_int.c: 117: ir_code.state = STATE_DONE;
  8965  03FB  3002               	movlw	2
  8966  03FC  00F0               	movwf	??_INT_DefaultInterruptHandler
  8967  03FD  0870               	movf	??_INT_DefaultInterruptHandler,w
  8968  03FE  00C9               	movwf	_ir_code+1
  8969                           
  8970                           ;ext_int.c: 118: } else {
  8971  03FF  2C0B               	goto	i1l267
  8972  0400                     i1l2107:
  8973  0400  0849               	movf	_ir_code+1,w
  8974                           
  8975                           ; Switch size 1, requested type "simple"
  8976                           ; Number of cases is 3, Range of values is 0 to 2
  8977                           ; switch strategies available:
  8978                           ; Name         Instructions Cycles
  8979                           ; simple_byte           10     6 (average)
  8980                           ; direct_byte           12     6 (fixed)
  8981                           ; jumptable            260     6 (fixed)
  8982                           ;	Chosen strategy is simple_byte
  8983  0401  3A00               	xorlw	0	; case 0
  8984  0402  1903               	skipnz
  8985  0403  2BB0               	goto	i1l2065
  8986  0404  3A01               	xorlw	1	; case 1
  8987  0405  1903               	skipnz
  8988  0406  2BC1               	goto	i1l2075
  8989  0407  3A03               	xorlw	3	; case 2
  8990  0408  1903               	skipnz
  8991  0409  2C0B               	goto	i1l267
  8992  040A  2BF1               	goto	i1l2095
  8993  040B                     i1l267:
  8994                           
  8995                           ;ext_int.c: 132: INTCONbits.INTF = 0;
  8996  040B  108B               	bcf	11,1	;volatile
  8997  040C  0008               	return
  8998  040D                     __end_of_INT_DefaultInterruptHandler:
  8999  007E                     btemp	set	126	;btemp
  9000  007E                     int$flags	set	126
  9001  007E                     wtemp0	set	126
  9002                           
  9003                           	psect	config
  9004                           
  9005                           ;Config register CONFIG1 @ 0x8007
  9006                           ;	Oscillator Selection Bits
  9007                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  9008                           ;	Watchdog Timer Enable
  9009                           ;	WDTE = OFF, WDT disabled
  9010                           ;	Power-up Timer Enable
  9011                           ;	PWRTE = OFF, PWRT disabled
  9012                           ;	MCLR Pin Function Select
  9013                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  9014                           ;	Flash Program Memory Code Protection
  9015                           ;	CP = OFF, Program memory code protection is disabled
  9016                           ;	Brown-out Reset Enable
  9017                           ;	BOREN = OFF, Brown-out Reset disabled
  9018                           ;	Clock Out Enable
  9019                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
  9020                           ;	Internal/External Switchover Mode
  9021                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
  9022                           ;	Fail-Safe Clock Monitor Enable
  9023                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  9024  8007                     	org	32775
  9025  8007  21E4               	dw	8676
  9026                           
  9027                           ;Config register CONFIG2 @ 0x8008
  9028                           ;	Flash Memory Self-Write Protection
  9029                           ;	WRT = OFF, Write protection off
  9030                           ;	Peripheral Pin Select one-way control
  9031                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
  9032                           ;	Zero-cross detect disable
  9033                           ;	ZCDDIS = ON, Zero-cross detect circuit is disabled at POR
  9034                           ;	Phase Lock Loop enable
  9035                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
  9036                           ;	Stack Overflow/Underflow Reset Enable
  9037                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  9038                           ;	Brown-out Reset Voltage Selection
  9039                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  9040                           ;	Low-Power Brown Out Reset
  9041                           ;	LPBOR = OFF, Low-Power BOR is disabled
  9042                           ;	Low-Voltage Programming Enable
  9043                           ;	LVP = ON, Low-voltage programming enabled
  9044  8008                     	org	32776
  9045  8008  3EFF               	dw	16127

Data Sizes:
    Strings     55
    Constant    0
    Data        39
    BSS         59
    Persistent  42
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     32      57
    BANK1            80     47      74
    BANK2            80      0      55
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_3(CODE[15]), STR_2(CODE[19]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK0[6]), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_setCurrent->i1___lldiv
    i1___lldiv->i1___lmul
    i1_battery_voltage->i1___aldiv
    i1___aldiv->i1___awdiv
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR4_ISR->_TMR4_DefaultInterruptHandler
    _TMR4_DefaultInterruptHandler->i1_setCurrent
    i1_setCurrent->i1_battery_voltage
    i1_battery_voltage->i1___aldiv

Critical Paths under _main in BANK1

    _main->_process_remote_command
    _startUp->_setLEDColor
    _process_remote_command->_setCurrent
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    ___lldiv->___lmul
    _selectSomething->_setLEDColor
    _selectFrequency->_printf
    _selectCurrent->_printf
    _printf->_putch
    _putch->_EUSART_Write
    _battery_voltage->___aldiv
    ___aldiv->___lmul
    _lowBattery->_setLEDColor
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   32040
                                             46 BANK1      1     1      0
                     _DAC_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
                         _lowBattery
             _process_remote_command
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              4     4      0    3762
                                              4 BANK1      4     4      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0   22916
                                             43 BANK1      3     3      0
                    _battery_voltage
                             _printf
                      _selectCurrent
                    _selectFrequency
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setFrequency                                         5     3      2    1901
                                             27 BANK1      5     3      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _setCurrent                                          14    10      4    3787
                                             29 BANK1     14    10      4
                            ___aldiv
                            ___awdiv
                            ___lldiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     612
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     368
                                             12 BANK1     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     683
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    3694
                                              4 BANK1      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    4181
                                              9 BANK1      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    4181
                                              9 BANK1      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    17      2     487
                                              2 BANK1      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      62
                                              1 BANK1      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2     918
                                             27 BANK1      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     918
                                             12 BANK1     15     7      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lowBattery                                           2     2      0    3694
                                              4 BANK1      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    3694
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     750
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     150
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     150
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     450
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0    2031
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR4_ISR                                             0     0      0    1831
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR4_DefaultInterruptHandler                         2     2      0    1831
                                             30 BANK0      2     2      0
                  i1_battery_voltage
                       i1_setCurrent
 ---------------------------------------------------------------------------------
 (9) i1_setCurrent                                        14    10      4    1427
                                             16 BANK0     14    10      4
                          i1___aldiv
                          i1___awdiv
                          i1___lldiv
                           i1___lmul
                  i1_battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___lmul                                           12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (10) i1___lldiv                                          14     6      8     214
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___awdiv                                           9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (9) i1_battery_voltage                                    2     0      2     404
                                             14 BANK0      2     0      2
                          i1___aldiv
 ---------------------------------------------------------------------------------
 (10) i1___aldiv                                          15     7      8     404
                                              9 COMMON     1     1      0
                                              0 BANK0     14     6      8
                          i1___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT_ISR                                              0     0      0     200
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (8) _INT_CallBack                                         0     0      0     200
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _INT_DefaultInterruptHandler                          2     2      0     200
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _lowBattery
     _setLEDColor
   _process_remote_command
     _battery_voltage
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
     _printf
       _putch
         _EUSART_Write
     _selectCurrent
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectFrequency
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___awdiv
       ___lldiv
         ___lmul (ARG)
       ___lmul
       _battery_voltage (ARG)
         ___aldiv
           ___awdiv (ARG)
           ___lmul (ARG)
     _setFrequency
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___lmul
     _setLEDColor
   _startUp
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       i1_battery_voltage
         i1___aldiv
           i1___awdiv (ARG)
       i1_setCurrent
         i1___aldiv
           i1___awdiv (ARG)
         i1___awdiv
         i1___lldiv
           i1___lmul (ARG)
         i1___lmul
         i1_battery_voltage (ARG)
           i1___aldiv
             i1___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      C8       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     20      39       6       71.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     2F      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      37      10       68.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      C8      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Jul 20 15:05:03 2020

                                 ___awdiv@sign 00A6                        __end_of_OPA1_Initialize 0E6A  
                              _timer0ReloadVal 007D                                            l209 0ED3  
                                          l523 06E9                                            l446 07C9  
                                          l449 07D3                                            l741 02B3  
                                          _PR2 001B                                            _PR4 0416  
               ?_EUSART_SetFramingErrorHandler 00A0                                _TMR2_Initialize 0E92  
                                          wreg 0009                                 i1___aldiv@sign 0029  
                     __size_of_selectFrequency 002A                                           l2203 031B  
                                         l3003 00F8                                           l3005 00FC  
                                         l3021 0113                                           l2151 042C  
                                         l3007 0100                                           l3023 0141  
                                         l3017 0110                                           l2163 0457  
                                         l2149 041E                                           l3037 06FB  
                                         l2159 044C                                           l2185 02D4  
                                         l2177 02C4                                           l2195 0302  
                                         l2187 02E2                                           l2701 04C9  
                                         l2199 030D                                           l2711 04D1  
                                         l2713 04DD                                           l2723 04F8  
                                         l2727 0500                                           l2719 04EF  
                                         l2657 0F3C                                           l2659 0F40  
                                         l2675 0710                                           l2669 0F51  
                                         l2941 0633                                           l2695 04BE  
                                         l2679 071A                                           l2951 0063  
                                         l2865 0299                                           l2881 05E7  
                                         l2971 00BB                                           l2869 029E  
                                         l2877 05E2                                           l2965 00A8  
                                         l2957 007A                                           l2983 00CF  
                                         l2975 00C4                                           l2967 00B4  
                                         l2959 008F                                           l2993 00F0  
                                         l2985 00E3                                           STR_1 07EC  
                                         STR_2 0801                                           STR_3 0814  
                                         _LATA 010C                                           _LATB 010D  
                              __end_of_INT_ISR 0E66                                           _LATC 010E  
                                         u1705 042D                                           u1715 0441  
                                         u1805 02F7                                           u2445 04D4  
                                         u1725 044D                                           u2605 0073  
                                         u1815 0303                                           u2535 026B  
                                         u2465 04DE                                           u2385 071B  
                                         u2545 0292                                           u2625 00A1  
                                         u2475 04E8                                           u2395 0722  
                                         u2715 06F6                                           u2485 04F0  
                                         u1685 0421                                           u2565 05DB  
                                         u1775 02D7                                           u2807 0FEA  
                                         u2817 0FC0                                           u2585 0667  
                                         u2737 0644                                           u2827 07A5  
                                         u1795 02E3                                           u2747 0654  
                                         u2837 07B9                                           u2757 0154  
                                         u2767 0512                                           u2777 0526  
                                         u2787 053A                                           u2797 054E  
                                         _TMR0 0015                                           _TMR2 001A  
                                         _TMR4 0415                        __end_of_OPA2_Initialize 0E6E  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                           _flag 00E4  
                            i1___lldiv@divisor 0020                                           _main 06D5  
                                         _duty 0045                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                            i1___lldiv@counter 002C            __end_of_INT_DefaultInterruptHandler 040D  
                  _INT_DefaultInterruptHandler 03A6                                           start 0020  
              __end_of_INT_SetInterruptHandler 0EBE                     ??_TMR4_SetInterruptHandler 00A2  
                      __end_of_TMR0_Initialize 0ED1                                  ?_EUSART_Write 0070  
               __size_of_OSCILLATOR_Initialize 0008                  __end_of_OSCILLATOR_Initialize 0E92  
                              __end_of___aldiv 0324                                          ?_main 0070  
                               i1___awdiv@sign 0076                                __end_of___awdiv 0505  
                                        _ADRES 009B                                __end_of___lldiv 0460  
                              ___awdiv@divisor 00A0                                          _T2CON 001C  
                                        _T4CON 0417                                          i1l142 001E  
                                        i1l134 000D                                          i1l136 0014  
                                        i1l267 040B                                          i1l446 076E  
                                        i1l449 0778                                          i1l741 0335  
                                        i1l588 069F                                   ?_setLEDColor 00A0  
                              ___awdiv@counter 00A5                       __size_of_selectSomething 0051  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _RXPPS 0E24  
                              _TMR4_Initialize 0F0D                            ___lmul@multiplicand 00A4  
                             __end_of_TMR4_ISR 0EFD                             i1___lldiv@dividend 0024  
                              __end_of_initLED 062F                        __end_of_PIN_MANAGER_IOC 0003  
                               _WDT_Initialize 0E6E                                          _putch 0E78  
                                        _stats 0120                               __end_ofi1___lmul 0766  
                                        pclath 000A                                __end_of_startUp 066C  
                                        status 0003                        ?_process_remote_command 0070  
                           __size_ofi1___aldiv 0082                                          wtemp0 007E  
                           __size_ofi1___awdiv 0051                             __size_ofi1___lldiv 0053  
                             ??_DAC_Initialize 00A0                                __initialization 0022  
                                 __end_of_main 0707                              i1_battery_voltage 0766  
                        __end_of_selectCurrent 0FD6                            i1___lmul@multiplier 0070  
                           i1___lldiv@quotient 0028                                 ??_EUSART_Write 00A0  
                      __end_of_TMR2_Initialize 0E9A                    ?_INTERRUPT_InterruptManager 0070  
                           ?i1_battery_voltage 002E                               ?_OPA1_Initialize 0070  
                                       ??_main 00CE                       __size_of_battery_voltage 002B  
                          ??i1_battery_voltage 007A                         __end_of_WDT_Initialize 0E72  
                                    ??_INT_ISR 0072                          __size_ofi1_setCurrent 00A4  
            _EUSART_DefaultFramingErrorHandler 0000                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 0054  
                                       _CCPR1L 0291                               ___awdiv@dividend 00A2  
                                       _ANSELA 018C                                         ?_putch 0070  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                         _RC1REG 0199  
                                       _RA5PPS 0E95                                         _RC1STA 019D  
                                       i1l2011 0560                                         _RC4PPS 0EA4  
                                       i1l2017 056B                                         i1l2107 0400  
                                       i1l2043 05A2                                         i1l2035 0591  
                                       i1l2027 0573                                         _RB7PPS 0E9F  
                                       _RC5PPS 0EA5                                         i1l2029 057F  
                                       i1l2039 059A                                         i1l2065 03B0  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       i1l2075 03C1                                         _ODCONC 028E  
                                       i1l2085 03DA                                         i1l2095 03F1  
                                       i1l2087 03DF                                         i1l2263 01FD  
                                       i1l2431 067A                                         i1l2097 03F3  
                                       i1l2433 0690                                         i1l2267 0202  
               __end_of_process_remote_command 0162                                         u121_25 074A  
                                       i1l1931 0749                                         u122_25 0751  
                                       i1l1927 073F                                         i1l1945 0471  
                                       i1l1955 049F                                         i1l1947 047F  
                                       i1l1981 0356                                         i1l1973 0346  
                                       i1l1991 0384                                         i1l1983 0364  
                                       i1l1959 04AA                                         i1l1995 038F  
                                       i1l1999 039D                                         u125_25 0474  
                                       u134_25 0359                                         u127_25 0480  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         u136_25 0365  
                                       u144_25 0576                                         u128_25 0494  
                                       u137_25 0379                                         u129_25 04A0  
                                       u154_25 03C2                                         u138_25 0385  
                                       u146_25 0580                                         _FVRCON 0117  
                                       u147_25 058A                                         u148_25 0592  
                                       _INTPPS 0E10                               ?_OPA2_Initialize 0070  
                                       u196_25 01CF                                         u197_25 01F6  
                                       _OSCCON 0099                                         _TX1REG 019A  
                                       _WDTCON 0097                                         _TX1STA 019E  
                            ??_selectFrequency 00A9                      __end_ofi1_battery_voltage 0794  
                                       _Vdd_mv 0040                                         ___lmul 0707  
                                    ??___aldiv 00B4                                      ??___awdiv 00A4  
                                    ??___lldiv 00B4                               ?_TMR0_Initialize 0070  
                      __end_of_TMR4_Initialize 0F1F                                   i1_setCurrent 0162  
                             ___awdiv@quotient 00A7                                         _printf 0F4C  
                                ?_INT_CallBack 0070                              __end_ofi1___aldiv 03A6  
                                    ??_initLED 00A0                              __end_ofi1___awdiv 05A7  
         __end_of_TMR4_DefaultInterruptHandler 06A2          __size_of_TMR4_DefaultInterruptHandler 0036  
                 _TMR4_DefaultInterruptHandler 066C                              __end_ofi1___lldiv 04B3  
                             setCurrent@Vdd_mv 00BF                                ?_WDT_Initialize 0070  
             __size_of_INT_SetInterruptHandler 0009                                      ??_startUp 00A4  
     TMR4_SetInterruptHandler@InterruptHandler 00A0        INT_SetInterruptHandler@InterruptHandler 00A0  
                             ?_PIN_MANAGER_IOC 0070                              ??_selectSomething 00A4  
                            _SYSTEM_Initialize 0F69                        __end_of__initialization 0056  
                           ?_SYSTEM_Initialize 0070                                 __pcstackCOMMON 0070  
                                 __pidataBANK0 0003                                   __pidataBANK1 0EFD  
                                 __pidataBANK2 0F1F                            ??_SYSTEM_Initialize 00A2  
                                    ?_TMR4_ISR 0070                                  __end_of_putch 0E7E  
                             ?_TMR2_Initialize 0070                                 ??_INT_CallBack 0072  
                                    ?i1___lmul 0070                    __size_of_EXT_INT_Initialize 000B  
                               _OPTION_REGbits 0095                  ?_TMR4_DefaultInterruptHandler 0070  
                         __size_of_setLEDColor 0017                ??_EUSART_SetOverrunErrorHandler 00A2  
                            ??_battery_voltage 00BD                      __end_of_SYSTEM_Initialize 0F8A  
                            i1___aldiv@divisor 0020                                        ??_putch 00A1  
                            i1___aldiv@counter 0028                                  ?_setFrequency 00BB  
                                   __pbssBANK0 0040                                     __pbssBANK1 00DF  
                                   __pbssBANK2 0120                           __end_of_EUSART_Write 0EDB  
                        _TMR4_InterruptHandler 004E                     __size_ofi1_battery_voltage 002E  
                                   __pmaintext 06D5                                        ?___lmul 00A0  
                                   ??_TMR4_ISR 007D                                     __pintentry 0004  
                               ___lmul@product 00A8                               ?_TMR4_Initialize 0070  
                                      ?_printf 00A2                                     ??i1___lmul 0078  
                           i1___awdiv@dividend 0072                                        _OPA1CON 0511  
                                      _OPA2CON 0515                                        _LED_red 00E7  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                                      _INT_ISR 0E62                              _maxFrequencyIndex 00CF  
                                      _OSCSTAT 009A                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM4DCH 061B  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                       ??_EUSART_SetErrorHandler 00A2  
                               ??_setFrequency 00BD                                _maxCurrentIndex 00D1  
                                      _Vdac_mv 00E8                             i1___awdiv@quotient 0077  
                                      ___aldiv 02A2                                        ___awdiv 04B3  
                              __size_of___lmul 0030                                        ___lldiv 040D  
                           i1setCurrent@Vdd_mv 0032                                        __ptext1 062F  
                                      __ptext2 005A                                        __ptext3 05A7  
                                      __ptext4 0206                                        __ptext5 0707  
                                      __ptext6 040D                                        __ptext7 04B3  
                                      __ptext8 0505                                        __ptext9 0FD6  
                              __size_of_printf 001D                                        _initLED 05EB  
                                      _ir_code 0048                                     _lowBattery 0794  
                        _OSCILLATOR_Initialize 0E8A                                      _T2CONbits 001C  
                                      _current 0044                          i1setCurrent@microamps 0030  
                             ___aldiv@dividend 00B0                                      _T4CONbits 0417  
                     ??_PIN_MANAGER_Initialize 00A0              __size_of_TMR4_SetInterruptHandler 0009  
                      _INT_SetInterruptHandler 0EB5                      ?_TMR4_SetInterruptHandler 00A0  
                              _selectFrequency 0FD6                                        _startUp 062F  
                   __size_of_SYSTEM_Initialize 0021                                        clrloop0 0E7F  
                         end_of_initialization 0056                 ??_TMR4_DefaultInterruptHandler 003E  
                                   _setCurrent 0206          __end_of_EUSART_SetOverrunErrorHandler 0EB5  
       __size_of_EUSART_SetOverrunErrorHandler 0009                  _EUSART_SetOverrunErrorHandler 0EAC  
                                    _LED_green 00E6                                        init_ram 0E84  
                                      initloop 0E85                           __end_of_INT_CallBack 0EE6  
                            _EUSART_Initialize 0F8A                                 _frequencyIndex 00DF  
                              ___lldiv@divisor 00AC                                 _frequencyValue 00D3  
                              ___lldiv@counter 00B9                             ?_EUSART_Initialize 0070  
                                      printf@c 00A8                                        printf@f 00A2  
                             ___aldiv@quotient 00B7                                setLEDColor@blue 00A1  
                          ??_EUSART_Initialize 00A2                               ??_WDT_Initialize 00A0  
                              _selectSomething 0505                          __size_of_EUSART_Write 000A  
                     __size_of_OPA1_Initialize 0004                                      i1___aldiv 0324  
                                    i1___awdiv 0556                                      i1___lldiv 0460  
              __size_of_EUSART_SetErrorHandler 0009                         __size_of_selectCurrent 0028  
                    __end_of_EUSART_Initialize 0FAE                                    _CCP1CONbits 0293  
                     __size_of_OPA2_Initialize 0004                           __end_of_setFrequency 05EB  
                               __end_of___lmul 0737                     _EUSART_DefaultErrorHandler 0000  
                              _battery_voltage 07C1                                   _EUSART_Write 0ED1  
                            __size_of_TMR4_ISR 000C                         ?_OSCILLATOR_Initialize 0070  
                      __end_of_selectFrequency 1000                      ??_INT_SetInterruptHandler 00A2  
                      __size_of_DAC_Initialize 0006                                    ?_lowBattery 0070  
                               __end_of_printf 0F69                           i1setCurrent@DACValue 003C  
                        i1___lmul@multiplicand 0074                              __size_ofi1___lmul 002F  
                          start_initialization 0022                       __size_of_TMR0_Initialize 000A  
              __size_of_PIN_MANAGER_Initialize 0033                                     ?i1___aldiv 0020  
                                   ?i1___awdiv 0070                                     ?i1___lldiv 0020  
                                  putch@txData 00A1                                    ?_setCurrent 00BD  
                     __size_of_PIN_MANAGER_IOC 0001                   ?_INT_DefaultInterruptHandler 0070  
               ?_EUSART_SetOverrunErrorHandler 00A0                     _EUSART_FramingErrorHandler 0056  
                      __end_of_selectSomething 0556                                       ??___lmul 00A8  
                       _EUSART_SetErrorHandler 0E9A                                    _CCPTMRSbits 029E  
                                _selectCurrent 0FAE                                    __pdataBANK0 0058  
                                  __pdataBANK1 00CF                                    __pdataBANK2 0141  
                           i1___aldiv@dividend 0024                     __end_of_EXT_INT_Initialize 0EF1  
                                     ??_printf 00A4                                  ??_setLEDColor 00A2  
                                  __pbssCOMMON 007D                                      ___latbits 0001  
                     ??_process_remote_command 00CB                                       ?_INT_ISR 0070  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00A0  
                     __size_of_TMR2_Initialize 0008                          __size_of_INT_CallBack 000B  
                             i1___lmul@product 0078                     __size_of_EUSART_Initialize 0024  
                                 _currentIndex 00E1                              ??_OPA1_Initialize 00A0  
                                 _currentValue 0141                             i1___aldiv@quotient 002A  
                                    __pnvBANK0 004E                            __size_of_lowBattery 002D  
                       _PIN_MANAGER_Initialize 06A2                        __end_of_battery_voltage 07EC  
                ??_INT_DefaultInterruptHandler 0070                                       ?___aldiv 00AC  
             __end_of_TMR4_SetInterruptHandler 0EC7                                 ?_selectCurrent 0070  
                                     ?___awdiv 00A0                                       ?___lldiv 00AC  
                            i1___awdiv@divisor 0070                                       _DAC1CON0 0118  
                                     _DAC1CON1 0119                              i1___awdiv@counter 0075  
                 ??_INTERRUPT_InterruptManager 007D                            __size_of_setCurrent 009C  
                            ??_OPA2_Initialize 00A0                               ?_selectFrequency 0070  
                                 _INT_CallBack 0EDB                                       _BAUD1CON 019F  
                                     ?_initLED 0070                                    ??i1___aldiv 0079  
                     __size_of_TMR4_Initialize 0012                                      _frequency 0046  
                                  ??i1___awdiv 0074                                    ??i1___lldiv 007C  
                                     ?_startUp 0070                            __end_of_setLEDColor 0F4C  
                                    _microamps 0042                                 __size_of_putch 0006  
                              ___aldiv@divisor 00AC                              ??_TMR0_Initialize 00A0  
                              ___aldiv@counter 00B5         EUSART_SetErrorHandler@interruptHandler 00A0  
                                     _LED_blue 00E5                                      clear_ram0 0E7E  
                                     _PIE2bits 0092                              _eusartRxLastError 0047  
                        __size_of_setFrequency 0044            __size_of_INTERRUPT_InterruptManager 001C  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 00A2  
                                     _PIR2bits 0012                               ?_selectSomething 0070  
                               setLEDColor@red 00A3              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR4_ISR 0EF1                              ??_PIN_MANAGER_IOC 0070  
                                ?i1_setCurrent 0030                                     _ADCON0bits 009D  
                                     i1___lmul 0737                                 _DAC_Initialize 0E72  
         __size_of_INT_DefaultInterruptHandler 0067                __size_of_process_remote_command 0108  
                             __size_of_INT_ISR 0004                              ___lmul@multiplier 00A0  
                                 _setFrequency 05A7                              ??_TMR2_Initialize 00A0  
                              ??_selectCurrent 00A9                               ?_battery_voltage 00BB  
                      ??_OSCILLATOR_Initialize 00A0                            _EUSART_ErrorHandler 0052  
                               ??i1_setCurrent 0034                               __size_of___aldiv 0082  
                             __size_of___awdiv 0052                         __end_of_DAC_Initialize 0E78  
                             __size_of___lldiv 0053                       _TMR4_SetInterruptHandler 0EBE  
                                 ??_lowBattery 00A4                                    _currentIsOn 0058  
                                  _setLEDColor 0F35                             setCurrent@DACValue 00C9  
                             __size_of_initLED 0044                                       __ptext10 0FAE  
                                     __ptext11 0F4C                                       __ptext20 0E6E  
                                     __ptext12 0E78                                       __ptext21 0F0D  
                                     __ptext13 0ED1                                       __ptext30 0EB5  
                                     __ptext22 0EBE                                       __ptext14 07C1  
                                     __ptext31 0F8A                                       __ptext23 0E92  
                                     __ptext15 02A2                                       __ptext40 0737  
                                     __ptext32 0EAC                                       __ptext24 0EC7  
                                     __ptext16 0794                                       __ptext41 0460  
                                     __ptext33 0EA3                                       __ptext25 06A2  
                                     __ptext17 0F35                                       __ptext42 0556  
                                     __ptext34 0E9A                                       __ptext26 0E8A  
                                     __ptext18 05EB                                       __ptext43 0766  
                                     __ptext35 0E72                                       __ptext27 0E6A  
                                     __ptext19 0F69                                       __ptext44 0324  
                                     __ptext28 0E66                                       __ptext45 0002  
                                     __ptext37 0EF1                                       __ptext29 0EE6  
                                     __ptext46 0E62                                       __ptext38 066C  
                                     __ptext47 0EDB                                       __ptext39 0162  
                                     __ptext48 03A6                               __size_of_startUp 003D  
                                 ??_setCurrent 00C1                                 _interfaceState 00E3  
                            ??_TMR4_Initialize 00A2                                  __size_of_main 0032  
                      ?_EUSART_SetErrorHandler 00A0                         _process_remote_command 005A  
                                   _RC1STAbits 019D                             __end_of_lowBattery 07C1  
EUSART_SetOverrunErrorHandler@interruptHandler 00A0                            setFrequency@pr4_val 00BE  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 0020  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0EAC  
       __size_of_EUSART_SetFramingErrorHandler 0009                  _EUSART_SetFramingErrorHandler 0EA3  
                              ?_DAC_Initialize 0070                             __end_of_setCurrent 02A2  
                                   _INTCONbits 000B                INT_DefaultInterruptHandler@time 0071  
                                  _PWM3DCLbits 0617                                _OPA1_Initialize 0E66  
                                  _PWM4DCLbits 061A                                     _FVRCONbits 0117  
                         _INT_InterruptHandler 0050                                    _PWM3CONbits 0619  
                                  _PWM4CONbits 061C                             _EXT_INT_Initialize 0EE6  
                      __size_of_WDT_Initialize 0004                                       intlevel1 0000  
                             ___lldiv@dividend 00B0                        ?_PIN_MANAGER_Initialize 0070  
                   process_remote_command@code 00CD                 __end_of_EUSART_SetErrorHandler 0EA3  
                          ?_EXT_INT_Initialize 0070                                _OPA2_Initialize 0E6A  
                                     printf@ap 00A7  EUSART_SetFramingErrorHandler@interruptHandler 00A0  
                     ?_INT_SetInterruptHandler 00A0                                       startUp@i 00A6  
                                __pstringtext1 07EC                                  __pstringtext2 0801  
                                __pstringtext3 0814                                  __pstringtext4 0000  
                         ??_EXT_INT_Initialize 00A2                                     _OPTION_REG 0095  
                             setLEDColor@green 00A0                               ___lldiv@quotient 00B5  
                              _TMR0_Initialize 0EC7                            setCurrent@microamps 00BD  
                                 ___aldiv@sign 00B6                                     _TX1STAbits 019E  
                     setFrequency@frequency_hz 00BB                             EUSART_Write@txData 00A0  
                         __end_ofi1_setCurrent 0206                 __end_of_PIN_MANAGER_Initialize 06D5  
                              _PIN_MANAGER_IOC 0002  
