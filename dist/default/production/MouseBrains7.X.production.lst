

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Aug  2 15:40:28 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16LF1708
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	_HEF_persistent_state_text,global,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text23,local,class=CODE,merge=1,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2
    55                           	psect	text31,local,class=CODE,merge=1,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2
    61                           	psect	text37,local,class=CODE,merge=1,delta=2
    62                           	psect	text38,local,class=CODE,merge=1,delta=2
    63                           	psect	text39,local,class=CODE,merge=1,delta=2
    64                           	psect	text40,local,class=CODE,merge=1,delta=2
    65                           	psect	text41,local,class=CODE,merge=1,delta=2
    66                           	psect	text42,local,class=CODE,merge=1,delta=2
    67                           	psect	text43,local,class=CODE,merge=1,delta=2
    68                           	psect	intentry,global,class=CODE,delta=2
    69                           	psect	text45,local,class=CODE,merge=1,delta=2
    70                           	psect	text46,local,class=CODE,merge=1,delta=2
    71                           	psect	text47,local,class=CODE,merge=1,delta=2
    72                           	psect	text48,local,class=CODE,merge=1,delta=2
    73                           	psect	text49,local,class=CODE,merge=1,delta=2
    74                           	psect	text50,local,class=CODE,merge=1,delta=2
    75                           	psect	text51,local,class=CODE,merge=1,delta=2
    76                           	psect	text52,local,class=CODE,merge=1,delta=2
    77                           	psect	text53,local,class=CODE,merge=1,delta=2
    78                           	dabs	1,0x7E,2
    79  0000                     
    80                           ; Version 2.10
    81                           ; Generated 31/07/2019 GMT
    82                           ; 
    83                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC16LF1708 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0095                     	;# 
   148  0096                     	;# 
   149  0097                     	;# 
   150  0098                     	;# 
   151  0099                     	;# 
   152  009A                     	;# 
   153  009B                     	;# 
   154  009B                     	;# 
   155  009C                     	;# 
   156  009D                     	;# 
   157  009E                     	;# 
   158  009F                     	;# 
   159  010C                     	;# 
   160  010D                     	;# 
   161  010E                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  011C                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  018E                     	;# 
   175  0191                     	;# 
   176  0191                     	;# 
   177  0192                     	;# 
   178  0193                     	;# 
   179  0193                     	;# 
   180  0194                     	;# 
   181  0195                     	;# 
   182  0196                     	;# 
   183  0199                     	;# 
   184  0199                     	;# 
   185  0199                     	;# 
   186  019A                     	;# 
   187  019A                     	;# 
   188  019A                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019C                     	;# 
   197  019D                     	;# 
   198  019D                     	;# 
   199  019D                     	;# 
   200  019E                     	;# 
   201  019E                     	;# 
   202  019E                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  020D                     	;# 
   210  020E                     	;# 
   211  0211                     	;# 
   212  0211                     	;# 
   213  0212                     	;# 
   214  0212                     	;# 
   215  0213                     	;# 
   216  0213                     	;# 
   217  0214                     	;# 
   218  0214                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  028C                     	;# 
   228  028D                     	;# 
   229  028E                     	;# 
   230  0291                     	;# 
   231  0291                     	;# 
   232  0292                     	;# 
   233  0293                     	;# 
   234  0293                     	;# 
   235  0298                     	;# 
   236  0298                     	;# 
   237  0299                     	;# 
   238  029A                     	;# 
   239  029A                     	;# 
   240  029E                     	;# 
   241  030C                     	;# 
   242  030D                     	;# 
   243  030E                     	;# 
   244  038C                     	;# 
   245  038D                     	;# 
   246  038E                     	;# 
   247  0391                     	;# 
   248  0392                     	;# 
   249  0393                     	;# 
   250  0394                     	;# 
   251  0395                     	;# 
   252  0396                     	;# 
   253  0397                     	;# 
   254  0398                     	;# 
   255  0399                     	;# 
   256  0415                     	;# 
   257  0416                     	;# 
   258  0417                     	;# 
   259  041C                     	;# 
   260  041D                     	;# 
   261  041E                     	;# 
   262  0511                     	;# 
   263  0515                     	;# 
   264  0617                     	;# 
   265  0618                     	;# 
   266  0619                     	;# 
   267  0619                     	;# 
   268  061A                     	;# 
   269  061B                     	;# 
   270  061C                     	;# 
   271  061C                     	;# 
   272  0691                     	;# 
   273  0692                     	;# 
   274  0693                     	;# 
   275  0694                     	;# 
   276  0695                     	;# 
   277  0696                     	;# 
   278  0697                     	;# 
   279  0698                     	;# 
   280  0699                     	;# 
   281  069A                     	;# 
   282  069B                     	;# 
   283  069C                     	;# 
   284  069D                     	;# 
   285  069E                     	;# 
   286  069F                     	;# 
   287  0E0F                     	;# 
   288  0E10                     	;# 
   289  0E11                     	;# 
   290  0E12                     	;# 
   291  0E13                     	;# 
   292  0E14                     	;# 
   293  0E15                     	;# 
   294  0E17                     	;# 
   295  0E20                     	;# 
   296  0E21                     	;# 
   297  0E22                     	;# 
   298  0E24                     	;# 
   299  0E25                     	;# 
   300  0E28                     	;# 
   301  0E29                     	;# 
   302  0E2A                     	;# 
   303  0E2B                     	;# 
   304  0E90                     	;# 
   305  0E91                     	;# 
   306  0E92                     	;# 
   307  0E94                     	;# 
   308  0E95                     	;# 
   309  0E9C                     	;# 
   310  0E9D                     	;# 
   311  0E9E                     	;# 
   312  0E9F                     	;# 
   313  0EA0                     	;# 
   314  0EA1                     	;# 
   315  0EA2                     	;# 
   316  0EA3                     	;# 
   317  0EA4                     	;# 
   318  0EA5                     	;# 
   319  0EA6                     	;# 
   320  0EA7                     	;# 
   321  0F0F                     	;# 
   322  0F10                     	;# 
   323  0F11                     	;# 
   324  0F12                     	;# 
   325  0F13                     	;# 
   326  0F14                     	;# 
   327  0F15                     	;# 
   328  0F16                     	;# 
   329  0F17                     	;# 
   330  0F18                     	;# 
   331  0F19                     	;# 
   332  0F1A                     	;# 
   333  0F1B                     	;# 
   334  0F1C                     	;# 
   335  0F1D                     	;# 
   336  0F1E                     	;# 
   337  0F1F                     	;# 
   338  0F20                     	;# 
   339  0F21                     	;# 
   340  0F22                     	;# 
   341  0F23                     	;# 
   342  0F24                     	;# 
   343  0F25                     	;# 
   344  0F26                     	;# 
   345  0F27                     	;# 
   346  0F28                     	;# 
   347  0F29                     	;# 
   348  0F2A                     	;# 
   349  0F2B                     	;# 
   350  0F2C                     	;# 
   351  0F2D                     	;# 
   352  0FE4                     	;# 
   353  0FE5                     	;# 
   354  0FE6                     	;# 
   355  0FE7                     	;# 
   356  0FE8                     	;# 
   357  0FE9                     	;# 
   358  0FEA                     	;# 
   359  0FEB                     	;# 
   360  0FED                     	;# 
   361  0FEE                     	;# 
   362  0FEF                     	;# 
   363  0000                     	;# 
   364  0001                     	;# 
   365  0002                     	;# 
   366  0003                     	;# 
   367  0004                     	;# 
   368  0005                     	;# 
   369  0006                     	;# 
   370  0007                     	;# 
   371  0008                     	;# 
   372  0009                     	;# 
   373  000A                     	;# 
   374  000B                     	;# 
   375  000C                     	;# 
   376  000D                     	;# 
   377  000E                     	;# 
   378  0011                     	;# 
   379  0012                     	;# 
   380  0013                     	;# 
   381  0015                     	;# 
   382  0016                     	;# 
   383  0016                     	;# 
   384  0017                     	;# 
   385  0018                     	;# 
   386  0019                     	;# 
   387  001A                     	;# 
   388  001B                     	;# 
   389  001C                     	;# 
   390  008C                     	;# 
   391  008D                     	;# 
   392  008E                     	;# 
   393  0091                     	;# 
   394  0092                     	;# 
   395  0093                     	;# 
   396  0095                     	;# 
   397  0096                     	;# 
   398  0097                     	;# 
   399  0098                     	;# 
   400  0099                     	;# 
   401  009A                     	;# 
   402  009B                     	;# 
   403  009B                     	;# 
   404  009C                     	;# 
   405  009D                     	;# 
   406  009E                     	;# 
   407  009F                     	;# 
   408  010C                     	;# 
   409  010D                     	;# 
   410  010E                     	;# 
   411  0111                     	;# 
   412  0112                     	;# 
   413  0113                     	;# 
   414  0114                     	;# 
   415  0115                     	;# 
   416  0116                     	;# 
   417  0117                     	;# 
   418  0118                     	;# 
   419  0119                     	;# 
   420  011C                     	;# 
   421  018C                     	;# 
   422  018D                     	;# 
   423  018E                     	;# 
   424  0191                     	;# 
   425  0191                     	;# 
   426  0192                     	;# 
   427  0193                     	;# 
   428  0193                     	;# 
   429  0194                     	;# 
   430  0195                     	;# 
   431  0196                     	;# 
   432  0199                     	;# 
   433  0199                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019A                     	;# 
   437  019A                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019C                     	;# 
   444  019C                     	;# 
   445  019C                     	;# 
   446  019D                     	;# 
   447  019D                     	;# 
   448  019D                     	;# 
   449  019E                     	;# 
   450  019E                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  019F                     	;# 
   454  019F                     	;# 
   455  019F                     	;# 
   456  019F                     	;# 
   457  020C                     	;# 
   458  020D                     	;# 
   459  020E                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  028C                     	;# 
   477  028D                     	;# 
   478  028E                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0293                     	;# 
   484  0298                     	;# 
   485  0298                     	;# 
   486  0299                     	;# 
   487  029A                     	;# 
   488  029A                     	;# 
   489  029E                     	;# 
   490  030C                     	;# 
   491  030D                     	;# 
   492  030E                     	;# 
   493  038C                     	;# 
   494  038D                     	;# 
   495  038E                     	;# 
   496  0391                     	;# 
   497  0392                     	;# 
   498  0393                     	;# 
   499  0394                     	;# 
   500  0395                     	;# 
   501  0396                     	;# 
   502  0397                     	;# 
   503  0398                     	;# 
   504  0399                     	;# 
   505  0415                     	;# 
   506  0416                     	;# 
   507  0417                     	;# 
   508  041C                     	;# 
   509  041D                     	;# 
   510  041E                     	;# 
   511  0511                     	;# 
   512  0515                     	;# 
   513  0617                     	;# 
   514  0618                     	;# 
   515  0619                     	;# 
   516  0619                     	;# 
   517  061A                     	;# 
   518  061B                     	;# 
   519  061C                     	;# 
   520  061C                     	;# 
   521  0691                     	;# 
   522  0692                     	;# 
   523  0693                     	;# 
   524  0694                     	;# 
   525  0695                     	;# 
   526  0696                     	;# 
   527  0697                     	;# 
   528  0698                     	;# 
   529  0699                     	;# 
   530  069A                     	;# 
   531  069B                     	;# 
   532  069C                     	;# 
   533  069D                     	;# 
   534  069E                     	;# 
   535  069F                     	;# 
   536  0E0F                     	;# 
   537  0E10                     	;# 
   538  0E11                     	;# 
   539  0E12                     	;# 
   540  0E13                     	;# 
   541  0E14                     	;# 
   542  0E15                     	;# 
   543  0E17                     	;# 
   544  0E20                     	;# 
   545  0E21                     	;# 
   546  0E22                     	;# 
   547  0E24                     	;# 
   548  0E25                     	;# 
   549  0E28                     	;# 
   550  0E29                     	;# 
   551  0E2A                     	;# 
   552  0E2B                     	;# 
   553  0E90                     	;# 
   554  0E91                     	;# 
   555  0E92                     	;# 
   556  0E94                     	;# 
   557  0E95                     	;# 
   558  0E9C                     	;# 
   559  0E9D                     	;# 
   560  0E9E                     	;# 
   561  0E9F                     	;# 
   562  0EA0                     	;# 
   563  0EA1                     	;# 
   564  0EA2                     	;# 
   565  0EA3                     	;# 
   566  0EA4                     	;# 
   567  0EA5                     	;# 
   568  0EA6                     	;# 
   569  0EA7                     	;# 
   570  0F0F                     	;# 
   571  0F10                     	;# 
   572  0F11                     	;# 
   573  0F12                     	;# 
   574  0F13                     	;# 
   575  0F14                     	;# 
   576  0F15                     	;# 
   577  0F16                     	;# 
   578  0F17                     	;# 
   579  0F18                     	;# 
   580  0F19                     	;# 
   581  0F1A                     	;# 
   582  0F1B                     	;# 
   583  0F1C                     	;# 
   584  0F1D                     	;# 
   585  0F1E                     	;# 
   586  0F1F                     	;# 
   587  0F20                     	;# 
   588  0F21                     	;# 
   589  0F22                     	;# 
   590  0F23                     	;# 
   591  0F24                     	;# 
   592  0F25                     	;# 
   593  0F26                     	;# 
   594  0F27                     	;# 
   595  0F28                     	;# 
   596  0F29                     	;# 
   597  0F2A                     	;# 
   598  0F2B                     	;# 
   599  0F2C                     	;# 
   600  0F2D                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0013                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0093                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0098                     	;# 
   649  0099                     	;# 
   650  009A                     	;# 
   651  009B                     	;# 
   652  009B                     	;# 
   653  009C                     	;# 
   654  009D                     	;# 
   655  009E                     	;# 
   656  009F                     	;# 
   657  010C                     	;# 
   658  010D                     	;# 
   659  010E                     	;# 
   660  0111                     	;# 
   661  0112                     	;# 
   662  0113                     	;# 
   663  0114                     	;# 
   664  0115                     	;# 
   665  0116                     	;# 
   666  0117                     	;# 
   667  0118                     	;# 
   668  0119                     	;# 
   669  011C                     	;# 
   670  018C                     	;# 
   671  018D                     	;# 
   672  018E                     	;# 
   673  0191                     	;# 
   674  0191                     	;# 
   675  0192                     	;# 
   676  0193                     	;# 
   677  0193                     	;# 
   678  0194                     	;# 
   679  0195                     	;# 
   680  0196                     	;# 
   681  0199                     	;# 
   682  0199                     	;# 
   683  0199                     	;# 
   684  019A                     	;# 
   685  019A                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019B                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019C                     	;# 
   693  019C                     	;# 
   694  019C                     	;# 
   695  019D                     	;# 
   696  019D                     	;# 
   697  019D                     	;# 
   698  019E                     	;# 
   699  019E                     	;# 
   700  019E                     	;# 
   701  019F                     	;# 
   702  019F                     	;# 
   703  019F                     	;# 
   704  019F                     	;# 
   705  019F                     	;# 
   706  020C                     	;# 
   707  020D                     	;# 
   708  020E                     	;# 
   709  0211                     	;# 
   710  0211                     	;# 
   711  0212                     	;# 
   712  0212                     	;# 
   713  0213                     	;# 
   714  0213                     	;# 
   715  0214                     	;# 
   716  0214                     	;# 
   717  0215                     	;# 
   718  0215                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0216                     	;# 
   722  0216                     	;# 
   723  0217                     	;# 
   724  0217                     	;# 
   725  028C                     	;# 
   726  028D                     	;# 
   727  028E                     	;# 
   728  0291                     	;# 
   729  0291                     	;# 
   730  0292                     	;# 
   731  0293                     	;# 
   732  0293                     	;# 
   733  0298                     	;# 
   734  0298                     	;# 
   735  0299                     	;# 
   736  029A                     	;# 
   737  029A                     	;# 
   738  029E                     	;# 
   739  030C                     	;# 
   740  030D                     	;# 
   741  030E                     	;# 
   742  038C                     	;# 
   743  038D                     	;# 
   744  038E                     	;# 
   745  0391                     	;# 
   746  0392                     	;# 
   747  0393                     	;# 
   748  0394                     	;# 
   749  0395                     	;# 
   750  0396                     	;# 
   751  0397                     	;# 
   752  0398                     	;# 
   753  0399                     	;# 
   754  0415                     	;# 
   755  0416                     	;# 
   756  0417                     	;# 
   757  041C                     	;# 
   758  041D                     	;# 
   759  041E                     	;# 
   760  0511                     	;# 
   761  0515                     	;# 
   762  0617                     	;# 
   763  0618                     	;# 
   764  0619                     	;# 
   765  0619                     	;# 
   766  061A                     	;# 
   767  061B                     	;# 
   768  061C                     	;# 
   769  061C                     	;# 
   770  0691                     	;# 
   771  0692                     	;# 
   772  0693                     	;# 
   773  0694                     	;# 
   774  0695                     	;# 
   775  0696                     	;# 
   776  0697                     	;# 
   777  0698                     	;# 
   778  0699                     	;# 
   779  069A                     	;# 
   780  069B                     	;# 
   781  069C                     	;# 
   782  069D                     	;# 
   783  069E                     	;# 
   784  069F                     	;# 
   785  0E0F                     	;# 
   786  0E10                     	;# 
   787  0E11                     	;# 
   788  0E12                     	;# 
   789  0E13                     	;# 
   790  0E14                     	;# 
   791  0E15                     	;# 
   792  0E17                     	;# 
   793  0E20                     	;# 
   794  0E21                     	;# 
   795  0E22                     	;# 
   796  0E24                     	;# 
   797  0E25                     	;# 
   798  0E28                     	;# 
   799  0E29                     	;# 
   800  0E2A                     	;# 
   801  0E2B                     	;# 
   802  0E90                     	;# 
   803  0E91                     	;# 
   804  0E92                     	;# 
   805  0E94                     	;# 
   806  0E95                     	;# 
   807  0E9C                     	;# 
   808  0E9D                     	;# 
   809  0E9E                     	;# 
   810  0E9F                     	;# 
   811  0EA0                     	;# 
   812  0EA1                     	;# 
   813  0EA2                     	;# 
   814  0EA3                     	;# 
   815  0EA4                     	;# 
   816  0EA5                     	;# 
   817  0EA6                     	;# 
   818  0EA7                     	;# 
   819  0F0F                     	;# 
   820  0F10                     	;# 
   821  0F11                     	;# 
   822  0F12                     	;# 
   823  0F13                     	;# 
   824  0F14                     	;# 
   825  0F15                     	;# 
   826  0F16                     	;# 
   827  0F17                     	;# 
   828  0F18                     	;# 
   829  0F19                     	;# 
   830  0F1A                     	;# 
   831  0F1B                     	;# 
   832  0F1C                     	;# 
   833  0F1D                     	;# 
   834  0F1E                     	;# 
   835  0F1F                     	;# 
   836  0F20                     	;# 
   837  0F21                     	;# 
   838  0F22                     	;# 
   839  0F23                     	;# 
   840  0F24                     	;# 
   841  0F25                     	;# 
   842  0F26                     	;# 
   843  0F27                     	;# 
   844  0F28                     	;# 
   845  0F29                     	;# 
   846  0F2A                     	;# 
   847  0F2B                     	;# 
   848  0F2C                     	;# 
   849  0F2D                     	;# 
   850  0FE4                     	;# 
   851  0FE5                     	;# 
   852  0FE6                     	;# 
   853  0FE7                     	;# 
   854  0FE8                     	;# 
   855  0FE9                     	;# 
   856  0FEA                     	;# 
   857  0FEB                     	;# 
   858  0FED                     	;# 
   859  0FEE                     	;# 
   860  0FEF                     	;# 
   861  0000                     	;# 
   862  0001                     	;# 
   863  0002                     	;# 
   864  0003                     	;# 
   865  0004                     	;# 
   866  0005                     	;# 
   867  0006                     	;# 
   868  0007                     	;# 
   869  0008                     	;# 
   870  0009                     	;# 
   871  000A                     	;# 
   872  000B                     	;# 
   873  000C                     	;# 
   874  000D                     	;# 
   875  000E                     	;# 
   876  0011                     	;# 
   877  0012                     	;# 
   878  0013                     	;# 
   879  0015                     	;# 
   880  0016                     	;# 
   881  0016                     	;# 
   882  0017                     	;# 
   883  0018                     	;# 
   884  0019                     	;# 
   885  001A                     	;# 
   886  001B                     	;# 
   887  001C                     	;# 
   888  008C                     	;# 
   889  008D                     	;# 
   890  008E                     	;# 
   891  0091                     	;# 
   892  0092                     	;# 
   893  0093                     	;# 
   894  0095                     	;# 
   895  0096                     	;# 
   896  0097                     	;# 
   897  0098                     	;# 
   898  0099                     	;# 
   899  009A                     	;# 
   900  009B                     	;# 
   901  009B                     	;# 
   902  009C                     	;# 
   903  009D                     	;# 
   904  009E                     	;# 
   905  009F                     	;# 
   906  010C                     	;# 
   907  010D                     	;# 
   908  010E                     	;# 
   909  0111                     	;# 
   910  0112                     	;# 
   911  0113                     	;# 
   912  0114                     	;# 
   913  0115                     	;# 
   914  0116                     	;# 
   915  0117                     	;# 
   916  0118                     	;# 
   917  0119                     	;# 
   918  011C                     	;# 
   919  018C                     	;# 
   920  018D                     	;# 
   921  018E                     	;# 
   922  0191                     	;# 
   923  0191                     	;# 
   924  0192                     	;# 
   925  0193                     	;# 
   926  0193                     	;# 
   927  0194                     	;# 
   928  0195                     	;# 
   929  0196                     	;# 
   930  0199                     	;# 
   931  0199                     	;# 
   932  0199                     	;# 
   933  019A                     	;# 
   934  019A                     	;# 
   935  019A                     	;# 
   936  019B                     	;# 
   937  019B                     	;# 
   938  019B                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019C                     	;# 
   942  019C                     	;# 
   943  019C                     	;# 
   944  019D                     	;# 
   945  019D                     	;# 
   946  019D                     	;# 
   947  019E                     	;# 
   948  019E                     	;# 
   949  019E                     	;# 
   950  019F                     	;# 
   951  019F                     	;# 
   952  019F                     	;# 
   953  019F                     	;# 
   954  019F                     	;# 
   955  020C                     	;# 
   956  020D                     	;# 
   957  020E                     	;# 
   958  0211                     	;# 
   959  0211                     	;# 
   960  0212                     	;# 
   961  0212                     	;# 
   962  0213                     	;# 
   963  0213                     	;# 
   964  0214                     	;# 
   965  0214                     	;# 
   966  0215                     	;# 
   967  0215                     	;# 
   968  0215                     	;# 
   969  0215                     	;# 
   970  0216                     	;# 
   971  0216                     	;# 
   972  0217                     	;# 
   973  0217                     	;# 
   974  028C                     	;# 
   975  028D                     	;# 
   976  028E                     	;# 
   977  0291                     	;# 
   978  0291                     	;# 
   979  0292                     	;# 
   980  0293                     	;# 
   981  0293                     	;# 
   982  0298                     	;# 
   983  0298                     	;# 
   984  0299                     	;# 
   985  029A                     	;# 
   986  029A                     	;# 
   987  029E                     	;# 
   988  030C                     	;# 
   989  030D                     	;# 
   990  030E                     	;# 
   991  038C                     	;# 
   992  038D                     	;# 
   993  038E                     	;# 
   994  0391                     	;# 
   995  0392                     	;# 
   996  0393                     	;# 
   997  0394                     	;# 
   998  0395                     	;# 
   999  0396                     	;# 
  1000  0397                     	;# 
  1001  0398                     	;# 
  1002  0399                     	;# 
  1003  0415                     	;# 
  1004  0416                     	;# 
  1005  0417                     	;# 
  1006  041C                     	;# 
  1007  041D                     	;# 
  1008  041E                     	;# 
  1009  0511                     	;# 
  1010  0515                     	;# 
  1011  0617                     	;# 
  1012  0618                     	;# 
  1013  0619                     	;# 
  1014  0619                     	;# 
  1015  061A                     	;# 
  1016  061B                     	;# 
  1017  061C                     	;# 
  1018  061C                     	;# 
  1019  0691                     	;# 
  1020  0692                     	;# 
  1021  0693                     	;# 
  1022  0694                     	;# 
  1023  0695                     	;# 
  1024  0696                     	;# 
  1025  0697                     	;# 
  1026  0698                     	;# 
  1027  0699                     	;# 
  1028  069A                     	;# 
  1029  069B                     	;# 
  1030  069C                     	;# 
  1031  069D                     	;# 
  1032  069E                     	;# 
  1033  069F                     	;# 
  1034  0E0F                     	;# 
  1035  0E10                     	;# 
  1036  0E11                     	;# 
  1037  0E12                     	;# 
  1038  0E13                     	;# 
  1039  0E14                     	;# 
  1040  0E15                     	;# 
  1041  0E17                     	;# 
  1042  0E20                     	;# 
  1043  0E21                     	;# 
  1044  0E22                     	;# 
  1045  0E24                     	;# 
  1046  0E25                     	;# 
  1047  0E28                     	;# 
  1048  0E29                     	;# 
  1049  0E2A                     	;# 
  1050  0E2B                     	;# 
  1051  0E90                     	;# 
  1052  0E91                     	;# 
  1053  0E92                     	;# 
  1054  0E94                     	;# 
  1055  0E95                     	;# 
  1056  0E9C                     	;# 
  1057  0E9D                     	;# 
  1058  0E9E                     	;# 
  1059  0E9F                     	;# 
  1060  0EA0                     	;# 
  1061  0EA1                     	;# 
  1062  0EA2                     	;# 
  1063  0EA3                     	;# 
  1064  0EA4                     	;# 
  1065  0EA5                     	;# 
  1066  0EA6                     	;# 
  1067  0EA7                     	;# 
  1068  0F0F                     	;# 
  1069  0F10                     	;# 
  1070  0F11                     	;# 
  1071  0F12                     	;# 
  1072  0F13                     	;# 
  1073  0F14                     	;# 
  1074  0F15                     	;# 
  1075  0F16                     	;# 
  1076  0F17                     	;# 
  1077  0F18                     	;# 
  1078  0F19                     	;# 
  1079  0F1A                     	;# 
  1080  0F1B                     	;# 
  1081  0F1C                     	;# 
  1082  0F1D                     	;# 
  1083  0F1E                     	;# 
  1084  0F1F                     	;# 
  1085  0F20                     	;# 
  1086  0F21                     	;# 
  1087  0F22                     	;# 
  1088  0F23                     	;# 
  1089  0F24                     	;# 
  1090  0F25                     	;# 
  1091  0F26                     	;# 
  1092  0F27                     	;# 
  1093  0F28                     	;# 
  1094  0F29                     	;# 
  1095  0F2A                     	;# 
  1096  0F2B                     	;# 
  1097  0F2C                     	;# 
  1098  0F2D                     	;# 
  1099  0FE4                     	;# 
  1100  0FE5                     	;# 
  1101  0FE6                     	;# 
  1102  0FE7                     	;# 
  1103  0FE8                     	;# 
  1104  0FE9                     	;# 
  1105  0FEA                     	;# 
  1106  0FEB                     	;# 
  1107  0FED                     	;# 
  1108  0FEE                     	;# 
  1109  0FEF                     	;# 
  1110  0000                     	;# 
  1111  0001                     	;# 
  1112  0002                     	;# 
  1113  0003                     	;# 
  1114  0004                     	;# 
  1115  0005                     	;# 
  1116  0006                     	;# 
  1117  0007                     	;# 
  1118  0008                     	;# 
  1119  0009                     	;# 
  1120  000A                     	;# 
  1121  000B                     	;# 
  1122  000C                     	;# 
  1123  000D                     	;# 
  1124  000E                     	;# 
  1125  0011                     	;# 
  1126  0012                     	;# 
  1127  0013                     	;# 
  1128  0015                     	;# 
  1129  0016                     	;# 
  1130  0016                     	;# 
  1131  0017                     	;# 
  1132  0018                     	;# 
  1133  0019                     	;# 
  1134  001A                     	;# 
  1135  001B                     	;# 
  1136  001C                     	;# 
  1137  008C                     	;# 
  1138  008D                     	;# 
  1139  008E                     	;# 
  1140  0091                     	;# 
  1141  0092                     	;# 
  1142  0093                     	;# 
  1143  0095                     	;# 
  1144  0096                     	;# 
  1145  0097                     	;# 
  1146  0098                     	;# 
  1147  0099                     	;# 
  1148  009A                     	;# 
  1149  009B                     	;# 
  1150  009B                     	;# 
  1151  009C                     	;# 
  1152  009D                     	;# 
  1153  009E                     	;# 
  1154  009F                     	;# 
  1155  010C                     	;# 
  1156  010D                     	;# 
  1157  010E                     	;# 
  1158  0111                     	;# 
  1159  0112                     	;# 
  1160  0113                     	;# 
  1161  0114                     	;# 
  1162  0115                     	;# 
  1163  0116                     	;# 
  1164  0117                     	;# 
  1165  0118                     	;# 
  1166  0119                     	;# 
  1167  011C                     	;# 
  1168  018C                     	;# 
  1169  018D                     	;# 
  1170  018E                     	;# 
  1171  0191                     	;# 
  1172  0191                     	;# 
  1173  0192                     	;# 
  1174  0193                     	;# 
  1175  0193                     	;# 
  1176  0194                     	;# 
  1177  0195                     	;# 
  1178  0196                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  0199                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019C                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019D                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  019F                     	;# 
  1204  020C                     	;# 
  1205  020D                     	;# 
  1206  020E                     	;# 
  1207  0211                     	;# 
  1208  0211                     	;# 
  1209  0212                     	;# 
  1210  0212                     	;# 
  1211  0213                     	;# 
  1212  0213                     	;# 
  1213  0214                     	;# 
  1214  0214                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0215                     	;# 
  1218  0215                     	;# 
  1219  0216                     	;# 
  1220  0216                     	;# 
  1221  0217                     	;# 
  1222  0217                     	;# 
  1223  028C                     	;# 
  1224  028D                     	;# 
  1225  028E                     	;# 
  1226  0291                     	;# 
  1227  0291                     	;# 
  1228  0292                     	;# 
  1229  0293                     	;# 
  1230  0293                     	;# 
  1231  0298                     	;# 
  1232  0298                     	;# 
  1233  0299                     	;# 
  1234  029A                     	;# 
  1235  029A                     	;# 
  1236  029E                     	;# 
  1237  030C                     	;# 
  1238  030D                     	;# 
  1239  030E                     	;# 
  1240  038C                     	;# 
  1241  038D                     	;# 
  1242  038E                     	;# 
  1243  0391                     	;# 
  1244  0392                     	;# 
  1245  0393                     	;# 
  1246  0394                     	;# 
  1247  0395                     	;# 
  1248  0396                     	;# 
  1249  0397                     	;# 
  1250  0398                     	;# 
  1251  0399                     	;# 
  1252  0415                     	;# 
  1253  0416                     	;# 
  1254  0417                     	;# 
  1255  041C                     	;# 
  1256  041D                     	;# 
  1257  041E                     	;# 
  1258  0511                     	;# 
  1259  0515                     	;# 
  1260  0617                     	;# 
  1261  0618                     	;# 
  1262  0619                     	;# 
  1263  0619                     	;# 
  1264  061A                     	;# 
  1265  061B                     	;# 
  1266  061C                     	;# 
  1267  061C                     	;# 
  1268  0691                     	;# 
  1269  0692                     	;# 
  1270  0693                     	;# 
  1271  0694                     	;# 
  1272  0695                     	;# 
  1273  0696                     	;# 
  1274  0697                     	;# 
  1275  0698                     	;# 
  1276  0699                     	;# 
  1277  069A                     	;# 
  1278  069B                     	;# 
  1279  069C                     	;# 
  1280  069D                     	;# 
  1281  069E                     	;# 
  1282  069F                     	;# 
  1283  0E0F                     	;# 
  1284  0E10                     	;# 
  1285  0E11                     	;# 
  1286  0E12                     	;# 
  1287  0E13                     	;# 
  1288  0E14                     	;# 
  1289  0E15                     	;# 
  1290  0E17                     	;# 
  1291  0E20                     	;# 
  1292  0E21                     	;# 
  1293  0E22                     	;# 
  1294  0E24                     	;# 
  1295  0E25                     	;# 
  1296  0E28                     	;# 
  1297  0E29                     	;# 
  1298  0E2A                     	;# 
  1299  0E2B                     	;# 
  1300  0E90                     	;# 
  1301  0E91                     	;# 
  1302  0E92                     	;# 
  1303  0E94                     	;# 
  1304  0E95                     	;# 
  1305  0E9C                     	;# 
  1306  0E9D                     	;# 
  1307  0E9E                     	;# 
  1308  0E9F                     	;# 
  1309  0EA0                     	;# 
  1310  0EA1                     	;# 
  1311  0EA2                     	;# 
  1312  0EA3                     	;# 
  1313  0EA4                     	;# 
  1314  0EA5                     	;# 
  1315  0EA6                     	;# 
  1316  0EA7                     	;# 
  1317  0F0F                     	;# 
  1318  0F10                     	;# 
  1319  0F11                     	;# 
  1320  0F12                     	;# 
  1321  0F13                     	;# 
  1322  0F14                     	;# 
  1323  0F15                     	;# 
  1324  0F16                     	;# 
  1325  0F17                     	;# 
  1326  0F18                     	;# 
  1327  0F19                     	;# 
  1328  0F1A                     	;# 
  1329  0F1B                     	;# 
  1330  0F1C                     	;# 
  1331  0F1D                     	;# 
  1332  0F1E                     	;# 
  1333  0F1F                     	;# 
  1334  0F20                     	;# 
  1335  0F21                     	;# 
  1336  0F22                     	;# 
  1337  0F23                     	;# 
  1338  0F24                     	;# 
  1339  0F25                     	;# 
  1340  0F26                     	;# 
  1341  0F27                     	;# 
  1342  0F28                     	;# 
  1343  0F29                     	;# 
  1344  0F2A                     	;# 
  1345  0F2B                     	;# 
  1346  0F2C                     	;# 
  1347  0F2D                     	;# 
  1348  0FE4                     	;# 
  1349  0FE5                     	;# 
  1350  0FE6                     	;# 
  1351  0FE7                     	;# 
  1352  0FE8                     	;# 
  1353  0FE9                     	;# 
  1354  0FEA                     	;# 
  1355  0FEB                     	;# 
  1356  0FED                     	;# 
  1357  0FEE                     	;# 
  1358  0FEF                     	;# 
  1359  0000                     	;# 
  1360  0001                     	;# 
  1361  0002                     	;# 
  1362  0003                     	;# 
  1363  0004                     	;# 
  1364  0005                     	;# 
  1365  0006                     	;# 
  1366  0007                     	;# 
  1367  0008                     	;# 
  1368  0009                     	;# 
  1369  000A                     	;# 
  1370  000B                     	;# 
  1371  000C                     	;# 
  1372  000D                     	;# 
  1373  000E                     	;# 
  1374  0011                     	;# 
  1375  0012                     	;# 
  1376  0013                     	;# 
  1377  0015                     	;# 
  1378  0016                     	;# 
  1379  0016                     	;# 
  1380  0017                     	;# 
  1381  0018                     	;# 
  1382  0019                     	;# 
  1383  001A                     	;# 
  1384  001B                     	;# 
  1385  001C                     	;# 
  1386  008C                     	;# 
  1387  008D                     	;# 
  1388  008E                     	;# 
  1389  0091                     	;# 
  1390  0092                     	;# 
  1391  0093                     	;# 
  1392  0095                     	;# 
  1393  0096                     	;# 
  1394  0097                     	;# 
  1395  0098                     	;# 
  1396  0099                     	;# 
  1397  009A                     	;# 
  1398  009B                     	;# 
  1399  009B                     	;# 
  1400  009C                     	;# 
  1401  009D                     	;# 
  1402  009E                     	;# 
  1403  009F                     	;# 
  1404  010C                     	;# 
  1405  010D                     	;# 
  1406  010E                     	;# 
  1407  0111                     	;# 
  1408  0112                     	;# 
  1409  0113                     	;# 
  1410  0114                     	;# 
  1411  0115                     	;# 
  1412  0116                     	;# 
  1413  0117                     	;# 
  1414  0118                     	;# 
  1415  0119                     	;# 
  1416  011C                     	;# 
  1417  018C                     	;# 
  1418  018D                     	;# 
  1419  018E                     	;# 
  1420  0191                     	;# 
  1421  0191                     	;# 
  1422  0192                     	;# 
  1423  0193                     	;# 
  1424  0193                     	;# 
  1425  0194                     	;# 
  1426  0195                     	;# 
  1427  0196                     	;# 
  1428  0199                     	;# 
  1429  0199                     	;# 
  1430  0199                     	;# 
  1431  019A                     	;# 
  1432  019A                     	;# 
  1433  019A                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019C                     	;# 
  1440  019C                     	;# 
  1441  019C                     	;# 
  1442  019D                     	;# 
  1443  019D                     	;# 
  1444  019D                     	;# 
  1445  019E                     	;# 
  1446  019E                     	;# 
  1447  019E                     	;# 
  1448  019F                     	;# 
  1449  019F                     	;# 
  1450  019F                     	;# 
  1451  019F                     	;# 
  1452  019F                     	;# 
  1453  020C                     	;# 
  1454  020D                     	;# 
  1455  020E                     	;# 
  1456  0211                     	;# 
  1457  0211                     	;# 
  1458  0212                     	;# 
  1459  0212                     	;# 
  1460  0213                     	;# 
  1461  0213                     	;# 
  1462  0214                     	;# 
  1463  0214                     	;# 
  1464  0215                     	;# 
  1465  0215                     	;# 
  1466  0215                     	;# 
  1467  0215                     	;# 
  1468  0216                     	;# 
  1469  0216                     	;# 
  1470  0217                     	;# 
  1471  0217                     	;# 
  1472  028C                     	;# 
  1473  028D                     	;# 
  1474  028E                     	;# 
  1475  0291                     	;# 
  1476  0291                     	;# 
  1477  0292                     	;# 
  1478  0293                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  029A                     	;# 
  1485  029E                     	;# 
  1486  030C                     	;# 
  1487  030D                     	;# 
  1488  030E                     	;# 
  1489  038C                     	;# 
  1490  038D                     	;# 
  1491  038E                     	;# 
  1492  0391                     	;# 
  1493  0392                     	;# 
  1494  0393                     	;# 
  1495  0394                     	;# 
  1496  0395                     	;# 
  1497  0396                     	;# 
  1498  0397                     	;# 
  1499  0398                     	;# 
  1500  0399                     	;# 
  1501  0415                     	;# 
  1502  0416                     	;# 
  1503  0417                     	;# 
  1504  041C                     	;# 
  1505  041D                     	;# 
  1506  041E                     	;# 
  1507  0511                     	;# 
  1508  0515                     	;# 
  1509  0617                     	;# 
  1510  0618                     	;# 
  1511  0619                     	;# 
  1512  0619                     	;# 
  1513  061A                     	;# 
  1514  061B                     	;# 
  1515  061C                     	;# 
  1516  061C                     	;# 
  1517  0691                     	;# 
  1518  0692                     	;# 
  1519  0693                     	;# 
  1520  0694                     	;# 
  1521  0695                     	;# 
  1522  0696                     	;# 
  1523  0697                     	;# 
  1524  0698                     	;# 
  1525  0699                     	;# 
  1526  069A                     	;# 
  1527  069B                     	;# 
  1528  069C                     	;# 
  1529  069D                     	;# 
  1530  069E                     	;# 
  1531  069F                     	;# 
  1532  0E0F                     	;# 
  1533  0E10                     	;# 
  1534  0E11                     	;# 
  1535  0E12                     	;# 
  1536  0E13                     	;# 
  1537  0E14                     	;# 
  1538  0E15                     	;# 
  1539  0E17                     	;# 
  1540  0E20                     	;# 
  1541  0E21                     	;# 
  1542  0E22                     	;# 
  1543  0E24                     	;# 
  1544  0E25                     	;# 
  1545  0E28                     	;# 
  1546  0E29                     	;# 
  1547  0E2A                     	;# 
  1548  0E2B                     	;# 
  1549  0E90                     	;# 
  1550  0E91                     	;# 
  1551  0E92                     	;# 
  1552  0E94                     	;# 
  1553  0E95                     	;# 
  1554  0E9C                     	;# 
  1555  0E9D                     	;# 
  1556  0E9E                     	;# 
  1557  0E9F                     	;# 
  1558  0EA0                     	;# 
  1559  0EA1                     	;# 
  1560  0EA2                     	;# 
  1561  0EA3                     	;# 
  1562  0EA4                     	;# 
  1563  0EA5                     	;# 
  1564  0EA6                     	;# 
  1565  0EA7                     	;# 
  1566  0F0F                     	;# 
  1567  0F10                     	;# 
  1568  0F11                     	;# 
  1569  0F12                     	;# 
  1570  0F13                     	;# 
  1571  0F14                     	;# 
  1572  0F15                     	;# 
  1573  0F16                     	;# 
  1574  0F17                     	;# 
  1575  0F18                     	;# 
  1576  0F19                     	;# 
  1577  0F1A                     	;# 
  1578  0F1B                     	;# 
  1579  0F1C                     	;# 
  1580  0F1D                     	;# 
  1581  0F1E                     	;# 
  1582  0F1F                     	;# 
  1583  0F20                     	;# 
  1584  0F21                     	;# 
  1585  0F22                     	;# 
  1586  0F23                     	;# 
  1587  0F24                     	;# 
  1588  0F25                     	;# 
  1589  0F26                     	;# 
  1590  0F27                     	;# 
  1591  0F28                     	;# 
  1592  0F29                     	;# 
  1593  0F2A                     	;# 
  1594  0F2B                     	;# 
  1595  0F2C                     	;# 
  1596  0F2D                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0013                     	;# 
  1626  0015                     	;# 
  1627  0016                     	;# 
  1628  0016                     	;# 
  1629  0017                     	;# 
  1630  0018                     	;# 
  1631  0019                     	;# 
  1632  001A                     	;# 
  1633  001B                     	;# 
  1634  001C                     	;# 
  1635  008C                     	;# 
  1636  008D                     	;# 
  1637  008E                     	;# 
  1638  0091                     	;# 
  1639  0092                     	;# 
  1640  0093                     	;# 
  1641  0095                     	;# 
  1642  0096                     	;# 
  1643  0097                     	;# 
  1644  0098                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  009F                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0111                     	;# 
  1657  0112                     	;# 
  1658  0113                     	;# 
  1659  0114                     	;# 
  1660  0115                     	;# 
  1661  0116                     	;# 
  1662  0117                     	;# 
  1663  0118                     	;# 
  1664  0119                     	;# 
  1665  011C                     	;# 
  1666  018C                     	;# 
  1667  018D                     	;# 
  1668  018E                     	;# 
  1669  0191                     	;# 
  1670  0191                     	;# 
  1671  0192                     	;# 
  1672  0193                     	;# 
  1673  0193                     	;# 
  1674  0194                     	;# 
  1675  0195                     	;# 
  1676  0196                     	;# 
  1677  0199                     	;# 
  1678  0199                     	;# 
  1679  0199                     	;# 
  1680  019A                     	;# 
  1681  019A                     	;# 
  1682  019A                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019B                     	;# 
  1686  019B                     	;# 
  1687  019B                     	;# 
  1688  019C                     	;# 
  1689  019C                     	;# 
  1690  019C                     	;# 
  1691  019D                     	;# 
  1692  019D                     	;# 
  1693  019D                     	;# 
  1694  019E                     	;# 
  1695  019E                     	;# 
  1696  019E                     	;# 
  1697  019F                     	;# 
  1698  019F                     	;# 
  1699  019F                     	;# 
  1700  019F                     	;# 
  1701  019F                     	;# 
  1702  020C                     	;# 
  1703  020D                     	;# 
  1704  020E                     	;# 
  1705  0211                     	;# 
  1706  0211                     	;# 
  1707  0212                     	;# 
  1708  0212                     	;# 
  1709  0213                     	;# 
  1710  0213                     	;# 
  1711  0214                     	;# 
  1712  0214                     	;# 
  1713  0215                     	;# 
  1714  0215                     	;# 
  1715  0215                     	;# 
  1716  0215                     	;# 
  1717  0216                     	;# 
  1718  0216                     	;# 
  1719  0217                     	;# 
  1720  0217                     	;# 
  1721  028C                     	;# 
  1722  028D                     	;# 
  1723  028E                     	;# 
  1724  0291                     	;# 
  1725  0291                     	;# 
  1726  0292                     	;# 
  1727  0293                     	;# 
  1728  0293                     	;# 
  1729  0298                     	;# 
  1730  0298                     	;# 
  1731  0299                     	;# 
  1732  029A                     	;# 
  1733  029A                     	;# 
  1734  029E                     	;# 
  1735  030C                     	;# 
  1736  030D                     	;# 
  1737  030E                     	;# 
  1738  038C                     	;# 
  1739  038D                     	;# 
  1740  038E                     	;# 
  1741  0391                     	;# 
  1742  0392                     	;# 
  1743  0393                     	;# 
  1744  0394                     	;# 
  1745  0395                     	;# 
  1746  0396                     	;# 
  1747  0397                     	;# 
  1748  0398                     	;# 
  1749  0399                     	;# 
  1750  0415                     	;# 
  1751  0416                     	;# 
  1752  0417                     	;# 
  1753  041C                     	;# 
  1754  041D                     	;# 
  1755  041E                     	;# 
  1756  0511                     	;# 
  1757  0515                     	;# 
  1758  0617                     	;# 
  1759  0618                     	;# 
  1760  0619                     	;# 
  1761  0619                     	;# 
  1762  061A                     	;# 
  1763  061B                     	;# 
  1764  061C                     	;# 
  1765  061C                     	;# 
  1766  0691                     	;# 
  1767  0692                     	;# 
  1768  0693                     	;# 
  1769  0694                     	;# 
  1770  0695                     	;# 
  1771  0696                     	;# 
  1772  0697                     	;# 
  1773  0698                     	;# 
  1774  0699                     	;# 
  1775  069A                     	;# 
  1776  069B                     	;# 
  1777  069C                     	;# 
  1778  069D                     	;# 
  1779  069E                     	;# 
  1780  069F                     	;# 
  1781  0E0F                     	;# 
  1782  0E10                     	;# 
  1783  0E11                     	;# 
  1784  0E12                     	;# 
  1785  0E13                     	;# 
  1786  0E14                     	;# 
  1787  0E15                     	;# 
  1788  0E17                     	;# 
  1789  0E20                     	;# 
  1790  0E21                     	;# 
  1791  0E22                     	;# 
  1792  0E24                     	;# 
  1793  0E25                     	;# 
  1794  0E28                     	;# 
  1795  0E29                     	;# 
  1796  0E2A                     	;# 
  1797  0E2B                     	;# 
  1798  0E90                     	;# 
  1799  0E91                     	;# 
  1800  0E92                     	;# 
  1801  0E94                     	;# 
  1802  0E95                     	;# 
  1803  0E9C                     	;# 
  1804  0E9D                     	;# 
  1805  0E9E                     	;# 
  1806  0E9F                     	;# 
  1807  0EA0                     	;# 
  1808  0EA1                     	;# 
  1809  0EA2                     	;# 
  1810  0EA3                     	;# 
  1811  0EA4                     	;# 
  1812  0EA5                     	;# 
  1813  0EA6                     	;# 
  1814  0EA7                     	;# 
  1815  0F0F                     	;# 
  1816  0F10                     	;# 
  1817  0F11                     	;# 
  1818  0F12                     	;# 
  1819  0F13                     	;# 
  1820  0F14                     	;# 
  1821  0F15                     	;# 
  1822  0F16                     	;# 
  1823  0F17                     	;# 
  1824  0F18                     	;# 
  1825  0F19                     	;# 
  1826  0F1A                     	;# 
  1827  0F1B                     	;# 
  1828  0F1C                     	;# 
  1829  0F1D                     	;# 
  1830  0F1E                     	;# 
  1831  0F1F                     	;# 
  1832  0F20                     	;# 
  1833  0F21                     	;# 
  1834  0F22                     	;# 
  1835  0F23                     	;# 
  1836  0F24                     	;# 
  1837  0F25                     	;# 
  1838  0F26                     	;# 
  1839  0F27                     	;# 
  1840  0F28                     	;# 
  1841  0F29                     	;# 
  1842  0F2A                     	;# 
  1843  0F2B                     	;# 
  1844  0F2C                     	;# 
  1845  0F2D                     	;# 
  1846  0FE4                     	;# 
  1847  0FE5                     	;# 
  1848  0FE6                     	;# 
  1849  0FE7                     	;# 
  1850  0FE8                     	;# 
  1851  0FE9                     	;# 
  1852  0FEA                     	;# 
  1853  0FEB                     	;# 
  1854  0FED                     	;# 
  1855  0FEE                     	;# 
  1856  0FEF                     	;# 
  1857  0000                     	;# 
  1858  0001                     	;# 
  1859  0002                     	;# 
  1860  0003                     	;# 
  1861  0004                     	;# 
  1862  0005                     	;# 
  1863  0006                     	;# 
  1864  0007                     	;# 
  1865  0008                     	;# 
  1866  0009                     	;# 
  1867  000A                     	;# 
  1868  000B                     	;# 
  1869  000C                     	;# 
  1870  000D                     	;# 
  1871  000E                     	;# 
  1872  0011                     	;# 
  1873  0012                     	;# 
  1874  0013                     	;# 
  1875  0015                     	;# 
  1876  0016                     	;# 
  1877  0016                     	;# 
  1878  0017                     	;# 
  1879  0018                     	;# 
  1880  0019                     	;# 
  1881  001A                     	;# 
  1882  001B                     	;# 
  1883  001C                     	;# 
  1884  008C                     	;# 
  1885  008D                     	;# 
  1886  008E                     	;# 
  1887  0091                     	;# 
  1888  0092                     	;# 
  1889  0093                     	;# 
  1890  0095                     	;# 
  1891  0096                     	;# 
  1892  0097                     	;# 
  1893  0098                     	;# 
  1894  0099                     	;# 
  1895  009A                     	;# 
  1896  009B                     	;# 
  1897  009B                     	;# 
  1898  009C                     	;# 
  1899  009D                     	;# 
  1900  009E                     	;# 
  1901  009F                     	;# 
  1902  010C                     	;# 
  1903  010D                     	;# 
  1904  010E                     	;# 
  1905  0111                     	;# 
  1906  0112                     	;# 
  1907  0113                     	;# 
  1908  0114                     	;# 
  1909  0115                     	;# 
  1910  0116                     	;# 
  1911  0117                     	;# 
  1912  0118                     	;# 
  1913  0119                     	;# 
  1914  011C                     	;# 
  1915  018C                     	;# 
  1916  018D                     	;# 
  1917  018E                     	;# 
  1918  0191                     	;# 
  1919  0191                     	;# 
  1920  0192                     	;# 
  1921  0193                     	;# 
  1922  0193                     	;# 
  1923  0194                     	;# 
  1924  0195                     	;# 
  1925  0196                     	;# 
  1926  0199                     	;# 
  1927  0199                     	;# 
  1928  0199                     	;# 
  1929  019A                     	;# 
  1930  019A                     	;# 
  1931  019A                     	;# 
  1932  019B                     	;# 
  1933  019B                     	;# 
  1934  019B                     	;# 
  1935  019B                     	;# 
  1936  019B                     	;# 
  1937  019C                     	;# 
  1938  019C                     	;# 
  1939  019C                     	;# 
  1940  019D                     	;# 
  1941  019D                     	;# 
  1942  019D                     	;# 
  1943  019E                     	;# 
  1944  019E                     	;# 
  1945  019E                     	;# 
  1946  019F                     	;# 
  1947  019F                     	;# 
  1948  019F                     	;# 
  1949  019F                     	;# 
  1950  019F                     	;# 
  1951  020C                     	;# 
  1952  020D                     	;# 
  1953  020E                     	;# 
  1954  0211                     	;# 
  1955  0211                     	;# 
  1956  0212                     	;# 
  1957  0212                     	;# 
  1958  0213                     	;# 
  1959  0213                     	;# 
  1960  0214                     	;# 
  1961  0214                     	;# 
  1962  0215                     	;# 
  1963  0215                     	;# 
  1964  0215                     	;# 
  1965  0215                     	;# 
  1966  0216                     	;# 
  1967  0216                     	;# 
  1968  0217                     	;# 
  1969  0217                     	;# 
  1970  028C                     	;# 
  1971  028D                     	;# 
  1972  028E                     	;# 
  1973  0291                     	;# 
  1974  0291                     	;# 
  1975  0292                     	;# 
  1976  0293                     	;# 
  1977  0293                     	;# 
  1978  0298                     	;# 
  1979  0298                     	;# 
  1980  0299                     	;# 
  1981  029A                     	;# 
  1982  029A                     	;# 
  1983  029E                     	;# 
  1984  030C                     	;# 
  1985  030D                     	;# 
  1986  030E                     	;# 
  1987  038C                     	;# 
  1988  038D                     	;# 
  1989  038E                     	;# 
  1990  0391                     	;# 
  1991  0392                     	;# 
  1992  0393                     	;# 
  1993  0394                     	;# 
  1994  0395                     	;# 
  1995  0396                     	;# 
  1996  0397                     	;# 
  1997  0398                     	;# 
  1998  0399                     	;# 
  1999  0415                     	;# 
  2000  0416                     	;# 
  2001  0417                     	;# 
  2002  041C                     	;# 
  2003  041D                     	;# 
  2004  041E                     	;# 
  2005  0511                     	;# 
  2006  0515                     	;# 
  2007  0617                     	;# 
  2008  0618                     	;# 
  2009  0619                     	;# 
  2010  0619                     	;# 
  2011  061A                     	;# 
  2012  061B                     	;# 
  2013  061C                     	;# 
  2014  061C                     	;# 
  2015  0691                     	;# 
  2016  0692                     	;# 
  2017  0693                     	;# 
  2018  0694                     	;# 
  2019  0695                     	;# 
  2020  0696                     	;# 
  2021  0697                     	;# 
  2022  0698                     	;# 
  2023  0699                     	;# 
  2024  069A                     	;# 
  2025  069B                     	;# 
  2026  069C                     	;# 
  2027  069D                     	;# 
  2028  069E                     	;# 
  2029  069F                     	;# 
  2030  0E0F                     	;# 
  2031  0E10                     	;# 
  2032  0E11                     	;# 
  2033  0E12                     	;# 
  2034  0E13                     	;# 
  2035  0E14                     	;# 
  2036  0E15                     	;# 
  2037  0E17                     	;# 
  2038  0E20                     	;# 
  2039  0E21                     	;# 
  2040  0E22                     	;# 
  2041  0E24                     	;# 
  2042  0E25                     	;# 
  2043  0E28                     	;# 
  2044  0E29                     	;# 
  2045  0E2A                     	;# 
  2046  0E2B                     	;# 
  2047  0E90                     	;# 
  2048  0E91                     	;# 
  2049  0E92                     	;# 
  2050  0E94                     	;# 
  2051  0E95                     	;# 
  2052  0E9C                     	;# 
  2053  0E9D                     	;# 
  2054  0E9E                     	;# 
  2055  0E9F                     	;# 
  2056  0EA0                     	;# 
  2057  0EA1                     	;# 
  2058  0EA2                     	;# 
  2059  0EA3                     	;# 
  2060  0EA4                     	;# 
  2061  0EA5                     	;# 
  2062  0EA6                     	;# 
  2063  0EA7                     	;# 
  2064  0F0F                     	;# 
  2065  0F10                     	;# 
  2066  0F11                     	;# 
  2067  0F12                     	;# 
  2068  0F13                     	;# 
  2069  0F14                     	;# 
  2070  0F15                     	;# 
  2071  0F16                     	;# 
  2072  0F17                     	;# 
  2073  0F18                     	;# 
  2074  0F19                     	;# 
  2075  0F1A                     	;# 
  2076  0F1B                     	;# 
  2077  0F1C                     	;# 
  2078  0F1D                     	;# 
  2079  0F1E                     	;# 
  2080  0F1F                     	;# 
  2081  0F20                     	;# 
  2082  0F21                     	;# 
  2083  0F22                     	;# 
  2084  0F23                     	;# 
  2085  0F24                     	;# 
  2086  0F25                     	;# 
  2087  0F26                     	;# 
  2088  0F27                     	;# 
  2089  0F28                     	;# 
  2090  0F29                     	;# 
  2091  0F2A                     	;# 
  2092  0F2B                     	;# 
  2093  0F2C                     	;# 
  2094  0F2D                     	;# 
  2095  0FE4                     	;# 
  2096  0FE5                     	;# 
  2097  0FE6                     	;# 
  2098  0FE7                     	;# 
  2099  0FE8                     	;# 
  2100  0FE9                     	;# 
  2101  0FEA                     	;# 
  2102  0FEB                     	;# 
  2103  0FED                     	;# 
  2104  0FEE                     	;# 
  2105  0FEF                     	;# 
  2106  0000                     	;# 
  2107  0001                     	;# 
  2108  0002                     	;# 
  2109  0003                     	;# 
  2110  0004                     	;# 
  2111  0005                     	;# 
  2112  0006                     	;# 
  2113  0007                     	;# 
  2114  0008                     	;# 
  2115  0009                     	;# 
  2116  000A                     	;# 
  2117  000B                     	;# 
  2118  000C                     	;# 
  2119  000D                     	;# 
  2120  000E                     	;# 
  2121  0011                     	;# 
  2122  0012                     	;# 
  2123  0013                     	;# 
  2124  0015                     	;# 
  2125  0016                     	;# 
  2126  0016                     	;# 
  2127  0017                     	;# 
  2128  0018                     	;# 
  2129  0019                     	;# 
  2130  001A                     	;# 
  2131  001B                     	;# 
  2132  001C                     	;# 
  2133  008C                     	;# 
  2134  008D                     	;# 
  2135  008E                     	;# 
  2136  0091                     	;# 
  2137  0092                     	;# 
  2138  0093                     	;# 
  2139  0095                     	;# 
  2140  0096                     	;# 
  2141  0097                     	;# 
  2142  0098                     	;# 
  2143  0099                     	;# 
  2144  009A                     	;# 
  2145  009B                     	;# 
  2146  009B                     	;# 
  2147  009C                     	;# 
  2148  009D                     	;# 
  2149  009E                     	;# 
  2150  009F                     	;# 
  2151  010C                     	;# 
  2152  010D                     	;# 
  2153  010E                     	;# 
  2154  0111                     	;# 
  2155  0112                     	;# 
  2156  0113                     	;# 
  2157  0114                     	;# 
  2158  0115                     	;# 
  2159  0116                     	;# 
  2160  0117                     	;# 
  2161  0118                     	;# 
  2162  0119                     	;# 
  2163  011C                     	;# 
  2164  018C                     	;# 
  2165  018D                     	;# 
  2166  018E                     	;# 
  2167  0191                     	;# 
  2168  0191                     	;# 
  2169  0192                     	;# 
  2170  0193                     	;# 
  2171  0193                     	;# 
  2172  0194                     	;# 
  2173  0195                     	;# 
  2174  0196                     	;# 
  2175  0199                     	;# 
  2176  0199                     	;# 
  2177  0199                     	;# 
  2178  019A                     	;# 
  2179  019A                     	;# 
  2180  019A                     	;# 
  2181  019B                     	;# 
  2182  019B                     	;# 
  2183  019B                     	;# 
  2184  019B                     	;# 
  2185  019B                     	;# 
  2186  019C                     	;# 
  2187  019C                     	;# 
  2188  019C                     	;# 
  2189  019D                     	;# 
  2190  019D                     	;# 
  2191  019D                     	;# 
  2192  019E                     	;# 
  2193  019E                     	;# 
  2194  019E                     	;# 
  2195  019F                     	;# 
  2196  019F                     	;# 
  2197  019F                     	;# 
  2198  019F                     	;# 
  2199  019F                     	;# 
  2200  020C                     	;# 
  2201  020D                     	;# 
  2202  020E                     	;# 
  2203  0211                     	;# 
  2204  0211                     	;# 
  2205  0212                     	;# 
  2206  0212                     	;# 
  2207  0213                     	;# 
  2208  0213                     	;# 
  2209  0214                     	;# 
  2210  0214                     	;# 
  2211  0215                     	;# 
  2212  0215                     	;# 
  2213  0215                     	;# 
  2214  0215                     	;# 
  2215  0216                     	;# 
  2216  0216                     	;# 
  2217  0217                     	;# 
  2218  0217                     	;# 
  2219  028C                     	;# 
  2220  028D                     	;# 
  2221  028E                     	;# 
  2222  0291                     	;# 
  2223  0291                     	;# 
  2224  0292                     	;# 
  2225  0293                     	;# 
  2226  0293                     	;# 
  2227  0298                     	;# 
  2228  0298                     	;# 
  2229  0299                     	;# 
  2230  029A                     	;# 
  2231  029A                     	;# 
  2232  029E                     	;# 
  2233  030C                     	;# 
  2234  030D                     	;# 
  2235  030E                     	;# 
  2236  038C                     	;# 
  2237  038D                     	;# 
  2238  038E                     	;# 
  2239  0391                     	;# 
  2240  0392                     	;# 
  2241  0393                     	;# 
  2242  0394                     	;# 
  2243  0395                     	;# 
  2244  0396                     	;# 
  2245  0397                     	;# 
  2246  0398                     	;# 
  2247  0399                     	;# 
  2248  0415                     	;# 
  2249  0416                     	;# 
  2250  0417                     	;# 
  2251  041C                     	;# 
  2252  041D                     	;# 
  2253  041E                     	;# 
  2254  0511                     	;# 
  2255  0515                     	;# 
  2256  0617                     	;# 
  2257  0618                     	;# 
  2258  0619                     	;# 
  2259  0619                     	;# 
  2260  061A                     	;# 
  2261  061B                     	;# 
  2262  061C                     	;# 
  2263  061C                     	;# 
  2264  0691                     	;# 
  2265  0692                     	;# 
  2266  0693                     	;# 
  2267  0694                     	;# 
  2268  0695                     	;# 
  2269  0696                     	;# 
  2270  0697                     	;# 
  2271  0698                     	;# 
  2272  0699                     	;# 
  2273  069A                     	;# 
  2274  069B                     	;# 
  2275  069C                     	;# 
  2276  069D                     	;# 
  2277  069E                     	;# 
  2278  069F                     	;# 
  2279  0E0F                     	;# 
  2280  0E10                     	;# 
  2281  0E11                     	;# 
  2282  0E12                     	;# 
  2283  0E13                     	;# 
  2284  0E14                     	;# 
  2285  0E15                     	;# 
  2286  0E17                     	;# 
  2287  0E20                     	;# 
  2288  0E21                     	;# 
  2289  0E22                     	;# 
  2290  0E24                     	;# 
  2291  0E25                     	;# 
  2292  0E28                     	;# 
  2293  0E29                     	;# 
  2294  0E2A                     	;# 
  2295  0E2B                     	;# 
  2296  0E90                     	;# 
  2297  0E91                     	;# 
  2298  0E92                     	;# 
  2299  0E94                     	;# 
  2300  0E95                     	;# 
  2301  0E9C                     	;# 
  2302  0E9D                     	;# 
  2303  0E9E                     	;# 
  2304  0E9F                     	;# 
  2305  0EA0                     	;# 
  2306  0EA1                     	;# 
  2307  0EA2                     	;# 
  2308  0EA3                     	;# 
  2309  0EA4                     	;# 
  2310  0EA5                     	;# 
  2311  0EA6                     	;# 
  2312  0EA7                     	;# 
  2313  0F0F                     	;# 
  2314  0F10                     	;# 
  2315  0F11                     	;# 
  2316  0F12                     	;# 
  2317  0F13                     	;# 
  2318  0F14                     	;# 
  2319  0F15                     	;# 
  2320  0F16                     	;# 
  2321  0F17                     	;# 
  2322  0F18                     	;# 
  2323  0F19                     	;# 
  2324  0F1A                     	;# 
  2325  0F1B                     	;# 
  2326  0F1C                     	;# 
  2327  0F1D                     	;# 
  2328  0F1E                     	;# 
  2329  0F1F                     	;# 
  2330  0F20                     	;# 
  2331  0F21                     	;# 
  2332  0F22                     	;# 
  2333  0F23                     	;# 
  2334  0F24                     	;# 
  2335  0F25                     	;# 
  2336  0F26                     	;# 
  2337  0F27                     	;# 
  2338  0F28                     	;# 
  2339  0F29                     	;# 
  2340  0F2A                     	;# 
  2341  0F2B                     	;# 
  2342  0F2C                     	;# 
  2343  0F2D                     	;# 
  2344  0FE4                     	;# 
  2345  0FE5                     	;# 
  2346  0FE6                     	;# 
  2347  0FE7                     	;# 
  2348  0FE8                     	;# 
  2349  0FE9                     	;# 
  2350  0FEA                     	;# 
  2351  0FEB                     	;# 
  2352  0FED                     	;# 
  2353  0FEE                     	;# 
  2354  0FEF                     	;# 
  2355  0000                     	;# 
  2356  0001                     	;# 
  2357  0002                     	;# 
  2358  0003                     	;# 
  2359  0004                     	;# 
  2360  0005                     	;# 
  2361  0006                     	;# 
  2362  0007                     	;# 
  2363  0008                     	;# 
  2364  0009                     	;# 
  2365  000A                     	;# 
  2366  000B                     	;# 
  2367  000C                     	;# 
  2368  000D                     	;# 
  2369  000E                     	;# 
  2370  0011                     	;# 
  2371  0012                     	;# 
  2372  0013                     	;# 
  2373  0015                     	;# 
  2374  0016                     	;# 
  2375  0016                     	;# 
  2376  0017                     	;# 
  2377  0018                     	;# 
  2378  0019                     	;# 
  2379  001A                     	;# 
  2380  001B                     	;# 
  2381  001C                     	;# 
  2382  008C                     	;# 
  2383  008D                     	;# 
  2384  008E                     	;# 
  2385  0091                     	;# 
  2386  0092                     	;# 
  2387  0093                     	;# 
  2388  0095                     	;# 
  2389  0096                     	;# 
  2390  0097                     	;# 
  2391  0098                     	;# 
  2392  0099                     	;# 
  2393  009A                     	;# 
  2394  009B                     	;# 
  2395  009B                     	;# 
  2396  009C                     	;# 
  2397  009D                     	;# 
  2398  009E                     	;# 
  2399  009F                     	;# 
  2400  010C                     	;# 
  2401  010D                     	;# 
  2402  010E                     	;# 
  2403  0111                     	;# 
  2404  0112                     	;# 
  2405  0113                     	;# 
  2406  0114                     	;# 
  2407  0115                     	;# 
  2408  0116                     	;# 
  2409  0117                     	;# 
  2410  0118                     	;# 
  2411  0119                     	;# 
  2412  011C                     	;# 
  2413  018C                     	;# 
  2414  018D                     	;# 
  2415  018E                     	;# 
  2416  0191                     	;# 
  2417  0191                     	;# 
  2418  0192                     	;# 
  2419  0193                     	;# 
  2420  0193                     	;# 
  2421  0194                     	;# 
  2422  0195                     	;# 
  2423  0196                     	;# 
  2424  0199                     	;# 
  2425  0199                     	;# 
  2426  0199                     	;# 
  2427  019A                     	;# 
  2428  019A                     	;# 
  2429  019A                     	;# 
  2430  019B                     	;# 
  2431  019B                     	;# 
  2432  019B                     	;# 
  2433  019B                     	;# 
  2434  019B                     	;# 
  2435  019C                     	;# 
  2436  019C                     	;# 
  2437  019C                     	;# 
  2438  019D                     	;# 
  2439  019D                     	;# 
  2440  019D                     	;# 
  2441  019E                     	;# 
  2442  019E                     	;# 
  2443  019E                     	;# 
  2444  019F                     	;# 
  2445  019F                     	;# 
  2446  019F                     	;# 
  2447  019F                     	;# 
  2448  019F                     	;# 
  2449  020C                     	;# 
  2450  020D                     	;# 
  2451  020E                     	;# 
  2452  0211                     	;# 
  2453  0211                     	;# 
  2454  0212                     	;# 
  2455  0212                     	;# 
  2456  0213                     	;# 
  2457  0213                     	;# 
  2458  0214                     	;# 
  2459  0214                     	;# 
  2460  0215                     	;# 
  2461  0215                     	;# 
  2462  0215                     	;# 
  2463  0215                     	;# 
  2464  0216                     	;# 
  2465  0216                     	;# 
  2466  0217                     	;# 
  2467  0217                     	;# 
  2468  028C                     	;# 
  2469  028D                     	;# 
  2470  028E                     	;# 
  2471  0291                     	;# 
  2472  0291                     	;# 
  2473  0292                     	;# 
  2474  0293                     	;# 
  2475  0293                     	;# 
  2476  0298                     	;# 
  2477  0298                     	;# 
  2478  0299                     	;# 
  2479  029A                     	;# 
  2480  029A                     	;# 
  2481  029E                     	;# 
  2482  030C                     	;# 
  2483  030D                     	;# 
  2484  030E                     	;# 
  2485  038C                     	;# 
  2486  038D                     	;# 
  2487  038E                     	;# 
  2488  0391                     	;# 
  2489  0392                     	;# 
  2490  0393                     	;# 
  2491  0394                     	;# 
  2492  0395                     	;# 
  2493  0396                     	;# 
  2494  0397                     	;# 
  2495  0398                     	;# 
  2496  0399                     	;# 
  2497  0415                     	;# 
  2498  0416                     	;# 
  2499  0417                     	;# 
  2500  041C                     	;# 
  2501  041D                     	;# 
  2502  041E                     	;# 
  2503  0511                     	;# 
  2504  0515                     	;# 
  2505  0617                     	;# 
  2506  0618                     	;# 
  2507  0619                     	;# 
  2508  0619                     	;# 
  2509  061A                     	;# 
  2510  061B                     	;# 
  2511  061C                     	;# 
  2512  061C                     	;# 
  2513  0691                     	;# 
  2514  0692                     	;# 
  2515  0693                     	;# 
  2516  0694                     	;# 
  2517  0695                     	;# 
  2518  0696                     	;# 
  2519  0697                     	;# 
  2520  0698                     	;# 
  2521  0699                     	;# 
  2522  069A                     	;# 
  2523  069B                     	;# 
  2524  069C                     	;# 
  2525  069D                     	;# 
  2526  069E                     	;# 
  2527  069F                     	;# 
  2528  0E0F                     	;# 
  2529  0E10                     	;# 
  2530  0E11                     	;# 
  2531  0E12                     	;# 
  2532  0E13                     	;# 
  2533  0E14                     	;# 
  2534  0E15                     	;# 
  2535  0E17                     	;# 
  2536  0E20                     	;# 
  2537  0E21                     	;# 
  2538  0E22                     	;# 
  2539  0E24                     	;# 
  2540  0E25                     	;# 
  2541  0E28                     	;# 
  2542  0E29                     	;# 
  2543  0E2A                     	;# 
  2544  0E2B                     	;# 
  2545  0E90                     	;# 
  2546  0E91                     	;# 
  2547  0E92                     	;# 
  2548  0E94                     	;# 
  2549  0E95                     	;# 
  2550  0E9C                     	;# 
  2551  0E9D                     	;# 
  2552  0E9E                     	;# 
  2553  0E9F                     	;# 
  2554  0EA0                     	;# 
  2555  0EA1                     	;# 
  2556  0EA2                     	;# 
  2557  0EA3                     	;# 
  2558  0EA4                     	;# 
  2559  0EA5                     	;# 
  2560  0EA6                     	;# 
  2561  0EA7                     	;# 
  2562  0F0F                     	;# 
  2563  0F10                     	;# 
  2564  0F11                     	;# 
  2565  0F12                     	;# 
  2566  0F13                     	;# 
  2567  0F14                     	;# 
  2568  0F15                     	;# 
  2569  0F16                     	;# 
  2570  0F17                     	;# 
  2571  0F18                     	;# 
  2572  0F19                     	;# 
  2573  0F1A                     	;# 
  2574  0F1B                     	;# 
  2575  0F1C                     	;# 
  2576  0F1D                     	;# 
  2577  0F1E                     	;# 
  2578  0F1F                     	;# 
  2579  0F20                     	;# 
  2580  0F21                     	;# 
  2581  0F22                     	;# 
  2582  0F23                     	;# 
  2583  0F24                     	;# 
  2584  0F25                     	;# 
  2585  0F26                     	;# 
  2586  0F27                     	;# 
  2587  0F28                     	;# 
  2588  0F29                     	;# 
  2589  0F2A                     	;# 
  2590  0F2B                     	;# 
  2591  0F2C                     	;# 
  2592  0F2D                     	;# 
  2593  0FE4                     	;# 
  2594  0FE5                     	;# 
  2595  0FE6                     	;# 
  2596  0FE7                     	;# 
  2597  0FE8                     	;# 
  2598  0FE9                     	;# 
  2599  0FEA                     	;# 
  2600  0FEB                     	;# 
  2601  0FED                     	;# 
  2602  0FEE                     	;# 
  2603  0FEF                     	;# 
  2604  0000                     	;# 
  2605  0001                     	;# 
  2606  0002                     	;# 
  2607  0003                     	;# 
  2608  0004                     	;# 
  2609  0005                     	;# 
  2610  0006                     	;# 
  2611  0007                     	;# 
  2612  0008                     	;# 
  2613  0009                     	;# 
  2614  000A                     	;# 
  2615  000B                     	;# 
  2616  000C                     	;# 
  2617  000D                     	;# 
  2618  000E                     	;# 
  2619  0011                     	;# 
  2620  0012                     	;# 
  2621  0013                     	;# 
  2622  0015                     	;# 
  2623  0016                     	;# 
  2624  0016                     	;# 
  2625  0017                     	;# 
  2626  0018                     	;# 
  2627  0019                     	;# 
  2628  001A                     	;# 
  2629  001B                     	;# 
  2630  001C                     	;# 
  2631  008C                     	;# 
  2632  008D                     	;# 
  2633  008E                     	;# 
  2634  0091                     	;# 
  2635  0092                     	;# 
  2636  0093                     	;# 
  2637  0095                     	;# 
  2638  0096                     	;# 
  2639  0097                     	;# 
  2640  0098                     	;# 
  2641  0099                     	;# 
  2642  009A                     	;# 
  2643  009B                     	;# 
  2644  009B                     	;# 
  2645  009C                     	;# 
  2646  009D                     	;# 
  2647  009E                     	;# 
  2648  009F                     	;# 
  2649  010C                     	;# 
  2650  010D                     	;# 
  2651  010E                     	;# 
  2652  0111                     	;# 
  2653  0112                     	;# 
  2654  0113                     	;# 
  2655  0114                     	;# 
  2656  0115                     	;# 
  2657  0116                     	;# 
  2658  0117                     	;# 
  2659  0118                     	;# 
  2660  0119                     	;# 
  2661  011C                     	;# 
  2662  018C                     	;# 
  2663  018D                     	;# 
  2664  018E                     	;# 
  2665  0191                     	;# 
  2666  0191                     	;# 
  2667  0192                     	;# 
  2668  0193                     	;# 
  2669  0193                     	;# 
  2670  0194                     	;# 
  2671  0195                     	;# 
  2672  0196                     	;# 
  2673  0199                     	;# 
  2674  0199                     	;# 
  2675  0199                     	;# 
  2676  019A                     	;# 
  2677  019A                     	;# 
  2678  019A                     	;# 
  2679  019B                     	;# 
  2680  019B                     	;# 
  2681  019B                     	;# 
  2682  019B                     	;# 
  2683  019B                     	;# 
  2684  019C                     	;# 
  2685  019C                     	;# 
  2686  019C                     	;# 
  2687  019D                     	;# 
  2688  019D                     	;# 
  2689  019D                     	;# 
  2690  019E                     	;# 
  2691  019E                     	;# 
  2692  019E                     	;# 
  2693  019F                     	;# 
  2694  019F                     	;# 
  2695  019F                     	;# 
  2696  019F                     	;# 
  2697  019F                     	;# 
  2698  020C                     	;# 
  2699  020D                     	;# 
  2700  020E                     	;# 
  2701  0211                     	;# 
  2702  0211                     	;# 
  2703  0212                     	;# 
  2704  0212                     	;# 
  2705  0213                     	;# 
  2706  0213                     	;# 
  2707  0214                     	;# 
  2708  0214                     	;# 
  2709  0215                     	;# 
  2710  0215                     	;# 
  2711  0215                     	;# 
  2712  0215                     	;# 
  2713  0216                     	;# 
  2714  0216                     	;# 
  2715  0217                     	;# 
  2716  0217                     	;# 
  2717  028C                     	;# 
  2718  028D                     	;# 
  2719  028E                     	;# 
  2720  0291                     	;# 
  2721  0291                     	;# 
  2722  0292                     	;# 
  2723  0293                     	;# 
  2724  0293                     	;# 
  2725  0298                     	;# 
  2726  0298                     	;# 
  2727  0299                     	;# 
  2728  029A                     	;# 
  2729  029A                     	;# 
  2730  029E                     	;# 
  2731  030C                     	;# 
  2732  030D                     	;# 
  2733  030E                     	;# 
  2734  038C                     	;# 
  2735  038D                     	;# 
  2736  038E                     	;# 
  2737  0391                     	;# 
  2738  0392                     	;# 
  2739  0393                     	;# 
  2740  0394                     	;# 
  2741  0395                     	;# 
  2742  0396                     	;# 
  2743  0397                     	;# 
  2744  0398                     	;# 
  2745  0399                     	;# 
  2746  0415                     	;# 
  2747  0416                     	;# 
  2748  0417                     	;# 
  2749  041C                     	;# 
  2750  041D                     	;# 
  2751  041E                     	;# 
  2752  0511                     	;# 
  2753  0515                     	;# 
  2754  0617                     	;# 
  2755  0618                     	;# 
  2756  0619                     	;# 
  2757  0619                     	;# 
  2758  061A                     	;# 
  2759  061B                     	;# 
  2760  061C                     	;# 
  2761  061C                     	;# 
  2762  0691                     	;# 
  2763  0692                     	;# 
  2764  0693                     	;# 
  2765  0694                     	;# 
  2766  0695                     	;# 
  2767  0696                     	;# 
  2768  0697                     	;# 
  2769  0698                     	;# 
  2770  0699                     	;# 
  2771  069A                     	;# 
  2772  069B                     	;# 
  2773  069C                     	;# 
  2774  069D                     	;# 
  2775  069E                     	;# 
  2776  069F                     	;# 
  2777  0E0F                     	;# 
  2778  0E10                     	;# 
  2779  0E11                     	;# 
  2780  0E12                     	;# 
  2781  0E13                     	;# 
  2782  0E14                     	;# 
  2783  0E15                     	;# 
  2784  0E17                     	;# 
  2785  0E20                     	;# 
  2786  0E21                     	;# 
  2787  0E22                     	;# 
  2788  0E24                     	;# 
  2789  0E25                     	;# 
  2790  0E28                     	;# 
  2791  0E29                     	;# 
  2792  0E2A                     	;# 
  2793  0E2B                     	;# 
  2794  0E90                     	;# 
  2795  0E91                     	;# 
  2796  0E92                     	;# 
  2797  0E94                     	;# 
  2798  0E95                     	;# 
  2799  0E9C                     	;# 
  2800  0E9D                     	;# 
  2801  0E9E                     	;# 
  2802  0E9F                     	;# 
  2803  0EA0                     	;# 
  2804  0EA1                     	;# 
  2805  0EA2                     	;# 
  2806  0EA3                     	;# 
  2807  0EA4                     	;# 
  2808  0EA5                     	;# 
  2809  0EA6                     	;# 
  2810  0EA7                     	;# 
  2811  0F0F                     	;# 
  2812  0F10                     	;# 
  2813  0F11                     	;# 
  2814  0F12                     	;# 
  2815  0F13                     	;# 
  2816  0F14                     	;# 
  2817  0F15                     	;# 
  2818  0F16                     	;# 
  2819  0F17                     	;# 
  2820  0F18                     	;# 
  2821  0F19                     	;# 
  2822  0F1A                     	;# 
  2823  0F1B                     	;# 
  2824  0F1C                     	;# 
  2825  0F1D                     	;# 
  2826  0F1E                     	;# 
  2827  0F1F                     	;# 
  2828  0F20                     	;# 
  2829  0F21                     	;# 
  2830  0F22                     	;# 
  2831  0F23                     	;# 
  2832  0F24                     	;# 
  2833  0F25                     	;# 
  2834  0F26                     	;# 
  2835  0F27                     	;# 
  2836  0F28                     	;# 
  2837  0F29                     	;# 
  2838  0F2A                     	;# 
  2839  0F2B                     	;# 
  2840  0F2C                     	;# 
  2841  0F2D                     	;# 
  2842  0FE4                     	;# 
  2843  0FE5                     	;# 
  2844  0FE6                     	;# 
  2845  0FE7                     	;# 
  2846  0FE8                     	;# 
  2847  0FE9                     	;# 
  2848  0FEA                     	;# 
  2849  0FEB                     	;# 
  2850  0FED                     	;# 
  2851  0FEE                     	;# 
  2852  0FEF                     	;# 
  2853  0000                     	;# 
  2854  0001                     	;# 
  2855  0002                     	;# 
  2856  0003                     	;# 
  2857  0004                     	;# 
  2858  0005                     	;# 
  2859  0006                     	;# 
  2860  0007                     	;# 
  2861  0008                     	;# 
  2862  0009                     	;# 
  2863  000A                     	;# 
  2864  000B                     	;# 
  2865  000C                     	;# 
  2866  000D                     	;# 
  2867  000E                     	;# 
  2868  0011                     	;# 
  2869  0012                     	;# 
  2870  0013                     	;# 
  2871  0015                     	;# 
  2872  0016                     	;# 
  2873  0016                     	;# 
  2874  0017                     	;# 
  2875  0018                     	;# 
  2876  0019                     	;# 
  2877  001A                     	;# 
  2878  001B                     	;# 
  2879  001C                     	;# 
  2880  008C                     	;# 
  2881  008D                     	;# 
  2882  008E                     	;# 
  2883  0091                     	;# 
  2884  0092                     	;# 
  2885  0093                     	;# 
  2886  0095                     	;# 
  2887  0096                     	;# 
  2888  0097                     	;# 
  2889  0098                     	;# 
  2890  0099                     	;# 
  2891  009A                     	;# 
  2892  009B                     	;# 
  2893  009B                     	;# 
  2894  009C                     	;# 
  2895  009D                     	;# 
  2896  009E                     	;# 
  2897  009F                     	;# 
  2898  010C                     	;# 
  2899  010D                     	;# 
  2900  010E                     	;# 
  2901  0111                     	;# 
  2902  0112                     	;# 
  2903  0113                     	;# 
  2904  0114                     	;# 
  2905  0115                     	;# 
  2906  0116                     	;# 
  2907  0117                     	;# 
  2908  0118                     	;# 
  2909  0119                     	;# 
  2910  011C                     	;# 
  2911  018C                     	;# 
  2912  018D                     	;# 
  2913  018E                     	;# 
  2914  0191                     	;# 
  2915  0191                     	;# 
  2916  0192                     	;# 
  2917  0193                     	;# 
  2918  0193                     	;# 
  2919  0194                     	;# 
  2920  0195                     	;# 
  2921  0196                     	;# 
  2922  0199                     	;# 
  2923  0199                     	;# 
  2924  0199                     	;# 
  2925  019A                     	;# 
  2926  019A                     	;# 
  2927  019A                     	;# 
  2928  019B                     	;# 
  2929  019B                     	;# 
  2930  019B                     	;# 
  2931  019B                     	;# 
  2932  019B                     	;# 
  2933  019C                     	;# 
  2934  019C                     	;# 
  2935  019C                     	;# 
  2936  019D                     	;# 
  2937  019D                     	;# 
  2938  019D                     	;# 
  2939  019E                     	;# 
  2940  019E                     	;# 
  2941  019E                     	;# 
  2942  019F                     	;# 
  2943  019F                     	;# 
  2944  019F                     	;# 
  2945  019F                     	;# 
  2946  019F                     	;# 
  2947  020C                     	;# 
  2948  020D                     	;# 
  2949  020E                     	;# 
  2950  0211                     	;# 
  2951  0211                     	;# 
  2952  0212                     	;# 
  2953  0212                     	;# 
  2954  0213                     	;# 
  2955  0213                     	;# 
  2956  0214                     	;# 
  2957  0214                     	;# 
  2958  0215                     	;# 
  2959  0215                     	;# 
  2960  0215                     	;# 
  2961  0215                     	;# 
  2962  0216                     	;# 
  2963  0216                     	;# 
  2964  0217                     	;# 
  2965  0217                     	;# 
  2966  028C                     	;# 
  2967  028D                     	;# 
  2968  028E                     	;# 
  2969  0291                     	;# 
  2970  0291                     	;# 
  2971  0292                     	;# 
  2972  0293                     	;# 
  2973  0293                     	;# 
  2974  0298                     	;# 
  2975  0298                     	;# 
  2976  0299                     	;# 
  2977  029A                     	;# 
  2978  029A                     	;# 
  2979  029E                     	;# 
  2980  030C                     	;# 
  2981  030D                     	;# 
  2982  030E                     	;# 
  2983  038C                     	;# 
  2984  038D                     	;# 
  2985  038E                     	;# 
  2986  0391                     	;# 
  2987  0392                     	;# 
  2988  0393                     	;# 
  2989  0394                     	;# 
  2990  0395                     	;# 
  2991  0396                     	;# 
  2992  0397                     	;# 
  2993  0398                     	;# 
  2994  0399                     	;# 
  2995  0415                     	;# 
  2996  0416                     	;# 
  2997  0417                     	;# 
  2998  041C                     	;# 
  2999  041D                     	;# 
  3000  041E                     	;# 
  3001  0511                     	;# 
  3002  0515                     	;# 
  3003  0617                     	;# 
  3004  0618                     	;# 
  3005  0619                     	;# 
  3006  0619                     	;# 
  3007  061A                     	;# 
  3008  061B                     	;# 
  3009  061C                     	;# 
  3010  061C                     	;# 
  3011  0691                     	;# 
  3012  0692                     	;# 
  3013  0693                     	;# 
  3014  0694                     	;# 
  3015  0695                     	;# 
  3016  0696                     	;# 
  3017  0697                     	;# 
  3018  0698                     	;# 
  3019  0699                     	;# 
  3020  069A                     	;# 
  3021  069B                     	;# 
  3022  069C                     	;# 
  3023  069D                     	;# 
  3024  069E                     	;# 
  3025  069F                     	;# 
  3026  0E0F                     	;# 
  3027  0E10                     	;# 
  3028  0E11                     	;# 
  3029  0E12                     	;# 
  3030  0E13                     	;# 
  3031  0E14                     	;# 
  3032  0E15                     	;# 
  3033  0E17                     	;# 
  3034  0E20                     	;# 
  3035  0E21                     	;# 
  3036  0E22                     	;# 
  3037  0E24                     	;# 
  3038  0E25                     	;# 
  3039  0E28                     	;# 
  3040  0E29                     	;# 
  3041  0E2A                     	;# 
  3042  0E2B                     	;# 
  3043  0E90                     	;# 
  3044  0E91                     	;# 
  3045  0E92                     	;# 
  3046  0E94                     	;# 
  3047  0E95                     	;# 
  3048  0E9C                     	;# 
  3049  0E9D                     	;# 
  3050  0E9E                     	;# 
  3051  0E9F                     	;# 
  3052  0EA0                     	;# 
  3053  0EA1                     	;# 
  3054  0EA2                     	;# 
  3055  0EA3                     	;# 
  3056  0EA4                     	;# 
  3057  0EA5                     	;# 
  3058  0EA6                     	;# 
  3059  0EA7                     	;# 
  3060  0F0F                     	;# 
  3061  0F10                     	;# 
  3062  0F11                     	;# 
  3063  0F12                     	;# 
  3064  0F13                     	;# 
  3065  0F14                     	;# 
  3066  0F15                     	;# 
  3067  0F16                     	;# 
  3068  0F17                     	;# 
  3069  0F18                     	;# 
  3070  0F19                     	;# 
  3071  0F1A                     	;# 
  3072  0F1B                     	;# 
  3073  0F1C                     	;# 
  3074  0F1D                     	;# 
  3075  0F1E                     	;# 
  3076  0F1F                     	;# 
  3077  0F20                     	;# 
  3078  0F21                     	;# 
  3079  0F22                     	;# 
  3080  0F23                     	;# 
  3081  0F24                     	;# 
  3082  0F25                     	;# 
  3083  0F26                     	;# 
  3084  0F27                     	;# 
  3085  0F28                     	;# 
  3086  0F29                     	;# 
  3087  0F2A                     	;# 
  3088  0F2B                     	;# 
  3089  0F2C                     	;# 
  3090  0F2D                     	;# 
  3091  0FE4                     	;# 
  3092  0FE5                     	;# 
  3093  0FE6                     	;# 
  3094  0FE7                     	;# 
  3095  0FE8                     	;# 
  3096  0FE9                     	;# 
  3097  0FEA                     	;# 
  3098  0FEB                     	;# 
  3099  0FED                     	;# 
  3100  0FEE                     	;# 
  3101  0FEF                     	;# 
  3102  0000                     	;# 
  3103  0001                     	;# 
  3104  0002                     	;# 
  3105  0003                     	;# 
  3106  0004                     	;# 
  3107  0005                     	;# 
  3108  0006                     	;# 
  3109  0007                     	;# 
  3110  0008                     	;# 
  3111  0009                     	;# 
  3112  000A                     	;# 
  3113  000B                     	;# 
  3114  000C                     	;# 
  3115  000D                     	;# 
  3116  000E                     	;# 
  3117  0011                     	;# 
  3118  0012                     	;# 
  3119  0013                     	;# 
  3120  0015                     	;# 
  3121  0016                     	;# 
  3122  0016                     	;# 
  3123  0017                     	;# 
  3124  0018                     	;# 
  3125  0019                     	;# 
  3126  001A                     	;# 
  3127  001B                     	;# 
  3128  001C                     	;# 
  3129  008C                     	;# 
  3130  008D                     	;# 
  3131  008E                     	;# 
  3132  0091                     	;# 
  3133  0092                     	;# 
  3134  0093                     	;# 
  3135  0095                     	;# 
  3136  0096                     	;# 
  3137  0097                     	;# 
  3138  0098                     	;# 
  3139  0099                     	;# 
  3140  009A                     	;# 
  3141  009B                     	;# 
  3142  009B                     	;# 
  3143  009C                     	;# 
  3144  009D                     	;# 
  3145  009E                     	;# 
  3146  009F                     	;# 
  3147  010C                     	;# 
  3148  010D                     	;# 
  3149  010E                     	;# 
  3150  0111                     	;# 
  3151  0112                     	;# 
  3152  0113                     	;# 
  3153  0114                     	;# 
  3154  0115                     	;# 
  3155  0116                     	;# 
  3156  0117                     	;# 
  3157  0118                     	;# 
  3158  0119                     	;# 
  3159  011C                     	;# 
  3160  018C                     	;# 
  3161  018D                     	;# 
  3162  018E                     	;# 
  3163  0191                     	;# 
  3164  0191                     	;# 
  3165  0192                     	;# 
  3166  0193                     	;# 
  3167  0193                     	;# 
  3168  0194                     	;# 
  3169  0195                     	;# 
  3170  0196                     	;# 
  3171  0199                     	;# 
  3172  0199                     	;# 
  3173  0199                     	;# 
  3174  019A                     	;# 
  3175  019A                     	;# 
  3176  019A                     	;# 
  3177  019B                     	;# 
  3178  019B                     	;# 
  3179  019B                     	;# 
  3180  019B                     	;# 
  3181  019B                     	;# 
  3182  019C                     	;# 
  3183  019C                     	;# 
  3184  019C                     	;# 
  3185  019D                     	;# 
  3186  019D                     	;# 
  3187  019D                     	;# 
  3188  019E                     	;# 
  3189  019E                     	;# 
  3190  019E                     	;# 
  3191  019F                     	;# 
  3192  019F                     	;# 
  3193  019F                     	;# 
  3194  019F                     	;# 
  3195  019F                     	;# 
  3196  020C                     	;# 
  3197  020D                     	;# 
  3198  020E                     	;# 
  3199  0211                     	;# 
  3200  0211                     	;# 
  3201  0212                     	;# 
  3202  0212                     	;# 
  3203  0213                     	;# 
  3204  0213                     	;# 
  3205  0214                     	;# 
  3206  0214                     	;# 
  3207  0215                     	;# 
  3208  0215                     	;# 
  3209  0215                     	;# 
  3210  0215                     	;# 
  3211  0216                     	;# 
  3212  0216                     	;# 
  3213  0217                     	;# 
  3214  0217                     	;# 
  3215  028C                     	;# 
  3216  028D                     	;# 
  3217  028E                     	;# 
  3218  0291                     	;# 
  3219  0291                     	;# 
  3220  0292                     	;# 
  3221  0293                     	;# 
  3222  0293                     	;# 
  3223  0298                     	;# 
  3224  0298                     	;# 
  3225  0299                     	;# 
  3226  029A                     	;# 
  3227  029A                     	;# 
  3228  029E                     	;# 
  3229  030C                     	;# 
  3230  030D                     	;# 
  3231  030E                     	;# 
  3232  038C                     	;# 
  3233  038D                     	;# 
  3234  038E                     	;# 
  3235  0391                     	;# 
  3236  0392                     	;# 
  3237  0393                     	;# 
  3238  0394                     	;# 
  3239  0395                     	;# 
  3240  0396                     	;# 
  3241  0397                     	;# 
  3242  0398                     	;# 
  3243  0399                     	;# 
  3244  0415                     	;# 
  3245  0416                     	;# 
  3246  0417                     	;# 
  3247  041C                     	;# 
  3248  041D                     	;# 
  3249  041E                     	;# 
  3250  0511                     	;# 
  3251  0515                     	;# 
  3252  0617                     	;# 
  3253  0618                     	;# 
  3254  0619                     	;# 
  3255  0619                     	;# 
  3256  061A                     	;# 
  3257  061B                     	;# 
  3258  061C                     	;# 
  3259  061C                     	;# 
  3260  0691                     	;# 
  3261  0692                     	;# 
  3262  0693                     	;# 
  3263  0694                     	;# 
  3264  0695                     	;# 
  3265  0696                     	;# 
  3266  0697                     	;# 
  3267  0698                     	;# 
  3268  0699                     	;# 
  3269  069A                     	;# 
  3270  069B                     	;# 
  3271  069C                     	;# 
  3272  069D                     	;# 
  3273  069E                     	;# 
  3274  069F                     	;# 
  3275  0E0F                     	;# 
  3276  0E10                     	;# 
  3277  0E11                     	;# 
  3278  0E12                     	;# 
  3279  0E13                     	;# 
  3280  0E14                     	;# 
  3281  0E15                     	;# 
  3282  0E17                     	;# 
  3283  0E20                     	;# 
  3284  0E21                     	;# 
  3285  0E22                     	;# 
  3286  0E24                     	;# 
  3287  0E25                     	;# 
  3288  0E28                     	;# 
  3289  0E29                     	;# 
  3290  0E2A                     	;# 
  3291  0E2B                     	;# 
  3292  0E90                     	;# 
  3293  0E91                     	;# 
  3294  0E92                     	;# 
  3295  0E94                     	;# 
  3296  0E95                     	;# 
  3297  0E9C                     	;# 
  3298  0E9D                     	;# 
  3299  0E9E                     	;# 
  3300  0E9F                     	;# 
  3301  0EA0                     	;# 
  3302  0EA1                     	;# 
  3303  0EA2                     	;# 
  3304  0EA3                     	;# 
  3305  0EA4                     	;# 
  3306  0EA5                     	;# 
  3307  0EA6                     	;# 
  3308  0EA7                     	;# 
  3309  0F0F                     	;# 
  3310  0F10                     	;# 
  3311  0F11                     	;# 
  3312  0F12                     	;# 
  3313  0F13                     	;# 
  3314  0F14                     	;# 
  3315  0F15                     	;# 
  3316  0F16                     	;# 
  3317  0F17                     	;# 
  3318  0F18                     	;# 
  3319  0F19                     	;# 
  3320  0F1A                     	;# 
  3321  0F1B                     	;# 
  3322  0F1C                     	;# 
  3323  0F1D                     	;# 
  3324  0F1E                     	;# 
  3325  0F1F                     	;# 
  3326  0F20                     	;# 
  3327  0F21                     	;# 
  3328  0F22                     	;# 
  3329  0F23                     	;# 
  3330  0F24                     	;# 
  3331  0F25                     	;# 
  3332  0F26                     	;# 
  3333  0F27                     	;# 
  3334  0F28                     	;# 
  3335  0F29                     	;# 
  3336  0F2A                     	;# 
  3337  0F2B                     	;# 
  3338  0F2C                     	;# 
  3339  0F2D                     	;# 
  3340  0FE4                     	;# 
  3341  0FE5                     	;# 
  3342  0FE6                     	;# 
  3343  0FE7                     	;# 
  3344  0FE8                     	;# 
  3345  0FE9                     	;# 
  3346  0FEA                     	;# 
  3347  0FEB                     	;# 
  3348  0FED                     	;# 
  3349  0FEE                     	;# 
  3350  0FEF                     	;# 
  3351                           
  3352 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3353  0000                     
  3354 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3355  0000                     
  3356 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3357  0000                     
  3358                           	psect	idataBANK1
  3359  061E                     __pidataBANK1:	
  3360                           
  3361                           ;initializer for _maxFrequencyIndex
  3362  061E  3406               	retlw	6
  3363  061F  3400               	retlw	0
  3364                           
  3365                           ;initializer for _maxCurrentIndex
  3366  0620  340B               	retlw	11
  3367  0621  3400               	retlw	0
  3368                           
  3369                           ;initializer for _currentIsOn
  3370  0622  3401               	retlw	1
  3371                           
  3372                           ;initializer for _currentValue
  3373  0623  3400               	retlw	0
  3374  0624  3400               	retlw	0
  3375  0625  341E               	retlw	30
  3376  0626  3400               	retlw	0
  3377  0627  3432               	retlw	50
  3378  0628  3400               	retlw	0
  3379  0629  3446               	retlw	70
  3380  062A  3400               	retlw	0
  3381  062B  345A               	retlw	90
  3382  062C  3400               	retlw	0
  3383  062D  346E               	retlw	110
  3384  062E  3400               	retlw	0
  3385  062F  3482               	retlw	130
  3386  0630  3400               	retlw	0
  3387  0631  34A0               	retlw	160
  3388  0632  3400               	retlw	0
  3389  0633  34BE               	retlw	190
  3390  0634  3400               	retlw	0
  3391  0635  34DC               	retlw	220
  3392  0636  3400               	retlw	0
  3393  0637  34FA               	retlw	250
  3394  0638  3400               	retlw	0
  3395                           
  3396                           ;initializer for _frequencyValue
  3397  0639  3400               	retlw	0
  3398  063A  3400               	retlw	0
  3399  063B  3432               	retlw	50
  3400  063C  3400               	retlw	0
  3401  063D  3464               	retlw	100
  3402  063E  3400               	retlw	0
  3403  063F  3478               	retlw	120
  3404  0640  3400               	retlw	0
  3405  0641  3482               	retlw	130
  3406  0642  3400               	retlw	0
  3407  0643  348C               	retlw	140
  3408  0644  3400               	retlw	0
  3409                           
  3410                           ;initializer for _dc_frequency_flag
  3411  0645  3401               	retlw	1
  3412  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3413  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3414                           
  3415                           	psect	_HEF_persistent_state_text
  3416  0FE0                     __p_HEF_persistent_state_text:	
  3417  0FE0                     _HEF_persistent_state:	
  3418  0FE0  3405               	retlw	5
  3419  0FE1  3403               	retlw	3
  3420  0FE2  3400               	retlw	0
  3421  0FE3  3400               	retlw	0
  3422  0FE4  3400               	retlw	0
  3423  0FE5  3400               	retlw	0
  3424  0FE6  3400               	retlw	0
  3425  0FE7  3400               	retlw	0
  3426  0FE8  3400               	retlw	0
  3427  0FE9  3400               	retlw	0
  3428  0FEA  3400               	retlw	0
  3429  0FEB  3400               	retlw	0
  3430  0FEC  3400               	retlw	0
  3431  0FED  3400               	retlw	0
  3432  0FEE  3400               	retlw	0
  3433  0FEF  3400               	retlw	0
  3434  0FF0  3400               	retlw	0
  3435  0FF1  3400               	retlw	0
  3436  0FF2  3400               	retlw	0
  3437  0FF3  3400               	retlw	0
  3438  0FF4  3400               	retlw	0
  3439  0FF5  3400               	retlw	0
  3440  0FF6  3400               	retlw	0
  3441  0FF7  3400               	retlw	0
  3442  0FF8  3400               	retlw	0
  3443  0FF9  3400               	retlw	0
  3444  0FFA  3400               	retlw	0
  3445  0FFB  3400               	retlw	0
  3446  0FFC  3400               	retlw	0
  3447  0FFD  3400               	retlw	0
  3448  0FFE  3400               	retlw	0
  3449  0FFF  3400               	retlw	0
  3450  1000                     __end_of_HEF_persistent_state:	
  3451                           
  3452                           	psect	nvCOMMON
  3453  007A                     __pnvCOMMON:	
  3454  007A                     _currentIndex:	
  3455  007A                     	ds	2
  3456                           
  3457                           	psect	nvBANK1
  3458  00D8                     __pnvBANK1:	
  3459  00D8                     _TMR4_InterruptHandler:	
  3460  00D8                     	ds	2
  3461  00DA                     _TMR0_InterruptHandler:	
  3462  00DA                     	ds	2
  3463  00DC                     _INT_InterruptHandler:	
  3464  00DC                     	ds	2
  3465  00DE                     _EUSART_ErrorHandler:	
  3466  00DE                     	ds	2
  3467  00E0                     _EUSART_OverrunErrorHandler:	
  3468  00E0                     	ds	2
  3469  00E2                     _EUSART_FramingErrorHandler:	
  3470  00E2                     	ds	2
  3471  00E4                     _frequencyIndex:	
  3472  00E4                     	ds	2
  3473  001C                     _T2CONbits	set	28
  3474  001C                     _T2CON	set	28
  3475  001A                     _TMR2	set	26
  3476  001B                     _PR2	set	27
  3477  0015                     _TMR0	set	21
  3478  0011                     _PIR1bits	set	17
  3479  0012                     _PIR2bits	set	18
  3480  000B                     _INTCONbits	set	11
  3481  009D                     _ADCON0bits	set	157
  3482  009E                     _ADCON1	set	158
  3483  009D                     _ADCON0	set	157
  3484  0095                     _OPTION_REG	set	149
  3485  0092                     _PIE2bits	set	146
  3486  0095                     _OPTION_REGbits	set	149
  3487  008E                     _TRISC	set	142
  3488  008D                     _TRISB	set	141
  3489  008C                     _TRISA	set	140
  3490  0097                     _WDTCON	set	151
  3491  0098                     _OSCTUNE	set	152
  3492  009A                     _OSCSTAT	set	154
  3493  0099                     _OSCCON	set	153
  3494  009B                     _ADRES	set	155
  3495  0117                     _FVRCONbits	set	279
  3496  0117                     _FVRCON	set	279
  3497  010E                     _LATC	set	270
  3498  010D                     _LATB	set	269
  3499  010C                     _LATA	set	268
  3500  0116                     _BORCON	set	278
  3501  0119                     _DAC1CON1	set	281
  3502  0118                     _DAC1CON0	set	280
  3503  0196                     _PMCON2	set	406
  3504  0193                     _PMDATL	set	403
  3505  0194                     _PMDATH	set	404
  3506  0195                     _PMCON1bits	set	405
  3507  0192                     _PMADRH	set	402
  3508  0191                     _PMADRL	set	401
  3509  019A                     _TX1REG	set	410
  3510  019C                     _SP1BRGH	set	412
  3511  019B                     _SP1BRGL	set	411
  3512  019E                     _TX1STA	set	414
  3513  019D                     _RC1STA	set	413
  3514  019F                     _BAUD1CON	set	415
  3515  018C                     _ANSELA	set	396
  3516  018D                     _ANSELB	set	397
  3517  018E                     _ANSELC	set	398
  3518  020E                     _WPUC	set	526
  3519  020C                     _WPUA	set	524
  3520  020D                     _WPUB	set	525
  3521  0291                     _CCPR1L	set	657
  3522  0293                     _CCP1CONbits	set	659
  3523  029E                     _CCPTMRSbits	set	670
  3524  028E                     _ODCONC	set	654
  3525  028D                     _ODCONB	set	653
  3526  028C                     _ODCONA	set	652
  3527  030E                     _SLRCONC	set	782
  3528  030D                     _SLRCONB	set	781
  3529  030C                     _SLRCONA	set	780
  3530  038E                     _INLVLC	set	910
  3531  038D                     _INLVLB	set	909
  3532  038C                     _INLVLA	set	908
  3533  0417                     _T4CON	set	1047
  3534  0415                     _TMR4	set	1045
  3535  0416                     _PR4	set	1046
  3536  0515                     _OPA2CON	set	1301
  3537  0511                     _OPA1CON	set	1297
  3538  061C                     _PWM4CONbits	set	1564
  3539  061A                     _PWM4DCLbits	set	1562
  3540  061B                     _PWM4DCH	set	1563
  3541  0619                     _PWM3CONbits	set	1561
  3542  0617                     _PWM3DCLbits	set	1559
  3543  0618                     _PWM3DCH	set	1560
  3544  0E24                     _RXPPS	set	3620
  3545  0E10                     _INTPPS	set	3600
  3546  0EA5                     _RC5PPS	set	3749
  3547  0E95                     _RA5PPS	set	3733
  3548  0EA4                     _RC4PPS	set	3748
  3549  0E9F                     _RB7PPS	set	3743
  3550                           
  3551                           	psect	stringtext1
  3552  07B9                     __pstringtext1:	
  3553  07B9                     STR_5:	
  3554  07B9  340A               	retlw	10
  3555  07BA  3420               	retlw	32	;' '
  3556  07BB  3472               	retlw	114	;'r'
  3557  07BC  3465               	retlw	101	;'e'
  3558  07BD  3473               	retlw	115	;'s'
  3559  07BE  3465               	retlw	101	;'e'
  3560  07BF  3474               	retlw	116	;'t'
  3561  07C0  3420               	retlw	32	;' '
  3562  07C1  3476               	retlw	118	;'v'
  3563  07C2  3461               	retlw	97	;'a'
  3564  07C3  346C               	retlw	108	;'l'
  3565  07C4  3475               	retlw	117	;'u'
  3566  07C5  3465               	retlw	101	;'e'
  3567  07C6  3420               	retlw	32	;' '
  3568  07C7  3473               	retlw	115	;'s'
  3569  07C8  3465               	retlw	101	;'e'
  3570  07C9  346C               	retlw	108	;'l'
  3571  07CA  3465               	retlw	101	;'e'
  3572  07CB  3463               	retlw	99	;'c'
  3573  07CC  3474               	retlw	116	;'t'
  3574  07CD  3465               	retlw	101	;'e'
  3575  07CE  3464               	retlw	100	;'d'
  3576  07CF  3400               	retlw	0
  3577                           
  3578                           	psect	stringtext2
  3579  07D0                     __pstringtext2:	
  3580  07D0                     STR_1:	
  3581  07D0  340A               	retlw	10
  3582  07D1  3420               	retlw	32	;' '
  3583  07D2  3446               	retlw	70	;'F'
  3584  07D3  3472               	retlw	114	;'r'
  3585  07D4  3465               	retlw	101	;'e'
  3586  07D5  3471               	retlw	113	;'q'
  3587  07D6  3475               	retlw	117	;'u'
  3588  07D7  3465               	retlw	101	;'e'
  3589  07D8  346E               	retlw	110	;'n'
  3590  07D9  3463               	retlw	99	;'c'
  3591  07DA  3479               	retlw	121	;'y'
  3592  07DB  3420               	retlw	32	;' '
  3593  07DC  3473               	retlw	115	;'s'
  3594  07DD  3465               	retlw	101	;'e'
  3595  07DE  346C               	retlw	108	;'l'
  3596  07DF  3465               	retlw	101	;'e'
  3597  07E0  3463               	retlw	99	;'c'
  3598  07E1  3474               	retlw	116	;'t'
  3599  07E2  3465               	retlw	101	;'e'
  3600  07E3  3464               	retlw	100	;'d'
  3601  07E4  3400               	retlw	0
  3602                           
  3603                           	psect	stringtext3
  3604  07FA                     __pstringtext3:	
  3605  07FA                     STR_4:	
  3606  07FA  340A               	retlw	10
  3607  07FB  3420               	retlw	32	;' '
  3608  07FC  3464               	retlw	100	;'d'
  3609  07FD  3465               	retlw	101	;'e'
  3610  07FE  3463               	retlw	99	;'c'
  3611  07FF  3472               	retlw	114	;'r'
  3612  0800  3465               	retlw	101	;'e'
  3613  0801  3461               	retlw	97	;'a'
  3614  0802  3473               	retlw	115	;'s'
  3615  0803  3465               	retlw	101	;'e'
  3616  0804  3420               	retlw	32	;' '
  3617  0805  3473               	retlw	115	;'s'
  3618  0806  3465               	retlw	101	;'e'
  3619  0807  346C               	retlw	108	;'l'
  3620  0808  3465               	retlw	101	;'e'
  3621  0809  3463               	retlw	99	;'c'
  3622  080A  3474               	retlw	116	;'t'
  3623  080B  3465               	retlw	101	;'e'
  3624  080C  3464               	retlw	100	;'d'
  3625  080D  3400               	retlw	0
  3626                           
  3627                           	psect	stringtext4
  3628  080E                     __pstringtext4:	
  3629  080E                     STR_3:	
  3630  080E  340A               	retlw	10
  3631  080F  3420               	retlw	32	;' '
  3632  0810  3469               	retlw	105	;'i'
  3633  0811  346E               	retlw	110	;'n'
  3634  0812  3463               	retlw	99	;'c'
  3635  0813  3472               	retlw	114	;'r'
  3636  0814  3465               	retlw	101	;'e'
  3637  0815  3461               	retlw	97	;'a'
  3638  0816  3473               	retlw	115	;'s'
  3639  0817  3465               	retlw	101	;'e'
  3640  0818  3420               	retlw	32	;' '
  3641  0819  3473               	retlw	115	;'s'
  3642  081A  3465               	retlw	101	;'e'
  3643  081B  346C               	retlw	108	;'l'
  3644  081C  3465               	retlw	101	;'e'
  3645  081D  3463               	retlw	99	;'c'
  3646  081E  3474               	retlw	116	;'t'
  3647  081F  3465               	retlw	101	;'e'
  3648  0820  3464               	retlw	100	;'d'
  3649  0821  3400               	retlw	0
  3650                           
  3651                           	psect	stringtext5
  3652  0822                     __pstringtext5:	
  3653  0822                     STR_2:	
  3654  0822  340A               	retlw	10
  3655  0823  3420               	retlw	32	;' '
  3656  0824  3463               	retlw	99	;'c'
  3657  0825  3475               	retlw	117	;'u'
  3658  0826  3472               	retlw	114	;'r'
  3659  0827  3472               	retlw	114	;'r'
  3660  0828  3465               	retlw	101	;'e'
  3661  0829  346E               	retlw	110	;'n'
  3662  082A  3474               	retlw	116	;'t'
  3663  082B  3420               	retlw	32	;' '
  3664  082C  3473               	retlw	115	;'s'
  3665  082D  3465               	retlw	101	;'e'
  3666  082E  346C               	retlw	108	;'l'
  3667  082F  3465               	retlw	101	;'e'
  3668  0830  3463               	retlw	99	;'c'
  3669  0831  3474               	retlw	116	;'t'
  3670  0832  3465               	retlw	101	;'e'
  3671  0833  3464               	retlw	100	;'d'
  3672  0834  3400               	retlw	0
  3673                           
  3674                           	psect	stringtext6
  3675  0000                     __pstringtext6:	
  3676                           
  3677                           ; #config settings
  3678  0000                     
  3679                           	psect	cinit
  3680  0029                     start_initialization:	
  3681  0029                     __initialization:	
  3682                           
  3683                           ; Initialize objects allocated to BANK1
  3684  0029  301E               	movlw	low __pidataBANK1
  3685  002A  0084               	movwf	4
  3686  002B  3086               	movlw	(high __pidataBANK1)| (0+128)
  3687  002C  0085               	movwf	5
  3688  002D  30A0               	movlw	low __pdataBANK1
  3689  002E  0086               	movwf	6
  3690  002F  3000               	movlw	high __pdataBANK1
  3691  0030  0087               	movwf	7
  3692  0031  3028               	movlw	40
  3693  0032  318F  2759  3180   	fcall	init_ram
  3694                           
  3695                           ; Clear objects allocated to BANK0
  3696  0035  01EF               	clrf	__pbssBANK0& (0+127)
  3697                           
  3698                           ; Clear objects allocated to BANK1
  3699  0036  30C8               	movlw	low __pbssBANK1
  3700  0037  0084               	movwf	4
  3701  0038  3000               	movlw	high __pbssBANK1
  3702  0039  0085               	movwf	5
  3703  003A  3010               	movlw	16
  3704  003B  318F  2753  3180   	fcall	clear_ram0
  3705                           
  3706                           ; Clear objects allocated to BANK2
  3707  003E  3020               	movlw	low __pbssBANK2
  3708  003F  0084               	movwf	4
  3709  0040  3001               	movlw	high __pbssBANK2
  3710  0041  0085               	movwf	5
  3711  0042  3021               	movlw	33
  3712  0043  318F  2753         	fcall	clear_ram0
  3713  0045                     end_of_initialization:	
  3714                           ;End of C runtime variable initialization code
  3715                           
  3716  0045                     __end_of__initialization:	
  3717  0045  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3718  0046  0020               	movlb	0
  3719  0047  3182  2AA1         	ljmp	_main	;jump to C main() function
  3720                           
  3721                           	psect	bssBANK0
  3722  006F                     __pbssBANK0:	
  3723  006F                     _interfaceState:	
  3724  006F                     	ds	1
  3725                           
  3726                           	psect	bssBANK1
  3727  00C8                     __pbssBANK1:	
  3728  00C8                     _Vdd_mv:	
  3729  00C8                     	ds	2
  3730  00CA                     _microamps:	
  3731  00CA                     	ds	2
  3732  00CC                     _LED_blue:	
  3733  00CC                     	ds	1
  3734  00CD                     _LED_green:	
  3735  00CD                     	ds	1
  3736  00CE                     _LED_red:	
  3737  00CE                     	ds	1
  3738  00CF                     _dac_value:	
  3739  00CF                     	ds	1
  3740  00D0                     _timer0ReloadVal:	
  3741  00D0                     	ds	1
  3742  00D1                     _eusartRxLastError:	
  3743  00D1                     	ds	1
  3744  00D2                     _ir_code:	
  3745  00D2                     	ds	6
  3746                           
  3747                           	psect	dataBANK1
  3748  00A0                     __pdataBANK1:	
  3749  00A0                     _maxFrequencyIndex:	
  3750  00A0                     	ds	2
  3751  00A2                     _maxCurrentIndex:	
  3752  00A2                     	ds	2
  3753  00A4                     _currentIsOn:	
  3754  00A4                     	ds	1
  3755  00A5                     _currentValue:	
  3756  00A5                     	ds	22
  3757  00BB                     _frequencyValue:	
  3758  00BB                     	ds	12
  3759  00C7                     _dc_frequency_flag:	
  3760  00C7                     	ds	1
  3761                           
  3762                           	psect	bssBANK2
  3763  0120                     __pbssBANK2:	
  3764  0120                     _stats:	
  3765  0120                     	ds	33
  3766                           
  3767                           	psect	inittext
  3768  0F59                     init_ram:	
  3769  0F59  00FE               	movwf	126
  3770  0F5A                     initloop:	
  3771  0F5A  0012               	moviw fsr0++
  3772  0F5B  001E               	movwi fsr1++
  3773  0F5C  0BFE               	decfsz	126,f
  3774  0F5D  2F5A               	goto	initloop
  3775  0F5E  3400               	retlw	0
  3776                           
  3777                           	psect	clrtext
  3778  0F53                     clear_ram0:	
  3779                           ;	Called with FSR0 containing the base address, and
  3780                           ;	WREG with the size to clear
  3781                           
  3782  0F53  0064               	clrwdt	;clear the watchdog before getting into this loop
  3783  0F54                     clrloop0:	
  3784  0F54  0180               	clrf	0	;clear RAM location pointed to by FSR
  3785  0F55  3101               	addfsr 0,1
  3786  0F56  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3787  0F57  2F54               	goto	clrloop0	;have we reached the end yet?
  3788  0F58  3400               	retlw	0	;all done for this memory range, return
  3789                           
  3790                           	psect	cstackBANK1
  3791  00E6                     __pcstackBANK1:	
  3792  00E6                     process_remote_command@code:	
  3793                           
  3794                           ; 1 bytes @ 0x0
  3795  00E6                     	ds	1
  3796  00E7                     ??_main:	
  3797                           
  3798                           ; 1 bytes @ 0x1
  3799  00E7                     	ds	1
  3800  00E8                     main@batt_mv:	
  3801                           
  3802                           ; 2 bytes @ 0x2
  3803  00E8                     	ds	2
  3804                           
  3805                           	psect	cstackCOMMON
  3806  0070                     __pcstackCOMMON:	
  3807  0070                     ?_PIN_MANAGER_Initialize:	
  3808  0070                     ?_OSCILLATOR_Initialize:	
  3809                           ; 1 bytes @ 0x0
  3810                           
  3811  0070                     ?_WDT_Initialize:	
  3812                           ; 1 bytes @ 0x0
  3813                           
  3814  0070                     ?_OPA1_Initialize:	
  3815                           ; 1 bytes @ 0x0
  3816                           
  3817  0070                     ?_TMR4_Initialize:	
  3818                           ; 1 bytes @ 0x0
  3819                           
  3820  0070                     ?_OPA2_Initialize:	
  3821                           ; 1 bytes @ 0x0
  3822                           
  3823  0070                     ?_TMR2_Initialize:	
  3824                           ; 1 bytes @ 0x0
  3825                           
  3826  0070                     ?_EXT_INT_Initialize:	
  3827                           ; 1 bytes @ 0x0
  3828                           
  3829  0070                     ?_TMR0_Initialize:	
  3830                           ; 1 bytes @ 0x0
  3831                           
  3832  0070                     ?_EUSART_Initialize:	
  3833                           ; 1 bytes @ 0x0
  3834                           
  3835  0070                     ?_TMR0_ISR:	
  3836                           ; 1 bytes @ 0x0
  3837                           
  3838  0070                     ??_TMR0_ISR:	
  3839                           ; 1 bytes @ 0x0
  3840                           
  3841  0070                     ?_INT_ISR:	
  3842                           ; 1 bytes @ 0x0
  3843                           
  3844  0070                     ?_TMR4_ISR:	
  3845                           ; 1 bytes @ 0x0
  3846                           
  3847  0070                     ?_INT_CallBack:	
  3848                           ; 1 bytes @ 0x0
  3849                           
  3850  0070                     ?_TMR0_DefaultInterruptHandler:	
  3851                           ; 1 bytes @ 0x0
  3852                           
  3853  0070                     ??_TMR0_DefaultInterruptHandler:	
  3854                           ; 1 bytes @ 0x0
  3855                           
  3856  0070                     ?_TMR4_DefaultInterruptHandler:	
  3857                           ; 1 bytes @ 0x0
  3858                           
  3859  0070                     ?_DAC_Initialize:	
  3860                           ; 1 bytes @ 0x0
  3861                           
  3862  0070                     ?_DAC_SetOutput:	
  3863                           ; 1 bytes @ 0x0
  3864                           
  3865  0070                     ??_DAC_SetOutput:	
  3866                           ; 1 bytes @ 0x0
  3867                           
  3868  0070                     ?_SYSTEM_Initialize:	
  3869                           ; 1 bytes @ 0x0
  3870                           
  3871  0070                     ?_PIN_MANAGER_IOC:	
  3872                           ; 1 bytes @ 0x0
  3873                           
  3874  0070                     ??_PIN_MANAGER_IOC:	
  3875                           ; 1 bytes @ 0x0
  3876                           
  3877  0070                     ?_INTERRUPT_InterruptManager:	
  3878                           ; 1 bytes @ 0x0
  3879                           
  3880  0070                     ?_EUSART_Write:	
  3881                           ; 1 bytes @ 0x0
  3882                           
  3883  0070                     ?_putch:	
  3884                           ; 1 bytes @ 0x0
  3885                           
  3886  0070                     ?_INT_DefaultInterruptHandler:	
  3887                           ; 1 bytes @ 0x0
  3888                           
  3889  0070                     ??_INT_DefaultInterruptHandler:	
  3890                           ; 1 bytes @ 0x0
  3891                           
  3892  0070                     ?_TMR4_LoadPeriodRegister:	
  3893                           ; 1 bytes @ 0x0
  3894                           
  3895  0070                     ?_readPersistentState:	
  3896                           ; 1 bytes @ 0x0
  3897                           
  3898  0070                     ?_writePersistentState:	
  3899                           ; 1 bytes @ 0x0
  3900                           
  3901  0070                     ?_initLED:	
  3902                           ; 1 bytes @ 0x0
  3903                           
  3904  0070                     ?_lowBattery:	
  3905                           ; 1 bytes @ 0x0
  3906                           
  3907  0070                     ?_startUp:	
  3908                           ; 1 bytes @ 0x0
  3909                           
  3910  0070                     ?_selectSomething:	
  3911                           ; 1 bytes @ 0x0
  3912                           
  3913  0070                     ?_selectFrequency:	
  3914                           ; 1 bytes @ 0x0
  3915                           
  3916  0070                     ?_selectCurrent:	
  3917                           ; 1 bytes @ 0x0
  3918                           
  3919  0070                     ?_selectIncrease:	
  3920                           ; 1 bytes @ 0x0
  3921                           
  3922  0070                     ?_selectDecrease:	
  3923                           ; 1 bytes @ 0x0
  3924                           
  3925  0070                     ?_selectResetValue:	
  3926                           ; 1 bytes @ 0x0
  3927                           
  3928  0070                     ?_process_remote_command:	
  3929                           ; 1 bytes @ 0x0
  3930                           
  3931  0070                     ?_main:	
  3932                           ; 1 bytes @ 0x0
  3933                           
  3934  0070                     DAC_SetOutput@inputData:	
  3935                           ; 1 bytes @ 0x0
  3936                           
  3937                           
  3938                           ; 1 bytes @ 0x0
  3939  0070                     	ds	1
  3940  0071                     ??_TMR4_ISR:	
  3941  0071                     ??_TMR4_DefaultInterruptHandler:	
  3942                           ; 1 bytes @ 0x1
  3943                           
  3944  0071                     INT_DefaultInterruptHandler@time:	
  3945                           ; 1 bytes @ 0x1
  3946                           
  3947                           
  3948                           ; 1 bytes @ 0x1
  3949  0071                     	ds	1
  3950  0072                     ??_PIN_MANAGER_Initialize:	
  3951  0072                     ??_OSCILLATOR_Initialize:	
  3952                           ; 1 bytes @ 0x2
  3953                           
  3954  0072                     ??_WDT_Initialize:	
  3955                           ; 1 bytes @ 0x2
  3956                           
  3957  0072                     ??_OPA1_Initialize:	
  3958                           ; 1 bytes @ 0x2
  3959                           
  3960  0072                     ??_OPA2_Initialize:	
  3961                           ; 1 bytes @ 0x2
  3962                           
  3963  0072                     ??_TMR2_Initialize:	
  3964                           ; 1 bytes @ 0x2
  3965                           
  3966  0072                     ??_INT_ISR:	
  3967                           ; 1 bytes @ 0x2
  3968                           
  3969  0072                     ?_EUSART_SetFramingErrorHandler:	
  3970                           ; 1 bytes @ 0x2
  3971                           
  3972  0072                     ?_EUSART_SetOverrunErrorHandler:	
  3973                           ; 1 bytes @ 0x2
  3974                           
  3975  0072                     ?_EUSART_SetErrorHandler:	
  3976                           ; 1 bytes @ 0x2
  3977                           
  3978  0072                     ??_INT_CallBack:	
  3979                           ; 1 bytes @ 0x2
  3980                           
  3981  0072                     ?_TMR0_SetInterruptHandler:	
  3982                           ; 1 bytes @ 0x2
  3983                           
  3984  0072                     ?_TMR4_SetInterruptHandler:	
  3985                           ; 1 bytes @ 0x2
  3986                           
  3987  0072                     ?_FLASH_EraseBlock:	
  3988                           ; 1 bytes @ 0x2
  3989                           
  3990  0072                     ??_DAC_Initialize:	
  3991                           ; 1 bytes @ 0x2
  3992                           
  3993  0072                     ??_INTERRUPT_InterruptManager:	
  3994                           ; 1 bytes @ 0x2
  3995                           
  3996  0072                     ??_EUSART_Write:	
  3997                           ; 1 bytes @ 0x2
  3998                           
  3999  0072                     ?_INT_SetInterruptHandler:	
  4000                           ; 1 bytes @ 0x2
  4001                           
  4002  0072                     ??_TMR4_LoadPeriodRegister:	
  4003                           ; 1 bytes @ 0x2
  4004                           
  4005  0072                     ??_readPersistentState:	
  4006                           ; 1 bytes @ 0x2
  4007                           
  4008  0072                     ??_initLED:	
  4009                           ; 1 bytes @ 0x2
  4010                           
  4011  0072                     ?_setLEDColor:	
  4012                           ; 1 bytes @ 0x2
  4013                           
  4014  0072                     ?___awdiv:	
  4015                           ; 1 bytes @ 0x2
  4016                           
  4017  0072                     ?___lmul:	
  4018                           ; 2 bytes @ 0x2
  4019                           
  4020  0072                     EUSART_Write@txData:	
  4021                           ; 4 bytes @ 0x2
  4022                           
  4023  0072                     TMR4_LoadPeriodRegister@periodVal:	
  4024                           ; 1 bytes @ 0x2
  4025                           
  4026  0072                     setLEDColor@green:	
  4027                           ; 1 bytes @ 0x2
  4028                           
  4029  0072                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4030                           ; 1 bytes @ 0x2
  4031                           
  4032  0072                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4033                           ; 2 bytes @ 0x2
  4034                           
  4035  0072                     EUSART_SetErrorHandler@interruptHandler:	
  4036                           ; 2 bytes @ 0x2
  4037                           
  4038  0072                     INT_SetInterruptHandler@InterruptHandler:	
  4039                           ; 2 bytes @ 0x2
  4040                           
  4041  0072                     TMR0_SetInterruptHandler@InterruptHandler:	
  4042                           ; 2 bytes @ 0x2
  4043                           
  4044  0072                     TMR4_SetInterruptHandler@InterruptHandler:	
  4045                           ; 2 bytes @ 0x2
  4046                           
  4047  0072                     FLASH_EraseBlock@startAddr:	
  4048                           ; 2 bytes @ 0x2
  4049                           
  4050  0072                     ___awdiv@divisor:	
  4051                           ; 2 bytes @ 0x2
  4052                           
  4053  0072                     ___lmul@multiplier:	
  4054                           ; 2 bytes @ 0x2
  4055                           
  4056                           
  4057                           ; 4 bytes @ 0x2
  4058  0072                     	ds	1
  4059  0073                     ??_putch:	
  4060  0073                     putch@txData:	
  4061                           ; 1 bytes @ 0x3
  4062                           
  4063  0073                     setLEDColor@blue:	
  4064                           ; 1 bytes @ 0x3
  4065                           
  4066                           
  4067                           ; 1 bytes @ 0x3
  4068  0073                     	ds	1
  4069  0074                     ??_TMR4_Initialize:	
  4070  0074                     ??_EXT_INT_Initialize:	
  4071                           ; 1 bytes @ 0x4
  4072                           
  4073  0074                     ??_TMR0_Initialize:	
  4074                           ; 1 bytes @ 0x4
  4075                           
  4076  0074                     ??_EUSART_Initialize:	
  4077                           ; 1 bytes @ 0x4
  4078                           
  4079  0074                     ??_EUSART_SetFramingErrorHandler:	
  4080                           ; 1 bytes @ 0x4
  4081                           
  4082  0074                     ??_EUSART_SetOverrunErrorHandler:	
  4083                           ; 1 bytes @ 0x4
  4084                           
  4085  0074                     ??_EUSART_SetErrorHandler:	
  4086                           ; 1 bytes @ 0x4
  4087                           
  4088  0074                     ??_TMR0_SetInterruptHandler:	
  4089                           ; 1 bytes @ 0x4
  4090                           
  4091  0074                     ??_TMR4_SetInterruptHandler:	
  4092                           ; 1 bytes @ 0x4
  4093                           
  4094  0074                     ??_FLASH_EraseBlock:	
  4095                           ; 1 bytes @ 0x4
  4096                           
  4097  0074                     ??_SYSTEM_Initialize:	
  4098                           ; 1 bytes @ 0x4
  4099                           
  4100  0074                     ??_INT_SetInterruptHandler:	
  4101                           ; 1 bytes @ 0x4
  4102                           
  4103  0074                     ??_setLEDColor:	
  4104                           ; 1 bytes @ 0x4
  4105                           
  4106  0074                     ?_printf:	
  4107                           ; 1 bytes @ 0x4
  4108                           
  4109  0074                     FLASH_EraseBlock@GIEBitValue:	
  4110                           ; 2 bytes @ 0x4
  4111                           
  4112  0074                     printf@f:	
  4113                           ; 1 bytes @ 0x4
  4114                           
  4115  0074                     ___awdiv@dividend:	
  4116                           ; 2 bytes @ 0x4
  4117                           
  4118                           
  4119                           ; 2 bytes @ 0x4
  4120  0074                     	ds	1
  4121  0075                     ?_FLASH_WriteBlock:	
  4122  0075                     setLEDColor@red:	
  4123                           ; 1 bytes @ 0x5
  4124                           
  4125  0075                     FLASH_WriteBlock@writeAddr:	
  4126                           ; 1 bytes @ 0x5
  4127                           
  4128                           
  4129                           ; 2 bytes @ 0x5
  4130  0075                     	ds	1
  4131  0076                     ??_printf:	
  4132  0076                     ??_lowBattery:	
  4133                           ; 1 bytes @ 0x6
  4134                           
  4135  0076                     ??_startUp:	
  4136                           ; 1 bytes @ 0x6
  4137                           
  4138  0076                     ??_selectSomething:	
  4139                           ; 1 bytes @ 0x6
  4140                           
  4141  0076                     ??___awdiv:	
  4142                           ; 1 bytes @ 0x6
  4143                           
  4144  0076                     ___lmul@multiplicand:	
  4145                           ; 1 bytes @ 0x6
  4146                           
  4147                           
  4148                           ; 4 bytes @ 0x6
  4149  0076                     	ds	1
  4150  0077                     FLASH_WriteBlock@flashWordArray:	
  4151                           
  4152                           ; 1 bytes @ 0x7
  4153  0077                     	ds	1
  4154  0078                     startUp@i:	
  4155                           
  4156                           ; 2 bytes @ 0x8
  4157  0078                     	ds	1
  4158  0079                     ??_selectDecrease:	
  4159                           
  4160                           ; 1 bytes @ 0x9
  4161  0079                     	ds	1
  4162  007A                     ??_battery_voltage:	
  4163  007A                     ??___lmul:	
  4164                           ; 1 bytes @ 0xA
  4165                           
  4166                           
  4167                           	psect	cstackBANK0
  4168  0020                     __pcstackBANK0:	
  4169                           ; 1 bytes @ 0xA
  4170                           
  4171  0020                     ??_FLASH_WriteBlock:	
  4172  0020                     printf@ap:	
  4173                           ; 1 bytes @ 0x0
  4174                           
  4175  0020                     ___awdiv@counter:	
  4176                           ; 1 bytes @ 0x0
  4177                           
  4178  0020                     ___lmul@product:	
  4179                           ; 1 bytes @ 0x0
  4180                           
  4181                           
  4182                           ; 4 bytes @ 0x0
  4183  0020                     	ds	1
  4184  0021                     printf@c:	
  4185  0021                     ___awdiv@sign:	
  4186                           ; 1 bytes @ 0x1
  4187                           
  4188                           
  4189                           ; 1 bytes @ 0x1
  4190  0021                     	ds	1
  4191  0022                     ??_selectFrequency:	
  4192  0022                     ??_selectCurrent:	
  4193                           ; 1 bytes @ 0x2
  4194                           
  4195  0022                     ??_selectIncrease:	
  4196                           ; 1 bytes @ 0x2
  4197                           
  4198  0022                     ??_selectResetValue:	
  4199                           ; 1 bytes @ 0x2
  4200                           
  4201  0022                     ___awdiv@quotient:	
  4202                           ; 1 bytes @ 0x2
  4203                           
  4204                           
  4205                           ; 2 bytes @ 0x2
  4206  0022                     	ds	1
  4207  0023                     FLASH_WriteBlock@blockStartAddr:	
  4208                           
  4209                           ; 2 bytes @ 0x3
  4210  0023                     	ds	1
  4211  0024                     ?___aldiv:	
  4212  0024                     ___aldiv@divisor:	
  4213                           ; 4 bytes @ 0x4
  4214                           
  4215                           
  4216                           ; 4 bytes @ 0x4
  4217  0024                     	ds	1
  4218  0025                     FLASH_WriteBlock@GIEBitValue:	
  4219                           
  4220                           ; 1 bytes @ 0x5
  4221  0025                     	ds	1
  4222  0026                     FLASH_WriteBlock@i:	
  4223                           
  4224                           ; 1 bytes @ 0x6
  4225  0026                     	ds	1
  4226  0027                     ??_writePersistentState:	
  4227                           
  4228                           ; 1 bytes @ 0x7
  4229  0027                     	ds	1
  4230  0028                     ___aldiv@dividend:	
  4231                           
  4232                           ; 4 bytes @ 0x8
  4233  0028                     	ds	3
  4234  002B                     writePersistentState@buf:	
  4235                           
  4236                           ; 64 bytes @ 0xB
  4237  002B                     	ds	1
  4238  002C                     ??___aldiv:	
  4239                           
  4240                           ; 1 bytes @ 0xC
  4241  002C                     	ds	1
  4242  002D                     ___aldiv@counter:	
  4243                           
  4244                           ; 1 bytes @ 0xD
  4245  002D                     	ds	1
  4246  002E                     ___aldiv@sign:	
  4247                           
  4248                           ; 1 bytes @ 0xE
  4249  002E                     	ds	1
  4250  002F                     ___aldiv@quotient:	
  4251                           
  4252                           ; 4 bytes @ 0xF
  4253  002F                     	ds	4
  4254  0033                     ?_setFrequency:	
  4255  0033                     ?_battery_voltage:	
  4256                           ; 1 bytes @ 0x13
  4257                           
  4258  0033                     setFrequency@frequency_hz:	
  4259                           ; 2 bytes @ 0x13
  4260                           
  4261                           
  4262                           ; 2 bytes @ 0x13
  4263  0033                     	ds	2
  4264  0035                     ?_setCurrent:	
  4265  0035                     ??_setFrequency:	
  4266                           ; 1 bytes @ 0x15
  4267                           
  4268  0035                     setCurrent@microamps:	
  4269                           ; 1 bytes @ 0x15
  4270                           
  4271                           
  4272                           ; 2 bytes @ 0x15
  4273  0035                     	ds	1
  4274  0036                     setFrequency@PR4_val:	
  4275                           
  4276                           ; 2 bytes @ 0x16
  4277  0036                     	ds	1
  4278  0037                     setCurrent@Vdd_mv:	
  4279                           
  4280                           ; 2 bytes @ 0x17
  4281  0037                     	ds	2
  4282  0039                     ??_setCurrent:	
  4283                           
  4284                           ; 1 bytes @ 0x19
  4285  0039                     	ds	8
  4286  0041                     setCurrent@Vdac_mv:	
  4287                           
  4288                           ; 2 bytes @ 0x21
  4289  0041                     	ds	2
  4290  0043                     setCurrent@DACValue:	
  4291                           
  4292                           ; 2 bytes @ 0x23
  4293  0043                     	ds	40
  4294  006B                     writePersistentState@i:	
  4295                           
  4296                           ; 1 bytes @ 0x4B
  4297  006B                     	ds	1
  4298  006C                     writePersistentState@idx:	
  4299                           
  4300                           ; 1 bytes @ 0x4C
  4301  006C                     	ds	1
  4302  006D                     ??_process_remote_command:	
  4303                           
  4304                           ; 1 bytes @ 0x4D
  4305  006D                     	ds	2
  4306                           
  4307                           	psect	maintext
  4308  02A1                     __pmaintext:	
  4309 ;;
  4310 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4311 ;;
  4312 ;; *************** function _main *****************
  4313 ;; Defined at:
  4314 ;;		line 477 in file "main.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;		None
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  batt_mv         2    2[BANK1 ] int 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      void 
  4321 ;; Registers used:
  4322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : B1F/0
  4325 ;;		On exit  : 1F/1
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4328 ;;      Params:         0       0       0       0       0       0       0       0
  4329 ;;      Locals:         0       0       2       0       0       0       0       0
  4330 ;;      Temps:          0       0       1       0       0       0       0       0
  4331 ;;      Totals:         0       0       3       0       0       0       0       0
  4332 ;;Total ram usage:        3 bytes
  4333 ;; Hardware stack levels required when called:    9
  4334 ;; This function calls:
  4335 ;;		_DAC_Initialize
  4336 ;;		_OPA1_Initialize
  4337 ;;		_OPA2_Initialize
  4338 ;;		_SYSTEM_Initialize
  4339 ;;		_battery_voltage
  4340 ;;		_initLED
  4341 ;;		_lowBattery
  4342 ;;		_process_remote_command
  4343 ;;		_readPersistentState
  4344 ;;		_setCurrent
  4345 ;;		_setFrequency
  4346 ;;		_startUp
  4347 ;; This function is called by:
  4348 ;;		Startup code after reset
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           
  4353                           ;psect for function _main
  4354  02A1                     _main:	
  4355                           
  4356                           ;main.c: 479: SYSTEM_Initialize();
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4360  02A1  3187  2703  3182   	fcall	_SYSTEM_Initialize
  4361                           
  4362                           ;main.c: 480: DAC_Initialize();
  4363  02A4  318F  2747  3182   	fcall	_DAC_Initialize
  4364                           
  4365                           ;main.c: 481: OPA1_Initialize();
  4366  02A7  318F  2713  3182   	fcall	_OPA1_Initialize
  4367                           
  4368                           ;main.c: 482: OPA2_Initialize();
  4369  02AA  318F  2717  3182   	fcall	_OPA2_Initialize
  4370                           
  4371                           ;main.c: 483: initLED();
  4372  02AD  3185  2517  3182   	fcall	_initLED
  4373                           
  4374                           ;main.c: 488: readPersistentState();
  4375  02B0  3187  2744  3182   	fcall	_readPersistentState
  4376                           
  4377                           ;main.c: 489: setCurrent(currentValue[currentIndex], battery_voltage());
  4378  02B3  357A               	lslf	_currentIndex,w
  4379  02B4  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4380  02B5  0086               	movwf	6
  4381  02B6  0187               	clrf	7
  4382  02B7  3F40               	moviw [0]fsr1
  4383  02B8  0020               	movlb	0	; select bank0
  4384  02B9  00B5               	movwf	setCurrent@microamps
  4385  02BA  3F41               	moviw [1]fsr1
  4386  02BB  00B6               	movwf	setCurrent@microamps+1
  4387  02BC  3185  25F1  3182   	fcall	_battery_voltage
  4388  02BF  0834               	movf	?_battery_voltage+1,w
  4389  02C0  00B8               	movwf	setCurrent@Vdd_mv+1
  4390  02C1  0833               	movf	?_battery_voltage,w
  4391  02C2  00B7               	movwf	setCurrent@Vdd_mv
  4392  02C3  3181  2184  3182   	fcall	_setCurrent
  4393                           
  4394                           ;main.c: 490: setFrequency(frequencyValue[frequencyIndex]);
  4395  02C6  3564               	lslf	_frequencyIndex^(0+128),w
  4396  02C7  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  4397  02C8  0086               	movwf	6
  4398  02C9  0187               	clrf	7
  4399  02CA  3F40               	moviw [0]fsr1
  4400  02CB  0020               	movlb	0	; select bank0
  4401  02CC  00B3               	movwf	setFrequency@frequency_hz
  4402  02CD  3F41               	moviw [1]fsr1
  4403  02CE  00B4               	movwf	setFrequency@frequency_hz+1
  4404  02CF  3183  236F  3182   	fcall	_setFrequency
  4405                           
  4406                           ;main.c: 492: (INTCONbits.GIE = 1);
  4407  02D2  178B               	bsf	11,7	;volatile
  4408                           
  4409                           ;main.c: 493: (INTCONbits.PEIE = 1);
  4410  02D3  170B               	bsf	11,6	;volatile
  4411                           
  4412                           ;main.c: 494: startUp();
  4413  02D4  3185  255B  3182   	fcall	_startUp
  4414  02D7                     l3114:	
  4415                           
  4416                           ;main.c: 500: int16_t batt_mv = battery_voltage();
  4417  02D7  3185  25F1  3182   	fcall	_battery_voltage
  4418  02DA  0834               	movf	?_battery_voltage+1,w
  4419  02DB  0021               	movlb	1	; select bank1
  4420  02DC  00E9               	movwf	(main@batt_mv+1)^(0+128)
  4421  02DD  0020               	movlb	0	; select bank0
  4422  02DE  0833               	movf	?_battery_voltage,w
  4423  02DF  0021               	movlb	1	; select bank1
  4424  02E0  00E8               	movwf	main@batt_mv^(0+128)
  4425                           
  4426                           ;main.c: 502: if (batt_mv < 2500)
  4427  02E1  0869               	movf	(main@batt_mv+1)^(0+128),w
  4428  02E2  3A80               	xorlw	128
  4429  02E3  00E7               	movwf	??_main^(0+128)
  4430  02E4  3089               	movlw	137
  4431  02E5  0267               	subwf	??_main^(0+128),w
  4432  02E6  1D03               	skipz
  4433  02E7  2AEA               	goto	u2085
  4434  02E8  30C4               	movlw	196
  4435  02E9  0268               	subwf	main@batt_mv^(0+128),w
  4436  02EA                     u2085:	
  4437  02EA  1803               	skipnc
  4438  02EB  2AEF               	goto	l3120
  4439                           
  4440                           ;main.c: 503: {;main.c: 504: lowBattery();
  4441  02EC  3186  266E  3182   	fcall	_lowBattery
  4442  02EF                     l3120:	
  4443                           
  4444                           ;main.c: 506: };main.c: 510: setCurrent(currentValue[currentIndex], batt_mv);
  4445  02EF  357A               	lslf	_currentIndex,w
  4446  02F0  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4447  02F1  0086               	movwf	6
  4448  02F2  0187               	clrf	7
  4449  02F3  3F40               	moviw [0]fsr1
  4450  02F4  0020               	movlb	0	; select bank0
  4451  02F5  00B5               	movwf	setCurrent@microamps
  4452  02F6  3F41               	moviw [1]fsr1
  4453  02F7  00B6               	movwf	setCurrent@microamps+1
  4454  02F8  0021               	movlb	1	; select bank1
  4455  02F9  0869               	movf	(main@batt_mv+1)^(0+128),w
  4456  02FA  0020               	movlb	0	; select bank0
  4457  02FB  00B8               	movwf	setCurrent@Vdd_mv+1
  4458  02FC  0021               	movlb	1	; select bank1
  4459  02FD  0868               	movf	main@batt_mv^(0+128),w
  4460  02FE  0020               	movlb	0	; select bank0
  4461  02FF  00B7               	movwf	setCurrent@Vdd_mv
  4462  0300  3181  2184  3182   	fcall	_setCurrent
  4463                           
  4464                           ;main.c: 517: if (STATE_DONE == ir_code.state){
  4465  0303  3002               	movlw	2
  4466  0304  0653               	xorwf	(_ir_code^(0+128)+1),w
  4467  0305  1D03               	btfss	3,2
  4468  0306  2AD7               	goto	l3114
  4469                           
  4470                           ;main.c: 535: process_remote_command(&ir_code);
  4471  0307  30D2               	movlw	(low (_ir_code| 0))& (0+255)
  4472  0308  3180  2049  3182   	fcall	_process_remote_command
  4473                           
  4474                           ;main.c: 538: ir_code.state = STATE_RESET;
  4475  030B  0021               	movlb	1	; select bank1
  4476  030C  01D3               	clrf	(_ir_code^(0+128)+1)
  4477  030D  2AD7               	goto	l3114
  4478  030E                     __end_of_main:	
  4479                           
  4480                           	psect	text1
  4481  055B                     __ptext1:	
  4482 ;; *************** function _startUp *****************
  4483 ;; Defined at:
  4484 ;;		line 252 in file "main.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;		None
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;  i               2    8[COMMON] int 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  1    wreg      void 
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0, pclath, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 1F/1
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4498 ;;      Params:         0       0       0       0       0       0       0       0
  4499 ;;      Locals:         2       0       0       0       0       0       0       0
  4500 ;;      Temps:          2       0       0       0       0       0       0       0
  4501 ;;      Totals:         4       0       0       0       0       0       0       0
  4502 ;;Total ram usage:        4 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    5
  4505 ;; This function calls:
  4506 ;;		_setLEDColor
  4507 ;; This function is called by:
  4508 ;;		_main
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           
  4513                           ;psect for function _startUp
  4514  055B                     _startUp:	
  4515                           
  4516                           ;main.c: 253: interfaceState = STATE_RUNNING;
  4517                           
  4518                           ;incstack = 0
  4519                           ; Regs used in _startUp: [wreg+status,2+status,0+pclath+cstack]
  4520  055B  0020               	movlb	0	; select bank0
  4521  055C  01EF               	clrf	_interfaceState
  4522                           
  4523                           ;main.c: 254: for (int i = 0; i < 5; i++){
  4524  055D  01F8               	clrf	startUp@i
  4525  055E  01F9               	clrf	startUp@i+1
  4526  055F                     l2990:	
  4527                           
  4528                           ;main.c: 255: setLEDColor(0, 180, 230);
  4529  055F  30B4               	movlw	180
  4530  0560  00F6               	movwf	??_startUp
  4531  0561  0876               	movf	??_startUp,w
  4532  0562  00F2               	movwf	setLEDColor@green
  4533  0563  30E6               	movlw	230
  4534  0564  00F7               	movwf	??_startUp+1
  4535  0565  0877               	movf	??_startUp+1,w
  4536  0566  00F3               	movwf	setLEDColor@blue
  4537  0567  3000               	movlw	0
  4538  0568  3187  27E5  3185   	fcall	_setLEDColor
  4539                           
  4540                           ;main.c: 256: _delay((unsigned long)((100)*(4000000/4000.0)));
  4541  056B  3082               	movlw	130
  4542  056C  00F6               	movwf	??_startUp
  4543  056D  30DE               	movlw	222
  4544  056E                     u2107:	
  4545  056E  0B89               	decfsz	9,f
  4546  056F  2D6E               	goto	u2107
  4547  0570  0BF6               	decfsz	??_startUp,f
  4548  0571  2D6E               	goto	u2107
  4549                           
  4550                           ;main.c: 257: setLEDColor(0, 0, 0);
  4551  0572  01F2               	clrf	setLEDColor@green
  4552  0573  01F3               	clrf	setLEDColor@blue
  4553  0574  3000               	movlw	0
  4554  0575  3187  27E5  3185   	fcall	_setLEDColor
  4555                           
  4556                           ;main.c: 258: _delay((unsigned long)((100)*(4000000/4000.0)));
  4557  0578  3082               	movlw	130
  4558  0579  00F6               	movwf	??_startUp
  4559  057A  30DE               	movlw	222
  4560  057B                     u2117:	
  4561  057B  0B89               	decfsz	9,f
  4562  057C  2D7B               	goto	u2117
  4563  057D  0BF6               	decfsz	??_startUp,f
  4564  057E  2D7B               	goto	u2117
  4565  057F  3001               	movlw	1
  4566  0580  07F8               	addwf	startUp@i,f
  4567  0581  3000               	movlw	0
  4568  0582  3DF9               	addwfc	startUp@i+1,f
  4569  0583  0879               	movf	startUp@i+1,w
  4570  0584  3A80               	xorlw	128
  4571  0585  00F6               	movwf	??_startUp
  4572  0586  3080               	movlw	128
  4573  0587  0276               	subwf	??_startUp,w
  4574  0588  1D03               	skipz
  4575  0589  2D8C               	goto	u1955
  4576  058A  3005               	movlw	5
  4577  058B  0278               	subwf	startUp@i,w
  4578  058C                     u1955:	
  4579  058C  1803               	btfsc	3,0
  4580  058D  0008               	return
  4581  058E  2D5F               	goto	l2990
  4582  058F                     __end_of_startUp:	
  4583                           
  4584                           	psect	text2
  4585  0744                     __ptext2:	
  4586 ;; *************** function _readPersistentState *****************
  4587 ;; Defined at:
  4588 ;;		line 115 in file "main.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;		None
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;		None
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  1    wreg      void 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr0l, fsr0h, pclath
  4597 ;; Tracked objects:
  4598 ;;		On entry : 1F/1
  4599 ;;		On exit  : 1F/1
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4602 ;;      Params:         0       0       0       0       0       0       0       0
  4603 ;;      Locals:         0       0       0       0       0       0       0       0
  4604 ;;      Temps:          2       0       0       0       0       0       0       0
  4605 ;;      Totals:         2       0       0       0       0       0       0       0
  4606 ;;Total ram usage:        2 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    4
  4609 ;; This function calls:
  4610 ;;		Nothing
  4611 ;; This function is called by:
  4612 ;;		_main
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _readPersistentState
  4618  0744                     _readPersistentState:	
  4619                           
  4620                           ;main.c: 117: currentIndex = HEF_persistent_state.currentIndex;
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in _readPersistentState: [wreg-fsr0h+pclath]
  4624  0744  30E0               	movlw	224
  4625  0745  0084               	movwf	4
  4626  0746  308F               	movlw	143
  4627  0747  0085               	movwf	5
  4628  0748  0800               	movf	0,w	;code access
  4629  0749  00F2               	movwf	??_readPersistentState
  4630  074A  01F3               	clrf	??_readPersistentState+1
  4631  074B  0872               	movf	??_readPersistentState,w
  4632  074C  00FA               	movwf	_currentIndex
  4633  074D  0873               	movf	??_readPersistentState+1,w
  4634  074E  00FB               	movwf	_currentIndex+1
  4635                           
  4636                           ;main.c: 118: frequencyIndex = HEF_persistent_state.frequencyIndex;
  4637  074F  30E1               	movlw	225
  4638  0750  0084               	movwf	4
  4639  0751  308F               	movlw	143
  4640  0752  0085               	movwf	5
  4641  0753  0800               	movf	0,w	;code access
  4642  0754  00F2               	movwf	??_readPersistentState
  4643  0755  01F3               	clrf	??_readPersistentState+1
  4644  0756  0872               	movf	??_readPersistentState,w
  4645  0757  00E4               	movwf	_frequencyIndex^(0+128)
  4646  0758  0873               	movf	??_readPersistentState+1,w
  4647  0759  00E5               	movwf	(_frequencyIndex+1)^(0+128)
  4648                           
  4649                           ;main.c: 119: dc_frequency_flag = HEF_persistent_state.dc_frequency_flag;
  4650  075A  30E2               	movlw	226
  4651  075B  0084               	movwf	4
  4652  075C  308F               	movlw	143
  4653  075D  0085               	movwf	5
  4654  075E  0800               	movf	0,w	;code access
  4655  075F  00F2               	movwf	??_readPersistentState
  4656  0760  0872               	movf	??_readPersistentState,w
  4657  0761  00C7               	movwf	_dc_frequency_flag^(0+128)
  4658  0762  0008               	return
  4659  0763                     __end_of_readPersistentState:	
  4660                           
  4661                           	psect	text3
  4662  0049                     __ptext3:	
  4663 ;; *************** function _process_remote_command *****************
  4664 ;; Defined at:
  4665 ;;		line 366 in file "main.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  code            1    wreg     PTR struct .
  4668 ;;		 -> ir_code(6), 
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;  code            1    0[BANK1 ] PTR struct .
  4671 ;;		 -> ir_code(6), 
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  1    wreg      void 
  4674 ;; Registers used:
  4675 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4676 ;; Tracked objects:
  4677 ;;		On entry : 1F/1
  4678 ;;		On exit  : 1F/C
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4681 ;;      Params:         0       0       0       0       0       0       0       0
  4682 ;;      Locals:         0       0       1       0       0       0       0       0
  4683 ;;      Temps:          0       2       0       0       0       0       0       0
  4684 ;;      Totals:         0       2       1       0       0       0       0       0
  4685 ;;Total ram usage:        3 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; Hardware stack levels required when called:    8
  4688 ;; This function calls:
  4689 ;;		_battery_voltage
  4690 ;;		_selectCurrent
  4691 ;;		_selectDecrease
  4692 ;;		_selectFrequency
  4693 ;;		_selectIncrease
  4694 ;;		_selectResetValue
  4695 ;;		_selectSomething
  4696 ;;		_setCurrent
  4697 ;;		_setFrequency
  4698 ;;		_setLEDColor
  4699 ;;		_writePersistentState
  4700 ;; This function is called by:
  4701 ;;		_main
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           
  4706                           ;psect for function _process_remote_command
  4707  0049                     _process_remote_command:	
  4708                           
  4709                           ;incstack = 0
  4710                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4711                           ;process_remote_command@code stored from wreg
  4712  0049  00E6               	movwf	process_remote_command@code^(0+128)
  4713                           
  4714                           ;main.c: 367: setLEDColor(0, 0, 0);
  4715  004A  01F2               	clrf	setLEDColor@green
  4716  004B  01F3               	clrf	setLEDColor@blue
  4717  004C  3000               	movlw	0
  4718  004D  3187  27E5  3180   	fcall	_setLEDColor
  4719                           
  4720                           ;main.c: 369: switch(code->command){
  4721  0050  293D               	goto	l3092
  4722  0051                     l2998:	
  4723                           
  4724                           ;main.c: 371: if(STATE_CURRENT == interfaceState){
  4725  0051  0020               	movlb	0	; select bank0
  4726  0052  036F               	decf	_interfaceState,w
  4727  0053  1D03               	btfss	3,2
  4728  0054  2885               	goto	l3012
  4729                           
  4730                           ;main.c: 372: currentIndex++;
  4731  0055  3001               	movlw	1
  4732  0056  07FA               	addwf	_currentIndex,f
  4733  0057  3000               	movlw	0
  4734  0058  3DFB               	addwfc	_currentIndex+1,f
  4735                           
  4736                           ;main.c: 373: if (currentIndex > maxCurrentIndex - 1)
  4737  0059  087B               	movf	_currentIndex+1,w
  4738  005A  3A80               	xorlw	128
  4739  005B  00ED               	movwf	??_process_remote_command
  4740  005C  3080               	movlw	128
  4741  005D  026D               	subwf	??_process_remote_command,w
  4742  005E  1D03               	skipz
  4743  005F  2862               	goto	u1975
  4744  0060  300B               	movlw	11
  4745  0061  027A               	subwf	_currentIndex,w
  4746  0062                     u1975:	
  4747  0062  1C03               	skipc
  4748  0063  286C               	goto	l3006
  4749                           
  4750                           ;main.c: 374: {;main.c: 375: currentIndex = maxCurrentIndex - 1;
  4751  0064  300A               	movlw	10
  4752  0065  00FA               	movwf	_currentIndex
  4753  0066  3000               	movlw	0
  4754  0067  00FB               	movwf	_currentIndex+1
  4755                           
  4756                           ;main.c: 376: selectSomething();
  4757  0068  3184  2476  3180   	fcall	_selectSomething
  4758                           
  4759                           ;main.c: 377: } else {
  4760  006B  286F               	goto	l3008
  4761  006C                     l3006:	
  4762                           
  4763                           ;main.c: 378: selectIncrease();
  4764  006C  3186  26E0  3180   	fcall	_selectIncrease
  4765  006F                     l3008:	
  4766                           
  4767                           ;main.c: 379: };main.c: 380: setCurrent(currentValue[currentIndex], battery_voltage());
  4768  006F  357A               	lslf	_currentIndex,w
  4769  0070  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4770  0071  0086               	movwf	6
  4771  0072  0187               	clrf	7
  4772  0073  3F40               	moviw [0]fsr1
  4773  0074  0020               	movlb	0	; select bank0
  4774  0075  00B5               	movwf	setCurrent@microamps
  4775  0076  3F41               	moviw [1]fsr1
  4776  0077  00B6               	movwf	setCurrent@microamps+1
  4777  0078  3185  25F1  3180   	fcall	_battery_voltage
  4778  007B  0834               	movf	?_battery_voltage+1,w
  4779  007C  00B8               	movwf	setCurrent@Vdd_mv+1
  4780  007D  0833               	movf	?_battery_voltage,w
  4781  007E  00B7               	movwf	setCurrent@Vdd_mv
  4782  007F  3181  2184  3180   	fcall	_setCurrent
  4783                           
  4784                           ;main.c: 381: writePersistentState();
  4785  0082  3183  23CE  3180   	fcall	_writePersistentState
  4786  0085                     l3012:	
  4787                           
  4788                           ;main.c: 382: };main.c: 383: if(STATE_FREQUENCY == interfaceState){
  4789  0085  3002               	movlw	2
  4790  0086  066F               	xorwf	_interfaceState,w
  4791  0087  1D03               	btfss	3,2
  4792  0088  28B7               	goto	l3026
  4793                           
  4794                           ;main.c: 384: frequencyIndex++;
  4795  0089  3001               	movlw	1
  4796  008A  0021               	movlb	1	; select bank1
  4797  008B  07E4               	addwf	_frequencyIndex^(0+128),f
  4798  008C  3000               	movlw	0
  4799  008D  3DE5               	addwfc	(_frequencyIndex+1)^(0+128),f
  4800                           
  4801                           ;main.c: 385: if (frequencyIndex > maxFrequencyIndex - 1)
  4802  008E  0865               	movf	(_frequencyIndex+1)^(0+128),w
  4803  008F  3A80               	xorlw	128
  4804  0090  0020               	movlb	0	; select bank0
  4805  0091  00ED               	movwf	??_process_remote_command
  4806  0092  3080               	movlw	128
  4807  0093  026D               	subwf	??_process_remote_command,w
  4808  0094  1D03               	skipz
  4809  0095  2899               	goto	u1995
  4810  0096  3006               	movlw	6
  4811  0097  0021               	movlb	1	; select bank1
  4812  0098  0264               	subwf	_frequencyIndex^(0+128),w
  4813  0099                     u1995:	
  4814  0099  1C03               	skipc
  4815  009A  28A4               	goto	l3020
  4816                           
  4817                           ;main.c: 386: {;main.c: 387: frequencyIndex = maxFrequencyIndex - 1;
  4818  009B  3005               	movlw	5
  4819  009C  0021               	movlb	1	; select bank1
  4820  009D  00E4               	movwf	_frequencyIndex^(0+128)
  4821  009E  3000               	movlw	0
  4822  009F  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  4823                           
  4824                           ;main.c: 388: selectSomething();
  4825  00A0  3184  2476  3180   	fcall	_selectSomething
  4826                           
  4827                           ;main.c: 389: } else {
  4828  00A3  28A7               	goto	l3022
  4829  00A4                     l3020:	
  4830                           
  4831                           ;main.c: 390: selectIncrease();
  4832  00A4  3186  26E0  3180   	fcall	_selectIncrease
  4833  00A7                     l3022:	
  4834                           
  4835                           ;main.c: 391: };main.c: 392: setFrequency(frequencyValue[frequencyIndex]);
  4836  00A7  0021               	movlb	1	; select bank1
  4837  00A8  3564               	lslf	_frequencyIndex^(0+128),w
  4838  00A9  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  4839  00AA  0086               	movwf	6
  4840  00AB  0187               	clrf	7
  4841  00AC  3F40               	moviw [0]fsr1
  4842  00AD  0020               	movlb	0	; select bank0
  4843  00AE  00B3               	movwf	setFrequency@frequency_hz
  4844  00AF  3F41               	moviw [1]fsr1
  4845  00B0                     L1:	
  4846  00B0  00B4               	movwf	setFrequency@frequency_hz+1
  4847  00B1  3183  236F  3180   	fcall	_setFrequency
  4848                           
  4849                           ;main.c: 393: writePersistentState();
  4850  00B4  3183  23CE  3180   	fcall	_writePersistentState
  4851  00B7                     l3026:	
  4852                           
  4853                           ;main.c: 394: };main.c: 395: if(STATE_RUNNING == interfaceState){
  4854  00B7  086F               	movf	_interfaceState,w
  4855  00B8  1D03               	btfss	3,2
  4856  00B9  28BD               	goto	l3030
  4857                           
  4858                           ;main.c: 396: selectSomething();
  4859  00BA  3184  2476  3180   	fcall	_selectSomething
  4860  00BD                     l3030:	
  4861                           
  4862                           ;main.c: 397: };main.c: 398: if(STATE_LOWBATTERY == interfaceState){
  4863  00BD  3003               	movlw	3
  4864  00BE  0020               	movlb	0	; select bank0
  4865  00BF  066F               	xorwf	_interfaceState,w
  4866  00C0  1D03               	btfss	3,2
  4867  00C1  296B               	goto	l3094
  4868                           
  4869                           ;main.c: 399: selectSomething();
  4870  00C2  3184  2476  3180   	fcall	_selectSomething
  4871  00C5  296B               	goto	l3094
  4872  00C6                     l3034:	
  4873                           
  4874                           ;main.c: 403: if(STATE_CURRENT == interfaceState){
  4875  00C6  0020               	movlb	0	; select bank0
  4876  00C7  036F               	decf	_interfaceState,w
  4877  00C8  1D03               	btfss	3,2
  4878  00C9  28EF               	goto	l3050
  4879                           
  4880                           ;main.c: 404: currentIndex--;
  4881  00CA  30FF               	movlw	255
  4882  00CB  07FA               	addwf	_currentIndex,f
  4883  00CC  30FF               	movlw	255
  4884  00CD  3DFB               	addwfc	_currentIndex+1,f
  4885                           
  4886                           ;main.c: 405: if (currentIndex < 0)
  4887  00CE  1FFB               	btfss	_currentIndex+1,7
  4888  00CF  28D6               	goto	l3044
  4889                           
  4890                           ;main.c: 406: {;main.c: 407: currentIndex = 0;
  4891  00D0  01FA               	clrf	_currentIndex
  4892  00D1  01FB               	clrf	_currentIndex+1
  4893                           
  4894                           ;main.c: 408: selectSomething();
  4895  00D2  3184  2476  3180   	fcall	_selectSomething
  4896                           
  4897                           ;main.c: 409: } else {
  4898  00D5  28D9               	goto	l3046
  4899  00D6                     l3044:	
  4900                           
  4901                           ;main.c: 410: selectDecrease();
  4902  00D6  3187  2763  3180   	fcall	_selectDecrease
  4903  00D9                     l3046:	
  4904                           
  4905                           ;main.c: 411: };main.c: 412: setCurrent(currentValue[currentIndex], battery_voltage());
  4906  00D9  357A               	lslf	_currentIndex,w
  4907  00DA  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4908  00DB  0086               	movwf	6
  4909  00DC  0187               	clrf	7
  4910  00DD  3F40               	moviw [0]fsr1
  4911  00DE  0020               	movlb	0	; select bank0
  4912  00DF  00B5               	movwf	setCurrent@microamps
  4913  00E0  3F41               	moviw [1]fsr1
  4914  00E1  00B6               	movwf	setCurrent@microamps+1
  4915  00E2  3185  25F1  3180   	fcall	_battery_voltage
  4916  00E5  0834               	movf	?_battery_voltage+1,w
  4917  00E6  00B8               	movwf	setCurrent@Vdd_mv+1
  4918  00E7  0833               	movf	?_battery_voltage,w
  4919  00E8  00B7               	movwf	setCurrent@Vdd_mv
  4920  00E9  3181  2184  3180   	fcall	_setCurrent
  4921                           
  4922                           ;main.c: 413: writePersistentState();
  4923  00EC  3183  23CE  3180   	fcall	_writePersistentState
  4924  00EF                     l3050:	
  4925                           
  4926                           ;main.c: 414: };main.c: 415: if(STATE_FREQUENCY == interfaceState){
  4927  00EF  3002               	movlw	2
  4928  00F0  066F               	xorwf	_interfaceState,w
  4929  00F1  1D03               	btfss	3,2
  4930  00F2  28B7               	goto	l3026
  4931                           
  4932                           ;main.c: 416: frequencyIndex--;
  4933  00F3  30FF               	movlw	255
  4934  00F4  0021               	movlb	1	; select bank1
  4935  00F5  07E4               	addwf	_frequencyIndex^(0+128),f
  4936  00F6  30FF               	movlw	255
  4937  00F7  3DE5               	addwfc	(_frequencyIndex+1)^(0+128),f
  4938                           
  4939                           ;main.c: 417: if (frequencyIndex < 0)
  4940  00F8  1FE5               	btfss	(_frequencyIndex+1)^(0+128),7
  4941  00F9  2900               	goto	l3060
  4942                           
  4943                           ;main.c: 418: {;main.c: 419: frequencyIndex = 0;
  4944  00FA  01E4               	clrf	_frequencyIndex^(0+128)
  4945  00FB  01E5               	clrf	(_frequencyIndex+1)^(0+128)
  4946                           
  4947                           ;main.c: 420: selectSomething();
  4948  00FC  3184  2476  3180   	fcall	_selectSomething
  4949                           
  4950                           ;main.c: 421: } else {
  4951  00FF  2903               	goto	l3062
  4952  0100                     l3060:	
  4953                           
  4954                           ;main.c: 422: selectDecrease();
  4955  0100  3187  2763  3180   	fcall	_selectDecrease
  4956  0103                     l3062:	
  4957                           
  4958                           ;main.c: 423: };main.c: 424: setFrequency(frequencyValue[frequencyIndex]);
  4959  0103  0021               	movlb	1	; select bank1
  4960  0104  3564               	lslf	_frequencyIndex^(0+128),w
  4961  0105  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  4962  0106  0086               	movwf	6
  4963  0107  0187               	clrf	7
  4964  0108  3F40               	moviw [0]fsr1
  4965  0109  0020               	movlb	0	; select bank0
  4966  010A  00B3               	movwf	setFrequency@frequency_hz
  4967  010B  3F41               	moviw [1]fsr1
  4968  010C  28B0               	goto	L1
  4969  010D                     l3074:	
  4970                           ;main.c: 429: };main.c: 430: if(STATE_LOWBATTERY == interfaceState){
  4971                           
  4972                           ;main.c: 428: selectSomething();
  4973                           
  4974                           ;main.c: 426: };main.c: 427: if(STATE_RUNNING == interfaceState){
  4975                           
  4976                           ;main.c: 425: writePersistentState();
  4977                           
  4978                           
  4979                           ;main.c: 435: selectFrequency();
  4980  010D  3186  2646  3180   	fcall	_selectFrequency
  4981                           
  4982                           ;main.c: 436: break;
  4983  0110  296B               	goto	l3094
  4984  0111                     l3076:	
  4985                           
  4986                           ;main.c: 438: selectCurrent();
  4987  0111  3186  2696  3180   	fcall	_selectCurrent
  4988                           
  4989                           ;main.c: 439: break;
  4990  0114  296B               	goto	l3094
  4991  0115                     l3078:	
  4992                           
  4993                           ;main.c: 443: frequencyIndex = 0;
  4994  0115  01E4               	clrf	_frequencyIndex^(0+128)
  4995  0116  01E5               	clrf	(_frequencyIndex+1)^(0+128)
  4996                           
  4997                           ;main.c: 444: setFrequency(frequencyValue[frequencyIndex]);
  4998  0117  3564               	lslf	_frequencyIndex^(0+128),w
  4999  0118  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  5000  0119  0086               	movwf	6
  5001  011A  0187               	clrf	7
  5002  011B  3F40               	moviw [0]fsr1
  5003  011C  0020               	movlb	0	; select bank0
  5004  011D  00B3               	movwf	setFrequency@frequency_hz
  5005  011E  3F41               	moviw [1]fsr1
  5006  011F  00B4               	movwf	setFrequency@frequency_hz+1
  5007  0120  3183  236F  3180   	fcall	_setFrequency
  5008  0123                     l3082:	
  5009                           
  5010                           ;main.c: 445: selectResetValue();
  5011  0123  3186  26BC  3180   	fcall	_selectResetValue
  5012                           
  5013                           ;main.c: 446: break;
  5014  0126  296B               	goto	l3094
  5015  0127                     l3084:	
  5016                           
  5017                           ;main.c: 448: currentIndex = 0;
  5018  0127  01FA               	clrf	_currentIndex
  5019  0128  01FB               	clrf	_currentIndex+1
  5020                           
  5021                           ;main.c: 449: setCurrent(currentValue[currentIndex], battery_voltage());
  5022  0129  357A               	lslf	_currentIndex,w
  5023  012A  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  5024  012B  0086               	movwf	6
  5025  012C  0187               	clrf	7
  5026  012D  3F40               	moviw [0]fsr1
  5027  012E  0020               	movlb	0	; select bank0
  5028  012F  00B5               	movwf	setCurrent@microamps
  5029  0130  3F41               	moviw [1]fsr1
  5030  0131  00B6               	movwf	setCurrent@microamps+1
  5031  0132  3185  25F1  3180   	fcall	_battery_voltage
  5032  0135  0834               	movf	?_battery_voltage+1,w
  5033  0136  00B8               	movwf	setCurrent@Vdd_mv+1
  5034  0137  0833               	movf	?_battery_voltage,w
  5035  0138  00B7               	movwf	setCurrent@Vdd_mv
  5036  0139  3181  2184  3180   	fcall	_setCurrent
  5037  013C  2923               	goto	l3082
  5038  013D                     l3092:	
  5039  013D  0021               	movlb	1	; select bank1
  5040  013E  0866               	movf	process_remote_command@code^(0+128),w
  5041  013F  3E03               	addlw	3
  5042  0140  0086               	movwf	6
  5043  0141  0187               	clrf	7
  5044  0142  0801               	movf	1,w
  5045                           
  5046                           ; Switch size 1, requested type "simple"
  5047                           ; Number of cases is 13, Range of values is 8 to 176
  5048                           ; switch strategies available:
  5049                           ; Name         Instructions Cycles
  5050                           ; simple_byte           40    21 (average)
  5051                           ; jumptable            263     9 (fixed)
  5052                           ;	Chosen strategy is simple_byte
  5053  0143  3A08               	xorlw	8	; case 8
  5054  0144  1903               	skipnz
  5055  0145  296B               	goto	l3094
  5056  0146  3A18               	xorlw	24	; case 16
  5057  0147  1903               	skipnz
  5058  0148  2911               	goto	l3076
  5059  0149  3A08               	xorlw	8	; case 24
  5060  014A  1903               	skipnz
  5061  014B  296B               	goto	l3094
  5062  014C  3A30               	xorlw	48	; case 40
  5063  014D  1903               	skipnz
  5064  014E  296B               	goto	l3094
  5065  014F  3A60               	xorlw	96	; case 72
  5066  0150  1903               	skipnz
  5067  0151  2927               	goto	l3084
  5068  0152  3A18               	xorlw	24	; case 80
  5069  0153  1903               	skipnz
  5070  0154  290D               	goto	l3074
  5071  0155  3A08               	xorlw	8	; case 88
  5072  0156  1903               	skipnz
  5073  0157  296B               	goto	l3094
  5074  0158  3A30               	xorlw	48	; case 104
  5075  0159  1903               	skipnz
  5076  015A  296B               	goto	l3094
  5077  015B  3AE0               	xorlw	224	; case 136
  5078  015C  1903               	skipnz
  5079  015D  2915               	goto	l3078
  5080  015E  3A10               	xorlw	16	; case 152
  5081  015F  1903               	skipnz
  5082  0160  296B               	goto	l3094
  5083  0161  3A38               	xorlw	56	; case 160
  5084  0162  1903               	skipnz
  5085  0163  2851               	goto	l2998
  5086  0164  3A08               	xorlw	8	; case 168
  5087  0165  1903               	skipnz
  5088  0166  296B               	goto	l3094
  5089  0167  3A18               	xorlw	24	; case 176
  5090  0168  1903               	skipnz
  5091  0169  28C6               	goto	l3034
  5092  016A  296B               	goto	l3094
  5093  016B                     l3094:	
  5094                           
  5095                           ;main.c: 468: setLEDColor(LED_red, LED_green, LED_blue);
  5096  016B  01F2               	clrf	setLEDColor@green
  5097  016C  01F3               	clrf	setLEDColor@blue
  5098  016D  3000               	movlw	0
  5099  016E  3187  27E5  3180   	fcall	_setLEDColor
  5100                           
  5101                           ;main.c: 469: _delay((unsigned long)((1000)*(4000000/4000.0)));
  5102  0171  3006               	movlw	6
  5103  0172  0020               	movlb	0	; select bank0
  5104  0173  00EE               	movwf	??_process_remote_command+1
  5105  0174  3013               	movlw	19
  5106  0175  00ED               	movwf	??_process_remote_command
  5107  0176  30AD               	movlw	173
  5108  0177                     u2127:	
  5109  0177  0B89               	decfsz	9,f
  5110  0178  2977               	goto	u2127
  5111  0179  0BED               	decfsz	??_process_remote_command,f
  5112  017A  2977               	goto	u2127
  5113  017B  0BEE               	decfsz	??_process_remote_command+1,f
  5114  017C  2977               	goto	u2127
  5115  017D  3200               	nop2
  5116                           
  5117                           ;main.c: 470: setLEDColor(0, 0, 0);
  5118  017E  01F2               	clrf	setLEDColor@green
  5119  017F  01F3               	clrf	setLEDColor@blue
  5120  0180  3000               	movlw	0
  5121  0181  3187  27E5         	fcall	_setLEDColor
  5122  0183  0008               	return
  5123  0184                     __end_of_process_remote_command:	
  5124                           
  5125                           	psect	text4
  5126  03CE                     __ptext4:	
  5127 ;; *************** function _writePersistentState *****************
  5128 ;; Defined at:
  5129 ;;		line 127 in file "main.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;  i               1   75[BANK0 ] unsigned char 
  5134 ;;  buf            64   11[BANK0 ] unsigned int [32]
  5135 ;;  idx             1   76[BANK0 ] unsigned char 
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  1    wreg      void 
  5138 ;; Registers used:
  5139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5140 ;; Tracked objects:
  5141 ;;		On entry : 1F/1
  5142 ;;		On exit  : 1F/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5145 ;;      Params:         0       0       0       0       0       0       0       0
  5146 ;;      Locals:         0      66       0       0       0       0       0       0
  5147 ;;      Temps:          0       4       0       0       0       0       0       0
  5148 ;;      Totals:         0      70       0       0       0       0       0       0
  5149 ;;Total ram usage:       70 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:    6
  5152 ;; This function calls:
  5153 ;;		_FLASH_WriteBlock
  5154 ;; This function is called by:
  5155 ;;		_process_remote_command
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           
  5160                           ;psect for function _writePersistentState
  5161  03CE                     _writePersistentState:	
  5162                           
  5163                           ;main.c: 130: uint16_t buf[32];;main.c: 131: for (uint8_t i=0; i<32; i++){
  5164                           
  5165                           ;incstack = 0
  5166                           ; Regs used in _writePersistentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5167  03CE  0020               	movlb	0	; select bank0
  5168  03CF  01EB               	clrf	writePersistentState@i
  5169  03D0                     l2862:	
  5170                           
  5171                           ;main.c: 132: buf[0] = 0;
  5172  03D0  01AB               	clrf	writePersistentState@buf
  5173  03D1  01AC               	clrf	writePersistentState@buf+1
  5174  03D2  3001               	movlw	1
  5175  03D3  00A7               	movwf	??_writePersistentState
  5176  03D4  0827               	movf	??_writePersistentState,w
  5177  03D5  07EB               	addwf	writePersistentState@i,f
  5178  03D6  3020               	movlw	32
  5179  03D7  026B               	subwf	writePersistentState@i,w
  5180  03D8  1C03               	skipc
  5181  03D9  2BD0               	goto	l2862
  5182                           
  5183                           ;main.c: 133: };main.c: 136: uint8_t idx = 0;
  5184  03DA  01EC               	clrf	writePersistentState@idx
  5185                           
  5186                           ;main.c: 137: buf[idx++] = ((uint16_t)(0x3400 | (currentIndex & 0xff)));
  5187  03DB  30FF               	movlw	255
  5188  03DC  057A               	andwf	_currentIndex,w
  5189  03DD  00A7               	movwf	??_writePersistentState
  5190  03DE  3000               	movlw	0
  5191  03DF  057B               	andwf	_currentIndex+1,w
  5192  03E0  00A8               	movwf	??_writePersistentState+1
  5193  03E1  3000               	movlw	0
  5194  03E2  0427               	iorwf	??_writePersistentState,w
  5195  03E3  00AB               	movwf	writePersistentState@buf
  5196  03E4  3034               	movlw	52
  5197  03E5  0428               	iorwf	??_writePersistentState+1,w
  5198  03E6  00AC               	movwf	writePersistentState@buf+1
  5199  03E7  3001               	movlw	1
  5200  03E8  00A7               	movwf	??_writePersistentState
  5201  03E9  0827               	movf	??_writePersistentState,w
  5202  03EA  07EC               	addwf	writePersistentState@idx,f
  5203                           
  5204                           ;main.c: 138: buf[idx++] = ((uint16_t)(0x3400 | (frequencyIndex & 0xff)));
  5205  03EB  30FF               	movlw	255
  5206  03EC  0021               	movlb	1	; select bank1
  5207  03ED  0564               	andwf	_frequencyIndex^(0+128),w
  5208  03EE  0020               	movlb	0	; select bank0
  5209  03EF  00A7               	movwf	??_writePersistentState
  5210  03F0  3000               	movlw	0
  5211  03F1  0021               	movlb	1	; select bank1
  5212  03F2  0565               	andwf	(_frequencyIndex+1)^(0+128),w
  5213  03F3  0020               	movlb	0	; select bank0
  5214  03F4  00A8               	movwf	??_writePersistentState+1
  5215  03F5  3000               	movlw	0
  5216  03F6  0427               	iorwf	??_writePersistentState,w
  5217  03F7  00A9               	movwf	??_writePersistentState+2
  5218  03F8  3034               	movlw	52
  5219  03F9  0428               	iorwf	??_writePersistentState+1,w
  5220  03FA  00AA               	movwf	??_writePersistentState+3
  5221  03FB  356C               	lslf	writePersistentState@idx,w
  5222  03FC  3E2B               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  5223  03FD  0086               	movwf	6
  5224  03FE  0187               	clrf	7
  5225  03FF  0829               	movf	??_writePersistentState+2,w
  5226  0400  3FC0               	movwi [0]fsr1
  5227  0401  082A               	movf	??_writePersistentState+3,w
  5228  0402  3FC1               	movwi [1]fsr1
  5229  0403  3001               	movlw	1
  5230  0404  00A7               	movwf	??_writePersistentState
  5231  0405  0827               	movf	??_writePersistentState,w
  5232  0406  07EC               	addwf	writePersistentState@idx,f
  5233                           
  5234                           ;main.c: 139: buf[idx++] = ((uint16_t)(0x3400 | (dc_frequency_flag & 0xff)));
  5235  0407  3000               	movlw	0
  5236  0408  0021               	movlb	1	; select bank1
  5237  0409  0447               	iorwf	_dc_frequency_flag^(0+128),w
  5238  040A  0020               	movlb	0	; select bank0
  5239  040B  00A7               	movwf	??_writePersistentState
  5240  040C  3034               	movlw	52
  5241  040D  00A8               	movwf	??_writePersistentState+1
  5242  040E  356C               	lslf	writePersistentState@idx,w
  5243  040F  3E2B               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  5244  0410  0086               	movwf	6
  5245  0411  0187               	clrf	7
  5246  0412  0827               	movf	??_writePersistentState,w
  5247  0413  3FC0               	movwi [0]fsr1
  5248  0414  0828               	movf	??_writePersistentState+1,w
  5249  0415  3FC1               	movwi [1]fsr1
  5250  0416  3001               	movlw	1
  5251  0417  00A7               	movwf	??_writePersistentState
  5252  0418  0827               	movf	??_writePersistentState,w
  5253  0419  07EC               	addwf	writePersistentState@idx,f
  5254                           
  5255                           ;main.c: 141: FLASH_WriteBlock((uint16_t)&HEF_persistent_state, buf);
  5256  041A  30E0               	movlw	224
  5257  041B  00F5               	movwf	FLASH_WriteBlock@writeAddr
  5258  041C  300F               	movlw	15
  5259  041D  00F6               	movwf	FLASH_WriteBlock@writeAddr+1
  5260  041E  302B               	movlw	(low (writePersistentState@buf| 0))& (0+255)
  5261  041F  00A7               	movwf	??_writePersistentState
  5262  0420  0827               	movf	??_writePersistentState,w
  5263  0421  00F7               	movwf	FLASH_WriteBlock@flashWordArray
  5264  0422  3183  230E         	fcall	_FLASH_WriteBlock
  5265  0424  0008               	return
  5266  0425                     __end_of_writePersistentState:	
  5267                           
  5268                           	psect	text5
  5269  030E                     __ptext5:	
  5270 ;; *************** function _FLASH_WriteBlock *****************
  5271 ;; Defined at:
  5272 ;;		line 94 in file "mcc_generated_files/memory.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  writeAddr       2    5[COMMON] unsigned int 
  5275 ;;  flashWordArr    1    7[COMMON] PTR unsigned int 
  5276 ;;		 -> writePersistentState@buf(64), 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  blockStartAd    2    3[BANK0 ] unsigned int 
  5279 ;;  i               1    6[BANK0 ] unsigned char 
  5280 ;;  GIEBitValue     1    5[BANK0 ] unsigned char 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      char 
  5283 ;; Registers used:
  5284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 1F/0
  5287 ;;		On exit  : 1F/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5290 ;;      Params:         3       0       0       0       0       0       0       0
  5291 ;;      Locals:         0       4       0       0       0       0       0       0
  5292 ;;      Temps:          0       3       0       0       0       0       0       0
  5293 ;;      Totals:         3       7       0       0       0       0       0       0
  5294 ;;Total ram usage:       10 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    5
  5297 ;; This function calls:
  5298 ;;		_FLASH_EraseBlock
  5299 ;; This function is called by:
  5300 ;;		_writePersistentState
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function _FLASH_WriteBlock
  5306  030E                     _FLASH_WriteBlock:	
  5307                           
  5308                           ;memory.c: 96: uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x1000-1) ^ (32-1)));
  5309                           
  5310                           ;incstack = 0
  5311                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5312  030E  30E0               	movlw	224
  5313  030F  0575               	andwf	FLASH_WriteBlock@writeAddr,w
  5314  0310  00A3               	movwf	FLASH_WriteBlock@blockStartAddr
  5315  0311  300F               	movlw	15
  5316  0312  0576               	andwf	FLASH_WriteBlock@writeAddr+1,w
  5317  0313  00A4               	movwf	FLASH_WriteBlock@blockStartAddr+1
  5318                           
  5319                           ;memory.c: 97: uint8_t GIEBitValue = INTCONbits.GIE;
  5320  0314  3000               	movlw	0
  5321  0315  1B8B               	btfsc	11,7	;volatile
  5322  0316  3001               	movlw	1
  5323  0317  00A5               	movwf	FLASH_WriteBlock@GIEBitValue
  5324                           
  5325                           ;memory.c: 98: uint8_t i;;memory.c: 101: if( writeAddr != blockStartAddr )
  5326  0318  0824               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  5327  0319  0676               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  5328  031A  1D03               	skipz
  5329  031B  2B1E               	goto	u1575
  5330  031C  0823               	movf	FLASH_WriteBlock@blockStartAddr,w
  5331  031D  0675               	xorwf	FLASH_WriteBlock@writeAddr,w
  5332  031E                     u1575:	
  5333  031E  1D03               	btfss	3,2
  5334  031F  0008               	return
  5335                           
  5336                           ;memory.c: 104: };memory.c: 106: INTCONbits.GIE = 0;
  5337  0320  138B               	bcf	11,7	;volatile
  5338                           
  5339                           ;memory.c: 109: FLASH_EraseBlock(writeAddr);
  5340  0321  0876               	movf	FLASH_WriteBlock@writeAddr+1,w
  5341  0322  00F3               	movwf	FLASH_EraseBlock@startAddr+1
  5342  0323  0875               	movf	FLASH_WriteBlock@writeAddr,w
  5343  0324  00F2               	movwf	FLASH_EraseBlock@startAddr
  5344  0325  3187  279D  3183   	fcall	_FLASH_EraseBlock
  5345                           
  5346                           ;memory.c: 112: PMCON1bits.CFGS = 0;
  5347  0328  1315               	bcf	21,6	;volatile
  5348                           
  5349                           ;memory.c: 113: PMCON1bits.WREN = 1;
  5350  0329  1515               	bsf	21,2	;volatile
  5351                           
  5352                           ;memory.c: 114: PMCON1bits.LWLO = 1;
  5353  032A  1695               	bsf	21,5	;volatile
  5354                           
  5355                           ;memory.c: 116: for (i=0; i<32; i++)
  5356  032B  0020               	movlb	0	; select bank0
  5357  032C  01A6               	clrf	FLASH_WriteBlock@i
  5358  032D                     l2714:	
  5359                           
  5360                           ;memory.c: 117: {;memory.c: 119: PMADRL = (writeAddr & 0xFF);
  5361  032D  0875               	movf	FLASH_WriteBlock@writeAddr,w
  5362  032E  0023               	movlb	3	; select bank3
  5363  032F  0091               	movwf	17	;volatile
  5364                           
  5365                           ;memory.c: 121: PMADRH = ((writeAddr & 0xFF00) >> 8);
  5366  0330  0876               	movf	FLASH_WriteBlock@writeAddr+1,w
  5367  0331  0092               	movwf	18	;volatile
  5368                           
  5369                           ;memory.c: 124: PMDATL = flashWordArray[i];
  5370  0332  0020               	movlb	0	; select bank0
  5371  0333  3526               	lslf	FLASH_WriteBlock@i,w
  5372  0334  0777               	addwf	FLASH_WriteBlock@flashWordArray,w
  5373  0335  00A0               	movwf	??_FLASH_WriteBlock
  5374  0336  0820               	movf	??_FLASH_WriteBlock,w
  5375  0337  0086               	movwf	6
  5376  0338  0187               	clrf	7
  5377  0339  0801               	movf	1,w
  5378  033A  0023               	movlb	3	; select bank3
  5379  033B  0093               	movwf	19	;volatile
  5380                           
  5381                           ;memory.c: 125: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
  5382  033C  0020               	movlb	0	; select bank0
  5383  033D  3526               	lslf	FLASH_WriteBlock@i,w
  5384  033E  0777               	addwf	FLASH_WriteBlock@flashWordArray,w
  5385  033F  00A0               	movwf	??_FLASH_WriteBlock
  5386  0340  0820               	movf	??_FLASH_WriteBlock,w
  5387  0341  0086               	movwf	6
  5388  0342  0187               	clrf	7
  5389  0343  3F40               	moviw [0]fsr1
  5390  0344  00A1               	movwf	??_FLASH_WriteBlock+1
  5391  0345  3F41               	moviw [1]fsr1
  5392  0346  00A2               	movwf	??_FLASH_WriteBlock+2
  5393  0347  0822               	movf	??_FLASH_WriteBlock+2,w
  5394  0348  0023               	movlb	3	; select bank3
  5395  0349  0094               	movwf	20	;volatile
  5396                           
  5397                           ;memory.c: 127: if(i == (32-1))
  5398  034A  301F               	movlw	31
  5399  034B  0020               	movlb	0	; select bank0
  5400  034C  0626               	xorwf	FLASH_WriteBlock@i,w
  5401  034D  1D03               	btfss	3,2
  5402  034E  2B51               	goto	l2724
  5403                           
  5404                           ;memory.c: 128: {;memory.c: 130: PMCON1bits.LWLO = 0;
  5405  034F  0023               	movlb	3	; select bank3
  5406  0350  1295               	bcf	21,5	;volatile
  5407  0351                     l2724:	
  5408                           
  5409                           ;memory.c: 131: };memory.c: 133: PMCON2 = 0x55;
  5410  0351  3055               	movlw	85
  5411  0352  0023               	movlb	3	; select bank3
  5412  0353  0096               	movwf	22	;volsfr
  5413                           
  5414                           ;memory.c: 134: PMCON2 = 0xAA;
  5415  0354  30AA               	movlw	170
  5416  0355  0096               	movwf	22	;volsfr
  5417                           
  5418                           ;memory.c: 135: PMCON1bits.WR = 1;
  5419  0356  1495               	bsf	21,1	;volatile
  5420                           
  5421                           ;memory.c: 136: __nop();
  5422  0357  0000               	nop
  5423                           
  5424                           ;memory.c: 137: __nop();
  5425  0358  0000               	nop
  5426                           
  5427                           ;memory.c: 139: writeAddr++;
  5428  0359  3001               	movlw	1
  5429  035A  07F5               	addwf	FLASH_WriteBlock@writeAddr,f
  5430  035B  3000               	movlw	0
  5431  035C  3DF6               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  5432  035D  3001               	movlw	1
  5433  035E  0020               	movlb	0	; select bank0
  5434  035F  00A0               	movwf	??_FLASH_WriteBlock
  5435  0360  0820               	movf	??_FLASH_WriteBlock,w
  5436  0361  07A6               	addwf	FLASH_WriteBlock@i,f
  5437  0362  3020               	movlw	32
  5438  0363  0226               	subwf	FLASH_WriteBlock@i,w
  5439  0364  1C03               	skipc
  5440  0365  2B2D               	goto	l2714
  5441                           
  5442                           ;memory.c: 140: };memory.c: 142: PMCON1bits.WREN = 0;
  5443  0366  0023               	movlb	3	; select bank3
  5444  0367  1115               	bcf	21,2	;volatile
  5445                           
  5446                           ;memory.c: 143: INTCONbits.GIE = GIEBitValue;
  5447  0368  0020               	movlb	0	; select bank0
  5448  0369  0C25               	rrf	FLASH_WriteBlock@GIEBitValue,w
  5449  036A  1C03               	skipc
  5450  036B  138B               	bcf	11,7	;volatile
  5451  036C  1803               	skipnc
  5452  036D  178B               	bsf	11,7	;volatile
  5453  036E  0008               	return
  5454  036F                     __end_of_FLASH_WriteBlock:	
  5455                           
  5456                           	psect	text6
  5457  079D                     __ptext6:	
  5458 ;; *************** function _FLASH_EraseBlock *****************
  5459 ;; Defined at:
  5460 ;;		line 148 in file "mcc_generated_files/memory.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;  startAddr       2    2[COMMON] unsigned int 
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  GIEBitValue     1    4[COMMON] unsigned char 
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      void 
  5467 ;; Registers used:
  5468 ;;		wreg, status,2, status,0
  5469 ;; Tracked objects:
  5470 ;;		On entry : 1F/0
  5471 ;;		On exit  : 1F/3
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5474 ;;      Params:         2       0       0       0       0       0       0       0
  5475 ;;      Locals:         1       0       0       0       0       0       0       0
  5476 ;;      Temps:          0       0       0       0       0       0       0       0
  5477 ;;      Totals:         3       0       0       0       0       0       0       0
  5478 ;;Total ram usage:        3 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    4
  5481 ;; This function calls:
  5482 ;;		Nothing
  5483 ;; This function is called by:
  5484 ;;		_FLASH_WriteBlock
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           
  5489                           ;psect for function _FLASH_EraseBlock
  5490  079D                     _FLASH_EraseBlock:	
  5491                           
  5492                           ;memory.c: 150: uint8_t GIEBitValue = INTCONbits.GIE;
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  5496  079D  3000               	movlw	0
  5497  079E  1B8B               	btfsc	11,7	;volatile
  5498  079F  3001               	movlw	1
  5499  07A0  00F4               	movwf	FLASH_EraseBlock@GIEBitValue
  5500                           
  5501                           ;memory.c: 153: INTCONbits.GIE = 0;
  5502  07A1  138B               	bcf	11,7	;volatile
  5503                           
  5504                           ;memory.c: 155: PMADRL = (startAddr & 0xFF);
  5505  07A2  0872               	movf	FLASH_EraseBlock@startAddr,w
  5506  07A3  0023               	movlb	3	; select bank3
  5507  07A4  0091               	movwf	17	;volatile
  5508                           
  5509                           ;memory.c: 157: PMADRH = ((startAddr & 0xFF00) >> 8);
  5510  07A5  0873               	movf	FLASH_EraseBlock@startAddr+1,w
  5511  07A6  0092               	movwf	18	;volatile
  5512                           
  5513                           ;memory.c: 160: PMCON1bits.CFGS = 0;
  5514  07A7  1315               	bcf	21,6	;volatile
  5515                           
  5516                           ;memory.c: 161: PMCON1bits.FREE = 1;
  5517  07A8  1615               	bsf	21,4	;volatile
  5518                           
  5519                           ;memory.c: 162: PMCON1bits.WREN = 1;
  5520  07A9  1515               	bsf	21,2	;volatile
  5521                           
  5522                           ;memory.c: 165: PMCON2 = 0x55;
  5523  07AA  3055               	movlw	85
  5524  07AB  0096               	movwf	22	;volsfr
  5525                           
  5526                           ;memory.c: 166: PMCON2 = 0xAA;
  5527  07AC  30AA               	movlw	170
  5528  07AD  0096               	movwf	22	;volsfr
  5529                           
  5530                           ;memory.c: 167: PMCON1bits.WR = 1;
  5531  07AE  1495               	bsf	21,1	;volatile
  5532                           
  5533                           ;memory.c: 168: __nop();
  5534  07AF  0000               	nop
  5535                           
  5536                           ;memory.c: 169: __nop();
  5537  07B0  0000               	nop
  5538                           
  5539                           ;memory.c: 171: PMCON1bits.WREN = 0;
  5540  07B1  0023               	movlb	3	; select bank3
  5541  07B2  1115               	bcf	21,2	;volatile
  5542                           
  5543                           ;memory.c: 172: INTCONbits.GIE = GIEBitValue;
  5544  07B3  0C74               	rrf	FLASH_EraseBlock@GIEBitValue,w
  5545  07B4  1C03               	skipc
  5546  07B5  138B               	bcf	11,7	;volatile
  5547  07B6  1803               	skipnc
  5548  07B7  178B               	bsf	11,7	;volatile
  5549  07B8  0008               	return
  5550  07B9                     __end_of_FLASH_EraseBlock:	
  5551                           
  5552                           	psect	text7
  5553  036F                     __ptext7:	
  5554 ;; *************** function _setFrequency *****************
  5555 ;; Defined at:
  5556 ;;		line 327 in file "main.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  frequency_hz    2   19[BANK0 ] int 
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;  PR4_val         2   22[BANK0 ] int 
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      void 
  5563 ;; Registers used:
  5564 ;;		wreg, status,2, status,0, pclath, cstack
  5565 ;; Tracked objects:
  5566 ;;		On entry : 1F/0
  5567 ;;		On exit  : 1F/1
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5570 ;;      Params:         0       2       0       0       0       0       0       0
  5571 ;;      Locals:         0       2       0       0       0       0       0       0
  5572 ;;      Temps:          0       1       0       0       0       0       0       0
  5573 ;;      Totals:         0       5       0       0       0       0       0       0
  5574 ;;Total ram usage:        5 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; Hardware stack levels required when called:    5
  5577 ;; This function calls:
  5578 ;;		_TMR4_LoadPeriodRegister
  5579 ;;		___aldiv
  5580 ;;		___lmul
  5581 ;; This function is called by:
  5582 ;;		_process_remote_command
  5583 ;;		_main
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           
  5588                           ;psect for function _setFrequency
  5589  036F                     _setFrequency:	
  5590                           
  5591                           ;main.c: 343: int16_t PR4_val = 1000000L / (96L * frequency_hz);
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  5595  036F  0833               	movf	setFrequency@frequency_hz,w
  5596  0370  00F2               	movwf	___lmul@multiplier
  5597  0371  0834               	movf	setFrequency@frequency_hz+1,w
  5598  0372  00F3               	movwf	___lmul@multiplier+1
  5599  0373  0D89               	rlf	9,f
  5600  0374  3B89               	subwfb	9,f
  5601  0375  0989               	comf	9,f
  5602  0376  00F4               	movwf	___lmul@multiplier+2
  5603  0377  00F5               	movwf	___lmul@multiplier+3
  5604  0378  3000               	movlw	0
  5605  0379  00F9               	movwf	___lmul@multiplicand+3
  5606  037A  3000               	movlw	0
  5607  037B  00F8               	movwf	___lmul@multiplicand+2
  5608  037C  3000               	movlw	0
  5609  037D  00F7               	movwf	___lmul@multiplicand+1
  5610  037E  3060               	movlw	96
  5611  037F  00F6               	movwf	___lmul@multiplicand
  5612  0380  3185  25C2  3183   	fcall	___lmul
  5613  0383  0875               	movf	?___lmul+3,w
  5614  0384  00A7               	movwf	___aldiv@divisor+3
  5615  0385  0874               	movf	?___lmul+2,w
  5616  0386  00A6               	movwf	___aldiv@divisor+2
  5617  0387  0873               	movf	?___lmul+1,w
  5618  0388  00A5               	movwf	___aldiv@divisor+1
  5619  0389  0872               	movf	?___lmul,w
  5620  038A  00A4               	movwf	___aldiv@divisor
  5621  038B  3000               	movlw	0
  5622  038C  00AB               	movwf	___aldiv@dividend+3
  5623  038D  300F               	movlw	15
  5624  038E  00AA               	movwf	___aldiv@dividend+2
  5625  038F  3042               	movlw	66
  5626  0390  00A9               	movwf	___aldiv@dividend+1
  5627  0391  3040               	movlw	64
  5628  0392  00A8               	movwf	___aldiv@dividend
  5629  0393  3182  2220  3183   	fcall	___aldiv
  5630  0396  0825               	movf	?___aldiv+1,w
  5631  0397  00B7               	movwf	setFrequency@PR4_val+1
  5632  0398  0824               	movf	?___aldiv,w
  5633  0399  00B6               	movwf	setFrequency@PR4_val
  5634                           
  5635                           ;main.c: 344: if (PR4_val > 255){
  5636  039A  0837               	movf	setFrequency@PR4_val+1,w
  5637  039B  3A80               	xorlw	128
  5638  039C  00B5               	movwf	??_setFrequency
  5639  039D  3081               	movlw	129
  5640  039E  0235               	subwf	??_setFrequency,w
  5641  039F  1D03               	skipz
  5642  03A0  2BA3               	goto	u1925
  5643  03A1  3000               	movlw	0
  5644  03A2  0236               	subwf	setFrequency@PR4_val,w
  5645  03A3                     u1925:	
  5646  03A3  1C03               	skipc
  5647  03A4  2BAA               	goto	l612
  5648                           
  5649                           ;main.c: 345: PR4_val = 255;
  5650  03A5  30FF               	movlw	255
  5651  03A6  0020               	movlb	0	; select bank0
  5652  03A7  00B6               	movwf	setFrequency@PR4_val
  5653  03A8  3000               	movlw	0
  5654  03A9  00B7               	movwf	setFrequency@PR4_val+1
  5655  03AA                     l612:	
  5656                           
  5657                           ;main.c: 346: };main.c: 347: if (PR4_val < 68){
  5658  03AA  0020               	movlb	0	; select bank0
  5659  03AB  0837               	movf	setFrequency@PR4_val+1,w
  5660  03AC  3A80               	xorlw	128
  5661  03AD  00B5               	movwf	??_setFrequency
  5662  03AE  3080               	movlw	128
  5663  03AF  0235               	subwf	??_setFrequency,w
  5664  03B0  1D03               	skipz
  5665  03B1  2BB4               	goto	u1935
  5666  03B2  3044               	movlw	68
  5667  03B3  0236               	subwf	setFrequency@PR4_val,w
  5668  03B4                     u1935:	
  5669  03B4  1803               	skipnc
  5670  03B5  2BBB               	goto	l2964
  5671                           
  5672                           ;main.c: 348: PR4_val = 68;
  5673  03B6  3044               	movlw	68
  5674  03B7  0020               	movlb	0	; select bank0
  5675  03B8  00B6               	movwf	setFrequency@PR4_val
  5676  03B9  3000               	movlw	0
  5677  03BA  00B7               	movwf	setFrequency@PR4_val+1
  5678  03BB                     l2964:	
  5679                           
  5680                           ;main.c: 349: };main.c: 354: (INTCONbits.GIE = 0);
  5681  03BB  138B               	bcf	11,7	;volatile
  5682                           
  5683                           ;main.c: 355: TMR4_LoadPeriodRegister((uint16_t)PR4_val);
  5684  03BC  0020               	movlb	0	; select bank0
  5685  03BD  0836               	movf	setFrequency@PR4_val,w
  5686  03BE  318F  2742  3183   	fcall	_TMR4_LoadPeriodRegister
  5687                           
  5688                           ;main.c: 356: if (0 == frequency_hz){
  5689  03C1  0020               	movlb	0	; select bank0
  5690  03C2  0833               	movf	setFrequency@frequency_hz,w
  5691  03C3  0434               	iorwf	setFrequency@frequency_hz+1,w
  5692  03C4  1D03               	btfss	3,2
  5693  03C5  2BCA               	goto	l2972
  5694                           
  5695                           ;main.c: 357: dc_frequency_flag = 1;
  5696  03C6  0021               	movlb	1	; select bank1
  5697  03C7  01C7               	clrf	_dc_frequency_flag^(0+128)
  5698  03C8  0AC7               	incf	_dc_frequency_flag^(0+128),f
  5699                           
  5700                           ;main.c: 358: } else {
  5701  03C9  2BCC               	goto	l2974
  5702  03CA                     l2972:	
  5703                           
  5704                           ;main.c: 359: dc_frequency_flag = 0;
  5705  03CA  0021               	movlb	1	; select bank1
  5706  03CB  01C7               	clrf	_dc_frequency_flag^(0+128)
  5707  03CC                     l2974:	
  5708                           
  5709                           ;main.c: 360: };main.c: 361: (INTCONbits.GIE = 1);
  5710  03CC  178B               	bsf	11,7	;volatile
  5711  03CD  0008               	return
  5712  03CE                     __end_of_setFrequency:	
  5713                           
  5714                           	psect	text8
  5715  0F42                     __ptext8:	
  5716 ;; *************** function _TMR4_LoadPeriodRegister *****************
  5717 ;; Defined at:
  5718 ;;		line 115 in file "mcc_generated_files/tmr4.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;  periodVal       1    wreg     unsigned char 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  periodVal       1    2[COMMON] unsigned char 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      void 
  5725 ;; Registers used:
  5726 ;;		wreg
  5727 ;; Tracked objects:
  5728 ;;		On entry : 1F/0
  5729 ;;		On exit  : 1F/8
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5732 ;;      Params:         0       0       0       0       0       0       0       0
  5733 ;;      Locals:         1       0       0       0       0       0       0       0
  5734 ;;      Temps:          0       0       0       0       0       0       0       0
  5735 ;;      Totals:         1       0       0       0       0       0       0       0
  5736 ;;Total ram usage:        1 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    4
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_setFrequency
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           
  5747                           ;psect for function _TMR4_LoadPeriodRegister
  5748  0F42                     _TMR4_LoadPeriodRegister:	
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in _TMR4_LoadPeriodRegister: [wreg]
  5752                           ;TMR4_LoadPeriodRegister@periodVal stored from wreg
  5753  0F42  00F2               	movwf	TMR4_LoadPeriodRegister@periodVal
  5754                           
  5755                           ;tmr4.c: 117: PR4 = periodVal;
  5756  0F43  0872               	movf	TMR4_LoadPeriodRegister@periodVal,w
  5757  0F44  0028               	movlb	8	; select bank8
  5758  0F45  0096               	movwf	22	;volatile
  5759  0F46  0008               	return
  5760  0F47                     __end_of_TMR4_LoadPeriodRegister:	
  5761                           
  5762                           	psect	text9
  5763  0184                     __ptext9:	
  5764 ;; *************** function _setCurrent *****************
  5765 ;; Defined at:
  5766 ;;		line 316 in file "main.c"
  5767 ;; Parameters:    Size  Location     Type
  5768 ;;  microamps       2   21[BANK0 ] int 
  5769 ;;  Vdd_mv          2   23[BANK0 ] int 
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;  DACValue        2   35[BANK0 ] int 
  5772 ;;  Vdac_mv         2   33[BANK0 ] int 
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      void 
  5775 ;; Registers used:
  5776 ;;		wreg, status,2, status,0, pclath, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 1F/0
  5779 ;;		On exit  : 1F/1
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5782 ;;      Params:         0       4       0       0       0       0       0       0
  5783 ;;      Locals:         0       4       0       0       0       0       0       0
  5784 ;;      Temps:          0       8       0       0       0       0       0       0
  5785 ;;      Totals:         0      16       0       0       0       0       0       0
  5786 ;;Total ram usage:       16 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    5
  5789 ;; This function calls:
  5790 ;;		___aldiv
  5791 ;;		___awdiv
  5792 ;;		___lmul
  5793 ;; This function is called by:
  5794 ;;		_process_remote_command
  5795 ;;		_main
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           
  5800                           ;psect for function _setCurrent
  5801  0184                     _setCurrent:	
  5802                           
  5803                           ;main.c: 318: int Vdac_mv = Vdd_mv - ((int32_t)(4700) * microamps + 500) / 1000;
  5804                           
  5805                           ;incstack = 0
  5806                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  5807  0184  3000               	movlw	0
  5808  0185  00A7               	movwf	___aldiv@divisor+3
  5809  0186  3000               	movlw	0
  5810  0187  00A6               	movwf	___aldiv@divisor+2
  5811  0188  3003               	movlw	3
  5812  0189  00A5               	movwf	___aldiv@divisor+1
  5813  018A  30E8               	movlw	232
  5814  018B  00A4               	movwf	___aldiv@divisor
  5815  018C  30F4               	movlw	244
  5816  018D  00B9               	movwf	??_setCurrent
  5817  018E  3001               	movlw	1
  5818  018F  00BA               	movwf	??_setCurrent+1
  5819  0190  3000               	movlw	0
  5820  0191  00BB               	movwf	??_setCurrent+2
  5821  0192  3000               	movlw	0
  5822  0193  00BC               	movwf	??_setCurrent+3
  5823  0194  0835               	movf	setCurrent@microamps,w
  5824  0195  00F2               	movwf	___lmul@multiplier
  5825  0196  0836               	movf	setCurrent@microamps+1,w
  5826  0197  00F3               	movwf	___lmul@multiplier+1
  5827  0198  0D89               	rlf	9,f
  5828  0199  3B89               	subwfb	9,f
  5829  019A  0989               	comf	9,f
  5830  019B  00F4               	movwf	___lmul@multiplier+2
  5831  019C  00F5               	movwf	___lmul@multiplier+3
  5832  019D  3000               	movlw	0
  5833  019E  00F9               	movwf	___lmul@multiplicand+3
  5834  019F  3000               	movlw	0
  5835  01A0  00F8               	movwf	___lmul@multiplicand+2
  5836  01A1  3012               	movlw	18
  5837  01A2  00F7               	movwf	___lmul@multiplicand+1
  5838  01A3  305C               	movlw	92
  5839  01A4  00F6               	movwf	___lmul@multiplicand
  5840  01A5  3185  25C2  3181   	fcall	___lmul
  5841  01A8  0872               	movf	?___lmul,w
  5842  01A9  07B9               	addwf	??_setCurrent,f
  5843  01AA  0873               	movf	?___lmul+1,w
  5844  01AB  3DBA               	addwfc	??_setCurrent+1,f
  5845  01AC  0874               	movf	?___lmul+2,w
  5846  01AD  3DBB               	addwfc	??_setCurrent+2,f
  5847  01AE  0875               	movf	?___lmul+3,w
  5848  01AF  3DBC               	addwfc	??_setCurrent+3,f
  5849  01B0  083C               	movf	??_setCurrent+3,w
  5850  01B1  00AB               	movwf	___aldiv@dividend+3
  5851  01B2  083B               	movf	??_setCurrent+2,w
  5852  01B3  00AA               	movwf	___aldiv@dividend+2
  5853  01B4  083A               	movf	??_setCurrent+1,w
  5854  01B5  00A9               	movwf	___aldiv@dividend+1
  5855  01B6  0839               	movf	??_setCurrent,w
  5856  01B7  00A8               	movwf	___aldiv@dividend
  5857  01B8  3182  2220  3181   	fcall	___aldiv
  5858  01BB  0824               	movf	?___aldiv,w
  5859  01BC  0237               	subwf	setCurrent@Vdd_mv,w
  5860  01BD  00C1               	movwf	setCurrent@Vdac_mv
  5861  01BE  0825               	movf	?___aldiv+1,w
  5862  01BF  3B38               	subwfb	setCurrent@Vdd_mv+1,w
  5863  01C0  00C2               	movwf	setCurrent@Vdac_mv+1
  5864                           
  5865                           ;main.c: 319: int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  5866  01C1  0837               	movf	setCurrent@Vdd_mv,w
  5867  01C2  00A4               	movwf	___aldiv@divisor
  5868  01C3  0838               	movf	setCurrent@Vdd_mv+1,w
  5869  01C4  00A5               	movwf	___aldiv@divisor+1
  5870  01C5  0D89               	rlf	9,f
  5871  01C6  3B89               	subwfb	9,f
  5872  01C7  0989               	comf	9,f
  5873  01C8  00A6               	movwf	___aldiv@divisor+2
  5874  01C9  00A7               	movwf	___aldiv@divisor+3
  5875  01CA  3002               	movlw	2
  5876  01CB  00F2               	movwf	___awdiv@divisor
  5877  01CC  3000               	movlw	0
  5878  01CD  00F3               	movwf	___awdiv@divisor+1
  5879  01CE  0838               	movf	setCurrent@Vdd_mv+1,w
  5880  01CF  00F5               	movwf	___awdiv@dividend+1
  5881  01D0  0837               	movf	setCurrent@Vdd_mv,w
  5882  01D1  00F4               	movwf	___awdiv@dividend
  5883  01D2  3184  2425  3181   	fcall	___awdiv
  5884  01D5  0872               	movf	?___awdiv,w
  5885  01D6  00B9               	movwf	??_setCurrent
  5886  01D7  0873               	movf	?___awdiv+1,w
  5887  01D8  00BA               	movwf	??_setCurrent+1
  5888  01D9  3000               	movlw	0
  5889  01DA  1BBA               	btfsc	??_setCurrent+1,7
  5890  01DB  30FF               	movlw	255
  5891  01DC  00BB               	movwf	??_setCurrent+2
  5892  01DD  00BC               	movwf	??_setCurrent+3
  5893  01DE  0841               	movf	setCurrent@Vdac_mv,w
  5894  01DF  00BD               	movwf	??_setCurrent+4
  5895  01E0  0842               	movf	setCurrent@Vdac_mv+1,w
  5896  01E1  00BE               	movwf	??_setCurrent+5
  5897  01E2  3000               	movlw	0
  5898  01E3  1BBE               	btfsc	??_setCurrent+5,7
  5899  01E4  30FF               	movlw	255
  5900  01E5  00BF               	movwf	??_setCurrent+6
  5901  01E6  00C0               	movwf	??_setCurrent+7
  5902  01E7  3008               	movlw	8
  5903  01E8                     u1895:	
  5904  01E8  35BD               	lslf	??_setCurrent+4,f
  5905  01E9  0DBE               	rlf	??_setCurrent+5,f
  5906  01EA  0DBF               	rlf	??_setCurrent+6,f
  5907  01EB  0DC0               	rlf	??_setCurrent+7,f
  5908  01EC  0B89               	decfsz	9,f
  5909  01ED  29E8               	goto	u1895
  5910  01EE  083D               	movf	??_setCurrent+4,w
  5911  01EF  07B9               	addwf	??_setCurrent,f
  5912  01F0  083E               	movf	??_setCurrent+5,w
  5913  01F1  3DBA               	addwfc	??_setCurrent+1,f
  5914  01F2  083F               	movf	??_setCurrent+6,w
  5915  01F3  3DBB               	addwfc	??_setCurrent+2,f
  5916  01F4  0840               	movf	??_setCurrent+7,w
  5917  01F5  3DBC               	addwfc	??_setCurrent+3,f
  5918  01F6  083C               	movf	??_setCurrent+3,w
  5919  01F7  00AB               	movwf	___aldiv@dividend+3
  5920  01F8  083B               	movf	??_setCurrent+2,w
  5921  01F9  00AA               	movwf	___aldiv@dividend+2
  5922  01FA  083A               	movf	??_setCurrent+1,w
  5923  01FB  00A9               	movwf	___aldiv@dividend+1
  5924  01FC  0839               	movf	??_setCurrent,w
  5925  01FD  00A8               	movwf	___aldiv@dividend
  5926  01FE  3182  2220  3181   	fcall	___aldiv
  5927  0201  0825               	movf	?___aldiv+1,w
  5928  0202  00C4               	movwf	setCurrent@DACValue+1
  5929  0203  0824               	movf	?___aldiv,w
  5930  0204  00C3               	movwf	setCurrent@DACValue
  5931                           
  5932                           ;main.c: 320: if(DACValue > 255){DACValue = 255;}
  5933  0205  0844               	movf	setCurrent@DACValue+1,w
  5934  0206  3A80               	xorlw	128
  5935  0207  00B9               	movwf	??_setCurrent
  5936  0208  3081               	movlw	129
  5937  0209  0239               	subwf	??_setCurrent,w
  5938  020A  1D03               	skipz
  5939  020B  2A0E               	goto	u1905
  5940  020C  3000               	movlw	0
  5941  020D  0243               	subwf	setCurrent@DACValue,w
  5942  020E                     u1905:	
  5943  020E  1C03               	skipc
  5944  020F  2A15               	goto	l2950
  5945  0210  30FF               	movlw	255
  5946  0211  0020               	movlb	0	; select bank0
  5947  0212  00C3               	movwf	setCurrent@DACValue
  5948  0213  3000               	movlw	0
  5949  0214  00C4               	movwf	setCurrent@DACValue+1
  5950  0215                     l2950:	
  5951                           
  5952                           ;main.c: 321: if(DACValue < 0){DACValue = 0;}
  5953  0215  0020               	movlb	0	; select bank0
  5954  0216  1FC4               	btfss	setCurrent@DACValue+1,7
  5955  0217  2A1A               	goto	l2954
  5956  0218  01C3               	clrf	setCurrent@DACValue
  5957  0219  01C4               	clrf	setCurrent@DACValue+1
  5958  021A                     l2954:	
  5959                           
  5960                           ;main.c: 322: dac_value = (uint8_t)DACValue;
  5961  021A  0843               	movf	setCurrent@DACValue,w
  5962  021B  00B9               	movwf	??_setCurrent
  5963  021C  0839               	movf	??_setCurrent,w
  5964  021D  0021               	movlb	1	; select bank1
  5965  021E  00CF               	movwf	_dac_value^(0+128)
  5966  021F  0008               	return
  5967  0220                     __end_of_setCurrent:	
  5968                           
  5969                           	psect	text10
  5970  05C2                     __ptext10:	
  5971 ;; *************** function ___lmul *****************
  5972 ;; Defined at:
  5973 ;;		line 15 in file "/Applications/microchip/xc8/v2.10/pic/sources/c90/common/Umul32.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;  multiplier      4    2[COMMON] unsigned long 
  5976 ;;  multiplicand    4    6[COMMON] unsigned long 
  5977 ;; Auto vars:     Size  Location     Type
  5978 ;;  product         4    0[BANK0 ] unsigned long 
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  4    2[COMMON] unsigned long 
  5981 ;; Registers used:
  5982 ;;		wreg, status,2, status,0
  5983 ;; Tracked objects:
  5984 ;;		On entry : 1F/0
  5985 ;;		On exit  : 1F/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5988 ;;      Params:         8       0       0       0       0       0       0       0
  5989 ;;      Locals:         0       4       0       0       0       0       0       0
  5990 ;;      Temps:          0       0       0       0       0       0       0       0
  5991 ;;      Totals:         8       4       0       0       0       0       0       0
  5992 ;;Total ram usage:       12 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:    4
  5995 ;; This function calls:
  5996 ;;		Nothing
  5997 ;; This function is called by:
  5998 ;;		_setCurrent
  5999 ;;		_setFrequency
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           
  6004                           ;psect for function ___lmul
  6005  05C2                     ___lmul:	
  6006                           
  6007                           ;incstack = 0
  6008                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6009  05C2  3000               	movlw	0
  6010  05C3  00A3               	movwf	___lmul@product+3
  6011  05C4  3000               	movlw	0
  6012  05C5  00A2               	movwf	___lmul@product+2
  6013  05C6  3000               	movlw	0
  6014  05C7  00A1               	movwf	___lmul@product+1
  6015  05C8  3000               	movlw	0
  6016  05C9  00A0               	movwf	___lmul@product
  6017  05CA                     l2760:	
  6018  05CA  1C72               	btfss	___lmul@multiplier,0
  6019  05CB  2DD4               	goto	l2764
  6020  05CC  0876               	movf	___lmul@multiplicand,w
  6021  05CD  07A0               	addwf	___lmul@product,f
  6022  05CE  0877               	movf	___lmul@multiplicand+1,w
  6023  05CF  3DA1               	addwfc	___lmul@product+1,f
  6024  05D0  0878               	movf	___lmul@multiplicand+2,w
  6025  05D1  3DA2               	addwfc	___lmul@product+2,f
  6026  05D2  0879               	movf	___lmul@multiplicand+3,w
  6027  05D3  3DA3               	addwfc	___lmul@product+3,f
  6028  05D4                     l2764:	
  6029  05D4  3001               	movlw	1
  6030  05D5                     u1635:	
  6031  05D5  35F6               	lslf	___lmul@multiplicand,f
  6032  05D6  0DF7               	rlf	___lmul@multiplicand+1,f
  6033  05D7  0DF8               	rlf	___lmul@multiplicand+2,f
  6034  05D8  0DF9               	rlf	___lmul@multiplicand+3,f
  6035  05D9  0B89               	decfsz	9,f
  6036  05DA  2DD5               	goto	u1635
  6037  05DB  3001               	movlw	1
  6038  05DC                     u1645:	
  6039  05DC  36F5               	lsrf	___lmul@multiplier+3,f
  6040  05DD  0CF4               	rrf	___lmul@multiplier+2,f
  6041  05DE  0CF3               	rrf	___lmul@multiplier+1,f
  6042  05DF  0CF2               	rrf	___lmul@multiplier,f
  6043  05E0  0B89               	decfsz	9,f
  6044  05E1  2DDC               	goto	u1645
  6045  05E2  0875               	movf	___lmul@multiplier+3,w
  6046  05E3  0474               	iorwf	___lmul@multiplier+2,w
  6047  05E4  0473               	iorwf	___lmul@multiplier+1,w
  6048  05E5  0472               	iorwf	___lmul@multiplier,w
  6049  05E6  1D03               	skipz
  6050  05E7  2DCA               	goto	l2760
  6051  05E8  0823               	movf	___lmul@product+3,w
  6052  05E9  00F5               	movwf	?___lmul+3
  6053  05EA  0822               	movf	___lmul@product+2,w
  6054  05EB  00F4               	movwf	?___lmul+2
  6055  05EC  0821               	movf	___lmul@product+1,w
  6056  05ED  00F3               	movwf	?___lmul+1
  6057  05EE  0820               	movf	___lmul@product,w
  6058  05EF  00F2               	movwf	?___lmul
  6059  05F0  0008               	return
  6060  05F1                     __end_of___lmul:	
  6061                           
  6062                           	psect	text11
  6063  0425                     __ptext11:	
  6064 ;; *************** function ___awdiv *****************
  6065 ;; Defined at:
  6066 ;;		line 5 in file "/Applications/microchip/xc8/v2.10/pic/sources/c90/common/awdiv.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;  divisor         2    2[COMMON] int 
  6069 ;;  dividend        2    4[COMMON] int 
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;  quotient        2    2[BANK0 ] int 
  6072 ;;  sign            1    1[BANK0 ] unsigned char 
  6073 ;;  counter         1    0[BANK0 ] unsigned char 
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  2    2[COMMON] int 
  6076 ;; Registers used:
  6077 ;;		wreg, status,2, status,0
  6078 ;; Tracked objects:
  6079 ;;		On entry : 1F/0
  6080 ;;		On exit  : 1F/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6083 ;;      Params:         4       0       0       0       0       0       0       0
  6084 ;;      Locals:         0       4       0       0       0       0       0       0
  6085 ;;      Temps:          1       0       0       0       0       0       0       0
  6086 ;;      Totals:         5       4       0       0       0       0       0       0
  6087 ;;Total ram usage:        9 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    4
  6090 ;; This function calls:
  6091 ;;		Nothing
  6092 ;; This function is called by:
  6093 ;;		_setCurrent
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           
  6098                           ;psect for function ___awdiv
  6099  0425                     ___awdiv:	
  6100                           
  6101                           ;incstack = 0
  6102                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6103  0425  01A1               	clrf	___awdiv@sign
  6104  0426  1FF3               	btfss	___awdiv@divisor+1,7
  6105  0427  2C2F               	goto	l2820
  6106  0428  09F2               	comf	___awdiv@divisor,f
  6107  0429  09F3               	comf	___awdiv@divisor+1,f
  6108  042A  0AF2               	incf	___awdiv@divisor,f
  6109  042B  1903               	skipnz
  6110  042C  0AF3               	incf	___awdiv@divisor+1,f
  6111  042D  01A1               	clrf	___awdiv@sign
  6112  042E  0AA1               	incf	___awdiv@sign,f
  6113  042F                     l2820:	
  6114  042F  1FF5               	btfss	___awdiv@dividend+1,7
  6115  0430  2C3A               	goto	l2826
  6116  0431  09F4               	comf	___awdiv@dividend,f
  6117  0432  09F5               	comf	___awdiv@dividend+1,f
  6118  0433  0AF4               	incf	___awdiv@dividend,f
  6119  0434  1903               	skipnz
  6120  0435  0AF5               	incf	___awdiv@dividend+1,f
  6121  0436  3001               	movlw	1
  6122  0437  00F6               	movwf	??___awdiv
  6123  0438  0876               	movf	??___awdiv,w
  6124  0439  06A1               	xorwf	___awdiv@sign,f
  6125  043A                     l2826:	
  6126  043A  01A2               	clrf	___awdiv@quotient
  6127  043B  01A3               	clrf	___awdiv@quotient+1
  6128  043C  0872               	movf	___awdiv@divisor,w
  6129  043D  0473               	iorwf	___awdiv@divisor+1,w
  6130  043E  1903               	btfsc	3,2
  6131  043F  2C69               	goto	l2848
  6132  0440  01A0               	clrf	___awdiv@counter
  6133  0441  0AA0               	incf	___awdiv@counter,f
  6134  0442                     l2836:	
  6135  0442  1BF3               	btfsc	___awdiv@divisor+1,7
  6136  0443  2C4E               	goto	l2838
  6137  0444  3001               	movlw	1
  6138  0445                     u1795:	
  6139  0445  35F2               	lslf	___awdiv@divisor,f
  6140  0446  0DF3               	rlf	___awdiv@divisor+1,f
  6141  0447  0B89               	decfsz	9,f
  6142  0448  2C45               	goto	u1795
  6143  0449  3001               	movlw	1
  6144  044A  00F6               	movwf	??___awdiv
  6145  044B  0876               	movf	??___awdiv,w
  6146  044C  07A0               	addwf	___awdiv@counter,f
  6147  044D  2C42               	goto	l2836
  6148  044E                     l2838:	
  6149  044E  3001               	movlw	1
  6150  044F                     u1815:	
  6151  044F  35A2               	lslf	___awdiv@quotient,f
  6152  0450  0DA3               	rlf	___awdiv@quotient+1,f
  6153  0451  0B89               	decfsz	9,f
  6154  0452  2C4F               	goto	u1815
  6155  0453  0873               	movf	___awdiv@divisor+1,w
  6156  0454  0275               	subwf	___awdiv@dividend+1,w
  6157  0455  1D03               	skipz
  6158  0456  2C59               	goto	u1825
  6159  0457  0872               	movf	___awdiv@divisor,w
  6160  0458  0274               	subwf	___awdiv@dividend,w
  6161  0459                     u1825:	
  6162  0459  1C03               	skipc
  6163  045A  2C60               	goto	l2844
  6164  045B  0872               	movf	___awdiv@divisor,w
  6165  045C  02F4               	subwf	___awdiv@dividend,f
  6166  045D  0873               	movf	___awdiv@divisor+1,w
  6167  045E  3BF5               	subwfb	___awdiv@dividend+1,f
  6168  045F  1422               	bsf	___awdiv@quotient,0
  6169  0460                     l2844:	
  6170  0460  3001               	movlw	1
  6171  0461                     u1835:	
  6172  0461  36F3               	lsrf	___awdiv@divisor+1,f
  6173  0462  0CF2               	rrf	___awdiv@divisor,f
  6174  0463  0B89               	decfsz	9,f
  6175  0464  2C61               	goto	u1835
  6176  0465  3001               	movlw	1
  6177  0466  02A0               	subwf	___awdiv@counter,f
  6178  0467  1D03               	btfss	3,2
  6179  0468  2C4E               	goto	l2838
  6180  0469                     l2848:	
  6181  0469  0821               	movf	___awdiv@sign,w
  6182  046A  1903               	btfsc	3,2
  6183  046B  2C71               	goto	l2852
  6184  046C  09A2               	comf	___awdiv@quotient,f
  6185  046D  09A3               	comf	___awdiv@quotient+1,f
  6186  046E  0AA2               	incf	___awdiv@quotient,f
  6187  046F  1903               	skipnz
  6188  0470  0AA3               	incf	___awdiv@quotient+1,f
  6189  0471                     l2852:	
  6190  0471  0823               	movf	___awdiv@quotient+1,w
  6191  0472  00F3               	movwf	?___awdiv+1
  6192  0473  0822               	movf	___awdiv@quotient,w
  6193  0474  00F2               	movwf	?___awdiv
  6194  0475  0008               	return
  6195  0476                     __end_of___awdiv:	
  6196                           
  6197                           	psect	text12
  6198  0476                     __ptext12:	
  6199 ;; *************** function _selectSomething *****************
  6200 ;; Defined at:
  6201 ;;		line 262 in file "main.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;		None
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;		None
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      void 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0, pclath, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6215 ;;      Params:         0       0       0       0       0       0       0       0
  6216 ;;      Locals:         0       0       0       0       0       0       0       0
  6217 ;;      Temps:          2       0       0       0       0       0       0       0
  6218 ;;      Totals:         2       0       0       0       0       0       0       0
  6219 ;;Total ram usage:        2 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    5
  6222 ;; This function calls:
  6223 ;;		_setLEDColor
  6224 ;; This function is called by:
  6225 ;;		_process_remote_command
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           
  6230                           ;psect for function _selectSomething
  6231  0476                     _selectSomething:	
  6232                           
  6233                           ;main.c: 264: setLEDColor(0, 180, 230);
  6234                           
  6235                           ;incstack = 0
  6236                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  6237  0476  30B4               	movlw	180
  6238  0477  00F6               	movwf	??_selectSomething
  6239  0478  0876               	movf	??_selectSomething,w
  6240  0479  00F2               	movwf	setLEDColor@green
  6241  047A  30E6               	movlw	230
  6242  047B  00F7               	movwf	??_selectSomething+1
  6243  047C  0877               	movf	??_selectSomething+1,w
  6244  047D  00F3               	movwf	setLEDColor@blue
  6245  047E  3000               	movlw	0
  6246  047F  3187  27E5  3184   	fcall	_setLEDColor
  6247                           
  6248                           ;main.c: 265: _delay((unsigned long)((500)*(4000000/4000.0)));
  6249  0482  3003               	movlw	3
  6250  0483  00F7               	movwf	??_selectSomething+1
  6251  0484  308A               	movlw	138
  6252  0485  00F6               	movwf	??_selectSomething
  6253  0486  3056               	movlw	86
  6254  0487                     u2137:	
  6255  0487  0B89               	decfsz	9,f
  6256  0488  2C87               	goto	u2137
  6257  0489  0BF6               	decfsz	??_selectSomething,f
  6258  048A  2C87               	goto	u2137
  6259  048B  0BF7               	decfsz	??_selectSomething+1,f
  6260  048C  2C87               	goto	u2137
  6261                           
  6262                           ;main.c: 266: setLEDColor(0, 0, 0);
  6263  048D  01F2               	clrf	setLEDColor@green
  6264  048E  01F3               	clrf	setLEDColor@blue
  6265  048F  3000               	movlw	0
  6266  0490  3187  27E5  3184   	fcall	_setLEDColor
  6267                           
  6268                           ;main.c: 267: _delay((unsigned long)((500)*(4000000/4000.0)));
  6269  0493  3003               	movlw	3
  6270  0494  00F7               	movwf	??_selectSomething+1
  6271  0495  308A               	movlw	138
  6272  0496  00F6               	movwf	??_selectSomething
  6273  0497  3056               	movlw	86
  6274  0498                     u2147:	
  6275  0498  0B89               	decfsz	9,f
  6276  0499  2C98               	goto	u2147
  6277  049A  0BF6               	decfsz	??_selectSomething,f
  6278  049B  2C98               	goto	u2147
  6279  049C  0BF7               	decfsz	??_selectSomething+1,f
  6280  049D  2C98               	goto	u2147
  6281                           
  6282                           ;main.c: 268: setLEDColor(0, 180, 230);
  6283  049E  30B4               	movlw	180
  6284  049F  00F6               	movwf	??_selectSomething
  6285  04A0  0876               	movf	??_selectSomething,w
  6286  04A1  00F2               	movwf	setLEDColor@green
  6287  04A2  30E6               	movlw	230
  6288  04A3  00F7               	movwf	??_selectSomething+1
  6289  04A4  0877               	movf	??_selectSomething+1,w
  6290  04A5  00F3               	movwf	setLEDColor@blue
  6291  04A6  3000               	movlw	0
  6292  04A7  3187  27E5  3184   	fcall	_setLEDColor
  6293                           
  6294                           ;main.c: 269: _delay((unsigned long)((500)*(4000000/4000.0)));
  6295  04AA  3003               	movlw	3
  6296  04AB  00F7               	movwf	??_selectSomething+1
  6297  04AC  308A               	movlw	138
  6298  04AD  00F6               	movwf	??_selectSomething
  6299  04AE  3056               	movlw	86
  6300  04AF                     u2157:	
  6301  04AF  0B89               	decfsz	9,f
  6302  04B0  2CAF               	goto	u2157
  6303  04B1  0BF6               	decfsz	??_selectSomething,f
  6304  04B2  2CAF               	goto	u2157
  6305  04B3  0BF7               	decfsz	??_selectSomething+1,f
  6306  04B4  2CAF               	goto	u2157
  6307                           
  6308                           ;main.c: 270: setLEDColor(0, 0, 0);
  6309  04B5  01F2               	clrf	setLEDColor@green
  6310  04B6  01F3               	clrf	setLEDColor@blue
  6311  04B7  3000               	movlw	0
  6312  04B8  3187  27E5  3184   	fcall	_setLEDColor
  6313                           
  6314                           ;main.c: 271: _delay((unsigned long)((500)*(4000000/4000.0)));
  6315  04BB  3003               	movlw	3
  6316  04BC  00F7               	movwf	??_selectSomething+1
  6317  04BD  308A               	movlw	138
  6318  04BE  00F6               	movwf	??_selectSomething
  6319  04BF  3056               	movlw	86
  6320  04C0                     u2167:	
  6321  04C0  0B89               	decfsz	9,f
  6322  04C1  2CC0               	goto	u2167
  6323  04C2  0BF6               	decfsz	??_selectSomething,f
  6324  04C3  2CC0               	goto	u2167
  6325  04C4  0BF7               	decfsz	??_selectSomething+1,f
  6326  04C5  2CC0               	goto	u2167
  6327  04C6  0008               	return
  6328  04C7                     __end_of_selectSomething:	
  6329                           
  6330                           	psect	text13
  6331  06BC                     __ptext13:	
  6332 ;; *************** function _selectResetValue *****************
  6333 ;; Defined at:
  6334 ;;		line 304 in file "main.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;		None
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;		None
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      void 
  6341 ;; Registers used:
  6342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 1F/1
  6345 ;;		On exit  : 1F/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6348 ;;      Params:         0       0       0       0       0       0       0       0
  6349 ;;      Locals:         0       0       0       0       0       0       0       0
  6350 ;;      Temps:          0       2       0       0       0       0       0       0
  6351 ;;      Totals:         0       2       0       0       0       0       0       0
  6352 ;;Total ram usage:        2 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    7
  6355 ;; This function calls:
  6356 ;;		_printf
  6357 ;;		_setLEDColor
  6358 ;; This function is called by:
  6359 ;;		_process_remote_command
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function _selectResetValue
  6365  06BC                     _selectResetValue:	
  6366                           
  6367                           ;main.c: 305: setLEDColor(200, 105, 0);
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _selectResetValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6371  06BC  3069               	movlw	105
  6372  06BD  0020               	movlb	0	; select bank0
  6373  06BE  00A2               	movwf	??_selectResetValue
  6374  06BF  0822               	movf	??_selectResetValue,w
  6375  06C0  00F2               	movwf	setLEDColor@green
  6376  06C1  01F3               	clrf	setLEDColor@blue
  6377  06C2  30C8               	movlw	200
  6378  06C3  3187  27E5  3186   	fcall	_setLEDColor
  6379                           
  6380                           ;main.c: 306: _delay((unsigned long)((500)*(4000000/4000.0)));
  6381  06C6  3003               	movlw	3
  6382  06C7  0020               	movlb	0	; select bank0
  6383  06C8  00A3               	movwf	??_selectResetValue+1
  6384  06C9  308A               	movlw	138
  6385  06CA  00A2               	movwf	??_selectResetValue
  6386  06CB  3055               	movlw	85
  6387  06CC                     u2177:	
  6388  06CC  0B89               	decfsz	9,f
  6389  06CD  2ECC               	goto	u2177
  6390  06CE  0BA2               	decfsz	??_selectResetValue,f
  6391  06CF  2ECC               	goto	u2177
  6392  06D0  0BA3               	decfsz	??_selectResetValue+1,f
  6393  06D1  2ECC               	goto	u2177
  6394  06D2  3200               	nop2
  6395                           
  6396                           ;main.c: 307: setLEDColor(0, 0, 0);
  6397  06D3  01F2               	clrf	setLEDColor@green
  6398  06D4  01F3               	clrf	setLEDColor@blue
  6399  06D5  3000               	movlw	0
  6400  06D6  3187  27E5  3186   	fcall	_setLEDColor
  6401                           
  6402                           ;main.c: 308: printf("\n reset value selected");
  6403  06D9  30B9               	movlw	low (STR_5| (0+32768))
  6404  06DA  00F4               	movwf	printf@f
  6405  06DB  3087               	movlw	high (STR_5| (0+32768))
  6406  06DC  00F5               	movwf	printf@f+1
  6407  06DD  3187  2780         	fcall	_printf
  6408  06DF  0008               	return
  6409  06E0                     __end_of_selectResetValue:	
  6410                           
  6411                           	psect	text14
  6412  06E0                     __ptext14:	
  6413 ;; *************** function _selectIncrease *****************
  6414 ;; Defined at:
  6415 ;;		line 290 in file "main.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;		None
  6418 ;; Auto vars:     Size  Location     Type
  6419 ;;		None
  6420 ;; Return value:  Size  Location     Type
  6421 ;;                  1    wreg      void 
  6422 ;; Registers used:
  6423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6424 ;; Tracked objects:
  6425 ;;		On entry : 0/0
  6426 ;;		On exit  : 1F/0
  6427 ;;		Unchanged: 0/0
  6428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6429 ;;      Params:         0       0       0       0       0       0       0       0
  6430 ;;      Locals:         0       0       0       0       0       0       0       0
  6431 ;;      Temps:          0       2       0       0       0       0       0       0
  6432 ;;      Totals:         0       2       0       0       0       0       0       0
  6433 ;;Total ram usage:        2 bytes
  6434 ;; Hardware stack levels used:    1
  6435 ;; Hardware stack levels required when called:    7
  6436 ;; This function calls:
  6437 ;;		_printf
  6438 ;;		_setLEDColor
  6439 ;; This function is called by:
  6440 ;;		_process_remote_command
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           
  6445                           ;psect for function _selectIncrease
  6446  06E0                     _selectIncrease:	
  6447                           
  6448                           ;main.c: 291: setLEDColor(0, 50, 255);
  6449                           
  6450                           ;incstack = 0
  6451                           ; Regs used in _selectIncrease: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6452  06E0  3032               	movlw	50
  6453  06E1  0020               	movlb	0	; select bank0
  6454  06E2  00A2               	movwf	??_selectIncrease
  6455  06E3  0822               	movf	??_selectIncrease,w
  6456  06E4  00F2               	movwf	setLEDColor@green
  6457  06E5  30FF               	movlw	255
  6458  06E6  00A3               	movwf	??_selectIncrease+1
  6459  06E7  0823               	movf	??_selectIncrease+1,w
  6460  06E8  00F3               	movwf	setLEDColor@blue
  6461  06E9  3000               	movlw	0
  6462  06EA  3187  27E5  3186   	fcall	_setLEDColor
  6463                           
  6464                           ;main.c: 292: _delay((unsigned long)((100)*(4000000/4000.0)));
  6465  06ED  3082               	movlw	130
  6466  06EE  0020               	movlb	0	; select bank0
  6467  06EF  00A2               	movwf	??_selectIncrease
  6468  06F0  30DD               	movlw	221
  6469  06F1                     u2187:	
  6470  06F1  0B89               	decfsz	9,f
  6471  06F2  2EF1               	goto	u2187
  6472  06F3  0BA2               	decfsz	??_selectIncrease,f
  6473  06F4  2EF1               	goto	u2187
  6474  06F5  3200               	nop2
  6475                           
  6476                           ;main.c: 293: setLEDColor(0, 0, 0);
  6477  06F6  01F2               	clrf	setLEDColor@green
  6478  06F7  01F3               	clrf	setLEDColor@blue
  6479  06F8  3000               	movlw	0
  6480  06F9  3187  27E5  3186   	fcall	_setLEDColor
  6481                           
  6482                           ;main.c: 294: printf("\n increase selected");
  6483  06FC  300E               	movlw	low (STR_3| (0+32768))
  6484  06FD  00F4               	movwf	printf@f
  6485  06FE  3088               	movlw	high (STR_3| (0+32768))
  6486  06FF  00F5               	movwf	printf@f+1
  6487  0700  3187  2780         	fcall	_printf
  6488  0702  0008               	return
  6489  0703                     __end_of_selectIncrease:	
  6490                           
  6491                           	psect	text15
  6492  0646                     __ptext15:	
  6493 ;; *************** function _selectFrequency *****************
  6494 ;; Defined at:
  6495 ;;		line 274 in file "main.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;		None
  6498 ;; Auto vars:     Size  Location     Type
  6499 ;;		None
  6500 ;; Return value:  Size  Location     Type
  6501 ;;                  1    wreg      void 
  6502 ;; Registers used:
  6503 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6504 ;; Tracked objects:
  6505 ;;		On entry : 1F/1
  6506 ;;		On exit  : 1F/0
  6507 ;;		Unchanged: 0/0
  6508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6509 ;;      Params:         0       0       0       0       0       0       0       0
  6510 ;;      Locals:         0       0       0       0       0       0       0       0
  6511 ;;      Temps:          0       2       0       0       0       0       0       0
  6512 ;;      Totals:         0       2       0       0       0       0       0       0
  6513 ;;Total ram usage:        2 bytes
  6514 ;; Hardware stack levels used:    1
  6515 ;; Hardware stack levels required when called:    7
  6516 ;; This function calls:
  6517 ;;		_printf
  6518 ;;		_setLEDColor
  6519 ;; This function is called by:
  6520 ;;		_process_remote_command
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           
  6525                           ;psect for function _selectFrequency
  6526  0646                     _selectFrequency:	
  6527                           
  6528                           ;main.c: 275: interfaceState = STATE_FREQUENCY;
  6529                           
  6530                           ;incstack = 0
  6531                           ; Regs used in _selectFrequency: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6532  0646  3002               	movlw	2
  6533  0647  0020               	movlb	0	; select bank0
  6534  0648  00A2               	movwf	??_selectFrequency
  6535  0649  0822               	movf	??_selectFrequency,w
  6536  064A  00EF               	movwf	_interfaceState
  6537                           
  6538                           ;main.c: 276: setLEDColor(0, 150, 0);
  6539  064B  3096               	movlw	150
  6540  064C  00A2               	movwf	??_selectFrequency
  6541  064D  0822               	movf	??_selectFrequency,w
  6542  064E  00F2               	movwf	setLEDColor@green
  6543  064F  01F3               	clrf	setLEDColor@blue
  6544  0650  3000               	movlw	0
  6545  0651  3187  27E5  3186   	fcall	_setLEDColor
  6546                           
  6547                           ;main.c: 277: _delay((unsigned long)((1000)*(4000000/4000.0)));
  6548  0654  3006               	movlw	6
  6549  0655  0020               	movlb	0	; select bank0
  6550  0656  00A3               	movwf	??_selectFrequency+1
  6551  0657  3013               	movlw	19
  6552  0658  00A2               	movwf	??_selectFrequency
  6553  0659  30AD               	movlw	173
  6554  065A                     u2197:	
  6555  065A  0B89               	decfsz	9,f
  6556  065B  2E5A               	goto	u2197
  6557  065C  0BA2               	decfsz	??_selectFrequency,f
  6558  065D  2E5A               	goto	u2197
  6559  065E  0BA3               	decfsz	??_selectFrequency+1,f
  6560  065F  2E5A               	goto	u2197
  6561  0660  3200               	nop2
  6562                           
  6563                           ;main.c: 278: setLEDColor(0, 0, 0);
  6564  0661  01F2               	clrf	setLEDColor@green
  6565  0662  01F3               	clrf	setLEDColor@blue
  6566  0663  3000               	movlw	0
  6567  0664  3187  27E5  3186   	fcall	_setLEDColor
  6568                           
  6569                           ;main.c: 279: printf("\n Frequency selected");
  6570  0667  30D0               	movlw	low (STR_1| (0+32768))
  6571  0668  00F4               	movwf	printf@f
  6572  0669  3087               	movlw	high (STR_1| (0+32768))
  6573  066A  00F5               	movwf	printf@f+1
  6574  066B  3187  2780         	fcall	_printf
  6575  066D  0008               	return
  6576  066E                     __end_of_selectFrequency:	
  6577                           
  6578                           	psect	text16
  6579  0763                     __ptext16:	
  6580 ;; *************** function _selectDecrease *****************
  6581 ;; Defined at:
  6582 ;;		line 297 in file "main.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;		None
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;		None
  6587 ;; Return value:  Size  Location     Type
  6588 ;;                  1    wreg      void 
  6589 ;; Registers used:
  6590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6591 ;; Tracked objects:
  6592 ;;		On entry : 1E/0
  6593 ;;		On exit  : 1F/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6596 ;;      Params:         0       0       0       0       0       0       0       0
  6597 ;;      Locals:         0       0       0       0       0       0       0       0
  6598 ;;      Temps:          1       0       0       0       0       0       0       0
  6599 ;;      Totals:         1       0       0       0       0       0       0       0
  6600 ;;Total ram usage:        1 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    7
  6603 ;; This function calls:
  6604 ;;		_printf
  6605 ;;		_setLEDColor
  6606 ;; This function is called by:
  6607 ;;		_process_remote_command
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           
  6612                           ;psect for function _selectDecrease
  6613  0763                     _selectDecrease:	
  6614                           
  6615                           ;main.c: 298: setLEDColor(130, 160, 0);
  6616                           
  6617                           ;incstack = 0
  6618                           ; Regs used in _selectDecrease: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6619  0763  30A0               	movlw	160
  6620  0764  00F9               	movwf	??_selectDecrease
  6621  0765  0879               	movf	??_selectDecrease,w
  6622  0766  00F2               	movwf	setLEDColor@green
  6623  0767  01F3               	clrf	setLEDColor@blue
  6624  0768  3082               	movlw	130
  6625  0769  3187  27E5  3187   	fcall	_setLEDColor
  6626                           
  6627                           ;main.c: 299: _delay((unsigned long)((100)*(4000000/4000.0)));
  6628  076C  3082               	movlw	130
  6629  076D  00F9               	movwf	??_selectDecrease
  6630  076E  30DE               	movlw	222
  6631  076F                     u2207:	
  6632  076F  0B89               	decfsz	9,f
  6633  0770  2F6F               	goto	u2207
  6634  0771  0BF9               	decfsz	??_selectDecrease,f
  6635  0772  2F6F               	goto	u2207
  6636                           
  6637                           ;main.c: 300: setLEDColor(0, 0, 0);
  6638  0773  01F2               	clrf	setLEDColor@green
  6639  0774  01F3               	clrf	setLEDColor@blue
  6640  0775  3000               	movlw	0
  6641  0776  3187  27E5  3187   	fcall	_setLEDColor
  6642                           
  6643                           ;main.c: 301: printf("\n decrease selected");
  6644  0779  30FA               	movlw	low (STR_4| (0+32768))
  6645  077A  00F4               	movwf	printf@f
  6646  077B  3087               	movlw	high (STR_4| (0+32768))
  6647  077C  00F5               	movwf	printf@f+1
  6648  077D  3187  2780         	fcall	_printf
  6649  077F  0008               	return
  6650  0780                     __end_of_selectDecrease:	
  6651                           
  6652                           	psect	text17
  6653  0696                     __ptext17:	
  6654 ;; *************** function _selectCurrent *****************
  6655 ;; Defined at:
  6656 ;;		line 282 in file "main.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;		None
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  1    wreg      void 
  6663 ;; Registers used:
  6664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : 1F/1
  6667 ;;		On exit  : 1F/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6670 ;;      Params:         0       0       0       0       0       0       0       0
  6671 ;;      Locals:         0       0       0       0       0       0       0       0
  6672 ;;      Temps:          0       2       0       0       0       0       0       0
  6673 ;;      Totals:         0       2       0       0       0       0       0       0
  6674 ;;Total ram usage:        2 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    7
  6677 ;; This function calls:
  6678 ;;		_printf
  6679 ;;		_setLEDColor
  6680 ;; This function is called by:
  6681 ;;		_process_remote_command
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           
  6686                           ;psect for function _selectCurrent
  6687  0696                     _selectCurrent:	
  6688                           
  6689                           ;main.c: 283: interfaceState = STATE_CURRENT;
  6690                           
  6691                           ;incstack = 0
  6692                           ; Regs used in _selectCurrent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6693  0696  0020               	movlb	0	; select bank0
  6694  0697  01EF               	clrf	_interfaceState
  6695  0698  0AEF               	incf	_interfaceState,f
  6696                           
  6697                           ;main.c: 284: setLEDColor(0, 0, 255);
  6698  0699  01F2               	clrf	setLEDColor@green
  6699  069A  30FF               	movlw	255
  6700  069B  00A2               	movwf	??_selectCurrent
  6701  069C  0822               	movf	??_selectCurrent,w
  6702  069D  00F3               	movwf	setLEDColor@blue
  6703  069E  3000               	movlw	0
  6704  069F  3187  27E5  3186   	fcall	_setLEDColor
  6705                           
  6706                           ;main.c: 285: _delay((unsigned long)((1000)*(4000000/4000.0)));
  6707  06A2  3006               	movlw	6
  6708  06A3  0020               	movlb	0	; select bank0
  6709  06A4  00A3               	movwf	??_selectCurrent+1
  6710  06A5  3013               	movlw	19
  6711  06A6  00A2               	movwf	??_selectCurrent
  6712  06A7  30AD               	movlw	173
  6713  06A8                     u2217:	
  6714  06A8  0B89               	decfsz	9,f
  6715  06A9  2EA8               	goto	u2217
  6716  06AA  0BA2               	decfsz	??_selectCurrent,f
  6717  06AB  2EA8               	goto	u2217
  6718  06AC  0BA3               	decfsz	??_selectCurrent+1,f
  6719  06AD  2EA8               	goto	u2217
  6720  06AE  3200               	nop2
  6721                           
  6722                           ;main.c: 286: setLEDColor(0, 0, 0);
  6723  06AF  01F2               	clrf	setLEDColor@green
  6724  06B0  01F3               	clrf	setLEDColor@blue
  6725  06B1  3000               	movlw	0
  6726  06B2  3187  27E5  3186   	fcall	_setLEDColor
  6727                           
  6728                           ;main.c: 287: printf("\n current selected");
  6729  06B5  3022               	movlw	low (STR_2| (0+32768))
  6730  06B6  00F4               	movwf	printf@f
  6731  06B7  3088               	movlw	high (STR_2| (0+32768))
  6732  06B8  00F5               	movwf	printf@f+1
  6733  06B9  3187  2780         	fcall	_printf
  6734  06BB  0008               	return
  6735  06BC                     __end_of_selectCurrent:	
  6736                           
  6737                           	psect	text18
  6738  0780                     __ptext18:	
  6739 ;; *************** function _printf *****************
  6740 ;; Defined at:
  6741 ;;		line 477 in file "/Applications/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;  f               2    4[COMMON] PTR const unsigned char 
  6744 ;;		 -> STR_5(23), STR_4(20), STR_3(20), STR_2(19), 
  6745 ;;		 -> STR_1(21), 
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;  tmpval          4    0        struct .
  6748 ;;  cp              2    0        PTR const unsigned char 
  6749 ;;  len             2    0        unsigned int 
  6750 ;;  val             2    0        unsigned int 
  6751 ;;  c               1    1[BANK0 ] unsigned char 
  6752 ;;  ap              1    0[BANK0 ] PTR void [1]
  6753 ;;		 -> ?_printf(2), 
  6754 ;;  flag            1    0        unsigned char 
  6755 ;;  prec            1    0        char 
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  2    4[COMMON] int 
  6758 ;; Registers used:
  6759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 1F/C
  6762 ;;		On exit  : 1F/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6765 ;;      Params:         2       0       0       0       0       0       0       0
  6766 ;;      Locals:         0       2       0       0       0       0       0       0
  6767 ;;      Temps:          3       0       0       0       0       0       0       0
  6768 ;;      Totals:         5       2       0       0       0       0       0       0
  6769 ;;Total ram usage:        7 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    6
  6772 ;; This function calls:
  6773 ;;		_putch
  6774 ;; This function is called by:
  6775 ;;		_selectFrequency
  6776 ;;		_selectCurrent
  6777 ;;		_selectIncrease
  6778 ;;		_selectDecrease
  6779 ;;		_selectResetValue
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           
  6784                           ;psect for function _printf
  6785  0780                     _printf:	
  6786                           
  6787                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
  6788                           
  6789                           ;incstack = 0
  6790                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6791  0780  3076               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6792  0781  00F6               	movwf	??_printf
  6793  0782  0876               	movf	??_printf,w
  6794  0783  0020               	movlb	0	; select bank0
  6795  0784  00A0               	movwf	printf@ap
  6796  0785                     l2756:	
  6797                           ;doprnt.c: 559: continue;
  6798                           
  6799                           ;doprnt.c: 553: while((c = *f++)) {
  6800                           
  6801  0785  0875               	movf	printf@f+1,w
  6802  0786  00F7               	movwf	??_printf+1
  6803  0787  0874               	movf	printf@f,w
  6804  0788  00F6               	movwf	??_printf
  6805  0789  0AF4               	incf	printf@f,f
  6806  078A  1903               	skipnz
  6807  078B  0AF5               	incf	printf@f+1,f
  6808  078C  0876               	movf	??_printf,w
  6809  078D  0084               	movwf	4
  6810  078E  0877               	movf	??_printf+1,w
  6811  078F  0085               	movwf	5
  6812  0790  0800               	movf	0,w	;code access
  6813  0791  00F8               	movwf	??_printf+2
  6814  0792  0878               	movf	??_printf+2,w
  6815  0793  0020               	movlb	0	; select bank0
  6816  0794  00A1               	movwf	printf@c
  6817  0795  0821               	movf	printf@c,w
  6818  0796  1903               	btfsc	3,2
  6819  0797  0008               	return
  6820                           
  6821                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
  6822  0798  0821               	movf	printf@c,w
  6823  0799  318F  273D  3187   	fcall	_putch
  6824  079C  2F85               	goto	l2756
  6825  079D                     __end_of_printf:	
  6826                           
  6827                           	psect	text19
  6828  0F3D                     __ptext19:	
  6829 ;; *************** function _putch *****************
  6830 ;; Defined at:
  6831 ;;		line 146 in file "mcc_generated_files/eusart.c"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;  txData          1    wreg     unsigned char 
  6834 ;; Auto vars:     Size  Location     Type
  6835 ;;  txData          1    3[COMMON] unsigned char 
  6836 ;; Return value:  Size  Location     Type
  6837 ;;                  1    wreg      void 
  6838 ;; Registers used:
  6839 ;;		wreg, status,2, status,0, pclath, cstack
  6840 ;; Tracked objects:
  6841 ;;		On entry : 1F/0
  6842 ;;		On exit  : 1F/3
  6843 ;;		Unchanged: 0/0
  6844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6845 ;;      Params:         0       0       0       0       0       0       0       0
  6846 ;;      Locals:         1       0       0       0       0       0       0       0
  6847 ;;      Temps:          0       0       0       0       0       0       0       0
  6848 ;;      Totals:         1       0       0       0       0       0       0       0
  6849 ;;Total ram usage:        1 bytes
  6850 ;; Hardware stack levels used:    1
  6851 ;; Hardware stack levels required when called:    5
  6852 ;; This function calls:
  6853 ;;		_EUSART_Write
  6854 ;; This function is called by:
  6855 ;;		_printf
  6856 ;; This function uses a non-reentrant model
  6857 ;;
  6858                           
  6859                           
  6860                           ;psect for function _putch
  6861  0F3D                     _putch:	
  6862                           
  6863                           ;incstack = 0
  6864                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  6865                           ;putch@txData stored from wreg
  6866  0F3D  00F3               	movwf	putch@txData
  6867                           
  6868                           ;eusart.c: 148: EUSART_Write(txData);
  6869  0F3E  0873               	movf	putch@txData,w
  6870  0F3F  318F  275F         	fcall	_EUSART_Write
  6871  0F41  0008               	return
  6872  0F42                     __end_of_putch:	
  6873                           
  6874                           	psect	text20
  6875  0F5F                     __ptext20:	
  6876 ;; *************** function _EUSART_Write *****************
  6877 ;; Defined at:
  6878 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  txData          1    wreg     unsigned char 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;  txData          1    2[COMMON] unsigned char 
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  1    wreg      void 
  6885 ;; Registers used:
  6886 ;;		wreg
  6887 ;; Tracked objects:
  6888 ;;		On entry : 1F/0
  6889 ;;		On exit  : 1F/3
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6892 ;;      Params:         0       0       0       0       0       0       0       0
  6893 ;;      Locals:         1       0       0       0       0       0       0       0
  6894 ;;      Temps:          0       0       0       0       0       0       0       0
  6895 ;;      Totals:         1       0       0       0       0       0       0       0
  6896 ;;Total ram usage:        1 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    4
  6899 ;; This function calls:
  6900 ;;		Nothing
  6901 ;; This function is called by:
  6902 ;;		_putch
  6903 ;; This function uses a non-reentrant model
  6904 ;;
  6905                           
  6906                           
  6907                           ;psect for function _EUSART_Write
  6908  0F5F                     _EUSART_Write:	
  6909                           
  6910                           ;incstack = 0
  6911                           ; Regs used in _EUSART_Write: [wreg]
  6912                           ;EUSART_Write@txData stored from wreg
  6913  0F5F  00F2               	movwf	EUSART_Write@txData
  6914  0F60                     l213:	
  6915                           ;eusart.c: 135: {
  6916                           
  6917  0F60  1E11               	btfss	17,4	;volatile
  6918  0F61  2F60               	goto	l213
  6919                           
  6920                           ;eusart.c: 136: };eusart.c: 138: TX1REG = txData;
  6921  0F62  0872               	movf	EUSART_Write@txData,w
  6922  0F63  0023               	movlb	3	; select bank3
  6923  0F64  009A               	movwf	26	;volatile
  6924  0F65  0008               	return
  6925  0F66                     __end_of_EUSART_Write:	
  6926                           
  6927                           	psect	text21
  6928  05F1                     __ptext21:	
  6929 ;; *************** function _battery_voltage *****************
  6930 ;; Defined at:
  6931 ;;		line 147 in file "main.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  2   19[BANK0 ] int 
  6938 ;; Registers used:
  6939 ;;		wreg, status,2, status,0, pclath, cstack
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 1F/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6945 ;;      Params:         0       2       0       0       0       0       0       0
  6946 ;;      Locals:         0       0       0       0       0       0       0       0
  6947 ;;      Temps:          0       0       0       0       0       0       0       0
  6948 ;;      Totals:         0       2       0       0       0       0       0       0
  6949 ;;Total ram usage:        2 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    5
  6952 ;; This function calls:
  6953 ;;		___aldiv
  6954 ;; This function is called by:
  6955 ;;		_process_remote_command
  6956 ;;		_main
  6957 ;; This function uses a non-reentrant model
  6958 ;;
  6959                           
  6960                           
  6961                           ;psect for function _battery_voltage
  6962  05F1                     _battery_voltage:	
  6963                           
  6964                           ;main.c: 149: FVRCON = 0b10000001;
  6965                           
  6966                           ;incstack = 0
  6967                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  6968  05F1  3081               	movlw	129
  6969  05F2  0022               	movlb	2	; select bank2
  6970  05F3  0097               	movwf	23	;volatile
  6971                           
  6972                           ;main.c: 150: ADCON0 = 0b01111101;
  6973  05F4  307D               	movlw	125
  6974  05F5  0021               	movlb	1	; select bank1
  6975  05F6  009D               	movwf	29	;volatile
  6976                           
  6977                           ;main.c: 151: ADCON1 = 0b10010000;
  6978  05F7  3090               	movlw	144
  6979  05F8  009E               	movwf	30	;volatile
  6980  05F9                     l562:	
  6981                           ;main.c: 152: while(!FVRCONbits.FVRRDY){ }
  6982                           
  6983  05F9  0022               	movlb	2	; select bank2
  6984  05FA  1F17               	btfss	23,6	;volatile
  6985  05FB  2DF9               	goto	l562
  6986                           
  6987                           ;main.c: 153: __nop();
  6988  05FC  0000               	nop
  6989                           
  6990                           ;main.c: 154: __nop();
  6991  05FD  0000               	nop
  6992                           
  6993                           ;main.c: 155: __nop();
  6994  05FE  0000               	nop
  6995                           
  6996                           ;main.c: 156: __nop();
  6997  05FF  0000               	nop
  6998                           
  6999                           ;main.c: 157: __nop();
  7000  0600  0000               	nop
  7001                           
  7002                           ;main.c: 158: ADCON0bits.GO_nDONE = 1;
  7003  0601  0021               	movlb	1	; select bank1
  7004  0602  149D               	bsf	29,1	;volatile
  7005  0603                     l565:	
  7006                           ;main.c: 159: while(ADCON0bits.GO_nDONE){ }
  7007                           
  7008  0603  189D               	btfsc	29,1	;volatile
  7009  0604  2E03               	goto	l565
  7010                           
  7011                           ;main.c: 160: ADCON0bits.ADON = 0;
  7012  0605  101D               	bcf	29,0	;volatile
  7013                           
  7014                           ;main.c: 165: return 1047552L / ADRES;
  7015  0606  081B               	movf	27,w	;volatile
  7016  0607  0020               	movlb	0	; select bank0
  7017  0608  00A4               	movwf	___aldiv@divisor
  7018  0609  0021               	movlb	1	; select bank1
  7019  060A  081C               	movf	28,w	;volatile
  7020  060B  0020               	movlb	0	; select bank0
  7021  060C  00A5               	movwf	___aldiv@divisor+1
  7022  060D  01A6               	clrf	___aldiv@divisor+2
  7023  060E  01A7               	clrf	___aldiv@divisor+3
  7024  060F  3000               	movlw	0
  7025  0610  00AB               	movwf	___aldiv@dividend+3
  7026  0611  300F               	movlw	15
  7027  0612  00AA               	movwf	___aldiv@dividend+2
  7028  0613  30FC               	movlw	252
  7029  0614  00A9               	movwf	___aldiv@dividend+1
  7030  0615  3000               	movlw	0
  7031  0616  00A8               	movwf	___aldiv@dividend
  7032  0617  3182  2220         	fcall	___aldiv
  7033  0619  0825               	movf	?___aldiv+1,w
  7034  061A  00B4               	movwf	?_battery_voltage+1
  7035  061B  0824               	movf	?___aldiv,w
  7036  061C  00B3               	movwf	?_battery_voltage
  7037  061D  0008               	return
  7038  061E                     __end_of_battery_voltage:	
  7039                           
  7040                           	psect	text22
  7041  0220                     __ptext22:	
  7042 ;; *************** function ___aldiv *****************
  7043 ;; Defined at:
  7044 ;;		line 5 in file "/Applications/microchip/xc8/v2.10/pic/sources/c90/common/aldiv.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;  divisor         4    4[BANK0 ] long 
  7047 ;;  dividend        4    8[BANK0 ] long 
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;  quotient        4   15[BANK0 ] long 
  7050 ;;  sign            1   14[BANK0 ] unsigned char 
  7051 ;;  counter         1   13[BANK0 ] unsigned char 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  4    4[BANK0 ] long 
  7054 ;; Registers used:
  7055 ;;		wreg, status,2, status,0
  7056 ;; Tracked objects:
  7057 ;;		On entry : 1F/0
  7058 ;;		On exit  : 1F/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7061 ;;      Params:         0       8       0       0       0       0       0       0
  7062 ;;      Locals:         0       6       0       0       0       0       0       0
  7063 ;;      Temps:          0       1       0       0       0       0       0       0
  7064 ;;      Totals:         0      15       0       0       0       0       0       0
  7065 ;;Total ram usage:       15 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:    4
  7068 ;; This function calls:
  7069 ;;		Nothing
  7070 ;; This function is called by:
  7071 ;;		_battery_voltage
  7072 ;;		_setCurrent
  7073 ;;		_setFrequency
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           
  7078                           ;psect for function ___aldiv
  7079  0220                     ___aldiv:	
  7080                           
  7081                           ;incstack = 0
  7082                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7083  0220  01AE               	clrf	___aldiv@sign
  7084  0221  1FA7               	btfss	___aldiv@divisor+3,7
  7085  0222  2A30               	goto	l810
  7086  0223  09A4               	comf	___aldiv@divisor,f
  7087  0224  09A5               	comf	___aldiv@divisor+1,f
  7088  0225  09A6               	comf	___aldiv@divisor+2,f
  7089  0226  09A7               	comf	___aldiv@divisor+3,f
  7090  0227  0AA4               	incf	___aldiv@divisor,f
  7091  0228  1903               	skipnz
  7092  0229  0AA5               	incf	___aldiv@divisor+1,f
  7093  022A  1903               	skipnz
  7094  022B  0AA6               	incf	___aldiv@divisor+2,f
  7095  022C  1903               	skipnz
  7096  022D  0AA7               	incf	___aldiv@divisor+3,f
  7097  022E  01AE               	clrf	___aldiv@sign
  7098  022F  0AAE               	incf	___aldiv@sign,f
  7099  0230                     l810:	
  7100  0230  1FAB               	btfss	___aldiv@dividend+3,7
  7101  0231  2A41               	goto	l2782
  7102  0232  09A8               	comf	___aldiv@dividend,f
  7103  0233  09A9               	comf	___aldiv@dividend+1,f
  7104  0234  09AA               	comf	___aldiv@dividend+2,f
  7105  0235  09AB               	comf	___aldiv@dividend+3,f
  7106  0236  0AA8               	incf	___aldiv@dividend,f
  7107  0237  1903               	skipnz
  7108  0238  0AA9               	incf	___aldiv@dividend+1,f
  7109  0239  1903               	skipnz
  7110  023A  0AAA               	incf	___aldiv@dividend+2,f
  7111  023B  1903               	skipnz
  7112  023C  0AAB               	incf	___aldiv@dividend+3,f
  7113  023D  3001               	movlw	1
  7114  023E  00AC               	movwf	??___aldiv
  7115  023F  082C               	movf	??___aldiv,w
  7116  0240  06AE               	xorwf	___aldiv@sign,f
  7117  0241                     l2782:	
  7118  0241  3000               	movlw	0
  7119  0242  00B2               	movwf	___aldiv@quotient+3
  7120  0243  3000               	movlw	0
  7121  0244  00B1               	movwf	___aldiv@quotient+2
  7122  0245  3000               	movlw	0
  7123  0246  00B0               	movwf	___aldiv@quotient+1
  7124  0247  3000               	movlw	0
  7125  0248  00AF               	movwf	___aldiv@quotient
  7126  0249  0827               	movf	___aldiv@divisor+3,w
  7127  024A  0426               	iorwf	___aldiv@divisor+2,w
  7128  024B  0425               	iorwf	___aldiv@divisor+1,w
  7129  024C  0424               	iorwf	___aldiv@divisor,w
  7130  024D  1903               	skipnz
  7131  024E  2A8A               	goto	l2804
  7132  024F  01AD               	clrf	___aldiv@counter
  7133  0250  0AAD               	incf	___aldiv@counter,f
  7134  0251                     l2790:	
  7135  0251  1BA7               	btfsc	___aldiv@divisor+3,7
  7136  0252  2A5F               	goto	l2792
  7137  0253  3001               	movlw	1
  7138  0254                     u1695:	
  7139  0254  35A4               	lslf	___aldiv@divisor,f
  7140  0255  0DA5               	rlf	___aldiv@divisor+1,f
  7141  0256  0DA6               	rlf	___aldiv@divisor+2,f
  7142  0257  0DA7               	rlf	___aldiv@divisor+3,f
  7143  0258  0B89               	decfsz	9,f
  7144  0259  2A54               	goto	u1695
  7145  025A  3001               	movlw	1
  7146  025B  00AC               	movwf	??___aldiv
  7147  025C  082C               	movf	??___aldiv,w
  7148  025D  07AD               	addwf	___aldiv@counter,f
  7149  025E  2A51               	goto	l2790
  7150  025F                     l2792:	
  7151  025F  3001               	movlw	1
  7152  0260                     u1715:	
  7153  0260  35AF               	lslf	___aldiv@quotient,f
  7154  0261  0DB0               	rlf	___aldiv@quotient+1,f
  7155  0262  0DB1               	rlf	___aldiv@quotient+2,f
  7156  0263  0DB2               	rlf	___aldiv@quotient+3,f
  7157  0264  0B89               	decfsz	9,f
  7158  0265  2A60               	goto	u1715
  7159  0266  0827               	movf	___aldiv@divisor+3,w
  7160  0267  022B               	subwf	___aldiv@dividend+3,w
  7161  0268  1D03               	skipz
  7162  0269  2A74               	goto	u1725
  7163  026A  0826               	movf	___aldiv@divisor+2,w
  7164  026B  022A               	subwf	___aldiv@dividend+2,w
  7165  026C  1D03               	skipz
  7166  026D  2A74               	goto	u1725
  7167  026E  0825               	movf	___aldiv@divisor+1,w
  7168  026F  0229               	subwf	___aldiv@dividend+1,w
  7169  0270  1D03               	skipz
  7170  0271  2A74               	goto	u1725
  7171  0272  0824               	movf	___aldiv@divisor,w
  7172  0273  0228               	subwf	___aldiv@dividend,w
  7173  0274                     u1725:	
  7174  0274  1C03               	skipc
  7175  0275  2A7F               	goto	l2800
  7176  0276  0824               	movf	___aldiv@divisor,w
  7177  0277  02A8               	subwf	___aldiv@dividend,f
  7178  0278  0825               	movf	___aldiv@divisor+1,w
  7179  0279  3BA9               	subwfb	___aldiv@dividend+1,f
  7180  027A  0826               	movf	___aldiv@divisor+2,w
  7181  027B  3BAA               	subwfb	___aldiv@dividend+2,f
  7182  027C  0827               	movf	___aldiv@divisor+3,w
  7183  027D  3BAB               	subwfb	___aldiv@dividend+3,f
  7184  027E  142F               	bsf	___aldiv@quotient,0
  7185  027F                     l2800:	
  7186  027F  3001               	movlw	1
  7187  0280                     u1735:	
  7188  0280  36A7               	lsrf	___aldiv@divisor+3,f
  7189  0281  0CA6               	rrf	___aldiv@divisor+2,f
  7190  0282  0CA5               	rrf	___aldiv@divisor+1,f
  7191  0283  0CA4               	rrf	___aldiv@divisor,f
  7192  0284  0B89               	decfsz	9,f
  7193  0285  2A80               	goto	u1735
  7194  0286  3001               	movlw	1
  7195  0287  02AD               	subwf	___aldiv@counter,f
  7196  0288  1D03               	btfss	3,2
  7197  0289  2A5F               	goto	l2792
  7198  028A                     l2804:	
  7199  028A  082E               	movf	___aldiv@sign,w
  7200  028B  1903               	btfsc	3,2
  7201  028C  2A98               	goto	l2808
  7202  028D  09AF               	comf	___aldiv@quotient,f
  7203  028E  09B0               	comf	___aldiv@quotient+1,f
  7204  028F  09B1               	comf	___aldiv@quotient+2,f
  7205  0290  09B2               	comf	___aldiv@quotient+3,f
  7206  0291  0AAF               	incf	___aldiv@quotient,f
  7207  0292  1903               	skipnz
  7208  0293  0AB0               	incf	___aldiv@quotient+1,f
  7209  0294  1903               	skipnz
  7210  0295  0AB1               	incf	___aldiv@quotient+2,f
  7211  0296  1903               	skipnz
  7212  0297  0AB2               	incf	___aldiv@quotient+3,f
  7213  0298                     l2808:	
  7214  0298  0832               	movf	___aldiv@quotient+3,w
  7215  0299  00A7               	movwf	?___aldiv+3
  7216  029A  0831               	movf	___aldiv@quotient+2,w
  7217  029B  00A6               	movwf	?___aldiv+2
  7218  029C  0830               	movf	___aldiv@quotient+1,w
  7219  029D  00A5               	movwf	?___aldiv+1
  7220  029E  082F               	movf	___aldiv@quotient,w
  7221  029F  00A4               	movwf	?___aldiv
  7222  02A0  0008               	return
  7223  02A1                     __end_of___aldiv:	
  7224                           
  7225                           	psect	text23
  7226  066E                     __ptext23:	
  7227 ;; *************** function _lowBattery *****************
  7228 ;; Defined at:
  7229 ;;		line 234 in file "main.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;		None
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;		None
  7234 ;; Return value:  Size  Location     Type
  7235 ;;                  1    wreg      void 
  7236 ;; Registers used:
  7237 ;;		wreg, status,2, status,0, pclath, cstack
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/1
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7243 ;;      Params:         0       0       0       0       0       0       0       0
  7244 ;;      Locals:         0       0       0       0       0       0       0       0
  7245 ;;      Temps:          2       0       0       0       0       0       0       0
  7246 ;;      Totals:         2       0       0       0       0       0       0       0
  7247 ;;Total ram usage:        2 bytes
  7248 ;; Hardware stack levels used:    1
  7249 ;; Hardware stack levels required when called:    5
  7250 ;; This function calls:
  7251 ;;		_setLEDColor
  7252 ;; This function is called by:
  7253 ;;		_main
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           
  7258                           ;psect for function _lowBattery
  7259  066E                     _lowBattery:	
  7260                           
  7261                           ;main.c: 235: interfaceState = STATE_LOWBATTERY;
  7262                           
  7263                           ;incstack = 0
  7264                           ; Regs used in _lowBattery: [wreg+status,2+status,0+pclath+cstack]
  7265  066E  3003               	movlw	3
  7266  066F  00F6               	movwf	??_lowBattery
  7267  0670  0876               	movf	??_lowBattery,w
  7268  0671  0020               	movlb	0	; select bank0
  7269  0672  00EF               	movwf	_interfaceState
  7270                           
  7271                           ;main.c: 236: setLEDColor(255, 0, 0);
  7272  0673  01F2               	clrf	setLEDColor@green
  7273  0674  01F3               	clrf	setLEDColor@blue
  7274  0675  30FF               	movlw	255
  7275  0676  3187  27E5  3186   	fcall	_setLEDColor
  7276                           
  7277                           ;main.c: 237: _delay((unsigned long)((250)*(4000000/4000.0)));
  7278  0679  3002               	movlw	2
  7279  067A  00F7               	movwf	??_lowBattery+1
  7280  067B  3045               	movlw	69
  7281  067C  00F6               	movwf	??_lowBattery
  7282  067D  30AA               	movlw	170
  7283  067E                     u2227:	
  7284  067E  0B89               	decfsz	9,f
  7285  067F  2E7E               	goto	u2227
  7286  0680  0BF6               	decfsz	??_lowBattery,f
  7287  0681  2E7E               	goto	u2227
  7288  0682  0BF7               	decfsz	??_lowBattery+1,f
  7289  0683  2E7E               	goto	u2227
  7290                           
  7291                           ;main.c: 238: setLEDColor(0, 0, 0);
  7292  0684  01F2               	clrf	setLEDColor@green
  7293  0685  01F3               	clrf	setLEDColor@blue
  7294  0686  3000               	movlw	0
  7295  0687  3187  27E5  3186   	fcall	_setLEDColor
  7296                           
  7297                           ;main.c: 239: _delay((unsigned long)((500)*(4000000/4000.0)));
  7298  068A  3003               	movlw	3
  7299  068B  00F7               	movwf	??_lowBattery+1
  7300  068C  308A               	movlw	138
  7301  068D  00F6               	movwf	??_lowBattery
  7302  068E  3056               	movlw	86
  7303  068F                     u2237:	
  7304  068F  0B89               	decfsz	9,f
  7305  0690  2E8F               	goto	u2237
  7306  0691  0BF6               	decfsz	??_lowBattery,f
  7307  0692  2E8F               	goto	u2237
  7308  0693  0BF7               	decfsz	??_lowBattery+1,f
  7309  0694  2E8F               	goto	u2237
  7310  0695  0008               	return
  7311  0696                     __end_of_lowBattery:	
  7312                           
  7313                           	psect	text24
  7314  07E5                     __ptext24:	
  7315 ;; *************** function _setLEDColor *****************
  7316 ;; Defined at:
  7317 ;;		line 213 in file "main.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  red             1    wreg     unsigned char 
  7320 ;;  green           1    2[COMMON] unsigned char 
  7321 ;;  blue            1    3[COMMON] unsigned char 
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;  red             1    5[COMMON] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      void 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, status,0
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 1F/C
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7333 ;;      Params:         2       0       0       0       0       0       0       0
  7334 ;;      Locals:         1       0       0       0       0       0       0       0
  7335 ;;      Temps:          1       0       0       0       0       0       0       0
  7336 ;;      Totals:         4       0       0       0       0       0       0       0
  7337 ;;Total ram usage:        4 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    4
  7340 ;; This function calls:
  7341 ;;		Nothing
  7342 ;; This function is called by:
  7343 ;;		_lowBattery
  7344 ;;		_startUp
  7345 ;;		_selectSomething
  7346 ;;		_selectFrequency
  7347 ;;		_selectCurrent
  7348 ;;		_selectIncrease
  7349 ;;		_selectDecrease
  7350 ;;		_selectResetValue
  7351 ;;		_process_remote_command
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           
  7356                           ;psect for function _setLEDColor
  7357  07E5                     _setLEDColor:	
  7358                           
  7359                           ;incstack = 0
  7360                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  7361                           ;setLEDColor@red stored from wreg
  7362  07E5  00F5               	movwf	setLEDColor@red
  7363                           
  7364                           ;main.c: 220: if (0 == blue){
  7365  07E6  0873               	movf	setLEDColor@blue,w
  7366  07E7  1D03               	btfss	3,2
  7367  07E8  2FEC               	goto	l2744
  7368                           
  7369                           ;main.c: 221: TRISC |= 0b00100000;
  7370  07E9  0021               	movlb	1	; select bank1
  7371  07EA  168E               	bsf	14,5	;volatile
  7372                           
  7373                           ;main.c: 222: } else {
  7374  07EB  2FF1               	goto	l2746
  7375  07EC                     l2744:	
  7376                           
  7377                           ;main.c: 223: TRISC &= 0b11011111;
  7378  07EC  30DF               	movlw	223
  7379  07ED  00F4               	movwf	??_setLEDColor
  7380  07EE  0874               	movf	??_setLEDColor,w
  7381  07EF  0021               	movlb	1	; select bank1
  7382  07F0  058E               	andwf	14,f	;volatile
  7383  07F1                     l2746:	
  7384                           
  7385                           ;main.c: 224: };main.c: 225: CCPR1L = 255U - blue;
  7386  07F1  0973               	comf	setLEDColor@blue,w
  7387  07F2  0025               	movlb	5	; select bank5
  7388  07F3  0091               	movwf	17	;volatile
  7389                           
  7390                           ;main.c: 227: PWM3DCH = red;
  7391  07F4  0875               	movf	setLEDColor@red,w
  7392  07F5  002C               	movlb	12	; select bank12
  7393  07F6  0098               	movwf	24	;volatile
  7394                           
  7395                           ;main.c: 229: PWM4DCH = green;
  7396  07F7  0872               	movf	setLEDColor@green,w
  7397  07F8  009B               	movwf	27	;volatile
  7398  07F9  0008               	return
  7399  07FA                     __end_of_setLEDColor:	
  7400                           
  7401                           	psect	text25
  7402  0517                     __ptext25:	
  7403 ;; *************** function _initLED *****************
  7404 ;; Defined at:
  7405 ;;		line 172 in file "main.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;		None
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;		None
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  1    wreg      void 
  7412 ;; Registers used:
  7413 ;;		wreg, status,2, status,0
  7414 ;; Tracked objects:
  7415 ;;		On entry : 1F/A
  7416 ;;		On exit  : 1F/1
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7419 ;;      Params:         0       0       0       0       0       0       0       0
  7420 ;;      Locals:         0       0       0       0       0       0       0       0
  7421 ;;      Temps:          1       0       0       0       0       0       0       0
  7422 ;;      Totals:         1       0       0       0       0       0       0       0
  7423 ;;Total ram usage:        1 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:    4
  7426 ;; This function calls:
  7427 ;;		Nothing
  7428 ;; This function is called by:
  7429 ;;		_main
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           
  7434                           ;psect for function _initLED
  7435  0517                     _initLED:	
  7436                           
  7437                           ;main.c: 175: PR2 = 255;
  7438                           
  7439                           ;incstack = 0
  7440                           ; Regs used in _initLED: [wreg+status,2+status,0]
  7441  0517  30FF               	movlw	255
  7442  0518  0020               	movlb	0	; select bank0
  7443  0519  009B               	movwf	27	;volatile
  7444                           
  7445                           ;main.c: 176: T2CONbits.T2CKPS = 0b10;
  7446  051A  081C               	movf	28,w	;volatile
  7447  051B  39FC               	andlw	-4
  7448  051C  3802               	iorlw	2
  7449  051D  009C               	movwf	28	;volatile
  7450                           
  7451                           ;main.c: 177: T2CONbits.TMR2ON = 1;
  7452  051E  151C               	bsf	28,2	;volatile
  7453                           
  7454                           ;main.c: 181: TRISC |= 0b00010000;
  7455  051F  0021               	movlb	1	; select bank1
  7456  0520  160E               	bsf	14,4	;volatile
  7457                           
  7458                           ;main.c: 182: RC4PPS = 0b01110;
  7459  0521  300E               	movlw	14
  7460  0522  003D               	movlb	29	; select bank29
  7461  0523  00A4               	movwf	36	;volatile
  7462                           
  7463                           ;main.c: 183: CCPTMRSbits.P3TSEL = 0b00;
  7464  0524  30CF               	movlw	-49
  7465  0525  0025               	movlb	5	; select bank5
  7466  0526  059E               	andwf	30,f	;volatile
  7467                           
  7468                           ;main.c: 184: PWM3DCH = 0;
  7469  0527  002C               	movlb	12	; select bank12
  7470  0528  0198               	clrf	24	;volatile
  7471                           
  7472                           ;main.c: 185: PWM3DCLbits.PWM3DCL = 0;
  7473  0529  303F               	movlw	-193
  7474  052A  0597               	andwf	23,f	;volatile
  7475                           
  7476                           ;main.c: 186: PWM3CONbits.PWM3POL = 1;
  7477  052B  1619               	bsf	25,4	;volatile
  7478                           
  7479                           ;main.c: 187: TRISC &= 0b11101111;
  7480  052C  30EF               	movlw	239
  7481  052D  00F2               	movwf	??_initLED
  7482  052E  0872               	movf	??_initLED,w
  7483  052F  0021               	movlb	1	; select bank1
  7484  0530  058E               	andwf	14,f	;volatile
  7485                           
  7486                           ;main.c: 188: PWM3CONbits.PWM3EN = 1;
  7487  0531  002C               	movlb	12	; select bank12
  7488  0532  1799               	bsf	25,7	;volatile
  7489                           
  7490                           ;main.c: 192: TRISA |= 0b00100000;
  7491  0533  0021               	movlb	1	; select bank1
  7492  0534  168C               	bsf	12,5	;volatile
  7493                           
  7494                           ;main.c: 193: RA5PPS = 0b01111;
  7495  0535  300F               	movlw	15
  7496  0536  003D               	movlb	29	; select bank29
  7497  0537  0095               	movwf	21	;volatile
  7498                           
  7499                           ;main.c: 194: CCPTMRSbits.P4TSEL = 0b00;
  7500  0538  303F               	movlw	-193
  7501  0539  0025               	movlb	5	; select bank5
  7502  053A  059E               	andwf	30,f	;volatile
  7503                           
  7504                           ;main.c: 195: PWM4DCH = 0;
  7505  053B  002C               	movlb	12	; select bank12
  7506  053C  019B               	clrf	27	;volatile
  7507                           
  7508                           ;main.c: 196: PWM4DCLbits.PWM4DCL = 0;
  7509  053D  303F               	movlw	-193
  7510  053E  059A               	andwf	26,f	;volatile
  7511                           
  7512                           ;main.c: 197: PWM4CONbits.PWM4POL = 1;
  7513  053F  161C               	bsf	28,4	;volatile
  7514                           
  7515                           ;main.c: 198: TRISA &= 0b11011111;
  7516  0540  30DF               	movlw	223
  7517  0541  00F2               	movwf	??_initLED
  7518  0542  0872               	movf	??_initLED,w
  7519  0543  0021               	movlb	1	; select bank1
  7520  0544  058C               	andwf	12,f	;volatile
  7521                           
  7522                           ;main.c: 199: PWM4CONbits.PWM4EN = 1;
  7523  0545  002C               	movlb	12	; select bank12
  7524  0546  179C               	bsf	28,7	;volatile
  7525                           
  7526                           ;main.c: 205: TRISC |= 0b00100000;
  7527  0547  0021               	movlb	1	; select bank1
  7528  0548  168E               	bsf	14,5	;volatile
  7529                           
  7530                           ;main.c: 206: RC5PPS = 0b01100;
  7531  0549  300C               	movlw	12
  7532  054A  003D               	movlb	29	; select bank29
  7533  054B  00A5               	movwf	37	;volatile
  7534                           
  7535                           ;main.c: 207: CCP1CONbits.CCP1M = 0b1100;
  7536  054C  0025               	movlb	5	; select bank5
  7537  054D  0813               	movf	19,w	;volatile
  7538  054E  39F0               	andlw	-16
  7539  054F  380C               	iorlw	12
  7540  0550  0093               	movwf	19	;volatile
  7541                           
  7542                           ;main.c: 208: CCPR1L = 255;
  7543  0551  30FF               	movlw	255
  7544  0552  0091               	movwf	17	;volatile
  7545                           
  7546                           ;main.c: 209: CCP1CONbits.DC1B = 0x3;
  7547  0553  3030               	movlw	48
  7548  0554  0493               	iorwf	19,f	;volatile
  7549                           
  7550                           ;main.c: 210: TRISC &= 0b11011111;
  7551  0555  30DF               	movlw	223
  7552  0556  00F2               	movwf	??_initLED
  7553  0557  0872               	movf	??_initLED,w
  7554  0558  0021               	movlb	1	; select bank1
  7555  0559  058E               	andwf	14,f	;volatile
  7556  055A  0008               	return
  7557  055B                     __end_of_initLED:	
  7558                           
  7559                           	psect	text26
  7560  0703                     __ptext26:	
  7561 ;; *************** function _SYSTEM_Initialize *****************
  7562 ;; Defined at:
  7563 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;		None
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;		None
  7568 ;; Return value:  Size  Location     Type
  7569 ;;                  1    wreg      void 
  7570 ;; Registers used:
  7571 ;;		wreg, status,2, status,0, pclath, cstack
  7572 ;; Tracked objects:
  7573 ;;		On entry : B1F/0
  7574 ;;		On exit  : 1F/1
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7577 ;;      Params:         0       0       0       0       0       0       0       0
  7578 ;;      Locals:         0       0       0       0       0       0       0       0
  7579 ;;      Temps:          0       0       0       0       0       0       0       0
  7580 ;;      Totals:         0       0       0       0       0       0       0       0
  7581 ;;Total ram usage:        0 bytes
  7582 ;; Hardware stack levels used:    1
  7583 ;; Hardware stack levels required when called:    6
  7584 ;; This function calls:
  7585 ;;		_DAC_Initialize
  7586 ;;		_EUSART_Initialize
  7587 ;;		_EXT_INT_Initialize
  7588 ;;		_OPA1_Initialize
  7589 ;;		_OPA2_Initialize
  7590 ;;		_OSCILLATOR_Initialize
  7591 ;;		_PIN_MANAGER_Initialize
  7592 ;;		_TMR0_Initialize
  7593 ;;		_TMR2_Initialize
  7594 ;;		_TMR4_Initialize
  7595 ;;		_WDT_Initialize
  7596 ;; This function is called by:
  7597 ;;		_main
  7598 ;; This function uses a non-reentrant model
  7599 ;;
  7600                           
  7601                           
  7602                           ;psect for function _SYSTEM_Initialize
  7603  0703                     _SYSTEM_Initialize:	
  7604                           
  7605                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  7606                           
  7607                           ;incstack = 0
  7608                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7609  0703  3185  258F  3187   	fcall	_PIN_MANAGER_Initialize
  7610                           
  7611                           ;mcc.c: 54: OSCILLATOR_Initialize();
  7612  0706  318F  2766  3187   	fcall	_OSCILLATOR_Initialize
  7613                           
  7614                           ;mcc.c: 55: WDT_Initialize();
  7615  0709  318F  271B  3187   	fcall	_WDT_Initialize
  7616                           
  7617                           ;mcc.c: 56: DAC_Initialize();
  7618  070C  318F  2747  3187   	fcall	_DAC_Initialize
  7619                           
  7620                           ;mcc.c: 57: OPA1_Initialize();
  7621  070F  318F  2713  3187   	fcall	_OPA1_Initialize
  7622                           
  7623                           ;mcc.c: 58: TMR4_Initialize();
  7624  0712  318F  27B9  3187   	fcall	_TMR4_Initialize
  7625                           
  7626                           ;mcc.c: 59: OPA2_Initialize();
  7627  0715  318F  2717  3187   	fcall	_OPA2_Initialize
  7628                           
  7629                           ;mcc.c: 60: TMR2_Initialize();
  7630  0718  318F  276E  3187   	fcall	_TMR2_Initialize
  7631                           
  7632                           ;mcc.c: 61: EXT_INT_Initialize();
  7633  071B  318F  2781  3187   	fcall	_EXT_INT_Initialize
  7634                           
  7635                           ;mcc.c: 62: TMR0_Initialize();
  7636  071E  318F  27A8  3187   	fcall	_TMR0_Initialize
  7637                           
  7638                           ;mcc.c: 63: EUSART_Initialize();
  7639  0721  3187  2724         	fcall	_EUSART_Initialize
  7640  0723  0008               	return
  7641  0724                     __end_of_SYSTEM_Initialize:	
  7642                           
  7643                           	psect	text27
  7644  0F1B                     __ptext27:	
  7645 ;; *************** function _WDT_Initialize *****************
  7646 ;; Defined at:
  7647 ;;		line 78 in file "mcc_generated_files/mcc.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;		None
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;		None
  7652 ;; Return value:  Size  Location     Type
  7653 ;;                  1    wreg      void 
  7654 ;; Registers used:
  7655 ;;		wreg
  7656 ;; Tracked objects:
  7657 ;;		On entry : B1F/2
  7658 ;;		On exit  : B1F/1
  7659 ;;		Unchanged: B00/0
  7660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7661 ;;      Params:         0       0       0       0       0       0       0       0
  7662 ;;      Locals:         0       0       0       0       0       0       0       0
  7663 ;;      Temps:          0       0       0       0       0       0       0       0
  7664 ;;      Totals:         0       0       0       0       0       0       0       0
  7665 ;;Total ram usage:        0 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    4
  7668 ;; This function calls:
  7669 ;;		Nothing
  7670 ;; This function is called by:
  7671 ;;		_SYSTEM_Initialize
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           
  7676                           ;psect for function _WDT_Initialize
  7677  0F1B                     _WDT_Initialize:	
  7678                           
  7679                           ;mcc.c: 81: WDTCON = 0x16;
  7680                           
  7681                           ;incstack = 0
  7682                           ; Regs used in _WDT_Initialize: [wreg]
  7683  0F1B  3016               	movlw	22
  7684  0F1C  0021               	movlb	1	; select bank1
  7685  0F1D  0097               	movwf	23	;volatile
  7686  0F1E  0008               	return
  7687  0F1F                     __end_of_WDT_Initialize:	
  7688                           
  7689                           	psect	text28
  7690  0FB9                     __ptext28:	
  7691 ;; *************** function _TMR4_Initialize *****************
  7692 ;; Defined at:
  7693 ;;		line 65 in file "mcc_generated_files/tmr4.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;		None
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;		None
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  1    wreg      void 
  7700 ;; Registers used:
  7701 ;;		wreg, status,2, status,0, pclath, cstack
  7702 ;; Tracked objects:
  7703 ;;		On entry : 1F/A
  7704 ;;		On exit  : 1F/8
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7707 ;;      Params:         0       0       0       0       0       0       0       0
  7708 ;;      Locals:         0       0       0       0       0       0       0       0
  7709 ;;      Temps:          0       0       0       0       0       0       0       0
  7710 ;;      Totals:         0       0       0       0       0       0       0       0
  7711 ;;Total ram usage:        0 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; Hardware stack levels required when called:    5
  7714 ;; This function calls:
  7715 ;;		_TMR4_SetInterruptHandler
  7716 ;; This function is called by:
  7717 ;;		_SYSTEM_Initialize
  7718 ;; This function uses a non-reentrant model
  7719 ;;
  7720                           
  7721                           
  7722                           ;psect for function _TMR4_Initialize
  7723  0FB9                     _TMR4_Initialize:	
  7724                           
  7725                           ;tmr4.c: 70: PR4 = 0x04;
  7726                           
  7727                           ;incstack = 0
  7728                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7729  0FB9  3004               	movlw	4
  7730  0FBA  0028               	movlb	8	; select bank8
  7731  0FBB  0096               	movwf	22	;volatile
  7732                           
  7733                           ;tmr4.c: 73: TMR4 = 0x00;
  7734  0FBC  0195               	clrf	21	;volatile
  7735                           
  7736                           ;tmr4.c: 76: PIR2bits.TMR4IF = 0;
  7737  0FBD  0020               	movlb	0	; select bank0
  7738  0FBE  1092               	bcf	18,1	;volatile
  7739                           
  7740                           ;tmr4.c: 79: PIE2bits.TMR4IE = 1;
  7741  0FBF  0021               	movlb	1	; select bank1
  7742  0FC0  1492               	bsf	18,1	;volatile
  7743                           
  7744                           ;tmr4.c: 82: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
  7745  0FC1  30CB               	movlw	low _TMR4_DefaultInterruptHandler
  7746  0FC2  00F2               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  7747  0FC3  300F               	movlw	high _TMR4_DefaultInterruptHandler
  7748  0FC4  00F3               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  7749  0FC5  318F  2738         	fcall	_TMR4_SetInterruptHandler
  7750                           
  7751                           ;tmr4.c: 85: T4CON = 0x16;
  7752  0FC7  3016               	movlw	22
  7753  0FC8  0028               	movlb	8	; select bank8
  7754  0FC9  0097               	movwf	23	;volatile
  7755  0FCA  0008               	return
  7756  0FCB                     __end_of_TMR4_Initialize:	
  7757                           
  7758                           	psect	text29
  7759  0F38                     __ptext29:	
  7760 ;; *************** function _TMR4_SetInterruptHandler *****************
  7761 ;; Defined at:
  7762 ;;		line 133 in file "mcc_generated_files/tmr4.c"
  7763 ;; Parameters:    Size  Location     Type
  7764 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  7765 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;		None
  7768 ;; Return value:  Size  Location     Type
  7769 ;;                  1    wreg      void 
  7770 ;; Registers used:
  7771 ;;		wreg
  7772 ;; Tracked objects:
  7773 ;;		On entry : 1F/1
  7774 ;;		On exit  : 1F/1
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7777 ;;      Params:         2       0       0       0       0       0       0       0
  7778 ;;      Locals:         0       0       0       0       0       0       0       0
  7779 ;;      Temps:          0       0       0       0       0       0       0       0
  7780 ;;      Totals:         2       0       0       0       0       0       0       0
  7781 ;;Total ram usage:        2 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; Hardware stack levels required when called:    4
  7784 ;; This function calls:
  7785 ;;		Nothing
  7786 ;; This function is called by:
  7787 ;;		_TMR4_Initialize
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           
  7792                           ;psect for function _TMR4_SetInterruptHandler
  7793  0F38                     _TMR4_SetInterruptHandler:	
  7794                           
  7795                           ;tmr4.c: 134: TMR4_InterruptHandler = InterruptHandler;
  7796                           
  7797                           ;incstack = 0
  7798                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  7799  0F38  0873               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  7800  0F39  00D9               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
  7801  0F3A  0872               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  7802  0F3B  00D8               	movwf	_TMR4_InterruptHandler^(0+128)
  7803  0F3C  0008               	return
  7804  0F3D                     __end_of_TMR4_SetInterruptHandler:	
  7805                           
  7806                           	psect	text30
  7807  0F6E                     __ptext30:	
  7808 ;; *************** function _TMR2_Initialize *****************
  7809 ;; Defined at:
  7810 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;		None
  7813 ;; Auto vars:     Size  Location     Type
  7814 ;;		None
  7815 ;; Return value:  Size  Location     Type
  7816 ;;                  1    wreg      void 
  7817 ;; Registers used:
  7818 ;;		wreg, status,2
  7819 ;; Tracked objects:
  7820 ;;		On entry : 1F/A
  7821 ;;		On exit  : 1F/0
  7822 ;;		Unchanged: 0/0
  7823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7824 ;;      Params:         0       0       0       0       0       0       0       0
  7825 ;;      Locals:         0       0       0       0       0       0       0       0
  7826 ;;      Temps:          0       0       0       0       0       0       0       0
  7827 ;;      Totals:         0       0       0       0       0       0       0       0
  7828 ;;Total ram usage:        0 bytes
  7829 ;; Hardware stack levels used:    1
  7830 ;; Hardware stack levels required when called:    4
  7831 ;; This function calls:
  7832 ;;		Nothing
  7833 ;; This function is called by:
  7834 ;;		_SYSTEM_Initialize
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           
  7839                           ;psect for function _TMR2_Initialize
  7840  0F6E                     _TMR2_Initialize:	
  7841                           
  7842                           ;tmr2.c: 67: PR2 = 255;
  7843                           
  7844                           ;incstack = 0
  7845                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  7846  0F6E  30FF               	movlw	255
  7847  0F6F  0020               	movlb	0	; select bank0
  7848  0F70  009B               	movwf	27	;volatile
  7849                           
  7850                           ;tmr2.c: 70: TMR2 = 0x00;
  7851  0F71  019A               	clrf	26	;volatile
  7852                           
  7853                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
  7854  0F72  1091               	bcf	17,1	;volatile
  7855                           
  7856                           ;tmr2.c: 76: T2CON = 0x06;
  7857  0F73  3006               	movlw	6
  7858  0F74  009C               	movwf	28	;volatile
  7859  0F75  0008               	return
  7860  0F76                     __end_of_TMR2_Initialize:	
  7861                           
  7862                           	psect	text31
  7863  0FA8                     __ptext31:	
  7864 ;; *************** function _TMR0_Initialize *****************
  7865 ;; Defined at:
  7866 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;		None
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;		None
  7871 ;; Return value:  Size  Location     Type
  7872 ;;                  1    wreg      void 
  7873 ;; Registers used:
  7874 ;;		wreg, status,2, status,0, pclath, cstack
  7875 ;; Tracked objects:
  7876 ;;		On entry : 1F/1
  7877 ;;		On exit  : 1F/1
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7880 ;;      Params:         0       0       0       0       0       0       0       0
  7881 ;;      Locals:         0       0       0       0       0       0       0       0
  7882 ;;      Temps:          0       0       0       0       0       0       0       0
  7883 ;;      Totals:         0       0       0       0       0       0       0       0
  7884 ;;Total ram usage:        0 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; Hardware stack levels required when called:    5
  7887 ;; This function calls:
  7888 ;;		_TMR0_SetInterruptHandler
  7889 ;; This function is called by:
  7890 ;;		_SYSTEM_Initialize
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           
  7895                           ;psect for function _TMR0_Initialize
  7896  0FA8                     _TMR0_Initialize:	
  7897                           
  7898                           ;tmr0.c: 69: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 & 0x3F));
  7899                           
  7900                           ;incstack = 0
  7901                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7902  0FA8  0815               	movf	21,w	;volatile
  7903  0FA9  39C0               	andlw	192
  7904  0FAA  3815               	iorlw	21
  7905  0FAB  0095               	movwf	21	;volatile
  7906                           
  7907                           ;tmr0.c: 72: TMR0 = 0x00;
  7908  0FAC  0020               	movlb	0	; select bank0
  7909  0FAD  0195               	clrf	21	;volatile
  7910                           
  7911                           ;tmr0.c: 75: timer0ReloadVal= 0;
  7912  0FAE  0021               	movlb	1	; select bank1
  7913  0FAF  01D0               	clrf	_timer0ReloadVal^(0+128)	;volatile
  7914                           
  7915                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  7916  0FB0  110B               	bcf	11,2	;volatile
  7917                           
  7918                           ;tmr0.c: 81: INTCONbits.TMR0IE = 0;
  7919  0FB1  128B               	bcf	11,5	;volatile
  7920                           
  7921                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7922  0FB2  3003               	movlw	low _TMR0_DefaultInterruptHandler
  7923  0FB3  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  7924  0FB4  3000               	movlw	high _TMR0_DefaultInterruptHandler
  7925  0FB5  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  7926  0FB6  318F  2733         	fcall	_TMR0_SetInterruptHandler
  7927  0FB8  0008               	return
  7928  0FB9                     __end_of_TMR0_Initialize:	
  7929                           
  7930                           	psect	text32
  7931  0F33                     __ptext32:	
  7932 ;; *************** function _TMR0_SetInterruptHandler *****************
  7933 ;; Defined at:
  7934 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  7937 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7938 ;; Auto vars:     Size  Location     Type
  7939 ;;		None
  7940 ;; Return value:  Size  Location     Type
  7941 ;;                  1    wreg      void 
  7942 ;; Registers used:
  7943 ;;		wreg
  7944 ;; Tracked objects:
  7945 ;;		On entry : 1F/1
  7946 ;;		On exit  : 1F/1
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7949 ;;      Params:         2       0       0       0       0       0       0       0
  7950 ;;      Locals:         0       0       0       0       0       0       0       0
  7951 ;;      Temps:          0       0       0       0       0       0       0       0
  7952 ;;      Totals:         2       0       0       0       0       0       0       0
  7953 ;;Total ram usage:        2 bytes
  7954 ;; Hardware stack levels used:    1
  7955 ;; Hardware stack levels required when called:    4
  7956 ;; This function calls:
  7957 ;;		Nothing
  7958 ;; This function is called by:
  7959 ;;		_TMR0_Initialize
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           
  7964                           ;psect for function _TMR0_SetInterruptHandler
  7965  0F33                     _TMR0_SetInterruptHandler:	
  7966                           
  7967                           ;tmr0.c: 126: TMR0_InterruptHandler = InterruptHandler;
  7968                           
  7969                           ;incstack = 0
  7970                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  7971  0F33  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  7972  0F34  00DB               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  7973  0F35  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  7974  0F36  00DA               	movwf	_TMR0_InterruptHandler^(0+128)
  7975  0F37  0008               	return
  7976  0F38                     __end_of_TMR0_SetInterruptHandler:	
  7977                           
  7978                           	psect	text33
  7979  058F                     __ptext33:	
  7980 ;; *************** function _PIN_MANAGER_Initialize *****************
  7981 ;; Defined at:
  7982 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;		None
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;		None
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  1    wreg      void 
  7989 ;; Registers used:
  7990 ;;		wreg, status,2
  7991 ;; Tracked objects:
  7992 ;;		On entry : B1F/0
  7993 ;;		On exit  : B1F/1D
  7994 ;;		Unchanged: B00/0
  7995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7996 ;;      Params:         0       0       0       0       0       0       0       0
  7997 ;;      Locals:         0       0       0       0       0       0       0       0
  7998 ;;      Temps:          0       0       0       0       0       0       0       0
  7999 ;;      Totals:         0       0       0       0       0       0       0       0
  8000 ;;Total ram usage:        0 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; Hardware stack levels required when called:    4
  8003 ;; This function calls:
  8004 ;;		Nothing
  8005 ;; This function is called by:
  8006 ;;		_SYSTEM_Initialize
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           
  8011                           ;psect for function _PIN_MANAGER_Initialize
  8012  058F                     _PIN_MANAGER_Initialize:	
  8013                           
  8014                           ;pin_manager.c: 60: LATA = 0x00;
  8015                           
  8016                           ;incstack = 0
  8017                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8018  058F  0022               	movlb	2	; select bank2
  8019  0590  018C               	clrf	12	;volatile
  8020                           
  8021                           ;pin_manager.c: 61: LATB = 0x00;
  8022  0591  018D               	clrf	13	;volatile
  8023                           
  8024                           ;pin_manager.c: 62: LATC = 0x00;
  8025  0592  018E               	clrf	14	;volatile
  8026                           
  8027                           ;pin_manager.c: 67: TRISA = 0x04;
  8028  0593  3004               	movlw	4
  8029  0594  0021               	movlb	1	; select bank1
  8030  0595  008C               	movwf	12	;volatile
  8031                           
  8032                           ;pin_manager.c: 68: TRISB = 0x30;
  8033  0596  3030               	movlw	48
  8034  0597  008D               	movwf	13	;volatile
  8035                           
  8036                           ;pin_manager.c: 69: TRISC = 0x50;
  8037  0598  3050               	movlw	80
  8038  0599  008E               	movwf	14	;volatile
  8039                           
  8040                           ;pin_manager.c: 74: ANSELC = 0x40;
  8041  059A  3040               	movlw	64
  8042  059B  0023               	movlb	3	; select bank3
  8043  059C  008E               	movwf	14	;volatile
  8044                           
  8045                           ;pin_manager.c: 75: ANSELB = 0x10;
  8046  059D  3010               	movlw	16
  8047  059E  008D               	movwf	13	;volatile
  8048                           
  8049                           ;pin_manager.c: 76: ANSELA = 0x00;
  8050  059F  018C               	clrf	12	;volatile
  8051                           
  8052                           ;pin_manager.c: 81: WPUB = 0x00;
  8053  05A0  0024               	movlb	4	; select bank4
  8054  05A1  018D               	clrf	13	;volatile
  8055                           
  8056                           ;pin_manager.c: 82: WPUA = 0x00;
  8057  05A2  018C               	clrf	12	;volatile
  8058                           
  8059                           ;pin_manager.c: 83: WPUC = 0x00;
  8060  05A3  018E               	clrf	14	;volatile
  8061                           
  8062                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 0;
  8063  05A4  0021               	movlb	1	; select bank1
  8064  05A5  1395               	bcf	21,7	;volatile
  8065                           
  8066                           ;pin_manager.c: 89: ODCONA = 0x00;
  8067  05A6  0025               	movlb	5	; select bank5
  8068  05A7  018C               	clrf	12	;volatile
  8069                           
  8070                           ;pin_manager.c: 90: ODCONB = 0x00;
  8071  05A8  018D               	clrf	13	;volatile
  8072                           
  8073                           ;pin_manager.c: 91: ODCONC = 0x00;
  8074  05A9  018E               	clrf	14	;volatile
  8075                           
  8076                           ;pin_manager.c: 96: SLRCONA = 0x37;
  8077  05AA  3037               	movlw	55
  8078  05AB  0026               	movlb	6	; select bank6
  8079  05AC  008C               	movwf	12	;volatile
  8080                           
  8081                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  8082  05AD  30F0               	movlw	240
  8083  05AE  008D               	movwf	13	;volatile
  8084                           
  8085                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  8086  05AF  30FF               	movlw	255
  8087  05B0  008E               	movwf	14	;volatile
  8088                           
  8089                           ;pin_manager.c: 103: INLVLA = 0x3F;
  8090  05B1  303F               	movlw	63
  8091  05B2  0027               	movlb	7	; select bank7
  8092  05B3  008C               	movwf	12	;volatile
  8093                           
  8094                           ;pin_manager.c: 104: INLVLB = 0xF0;
  8095  05B4  30F0               	movlw	240
  8096  05B5  008D               	movwf	13	;volatile
  8097                           
  8098                           ;pin_manager.c: 105: INLVLC = 0xFF;
  8099  05B6  30FF               	movlw	255
  8100  05B7  008E               	movwf	14	;volatile
  8101                           
  8102                           ;pin_manager.c: 113: INTCONbits.IOCIE = 1;
  8103  05B8  158B               	bsf	11,3	;volatile
  8104                           
  8105                           ;pin_manager.c: 116: INTPPS = 0x02;
  8106  05B9  3002               	movlw	2
  8107  05BA  003C               	movlb	28	; select bank28
  8108  05BB  0090               	movwf	16	;volatile
  8109                           
  8110                           ;pin_manager.c: 117: RXPPS = 0x0D;
  8111  05BC  300D               	movlw	13
  8112  05BD  00A4               	movwf	36	;volatile
  8113                           
  8114                           ;pin_manager.c: 118: RB7PPS = 0x14;
  8115  05BE  3014               	movlw	20
  8116  05BF  003D               	movlb	29	; select bank29
  8117  05C0  009F               	movwf	31	;volatile
  8118  05C1  0008               	return
  8119  05C2                     __end_of_PIN_MANAGER_Initialize:	
  8120                           
  8121                           	psect	text34
  8122  0F66                     __ptext34:	
  8123 ;; *************** function _OSCILLATOR_Initialize *****************
  8124 ;; Defined at:
  8125 ;;		line 66 in file "mcc_generated_files/mcc.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;		None
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;		None
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  1    wreg      void 
  8132 ;; Registers used:
  8133 ;;		wreg, status,2
  8134 ;; Tracked objects:
  8135 ;;		On entry : B1F/1D
  8136 ;;		On exit  : B1F/2
  8137 ;;		Unchanged: B00/0
  8138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8139 ;;      Params:         0       0       0       0       0       0       0       0
  8140 ;;      Locals:         0       0       0       0       0       0       0       0
  8141 ;;      Temps:          0       0       0       0       0       0       0       0
  8142 ;;      Totals:         0       0       0       0       0       0       0       0
  8143 ;;Total ram usage:        0 bytes
  8144 ;; Hardware stack levels used:    1
  8145 ;; Hardware stack levels required when called:    4
  8146 ;; This function calls:
  8147 ;;		Nothing
  8148 ;; This function is called by:
  8149 ;;		_SYSTEM_Initialize
  8150 ;; This function uses a non-reentrant model
  8151 ;;
  8152                           
  8153                           
  8154                           ;psect for function _OSCILLATOR_Initialize
  8155  0F66                     _OSCILLATOR_Initialize:	
  8156                           
  8157                           ;mcc.c: 69: OSCCON = 0x6A;
  8158                           
  8159                           ;incstack = 0
  8160                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8161  0F66  306A               	movlw	106
  8162  0F67  0021               	movlb	1	; select bank1
  8163  0F68  0099               	movwf	25	;volatile
  8164                           
  8165                           ;mcc.c: 71: OSCSTAT = 0x00;
  8166  0F69  019A               	clrf	26	;volatile
  8167                           
  8168                           ;mcc.c: 73: OSCTUNE = 0x00;
  8169  0F6A  0198               	clrf	24	;volatile
  8170                           
  8171                           ;mcc.c: 75: BORCON = 0x00;
  8172  0F6B  0022               	movlb	2	; select bank2
  8173  0F6C  0196               	clrf	22	;volatile
  8174  0F6D  0008               	return
  8175  0F6E                     __end_of_OSCILLATOR_Initialize:	
  8176                           
  8177                           	psect	text35
  8178  0F17                     __ptext35:	
  8179 ;; *************** function _OPA2_Initialize *****************
  8180 ;; Defined at:
  8181 ;;		line 58 in file "mcc_generated_files/opa2.c"
  8182 ;; Parameters:    Size  Location     Type
  8183 ;;		None
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;		None
  8186 ;; Return value:  Size  Location     Type
  8187 ;;                  1    wreg      void 
  8188 ;; Registers used:
  8189 ;;		wreg
  8190 ;; Tracked objects:
  8191 ;;		On entry : 1D/A
  8192 ;;		On exit  : 1F/A
  8193 ;;		Unchanged: 0/0
  8194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8195 ;;      Params:         0       0       0       0       0       0       0       0
  8196 ;;      Locals:         0       0       0       0       0       0       0       0
  8197 ;;      Temps:          0       0       0       0       0       0       0       0
  8198 ;;      Totals:         0       0       0       0       0       0       0       0
  8199 ;;Total ram usage:        0 bytes
  8200 ;; Hardware stack levels used:    1
  8201 ;; Hardware stack levels required when called:    4
  8202 ;; This function calls:
  8203 ;;		Nothing
  8204 ;; This function is called by:
  8205 ;;		_SYSTEM_Initialize
  8206 ;;		_main
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           
  8211                           ;psect for function _OPA2_Initialize
  8212  0F17                     _OPA2_Initialize:	
  8213                           
  8214                           ;opa2.c: 61: OPA2CON = 0xC2;
  8215                           
  8216                           ;incstack = 0
  8217                           ; Regs used in _OPA2_Initialize: [wreg]
  8218  0F17  30C2               	movlw	194
  8219  0F18  002A               	movlb	10	; select bank10
  8220  0F19  0095               	movwf	21	;volatile
  8221  0F1A  0008               	return
  8222  0F1B                     __end_of_OPA2_Initialize:	
  8223                           
  8224                           	psect	text36
  8225  0F13                     __ptext36:	
  8226 ;; *************** function _OPA1_Initialize *****************
  8227 ;; Defined at:
  8228 ;;		line 58 in file "mcc_generated_files/opa1.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;		None
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;		None
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  1    wreg      void 
  8235 ;; Registers used:
  8236 ;;		wreg
  8237 ;; Tracked objects:
  8238 ;;		On entry : 1F/2
  8239 ;;		On exit  : 1F/A
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8242 ;;      Params:         0       0       0       0       0       0       0       0
  8243 ;;      Locals:         0       0       0       0       0       0       0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0       0
  8245 ;;      Totals:         0       0       0       0       0       0       0       0
  8246 ;;Total ram usage:        0 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    4
  8249 ;; This function calls:
  8250 ;;		Nothing
  8251 ;; This function is called by:
  8252 ;;		_SYSTEM_Initialize
  8253 ;;		_main
  8254 ;; This function uses a non-reentrant model
  8255 ;;
  8256                           
  8257                           
  8258                           ;psect for function _OPA1_Initialize
  8259  0F13                     _OPA1_Initialize:	
  8260                           
  8261                           ;opa1.c: 61: OPA1CON = 0xC2;
  8262                           
  8263                           ;incstack = 0
  8264                           ; Regs used in _OPA1_Initialize: [wreg]
  8265  0F13  30C2               	movlw	194
  8266  0F14  002A               	movlb	10	; select bank10
  8267  0F15  0091               	movwf	17	;volatile
  8268  0F16  0008               	return
  8269  0F17                     __end_of_OPA1_Initialize:	
  8270                           
  8271                           	psect	text37
  8272  0F81                     __ptext37:	
  8273 ;; *************** function _EXT_INT_Initialize *****************
  8274 ;; Defined at:
  8275 ;;		line 138 in file "mcc_generated_files/ext_int.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;		None
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;		None
  8280 ;; Return value:  Size  Location     Type
  8281 ;;                  1    wreg      void 
  8282 ;; Registers used:
  8283 ;;		wreg, status,2, status,0, pclath, cstack
  8284 ;; Tracked objects:
  8285 ;;		On entry : 1F/0
  8286 ;;		On exit  : 1F/1
  8287 ;;		Unchanged: 0/0
  8288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8289 ;;      Params:         0       0       0       0       0       0       0       0
  8290 ;;      Locals:         0       0       0       0       0       0       0       0
  8291 ;;      Temps:          0       0       0       0       0       0       0       0
  8292 ;;      Totals:         0       0       0       0       0       0       0       0
  8293 ;;Total ram usage:        0 bytes
  8294 ;; Hardware stack levels used:    1
  8295 ;; Hardware stack levels required when called:    5
  8296 ;; This function calls:
  8297 ;;		_INT_SetInterruptHandler
  8298 ;; This function is called by:
  8299 ;;		_SYSTEM_Initialize
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           
  8304                           ;psect for function _EXT_INT_Initialize
  8305  0F81                     _EXT_INT_Initialize:	
  8306                           
  8307                           ;ext_int.c: 143: (INTCONbits.INTF = 0);
  8308                           
  8309                           ;incstack = 0
  8310                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8311  0F81  108B               	bcf	11,1	;volatile
  8312                           
  8313                           ;ext_int.c: 144: (OPTION_REGbits.INTEDG = 0);
  8314  0F82  0021               	movlb	1	; select bank1
  8315  0F83  1315               	bcf	21,6	;volatile
  8316                           
  8317                           ;ext_int.c: 146: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  8318  0F84  30C7               	movlw	low _INT_DefaultInterruptHandler
  8319  0F85  00F2               	movwf	INT_SetInterruptHandler@InterruptHandler
  8320  0F86  3004               	movlw	high _INT_DefaultInterruptHandler
  8321  0F87  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  8322  0F88  318F  272E         	fcall	_INT_SetInterruptHandler
  8323                           
  8324                           ;ext_int.c: 147: (INTCONbits.INTE = 1);
  8325  0F8A  160B               	bsf	11,4	;volatile
  8326  0F8B  0008               	return
  8327  0F8C                     __end_of_EXT_INT_Initialize:	
  8328                           
  8329                           	psect	text38
  8330  0F2E                     __ptext38:	
  8331 ;; *************** function _INT_SetInterruptHandler *****************
  8332 ;; Defined at:
  8333 ;;		line 71 in file "mcc_generated_files/ext_int.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  8336 ;;		 -> INT_DefaultInterruptHandler(1), 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;		None
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      void 
  8341 ;; Registers used:
  8342 ;;		wreg
  8343 ;; Tracked objects:
  8344 ;;		On entry : 1F/1
  8345 ;;		On exit  : 1F/1
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8348 ;;      Params:         2       0       0       0       0       0       0       0
  8349 ;;      Locals:         0       0       0       0       0       0       0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0
  8351 ;;      Totals:         2       0       0       0       0       0       0       0
  8352 ;;Total ram usage:        2 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    4
  8355 ;; This function calls:
  8356 ;;		Nothing
  8357 ;; This function is called by:
  8358 ;;		_EXT_INT_Initialize
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function _INT_SetInterruptHandler
  8364  0F2E                     _INT_SetInterruptHandler:	
  8365                           
  8366                           ;ext_int.c: 72: INT_InterruptHandler = InterruptHandler;
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  8370  0F2E  0873               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  8371  0F2F  00DD               	movwf	(_INT_InterruptHandler+1)^(0+128)
  8372  0F30  0872               	movf	INT_SetInterruptHandler@InterruptHandler,w
  8373  0F31  00DC               	movwf	_INT_InterruptHandler^(0+128)
  8374  0F32  0008               	return
  8375  0F33                     __end_of_INT_SetInterruptHandler:	
  8376                           
  8377                           	psect	text39
  8378  0724                     __ptext39:	
  8379 ;; *************** function _EUSART_Initialize *****************
  8380 ;; Defined at:
  8381 ;;		line 66 in file "mcc_generated_files/eusart.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;		None
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		wreg, status,2, status,0, pclath, cstack
  8390 ;; Tracked objects:
  8391 ;;		On entry : 1F/1
  8392 ;;		On exit  : 1F/1
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8395 ;;      Params:         0       0       0       0       0       0       0       0
  8396 ;;      Locals:         0       0       0       0       0       0       0       0
  8397 ;;      Temps:          0       0       0       0       0       0       0       0
  8398 ;;      Totals:         0       0       0       0       0       0       0       0
  8399 ;;Total ram usage:        0 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    5
  8402 ;; This function calls:
  8403 ;;		_EUSART_SetErrorHandler
  8404 ;;		_EUSART_SetFramingErrorHandler
  8405 ;;		_EUSART_SetOverrunErrorHandler
  8406 ;; This function is called by:
  8407 ;;		_SYSTEM_Initialize
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           
  8412                           ;psect for function _EUSART_Initialize
  8413  0724                     _EUSART_Initialize:	
  8414                           
  8415                           ;eusart.c: 71: BAUD1CON = 0x08;
  8416                           
  8417                           ;incstack = 0
  8418                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8419  0724  3008               	movlw	8
  8420  0725  0023               	movlb	3	; select bank3
  8421  0726  009F               	movwf	31	;volatile
  8422                           
  8423                           ;eusart.c: 74: RC1STA = 0x90;
  8424  0727  3090               	movlw	144
  8425  0728  009D               	movwf	29	;volatile
  8426                           
  8427                           ;eusart.c: 77: TX1STA = 0x24;
  8428  0729  3024               	movlw	36
  8429  072A  009E               	movwf	30	;volatile
  8430                           
  8431                           ;eusart.c: 80: SP1BRGL = 0x08;
  8432  072B  3008               	movlw	8
  8433  072C  009B               	movwf	27	;volatile
  8434                           
  8435                           ;eusart.c: 83: SP1BRGH = 0x00;
  8436  072D  019C               	clrf	28	;volatile
  8437                           
  8438                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  8439  072E  3000               	movlw	0
  8440  072F  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  8441  0730  3000               	movlw	0
  8442  0731  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  8443  0732  318F  274D  3187   	fcall	_EUSART_SetFramingErrorHandler
  8444                           
  8445                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  8446  0735  3000               	movlw	0
  8447  0736  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  8448  0737  3000               	movlw	0
  8449  0738  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  8450  0739  318F  2729  3187   	fcall	_EUSART_SetOverrunErrorHandler
  8451                           
  8452                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  8453  073C  3000               	movlw	0
  8454  073D  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler
  8455  073E  3000               	movlw	0
  8456  073F  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  8457  0740  318F  2724         	fcall	_EUSART_SetErrorHandler
  8458                           
  8459                           ;eusart.c: 90: eusartRxLastError.status = 0;
  8460  0742  01D1               	clrf	_eusartRxLastError^(0+128)	;volatile
  8461  0743  0008               	return
  8462  0744                     __end_of_EUSART_Initialize:	
  8463                           
  8464                           	psect	text40
  8465  0F29                     __ptext40:	
  8466 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  8467 ;; Defined at:
  8468 ;;		line 170 in file "mcc_generated_files/eusart.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  8471 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;		None
  8474 ;; Return value:  Size  Location     Type
  8475 ;;                  1    wreg      void 
  8476 ;; Registers used:
  8477 ;;		wreg
  8478 ;; Tracked objects:
  8479 ;;		On entry : 1F/1
  8480 ;;		On exit  : 1F/1
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8483 ;;      Params:         2       0       0       0       0       0       0       0
  8484 ;;      Locals:         0       0       0       0       0       0       0       0
  8485 ;;      Temps:          0       0       0       0       0       0       0       0
  8486 ;;      Totals:         2       0       0       0       0       0       0       0
  8487 ;;Total ram usage:        2 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; Hardware stack levels required when called:    4
  8490 ;; This function calls:
  8491 ;;		Nothing
  8492 ;; This function is called by:
  8493 ;;		_EUSART_Initialize
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           
  8498                           ;psect for function _EUSART_SetOverrunErrorHandler
  8499  0F29                     _EUSART_SetOverrunErrorHandler:	
  8500                           
  8501                           ;eusart.c: 171: EUSART_OverrunErrorHandler = interruptHandler;
  8502                           
  8503                           ;incstack = 0
  8504                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  8505  0F29  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  8506  0F2A  00E1               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  8507  0F2B  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  8508  0F2C  00E0               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  8509  0F2D  0008               	return
  8510  0F2E                     __end_of_EUSART_SetOverrunErrorHandler:	
  8511                           
  8512                           	psect	text41
  8513  0F4D                     __ptext41:	
  8514 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  8515 ;; Defined at:
  8516 ;;		line 166 in file "mcc_generated_files/eusart.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  8519 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;		None
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      void 
  8524 ;; Registers used:
  8525 ;;		wreg
  8526 ;; Tracked objects:
  8527 ;;		On entry : 1F/3
  8528 ;;		On exit  : 1F/1
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8531 ;;      Params:         2       0       0       0       0       0       0       0
  8532 ;;      Locals:         0       0       0       0       0       0       0       0
  8533 ;;      Temps:          0       0       0       0       0       0       0       0
  8534 ;;      Totals:         2       0       0       0       0       0       0       0
  8535 ;;Total ram usage:        2 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; Hardware stack levels required when called:    4
  8538 ;; This function calls:
  8539 ;;		Nothing
  8540 ;; This function is called by:
  8541 ;;		_EUSART_Initialize
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           
  8546                           ;psect for function _EUSART_SetFramingErrorHandler
  8547  0F4D                     _EUSART_SetFramingErrorHandler:	
  8548                           
  8549                           ;eusart.c: 167: EUSART_FramingErrorHandler = interruptHandler;
  8550                           
  8551                           ;incstack = 0
  8552                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  8553  0F4D  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  8554  0F4E  0021               	movlb	1	; select bank1
  8555  0F4F  00E3               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  8556  0F50  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  8557  0F51  00E2               	movwf	_EUSART_FramingErrorHandler^(0+128)
  8558  0F52  0008               	return
  8559  0F53                     __end_of_EUSART_SetFramingErrorHandler:	
  8560                           
  8561                           	psect	text42
  8562  0F24                     __ptext42:	
  8563 ;; *************** function _EUSART_SetErrorHandler *****************
  8564 ;; Defined at:
  8565 ;;		line 174 in file "mcc_generated_files/eusart.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  8568 ;;		 -> EUSART_DefaultErrorHandler(1), 
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;		None
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  1    wreg      void 
  8573 ;; Registers used:
  8574 ;;		wreg
  8575 ;; Tracked objects:
  8576 ;;		On entry : 1F/1
  8577 ;;		On exit  : 1F/1
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8580 ;;      Params:         2       0       0       0       0       0       0       0
  8581 ;;      Locals:         0       0       0       0       0       0       0       0
  8582 ;;      Temps:          0       0       0       0       0       0       0       0
  8583 ;;      Totals:         2       0       0       0       0       0       0       0
  8584 ;;Total ram usage:        2 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    4
  8587 ;; This function calls:
  8588 ;;		Nothing
  8589 ;; This function is called by:
  8590 ;;		_EUSART_Initialize
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           
  8595                           ;psect for function _EUSART_SetErrorHandler
  8596  0F24                     _EUSART_SetErrorHandler:	
  8597                           
  8598                           ;eusart.c: 175: EUSART_ErrorHandler = interruptHandler;
  8599                           
  8600                           ;incstack = 0
  8601                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  8602  0F24  0873               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  8603  0F25  00DF               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  8604  0F26  0872               	movf	EUSART_SetErrorHandler@interruptHandler,w
  8605  0F27  00DE               	movwf	_EUSART_ErrorHandler^(0+128)
  8606  0F28  0008               	return
  8607  0F29                     __end_of_EUSART_SetErrorHandler:	
  8608                           
  8609                           	psect	text43
  8610  0F47                     __ptext43:	
  8611 ;; *************** function _DAC_Initialize *****************
  8612 ;; Defined at:
  8613 ;;		line 58 in file "mcc_generated_files/dac.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;		None
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;		None
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  1    wreg      void 
  8620 ;; Registers used:
  8621 ;;		wreg
  8622 ;; Tracked objects:
  8623 ;;		On entry : 1F/1
  8624 ;;		On exit  : 1F/2
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8627 ;;      Params:         0       0       0       0       0       0       0       0
  8628 ;;      Locals:         0       0       0       0       0       0       0       0
  8629 ;;      Temps:          0       0       0       0       0       0       0       0
  8630 ;;      Totals:         0       0       0       0       0       0       0       0
  8631 ;;Total ram usage:        0 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    4
  8634 ;; This function calls:
  8635 ;;		Nothing
  8636 ;; This function is called by:
  8637 ;;		_SYSTEM_Initialize
  8638 ;;		_main
  8639 ;; This function uses a non-reentrant model
  8640 ;;
  8641                           
  8642                           
  8643                           ;psect for function _DAC_Initialize
  8644  0F47                     _DAC_Initialize:	
  8645                           
  8646                           ;dac.c: 61: DAC1CON0 = 0x80;
  8647                           
  8648                           ;incstack = 0
  8649                           ; Regs used in _DAC_Initialize: [wreg]
  8650  0F47  3080               	movlw	128
  8651  0F48  0022               	movlb	2	; select bank2
  8652  0F49  0098               	movwf	24	;volatile
  8653                           
  8654                           ;dac.c: 63: DAC1CON1 = 0xFF;
  8655  0F4A  30FF               	movlw	255
  8656  0F4B  0099               	movwf	25	;volatile
  8657  0F4C  0008               	return
  8658  0F4D                     __end_of_DAC_Initialize:	
  8659                           
  8660                           	psect	intentry
  8661  0004                     __pintentry:	
  8662 ;; *************** function _INTERRUPT_InterruptManager *****************
  8663 ;; Defined at:
  8664 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;		None
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;		None
  8669 ;; Return value:  Size  Location     Type
  8670 ;;                  1    wreg      void 
  8671 ;; Registers used:
  8672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8673 ;; Tracked objects:
  8674 ;;		On entry : 0/0
  8675 ;;		On exit  : 0/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8678 ;;      Params:         0       0       0       0       0       0       0       0
  8679 ;;      Locals:         0       0       0       0       0       0       0       0
  8680 ;;      Temps:          0       0       0       0       0       0       0       0
  8681 ;;      Totals:         0       0       0       0       0       0       0       0
  8682 ;;Total ram usage:        0 bytes
  8683 ;; Hardware stack levels used:    1
  8684 ;; Hardware stack levels required when called:    3
  8685 ;; This function calls:
  8686 ;;		_INT_ISR
  8687 ;;		_PIN_MANAGER_IOC
  8688 ;;		_TMR0_ISR
  8689 ;;		_TMR4_ISR
  8690 ;; This function is called by:
  8691 ;;		Interrupt level 1
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695  0004                     _INTERRUPT_InterruptManager:	
  8696                           
  8697                           ;incstack = 0
  8698  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8699                           
  8700                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8701  0005  3180               	pagesel	$
  8702                           
  8703                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  8704  0006  1A8B               	btfsc	11,5	;volatile
  8705  0007  1D0B               	btfss	11,2	;volatile
  8706  0008  280D               	goto	i1l136
  8707                           
  8708                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: TMR0_ISR();
  8709  0009  318F  2798  3180   	fcall	_TMR0_ISR
  8710                           
  8711                           ;interrupt_manager.c: 58: }
  8712  000C  2825               	goto	i1l146
  8713  000D                     i1l136:	
  8714                           
  8715                           ;interrupt_manager.c: 59: else if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
  8716  000D  1A0B               	btfsc	11,4	;volatile
  8717  000E  1C8B               	btfss	11,1	;volatile
  8718  000F  2814               	goto	i1l138
  8719                           
  8720                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: INT_ISR();
  8721  0010  318F  270F  3180   	fcall	_INT_ISR
  8722                           
  8723                           ;interrupt_manager.c: 62: }
  8724  0013  2825               	goto	i1l146
  8725  0014                     i1l138:	
  8726                           
  8727                           ;interrupt_manager.c: 63: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  8728  0014  198B               	btfsc	11,3	;volatile
  8729  0015  1C0B               	btfss	11,0	;volatile
  8730  0016  281B               	goto	i1l140
  8731                           
  8732                           ;interrupt_manager.c: 64: {;interrupt_manager.c: 65: PIN_MANAGER_IOC();
  8733  0017  3180  2002  3180   	fcall	_PIN_MANAGER_IOC
  8734                           
  8735                           ;interrupt_manager.c: 66: }
  8736  001A  2825               	goto	i1l146
  8737  001B                     i1l140:	
  8738                           
  8739                           ;interrupt_manager.c: 67: else if(INTCONbits.PEIE == 1)
  8740  001B  1F0B               	btfss	11,6	;volatile
  8741  001C  2825               	goto	i1l146
  8742                           
  8743                           ;interrupt_manager.c: 68: {;interrupt_manager.c: 69: if(PIE2bits.TMR4IE == 1 && PIR2bits
      +                          .TMR4IF == 1)
  8744  001D  0021               	movlb	1	; select bank1
  8745  001E  1C92               	btfss	18,1	;volatile
  8746  001F  2825               	goto	i1l146
  8747  0020  0020               	movlb	0	; select bank0
  8748  0021  1C92               	btfss	18,1	;volatile
  8749  0022  2825               	goto	i1l146
  8750                           
  8751                           ;interrupt_manager.c: 70: {;interrupt_manager.c: 71: TMR4_ISR();
  8752  0023  318F  278C         	fcall	_TMR4_ISR
  8753  0025                     i1l146:	
  8754                           ;interrupt_manager.c: 72: }
  8755                           
  8756  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8757  0026  0009               	retfie
  8758  0027                     __end_of_INTERRUPT_InterruptManager:	
  8759                           
  8760                           	psect	text45
  8761  0F8C                     __ptext45:	
  8762 ;; *************** function _TMR4_ISR *****************
  8763 ;; Defined at:
  8764 ;;		line 120 in file "mcc_generated_files/tmr4.c"
  8765 ;; Parameters:    Size  Location     Type
  8766 ;;		None
  8767 ;; Auto vars:     Size  Location     Type
  8768 ;;		None
  8769 ;; Return value:  Size  Location     Type
  8770 ;;                  1    wreg      void 
  8771 ;; Registers used:
  8772 ;;		wreg, status,2, status,0, pclath, cstack
  8773 ;; Tracked objects:
  8774 ;;		On entry : 1F/0
  8775 ;;		On exit  : 0/0
  8776 ;;		Unchanged: 0/0
  8777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8778 ;;      Params:         0       0       0       0       0       0       0       0
  8779 ;;      Locals:         0       0       0       0       0       0       0       0
  8780 ;;      Temps:          0       0       0       0       0       0       0       0
  8781 ;;      Totals:         0       0       0       0       0       0       0       0
  8782 ;;Total ram usage:        0 bytes
  8783 ;; Hardware stack levels used:    1
  8784 ;; Hardware stack levels required when called:    2
  8785 ;; This function calls:
  8786 ;;		Absolute function
  8787 ;;		_TMR4_DefaultInterruptHandler
  8788 ;; This function is called by:
  8789 ;;		_INTERRUPT_InterruptManager
  8790 ;; This function uses a non-reentrant model
  8791 ;;
  8792                           
  8793                           
  8794                           ;psect for function _TMR4_ISR
  8795  0F8C                     _TMR4_ISR:	
  8796                           
  8797                           ;tmr4.c: 124: PIR2bits.TMR4IF = 0;
  8798                           
  8799                           ;incstack = 0
  8800                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
  8801  0F8C  1092               	bcf	18,1	;volatile
  8802                           
  8803                           ;tmr4.c: 126: if(TMR4_InterruptHandler)
  8804  0F8D  0021               	movlb	1	; select bank1
  8805  0F8E  0858               	movf	_TMR4_InterruptHandler^(0+128),w
  8806  0F8F  0459               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
  8807  0F90  1903               	btfsc	3,2
  8808  0F91  0008               	return
  8809                           
  8810                           ;tmr4.c: 127: {;tmr4.c: 128: TMR4_InterruptHandler();
  8811  0F92  0859               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
  8812  0F93  008A               	movwf	10
  8813  0F94  0858               	movf	_TMR4_InterruptHandler^(0+128),w
  8814  0F95  000A               	callw
  8815  0F96  318F               	pagesel	$
  8816  0F97  0008               	return
  8817  0F98                     __end_of_TMR4_ISR:	
  8818                           
  8819                           	psect	text46
  8820  0FCB                     __ptext46:	
  8821 ;; *************** function _TMR4_DefaultInterruptHandler *****************
  8822 ;; Defined at:
  8823 ;;		line 145 in file "mcc_generated_files/tmr4.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;		None
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;		None
  8828 ;; Return value:  Size  Location     Type
  8829 ;;                  1    wreg      void 
  8830 ;; Registers used:
  8831 ;;		wreg, status,2, status,0, pclath, cstack
  8832 ;; Tracked objects:
  8833 ;;		On entry : 1F/1
  8834 ;;		On exit  : 1F/2
  8835 ;;		Unchanged: 0/0
  8836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8837 ;;      Params:         0       0       0       0       0       0       0       0
  8838 ;;      Locals:         0       0       0       0       0       0       0       0
  8839 ;;      Temps:          0       0       0       0       0       0       0       0
  8840 ;;      Totals:         0       0       0       0       0       0       0       0
  8841 ;;Total ram usage:        0 bytes
  8842 ;; Hardware stack levels used:    1
  8843 ;; Hardware stack levels required when called:    1
  8844 ;; This function calls:
  8845 ;;		_DAC_SetOutput
  8846 ;; This function is called by:
  8847 ;;		_TMR4_Initialize
  8848 ;;		_TMR4_ISR
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           
  8853                           ;psect for function _TMR4_DefaultInterruptHandler
  8854  0FCB                     _TMR4_DefaultInterruptHandler:	
  8855                           
  8856                           ;tmr4.c: 151: if (currentIsOn){
  8857                           
  8858                           ;incstack = 0
  8859                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
  8860  0FCB  0824               	movf	_currentIsOn^(0+128),w
  8861  0FCC  1903               	btfsc	3,2
  8862  0FCD  2FDA               	goto	i1l410
  8863                           
  8864                           ;tmr4.c: 152: currentIsOn = 0;
  8865  0FCE  01A4               	clrf	_currentIsOn^(0+128)
  8866                           
  8867                           ;tmr4.c: 153: if (dc_frequency_flag){
  8868  0FCF  0847               	movf	_dc_frequency_flag^(0+128),w
  8869  0FD0  1903               	btfsc	3,2
  8870  0FD1  2FD6               	goto	i1l2296
  8871                           
  8872                           ;tmr4.c: 155: DAC_SetOutput(dac_value);
  8873  0FD2  084F               	movf	_dac_value^(0+128),w
  8874  0FD3  318F  271F         	fcall	_DAC_SetOutput
  8875                           
  8876                           ;tmr4.c: 156: } else {
  8877  0FD5  0008               	return
  8878  0FD6                     i1l2296:	
  8879                           
  8880                           ;tmr4.c: 158: DAC_SetOutput(255);
  8881  0FD6  30FF               	movlw	255
  8882  0FD7  318F  271F         	fcall	_DAC_SetOutput
  8883  0FD9  0008               	return
  8884  0FDA                     i1l410:	
  8885                           
  8886                           ;tmr4.c: 161: currentIsOn = 1;
  8887  0FDA  01A4               	clrf	_currentIsOn^(0+128)
  8888  0FDB  0AA4               	incf	_currentIsOn^(0+128),f
  8889                           
  8890                           ;tmr4.c: 162: DAC_SetOutput(dac_value);
  8891  0FDC  084F               	movf	_dac_value^(0+128),w
  8892  0FDD  318F  271F         	fcall	_DAC_SetOutput
  8893  0FDF  0008               	return
  8894  0FE0                     __end_of_TMR4_DefaultInterruptHandler:	
  8895                           
  8896                           	psect	text47
  8897  0F1F                     __ptext47:	
  8898 ;; *************** function _DAC_SetOutput *****************
  8899 ;; Defined at:
  8900 ;;		line 66 in file "mcc_generated_files/dac.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;  inputData       1    wreg     unsigned char 
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;  inputData       1    0[COMMON] unsigned char 
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  1    wreg      void 
  8907 ;; Registers used:
  8908 ;;		wreg
  8909 ;; Tracked objects:
  8910 ;;		On entry : 1F/1
  8911 ;;		On exit  : 1F/2
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8914 ;;      Params:         0       0       0       0       0       0       0       0
  8915 ;;      Locals:         1       0       0       0       0       0       0       0
  8916 ;;      Temps:          0       0       0       0       0       0       0       0
  8917 ;;      Totals:         1       0       0       0       0       0       0       0
  8918 ;;Total ram usage:        1 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; This function calls:
  8921 ;;		Nothing
  8922 ;; This function is called by:
  8923 ;;		_TMR4_DefaultInterruptHandler
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           
  8928                           ;psect for function _DAC_SetOutput
  8929  0F1F                     _DAC_SetOutput:	
  8930                           
  8931                           ;incstack = 0
  8932                           ; Regs used in _DAC_SetOutput: [wreg]
  8933                           ;DAC_SetOutput@inputData stored from wreg
  8934  0F1F  00F0               	movwf	DAC_SetOutput@inputData
  8935                           
  8936                           ;dac.c: 68: DAC1CON1 = inputData;
  8937  0F20  0870               	movf	DAC_SetOutput@inputData,w
  8938  0F21  0022               	movlb	2	; select bank2
  8939  0F22  0099               	movwf	25	;volatile
  8940  0F23  0008               	return
  8941  0F24                     __end_of_DAC_SetOutput:	
  8942                           
  8943                           	psect	text48
  8944  0F98                     __ptext48:	
  8945 ;; *************** function _TMR0_ISR *****************
  8946 ;; Defined at:
  8947 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;		None
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;		None
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  1    wreg      void 
  8954 ;; Registers used:
  8955 ;;		wreg, status,2, status,0, pclath, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8961 ;;      Params:         0       0       0       0       0       0       0       0
  8962 ;;      Locals:         0       0       0       0       0       0       0       0
  8963 ;;      Temps:          0       0       0       0       0       0       0       0
  8964 ;;      Totals:         0       0       0       0       0       0       0       0
  8965 ;;Total ram usage:        0 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:    1
  8968 ;; This function calls:
  8969 ;;		Absolute function
  8970 ;;		_TMR0_DefaultInterruptHandler
  8971 ;; This function is called by:
  8972 ;;		_INTERRUPT_InterruptManager
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           
  8977                           ;psect for function _TMR0_ISR
  8978  0F98                     _TMR0_ISR:	
  8979                           
  8980                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  8981                           
  8982                           ;incstack = 0
  8983                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  8984  0F98  110B               	bcf	11,2	;volatile
  8985                           
  8986                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  8987  0F99  0021               	movlb	1	; select bank1
  8988  0F9A  0850               	movf	_timer0ReloadVal^(0+128),w	;volatile
  8989  0F9B  0020               	movlb	0	; select bank0
  8990  0F9C  0095               	movwf	21	;volatile
  8991                           
  8992                           ;tmr0.c: 116: if(TMR0_InterruptHandler)
  8993  0F9D  0021               	movlb	1	; select bank1
  8994  0F9E  085A               	movf	_TMR0_InterruptHandler^(0+128),w
  8995  0F9F  045B               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
  8996  0FA0  1903               	btfsc	3,2
  8997  0FA1  0008               	return
  8998                           
  8999                           ;tmr0.c: 117: {;tmr0.c: 118: TMR0_InterruptHandler();
  9000  0FA2  085B               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
  9001  0FA3  008A               	movwf	10
  9002  0FA4  085A               	movf	_TMR0_InterruptHandler^(0+128),w
  9003  0FA5  000A               	callw
  9004  0FA6  318F               	pagesel	$
  9005  0FA7  0008               	return
  9006  0FA8                     __end_of_TMR0_ISR:	
  9007                           
  9008                           	psect	text49
  9009  0003                     __ptext49:	
  9010 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  9011 ;; Defined at:
  9012 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  9013 ;; Parameters:    Size  Location     Type
  9014 ;;		None
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;		None
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  1    wreg      void 
  9019 ;; Registers used:
  9020 ;;		None
  9021 ;; Tracked objects:
  9022 ;;		On entry : 1F/1
  9023 ;;		On exit  : 1F/1
  9024 ;;		Unchanged: 1F/0
  9025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9026 ;;      Params:         0       0       0       0       0       0       0       0
  9027 ;;      Locals:         0       0       0       0       0       0       0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0       0
  9029 ;;      Totals:         0       0       0       0       0       0       0       0
  9030 ;;Total ram usage:        0 bytes
  9031 ;; Hardware stack levels used:    1
  9032 ;; This function calls:
  9033 ;;		Nothing
  9034 ;; This function is called by:
  9035 ;;		_TMR0_Initialize
  9036 ;;		_TMR0_ISR
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           
  9041                           ;psect for function _TMR0_DefaultInterruptHandler
  9042  0003                     _TMR0_DefaultInterruptHandler:	
  9043                           
  9044                           ;incstack = 0
  9045                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  9046  0003  0008               	return
  9047  0004                     __end_of_TMR0_DefaultInterruptHandler:	
  9048                           
  9049                           	psect	text50
  9050  0002                     __ptext50:	
  9051 ;; *************** function _PIN_MANAGER_IOC *****************
  9052 ;; Defined at:
  9053 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;		None
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;		None
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  1    wreg      void 
  9060 ;; Registers used:
  9061 ;;		None
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9067 ;;      Params:         0       0       0       0       0       0       0       0
  9068 ;;      Locals:         0       0       0       0       0       0       0       0
  9069 ;;      Temps:          0       0       0       0       0       0       0       0
  9070 ;;      Totals:         0       0       0       0       0       0       0       0
  9071 ;;Total ram usage:        0 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; This function calls:
  9074 ;;		Nothing
  9075 ;; This function is called by:
  9076 ;;		_INTERRUPT_InterruptManager
  9077 ;; This function uses a non-reentrant model
  9078 ;;
  9079                           
  9080                           
  9081                           ;psect for function _PIN_MANAGER_IOC
  9082  0002                     _PIN_MANAGER_IOC:	
  9083                           
  9084                           ;incstack = 0
  9085                           ; Regs used in _PIN_MANAGER_IOC: []
  9086  0002  0008               	return
  9087  0003                     __end_of_PIN_MANAGER_IOC:	
  9088                           
  9089                           	psect	text51
  9090  0F0F                     __ptext51:	
  9091 ;; *************** function _INT_ISR *****************
  9092 ;; Defined at:
  9093 ;;		line 54 in file "mcc_generated_files/ext_int.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;		None
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;		None
  9098 ;; Return value:  Size  Location     Type
  9099 ;;                  1    wreg      void 
  9100 ;; Registers used:
  9101 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9107 ;;      Params:         0       0       0       0       0       0       0       0
  9108 ;;      Locals:         0       0       0       0       0       0       0       0
  9109 ;;      Temps:          0       0       0       0       0       0       0       0
  9110 ;;      Totals:         0       0       0       0       0       0       0       0
  9111 ;;Total ram usage:        0 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    2
  9114 ;; This function calls:
  9115 ;;		_INT_CallBack
  9116 ;; This function is called by:
  9117 ;;		_INTERRUPT_InterruptManager
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _INT_ISR
  9123  0F0F                     _INT_ISR:	
  9124                           
  9125                           ;ext_int.c: 56: (INTCONbits.INTF = 0);
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _INT_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9129  0F0F  108B               	bcf	11,1	;volatile
  9130                           
  9131                           ;ext_int.c: 59: INT_CallBack();
  9132  0F10  318F  2776         	fcall	_INT_CallBack
  9133  0F12  0008               	return
  9134  0F13                     __end_of_INT_ISR:	
  9135                           
  9136                           	psect	text52
  9137  0F76                     __ptext52:	
  9138 ;; *************** function _INT_CallBack *****************
  9139 ;; Defined at:
  9140 ;;		line 62 in file "mcc_generated_files/ext_int.c"
  9141 ;; Parameters:    Size  Location     Type
  9142 ;;		None
  9143 ;; Auto vars:     Size  Location     Type
  9144 ;;		None
  9145 ;; Return value:  Size  Location     Type
  9146 ;;                  1    wreg      void 
  9147 ;; Registers used:
  9148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9149 ;; Tracked objects:
  9150 ;;		On entry : 0/0
  9151 ;;		On exit  : 0/0
  9152 ;;		Unchanged: 0/0
  9153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9154 ;;      Params:         0       0       0       0       0       0       0       0
  9155 ;;      Locals:         0       0       0       0       0       0       0       0
  9156 ;;      Temps:          0       0       0       0       0       0       0       0
  9157 ;;      Totals:         0       0       0       0       0       0       0       0
  9158 ;;Total ram usage:        0 bytes
  9159 ;; Hardware stack levels used:    1
  9160 ;; Hardware stack levels required when called:    1
  9161 ;; This function calls:
  9162 ;;		Absolute function
  9163 ;;		_INT_DefaultInterruptHandler
  9164 ;; This function is called by:
  9165 ;;		_INT_ISR
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           
  9170                           ;psect for function _INT_CallBack
  9171  0F76                     _INT_CallBack:	
  9172                           
  9173                           ;ext_int.c: 65: if(INT_InterruptHandler)
  9174                           
  9175                           ;incstack = 0
  9176                           ; Regs used in _INT_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9177  0F76  0021               	movlb	1	; select bank1
  9178  0F77  085C               	movf	_INT_InterruptHandler^(0+128),w
  9179  0F78  045D               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
  9180  0F79  1903               	btfsc	3,2
  9181  0F7A  0008               	return
  9182                           
  9183                           ;ext_int.c: 66: {;ext_int.c: 67: INT_InterruptHandler();
  9184  0F7B  085D               	movf	(_INT_InterruptHandler+1)^(0+128),w
  9185  0F7C  008A               	movwf	10
  9186  0F7D  085C               	movf	_INT_InterruptHandler^(0+128),w
  9187  0F7E  000A               	callw
  9188  0F7F  318F               	pagesel	$
  9189  0F80  0008               	return
  9190  0F81                     __end_of_INT_CallBack:	
  9191                           
  9192                           	psect	text53
  9193  04C7                     __ptext53:	
  9194 ;; *************** function _INT_DefaultInterruptHandler *****************
  9195 ;; Defined at:
  9196 ;;		line 75 in file "mcc_generated_files/ext_int.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;		None
  9199 ;; Auto vars:     Size  Location     Type
  9200 ;;  time            1    1[COMMON] unsigned char 
  9201 ;; Return value:  Size  Location     Type
  9202 ;;                  1    wreg      void 
  9203 ;; Registers used:
  9204 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9205 ;; Tracked objects:
  9206 ;;		On entry : 1F/1
  9207 ;;		On exit  : 1F/1
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9210 ;;      Params:         0       0       0       0       0       0       0       0
  9211 ;;      Locals:         1       0       0       0       0       0       0       0
  9212 ;;      Temps:          1       0       0       0       0       0       0       0
  9213 ;;      Totals:         2       0       0       0       0       0       0       0
  9214 ;;Total ram usage:        2 bytes
  9215 ;; Hardware stack levels used:    1
  9216 ;; This function calls:
  9217 ;;		Nothing
  9218 ;; This function is called by:
  9219 ;;		_EXT_INT_Initialize
  9220 ;;		_INT_CallBack
  9221 ;; This function uses a non-reentrant model
  9222 ;;
  9223                           
  9224                           
  9225                           ;psect for function _INT_DefaultInterruptHandler
  9226  04C7                     _INT_DefaultInterruptHandler:	
  9227                           
  9228                           ;ext_int.c: 77: uint8_t time = TMR0;
  9229                           
  9230                           ;incstack = 0
  9231                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr0h+status,2+status,0]
  9232  04C7  0020               	movlb	0	; select bank0
  9233  04C8  0815               	movf	21,w	;volatile
  9234  04C9  00F0               	movwf	??_INT_DefaultInterruptHandler
  9235  04CA  0870               	movf	??_INT_DefaultInterruptHandler,w
  9236  04CB  00F1               	movwf	INT_DefaultInterruptHandler@time
  9237                           
  9238                           ;ext_int.c: 78: TMR0 = 0;
  9239  04CC  0195               	clrf	21	;volatile
  9240                           
  9241                           ;ext_int.c: 81: if (INTCONbits.TMR0IF){
  9242  04CD  190B               	btfsc	11,2	;volatile
  9243                           
  9244                           ;ext_int.c: 82: time = 0;
  9245  04CE  01F1               	clrf	INT_DefaultInterruptHandler@time
  9246                           
  9247                           ;ext_int.c: 83: };ext_int.c: 84: INTCONbits.TMR0IF = 0;
  9248  04CF  110B               	bcf	11,2	;volatile
  9249                           
  9250                           ;ext_int.c: 86: switch(ir_code.state){
  9251  04D0  2D09               	goto	i1l2016
  9252  04D1                     i1l1980:	
  9253                           
  9254                           ;ext_int.c: 89: if (time >= 180 && time <= 243){
  9255  04D1  30B4               	movlw	180
  9256  04D2  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9257  04D3  1C03               	skipc
  9258  04D4  2D15               	goto	i1l269
  9259  04D5  30F4               	movlw	244
  9260  04D6  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9261  04D7  1803               	skipnc
  9262  04D8  2D15               	goto	i1l269
  9263                           
  9264                           ;ext_int.c: 90: ir_code.n_bits = 0;
  9265  04D9  01D2               	clrf	_ir_code^(0+128)
  9266                           
  9267                           ;ext_int.c: 91: ir_code.state = STATE_RECEIVING;
  9268  04DA  01D3               	clrf	(_ir_code^(0+128)+1)
  9269  04DB  0AD3               	incf	(_ir_code^(0+128)+1),f
  9270  04DC  2D15               	goto	i1l269
  9271  04DD                     i1l1988:	
  9272                           
  9273                           ;ext_int.c: 99: ir_code.code <<= 1;
  9274  04DD  3001               	movlw	1
  9275  04DE                     u82_25:	
  9276  04DE  35D4               	lslf	(_ir_code^(0+128)+2),f
  9277  04DF  0DD5               	rlf	((_ir_code+1)^(0+128)+2),f
  9278  04E0  0DD6               	rlf	((_ir_code+2)^(0+128)+2),f
  9279  04E1  0DD7               	rlf	((_ir_code+3)^(0+128)+2),f
  9280  04E2  0B89               	decfsz	9,f
  9281  04E3  2CDE               	goto	u82_25
  9282                           
  9283                           ;ext_int.c: 100: if (time >= 29 && time <= 41){
  9284  04E4  301D               	movlw	29
  9285  04E5  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9286  04E6  1C03               	skipc
  9287  04E7  2CF2               	goto	i1l1998
  9288  04E8  302A               	movlw	42
  9289  04E9  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9290  04EA  1803               	skipnc
  9291  04EB  2CF2               	goto	i1l1998
  9292                           
  9293                           ;ext_int.c: 104: ir_code.code |= 1;
  9294  04EC  1454               	bsf	(_ir_code^(0+128)+2),0
  9295  04ED                     i1l1996:	
  9296                           
  9297                           ;ext_int.c: 105: ir_code.n_bits++;
  9298  04ED  3001               	movlw	1
  9299  04EE  00F0               	movwf	??_INT_DefaultInterruptHandler
  9300  04EF  0870               	movf	??_INT_DefaultInterruptHandler,w
  9301  04F0  07D2               	addwf	_ir_code^(0+128),f
  9302                           
  9303                           ;ext_int.c: 106: } else if (time >= 14 && time <= 20){
  9304  04F1  2CFC               	goto	i1l2006
  9305  04F2                     i1l1998:	
  9306  04F2  300E               	movlw	14
  9307  04F3  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9308  04F4  1C03               	skipc
  9309  04F5  2CFA               	goto	i1l2004
  9310  04F6  3015               	movlw	21
  9311  04F7  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9312  04F8  1C03               	btfss	3,0
  9313  04F9  2CED               	goto	i1l1996
  9314  04FA                     i1l2004:	
  9315                           
  9316                           ;ext_int.c: 113: ir_code.state = STATE_RESET;
  9317  04FA  01D3               	clrf	(_ir_code^(0+128)+1)
  9318                           
  9319                           ;ext_int.c: 114: break;
  9320  04FB  2D15               	goto	i1l269
  9321  04FC                     i1l2006:	
  9322                           
  9323                           ;ext_int.c: 115: };ext_int.c: 116: if (32 == ir_code.n_bits){
  9324  04FC  3020               	movlw	32
  9325  04FD  0652               	xorwf	_ir_code^(0+128),w
  9326  04FE  1D03               	btfss	3,2
  9327  04FF  2D15               	goto	i1l269
  9328                           
  9329                           ;ext_int.c: 119: if (ir_code.command == ((~ir_code.command_b) & 0xff)){
  9330  0500  0954               	comf	(_ir_code^(0+128)+2),w
  9331  0501  0655               	xorwf	(_ir_code^(0+128)+3),w
  9332  0502  1D03               	skipz
  9333  0503  2CFA               	goto	i1l2004
  9334                           
  9335                           ;ext_int.c: 120: ir_code.state = STATE_DONE;
  9336  0504  3002               	movlw	2
  9337  0505  00F0               	movwf	??_INT_DefaultInterruptHandler
  9338  0506  0870               	movf	??_INT_DefaultInterruptHandler,w
  9339  0507  00D3               	movwf	(_ir_code^(0+128)+1)
  9340                           
  9341                           ;ext_int.c: 121: } else {
  9342  0508  2D15               	goto	i1l269
  9343  0509                     i1l2016:	
  9344  0509  0021               	movlb	1	; select bank1
  9345  050A  0853               	movf	(_ir_code^(0+128)+1),w
  9346                           
  9347                           ; Switch size 1, requested type "simple"
  9348                           ; Number of cases is 3, Range of values is 0 to 2
  9349                           ; switch strategies available:
  9350                           ; Name         Instructions Cycles
  9351                           ; simple_byte           10     6 (average)
  9352                           ; direct_byte           12     6 (fixed)
  9353                           ; jumptable            260     6 (fixed)
  9354                           ;	Chosen strategy is simple_byte
  9355  050B  3A00               	xorlw	0	; case 0
  9356  050C  1903               	skipnz
  9357  050D  2CD1               	goto	i1l1980
  9358  050E  3A01               	xorlw	1	; case 1
  9359  050F  1903               	skipnz
  9360  0510  2CDD               	goto	i1l1988
  9361  0511  3A03               	xorlw	3	; case 2
  9362  0512  1903               	skipnz
  9363  0513  2D15               	goto	i1l269
  9364  0514  2CFA               	goto	i1l2004
  9365  0515                     i1l269:	
  9366                           
  9367                           ;ext_int.c: 135: INTCONbits.INTF = 0;
  9368  0515  108B               	bcf	11,1	;volatile
  9369  0516  0008               	return
  9370  0517                     __end_of_INT_DefaultInterruptHandler:	
  9371  007E                     btemp	set	126	;btemp
  9372  007E                     int$flags	set	126
  9373  007E                     wtemp0	set	126


Data Sizes:
    Strings     103
    Constant    0
    Data        40
    BSS         50
    Persistent  48
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     79      80
    BANK1            80      4      74
    BANK2            80      0      33
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_5(CODE[23]), STR_4(CODE[20]), STR_3(CODE[20]), STR_2(CODE[19]), 
		 -> STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK1[6]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 64
		 -> writePersistentState@buf(BANK0[64]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _main->_startUp
    _startUp->_setLEDColor
    _process_remote_command->_selectDecrease
    _writePersistentState->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setFrequency->___lmul
    _setCurrent->___lmul
    _selectSomething->_setLEDColor
    _selectResetValue->_printf
    _selectIncrease->_printf
    _selectFrequency->_printf
    _selectDecrease->_printf
    _selectCurrent->_printf
    _printf->_putch
    _putch->_EUSART_Write
    ___aldiv->___lmul
    _lowBattery->_setLEDColor
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR4_DefaultInterruptHandler->_DAC_SetOutput
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _main->_process_remote_command
    _process_remote_command->_writePersistentState
    _writePersistentState->_FLASH_WriteBlock
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    _selectResetValue->_printf
    _selectIncrease->_printf
    _selectFrequency->_printf
    _selectDecrease->_printf
    _selectCurrent->_printf
    _battery_voltage->___aldiv
    ___aldiv->___awdiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_process_remote_command

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   68547
                                              1 BANK1      3     3      0
                     _DAC_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
                         _lowBattery
             _process_remote_command
                _readPersistentState
                         _setCurrent
                       _setFrequency
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              4     4      0    5190
                                              6 COMMON     4     4      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (1) _readPersistentState                                  2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0   49201
                                             77 BANK0      2     2      0
                                              0 BANK1      1     1      0
                    _battery_voltage
                      _selectCurrent
                     _selectDecrease
                    _selectFrequency
                     _selectIncrease
                   _selectResetValue
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
               _writePersistentState
 ---------------------------------------------------------------------------------
 (2) _writePersistentState                                70    70      0    1430
                                              7 BANK0     70    70      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3    1106
                                              5 COMMON     3     0      3
                                              0 BANK0      7     7      0
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     218
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setFrequency                                         5     3      2    2680
                                             19 BANK0      5     3      2
            _TMR4_LoadPeriodRegister
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _TMR4_LoadPeriodRegister                              1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setCurrent                                          16    12      4    4142
                                             21 BANK0     16    12      4
                            ___aldiv
                            ___awdiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     612
                                              2 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     683
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    5122
                                              6 COMMON     2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectResetValue                                     2     2      0    5847
                                              2 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectIncrease                                       2     2      0    5847
                                              2 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    5847
                                              2 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectDecrease                                       1     1      0    5847
                                              9 COMMON     1     1      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    5847
                                              2 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    17      2     725
                                              4 COMMON     5     3      2
                                              0 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      62
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2    1397
                                             19 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1397
                                              4 BANK0     15     7      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lowBattery                                           2     2      0    5122
                                              6 COMMON     2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    5122
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     750
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     125
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     125
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     125
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     125
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     125
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     125
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     375
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     125
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     125
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     125
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0     156
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR4_ISR                                             0     0      0      22
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR4_DefaultInterruptHandler                         0     0      0      22
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (9) _DAC_SetOutput                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT_ISR                                              0     0      0     134
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (8) _INT_CallBack                                         0     0      0     134
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _INT_DefaultInterruptHandler                          2     2      0     134
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _lowBattery
     _setLEDColor
   _process_remote_command
     _battery_voltage
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
     _selectCurrent
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectDecrease
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectFrequency
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectIncrease
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectResetValue
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___awdiv
       ___lmul
       _battery_voltage (ARG)
         ___aldiv
           ___awdiv (ARG)
           ___lmul (ARG)
     _setFrequency
       _TMR4_LoadPeriodRegister
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___lmul
     _setLEDColor
     _writePersistentState
       _FLASH_WriteBlock
         _FLASH_EraseBlock
   _readPersistentState
   _setCurrent
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
     ___awdiv
     ___lmul
     _battery_voltage (ARG)
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
   _setFrequency
     _TMR4_LoadPeriodRegister
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
     ___lmul
   _startUp
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       _DAC_SetOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      C7       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4F      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      4      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      21      10       41.2%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      C7      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Aug  2 15:40:28 2020

                                  __CFG_CP$OFF 0000                                   ___awdiv@sign 0021  
                      __end_of_OPA1_Initialize 0F17                                _timer0ReloadVal 00D0  
                      __size_of_selectIncrease 0023                                    __CFG_LVP$ON 0000  
                                          l213 0F60                                            l612 03AA  
                                          l810 0230                                            l562 05F9  
                                          l565 0603                                            _PR2 001B  
                                          _PR4 0416                 ?_EUSART_SetFramingErrorHandler 0072  
                              _TMR2_Initialize 0F6E                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                    main@batt_mv 00E8  
               FLASH_WriteBlock@flashWordArray 0077                       __size_of_selectFrequency 0028  
                                         l3020 00A4                                           l3012 0085  
                                         l3030 00BD                                           l3022 00A7  
                                         l3006 006C                                           l3008 006F  
                                         l3120 02EF                                           l3050 00EF  
                                         l3034 00C6                                           l3026 00B7  
                                         l3114 02D7                                           l3060 0100  
                                         l3044 00D6                                           l3062 0103  
                                         l3046 00D9                                           l3082 0123  
                                         l3074 010D                                           l3084 0127  
                                         l3076 0111                                           l3092 013D  
                                         l3078 0115                                           l3094 016B  
                                         l2800 027F                                           l2714 032D  
                                         l2804 028A                                           l2820 042F  
                                         l2724 0351                                           l2744 07EC  
                                         l2808 0298                                           l2760 05CA  
                                         l2746 07F1                                           l2826 043A  
                                         l2756 0785                                           l2852 0471  
                                         l2844 0460                                           l2836 0442  
                                         l2764 05D4                                           l2790 0251  
                                         l2782 0241                                           l2838 044E  
                                         l2950 0215                                           l2862 03D0  
                                         l2792 025F                                           l2848 0469  
                                         l2954 021A                                           l2972 03CA  
                                         l2964 03BB                                           l2974 03CC  
                                         l2990 055F                                           l2998 0051  
                                         STR_1 07D0                                           STR_2 0822  
                                         STR_3 080E                                           STR_4 07FA  
                                         STR_5 07B9                                           u2107 056E  
                                         u2117 057B                                           _LATA 010C  
                                         _LATB 010D                                __end_of_INT_ISR 0F13  
                                         u2207 076F                                           u2127 0177  
                                         _LATC 010E                                           u2217 06A8  
                                         u2137 0487                                           u2227 067E  
                                         u2147 0498                                           u2237 068F  
                                         u2157 04AF                                           u2085 02EA  
                                         u2167 04C0                                           u2177 06CC  
                                         u1715 0260                                           u2187 06F1  
                                         u1635 05D5                                           u1725 0274  
                                         u2197 065A                                           u1645 05DC  
                                         u1735 0280                                           u1815 044F  
                                         u1575 031E                                           u1825 0459  
                                         u1905 020E                                           u1835 0461  
                                         u1925 03A3                                           u1695 0254  
                                         u1935 03B4                                           u1795 0445  
                                         u1955 058C                                           u1895 01E8  
                                         u1975 0062                                           u1995 0099  
                                         _TMR0 0015                                           _TMR2 001A  
                                         _TMR4 0415                        __end_of_OPA2_Initialize 0F1B  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                                           _main 02A1  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                              ?_FLASH_WriteBlock 0075  
          __end_of_INT_DefaultInterruptHandler 0517                    _INT_DefaultInterruptHandler 04C7  
                                         start 0027                                  __CFG_IESO$OFF 0000  
              __end_of_INT_SetInterruptHandler 0F33                             ??_FLASH_WriteBlock 0020  
                                __CFG_MCLRE$ON 0000                     ??_TMR4_SetInterruptHandler 0074  
                      __end_of_TMR0_Initialize 0FB9                 ??_TMR0_DefaultInterruptHandler 0070  
                                ?_EUSART_Write 0070                 __size_of_OSCILLATOR_Initialize 0008  
                __end_of_OSCILLATOR_Initialize 0F6E                                __end_of___aldiv 02A1  
                                        ?_main 0070                                __end_of___awdiv 0476  
                                        _ADRES 009B                                  __CFG_WDTE$OFF 0000  
                              ___awdiv@divisor 0072                                          _T2CON 001C  
                                        _T4CON 0417                                          i1l140 001B  
                                        i1l136 000D                                          i1l410 0FDA  
                                        i1l138 0014                                          i1l146 0025  
                                        i1l269 0515                                   ?_setLEDColor 0072  
                              ___awdiv@counter 0020                       __size_of_selectSomething 0051  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          u82_25 04DE  
                                        _RXPPS 0E24              __size_of_TMR0_SetInterruptHandler 0005  
                              _TMR4_Initialize 0FB9                            ___lmul@multiplicand 0076  
                    ?_TMR0_SetInterruptHandler 0072                               __end_of_TMR0_ISR 0FA8  
                             __end_of_TMR4_ISR 0F98                                __end_of_initLED 055B  
                      __end_of_PIN_MANAGER_IOC 0003                                 _WDT_Initialize 0F1B  
                          _readPersistentState 0744                                          _putch 0F3D  
                                        _stats 0120                                 __CFG_BOREN$OFF 0000  
                                        pclath 000A                                __end_of_startUp 058F  
                                        status 0003                        ?_process_remote_command 0070  
                                        wtemp0 007E                               ??_DAC_Initialize 0072  
                              __initialization 0029                                   __end_of_main 030E  
                         ?_readPersistentState 0070                          __end_of_selectCurrent 06BC  
                               ??_EUSART_Write 0072                        __end_of_TMR2_Initialize 0F76  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0070  
                             ?_OPA1_Initialize 0070                                         ??_main 00E7  
                     __size_of_battery_voltage 002D                  __size_of_writePersistentState 0057  
                               __CFG_PLLEN$OFF 0000                       ?_TMR4_LoadPeriodRegister 0070  
                       __end_of_WDT_Initialize 0F1F                       __end_of_selectResetValue 06E0  
                                    ??_INT_ISR 0072              _EUSART_DefaultFramingErrorHandler 0000  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 00E0                      FLASH_WriteBlock@writeAddr 0075  
                                       _CCPR1L 0291                               ___awdiv@dividend 0074  
                               __CFG_ZCDDIS$ON 0000                                         _ANSELA 018C  
                                       ?_putch 0070                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                       _RA5PPS 0E95                                         _RC1STA 019D  
                                       _RC4PPS 0EA4                                         i1l2004 04FA  
                                       i1l2006 04FC                                         i1l2016 0509  
                                       _RB7PPS 0E9F                                         _RC5PPS 0EA5  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       _ODCONC 028E                 __end_of_process_remote_command 0184  
                                       i1l2296 0FD6                                         i1l1980 04D1  
                                       i1l1996 04ED                                         i1l1988 04DD  
                                       i1l1998 04F2                                         _INLVLA 038C  
                                       _INLVLB 038D                                         _INLVLC 038E  
                                       _FVRCON 0117                                         _INTPPS 0E10  
                                       _PMADRH 0192                                         _PMADRL 0191  
                             ?_OPA2_Initialize 0070                                         _PMDATH 0194  
                                       _PMDATL 0193                                         _PMCON2 0196  
                    __size_of_FLASH_EraseBlock 001C                                         _OSCCON 0099  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                              ??_selectFrequency 0022  
                               __CFG_PWRTE$OFF 0000                                 _selectDecrease 0763  
                                       _Vdd_mv 00C8                          ??_readPersistentState 0072  
                                       ___lmul 05C2                                      ??___aldiv 002C  
                                    ??___awdiv 0076                                 __CFG_STVREN$ON 0000  
                             ?_TMR0_Initialize 0070                        __end_of_TMR4_Initialize 0FCB  
                             ___awdiv@quotient 0022                                 _selectIncrease 06E0  
                                       _printf 0780                                  ?_INT_CallBack 0070  
                                    ??_initLED 0072           __end_of_TMR4_DefaultInterruptHandler 0FE0  
        __size_of_TMR4_DefaultInterruptHandler 0015                   _TMR4_DefaultInterruptHandler 0FCB  
                             setCurrent@Vdd_mv 0037                                ?_WDT_Initialize 0070  
             __size_of_INT_SetInterruptHandler 0005                                      ??_startUp 0076  
     TMR4_SetInterruptHandler@InterruptHandler 0072       TMR0_SetInterruptHandler@InterruptHandler 0072  
      INT_SetInterruptHandler@InterruptHandler 0072                               ?_PIN_MANAGER_IOC 0070  
                            ??_selectSomething 0076                              _SYSTEM_Initialize 0703  
                      __end_of__initialization 0045                         __end_of_selectDecrease 0780  
                           ?_SYSTEM_Initialize 0070                         DAC_SetOutput@inputData 0070  
                            _dc_frequency_flag 00C7                                 __pcstackCOMMON 0070  
                                 __pidataBANK1 061E                            ??_SYSTEM_Initialize 0074  
                                    ?_TMR0_ISR 0070                                      ?_TMR4_ISR 0070  
                       __end_of_selectIncrease 0703                                  __end_of_putch 0F42  
                             ?_TMR2_Initialize 0070                __end_of_TMR4_LoadPeriodRegister 0F47  
                               ??_INT_CallBack 0072                    __size_of_EXT_INT_Initialize 000B  
                               _OPTION_REGbits 0095                  ?_TMR4_DefaultInterruptHandler 0070  
                       __size_of_DAC_SetOutput 0005                           __size_of_setLEDColor 0015  
                  FLASH_WriteBlock@GIEBitValue 0025                ??_EUSART_SetOverrunErrorHandler 0074  
                            ??_battery_voltage 007A                      __end_of_SYSTEM_Initialize 0724  
                                      ??_putch 0073                                  ?_setFrequency 0033  
                                   __pbssBANK0 006F                                     __pbssBANK1 00C8  
                                   __pbssBANK2 0120                           __end_of_EUSART_Write 0F66  
                                   __pnvCOMMON 007A                                ?_selectDecrease 0070  
                        _TMR4_InterruptHandler 00D8                                     __pmaintext 02A1  
             __end_of_TMR0_SetInterruptHandler 0F38                                        ?___lmul 0072  
                                   ??_TMR0_ISR 0070                                __CFG_PPS1WAY$ON 0000  
                                   ??_TMR4_ISR 0071                                     __pintentry 0004  
                              ?_selectIncrease 0070                                 ___lmul@product 0020  
                             ?_TMR4_Initialize 0070                                        ?_printf 0074  
                    __size_of_FLASH_WriteBlock 0061                                        _OPA1CON 0511  
                                      _OPA2CON 0515                                        _LED_red 00CE  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                                      _INT_ISR 0F0F                              _maxFrequencyIndex 00A0  
                                      _OSCSTAT 009A                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM4DCH 061B  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                       ??_EUSART_SetErrorHandler 0074  
                               ??_setFrequency 0035                                _maxCurrentIndex 00A2  
                             _FLASH_EraseBlock 079D                                  _DAC_SetOutput 0F1F  
                                      ___aldiv 0220                                        ___awdiv 0425  
                              __size_of___lmul 002F                                        __ptext1 055B  
                                      __ptext2 0744                                        __ptext3 0049  
                                      __ptext4 03CE                                        __ptext5 030E  
                                      __ptext6 079D                                        __ptext7 036F  
                                      __ptext8 0F42                                        __ptext9 0184  
                              __size_of_printf 001D                                        _initLED 0517  
                                      _ir_code 00D2                                     _lowBattery 066E  
                        _OSCILLATOR_Initialize 0F66                                      _T2CONbits 001C  
                             ___aldiv@dividend 0028                       ??_PIN_MANAGER_Initialize 0072  
            __size_of_TMR4_SetInterruptHandler 0005                        _INT_SetInterruptHandler 0F2E  
                    ?_TMR4_SetInterruptHandler 0072                              ?_selectResetValue 0070  
                              _selectFrequency 0646                                        _startUp 055B  
                   __size_of_SYSTEM_Initialize 0021                                        clrloop0 0F54  
                           ??_selectResetValue 0022                           end_of_initialization 0045  
               ??_TMR4_DefaultInterruptHandler 0071                                     _setCurrent 0184  
        __end_of_EUSART_SetOverrunErrorHandler 0F2E         __size_of_EUSART_SetOverrunErrorHandler 0005  
                _EUSART_SetOverrunErrorHandler 0F29                   __end_of_writePersistentState 0425  
                                    _LED_green 00CD                                        init_ram 0F59  
                                      initloop 0F5A                           __end_of_INT_CallBack 0F81  
             __size_of_TMR4_LoadPeriodRegister 0005                              _EUSART_Initialize 0724  
                               _frequencyIndex 00E4                              setCurrent@Vdac_mv 0041  
                               ?_DAC_SetOutput 0070                               __CFG_CLKOUTEN$ON 0000  
                               _frequencyValue 00BB                             ?_EUSART_Initialize 0070  
                                      printf@c 0021                                        printf@f 0074  
                             ___aldiv@quotient 002F                                setLEDColor@blue 0073  
                          ??_EUSART_Initialize 0074                               ??_WDT_Initialize 0072  
                     _TMR0_SetInterruptHandler 0F33                                _selectSomething 0476  
                      writePersistentState@buf 002B                        writePersistentState@idx 006C  
                             __CFG_FOSC$INTOSC 0000                          __size_of_EUSART_Write 0007  
                     __size_of_OPA1_Initialize 0004                __size_of_EUSART_SetErrorHandler 0005  
                       __size_of_selectCurrent 0026                      __end_of_EUSART_Initialize 0744  
                                  _CCP1CONbits 0293                    __end_of_readPersistentState 0763  
                            FLASH_WriteBlock@i 0026                       __size_of_OPA2_Initialize 0004  
                         __end_of_setFrequency 03CE                                 __end_of___lmul 05F1  
                   _EUSART_DefaultErrorHandler 0000                                _battery_voltage 05F1  
                                 _EUSART_Write 0F5F                              __size_of_TMR0_ISR 0010  
                            __size_of_TMR4_ISR 000C                               _FLASH_WriteBlock 030E  
                       ?_OSCILLATOR_Initialize 0070                        __end_of_selectFrequency 066E  
                    ??_INT_SetInterruptHandler 0074                        __size_of_DAC_Initialize 0006  
                                  ?_lowBattery 0070                                 __end_of_printf 079D  
                 __p_HEF_persistent_state_text 0FE0                            start_initialization 0029  
                     __size_of_TMR0_Initialize 0011                __size_of_PIN_MANAGER_Initialize 0033  
                             ??_selectDecrease 0079                                    putch@txData 0073  
                                  ?_setCurrent 0035                                ??_DAC_SetOutput 0070  
                     __size_of_PIN_MANAGER_IOC 0001                   ?_INT_DefaultInterruptHandler 0070  
                             ??_selectIncrease 0022                 ?_EUSART_SetOverrunErrorHandler 0072  
                   _EUSART_FramingErrorHandler 00E2                        __end_of_selectSomething 04C7  
                                     ??___lmul 007A                         _EUSART_SetErrorHandler 0F24  
                                  _CCPTMRSbits 029E                                  _selectCurrent 0696  
                                  __pdataBANK1 00A0                    FLASH_EraseBlock@GIEBitValue 0074  
                   __end_of_EXT_INT_Initialize 0F8C                       __end_of_FLASH_EraseBlock 07B9  
                                     ??_printf 0076                           _writePersistentState 03CE  
                                ??_setLEDColor 0074                          writePersistentState@i 006B  
                                    ___latbits 0001                       ??_process_remote_command 006D  
                                     ?_INT_ISR 0070                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00E6                       __size_of_TMR2_Initialize 0008  
                        __size_of_INT_CallBack 000B                                      _dac_value 00CF  
                      _TMR4_LoadPeriodRegister 0F42                     __size_of_EUSART_Initialize 0020  
                                 _currentIndex 007A                              ??_OPA1_Initialize 0072  
                                 _currentValue 00A5                          _TMR0_InterruptHandler 00DA  
                                    __pnvBANK1 00D8                            __size_of_lowBattery 0028  
                       _PIN_MANAGER_Initialize 058F                        __end_of_battery_voltage 061E  
                ??_INT_DefaultInterruptHandler 0070                                       ?___aldiv 0024  
             __end_of_TMR4_SetInterruptHandler 0F3D                                 ?_selectCurrent 0070  
                                     ?___awdiv 0072                                       _DAC1CON0 0118  
                                     _DAC1CON1 0119                   ??_INTERRUPT_InterruptManager 0072  
                          __size_of_setCurrent 009C                          ?_writePersistentState 0070  
                            ??_OPA2_Initialize 0072                               ?_selectFrequency 0070  
                                 _INT_CallBack 0F76                                       _BAUD1CON 019F  
                                     ?_initLED 0070                       __size_of_TMR4_Initialize 0012  
                                     ?_startUp 0070                            __end_of_setLEDColor 07FA  
                                    _microamps 00CA                                 __size_of_putch 0005  
               FLASH_WriteBlock@blockStartAddr 0023                                ___aldiv@divisor 0024  
                            ??_TMR0_Initialize 0074                                ___aldiv@counter 002D  
       EUSART_SetErrorHandler@interruptHandler 0072                                       _LED_blue 00CC  
                                    clear_ram0 0F53                                       _PIE2bits 0092  
                            _eusartRxLastError 00D1                   _HEF_persistent_state_absaddr 0FE0  
                        __size_of_setFrequency 005F            __size_of_INTERRUPT_InterruptManager 0023  
                    __size_of_selectResetValue 0024                     ??_TMR0_SetInterruptHandler 0074  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0074  
                                     _PIR2bits 0012                      FLASH_EraseBlock@startAddr 0072  
                             ?_selectSomething 0070                                 setLEDColor@red 0075  
                                     _TMR0_ISR 0F98              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR4_ISR 0F8C                              ??_PIN_MANAGER_IOC 0070  
                                   _ADCON0bits 009D                                 _DAC_Initialize 0F47  
         __size_of_INT_DefaultInterruptHandler 0050                __size_of_process_remote_command 013B  
                             __size_of_INT_ISR 0004                      ??_TMR4_LoadPeriodRegister 0072  
                            ___lmul@multiplier 0072                                   _setFrequency 036F  
                            ??_TMR2_Initialize 0072                   __end_of_HEF_persistent_state 1000  
                     __end_of_FLASH_WriteBlock 036F                                ??_selectCurrent 0022  
                             ?_battery_voltage 0033                        ??_OSCILLATOR_Initialize 0072  
                          _EUSART_ErrorHandler 00DE                               __size_of___aldiv 0081  
                             __size_of___awdiv 0051                         ??_writePersistentState 0027  
                       __end_of_DAC_Initialize 0F4D                            setFrequency@PR4_val 0036  
                     _TMR4_SetInterruptHandler 0F38                                   ??_lowBattery 0076  
                                  _currentIsOn 00A4                                    _setLEDColor 07E5  
                           setCurrent@DACValue 0043                               __size_of_initLED 0044  
                                     __ptext10 05C2                                       __ptext11 0425  
                                     __ptext20 0F5F                                       __ptext12 0476  
                                     __ptext21 05F1                                       __ptext13 06BC  
                                     __ptext30 0F6E                                       __ptext22 0220  
                                     __ptext14 06E0                                       __ptext31 0FA8  
                                     __ptext23 066E                                       __ptext15 0646  
                                     __ptext40 0F29                                       __ptext32 0F33  
                                     __ptext24 07E5                                       __ptext16 0763  
                                     __ptext41 0F4D                                       __ptext33 058F  
                                     __ptext25 0517                                       __ptext17 0696  
                                     __ptext50 0002                                       __ptext42 0F24  
                                     __ptext34 0F66                                       __ptext26 0703  
                                     __ptext18 0780                                       __ptext51 0F0F  
                                     __ptext43 0F47                                       __ptext35 0F17  
                                     __ptext27 0F1B                                       __ptext19 0F3D  
                                     __ptext52 0F76                                       __ptext36 0F13  
                                     __ptext28 0FB9                                       __ptext53 04C7  
                                     __ptext45 0F8C                                       __ptext37 0F81  
                                     __ptext29 0F38                                       __ptext46 0FCB  
                                     __ptext38 0F2E                                       __ptext47 0F1F  
                                     __ptext39 0724                                       __ptext48 0F98  
                                     __ptext49 0003                               __size_of_startUp 0034  
                                 ??_setCurrent 0039                                 _interfaceState 006F  
                            ??_TMR4_Initialize 0074                                  __size_of_main 006D  
         __end_of_TMR0_DefaultInterruptHandler 0004          __size_of_TMR0_DefaultInterruptHandler 0001  
                 _TMR0_DefaultInterruptHandler 0003                        ?_EUSART_SetErrorHandler 0072  
                       _process_remote_command 0049                             __end_of_lowBattery 0696  
EUSART_SetOverrunErrorHandler@interruptHandler 0072                                       int$flags 007E  
                 __size_of_readPersistentState 001F             __end_of_INTERRUPT_InterruptManager 0027  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0F53  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0F4D  
                              ?_DAC_Initialize 0070                              ?_FLASH_EraseBlock 0072  
                           __end_of_setCurrent 0220                             ??_FLASH_EraseBlock 0074  
                                   _INTCONbits 000B                INT_DefaultInterruptHandler@time 0071  
                                  _PWM3DCLbits 0617                                _OPA1_Initialize 0F13  
                                  _PWM4DCLbits 061A                                     _FVRCONbits 0117  
                         _INT_InterruptHandler 00DC                                    _PWM3CONbits 0619  
                                  _PWM4CONbits 061C                             _EXT_INT_Initialize 0F81  
                      __size_of_WDT_Initialize 0004                                       intlevel1 0000  
                                   _PMCON1bits 0195                        ?_PIN_MANAGER_Initialize 0070  
                   process_remote_command@code 00E6                 __end_of_EUSART_SetErrorHandler 0F29  
                          ?_EXT_INT_Initialize 0070                          __end_of_DAC_SetOutput 0F24  
                              _OPA2_Initialize 0F17                               _selectResetValue 06BC  
                ?_TMR0_DefaultInterruptHandler 0070                                       printf@ap 0020  
EUSART_SetFramingErrorHandler@interruptHandler 0072                       ?_INT_SetInterruptHandler 0072  
                                     startUp@i 0078                                  __pstringtext1 07B9  
                                __pstringtext2 07D0                                  __pstringtext3 07FA  
                                __pstringtext4 080E                                  __pstringtext5 0822  
                                __pstringtext6 0000                           ??_EXT_INT_Initialize 0074  
                                   _OPTION_REG 0095                           _HEF_persistent_state 0FE0  
                             setLEDColor@green 0072                                _TMR0_Initialize 0FA8  
                          setCurrent@microamps 0035                                   ___aldiv@sign 002E  
                     setFrequency@frequency_hz 0033                             EUSART_Write@txData 0072  
               __end_of_PIN_MANAGER_Initialize 05C2                                _PIN_MANAGER_IOC 0002  
                      __size_of_selectDecrease 001D               TMR4_LoadPeriodRegister@periodVal 0072  
