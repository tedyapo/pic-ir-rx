

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jul 24 11:35:01 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1708
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	_HEF_persistent_state_text,global,class=CODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	inittext,global,class=CODE,delta=2
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2
    57                           	psect	text31,local,class=CODE,merge=1,delta=2
    58                           	psect	text32,local,class=CODE,merge=1,delta=2
    59                           	psect	text33,local,class=CODE,merge=1,delta=2
    60                           	psect	text34,local,class=CODE,merge=1,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,delta=2
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	psect	text52,local,class=CODE,merge=1,delta=2
    79                           	psect	text53,local,class=CODE,merge=1,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     
    82                           ; Version 1.45
    83                           ; Generated 16/11/2017 GMT
    84                           ; 
    85                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC16LF1708 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000D                     	;# 
   130  000E                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0095                     	;# 
   150  0096                     	;# 
   151  0097                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009A                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  0111                     	;# 
   165  0112                     	;# 
   166  0113                     	;# 
   167  0114                     	;# 
   168  0115                     	;# 
   169  0116                     	;# 
   170  0117                     	;# 
   171  0118                     	;# 
   172  0119                     	;# 
   173  011C                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  018E                     	;# 
   177  0191                     	;# 
   178  0191                     	;# 
   179  0192                     	;# 
   180  0193                     	;# 
   181  0193                     	;# 
   182  0194                     	;# 
   183  0195                     	;# 
   184  0196                     	;# 
   185  0199                     	;# 
   186  0199                     	;# 
   187  0199                     	;# 
   188  019A                     	;# 
   189  019A                     	;# 
   190  019A                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019C                     	;# 
   197  019C                     	;# 
   198  019C                     	;# 
   199  019D                     	;# 
   200  019D                     	;# 
   201  019D                     	;# 
   202  019E                     	;# 
   203  019E                     	;# 
   204  019E                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  019F                     	;# 
   210  020C                     	;# 
   211  020D                     	;# 
   212  020E                     	;# 
   213  0211                     	;# 
   214  0211                     	;# 
   215  0212                     	;# 
   216  0212                     	;# 
   217  0213                     	;# 
   218  0213                     	;# 
   219  0214                     	;# 
   220  0214                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0216                     	;# 
   226  0216                     	;# 
   227  0217                     	;# 
   228  0217                     	;# 
   229  028C                     	;# 
   230  028D                     	;# 
   231  028E                     	;# 
   232  0291                     	;# 
   233  0291                     	;# 
   234  0292                     	;# 
   235  0293                     	;# 
   236  0293                     	;# 
   237  0298                     	;# 
   238  0298                     	;# 
   239  0299                     	;# 
   240  029A                     	;# 
   241  029A                     	;# 
   242  029E                     	;# 
   243  030C                     	;# 
   244  030D                     	;# 
   245  030E                     	;# 
   246  038C                     	;# 
   247  038D                     	;# 
   248  038E                     	;# 
   249  0391                     	;# 
   250  0392                     	;# 
   251  0393                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0397                     	;# 
   256  0398                     	;# 
   257  0399                     	;# 
   258  0415                     	;# 
   259  0416                     	;# 
   260  0417                     	;# 
   261  041C                     	;# 
   262  041D                     	;# 
   263  041E                     	;# 
   264  0511                     	;# 
   265  0515                     	;# 
   266  0617                     	;# 
   267  0618                     	;# 
   268  0619                     	;# 
   269  0619                     	;# 
   270  061A                     	;# 
   271  061B                     	;# 
   272  061C                     	;# 
   273  061C                     	;# 
   274  0691                     	;# 
   275  0692                     	;# 
   276  0693                     	;# 
   277  0694                     	;# 
   278  0695                     	;# 
   279  0696                     	;# 
   280  0697                     	;# 
   281  0698                     	;# 
   282  0699                     	;# 
   283  069A                     	;# 
   284  069B                     	;# 
   285  069C                     	;# 
   286  069D                     	;# 
   287  069E                     	;# 
   288  069F                     	;# 
   289  0E0F                     	;# 
   290  0E10                     	;# 
   291  0E11                     	;# 
   292  0E12                     	;# 
   293  0E13                     	;# 
   294  0E14                     	;# 
   295  0E15                     	;# 
   296  0E17                     	;# 
   297  0E20                     	;# 
   298  0E21                     	;# 
   299  0E22                     	;# 
   300  0E24                     	;# 
   301  0E25                     	;# 
   302  0E28                     	;# 
   303  0E29                     	;# 
   304  0E2A                     	;# 
   305  0E2B                     	;# 
   306  0E90                     	;# 
   307  0E91                     	;# 
   308  0E92                     	;# 
   309  0E94                     	;# 
   310  0E95                     	;# 
   311  0E9C                     	;# 
   312  0E9D                     	;# 
   313  0E9E                     	;# 
   314  0E9F                     	;# 
   315  0EA0                     	;# 
   316  0EA1                     	;# 
   317  0EA2                     	;# 
   318  0EA3                     	;# 
   319  0EA4                     	;# 
   320  0EA5                     	;# 
   321  0EA6                     	;# 
   322  0EA7                     	;# 
   323  0F0F                     	;# 
   324  0F10                     	;# 
   325  0F11                     	;# 
   326  0F12                     	;# 
   327  0F13                     	;# 
   328  0F14                     	;# 
   329  0F15                     	;# 
   330  0F16                     	;# 
   331  0F17                     	;# 
   332  0F18                     	;# 
   333  0F19                     	;# 
   334  0F1A                     	;# 
   335  0F1B                     	;# 
   336  0F1C                     	;# 
   337  0F1D                     	;# 
   338  0F1E                     	;# 
   339  0F1F                     	;# 
   340  0F20                     	;# 
   341  0F21                     	;# 
   342  0F22                     	;# 
   343  0F23                     	;# 
   344  0F24                     	;# 
   345  0F25                     	;# 
   346  0F26                     	;# 
   347  0F27                     	;# 
   348  0F28                     	;# 
   349  0F29                     	;# 
   350  0F2A                     	;# 
   351  0F2B                     	;# 
   352  0F2C                     	;# 
   353  0F2D                     	;# 
   354  0FE4                     	;# 
   355  0FE5                     	;# 
   356  0FE6                     	;# 
   357  0FE7                     	;# 
   358  0FE8                     	;# 
   359  0FE9                     	;# 
   360  0FEA                     	;# 
   361  0FEB                     	;# 
   362  0FED                     	;# 
   363  0FEE                     	;# 
   364  0FEF                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  0011                     	;# 
   381  0012                     	;# 
   382  0013                     	;# 
   383  0015                     	;# 
   384  0016                     	;# 
   385  0016                     	;# 
   386  0017                     	;# 
   387  0018                     	;# 
   388  0019                     	;# 
   389  001A                     	;# 
   390  001B                     	;# 
   391  001C                     	;# 
   392  008C                     	;# 
   393  008D                     	;# 
   394  008E                     	;# 
   395  0091                     	;# 
   396  0092                     	;# 
   397  0093                     	;# 
   398  0095                     	;# 
   399  0096                     	;# 
   400  0097                     	;# 
   401  0098                     	;# 
   402  0099                     	;# 
   403  009A                     	;# 
   404  009B                     	;# 
   405  009B                     	;# 
   406  009C                     	;# 
   407  009D                     	;# 
   408  009E                     	;# 
   409  009F                     	;# 
   410  010C                     	;# 
   411  010D                     	;# 
   412  010E                     	;# 
   413  0111                     	;# 
   414  0112                     	;# 
   415  0113                     	;# 
   416  0114                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011C                     	;# 
   423  018C                     	;# 
   424  018D                     	;# 
   425  018E                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0199                     	;# 
   435  0199                     	;# 
   436  0199                     	;# 
   437  019A                     	;# 
   438  019A                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019C                     	;# 
   448  019D                     	;# 
   449  019D                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019E                     	;# 
   453  019E                     	;# 
   454  019F                     	;# 
   455  019F                     	;# 
   456  019F                     	;# 
   457  019F                     	;# 
   458  019F                     	;# 
   459  020C                     	;# 
   460  020D                     	;# 
   461  020E                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  028C                     	;# 
   479  028D                     	;# 
   480  028E                     	;# 
   481  0291                     	;# 
   482  0291                     	;# 
   483  0292                     	;# 
   484  0293                     	;# 
   485  0293                     	;# 
   486  0298                     	;# 
   487  0298                     	;# 
   488  0299                     	;# 
   489  029A                     	;# 
   490  029A                     	;# 
   491  029E                     	;# 
   492  030C                     	;# 
   493  030D                     	;# 
   494  030E                     	;# 
   495  038C                     	;# 
   496  038D                     	;# 
   497  038E                     	;# 
   498  0391                     	;# 
   499  0392                     	;# 
   500  0393                     	;# 
   501  0394                     	;# 
   502  0395                     	;# 
   503  0396                     	;# 
   504  0397                     	;# 
   505  0398                     	;# 
   506  0399                     	;# 
   507  0415                     	;# 
   508  0416                     	;# 
   509  0417                     	;# 
   510  041C                     	;# 
   511  041D                     	;# 
   512  041E                     	;# 
   513  0511                     	;# 
   514  0515                     	;# 
   515  0617                     	;# 
   516  0618                     	;# 
   517  0619                     	;# 
   518  0619                     	;# 
   519  061A                     	;# 
   520  061B                     	;# 
   521  061C                     	;# 
   522  061C                     	;# 
   523  0691                     	;# 
   524  0692                     	;# 
   525  0693                     	;# 
   526  0694                     	;# 
   527  0695                     	;# 
   528  0696                     	;# 
   529  0697                     	;# 
   530  0698                     	;# 
   531  0699                     	;# 
   532  069A                     	;# 
   533  069B                     	;# 
   534  069C                     	;# 
   535  069D                     	;# 
   536  069E                     	;# 
   537  069F                     	;# 
   538  0E0F                     	;# 
   539  0E10                     	;# 
   540  0E11                     	;# 
   541  0E12                     	;# 
   542  0E13                     	;# 
   543  0E14                     	;# 
   544  0E15                     	;# 
   545  0E17                     	;# 
   546  0E20                     	;# 
   547  0E21                     	;# 
   548  0E22                     	;# 
   549  0E24                     	;# 
   550  0E25                     	;# 
   551  0E28                     	;# 
   552  0E29                     	;# 
   553  0E2A                     	;# 
   554  0E2B                     	;# 
   555  0E90                     	;# 
   556  0E91                     	;# 
   557  0E92                     	;# 
   558  0E94                     	;# 
   559  0E95                     	;# 
   560  0E9C                     	;# 
   561  0E9D                     	;# 
   562  0E9E                     	;# 
   563  0E9F                     	;# 
   564  0EA0                     	;# 
   565  0EA1                     	;# 
   566  0EA2                     	;# 
   567  0EA3                     	;# 
   568  0EA4                     	;# 
   569  0EA5                     	;# 
   570  0EA6                     	;# 
   571  0EA7                     	;# 
   572  0F0F                     	;# 
   573  0F10                     	;# 
   574  0F11                     	;# 
   575  0F12                     	;# 
   576  0F13                     	;# 
   577  0F14                     	;# 
   578  0F15                     	;# 
   579  0F16                     	;# 
   580  0F17                     	;# 
   581  0F18                     	;# 
   582  0F19                     	;# 
   583  0F1A                     	;# 
   584  0F1B                     	;# 
   585  0F1C                     	;# 
   586  0F1D                     	;# 
   587  0F1E                     	;# 
   588  0F1F                     	;# 
   589  0F20                     	;# 
   590  0F21                     	;# 
   591  0F22                     	;# 
   592  0F23                     	;# 
   593  0F24                     	;# 
   594  0F25                     	;# 
   595  0F26                     	;# 
   596  0F27                     	;# 
   597  0F28                     	;# 
   598  0F29                     	;# 
   599  0F2A                     	;# 
   600  0F2B                     	;# 
   601  0F2C                     	;# 
   602  0F2D                     	;# 
   603  0FE4                     	;# 
   604  0FE5                     	;# 
   605  0FE6                     	;# 
   606  0FE7                     	;# 
   607  0FE8                     	;# 
   608  0FE9                     	;# 
   609  0FEA                     	;# 
   610  0FEB                     	;# 
   611  0FED                     	;# 
   612  0FEE                     	;# 
   613  0FEF                     	;# 
   614  0000                     	;# 
   615  0001                     	;# 
   616  0002                     	;# 
   617  0003                     	;# 
   618  0004                     	;# 
   619  0005                     	;# 
   620  0006                     	;# 
   621  0007                     	;# 
   622  0008                     	;# 
   623  0009                     	;# 
   624  000A                     	;# 
   625  000B                     	;# 
   626  000C                     	;# 
   627  000D                     	;# 
   628  000E                     	;# 
   629  0011                     	;# 
   630  0012                     	;# 
   631  0013                     	;# 
   632  0015                     	;# 
   633  0016                     	;# 
   634  0016                     	;# 
   635  0017                     	;# 
   636  0018                     	;# 
   637  0019                     	;# 
   638  001A                     	;# 
   639  001B                     	;# 
   640  001C                     	;# 
   641  008C                     	;# 
   642  008D                     	;# 
   643  008E                     	;# 
   644  0091                     	;# 
   645  0092                     	;# 
   646  0093                     	;# 
   647  0095                     	;# 
   648  0096                     	;# 
   649  0097                     	;# 
   650  0098                     	;# 
   651  0099                     	;# 
   652  009A                     	;# 
   653  009B                     	;# 
   654  009B                     	;# 
   655  009C                     	;# 
   656  009D                     	;# 
   657  009E                     	;# 
   658  009F                     	;# 
   659  010C                     	;# 
   660  010D                     	;# 
   661  010E                     	;# 
   662  0111                     	;# 
   663  0112                     	;# 
   664  0113                     	;# 
   665  0114                     	;# 
   666  0115                     	;# 
   667  0116                     	;# 
   668  0117                     	;# 
   669  0118                     	;# 
   670  0119                     	;# 
   671  011C                     	;# 
   672  018C                     	;# 
   673  018D                     	;# 
   674  018E                     	;# 
   675  0191                     	;# 
   676  0191                     	;# 
   677  0192                     	;# 
   678  0193                     	;# 
   679  0193                     	;# 
   680  0194                     	;# 
   681  0195                     	;# 
   682  0196                     	;# 
   683  0199                     	;# 
   684  0199                     	;# 
   685  0199                     	;# 
   686  019A                     	;# 
   687  019A                     	;# 
   688  019A                     	;# 
   689  019B                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019B                     	;# 
   693  019B                     	;# 
   694  019C                     	;# 
   695  019C                     	;# 
   696  019C                     	;# 
   697  019D                     	;# 
   698  019D                     	;# 
   699  019D                     	;# 
   700  019E                     	;# 
   701  019E                     	;# 
   702  019E                     	;# 
   703  019F                     	;# 
   704  019F                     	;# 
   705  019F                     	;# 
   706  019F                     	;# 
   707  019F                     	;# 
   708  020C                     	;# 
   709  020D                     	;# 
   710  020E                     	;# 
   711  0211                     	;# 
   712  0211                     	;# 
   713  0212                     	;# 
   714  0212                     	;# 
   715  0213                     	;# 
   716  0213                     	;# 
   717  0214                     	;# 
   718  0214                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0215                     	;# 
   722  0215                     	;# 
   723  0216                     	;# 
   724  0216                     	;# 
   725  0217                     	;# 
   726  0217                     	;# 
   727  028C                     	;# 
   728  028D                     	;# 
   729  028E                     	;# 
   730  0291                     	;# 
   731  0291                     	;# 
   732  0292                     	;# 
   733  0293                     	;# 
   734  0293                     	;# 
   735  0298                     	;# 
   736  0298                     	;# 
   737  0299                     	;# 
   738  029A                     	;# 
   739  029A                     	;# 
   740  029E                     	;# 
   741  030C                     	;# 
   742  030D                     	;# 
   743  030E                     	;# 
   744  038C                     	;# 
   745  038D                     	;# 
   746  038E                     	;# 
   747  0391                     	;# 
   748  0392                     	;# 
   749  0393                     	;# 
   750  0394                     	;# 
   751  0395                     	;# 
   752  0396                     	;# 
   753  0397                     	;# 
   754  0398                     	;# 
   755  0399                     	;# 
   756  0415                     	;# 
   757  0416                     	;# 
   758  0417                     	;# 
   759  041C                     	;# 
   760  041D                     	;# 
   761  041E                     	;# 
   762  0511                     	;# 
   763  0515                     	;# 
   764  0617                     	;# 
   765  0618                     	;# 
   766  0619                     	;# 
   767  0619                     	;# 
   768  061A                     	;# 
   769  061B                     	;# 
   770  061C                     	;# 
   771  061C                     	;# 
   772  0691                     	;# 
   773  0692                     	;# 
   774  0693                     	;# 
   775  0694                     	;# 
   776  0695                     	;# 
   777  0696                     	;# 
   778  0697                     	;# 
   779  0698                     	;# 
   780  0699                     	;# 
   781  069A                     	;# 
   782  069B                     	;# 
   783  069C                     	;# 
   784  069D                     	;# 
   785  069E                     	;# 
   786  069F                     	;# 
   787  0E0F                     	;# 
   788  0E10                     	;# 
   789  0E11                     	;# 
   790  0E12                     	;# 
   791  0E13                     	;# 
   792  0E14                     	;# 
   793  0E15                     	;# 
   794  0E17                     	;# 
   795  0E20                     	;# 
   796  0E21                     	;# 
   797  0E22                     	;# 
   798  0E24                     	;# 
   799  0E25                     	;# 
   800  0E28                     	;# 
   801  0E29                     	;# 
   802  0E2A                     	;# 
   803  0E2B                     	;# 
   804  0E90                     	;# 
   805  0E91                     	;# 
   806  0E92                     	;# 
   807  0E94                     	;# 
   808  0E95                     	;# 
   809  0E9C                     	;# 
   810  0E9D                     	;# 
   811  0E9E                     	;# 
   812  0E9F                     	;# 
   813  0EA0                     	;# 
   814  0EA1                     	;# 
   815  0EA2                     	;# 
   816  0EA3                     	;# 
   817  0EA4                     	;# 
   818  0EA5                     	;# 
   819  0EA6                     	;# 
   820  0EA7                     	;# 
   821  0F0F                     	;# 
   822  0F10                     	;# 
   823  0F11                     	;# 
   824  0F12                     	;# 
   825  0F13                     	;# 
   826  0F14                     	;# 
   827  0F15                     	;# 
   828  0F16                     	;# 
   829  0F17                     	;# 
   830  0F18                     	;# 
   831  0F19                     	;# 
   832  0F1A                     	;# 
   833  0F1B                     	;# 
   834  0F1C                     	;# 
   835  0F1D                     	;# 
   836  0F1E                     	;# 
   837  0F1F                     	;# 
   838  0F20                     	;# 
   839  0F21                     	;# 
   840  0F22                     	;# 
   841  0F23                     	;# 
   842  0F24                     	;# 
   843  0F25                     	;# 
   844  0F26                     	;# 
   845  0F27                     	;# 
   846  0F28                     	;# 
   847  0F29                     	;# 
   848  0F2A                     	;# 
   849  0F2B                     	;# 
   850  0F2C                     	;# 
   851  0F2D                     	;# 
   852  0FE4                     	;# 
   853  0FE5                     	;# 
   854  0FE6                     	;# 
   855  0FE7                     	;# 
   856  0FE8                     	;# 
   857  0FE9                     	;# 
   858  0FEA                     	;# 
   859  0FEB                     	;# 
   860  0FED                     	;# 
   861  0FEE                     	;# 
   862  0FEF                     	;# 
   863  0000                     	;# 
   864  0001                     	;# 
   865  0002                     	;# 
   866  0003                     	;# 
   867  0004                     	;# 
   868  0005                     	;# 
   869  0006                     	;# 
   870  0007                     	;# 
   871  0008                     	;# 
   872  0009                     	;# 
   873  000A                     	;# 
   874  000B                     	;# 
   875  000C                     	;# 
   876  000D                     	;# 
   877  000E                     	;# 
   878  0011                     	;# 
   879  0012                     	;# 
   880  0013                     	;# 
   881  0015                     	;# 
   882  0016                     	;# 
   883  0016                     	;# 
   884  0017                     	;# 
   885  0018                     	;# 
   886  0019                     	;# 
   887  001A                     	;# 
   888  001B                     	;# 
   889  001C                     	;# 
   890  008C                     	;# 
   891  008D                     	;# 
   892  008E                     	;# 
   893  0091                     	;# 
   894  0092                     	;# 
   895  0093                     	;# 
   896  0095                     	;# 
   897  0096                     	;# 
   898  0097                     	;# 
   899  0098                     	;# 
   900  0099                     	;# 
   901  009A                     	;# 
   902  009B                     	;# 
   903  009B                     	;# 
   904  009C                     	;# 
   905  009D                     	;# 
   906  009E                     	;# 
   907  009F                     	;# 
   908  010C                     	;# 
   909  010D                     	;# 
   910  010E                     	;# 
   911  0111                     	;# 
   912  0112                     	;# 
   913  0113                     	;# 
   914  0114                     	;# 
   915  0115                     	;# 
   916  0116                     	;# 
   917  0117                     	;# 
   918  0118                     	;# 
   919  0119                     	;# 
   920  011C                     	;# 
   921  018C                     	;# 
   922  018D                     	;# 
   923  018E                     	;# 
   924  0191                     	;# 
   925  0191                     	;# 
   926  0192                     	;# 
   927  0193                     	;# 
   928  0193                     	;# 
   929  0194                     	;# 
   930  0195                     	;# 
   931  0196                     	;# 
   932  0199                     	;# 
   933  0199                     	;# 
   934  0199                     	;# 
   935  019A                     	;# 
   936  019A                     	;# 
   937  019A                     	;# 
   938  019B                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019B                     	;# 
   942  019B                     	;# 
   943  019C                     	;# 
   944  019C                     	;# 
   945  019C                     	;# 
   946  019D                     	;# 
   947  019D                     	;# 
   948  019D                     	;# 
   949  019E                     	;# 
   950  019E                     	;# 
   951  019E                     	;# 
   952  019F                     	;# 
   953  019F                     	;# 
   954  019F                     	;# 
   955  019F                     	;# 
   956  019F                     	;# 
   957  020C                     	;# 
   958  020D                     	;# 
   959  020E                     	;# 
   960  0211                     	;# 
   961  0211                     	;# 
   962  0212                     	;# 
   963  0212                     	;# 
   964  0213                     	;# 
   965  0213                     	;# 
   966  0214                     	;# 
   967  0214                     	;# 
   968  0215                     	;# 
   969  0215                     	;# 
   970  0215                     	;# 
   971  0215                     	;# 
   972  0216                     	;# 
   973  0216                     	;# 
   974  0217                     	;# 
   975  0217                     	;# 
   976  028C                     	;# 
   977  028D                     	;# 
   978  028E                     	;# 
   979  0291                     	;# 
   980  0291                     	;# 
   981  0292                     	;# 
   982  0293                     	;# 
   983  0293                     	;# 
   984  0298                     	;# 
   985  0298                     	;# 
   986  0299                     	;# 
   987  029A                     	;# 
   988  029A                     	;# 
   989  029E                     	;# 
   990  030C                     	;# 
   991  030D                     	;# 
   992  030E                     	;# 
   993  038C                     	;# 
   994  038D                     	;# 
   995  038E                     	;# 
   996  0391                     	;# 
   997  0392                     	;# 
   998  0393                     	;# 
   999  0394                     	;# 
  1000  0395                     	;# 
  1001  0396                     	;# 
  1002  0397                     	;# 
  1003  0398                     	;# 
  1004  0399                     	;# 
  1005  0415                     	;# 
  1006  0416                     	;# 
  1007  0417                     	;# 
  1008  041C                     	;# 
  1009  041D                     	;# 
  1010  041E                     	;# 
  1011  0511                     	;# 
  1012  0515                     	;# 
  1013  0617                     	;# 
  1014  0618                     	;# 
  1015  0619                     	;# 
  1016  0619                     	;# 
  1017  061A                     	;# 
  1018  061B                     	;# 
  1019  061C                     	;# 
  1020  061C                     	;# 
  1021  0691                     	;# 
  1022  0692                     	;# 
  1023  0693                     	;# 
  1024  0694                     	;# 
  1025  0695                     	;# 
  1026  0696                     	;# 
  1027  0697                     	;# 
  1028  0698                     	;# 
  1029  0699                     	;# 
  1030  069A                     	;# 
  1031  069B                     	;# 
  1032  069C                     	;# 
  1033  069D                     	;# 
  1034  069E                     	;# 
  1035  069F                     	;# 
  1036  0E0F                     	;# 
  1037  0E10                     	;# 
  1038  0E11                     	;# 
  1039  0E12                     	;# 
  1040  0E13                     	;# 
  1041  0E14                     	;# 
  1042  0E15                     	;# 
  1043  0E17                     	;# 
  1044  0E20                     	;# 
  1045  0E21                     	;# 
  1046  0E22                     	;# 
  1047  0E24                     	;# 
  1048  0E25                     	;# 
  1049  0E28                     	;# 
  1050  0E29                     	;# 
  1051  0E2A                     	;# 
  1052  0E2B                     	;# 
  1053  0E90                     	;# 
  1054  0E91                     	;# 
  1055  0E92                     	;# 
  1056  0E94                     	;# 
  1057  0E95                     	;# 
  1058  0E9C                     	;# 
  1059  0E9D                     	;# 
  1060  0E9E                     	;# 
  1061  0E9F                     	;# 
  1062  0EA0                     	;# 
  1063  0EA1                     	;# 
  1064  0EA2                     	;# 
  1065  0EA3                     	;# 
  1066  0EA4                     	;# 
  1067  0EA5                     	;# 
  1068  0EA6                     	;# 
  1069  0EA7                     	;# 
  1070  0F0F                     	;# 
  1071  0F10                     	;# 
  1072  0F11                     	;# 
  1073  0F12                     	;# 
  1074  0F13                     	;# 
  1075  0F14                     	;# 
  1076  0F15                     	;# 
  1077  0F16                     	;# 
  1078  0F17                     	;# 
  1079  0F18                     	;# 
  1080  0F19                     	;# 
  1081  0F1A                     	;# 
  1082  0F1B                     	;# 
  1083  0F1C                     	;# 
  1084  0F1D                     	;# 
  1085  0F1E                     	;# 
  1086  0F1F                     	;# 
  1087  0F20                     	;# 
  1088  0F21                     	;# 
  1089  0F22                     	;# 
  1090  0F23                     	;# 
  1091  0F24                     	;# 
  1092  0F25                     	;# 
  1093  0F26                     	;# 
  1094  0F27                     	;# 
  1095  0F28                     	;# 
  1096  0F29                     	;# 
  1097  0F2A                     	;# 
  1098  0F2B                     	;# 
  1099  0F2C                     	;# 
  1100  0F2D                     	;# 
  1101  0FE4                     	;# 
  1102  0FE5                     	;# 
  1103  0FE6                     	;# 
  1104  0FE7                     	;# 
  1105  0FE8                     	;# 
  1106  0FE9                     	;# 
  1107  0FEA                     	;# 
  1108  0FEB                     	;# 
  1109  0FED                     	;# 
  1110  0FEE                     	;# 
  1111  0FEF                     	;# 
  1112  0000                     	;# 
  1113  0001                     	;# 
  1114  0002                     	;# 
  1115  0003                     	;# 
  1116  0004                     	;# 
  1117  0005                     	;# 
  1118  0006                     	;# 
  1119  0007                     	;# 
  1120  0008                     	;# 
  1121  0009                     	;# 
  1122  000A                     	;# 
  1123  000B                     	;# 
  1124  000C                     	;# 
  1125  000D                     	;# 
  1126  000E                     	;# 
  1127  0011                     	;# 
  1128  0012                     	;# 
  1129  0013                     	;# 
  1130  0015                     	;# 
  1131  0016                     	;# 
  1132  0016                     	;# 
  1133  0017                     	;# 
  1134  0018                     	;# 
  1135  0019                     	;# 
  1136  001A                     	;# 
  1137  001B                     	;# 
  1138  001C                     	;# 
  1139  008C                     	;# 
  1140  008D                     	;# 
  1141  008E                     	;# 
  1142  0091                     	;# 
  1143  0092                     	;# 
  1144  0093                     	;# 
  1145  0095                     	;# 
  1146  0096                     	;# 
  1147  0097                     	;# 
  1148  0098                     	;# 
  1149  0099                     	;# 
  1150  009A                     	;# 
  1151  009B                     	;# 
  1152  009B                     	;# 
  1153  009C                     	;# 
  1154  009D                     	;# 
  1155  009E                     	;# 
  1156  009F                     	;# 
  1157  010C                     	;# 
  1158  010D                     	;# 
  1159  010E                     	;# 
  1160  0111                     	;# 
  1161  0112                     	;# 
  1162  0113                     	;# 
  1163  0114                     	;# 
  1164  0115                     	;# 
  1165  0116                     	;# 
  1166  0117                     	;# 
  1167  0118                     	;# 
  1168  0119                     	;# 
  1169  011C                     	;# 
  1170  018C                     	;# 
  1171  018D                     	;# 
  1172  018E                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0194                     	;# 
  1179  0195                     	;# 
  1180  0196                     	;# 
  1181  0199                     	;# 
  1182  0199                     	;# 
  1183  0199                     	;# 
  1184  019A                     	;# 
  1185  019A                     	;# 
  1186  019A                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019B                     	;# 
  1191  019B                     	;# 
  1192  019C                     	;# 
  1193  019C                     	;# 
  1194  019C                     	;# 
  1195  019D                     	;# 
  1196  019D                     	;# 
  1197  019D                     	;# 
  1198  019E                     	;# 
  1199  019E                     	;# 
  1200  019E                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  019F                     	;# 
  1204  019F                     	;# 
  1205  019F                     	;# 
  1206  020C                     	;# 
  1207  020D                     	;# 
  1208  020E                     	;# 
  1209  0211                     	;# 
  1210  0211                     	;# 
  1211  0212                     	;# 
  1212  0212                     	;# 
  1213  0213                     	;# 
  1214  0213                     	;# 
  1215  0214                     	;# 
  1216  0214                     	;# 
  1217  0215                     	;# 
  1218  0215                     	;# 
  1219  0215                     	;# 
  1220  0215                     	;# 
  1221  0216                     	;# 
  1222  0216                     	;# 
  1223  0217                     	;# 
  1224  0217                     	;# 
  1225  028C                     	;# 
  1226  028D                     	;# 
  1227  028E                     	;# 
  1228  0291                     	;# 
  1229  0291                     	;# 
  1230  0292                     	;# 
  1231  0293                     	;# 
  1232  0293                     	;# 
  1233  0298                     	;# 
  1234  0298                     	;# 
  1235  0299                     	;# 
  1236  029A                     	;# 
  1237  029A                     	;# 
  1238  029E                     	;# 
  1239  030C                     	;# 
  1240  030D                     	;# 
  1241  030E                     	;# 
  1242  038C                     	;# 
  1243  038D                     	;# 
  1244  038E                     	;# 
  1245  0391                     	;# 
  1246  0392                     	;# 
  1247  0393                     	;# 
  1248  0394                     	;# 
  1249  0395                     	;# 
  1250  0396                     	;# 
  1251  0397                     	;# 
  1252  0398                     	;# 
  1253  0399                     	;# 
  1254  0415                     	;# 
  1255  0416                     	;# 
  1256  0417                     	;# 
  1257  041C                     	;# 
  1258  041D                     	;# 
  1259  041E                     	;# 
  1260  0511                     	;# 
  1261  0515                     	;# 
  1262  0617                     	;# 
  1263  0618                     	;# 
  1264  0619                     	;# 
  1265  0619                     	;# 
  1266  061A                     	;# 
  1267  061B                     	;# 
  1268  061C                     	;# 
  1269  061C                     	;# 
  1270  0691                     	;# 
  1271  0692                     	;# 
  1272  0693                     	;# 
  1273  0694                     	;# 
  1274  0695                     	;# 
  1275  0696                     	;# 
  1276  0697                     	;# 
  1277  0698                     	;# 
  1278  0699                     	;# 
  1279  069A                     	;# 
  1280  069B                     	;# 
  1281  069C                     	;# 
  1282  069D                     	;# 
  1283  069E                     	;# 
  1284  069F                     	;# 
  1285  0E0F                     	;# 
  1286  0E10                     	;# 
  1287  0E11                     	;# 
  1288  0E12                     	;# 
  1289  0E13                     	;# 
  1290  0E14                     	;# 
  1291  0E15                     	;# 
  1292  0E17                     	;# 
  1293  0E20                     	;# 
  1294  0E21                     	;# 
  1295  0E22                     	;# 
  1296  0E24                     	;# 
  1297  0E25                     	;# 
  1298  0E28                     	;# 
  1299  0E29                     	;# 
  1300  0E2A                     	;# 
  1301  0E2B                     	;# 
  1302  0E90                     	;# 
  1303  0E91                     	;# 
  1304  0E92                     	;# 
  1305  0E94                     	;# 
  1306  0E95                     	;# 
  1307  0E9C                     	;# 
  1308  0E9D                     	;# 
  1309  0E9E                     	;# 
  1310  0E9F                     	;# 
  1311  0EA0                     	;# 
  1312  0EA1                     	;# 
  1313  0EA2                     	;# 
  1314  0EA3                     	;# 
  1315  0EA4                     	;# 
  1316  0EA5                     	;# 
  1317  0EA6                     	;# 
  1318  0EA7                     	;# 
  1319  0F0F                     	;# 
  1320  0F10                     	;# 
  1321  0F11                     	;# 
  1322  0F12                     	;# 
  1323  0F13                     	;# 
  1324  0F14                     	;# 
  1325  0F15                     	;# 
  1326  0F16                     	;# 
  1327  0F17                     	;# 
  1328  0F18                     	;# 
  1329  0F19                     	;# 
  1330  0F1A                     	;# 
  1331  0F1B                     	;# 
  1332  0F1C                     	;# 
  1333  0F1D                     	;# 
  1334  0F1E                     	;# 
  1335  0F1F                     	;# 
  1336  0F20                     	;# 
  1337  0F21                     	;# 
  1338  0F22                     	;# 
  1339  0F23                     	;# 
  1340  0F24                     	;# 
  1341  0F25                     	;# 
  1342  0F26                     	;# 
  1343  0F27                     	;# 
  1344  0F28                     	;# 
  1345  0F29                     	;# 
  1346  0F2A                     	;# 
  1347  0F2B                     	;# 
  1348  0F2C                     	;# 
  1349  0F2D                     	;# 
  1350  0FE4                     	;# 
  1351  0FE5                     	;# 
  1352  0FE6                     	;# 
  1353  0FE7                     	;# 
  1354  0FE8                     	;# 
  1355  0FE9                     	;# 
  1356  0FEA                     	;# 
  1357  0FEB                     	;# 
  1358  0FED                     	;# 
  1359  0FEE                     	;# 
  1360  0FEF                     	;# 
  1361  0000                     	;# 
  1362  0001                     	;# 
  1363  0002                     	;# 
  1364  0003                     	;# 
  1365  0004                     	;# 
  1366  0005                     	;# 
  1367  0006                     	;# 
  1368  0007                     	;# 
  1369  0008                     	;# 
  1370  0009                     	;# 
  1371  000A                     	;# 
  1372  000B                     	;# 
  1373  000C                     	;# 
  1374  000D                     	;# 
  1375  000E                     	;# 
  1376  0011                     	;# 
  1377  0012                     	;# 
  1378  0013                     	;# 
  1379  0015                     	;# 
  1380  0016                     	;# 
  1381  0016                     	;# 
  1382  0017                     	;# 
  1383  0018                     	;# 
  1384  0019                     	;# 
  1385  001A                     	;# 
  1386  001B                     	;# 
  1387  001C                     	;# 
  1388  008C                     	;# 
  1389  008D                     	;# 
  1390  008E                     	;# 
  1391  0091                     	;# 
  1392  0092                     	;# 
  1393  0093                     	;# 
  1394  0095                     	;# 
  1395  0096                     	;# 
  1396  0097                     	;# 
  1397  0098                     	;# 
  1398  0099                     	;# 
  1399  009A                     	;# 
  1400  009B                     	;# 
  1401  009B                     	;# 
  1402  009C                     	;# 
  1403  009D                     	;# 
  1404  009E                     	;# 
  1405  009F                     	;# 
  1406  010C                     	;# 
  1407  010D                     	;# 
  1408  010E                     	;# 
  1409  0111                     	;# 
  1410  0112                     	;# 
  1411  0113                     	;# 
  1412  0114                     	;# 
  1413  0115                     	;# 
  1414  0116                     	;# 
  1415  0117                     	;# 
  1416  0118                     	;# 
  1417  0119                     	;# 
  1418  011C                     	;# 
  1419  018C                     	;# 
  1420  018D                     	;# 
  1421  018E                     	;# 
  1422  0191                     	;# 
  1423  0191                     	;# 
  1424  0192                     	;# 
  1425  0193                     	;# 
  1426  0193                     	;# 
  1427  0194                     	;# 
  1428  0195                     	;# 
  1429  0196                     	;# 
  1430  0199                     	;# 
  1431  0199                     	;# 
  1432  0199                     	;# 
  1433  019A                     	;# 
  1434  019A                     	;# 
  1435  019A                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019C                     	;# 
  1442  019C                     	;# 
  1443  019C                     	;# 
  1444  019D                     	;# 
  1445  019D                     	;# 
  1446  019D                     	;# 
  1447  019E                     	;# 
  1448  019E                     	;# 
  1449  019E                     	;# 
  1450  019F                     	;# 
  1451  019F                     	;# 
  1452  019F                     	;# 
  1453  019F                     	;# 
  1454  019F                     	;# 
  1455  020C                     	;# 
  1456  020D                     	;# 
  1457  020E                     	;# 
  1458  0211                     	;# 
  1459  0211                     	;# 
  1460  0212                     	;# 
  1461  0212                     	;# 
  1462  0213                     	;# 
  1463  0213                     	;# 
  1464  0214                     	;# 
  1465  0214                     	;# 
  1466  0215                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0216                     	;# 
  1471  0216                     	;# 
  1472  0217                     	;# 
  1473  0217                     	;# 
  1474  028C                     	;# 
  1475  028D                     	;# 
  1476  028E                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  029A                     	;# 
  1487  029E                     	;# 
  1488  030C                     	;# 
  1489  030D                     	;# 
  1490  030E                     	;# 
  1491  038C                     	;# 
  1492  038D                     	;# 
  1493  038E                     	;# 
  1494  0391                     	;# 
  1495  0392                     	;# 
  1496  0393                     	;# 
  1497  0394                     	;# 
  1498  0395                     	;# 
  1499  0396                     	;# 
  1500  0397                     	;# 
  1501  0398                     	;# 
  1502  0399                     	;# 
  1503  0415                     	;# 
  1504  0416                     	;# 
  1505  0417                     	;# 
  1506  041C                     	;# 
  1507  041D                     	;# 
  1508  041E                     	;# 
  1509  0511                     	;# 
  1510  0515                     	;# 
  1511  0617                     	;# 
  1512  0618                     	;# 
  1513  0619                     	;# 
  1514  0619                     	;# 
  1515  061A                     	;# 
  1516  061B                     	;# 
  1517  061C                     	;# 
  1518  061C                     	;# 
  1519  0691                     	;# 
  1520  0692                     	;# 
  1521  0693                     	;# 
  1522  0694                     	;# 
  1523  0695                     	;# 
  1524  0696                     	;# 
  1525  0697                     	;# 
  1526  0698                     	;# 
  1527  0699                     	;# 
  1528  069A                     	;# 
  1529  069B                     	;# 
  1530  069C                     	;# 
  1531  069D                     	;# 
  1532  069E                     	;# 
  1533  069F                     	;# 
  1534  0E0F                     	;# 
  1535  0E10                     	;# 
  1536  0E11                     	;# 
  1537  0E12                     	;# 
  1538  0E13                     	;# 
  1539  0E14                     	;# 
  1540  0E15                     	;# 
  1541  0E17                     	;# 
  1542  0E20                     	;# 
  1543  0E21                     	;# 
  1544  0E22                     	;# 
  1545  0E24                     	;# 
  1546  0E25                     	;# 
  1547  0E28                     	;# 
  1548  0E29                     	;# 
  1549  0E2A                     	;# 
  1550  0E2B                     	;# 
  1551  0E90                     	;# 
  1552  0E91                     	;# 
  1553  0E92                     	;# 
  1554  0E94                     	;# 
  1555  0E95                     	;# 
  1556  0E9C                     	;# 
  1557  0E9D                     	;# 
  1558  0E9E                     	;# 
  1559  0E9F                     	;# 
  1560  0EA0                     	;# 
  1561  0EA1                     	;# 
  1562  0EA2                     	;# 
  1563  0EA3                     	;# 
  1564  0EA4                     	;# 
  1565  0EA5                     	;# 
  1566  0EA6                     	;# 
  1567  0EA7                     	;# 
  1568  0F0F                     	;# 
  1569  0F10                     	;# 
  1570  0F11                     	;# 
  1571  0F12                     	;# 
  1572  0F13                     	;# 
  1573  0F14                     	;# 
  1574  0F15                     	;# 
  1575  0F16                     	;# 
  1576  0F17                     	;# 
  1577  0F18                     	;# 
  1578  0F19                     	;# 
  1579  0F1A                     	;# 
  1580  0F1B                     	;# 
  1581  0F1C                     	;# 
  1582  0F1D                     	;# 
  1583  0F1E                     	;# 
  1584  0F1F                     	;# 
  1585  0F20                     	;# 
  1586  0F21                     	;# 
  1587  0F22                     	;# 
  1588  0F23                     	;# 
  1589  0F24                     	;# 
  1590  0F25                     	;# 
  1591  0F26                     	;# 
  1592  0F27                     	;# 
  1593  0F28                     	;# 
  1594  0F29                     	;# 
  1595  0F2A                     	;# 
  1596  0F2B                     	;# 
  1597  0F2C                     	;# 
  1598  0F2D                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0013                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0093                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0098                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  009F                     	;# 
  1655  010C                     	;# 
  1656  010D                     	;# 
  1657  010E                     	;# 
  1658  0111                     	;# 
  1659  0112                     	;# 
  1660  0113                     	;# 
  1661  0114                     	;# 
  1662  0115                     	;# 
  1663  0116                     	;# 
  1664  0117                     	;# 
  1665  0118                     	;# 
  1666  0119                     	;# 
  1667  011C                     	;# 
  1668  018C                     	;# 
  1669  018D                     	;# 
  1670  018E                     	;# 
  1671  0191                     	;# 
  1672  0191                     	;# 
  1673  0192                     	;# 
  1674  0193                     	;# 
  1675  0193                     	;# 
  1676  0194                     	;# 
  1677  0195                     	;# 
  1678  0196                     	;# 
  1679  0199                     	;# 
  1680  0199                     	;# 
  1681  0199                     	;# 
  1682  019A                     	;# 
  1683  019A                     	;# 
  1684  019A                     	;# 
  1685  019B                     	;# 
  1686  019B                     	;# 
  1687  019B                     	;# 
  1688  019B                     	;# 
  1689  019B                     	;# 
  1690  019C                     	;# 
  1691  019C                     	;# 
  1692  019C                     	;# 
  1693  019D                     	;# 
  1694  019D                     	;# 
  1695  019D                     	;# 
  1696  019E                     	;# 
  1697  019E                     	;# 
  1698  019E                     	;# 
  1699  019F                     	;# 
  1700  019F                     	;# 
  1701  019F                     	;# 
  1702  019F                     	;# 
  1703  019F                     	;# 
  1704  020C                     	;# 
  1705  020D                     	;# 
  1706  020E                     	;# 
  1707  0211                     	;# 
  1708  0211                     	;# 
  1709  0212                     	;# 
  1710  0212                     	;# 
  1711  0213                     	;# 
  1712  0213                     	;# 
  1713  0214                     	;# 
  1714  0214                     	;# 
  1715  0215                     	;# 
  1716  0215                     	;# 
  1717  0215                     	;# 
  1718  0215                     	;# 
  1719  0216                     	;# 
  1720  0216                     	;# 
  1721  0217                     	;# 
  1722  0217                     	;# 
  1723  028C                     	;# 
  1724  028D                     	;# 
  1725  028E                     	;# 
  1726  0291                     	;# 
  1727  0291                     	;# 
  1728  0292                     	;# 
  1729  0293                     	;# 
  1730  0293                     	;# 
  1731  0298                     	;# 
  1732  0298                     	;# 
  1733  0299                     	;# 
  1734  029A                     	;# 
  1735  029A                     	;# 
  1736  029E                     	;# 
  1737  030C                     	;# 
  1738  030D                     	;# 
  1739  030E                     	;# 
  1740  038C                     	;# 
  1741  038D                     	;# 
  1742  038E                     	;# 
  1743  0391                     	;# 
  1744  0392                     	;# 
  1745  0393                     	;# 
  1746  0394                     	;# 
  1747  0395                     	;# 
  1748  0396                     	;# 
  1749  0397                     	;# 
  1750  0398                     	;# 
  1751  0399                     	;# 
  1752  0415                     	;# 
  1753  0416                     	;# 
  1754  0417                     	;# 
  1755  041C                     	;# 
  1756  041D                     	;# 
  1757  041E                     	;# 
  1758  0511                     	;# 
  1759  0515                     	;# 
  1760  0617                     	;# 
  1761  0618                     	;# 
  1762  0619                     	;# 
  1763  0619                     	;# 
  1764  061A                     	;# 
  1765  061B                     	;# 
  1766  061C                     	;# 
  1767  061C                     	;# 
  1768  0691                     	;# 
  1769  0692                     	;# 
  1770  0693                     	;# 
  1771  0694                     	;# 
  1772  0695                     	;# 
  1773  0696                     	;# 
  1774  0697                     	;# 
  1775  0698                     	;# 
  1776  0699                     	;# 
  1777  069A                     	;# 
  1778  069B                     	;# 
  1779  069C                     	;# 
  1780  069D                     	;# 
  1781  069E                     	;# 
  1782  069F                     	;# 
  1783  0E0F                     	;# 
  1784  0E10                     	;# 
  1785  0E11                     	;# 
  1786  0E12                     	;# 
  1787  0E13                     	;# 
  1788  0E14                     	;# 
  1789  0E15                     	;# 
  1790  0E17                     	;# 
  1791  0E20                     	;# 
  1792  0E21                     	;# 
  1793  0E22                     	;# 
  1794  0E24                     	;# 
  1795  0E25                     	;# 
  1796  0E28                     	;# 
  1797  0E29                     	;# 
  1798  0E2A                     	;# 
  1799  0E2B                     	;# 
  1800  0E90                     	;# 
  1801  0E91                     	;# 
  1802  0E92                     	;# 
  1803  0E94                     	;# 
  1804  0E95                     	;# 
  1805  0E9C                     	;# 
  1806  0E9D                     	;# 
  1807  0E9E                     	;# 
  1808  0E9F                     	;# 
  1809  0EA0                     	;# 
  1810  0EA1                     	;# 
  1811  0EA2                     	;# 
  1812  0EA3                     	;# 
  1813  0EA4                     	;# 
  1814  0EA5                     	;# 
  1815  0EA6                     	;# 
  1816  0EA7                     	;# 
  1817  0F0F                     	;# 
  1818  0F10                     	;# 
  1819  0F11                     	;# 
  1820  0F12                     	;# 
  1821  0F13                     	;# 
  1822  0F14                     	;# 
  1823  0F15                     	;# 
  1824  0F16                     	;# 
  1825  0F17                     	;# 
  1826  0F18                     	;# 
  1827  0F19                     	;# 
  1828  0F1A                     	;# 
  1829  0F1B                     	;# 
  1830  0F1C                     	;# 
  1831  0F1D                     	;# 
  1832  0F1E                     	;# 
  1833  0F1F                     	;# 
  1834  0F20                     	;# 
  1835  0F21                     	;# 
  1836  0F22                     	;# 
  1837  0F23                     	;# 
  1838  0F24                     	;# 
  1839  0F25                     	;# 
  1840  0F26                     	;# 
  1841  0F27                     	;# 
  1842  0F28                     	;# 
  1843  0F29                     	;# 
  1844  0F2A                     	;# 
  1845  0F2B                     	;# 
  1846  0F2C                     	;# 
  1847  0F2D                     	;# 
  1848  0FE4                     	;# 
  1849  0FE5                     	;# 
  1850  0FE6                     	;# 
  1851  0FE7                     	;# 
  1852  0FE8                     	;# 
  1853  0FE9                     	;# 
  1854  0FEA                     	;# 
  1855  0FEB                     	;# 
  1856  0FED                     	;# 
  1857  0FEE                     	;# 
  1858  0FEF                     	;# 
  1859  0000                     	;# 
  1860  0001                     	;# 
  1861  0002                     	;# 
  1862  0003                     	;# 
  1863  0004                     	;# 
  1864  0005                     	;# 
  1865  0006                     	;# 
  1866  0007                     	;# 
  1867  0008                     	;# 
  1868  0009                     	;# 
  1869  000A                     	;# 
  1870  000B                     	;# 
  1871  000C                     	;# 
  1872  000D                     	;# 
  1873  000E                     	;# 
  1874  0011                     	;# 
  1875  0012                     	;# 
  1876  0013                     	;# 
  1877  0015                     	;# 
  1878  0016                     	;# 
  1879  0016                     	;# 
  1880  0017                     	;# 
  1881  0018                     	;# 
  1882  0019                     	;# 
  1883  001A                     	;# 
  1884  001B                     	;# 
  1885  001C                     	;# 
  1886  008C                     	;# 
  1887  008D                     	;# 
  1888  008E                     	;# 
  1889  0091                     	;# 
  1890  0092                     	;# 
  1891  0093                     	;# 
  1892  0095                     	;# 
  1893  0096                     	;# 
  1894  0097                     	;# 
  1895  0098                     	;# 
  1896  0099                     	;# 
  1897  009A                     	;# 
  1898  009B                     	;# 
  1899  009B                     	;# 
  1900  009C                     	;# 
  1901  009D                     	;# 
  1902  009E                     	;# 
  1903  009F                     	;# 
  1904  010C                     	;# 
  1905  010D                     	;# 
  1906  010E                     	;# 
  1907  0111                     	;# 
  1908  0112                     	;# 
  1909  0113                     	;# 
  1910  0114                     	;# 
  1911  0115                     	;# 
  1912  0116                     	;# 
  1913  0117                     	;# 
  1914  0118                     	;# 
  1915  0119                     	;# 
  1916  011C                     	;# 
  1917  018C                     	;# 
  1918  018D                     	;# 
  1919  018E                     	;# 
  1920  0191                     	;# 
  1921  0191                     	;# 
  1922  0192                     	;# 
  1923  0193                     	;# 
  1924  0193                     	;# 
  1925  0194                     	;# 
  1926  0195                     	;# 
  1927  0196                     	;# 
  1928  0199                     	;# 
  1929  0199                     	;# 
  1930  0199                     	;# 
  1931  019A                     	;# 
  1932  019A                     	;# 
  1933  019A                     	;# 
  1934  019B                     	;# 
  1935  019B                     	;# 
  1936  019B                     	;# 
  1937  019B                     	;# 
  1938  019B                     	;# 
  1939  019C                     	;# 
  1940  019C                     	;# 
  1941  019C                     	;# 
  1942  019D                     	;# 
  1943  019D                     	;# 
  1944  019D                     	;# 
  1945  019E                     	;# 
  1946  019E                     	;# 
  1947  019E                     	;# 
  1948  019F                     	;# 
  1949  019F                     	;# 
  1950  019F                     	;# 
  1951  019F                     	;# 
  1952  019F                     	;# 
  1953  020C                     	;# 
  1954  020D                     	;# 
  1955  020E                     	;# 
  1956  0211                     	;# 
  1957  0211                     	;# 
  1958  0212                     	;# 
  1959  0212                     	;# 
  1960  0213                     	;# 
  1961  0213                     	;# 
  1962  0214                     	;# 
  1963  0214                     	;# 
  1964  0215                     	;# 
  1965  0215                     	;# 
  1966  0215                     	;# 
  1967  0215                     	;# 
  1968  0216                     	;# 
  1969  0216                     	;# 
  1970  0217                     	;# 
  1971  0217                     	;# 
  1972  028C                     	;# 
  1973  028D                     	;# 
  1974  028E                     	;# 
  1975  0291                     	;# 
  1976  0291                     	;# 
  1977  0292                     	;# 
  1978  0293                     	;# 
  1979  0293                     	;# 
  1980  0298                     	;# 
  1981  0298                     	;# 
  1982  0299                     	;# 
  1983  029A                     	;# 
  1984  029A                     	;# 
  1985  029E                     	;# 
  1986  030C                     	;# 
  1987  030D                     	;# 
  1988  030E                     	;# 
  1989  038C                     	;# 
  1990  038D                     	;# 
  1991  038E                     	;# 
  1992  0391                     	;# 
  1993  0392                     	;# 
  1994  0393                     	;# 
  1995  0394                     	;# 
  1996  0395                     	;# 
  1997  0396                     	;# 
  1998  0397                     	;# 
  1999  0398                     	;# 
  2000  0399                     	;# 
  2001  0415                     	;# 
  2002  0416                     	;# 
  2003  0417                     	;# 
  2004  041C                     	;# 
  2005  041D                     	;# 
  2006  041E                     	;# 
  2007  0511                     	;# 
  2008  0515                     	;# 
  2009  0617                     	;# 
  2010  0618                     	;# 
  2011  0619                     	;# 
  2012  0619                     	;# 
  2013  061A                     	;# 
  2014  061B                     	;# 
  2015  061C                     	;# 
  2016  061C                     	;# 
  2017  0691                     	;# 
  2018  0692                     	;# 
  2019  0693                     	;# 
  2020  0694                     	;# 
  2021  0695                     	;# 
  2022  0696                     	;# 
  2023  0697                     	;# 
  2024  0698                     	;# 
  2025  0699                     	;# 
  2026  069A                     	;# 
  2027  069B                     	;# 
  2028  069C                     	;# 
  2029  069D                     	;# 
  2030  069E                     	;# 
  2031  069F                     	;# 
  2032  0E0F                     	;# 
  2033  0E10                     	;# 
  2034  0E11                     	;# 
  2035  0E12                     	;# 
  2036  0E13                     	;# 
  2037  0E14                     	;# 
  2038  0E15                     	;# 
  2039  0E17                     	;# 
  2040  0E20                     	;# 
  2041  0E21                     	;# 
  2042  0E22                     	;# 
  2043  0E24                     	;# 
  2044  0E25                     	;# 
  2045  0E28                     	;# 
  2046  0E29                     	;# 
  2047  0E2A                     	;# 
  2048  0E2B                     	;# 
  2049  0E90                     	;# 
  2050  0E91                     	;# 
  2051  0E92                     	;# 
  2052  0E94                     	;# 
  2053  0E95                     	;# 
  2054  0E9C                     	;# 
  2055  0E9D                     	;# 
  2056  0E9E                     	;# 
  2057  0E9F                     	;# 
  2058  0EA0                     	;# 
  2059  0EA1                     	;# 
  2060  0EA2                     	;# 
  2061  0EA3                     	;# 
  2062  0EA4                     	;# 
  2063  0EA5                     	;# 
  2064  0EA6                     	;# 
  2065  0EA7                     	;# 
  2066  0F0F                     	;# 
  2067  0F10                     	;# 
  2068  0F11                     	;# 
  2069  0F12                     	;# 
  2070  0F13                     	;# 
  2071  0F14                     	;# 
  2072  0F15                     	;# 
  2073  0F16                     	;# 
  2074  0F17                     	;# 
  2075  0F18                     	;# 
  2076  0F19                     	;# 
  2077  0F1A                     	;# 
  2078  0F1B                     	;# 
  2079  0F1C                     	;# 
  2080  0F1D                     	;# 
  2081  0F1E                     	;# 
  2082  0F1F                     	;# 
  2083  0F20                     	;# 
  2084  0F21                     	;# 
  2085  0F22                     	;# 
  2086  0F23                     	;# 
  2087  0F24                     	;# 
  2088  0F25                     	;# 
  2089  0F26                     	;# 
  2090  0F27                     	;# 
  2091  0F28                     	;# 
  2092  0F29                     	;# 
  2093  0F2A                     	;# 
  2094  0F2B                     	;# 
  2095  0F2C                     	;# 
  2096  0F2D                     	;# 
  2097  0FE4                     	;# 
  2098  0FE5                     	;# 
  2099  0FE6                     	;# 
  2100  0FE7                     	;# 
  2101  0FE8                     	;# 
  2102  0FE9                     	;# 
  2103  0FEA                     	;# 
  2104  0FEB                     	;# 
  2105  0FED                     	;# 
  2106  0FEE                     	;# 
  2107  0FEF                     	;# 
  2108  0000                     	;# 
  2109  0001                     	;# 
  2110  0002                     	;# 
  2111  0003                     	;# 
  2112  0004                     	;# 
  2113  0005                     	;# 
  2114  0006                     	;# 
  2115  0007                     	;# 
  2116  0008                     	;# 
  2117  0009                     	;# 
  2118  000A                     	;# 
  2119  000B                     	;# 
  2120  000C                     	;# 
  2121  000D                     	;# 
  2122  000E                     	;# 
  2123  0011                     	;# 
  2124  0012                     	;# 
  2125  0013                     	;# 
  2126  0015                     	;# 
  2127  0016                     	;# 
  2128  0016                     	;# 
  2129  0017                     	;# 
  2130  0018                     	;# 
  2131  0019                     	;# 
  2132  001A                     	;# 
  2133  001B                     	;# 
  2134  001C                     	;# 
  2135  008C                     	;# 
  2136  008D                     	;# 
  2137  008E                     	;# 
  2138  0091                     	;# 
  2139  0092                     	;# 
  2140  0093                     	;# 
  2141  0095                     	;# 
  2142  0096                     	;# 
  2143  0097                     	;# 
  2144  0098                     	;# 
  2145  0099                     	;# 
  2146  009A                     	;# 
  2147  009B                     	;# 
  2148  009B                     	;# 
  2149  009C                     	;# 
  2150  009D                     	;# 
  2151  009E                     	;# 
  2152  009F                     	;# 
  2153  010C                     	;# 
  2154  010D                     	;# 
  2155  010E                     	;# 
  2156  0111                     	;# 
  2157  0112                     	;# 
  2158  0113                     	;# 
  2159  0114                     	;# 
  2160  0115                     	;# 
  2161  0116                     	;# 
  2162  0117                     	;# 
  2163  0118                     	;# 
  2164  0119                     	;# 
  2165  011C                     	;# 
  2166  018C                     	;# 
  2167  018D                     	;# 
  2168  018E                     	;# 
  2169  0191                     	;# 
  2170  0191                     	;# 
  2171  0192                     	;# 
  2172  0193                     	;# 
  2173  0193                     	;# 
  2174  0194                     	;# 
  2175  0195                     	;# 
  2176  0196                     	;# 
  2177  0199                     	;# 
  2178  0199                     	;# 
  2179  0199                     	;# 
  2180  019A                     	;# 
  2181  019A                     	;# 
  2182  019A                     	;# 
  2183  019B                     	;# 
  2184  019B                     	;# 
  2185  019B                     	;# 
  2186  019B                     	;# 
  2187  019B                     	;# 
  2188  019C                     	;# 
  2189  019C                     	;# 
  2190  019C                     	;# 
  2191  019D                     	;# 
  2192  019D                     	;# 
  2193  019D                     	;# 
  2194  019E                     	;# 
  2195  019E                     	;# 
  2196  019E                     	;# 
  2197  019F                     	;# 
  2198  019F                     	;# 
  2199  019F                     	;# 
  2200  019F                     	;# 
  2201  019F                     	;# 
  2202  020C                     	;# 
  2203  020D                     	;# 
  2204  020E                     	;# 
  2205  0211                     	;# 
  2206  0211                     	;# 
  2207  0212                     	;# 
  2208  0212                     	;# 
  2209  0213                     	;# 
  2210  0213                     	;# 
  2211  0214                     	;# 
  2212  0214                     	;# 
  2213  0215                     	;# 
  2214  0215                     	;# 
  2215  0215                     	;# 
  2216  0215                     	;# 
  2217  0216                     	;# 
  2218  0216                     	;# 
  2219  0217                     	;# 
  2220  0217                     	;# 
  2221  028C                     	;# 
  2222  028D                     	;# 
  2223  028E                     	;# 
  2224  0291                     	;# 
  2225  0291                     	;# 
  2226  0292                     	;# 
  2227  0293                     	;# 
  2228  0293                     	;# 
  2229  0298                     	;# 
  2230  0298                     	;# 
  2231  0299                     	;# 
  2232  029A                     	;# 
  2233  029A                     	;# 
  2234  029E                     	;# 
  2235  030C                     	;# 
  2236  030D                     	;# 
  2237  030E                     	;# 
  2238  038C                     	;# 
  2239  038D                     	;# 
  2240  038E                     	;# 
  2241  0391                     	;# 
  2242  0392                     	;# 
  2243  0393                     	;# 
  2244  0394                     	;# 
  2245  0395                     	;# 
  2246  0396                     	;# 
  2247  0397                     	;# 
  2248  0398                     	;# 
  2249  0399                     	;# 
  2250  0415                     	;# 
  2251  0416                     	;# 
  2252  0417                     	;# 
  2253  041C                     	;# 
  2254  041D                     	;# 
  2255  041E                     	;# 
  2256  0511                     	;# 
  2257  0515                     	;# 
  2258  0617                     	;# 
  2259  0618                     	;# 
  2260  0619                     	;# 
  2261  0619                     	;# 
  2262  061A                     	;# 
  2263  061B                     	;# 
  2264  061C                     	;# 
  2265  061C                     	;# 
  2266  0691                     	;# 
  2267  0692                     	;# 
  2268  0693                     	;# 
  2269  0694                     	;# 
  2270  0695                     	;# 
  2271  0696                     	;# 
  2272  0697                     	;# 
  2273  0698                     	;# 
  2274  0699                     	;# 
  2275  069A                     	;# 
  2276  069B                     	;# 
  2277  069C                     	;# 
  2278  069D                     	;# 
  2279  069E                     	;# 
  2280  069F                     	;# 
  2281  0E0F                     	;# 
  2282  0E10                     	;# 
  2283  0E11                     	;# 
  2284  0E12                     	;# 
  2285  0E13                     	;# 
  2286  0E14                     	;# 
  2287  0E15                     	;# 
  2288  0E17                     	;# 
  2289  0E20                     	;# 
  2290  0E21                     	;# 
  2291  0E22                     	;# 
  2292  0E24                     	;# 
  2293  0E25                     	;# 
  2294  0E28                     	;# 
  2295  0E29                     	;# 
  2296  0E2A                     	;# 
  2297  0E2B                     	;# 
  2298  0E90                     	;# 
  2299  0E91                     	;# 
  2300  0E92                     	;# 
  2301  0E94                     	;# 
  2302  0E95                     	;# 
  2303  0E9C                     	;# 
  2304  0E9D                     	;# 
  2305  0E9E                     	;# 
  2306  0E9F                     	;# 
  2307  0EA0                     	;# 
  2308  0EA1                     	;# 
  2309  0EA2                     	;# 
  2310  0EA3                     	;# 
  2311  0EA4                     	;# 
  2312  0EA5                     	;# 
  2313  0EA6                     	;# 
  2314  0EA7                     	;# 
  2315  0F0F                     	;# 
  2316  0F10                     	;# 
  2317  0F11                     	;# 
  2318  0F12                     	;# 
  2319  0F13                     	;# 
  2320  0F14                     	;# 
  2321  0F15                     	;# 
  2322  0F16                     	;# 
  2323  0F17                     	;# 
  2324  0F18                     	;# 
  2325  0F19                     	;# 
  2326  0F1A                     	;# 
  2327  0F1B                     	;# 
  2328  0F1C                     	;# 
  2329  0F1D                     	;# 
  2330  0F1E                     	;# 
  2331  0F1F                     	;# 
  2332  0F20                     	;# 
  2333  0F21                     	;# 
  2334  0F22                     	;# 
  2335  0F23                     	;# 
  2336  0F24                     	;# 
  2337  0F25                     	;# 
  2338  0F26                     	;# 
  2339  0F27                     	;# 
  2340  0F28                     	;# 
  2341  0F29                     	;# 
  2342  0F2A                     	;# 
  2343  0F2B                     	;# 
  2344  0F2C                     	;# 
  2345  0F2D                     	;# 
  2346  0FE4                     	;# 
  2347  0FE5                     	;# 
  2348  0FE6                     	;# 
  2349  0FE7                     	;# 
  2350  0FE8                     	;# 
  2351  0FE9                     	;# 
  2352  0FEA                     	;# 
  2353  0FEB                     	;# 
  2354  0FED                     	;# 
  2355  0FEE                     	;# 
  2356  0FEF                     	;# 
  2357  0000                     	;# 
  2358  0001                     	;# 
  2359  0002                     	;# 
  2360  0003                     	;# 
  2361  0004                     	;# 
  2362  0005                     	;# 
  2363  0006                     	;# 
  2364  0007                     	;# 
  2365  0008                     	;# 
  2366  0009                     	;# 
  2367  000A                     	;# 
  2368  000B                     	;# 
  2369  000C                     	;# 
  2370  000D                     	;# 
  2371  000E                     	;# 
  2372  0011                     	;# 
  2373  0012                     	;# 
  2374  0013                     	;# 
  2375  0015                     	;# 
  2376  0016                     	;# 
  2377  0016                     	;# 
  2378  0017                     	;# 
  2379  0018                     	;# 
  2380  0019                     	;# 
  2381  001A                     	;# 
  2382  001B                     	;# 
  2383  001C                     	;# 
  2384  008C                     	;# 
  2385  008D                     	;# 
  2386  008E                     	;# 
  2387  0091                     	;# 
  2388  0092                     	;# 
  2389  0093                     	;# 
  2390  0095                     	;# 
  2391  0096                     	;# 
  2392  0097                     	;# 
  2393  0098                     	;# 
  2394  0099                     	;# 
  2395  009A                     	;# 
  2396  009B                     	;# 
  2397  009B                     	;# 
  2398  009C                     	;# 
  2399  009D                     	;# 
  2400  009E                     	;# 
  2401  009F                     	;# 
  2402  010C                     	;# 
  2403  010D                     	;# 
  2404  010E                     	;# 
  2405  0111                     	;# 
  2406  0112                     	;# 
  2407  0113                     	;# 
  2408  0114                     	;# 
  2409  0115                     	;# 
  2410  0116                     	;# 
  2411  0117                     	;# 
  2412  0118                     	;# 
  2413  0119                     	;# 
  2414  011C                     	;# 
  2415  018C                     	;# 
  2416  018D                     	;# 
  2417  018E                     	;# 
  2418  0191                     	;# 
  2419  0191                     	;# 
  2420  0192                     	;# 
  2421  0193                     	;# 
  2422  0193                     	;# 
  2423  0194                     	;# 
  2424  0195                     	;# 
  2425  0196                     	;# 
  2426  0199                     	;# 
  2427  0199                     	;# 
  2428  0199                     	;# 
  2429  019A                     	;# 
  2430  019A                     	;# 
  2431  019A                     	;# 
  2432  019B                     	;# 
  2433  019B                     	;# 
  2434  019B                     	;# 
  2435  019B                     	;# 
  2436  019B                     	;# 
  2437  019C                     	;# 
  2438  019C                     	;# 
  2439  019C                     	;# 
  2440  019D                     	;# 
  2441  019D                     	;# 
  2442  019D                     	;# 
  2443  019E                     	;# 
  2444  019E                     	;# 
  2445  019E                     	;# 
  2446  019F                     	;# 
  2447  019F                     	;# 
  2448  019F                     	;# 
  2449  019F                     	;# 
  2450  019F                     	;# 
  2451  020C                     	;# 
  2452  020D                     	;# 
  2453  020E                     	;# 
  2454  0211                     	;# 
  2455  0211                     	;# 
  2456  0212                     	;# 
  2457  0212                     	;# 
  2458  0213                     	;# 
  2459  0213                     	;# 
  2460  0214                     	;# 
  2461  0214                     	;# 
  2462  0215                     	;# 
  2463  0215                     	;# 
  2464  0215                     	;# 
  2465  0215                     	;# 
  2466  0216                     	;# 
  2467  0216                     	;# 
  2468  0217                     	;# 
  2469  0217                     	;# 
  2470  028C                     	;# 
  2471  028D                     	;# 
  2472  028E                     	;# 
  2473  0291                     	;# 
  2474  0291                     	;# 
  2475  0292                     	;# 
  2476  0293                     	;# 
  2477  0293                     	;# 
  2478  0298                     	;# 
  2479  0298                     	;# 
  2480  0299                     	;# 
  2481  029A                     	;# 
  2482  029A                     	;# 
  2483  029E                     	;# 
  2484  030C                     	;# 
  2485  030D                     	;# 
  2486  030E                     	;# 
  2487  038C                     	;# 
  2488  038D                     	;# 
  2489  038E                     	;# 
  2490  0391                     	;# 
  2491  0392                     	;# 
  2492  0393                     	;# 
  2493  0394                     	;# 
  2494  0395                     	;# 
  2495  0396                     	;# 
  2496  0397                     	;# 
  2497  0398                     	;# 
  2498  0399                     	;# 
  2499  0415                     	;# 
  2500  0416                     	;# 
  2501  0417                     	;# 
  2502  041C                     	;# 
  2503  041D                     	;# 
  2504  041E                     	;# 
  2505  0511                     	;# 
  2506  0515                     	;# 
  2507  0617                     	;# 
  2508  0618                     	;# 
  2509  0619                     	;# 
  2510  0619                     	;# 
  2511  061A                     	;# 
  2512  061B                     	;# 
  2513  061C                     	;# 
  2514  061C                     	;# 
  2515  0691                     	;# 
  2516  0692                     	;# 
  2517  0693                     	;# 
  2518  0694                     	;# 
  2519  0695                     	;# 
  2520  0696                     	;# 
  2521  0697                     	;# 
  2522  0698                     	;# 
  2523  0699                     	;# 
  2524  069A                     	;# 
  2525  069B                     	;# 
  2526  069C                     	;# 
  2527  069D                     	;# 
  2528  069E                     	;# 
  2529  069F                     	;# 
  2530  0E0F                     	;# 
  2531  0E10                     	;# 
  2532  0E11                     	;# 
  2533  0E12                     	;# 
  2534  0E13                     	;# 
  2535  0E14                     	;# 
  2536  0E15                     	;# 
  2537  0E17                     	;# 
  2538  0E20                     	;# 
  2539  0E21                     	;# 
  2540  0E22                     	;# 
  2541  0E24                     	;# 
  2542  0E25                     	;# 
  2543  0E28                     	;# 
  2544  0E29                     	;# 
  2545  0E2A                     	;# 
  2546  0E2B                     	;# 
  2547  0E90                     	;# 
  2548  0E91                     	;# 
  2549  0E92                     	;# 
  2550  0E94                     	;# 
  2551  0E95                     	;# 
  2552  0E9C                     	;# 
  2553  0E9D                     	;# 
  2554  0E9E                     	;# 
  2555  0E9F                     	;# 
  2556  0EA0                     	;# 
  2557  0EA1                     	;# 
  2558  0EA2                     	;# 
  2559  0EA3                     	;# 
  2560  0EA4                     	;# 
  2561  0EA5                     	;# 
  2562  0EA6                     	;# 
  2563  0EA7                     	;# 
  2564  0F0F                     	;# 
  2565  0F10                     	;# 
  2566  0F11                     	;# 
  2567  0F12                     	;# 
  2568  0F13                     	;# 
  2569  0F14                     	;# 
  2570  0F15                     	;# 
  2571  0F16                     	;# 
  2572  0F17                     	;# 
  2573  0F18                     	;# 
  2574  0F19                     	;# 
  2575  0F1A                     	;# 
  2576  0F1B                     	;# 
  2577  0F1C                     	;# 
  2578  0F1D                     	;# 
  2579  0F1E                     	;# 
  2580  0F1F                     	;# 
  2581  0F20                     	;# 
  2582  0F21                     	;# 
  2583  0F22                     	;# 
  2584  0F23                     	;# 
  2585  0F24                     	;# 
  2586  0F25                     	;# 
  2587  0F26                     	;# 
  2588  0F27                     	;# 
  2589  0F28                     	;# 
  2590  0F29                     	;# 
  2591  0F2A                     	;# 
  2592  0F2B                     	;# 
  2593  0F2C                     	;# 
  2594  0F2D                     	;# 
  2595  0FE4                     	;# 
  2596  0FE5                     	;# 
  2597  0FE6                     	;# 
  2598  0FE7                     	;# 
  2599  0FE8                     	;# 
  2600  0FE9                     	;# 
  2601  0FEA                     	;# 
  2602  0FEB                     	;# 
  2603  0FED                     	;# 
  2604  0FEE                     	;# 
  2605  0FEF                     	;# 
  2606  0000                     	;# 
  2607  0001                     	;# 
  2608  0002                     	;# 
  2609  0003                     	;# 
  2610  0004                     	;# 
  2611  0005                     	;# 
  2612  0006                     	;# 
  2613  0007                     	;# 
  2614  0008                     	;# 
  2615  0009                     	;# 
  2616  000A                     	;# 
  2617  000B                     	;# 
  2618  000C                     	;# 
  2619  000D                     	;# 
  2620  000E                     	;# 
  2621  0011                     	;# 
  2622  0012                     	;# 
  2623  0013                     	;# 
  2624  0015                     	;# 
  2625  0016                     	;# 
  2626  0016                     	;# 
  2627  0017                     	;# 
  2628  0018                     	;# 
  2629  0019                     	;# 
  2630  001A                     	;# 
  2631  001B                     	;# 
  2632  001C                     	;# 
  2633  008C                     	;# 
  2634  008D                     	;# 
  2635  008E                     	;# 
  2636  0091                     	;# 
  2637  0092                     	;# 
  2638  0093                     	;# 
  2639  0095                     	;# 
  2640  0096                     	;# 
  2641  0097                     	;# 
  2642  0098                     	;# 
  2643  0099                     	;# 
  2644  009A                     	;# 
  2645  009B                     	;# 
  2646  009B                     	;# 
  2647  009C                     	;# 
  2648  009D                     	;# 
  2649  009E                     	;# 
  2650  009F                     	;# 
  2651  010C                     	;# 
  2652  010D                     	;# 
  2653  010E                     	;# 
  2654  0111                     	;# 
  2655  0112                     	;# 
  2656  0113                     	;# 
  2657  0114                     	;# 
  2658  0115                     	;# 
  2659  0116                     	;# 
  2660  0117                     	;# 
  2661  0118                     	;# 
  2662  0119                     	;# 
  2663  011C                     	;# 
  2664  018C                     	;# 
  2665  018D                     	;# 
  2666  018E                     	;# 
  2667  0191                     	;# 
  2668  0191                     	;# 
  2669  0192                     	;# 
  2670  0193                     	;# 
  2671  0193                     	;# 
  2672  0194                     	;# 
  2673  0195                     	;# 
  2674  0196                     	;# 
  2675  0199                     	;# 
  2676  0199                     	;# 
  2677  0199                     	;# 
  2678  019A                     	;# 
  2679  019A                     	;# 
  2680  019A                     	;# 
  2681  019B                     	;# 
  2682  019B                     	;# 
  2683  019B                     	;# 
  2684  019B                     	;# 
  2685  019B                     	;# 
  2686  019C                     	;# 
  2687  019C                     	;# 
  2688  019C                     	;# 
  2689  019D                     	;# 
  2690  019D                     	;# 
  2691  019D                     	;# 
  2692  019E                     	;# 
  2693  019E                     	;# 
  2694  019E                     	;# 
  2695  019F                     	;# 
  2696  019F                     	;# 
  2697  019F                     	;# 
  2698  019F                     	;# 
  2699  019F                     	;# 
  2700  020C                     	;# 
  2701  020D                     	;# 
  2702  020E                     	;# 
  2703  0211                     	;# 
  2704  0211                     	;# 
  2705  0212                     	;# 
  2706  0212                     	;# 
  2707  0213                     	;# 
  2708  0213                     	;# 
  2709  0214                     	;# 
  2710  0214                     	;# 
  2711  0215                     	;# 
  2712  0215                     	;# 
  2713  0215                     	;# 
  2714  0215                     	;# 
  2715  0216                     	;# 
  2716  0216                     	;# 
  2717  0217                     	;# 
  2718  0217                     	;# 
  2719  028C                     	;# 
  2720  028D                     	;# 
  2721  028E                     	;# 
  2722  0291                     	;# 
  2723  0291                     	;# 
  2724  0292                     	;# 
  2725  0293                     	;# 
  2726  0293                     	;# 
  2727  0298                     	;# 
  2728  0298                     	;# 
  2729  0299                     	;# 
  2730  029A                     	;# 
  2731  029A                     	;# 
  2732  029E                     	;# 
  2733  030C                     	;# 
  2734  030D                     	;# 
  2735  030E                     	;# 
  2736  038C                     	;# 
  2737  038D                     	;# 
  2738  038E                     	;# 
  2739  0391                     	;# 
  2740  0392                     	;# 
  2741  0393                     	;# 
  2742  0394                     	;# 
  2743  0395                     	;# 
  2744  0396                     	;# 
  2745  0397                     	;# 
  2746  0398                     	;# 
  2747  0399                     	;# 
  2748  0415                     	;# 
  2749  0416                     	;# 
  2750  0417                     	;# 
  2751  041C                     	;# 
  2752  041D                     	;# 
  2753  041E                     	;# 
  2754  0511                     	;# 
  2755  0515                     	;# 
  2756  0617                     	;# 
  2757  0618                     	;# 
  2758  0619                     	;# 
  2759  0619                     	;# 
  2760  061A                     	;# 
  2761  061B                     	;# 
  2762  061C                     	;# 
  2763  061C                     	;# 
  2764  0691                     	;# 
  2765  0692                     	;# 
  2766  0693                     	;# 
  2767  0694                     	;# 
  2768  0695                     	;# 
  2769  0696                     	;# 
  2770  0697                     	;# 
  2771  0698                     	;# 
  2772  0699                     	;# 
  2773  069A                     	;# 
  2774  069B                     	;# 
  2775  069C                     	;# 
  2776  069D                     	;# 
  2777  069E                     	;# 
  2778  069F                     	;# 
  2779  0E0F                     	;# 
  2780  0E10                     	;# 
  2781  0E11                     	;# 
  2782  0E12                     	;# 
  2783  0E13                     	;# 
  2784  0E14                     	;# 
  2785  0E15                     	;# 
  2786  0E17                     	;# 
  2787  0E20                     	;# 
  2788  0E21                     	;# 
  2789  0E22                     	;# 
  2790  0E24                     	;# 
  2791  0E25                     	;# 
  2792  0E28                     	;# 
  2793  0E29                     	;# 
  2794  0E2A                     	;# 
  2795  0E2B                     	;# 
  2796  0E90                     	;# 
  2797  0E91                     	;# 
  2798  0E92                     	;# 
  2799  0E94                     	;# 
  2800  0E95                     	;# 
  2801  0E9C                     	;# 
  2802  0E9D                     	;# 
  2803  0E9E                     	;# 
  2804  0E9F                     	;# 
  2805  0EA0                     	;# 
  2806  0EA1                     	;# 
  2807  0EA2                     	;# 
  2808  0EA3                     	;# 
  2809  0EA4                     	;# 
  2810  0EA5                     	;# 
  2811  0EA6                     	;# 
  2812  0EA7                     	;# 
  2813  0F0F                     	;# 
  2814  0F10                     	;# 
  2815  0F11                     	;# 
  2816  0F12                     	;# 
  2817  0F13                     	;# 
  2818  0F14                     	;# 
  2819  0F15                     	;# 
  2820  0F16                     	;# 
  2821  0F17                     	;# 
  2822  0F18                     	;# 
  2823  0F19                     	;# 
  2824  0F1A                     	;# 
  2825  0F1B                     	;# 
  2826  0F1C                     	;# 
  2827  0F1D                     	;# 
  2828  0F1E                     	;# 
  2829  0F1F                     	;# 
  2830  0F20                     	;# 
  2831  0F21                     	;# 
  2832  0F22                     	;# 
  2833  0F23                     	;# 
  2834  0F24                     	;# 
  2835  0F25                     	;# 
  2836  0F26                     	;# 
  2837  0F27                     	;# 
  2838  0F28                     	;# 
  2839  0F29                     	;# 
  2840  0F2A                     	;# 
  2841  0F2B                     	;# 
  2842  0F2C                     	;# 
  2843  0F2D                     	;# 
  2844  0FE4                     	;# 
  2845  0FE5                     	;# 
  2846  0FE6                     	;# 
  2847  0FE7                     	;# 
  2848  0FE8                     	;# 
  2849  0FE9                     	;# 
  2850  0FEA                     	;# 
  2851  0FEB                     	;# 
  2852  0FED                     	;# 
  2853  0FEE                     	;# 
  2854  0FEF                     	;# 
  2855  0000                     	;# 
  2856  0001                     	;# 
  2857  0002                     	;# 
  2858  0003                     	;# 
  2859  0004                     	;# 
  2860  0005                     	;# 
  2861  0006                     	;# 
  2862  0007                     	;# 
  2863  0008                     	;# 
  2864  0009                     	;# 
  2865  000A                     	;# 
  2866  000B                     	;# 
  2867  000C                     	;# 
  2868  000D                     	;# 
  2869  000E                     	;# 
  2870  0011                     	;# 
  2871  0012                     	;# 
  2872  0013                     	;# 
  2873  0015                     	;# 
  2874  0016                     	;# 
  2875  0016                     	;# 
  2876  0017                     	;# 
  2877  0018                     	;# 
  2878  0019                     	;# 
  2879  001A                     	;# 
  2880  001B                     	;# 
  2881  001C                     	;# 
  2882  008C                     	;# 
  2883  008D                     	;# 
  2884  008E                     	;# 
  2885  0091                     	;# 
  2886  0092                     	;# 
  2887  0093                     	;# 
  2888  0095                     	;# 
  2889  0096                     	;# 
  2890  0097                     	;# 
  2891  0098                     	;# 
  2892  0099                     	;# 
  2893  009A                     	;# 
  2894  009B                     	;# 
  2895  009B                     	;# 
  2896  009C                     	;# 
  2897  009D                     	;# 
  2898  009E                     	;# 
  2899  009F                     	;# 
  2900  010C                     	;# 
  2901  010D                     	;# 
  2902  010E                     	;# 
  2903  0111                     	;# 
  2904  0112                     	;# 
  2905  0113                     	;# 
  2906  0114                     	;# 
  2907  0115                     	;# 
  2908  0116                     	;# 
  2909  0117                     	;# 
  2910  0118                     	;# 
  2911  0119                     	;# 
  2912  011C                     	;# 
  2913  018C                     	;# 
  2914  018D                     	;# 
  2915  018E                     	;# 
  2916  0191                     	;# 
  2917  0191                     	;# 
  2918  0192                     	;# 
  2919  0193                     	;# 
  2920  0193                     	;# 
  2921  0194                     	;# 
  2922  0195                     	;# 
  2923  0196                     	;# 
  2924  0199                     	;# 
  2925  0199                     	;# 
  2926  0199                     	;# 
  2927  019A                     	;# 
  2928  019A                     	;# 
  2929  019A                     	;# 
  2930  019B                     	;# 
  2931  019B                     	;# 
  2932  019B                     	;# 
  2933  019B                     	;# 
  2934  019B                     	;# 
  2935  019C                     	;# 
  2936  019C                     	;# 
  2937  019C                     	;# 
  2938  019D                     	;# 
  2939  019D                     	;# 
  2940  019D                     	;# 
  2941  019E                     	;# 
  2942  019E                     	;# 
  2943  019E                     	;# 
  2944  019F                     	;# 
  2945  019F                     	;# 
  2946  019F                     	;# 
  2947  019F                     	;# 
  2948  019F                     	;# 
  2949  020C                     	;# 
  2950  020D                     	;# 
  2951  020E                     	;# 
  2952  0211                     	;# 
  2953  0211                     	;# 
  2954  0212                     	;# 
  2955  0212                     	;# 
  2956  0213                     	;# 
  2957  0213                     	;# 
  2958  0214                     	;# 
  2959  0214                     	;# 
  2960  0215                     	;# 
  2961  0215                     	;# 
  2962  0215                     	;# 
  2963  0215                     	;# 
  2964  0216                     	;# 
  2965  0216                     	;# 
  2966  0217                     	;# 
  2967  0217                     	;# 
  2968  028C                     	;# 
  2969  028D                     	;# 
  2970  028E                     	;# 
  2971  0291                     	;# 
  2972  0291                     	;# 
  2973  0292                     	;# 
  2974  0293                     	;# 
  2975  0293                     	;# 
  2976  0298                     	;# 
  2977  0298                     	;# 
  2978  0299                     	;# 
  2979  029A                     	;# 
  2980  029A                     	;# 
  2981  029E                     	;# 
  2982  030C                     	;# 
  2983  030D                     	;# 
  2984  030E                     	;# 
  2985  038C                     	;# 
  2986  038D                     	;# 
  2987  038E                     	;# 
  2988  0391                     	;# 
  2989  0392                     	;# 
  2990  0393                     	;# 
  2991  0394                     	;# 
  2992  0395                     	;# 
  2993  0396                     	;# 
  2994  0397                     	;# 
  2995  0398                     	;# 
  2996  0399                     	;# 
  2997  0415                     	;# 
  2998  0416                     	;# 
  2999  0417                     	;# 
  3000  041C                     	;# 
  3001  041D                     	;# 
  3002  041E                     	;# 
  3003  0511                     	;# 
  3004  0515                     	;# 
  3005  0617                     	;# 
  3006  0618                     	;# 
  3007  0619                     	;# 
  3008  0619                     	;# 
  3009  061A                     	;# 
  3010  061B                     	;# 
  3011  061C                     	;# 
  3012  061C                     	;# 
  3013  0691                     	;# 
  3014  0692                     	;# 
  3015  0693                     	;# 
  3016  0694                     	;# 
  3017  0695                     	;# 
  3018  0696                     	;# 
  3019  0697                     	;# 
  3020  0698                     	;# 
  3021  0699                     	;# 
  3022  069A                     	;# 
  3023  069B                     	;# 
  3024  069C                     	;# 
  3025  069D                     	;# 
  3026  069E                     	;# 
  3027  069F                     	;# 
  3028  0E0F                     	;# 
  3029  0E10                     	;# 
  3030  0E11                     	;# 
  3031  0E12                     	;# 
  3032  0E13                     	;# 
  3033  0E14                     	;# 
  3034  0E15                     	;# 
  3035  0E17                     	;# 
  3036  0E20                     	;# 
  3037  0E21                     	;# 
  3038  0E22                     	;# 
  3039  0E24                     	;# 
  3040  0E25                     	;# 
  3041  0E28                     	;# 
  3042  0E29                     	;# 
  3043  0E2A                     	;# 
  3044  0E2B                     	;# 
  3045  0E90                     	;# 
  3046  0E91                     	;# 
  3047  0E92                     	;# 
  3048  0E94                     	;# 
  3049  0E95                     	;# 
  3050  0E9C                     	;# 
  3051  0E9D                     	;# 
  3052  0E9E                     	;# 
  3053  0E9F                     	;# 
  3054  0EA0                     	;# 
  3055  0EA1                     	;# 
  3056  0EA2                     	;# 
  3057  0EA3                     	;# 
  3058  0EA4                     	;# 
  3059  0EA5                     	;# 
  3060  0EA6                     	;# 
  3061  0EA7                     	;# 
  3062  0F0F                     	;# 
  3063  0F10                     	;# 
  3064  0F11                     	;# 
  3065  0F12                     	;# 
  3066  0F13                     	;# 
  3067  0F14                     	;# 
  3068  0F15                     	;# 
  3069  0F16                     	;# 
  3070  0F17                     	;# 
  3071  0F18                     	;# 
  3072  0F19                     	;# 
  3073  0F1A                     	;# 
  3074  0F1B                     	;# 
  3075  0F1C                     	;# 
  3076  0F1D                     	;# 
  3077  0F1E                     	;# 
  3078  0F1F                     	;# 
  3079  0F20                     	;# 
  3080  0F21                     	;# 
  3081  0F22                     	;# 
  3082  0F23                     	;# 
  3083  0F24                     	;# 
  3084  0F25                     	;# 
  3085  0F26                     	;# 
  3086  0F27                     	;# 
  3087  0F28                     	;# 
  3088  0F29                     	;# 
  3089  0F2A                     	;# 
  3090  0F2B                     	;# 
  3091  0F2C                     	;# 
  3092  0F2D                     	;# 
  3093  0FE4                     	;# 
  3094  0FE5                     	;# 
  3095  0FE6                     	;# 
  3096  0FE7                     	;# 
  3097  0FE8                     	;# 
  3098  0FE9                     	;# 
  3099  0FEA                     	;# 
  3100  0FEB                     	;# 
  3101  0FED                     	;# 
  3102  0FEE                     	;# 
  3103  0FEF                     	;# 
  3104  0000                     	;# 
  3105  0001                     	;# 
  3106  0002                     	;# 
  3107  0003                     	;# 
  3108  0004                     	;# 
  3109  0005                     	;# 
  3110  0006                     	;# 
  3111  0007                     	;# 
  3112  0008                     	;# 
  3113  0009                     	;# 
  3114  000A                     	;# 
  3115  000B                     	;# 
  3116  000C                     	;# 
  3117  000D                     	;# 
  3118  000E                     	;# 
  3119  0011                     	;# 
  3120  0012                     	;# 
  3121  0013                     	;# 
  3122  0015                     	;# 
  3123  0016                     	;# 
  3124  0016                     	;# 
  3125  0017                     	;# 
  3126  0018                     	;# 
  3127  0019                     	;# 
  3128  001A                     	;# 
  3129  001B                     	;# 
  3130  001C                     	;# 
  3131  008C                     	;# 
  3132  008D                     	;# 
  3133  008E                     	;# 
  3134  0091                     	;# 
  3135  0092                     	;# 
  3136  0093                     	;# 
  3137  0095                     	;# 
  3138  0096                     	;# 
  3139  0097                     	;# 
  3140  0098                     	;# 
  3141  0099                     	;# 
  3142  009A                     	;# 
  3143  009B                     	;# 
  3144  009B                     	;# 
  3145  009C                     	;# 
  3146  009D                     	;# 
  3147  009E                     	;# 
  3148  009F                     	;# 
  3149  010C                     	;# 
  3150  010D                     	;# 
  3151  010E                     	;# 
  3152  0111                     	;# 
  3153  0112                     	;# 
  3154  0113                     	;# 
  3155  0114                     	;# 
  3156  0115                     	;# 
  3157  0116                     	;# 
  3158  0117                     	;# 
  3159  0118                     	;# 
  3160  0119                     	;# 
  3161  011C                     	;# 
  3162  018C                     	;# 
  3163  018D                     	;# 
  3164  018E                     	;# 
  3165  0191                     	;# 
  3166  0191                     	;# 
  3167  0192                     	;# 
  3168  0193                     	;# 
  3169  0193                     	;# 
  3170  0194                     	;# 
  3171  0195                     	;# 
  3172  0196                     	;# 
  3173  0199                     	;# 
  3174  0199                     	;# 
  3175  0199                     	;# 
  3176  019A                     	;# 
  3177  019A                     	;# 
  3178  019A                     	;# 
  3179  019B                     	;# 
  3180  019B                     	;# 
  3181  019B                     	;# 
  3182  019B                     	;# 
  3183  019B                     	;# 
  3184  019C                     	;# 
  3185  019C                     	;# 
  3186  019C                     	;# 
  3187  019D                     	;# 
  3188  019D                     	;# 
  3189  019D                     	;# 
  3190  019E                     	;# 
  3191  019E                     	;# 
  3192  019E                     	;# 
  3193  019F                     	;# 
  3194  019F                     	;# 
  3195  019F                     	;# 
  3196  019F                     	;# 
  3197  019F                     	;# 
  3198  020C                     	;# 
  3199  020D                     	;# 
  3200  020E                     	;# 
  3201  0211                     	;# 
  3202  0211                     	;# 
  3203  0212                     	;# 
  3204  0212                     	;# 
  3205  0213                     	;# 
  3206  0213                     	;# 
  3207  0214                     	;# 
  3208  0214                     	;# 
  3209  0215                     	;# 
  3210  0215                     	;# 
  3211  0215                     	;# 
  3212  0215                     	;# 
  3213  0216                     	;# 
  3214  0216                     	;# 
  3215  0217                     	;# 
  3216  0217                     	;# 
  3217  028C                     	;# 
  3218  028D                     	;# 
  3219  028E                     	;# 
  3220  0291                     	;# 
  3221  0291                     	;# 
  3222  0292                     	;# 
  3223  0293                     	;# 
  3224  0293                     	;# 
  3225  0298                     	;# 
  3226  0298                     	;# 
  3227  0299                     	;# 
  3228  029A                     	;# 
  3229  029A                     	;# 
  3230  029E                     	;# 
  3231  030C                     	;# 
  3232  030D                     	;# 
  3233  030E                     	;# 
  3234  038C                     	;# 
  3235  038D                     	;# 
  3236  038E                     	;# 
  3237  0391                     	;# 
  3238  0392                     	;# 
  3239  0393                     	;# 
  3240  0394                     	;# 
  3241  0395                     	;# 
  3242  0396                     	;# 
  3243  0397                     	;# 
  3244  0398                     	;# 
  3245  0399                     	;# 
  3246  0415                     	;# 
  3247  0416                     	;# 
  3248  0417                     	;# 
  3249  041C                     	;# 
  3250  041D                     	;# 
  3251  041E                     	;# 
  3252  0511                     	;# 
  3253  0515                     	;# 
  3254  0617                     	;# 
  3255  0618                     	;# 
  3256  0619                     	;# 
  3257  0619                     	;# 
  3258  061A                     	;# 
  3259  061B                     	;# 
  3260  061C                     	;# 
  3261  061C                     	;# 
  3262  0691                     	;# 
  3263  0692                     	;# 
  3264  0693                     	;# 
  3265  0694                     	;# 
  3266  0695                     	;# 
  3267  0696                     	;# 
  3268  0697                     	;# 
  3269  0698                     	;# 
  3270  0699                     	;# 
  3271  069A                     	;# 
  3272  069B                     	;# 
  3273  069C                     	;# 
  3274  069D                     	;# 
  3275  069E                     	;# 
  3276  069F                     	;# 
  3277  0E0F                     	;# 
  3278  0E10                     	;# 
  3279  0E11                     	;# 
  3280  0E12                     	;# 
  3281  0E13                     	;# 
  3282  0E14                     	;# 
  3283  0E15                     	;# 
  3284  0E17                     	;# 
  3285  0E20                     	;# 
  3286  0E21                     	;# 
  3287  0E22                     	;# 
  3288  0E24                     	;# 
  3289  0E25                     	;# 
  3290  0E28                     	;# 
  3291  0E29                     	;# 
  3292  0E2A                     	;# 
  3293  0E2B                     	;# 
  3294  0E90                     	;# 
  3295  0E91                     	;# 
  3296  0E92                     	;# 
  3297  0E94                     	;# 
  3298  0E95                     	;# 
  3299  0E9C                     	;# 
  3300  0E9D                     	;# 
  3301  0E9E                     	;# 
  3302  0E9F                     	;# 
  3303  0EA0                     	;# 
  3304  0EA1                     	;# 
  3305  0EA2                     	;# 
  3306  0EA3                     	;# 
  3307  0EA4                     	;# 
  3308  0EA5                     	;# 
  3309  0EA6                     	;# 
  3310  0EA7                     	;# 
  3311  0F0F                     	;# 
  3312  0F10                     	;# 
  3313  0F11                     	;# 
  3314  0F12                     	;# 
  3315  0F13                     	;# 
  3316  0F14                     	;# 
  3317  0F15                     	;# 
  3318  0F16                     	;# 
  3319  0F17                     	;# 
  3320  0F18                     	;# 
  3321  0F19                     	;# 
  3322  0F1A                     	;# 
  3323  0F1B                     	;# 
  3324  0F1C                     	;# 
  3325  0F1D                     	;# 
  3326  0F1E                     	;# 
  3327  0F1F                     	;# 
  3328  0F20                     	;# 
  3329  0F21                     	;# 
  3330  0F22                     	;# 
  3331  0F23                     	;# 
  3332  0F24                     	;# 
  3333  0F25                     	;# 
  3334  0F26                     	;# 
  3335  0F27                     	;# 
  3336  0F28                     	;# 
  3337  0F29                     	;# 
  3338  0F2A                     	;# 
  3339  0F2B                     	;# 
  3340  0F2C                     	;# 
  3341  0F2D                     	;# 
  3342  0FE4                     	;# 
  3343  0FE5                     	;# 
  3344  0FE6                     	;# 
  3345  0FE7                     	;# 
  3346  0FE8                     	;# 
  3347  0FE9                     	;# 
  3348  0FEA                     	;# 
  3349  0FEB                     	;# 
  3350  0FED                     	;# 
  3351  0FEE                     	;# 
  3352  0FEF                     	;# 
  3353                           
  3354 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3355  0000                     
  3356 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3357  0000                     
  3358 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3359  0000                     
  3360                           	psect	idataCOMMON
  3361  0003                     __pidataCOMMON:	
  3362                           
  3363                           ;initializer for _dc_frequency_flag
  3364  0003  3401               	retlw	1
  3365                           
  3366                           	psect	idataBANK1
  3367  06F2                     __pidataBANK1:	
  3368                           
  3369                           ;initializer for _maxFrequencyIndex
  3370  06F2  3406               	retlw	6
  3371  06F3  3400               	retlw	0
  3372                           
  3373                           ;initializer for _maxCurrentIndex
  3374  06F4  340B               	retlw	11
  3375  06F5  3400               	retlw	0
  3376                           
  3377                           ;initializer for _currentIsOn
  3378  06F6  3401               	retlw	1
  3379                           
  3380                           ;initializer for _currentValue
  3381  06F7  3400               	retlw	0
  3382  06F8  3400               	retlw	0
  3383  06F9  341E               	retlw	30
  3384  06FA  3400               	retlw	0
  3385  06FB  3432               	retlw	50
  3386  06FC  3400               	retlw	0
  3387  06FD  3446               	retlw	70
  3388  06FE  3400               	retlw	0
  3389  06FF  345A               	retlw	90
  3390  0700  3400               	retlw	0
  3391  0701  346E               	retlw	110
  3392  0702  3400               	retlw	0
  3393  0703  3482               	retlw	130
  3394  0704  3400               	retlw	0
  3395  0705  34A0               	retlw	160
  3396  0706  3400               	retlw	0
  3397  0707  34BE               	retlw	190
  3398  0708  3400               	retlw	0
  3399  0709  34DC               	retlw	220
  3400  070A  3400               	retlw	0
  3401  070B  34FA               	retlw	250
  3402  070C  3400               	retlw	0
  3403                           
  3404                           ;initializer for _frequencyValue
  3405  070D  3400               	retlw	0
  3406  070E  3400               	retlw	0
  3407  070F  3432               	retlw	50
  3408  0710  3400               	retlw	0
  3409  0711  3464               	retlw	100
  3410  0712  3400               	retlw	0
  3411  0713  3478               	retlw	120
  3412  0714  3400               	retlw	0
  3413  0715  3482               	retlw	130
  3414  0716  3400               	retlw	0
  3415  0717  348C               	retlw	140
  3416  0718  3400               	retlw	0
  3417  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3418  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3419                           
  3420                           	psect	_HEF_persistent_state_text
  3421  0FE0                     __p_HEF_persistent_state_text:	
  3422  0FE0                     _HEF_persistent_state:	
  3423  0FE0  3405               	retlw	5
  3424  0FE1  3403               	retlw	3
  3425  0FE2  3400               	retlw	0
  3426  0FE3  3400               	retlw	0
  3427  0FE4  3400               	retlw	0
  3428  0FE5  3400               	retlw	0
  3429  0FE6  3400               	retlw	0
  3430  0FE7  3400               	retlw	0
  3431  0FE8  3400               	retlw	0
  3432  0FE9  3400               	retlw	0
  3433  0FEA  3400               	retlw	0
  3434  0FEB  3400               	retlw	0
  3435  0FEC  3400               	retlw	0
  3436  0FED  3400               	retlw	0
  3437  0FEE  3400               	retlw	0
  3438  0FEF  3400               	retlw	0
  3439  0FF0  3400               	retlw	0
  3440  0FF1  3400               	retlw	0
  3441  0FF2  3400               	retlw	0
  3442  0FF3  3400               	retlw	0
  3443  0FF4  3400               	retlw	0
  3444  0FF5  3400               	retlw	0
  3445  0FF6  3400               	retlw	0
  3446  0FF7  3400               	retlw	0
  3447  0FF8  3400               	retlw	0
  3448  0FF9  3400               	retlw	0
  3449  0FFA  3400               	retlw	0
  3450  0FFB  3400               	retlw	0
  3451  0FFC  3400               	retlw	0
  3452  0FFD  3400               	retlw	0
  3453  0FFE  3400               	retlw	0
  3454  0FFF  3400               	retlw	0
  3455  1000                     __end_of_HEF_persistent_state:	
  3456                           
  3457                           	psect	nvBANK1
  3458  00C7                     __pnvBANK1:	
  3459  00C7                     _TMR4_InterruptHandler:	
  3460  00C7                     	ds	2
  3461  00C9                     _TMR0_InterruptHandler:	
  3462  00C9                     	ds	2
  3463  00CB                     _INT_InterruptHandler:	
  3464  00CB                     	ds	2
  3465  00CD                     _EUSART_ErrorHandler:	
  3466  00CD                     	ds	2
  3467  00CF                     _EUSART_OverrunErrorHandler:	
  3468  00CF                     	ds	2
  3469  00D1                     _EUSART_FramingErrorHandler:	
  3470  00D1                     	ds	2
  3471  00D3                     _frequencyIndex:	
  3472  00D3                     	ds	2
  3473  00D5                     _currentIndex:	
  3474  00D5                     	ds	2
  3475  001C                     _T2CONbits	set	28
  3476  001C                     _T2CON	set	28
  3477  001A                     _TMR2	set	26
  3478  001B                     _PR2	set	27
  3479  0015                     _TMR0	set	21
  3480  0011                     _PIR1bits	set	17
  3481  0012                     _PIR2bits	set	18
  3482  000B                     _INTCONbits	set	11
  3483  009D                     _ADCON0bits	set	157
  3484  009E                     _ADCON1	set	158
  3485  009D                     _ADCON0	set	157
  3486  0095                     _OPTION_REG	set	149
  3487  0092                     _PIE2bits	set	146
  3488  0095                     _OPTION_REGbits	set	149
  3489  008E                     _TRISC	set	142
  3490  008D                     _TRISB	set	141
  3491  008C                     _TRISA	set	140
  3492  0097                     _WDTCON	set	151
  3493  0098                     _OSCTUNE	set	152
  3494  009A                     _OSCSTAT	set	154
  3495  0099                     _OSCCON	set	153
  3496  009B                     _ADRES	set	155
  3497  0117                     _FVRCONbits	set	279
  3498  0117                     _FVRCON	set	279
  3499  010E                     _LATC	set	270
  3500  010D                     _LATB	set	269
  3501  010C                     _LATA	set	268
  3502  0116                     _BORCON	set	278
  3503  0119                     _DAC1CON1	set	281
  3504  0118                     _DAC1CON0	set	280
  3505  0196                     _PMCON2	set	406
  3506  0193                     _PMDATL	set	403
  3507  0194                     _PMDATH	set	404
  3508  0195                     _PMCON1bits	set	405
  3509  0192                     _PMADRH	set	402
  3510  0191                     _PMADRL	set	401
  3511  019A                     _TX1REG	set	410
  3512  0199                     _RC1REG	set	409
  3513  019D                     _RC1STAbits	set	413
  3514  019E                     _TX1STAbits	set	414
  3515  019C                     _SP1BRGH	set	412
  3516  019B                     _SP1BRGL	set	411
  3517  019E                     _TX1STA	set	414
  3518  019D                     _RC1STA	set	413
  3519  019F                     _BAUD1CON	set	415
  3520  018C                     _ANSELA	set	396
  3521  018D                     _ANSELB	set	397
  3522  018E                     _ANSELC	set	398
  3523  020E                     _WPUC	set	526
  3524  020C                     _WPUA	set	524
  3525  020D                     _WPUB	set	525
  3526  0291                     _CCPR1L	set	657
  3527  0293                     _CCP1CONbits	set	659
  3528  029E                     _CCPTMRSbits	set	670
  3529  028E                     _ODCONC	set	654
  3530  028D                     _ODCONB	set	653
  3531  028C                     _ODCONA	set	652
  3532  030E                     _SLRCONC	set	782
  3533  030D                     _SLRCONB	set	781
  3534  030C                     _SLRCONA	set	780
  3535  038E                     _INLVLC	set	910
  3536  038D                     _INLVLB	set	909
  3537  038C                     _INLVLA	set	908
  3538  0417                     _T4CONbits	set	1047
  3539  0417                     _T4CON	set	1047
  3540  0415                     _TMR4	set	1045
  3541  0416                     _PR4	set	1046
  3542  0515                     _OPA2CON	set	1301
  3543  0511                     _OPA1CON	set	1297
  3544  061C                     _PWM4CONbits	set	1564
  3545  061A                     _PWM4DCLbits	set	1562
  3546  061B                     _PWM4DCH	set	1563
  3547  0619                     _PWM3CONbits	set	1561
  3548  0617                     _PWM3DCLbits	set	1559
  3549  0618                     _PWM3DCH	set	1560
  3550  0E24                     _RXPPS	set	3620
  3551  0E10                     _INTPPS	set	3600
  3552  0EA5                     _RC5PPS	set	3749
  3553  0E95                     _RA5PPS	set	3733
  3554  0EA4                     _RC4PPS	set	3748
  3555  0E9F                     _RB7PPS	set	3743
  3556                           
  3557                           	psect	stringtext1
  3558  07E8                     __pstringtext1:	
  3559  07E8                     STR_5:	
  3560  07E8  340A               	retlw	10
  3561  07E9  3420               	retlw	32	;' '
  3562  07EA  3472               	retlw	114	;'r'
  3563  07EB  3465               	retlw	101	;'e'
  3564  07EC  3473               	retlw	115	;'s'
  3565  07ED  3465               	retlw	101	;'e'
  3566  07EE  3474               	retlw	116	;'t'
  3567  07EF  3420               	retlw	32	;' '
  3568  07F0  3476               	retlw	118	;'v'
  3569  07F1  3461               	retlw	97	;'a'
  3570  07F2  346C               	retlw	108	;'l'
  3571  07F3  3475               	retlw	117	;'u'
  3572  07F4  3465               	retlw	101	;'e'
  3573  07F5  3420               	retlw	32	;' '
  3574  07F6  3473               	retlw	115	;'s'
  3575  07F7  3465               	retlw	101	;'e'
  3576  07F8  346C               	retlw	108	;'l'
  3577  07F9  3465               	retlw	101	;'e'
  3578  07FA  3463               	retlw	99	;'c'
  3579  07FB  3474               	retlw	116	;'t'
  3580  07FC  3465               	retlw	101	;'e'
  3581  07FD  3464               	retlw	100	;'d'
  3582  07FE  3400               	retlw	0
  3583                           
  3584                           	psect	stringtext2
  3585  07FF                     __pstringtext2:	
  3586  07FF                     STR_1:	
  3587  07FF  340A               	retlw	10
  3588  0800  3420               	retlw	32	;' '
  3589  0801  3446               	retlw	70	;'F'
  3590  0802  3472               	retlw	114	;'r'
  3591  0803  3465               	retlw	101	;'e'
  3592  0804  3471               	retlw	113	;'q'
  3593  0805  3475               	retlw	117	;'u'
  3594  0806  3465               	retlw	101	;'e'
  3595  0807  346E               	retlw	110	;'n'
  3596  0808  3463               	retlw	99	;'c'
  3597  0809  3479               	retlw	121	;'y'
  3598  080A  3420               	retlw	32	;' '
  3599  080B  3473               	retlw	115	;'s'
  3600  080C  3465               	retlw	101	;'e'
  3601  080D  346C               	retlw	108	;'l'
  3602  080E  3465               	retlw	101	;'e'
  3603  080F  3463               	retlw	99	;'c'
  3604  0810  3474               	retlw	116	;'t'
  3605  0811  3465               	retlw	101	;'e'
  3606  0812  3464               	retlw	100	;'d'
  3607  0813  3400               	retlw	0
  3608                           
  3609                           	psect	stringtext3
  3610  0814                     __pstringtext3:	
  3611  0814                     STR_4:	
  3612  0814  340A               	retlw	10
  3613  0815  3420               	retlw	32	;' '
  3614  0816  3464               	retlw	100	;'d'
  3615  0817  3465               	retlw	101	;'e'
  3616  0818  3463               	retlw	99	;'c'
  3617  0819  3472               	retlw	114	;'r'
  3618  081A  3465               	retlw	101	;'e'
  3619  081B  3461               	retlw	97	;'a'
  3620  081C  3473               	retlw	115	;'s'
  3621  081D  3465               	retlw	101	;'e'
  3622  081E  3420               	retlw	32	;' '
  3623  081F  3473               	retlw	115	;'s'
  3624  0820  3465               	retlw	101	;'e'
  3625  0821  346C               	retlw	108	;'l'
  3626  0822  3465               	retlw	101	;'e'
  3627  0823  3463               	retlw	99	;'c'
  3628  0824  3474               	retlw	116	;'t'
  3629  0825  3465               	retlw	101	;'e'
  3630  0826  3464               	retlw	100	;'d'
  3631  0827  3400               	retlw	0
  3632                           
  3633                           	psect	stringtext4
  3634  0828                     __pstringtext4:	
  3635  0828                     STR_3:	
  3636  0828  340A               	retlw	10
  3637  0829  3420               	retlw	32	;' '
  3638  082A  3469               	retlw	105	;'i'
  3639  082B  346E               	retlw	110	;'n'
  3640  082C  3463               	retlw	99	;'c'
  3641  082D  3472               	retlw	114	;'r'
  3642  082E  3465               	retlw	101	;'e'
  3643  082F  3461               	retlw	97	;'a'
  3644  0830  3473               	retlw	115	;'s'
  3645  0831  3465               	retlw	101	;'e'
  3646  0832  3420               	retlw	32	;' '
  3647  0833  3473               	retlw	115	;'s'
  3648  0834  3465               	retlw	101	;'e'
  3649  0835  346C               	retlw	108	;'l'
  3650  0836  3465               	retlw	101	;'e'
  3651  0837  3463               	retlw	99	;'c'
  3652  0838  3474               	retlw	116	;'t'
  3653  0839  3465               	retlw	101	;'e'
  3654  083A  3464               	retlw	100	;'d'
  3655  083B  3400               	retlw	0
  3656                           
  3657                           	psect	stringtext5
  3658  083C                     __pstringtext5:	
  3659  083C                     STR_2:	
  3660  083C  340A               	retlw	10
  3661  083D  3420               	retlw	32	;' '
  3662  083E  3463               	retlw	99	;'c'
  3663  083F  3475               	retlw	117	;'u'
  3664  0840  3472               	retlw	114	;'r'
  3665  0841  3472               	retlw	114	;'r'
  3666  0842  3465               	retlw	101	;'e'
  3667  0843  346E               	retlw	110	;'n'
  3668  0844  3474               	retlw	116	;'t'
  3669  0845  3420               	retlw	32	;' '
  3670  0846  3473               	retlw	115	;'s'
  3671  0847  3465               	retlw	101	;'e'
  3672  0848  346C               	retlw	108	;'l'
  3673  0849  3465               	retlw	101	;'e'
  3674  084A  3463               	retlw	99	;'c'
  3675  084B  3474               	retlw	116	;'t'
  3676  084C  3465               	retlw	101	;'e'
  3677  084D  3464               	retlw	100	;'d'
  3678  084E  3400               	retlw	0
  3679                           
  3680                           	psect	stringtext6
  3681  084F                     __pstringtext6:	
  3682  084F                     STR_6:	
  3683  084F  340A               	retlw	10
  3684  0850  3420               	retlw	32	;' '
  3685  0851  3472               	retlw	114	;'r'
  3686  0852  3465               	retlw	101	;'e'
  3687  0853  3473               	retlw	115	;'s'
  3688  0854  3465               	retlw	101	;'e'
  3689  0855  3474               	retlw	116	;'t'
  3690  0856  3420               	retlw	32	;' '
  3691  0857  3473               	retlw	115	;'s'
  3692  0858  3465               	retlw	101	;'e'
  3693  0859  346C               	retlw	108	;'l'
  3694  085A  3465               	retlw	101	;'e'
  3695  085B  3463               	retlw	99	;'c'
  3696  085C  3474               	retlw	116	;'t'
  3697  085D  3400               	retlw	0
  3698                           
  3699                           	psect	stringtext7
  3700  0000                     __pstringtext7:	
  3701                           
  3702                           ; #config settings
  3703  0000                     
  3704                           	psect	cinit
  3705  002F                     start_initialization:	
  3706  002F                     __initialization:	
  3707                           
  3708                           ; Initialize objects allocated to COMMON
  3709  002F  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  3710  0032  00FA               	movwf	__pdataCOMMON& (0+127)
  3711                           
  3712                           ; Initialize objects allocated to BANK1
  3713  0033  30F2               	movlw	low __pidataBANK1
  3714  0034  0084               	movwf	4
  3715  0035  3086               	movlw	(high __pidataBANK1)| (0+128)
  3716  0036  0085               	movwf	5
  3717  0037  30A0               	movlw	low __pdataBANK1
  3718  0038  0086               	movwf	6
  3719  0039  3000               	movlw	high __pdataBANK1
  3720  003A  0087               	movwf	7
  3721  003B  3027               	movlw	39
  3722  003C  318E  26EA  3180   	fcall	init_ram
  3723                           
  3724                           ; Clear objects allocated to COMMON
  3725  003F  01F8               	clrf	__pbssCOMMON& (0+127)
  3726  0040  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  3727                           
  3728                           ; Clear objects allocated to BANK1
  3729  0041  30D7               	movlw	low __pbssBANK1
  3730  0042  0084               	movwf	4
  3731  0043  3000               	movlw	high __pbssBANK1
  3732  0044  0085               	movwf	5
  3733  0045  300F               	movlw	15
  3734  0046  318E  26E4  3180   	fcall	clear_ram0
  3735                           
  3736                           ; Clear objects allocated to BANK2
  3737  0049  3020               	movlw	low __pbssBANK2
  3738  004A  0084               	movwf	4
  3739  004B  3001               	movlw	high __pbssBANK2
  3740  004C  0085               	movwf	5
  3741  004D  3021               	movlw	33
  3742  004E  318E  26E4         	fcall	clear_ram0
  3743  0050                     end_of_initialization:	
  3744                           ;End of C runtime variable initialization code
  3745                           
  3746  0050                     __end_of__initialization:	
  3747  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3748  0051  0020               	movlb	0
  3749  0052  3182  2AFE         	ljmp	_main	;jump to C main() function
  3750                           
  3751                           	psect	bssCOMMON
  3752  0078                     __pbssCOMMON:	
  3753  0078                     _interfaceState:	
  3754  0078                     	ds	1
  3755  0079                     _timer0ReloadVal:	
  3756  0079                     	ds	1
  3757                           
  3758                           	psect	dataCOMMON
  3759  007A                     __pdataCOMMON:	
  3760  007A                     _dc_frequency_flag:	
  3761  007A                     	ds	1
  3762                           
  3763                           	psect	bssBANK1
  3764  00D7                     __pbssBANK1:	
  3765  00D7                     _Vdd_mv:	
  3766  00D7                     	ds	2
  3767  00D9                     _microamps:	
  3768  00D9                     	ds	2
  3769  00DB                     _LED_blue:	
  3770  00DB                     	ds	1
  3771  00DC                     _LED_green:	
  3772  00DC                     	ds	1
  3773  00DD                     _LED_red:	
  3774  00DD                     	ds	1
  3775  00DE                     _dac_value:	
  3776  00DE                     	ds	1
  3777  00DF                     _eusartRxLastError:	
  3778  00DF                     	ds	1
  3779  00E0                     _ir_code:	
  3780  00E0                     	ds	6
  3781                           
  3782                           	psect	dataBANK1
  3783  00A0                     __pdataBANK1:	
  3784  00A0                     _maxFrequencyIndex:	
  3785  00A0                     	ds	2
  3786  00A2                     _maxCurrentIndex:	
  3787  00A2                     	ds	2
  3788  00A4                     _currentIsOn:	
  3789  00A4                     	ds	1
  3790  00A5                     _currentValue:	
  3791  00A5                     	ds	22
  3792  00BB                     _frequencyValue:	
  3793  00BB                     	ds	12
  3794                           
  3795                           	psect	bssBANK2
  3796  0120                     __pbssBANK2:	
  3797  0120                     _stats:	
  3798  0120                     	ds	33
  3799                           
  3800                           	psect	inittext
  3801  0EEA                     init_ram:	
  3802  0EEA  00FE               	movwf	126
  3803  0EEB                     initloop:	
  3804  0EEB  0012               	moviw fsr0++
  3805  0EEC  001E               	movwi fsr1++
  3806  0EED  0BFE               	decfsz	126,f
  3807  0EEE  2EEB               	goto	initloop
  3808  0EEF  3400               	retlw	0
  3809                           
  3810                           	psect	clrtext
  3811  0EE4                     clear_ram0:	
  3812                           ;	Called with FSR0 containing the base address, and
  3813                           ;	WREG with the size to clear
  3814                           
  3815  0EE4  0064               	clrwdt	;clear the watchdog before getting into this loop
  3816  0EE5                     clrloop0:	
  3817  0EE5  0180               	clrf	0	;clear RAM location pointed to by FSR
  3818  0EE6  3101               	addfsr 0,1
  3819  0EE7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3820  0EE8  2EE5               	goto	clrloop0	;have we reached the end yet?
  3821  0EE9  3400               	retlw	0	;all done for this memory range, return
  3822                           
  3823                           	psect	cstackBANK1
  3824  00E6                     __pcstackBANK1:	
  3825  00E6                     ??_process_remote_command:	
  3826                           
  3827                           ; 1 bytes @ 0x0
  3828  00E6                     	ds	3
  3829  00E9                     process_remote_command@code:	
  3830                           
  3831                           ; 1 bytes @ 0x3
  3832  00E9                     	ds	1
  3833  00EA                     ??_main:	
  3834                           
  3835                           ; 1 bytes @ 0x4
  3836  00EA                     	ds	1
  3837  00EB                     main@batt_mv:	
  3838                           
  3839                           ; 2 bytes @ 0x5
  3840  00EB                     	ds	2
  3841                           
  3842                           	psect	cstackCOMMON
  3843  0070                     __pcstackCOMMON:	
  3844  0070                     ?_PIN_MANAGER_Initialize:	
  3845  0070                     ?_OSCILLATOR_Initialize:	
  3846                           ; 1 bytes @ 0x0
  3847                           
  3848  0070                     ?_WDT_Initialize:	
  3849                           ; 1 bytes @ 0x0
  3850                           
  3851  0070                     ?_OPA1_Initialize:	
  3852                           ; 1 bytes @ 0x0
  3853                           
  3854  0070                     ?_TMR4_Initialize:	
  3855                           ; 1 bytes @ 0x0
  3856                           
  3857  0070                     ?_OPA2_Initialize:	
  3858                           ; 1 bytes @ 0x0
  3859                           
  3860  0070                     ?_TMR2_Initialize:	
  3861                           ; 1 bytes @ 0x0
  3862                           
  3863  0070                     ?_EXT_INT_Initialize:	
  3864                           ; 1 bytes @ 0x0
  3865                           
  3866  0070                     ?_TMR0_Initialize:	
  3867                           ; 1 bytes @ 0x0
  3868                           
  3869  0070                     ?_EUSART_Initialize:	
  3870                           ; 1 bytes @ 0x0
  3871                           
  3872  0070                     ?_TMR0_ISR:	
  3873                           ; 1 bytes @ 0x0
  3874                           
  3875  0070                     ??_TMR0_ISR:	
  3876                           ; 1 bytes @ 0x0
  3877                           
  3878  0070                     ?_INT_ISR:	
  3879                           ; 1 bytes @ 0x0
  3880                           
  3881  0070                     ?_TMR4_ISR:	
  3882                           ; 1 bytes @ 0x0
  3883                           
  3884  0070                     ?_INT_CallBack:	
  3885                           ; 1 bytes @ 0x0
  3886                           
  3887  0070                     ?_TMR0_DefaultInterruptHandler:	
  3888                           ; 1 bytes @ 0x0
  3889                           
  3890  0070                     ??_TMR0_DefaultInterruptHandler:	
  3891                           ; 1 bytes @ 0x0
  3892                           
  3893  0070                     ?_TMR4_DefaultInterruptHandler:	
  3894                           ; 1 bytes @ 0x0
  3895                           
  3896  0070                     ?_DAC_Initialize:	
  3897                           ; 1 bytes @ 0x0
  3898                           
  3899  0070                     ?_DAC_SetOutput:	
  3900                           ; 1 bytes @ 0x0
  3901                           
  3902  0070                     ??_DAC_SetOutput:	
  3903                           ; 1 bytes @ 0x0
  3904                           
  3905  0070                     ?_SYSTEM_Initialize:	
  3906                           ; 1 bytes @ 0x0
  3907                           
  3908  0070                     ?_PIN_MANAGER_IOC:	
  3909                           ; 1 bytes @ 0x0
  3910                           
  3911  0070                     ??_PIN_MANAGER_IOC:	
  3912                           ; 1 bytes @ 0x0
  3913                           
  3914  0070                     ?_INTERRUPT_InterruptManager:	
  3915                           ; 1 bytes @ 0x0
  3916                           
  3917  0070                     ?_EUSART_Write:	
  3918                           ; 1 bytes @ 0x0
  3919                           
  3920  0070                     ?_putch:	
  3921                           ; 1 bytes @ 0x0
  3922                           
  3923  0070                     ?_INT_DefaultInterruptHandler:	
  3924                           ; 1 bytes @ 0x0
  3925                           
  3926  0070                     ??_INT_DefaultInterruptHandler:	
  3927                           ; 1 bytes @ 0x0
  3928                           
  3929  0070                     ?_TMR4_LoadPeriodRegister:	
  3930                           ; 1 bytes @ 0x0
  3931                           
  3932  0070                     ?_readPersistentState:	
  3933                           ; 1 bytes @ 0x0
  3934                           
  3935  0070                     ?_writePersistentState:	
  3936                           ; 1 bytes @ 0x0
  3937                           
  3938  0070                     ?_initLED:	
  3939                           ; 1 bytes @ 0x0
  3940                           
  3941  0070                     ?_lowBattery:	
  3942                           ; 1 bytes @ 0x0
  3943                           
  3944  0070                     ?_startUp:	
  3945                           ; 1 bytes @ 0x0
  3946                           
  3947  0070                     ?_selectSomething:	
  3948                           ; 1 bytes @ 0x0
  3949                           
  3950  0070                     ?_selectFrequency:	
  3951                           ; 1 bytes @ 0x0
  3952                           
  3953  0070                     ?_selectCurrent:	
  3954                           ; 1 bytes @ 0x0
  3955                           
  3956  0070                     ?_selectIncrease:	
  3957                           ; 1 bytes @ 0x0
  3958                           
  3959  0070                     ?_selectDecrease:	
  3960                           ; 1 bytes @ 0x0
  3961                           
  3962  0070                     ?_selectResetValue:	
  3963                           ; 1 bytes @ 0x0
  3964                           
  3965  0070                     ?_process_remote_command:	
  3966                           ; 1 bytes @ 0x0
  3967                           
  3968  0070                     ?_main:	
  3969                           ; 1 bytes @ 0x0
  3970                           
  3971  0070                     DAC_SetOutput@inputData:	
  3972                           ; 1 bytes @ 0x0
  3973                           
  3974                           
  3975                           ; 1 bytes @ 0x0
  3976  0070                     	ds	1
  3977  0071                     ??_TMR4_ISR:	
  3978  0071                     ??_TMR4_DefaultInterruptHandler:	
  3979                           ; 1 bytes @ 0x1
  3980                           
  3981  0071                     INT_DefaultInterruptHandler@time:	
  3982                           ; 1 bytes @ 0x1
  3983                           
  3984                           
  3985                           ; 1 bytes @ 0x1
  3986  0071                     	ds	1
  3987  0072                     ??_INT_ISR:	
  3988  0072                     ??_INT_CallBack:	
  3989                           ; 1 bytes @ 0x2
  3990                           
  3991  0072                     ??_INTERRUPT_InterruptManager:	
  3992                           ; 1 bytes @ 0x2
  3993                           
  3994                           
  3995                           ; 1 bytes @ 0x2
  3996  0072                     	ds	1
  3997  0073                     ??_PIN_MANAGER_Initialize:	
  3998  0073                     ??_OSCILLATOR_Initialize:	
  3999                           ; 1 bytes @ 0x3
  4000                           
  4001  0073                     ??_WDT_Initialize:	
  4002                           ; 1 bytes @ 0x3
  4003                           
  4004  0073                     ??_OPA1_Initialize:	
  4005                           ; 1 bytes @ 0x3
  4006                           
  4007  0073                     ??_OPA2_Initialize:	
  4008                           ; 1 bytes @ 0x3
  4009                           
  4010  0073                     ??_TMR2_Initialize:	
  4011                           ; 1 bytes @ 0x3
  4012                           
  4013  0073                     ?_EUSART_SetFramingErrorHandler:	
  4014                           ; 1 bytes @ 0x3
  4015                           
  4016  0073                     ?_EUSART_SetOverrunErrorHandler:	
  4017                           ; 1 bytes @ 0x3
  4018                           
  4019  0073                     ?_EUSART_SetErrorHandler:	
  4020                           ; 1 bytes @ 0x3
  4021                           
  4022  0073                     ?_TMR0_SetInterruptHandler:	
  4023                           ; 1 bytes @ 0x3
  4024                           
  4025  0073                     ?_TMR4_SetInterruptHandler:	
  4026                           ; 1 bytes @ 0x3
  4027                           
  4028  0073                     ?_FLASH_EraseBlock:	
  4029                           ; 1 bytes @ 0x3
  4030                           
  4031  0073                     ??_DAC_Initialize:	
  4032                           ; 1 bytes @ 0x3
  4033                           
  4034  0073                     ??_EUSART_Write:	
  4035                           ; 1 bytes @ 0x3
  4036                           
  4037  0073                     ?_INT_SetInterruptHandler:	
  4038                           ; 1 bytes @ 0x3
  4039                           
  4040  0073                     ??_TMR4_LoadPeriodRegister:	
  4041                           ; 1 bytes @ 0x3
  4042                           
  4043  0073                     ??_readPersistentState:	
  4044                           ; 1 bytes @ 0x3
  4045                           
  4046  0073                     ??_initLED:	
  4047                           ; 1 bytes @ 0x3
  4048                           
  4049  0073                     ?_setLEDColor:	
  4050                           ; 1 bytes @ 0x3
  4051                           
  4052  0073                     ??___lmul:	
  4053                           ; 1 bytes @ 0x3
  4054                           
  4055  0073                     ?___awdiv:	
  4056                           ; 1 bytes @ 0x3
  4057                           
  4058  0073                     EUSART_Write@txData:	
  4059                           ; 2 bytes @ 0x3
  4060                           
  4061  0073                     TMR4_LoadPeriodRegister@periodVal:	
  4062                           ; 1 bytes @ 0x3
  4063                           
  4064  0073                     setLEDColor@green:	
  4065                           ; 1 bytes @ 0x3
  4066                           
  4067  0073                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4068                           ; 1 bytes @ 0x3
  4069                           
  4070  0073                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4071                           ; 2 bytes @ 0x3
  4072                           
  4073  0073                     EUSART_SetErrorHandler@interruptHandler:	
  4074                           ; 2 bytes @ 0x3
  4075                           
  4076  0073                     INT_SetInterruptHandler@InterruptHandler:	
  4077                           ; 2 bytes @ 0x3
  4078                           
  4079  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  4080                           ; 2 bytes @ 0x3
  4081                           
  4082  0073                     TMR4_SetInterruptHandler@InterruptHandler:	
  4083                           ; 2 bytes @ 0x3
  4084                           
  4085  0073                     FLASH_EraseBlock@startAddr:	
  4086                           ; 2 bytes @ 0x3
  4087                           
  4088  0073                     ___awdiv@divisor:	
  4089                           ; 2 bytes @ 0x3
  4090                           
  4091  0073                     ___lmul@product:	
  4092                           ; 2 bytes @ 0x3
  4093                           
  4094                           
  4095                           ; 4 bytes @ 0x3
  4096  0073                     	ds	1
  4097  0074                     ??_putch:	
  4098  0074                     putch@txData:	
  4099                           ; 1 bytes @ 0x4
  4100                           
  4101  0074                     setLEDColor@blue:	
  4102                           ; 1 bytes @ 0x4
  4103                           
  4104                           
  4105                           ; 1 bytes @ 0x4
  4106  0074                     	ds	1
  4107  0075                     ??_TMR4_Initialize:	
  4108  0075                     ??_EXT_INT_Initialize:	
  4109                           ; 1 bytes @ 0x5
  4110                           
  4111  0075                     ??_TMR0_Initialize:	
  4112                           ; 1 bytes @ 0x5
  4113                           
  4114  0075                     ??_EUSART_Initialize:	
  4115                           ; 1 bytes @ 0x5
  4116                           
  4117  0075                     ??_EUSART_SetFramingErrorHandler:	
  4118                           ; 1 bytes @ 0x5
  4119                           
  4120  0075                     ??_EUSART_SetOverrunErrorHandler:	
  4121                           ; 1 bytes @ 0x5
  4122                           
  4123  0075                     ??_EUSART_SetErrorHandler:	
  4124                           ; 1 bytes @ 0x5
  4125                           
  4126  0075                     ??_TMR0_SetInterruptHandler:	
  4127                           ; 1 bytes @ 0x5
  4128                           
  4129  0075                     ??_TMR4_SetInterruptHandler:	
  4130                           ; 1 bytes @ 0x5
  4131                           
  4132  0075                     ??_FLASH_EraseBlock:	
  4133                           ; 1 bytes @ 0x5
  4134                           
  4135  0075                     ??_SYSTEM_Initialize:	
  4136                           ; 1 bytes @ 0x5
  4137                           
  4138  0075                     ??_INT_SetInterruptHandler:	
  4139                           ; 1 bytes @ 0x5
  4140                           
  4141  0075                     ??_setLEDColor:	
  4142                           ; 1 bytes @ 0x5
  4143                           
  4144  0075                     ?_printf:	
  4145                           ; 1 bytes @ 0x5
  4146                           
  4147  0075                     FLASH_EraseBlock@GIEBitValue:	
  4148                           ; 2 bytes @ 0x5
  4149                           
  4150  0075                     printf@f:	
  4151                           ; 1 bytes @ 0x5
  4152                           
  4153  0075                     ___awdiv@dividend:	
  4154                           ; 2 bytes @ 0x5
  4155                           
  4156                           
  4157                           ; 2 bytes @ 0x5
  4158  0075                     	ds	1
  4159  0076                     setLEDColor@red:	
  4160                           
  4161                           ; 1 bytes @ 0x6
  4162  0076                     	ds	1
  4163  0077                     ??_selectDecrease:	
  4164  0077                     ??___awdiv:	
  4165                           ; 1 bytes @ 0x7
  4166                           
  4167                           
  4168                           ; 1 bytes @ 0x7
  4169  0077                     	ds	1
  4170  0078                     ??_battery_voltage:	
  4171                           
  4172                           	psect	cstackBANK0
  4173  0020                     __pcstackBANK0:	
  4174                           ; 1 bytes @ 0x8
  4175                           
  4176  0020                     ?_FLASH_WriteBlock:	
  4177  0020                     ??_printf:	
  4178                           ; 1 bytes @ 0x0
  4179                           
  4180  0020                     ??_lowBattery:	
  4181                           ; 1 bytes @ 0x0
  4182                           
  4183  0020                     ??_startUp:	
  4184                           ; 1 bytes @ 0x0
  4185                           
  4186  0020                     ??_selectSomething:	
  4187                           ; 1 bytes @ 0x0
  4188                           
  4189  0020                     ?___lmul:	
  4190                           ; 1 bytes @ 0x0
  4191                           
  4192  0020                     ___awdiv@counter:	
  4193                           ; 4 bytes @ 0x0
  4194                           
  4195  0020                     FLASH_WriteBlock@writeAddr:	
  4196                           ; 1 bytes @ 0x0
  4197                           
  4198  0020                     ___lmul@multiplier:	
  4199                           ; 2 bytes @ 0x0
  4200                           
  4201                           
  4202                           ; 4 bytes @ 0x0
  4203  0020                     	ds	1
  4204  0021                     ___awdiv@sign:	
  4205                           
  4206                           ; 1 bytes @ 0x1
  4207  0021                     	ds	1
  4208  0022                     FLASH_WriteBlock@flashWordArray:	
  4209  0022                     startUp@i:	
  4210                           ; 1 bytes @ 0x2
  4211                           
  4212  0022                     ___awdiv@quotient:	
  4213                           ; 2 bytes @ 0x2
  4214                           
  4215                           
  4216                           ; 2 bytes @ 0x2
  4217  0022                     	ds	1
  4218  0023                     ??_FLASH_WriteBlock:	
  4219  0023                     printf@ap:	
  4220                           ; 1 bytes @ 0x3
  4221                           
  4222                           
  4223                           ; 1 bytes @ 0x3
  4224  0023                     	ds	1
  4225  0024                     printf@c:	
  4226  0024                     ___lmul@multiplicand:	
  4227                           ; 1 bytes @ 0x4
  4228                           
  4229                           
  4230                           ; 4 bytes @ 0x4
  4231  0024                     	ds	1
  4232  0025                     ??_selectFrequency:	
  4233  0025                     ??_selectCurrent:	
  4234                           ; 1 bytes @ 0x5
  4235                           
  4236  0025                     ??_selectIncrease:	
  4237                           ; 1 bytes @ 0x5
  4238                           
  4239  0025                     ??_selectResetValue:	
  4240                           ; 1 bytes @ 0x5
  4241                           
  4242                           
  4243                           ; 1 bytes @ 0x5
  4244  0025                     	ds	1
  4245  0026                     FLASH_WriteBlock@blockStartAddr:	
  4246                           
  4247                           ; 2 bytes @ 0x6
  4248  0026                     	ds	2
  4249  0028                     ?___aldiv:	
  4250  0028                     FLASH_WriteBlock@GIEBitValue:	
  4251                           ; 4 bytes @ 0x8
  4252                           
  4253  0028                     ___aldiv@divisor:	
  4254                           ; 1 bytes @ 0x8
  4255                           
  4256                           
  4257                           ; 4 bytes @ 0x8
  4258  0028                     	ds	1
  4259  0029                     FLASH_WriteBlock@i:	
  4260                           
  4261                           ; 1 bytes @ 0x9
  4262  0029                     	ds	1
  4263  002A                     ??_writePersistentState:	
  4264                           
  4265                           ; 1 bytes @ 0xA
  4266  002A                     	ds	2
  4267  002C                     ___aldiv@dividend:	
  4268                           
  4269                           ; 4 bytes @ 0xC
  4270  002C                     	ds	2
  4271  002E                     writePersistentState@buf:	
  4272                           
  4273                           ; 64 bytes @ 0xE
  4274  002E                     	ds	2
  4275  0030                     ??___aldiv:	
  4276                           
  4277                           ; 1 bytes @ 0x10
  4278  0030                     	ds	1
  4279  0031                     ___aldiv@counter:	
  4280                           
  4281                           ; 1 bytes @ 0x11
  4282  0031                     	ds	1
  4283  0032                     ___aldiv@sign:	
  4284                           
  4285                           ; 1 bytes @ 0x12
  4286  0032                     	ds	1
  4287  0033                     ___aldiv@quotient:	
  4288                           
  4289                           ; 4 bytes @ 0x13
  4290  0033                     	ds	4
  4291  0037                     ?_setFrequency:	
  4292  0037                     ?_battery_voltage:	
  4293                           ; 1 bytes @ 0x17
  4294                           
  4295  0037                     setFrequency@frequency_hz:	
  4296                           ; 2 bytes @ 0x17
  4297                           
  4298                           
  4299                           ; 2 bytes @ 0x17
  4300  0037                     	ds	2
  4301  0039                     ?_setCurrent:	
  4302  0039                     ??_setFrequency:	
  4303                           ; 1 bytes @ 0x19
  4304                           
  4305  0039                     setCurrent@microamps:	
  4306                           ; 1 bytes @ 0x19
  4307                           
  4308                           
  4309                           ; 2 bytes @ 0x19
  4310  0039                     	ds	1
  4311  003A                     setFrequency@PR4_val:	
  4312                           
  4313                           ; 2 bytes @ 0x1A
  4314  003A                     	ds	1
  4315  003B                     setCurrent@Vdd_mv:	
  4316                           
  4317                           ; 2 bytes @ 0x1B
  4318  003B                     	ds	2
  4319  003D                     ??_setCurrent:	
  4320                           
  4321                           ; 1 bytes @ 0x1D
  4322  003D                     	ds	8
  4323  0045                     setCurrent@Vdac_mv:	
  4324                           
  4325                           ; 2 bytes @ 0x25
  4326  0045                     	ds	2
  4327  0047                     setCurrent@DACValue:	
  4328                           
  4329                           ; 2 bytes @ 0x27
  4330  0047                     	ds	39
  4331  006E                     writePersistentState@i:	
  4332                           
  4333                           ; 1 bytes @ 0x4E
  4334  006E                     	ds	1
  4335  006F                     writePersistentState@idx:	
  4336                           
  4337                           ; 1 bytes @ 0x4F
  4338  006F                     	ds	1
  4339                           
  4340                           	psect	maintext
  4341  02FE                     __pmaintext:	
  4342 ;;
  4343 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4344 ;;
  4345 ;; *************** function _main *****************
  4346 ;; Defined at:
  4347 ;;		line 489 in file "main.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;		None
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;  batt_mv         2    5[BANK1 ] int 
  4352 ;; Return value:  Size  Location     Type
  4353 ;;                  1    wreg      void 
  4354 ;; Registers used:
  4355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4356 ;; Tracked objects:
  4357 ;;		On entry : B1F/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4361 ;;      Params:         0       0       0       0       0       0       0       0
  4362 ;;      Locals:         0       0       2       0       0       0       0       0
  4363 ;;      Temps:          0       0       1       0       0       0       0       0
  4364 ;;      Totals:         0       0       3       0       0       0       0       0
  4365 ;;Total ram usage:        3 bytes
  4366 ;; Hardware stack levels required when called:    9
  4367 ;; This function calls:
  4368 ;;		_DAC_Initialize
  4369 ;;		_OPA1_Initialize
  4370 ;;		_OPA2_Initialize
  4371 ;;		_SYSTEM_Initialize
  4372 ;;		_battery_voltage
  4373 ;;		_initLED
  4374 ;;		_lowBattery
  4375 ;;		_process_remote_command
  4376 ;;		_readPersistentState
  4377 ;;		_setCurrent
  4378 ;;		_setFrequency
  4379 ;;		_startUp
  4380 ;; This function is called by:
  4381 ;;		Startup code after reset
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _main
  4387  02FE                     _main:	
  4388                           
  4389                           ;main.c: 491: SYSTEM_Initialize();
  4390                           
  4391                           ;incstack = 0
  4392                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4393  02FE  3187  2786  3182   	fcall	_SYSTEM_Initialize
  4394                           
  4395                           ;main.c: 492: DAC_Initialize();
  4396  0301  318E  26BA  3182   	fcall	_DAC_Initialize
  4397                           
  4398                           ;main.c: 493: OPA1_Initialize();
  4399  0304  318E  269F  3182   	fcall	_OPA1_Initialize
  4400                           
  4401                           ;main.c: 494: OPA2_Initialize();
  4402  0307  318E  26A3  3182   	fcall	_OPA2_Initialize
  4403                           
  4404                           ;main.c: 495: initLED();
  4405  030A  3185  258F  3182   	fcall	_initLED
  4406                           
  4407                           ;main.c: 500: readPersistentState();
  4408  030D  3187  27C8  3182   	fcall	_readPersistentState
  4409                           
  4410                           ;main.c: 501: setCurrent(currentValue[currentIndex], battery_voltage());
  4411  0310  0021               	movlb	1	; select bank1
  4412  0311  3555               	lslf	_currentIndex^(0+128),w
  4413  0312  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4414  0313  0086               	movwf	6
  4415  0314  0187               	clrf	7
  4416  0315  3F40               	moviw [0]fsr1
  4417  0316  0020               	movlb	0	; select bank0
  4418  0317  00B9               	movwf	setCurrent@microamps
  4419  0318  3F41               	moviw [1]fsr1
  4420  0319  00BA               	movwf	setCurrent@microamps+1
  4421  031A  3186  2670  3182   	fcall	_battery_voltage
  4422  031D  0020               	movlb	0	; select bank0
  4423  031E  0838               	movf	?_battery_voltage+1,w
  4424  031F  00BC               	movwf	setCurrent@Vdd_mv+1
  4425  0320  0837               	movf	?_battery_voltage,w
  4426  0321  00BB               	movwf	setCurrent@Vdd_mv
  4427  0322  3181  21D4  3182   	fcall	_setCurrent
  4428                           
  4429                           ;main.c: 502: setFrequency(frequencyValue[frequencyIndex]);
  4430  0325  0021               	movlb	1	; select bank1
  4431  0326  3553               	lslf	_frequencyIndex^(0+128),w
  4432  0327  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  4433  0328  0086               	movwf	6
  4434  0329  0187               	clrf	7
  4435  032A  3F40               	moviw [0]fsr1
  4436  032B  0020               	movlb	0	; select bank0
  4437  032C  00B7               	movwf	setFrequency@frequency_hz
  4438  032D  3F41               	moviw [1]fsr1
  4439  032E  00B8               	movwf	setFrequency@frequency_hz+1
  4440  032F  3184  243F  3182   	fcall	_setFrequency
  4441                           
  4442                           ;main.c: 504: (INTCONbits.GIE = 1);
  4443  0332  178B               	bsf	11,7	;volatile
  4444                           
  4445                           ;main.c: 505: (INTCONbits.PEIE = 1);
  4446  0333  170B               	bsf	11,6	;volatile
  4447                           
  4448                           ;main.c: 506: startUp();
  4449  0334  3185  25D3  3182   	fcall	_startUp
  4450  0337                     l3321:	
  4451                           ;main.c: 509: while(1){
  4452                           
  4453                           
  4454                           ;main.c: 512: int16_t batt_mv = battery_voltage();
  4455  0337  3186  2670  3182   	fcall	_battery_voltage
  4456  033A  0020               	movlb	0	; select bank0
  4457  033B  0838               	movf	?_battery_voltage+1,w
  4458  033C  0021               	movlb	1	; select bank1
  4459  033D  00EC               	movwf	(main@batt_mv+1)^(0+128)
  4460  033E  0020               	movlb	0	; select bank0
  4461  033F  0837               	movf	?_battery_voltage,w
  4462  0340  0021               	movlb	1	; select bank1
  4463  0341  00EB               	movwf	main@batt_mv^(0+128)
  4464                           
  4465                           ;main.c: 514: if (batt_mv < 2500)
  4466  0342  086C               	movf	(main@batt_mv+1)^(0+128),w
  4467  0343  3A80               	xorlw	128
  4468  0344  00EA               	movwf	??_main^(0+128)
  4469  0345  3089               	movlw	137
  4470  0346  026A               	subwf	??_main^(0+128),w
  4471  0347  1D03               	skipz
  4472  0348  2B4B               	goto	u2305
  4473  0349  30C4               	movlw	196
  4474  034A  026B               	subwf	main@batt_mv^(0+128),w
  4475  034B                     u2305:	
  4476  034B  1803               	skipnc
  4477  034C  2B50               	goto	l3327
  4478                           
  4479                           ;main.c: 515: {
  4480                           ;main.c: 516: lowBattery();
  4481  034D  3186  269E  3182   	fcall	_lowBattery
  4482  0350                     l3327:	
  4483                           
  4484                           ;main.c: 518: }
  4485                           ;main.c: 522: setCurrent(currentValue[currentIndex], batt_mv);
  4486  0350  0021               	movlb	1	; select bank1
  4487  0351  3555               	lslf	_currentIndex^(0+128),w
  4488  0352  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4489  0353  0086               	movwf	6
  4490  0354  0187               	clrf	7
  4491  0355  3F40               	moviw [0]fsr1
  4492  0356  0020               	movlb	0	; select bank0
  4493  0357  00B9               	movwf	setCurrent@microamps
  4494  0358  3F41               	moviw [1]fsr1
  4495  0359  00BA               	movwf	setCurrent@microamps+1
  4496  035A  0021               	movlb	1	; select bank1
  4497  035B  086C               	movf	(main@batt_mv+1)^(0+128),w
  4498  035C  0020               	movlb	0	; select bank0
  4499  035D  00BC               	movwf	setCurrent@Vdd_mv+1
  4500  035E  0021               	movlb	1	; select bank1
  4501  035F  086B               	movf	main@batt_mv^(0+128),w
  4502  0360  0020               	movlb	0	; select bank0
  4503  0361  00BB               	movwf	setCurrent@Vdd_mv
  4504  0362  3181  21D4  3182   	fcall	_setCurrent
  4505                           
  4506                           ;main.c: 529: if (STATE_DONE == ir_code.state){
  4507  0365  3002               	movlw	2
  4508  0366  0021               	movlb	1	; select bank1
  4509  0367  0661               	xorwf	(_ir_code^(0+128)+1),w
  4510  0368  1D03               	btfss	3,2
  4511  0369  2B37               	goto	l3321
  4512                           
  4513                           ;main.c: 547: process_remote_command(&ir_code);
  4514  036A  30E0               	movlw	(low (_ir_code| 0))& (0+255)
  4515  036B  3180  2054  3182   	fcall	_process_remote_command
  4516                           
  4517                           ;main.c: 550: ir_code.state = STATE_RESET;
  4518  036E  0021               	movlb	1	; select bank1
  4519  036F  01E1               	clrf	(_ir_code^(0+128)+1)
  4520  0370  2B37               	goto	l3321
  4521  0371                     __end_of_main:	
  4522                           ;main.c: 551: }
  4523                           ;main.c: 552: }
  4524                           ;main.c: 554: return;
  4525                           
  4526                           
  4527                           	psect	text1
  4528  05D3                     __ptext1:	
  4529 ;; *************** function _startUp *****************
  4530 ;; Defined at:
  4531 ;;		line 252 in file "main.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  i               2    2[BANK0 ] int 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0, pclath, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4545 ;;      Params:         0       0       0       0       0       0       0       0
  4546 ;;      Locals:         0       2       0       0       0       0       0       0
  4547 ;;      Temps:          0       2       0       0       0       0       0       0
  4548 ;;      Totals:         0       4       0       0       0       0       0       0
  4549 ;;Total ram usage:        4 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    5
  4552 ;; This function calls:
  4553 ;;		_setLEDColor
  4554 ;; This function is called by:
  4555 ;;		_main
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           
  4560                           ;psect for function _startUp
  4561  05D3                     _startUp:	
  4562                           
  4563                           ;main.c: 253: interfaceState = STATE_RUNNING;
  4564                           
  4565                           ;incstack = 0
  4566                           ; Regs used in _startUp: [wreg+status,2+status,0+pclath+cstack]
  4567  05D3  01F8               	clrf	_interfaceState
  4568                           
  4569                           ;main.c: 254: for (int i = 0; i < 5; i++){
  4570  05D4  0020               	movlb	0	; select bank0
  4571  05D5  01A2               	clrf	startUp@i
  4572  05D6  01A3               	clrf	startUp@i+1
  4573  05D7                     L1:	
  4574  05D7  0823               	movf	startUp@i+1,w
  4575  05D8  3A80               	xorlw	128
  4576  05D9  00A0               	movwf	??_startUp
  4577  05DA  3080               	movlw	128
  4578  05DB  0220               	subwf	??_startUp,w
  4579  05DC  1D03               	skipz
  4580  05DD  2DE0               	goto	u2145
  4581  05DE  3005               	movlw	5
  4582  05DF  0222               	subwf	startUp@i,w
  4583  05E0                     u2145:	
  4584  05E0  1803               	btfsc	3,0
  4585  05E1  0008               	return
  4586                           
  4587                           ;main.c: 255: setLEDColor(0, 180, 230);
  4588  05E2  30B4               	movlw	180
  4589  05E3  0020               	movlb	0	; select bank0
  4590  05E4  00A0               	movwf	??_startUp
  4591  05E5  0820               	movf	??_startUp,w
  4592  05E6  00F3               	movwf	setLEDColor@green
  4593  05E7  30E6               	movlw	230
  4594  05E8  00A1               	movwf	??_startUp+1
  4595  05E9  0821               	movf	??_startUp+1,w
  4596  05EA  00F4               	movwf	setLEDColor@blue
  4597  05EB  3000               	movlw	0
  4598  05EC  318F  2773  3185   	fcall	_setLEDColor
  4599                           
  4600                           ;main.c: 256: _delay((unsigned long)((100)*(4000000/4000.0)));
  4601  05EF  3082               	movlw	130
  4602  05F0  0020               	movlb	0	; select bank0
  4603  05F1  00A0               	movwf	??_startUp
  4604  05F2  30DD               	movlw	221
  4605  05F3                     u2327:	
  4606  05F3  0B89               	decfsz	9,f
  4607  05F4  2DF3               	goto	u2327
  4608  05F5  0BA0               	decfsz	??_startUp,f
  4609  05F6  2DF3               	goto	u2327
  4610  05F7  3200               	nop2
  4611                           
  4612                           ;main.c: 257: setLEDColor(0, 0, 0);
  4613  05F8  01F3               	clrf	setLEDColor@green
  4614  05F9  01F4               	clrf	setLEDColor@blue
  4615  05FA  3000               	movlw	0
  4616  05FB  318F  2773  3185   	fcall	_setLEDColor
  4617                           
  4618                           ;main.c: 258: _delay((unsigned long)((100)*(4000000/4000.0)));
  4619  05FE  3082               	movlw	130
  4620  05FF  0020               	movlb	0	; select bank0
  4621  0600  00A0               	movwf	??_startUp
  4622  0601  30DD               	movlw	221
  4623  0602                     u2337:	
  4624  0602  0B89               	decfsz	9,f
  4625  0603  2E02               	goto	u2337
  4626  0604  0BA0               	decfsz	??_startUp,f
  4627  0605  2E02               	goto	u2337
  4628  0606  3200               	nop2
  4629  0607  3001               	movlw	1
  4630  0608  0020               	movlb	0	; select bank0
  4631  0609  07A2               	addwf	startUp@i,f
  4632  060A  3000               	movlw	0
  4633  060B  3DA3               	addwfc	startUp@i+1,f
  4634  060C  2DD7               	goto	L1
  4635  060D                     __end_of_startUp:	
  4636                           
  4637                           	psect	text2
  4638  07C8                     __ptext2:	
  4639 ;; *************** function _readPersistentState *****************
  4640 ;; Defined at:
  4641 ;;		line 115 in file "main.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;		None
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;		None
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      void 
  4648 ;; Registers used:
  4649 ;;		wreg, fsr0l, fsr0h, pclath
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4655 ;;      Params:         0       0       0       0       0       0       0       0
  4656 ;;      Locals:         0       0       0       0       0       0       0       0
  4657 ;;      Temps:          2       0       0       0       0       0       0       0
  4658 ;;      Totals:         2       0       0       0       0       0       0       0
  4659 ;;Total ram usage:        2 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    4
  4662 ;; This function calls:
  4663 ;;		Nothing
  4664 ;; This function is called by:
  4665 ;;		_main
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           
  4670                           ;psect for function _readPersistentState
  4671  07C8                     _readPersistentState:	
  4672                           
  4673                           ;main.c: 117: currentIndex = HEF_persistent_state.currentIndex;
  4674                           
  4675                           ;incstack = 0
  4676                           ; Regs used in _readPersistentState: [wreg-fsr0h+pclath]
  4677  07C8  30E0               	movlw	224
  4678  07C9  0084               	movwf	4
  4679  07CA  308F               	movlw	143
  4680  07CB  0085               	movwf	5
  4681  07CC  0800               	movf	0,w	;code access
  4682  07CD  00F3               	movwf	??_readPersistentState
  4683  07CE  01F4               	clrf	??_readPersistentState+1
  4684  07CF  0873               	movf	??_readPersistentState,w
  4685  07D0  0021               	movlb	1	; select bank1
  4686  07D1  00D5               	movwf	_currentIndex^(0+128)
  4687  07D2  0874               	movf	??_readPersistentState+1,w
  4688  07D3  00D6               	movwf	(_currentIndex+1)^(0+128)
  4689                           
  4690                           ;main.c: 118: frequencyIndex = HEF_persistent_state.frequencyIndex;
  4691  07D4  30E1               	movlw	225
  4692  07D5  0084               	movwf	4
  4693  07D6  308F               	movlw	143
  4694  07D7  0085               	movwf	5
  4695  07D8  0800               	movf	0,w	;code access
  4696  07D9  00F3               	movwf	??_readPersistentState
  4697  07DA  01F4               	clrf	??_readPersistentState+1
  4698  07DB  0873               	movf	??_readPersistentState,w
  4699  07DC  00D3               	movwf	_frequencyIndex^(0+128)
  4700  07DD  0874               	movf	??_readPersistentState+1,w
  4701  07DE  00D4               	movwf	(_frequencyIndex+1)^(0+128)
  4702                           
  4703                           ;main.c: 119: dc_frequency_flag = HEF_persistent_state.dc_frequency_flag;
  4704  07DF  30E2               	movlw	226
  4705  07E0  0084               	movwf	4
  4706  07E1  308F               	movlw	143
  4707  07E2  0085               	movwf	5
  4708  07E3  0800               	movf	0,w	;code access
  4709  07E4  00F3               	movwf	??_readPersistentState
  4710  07E5  0873               	movf	??_readPersistentState,w
  4711  07E6  00FA               	movwf	_dc_frequency_flag
  4712  07E7  0008               	return
  4713  07E8                     __end_of_readPersistentState:	
  4714                           
  4715                           	psect	text3
  4716  0054                     __ptext3:	
  4717 ;; *************** function _process_remote_command *****************
  4718 ;; Defined at:
  4719 ;;		line 374 in file "main.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  code            1    wreg     PTR struct .
  4722 ;;		 -> ir_code(6), 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  code            1    3[BANK1 ] PTR struct .
  4725 ;;		 -> ir_code(6), 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  1    wreg      void 
  4728 ;; Registers used:
  4729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4735 ;;      Params:         0       0       0       0       0       0       0       0
  4736 ;;      Locals:         0       0       1       0       0       0       0       0
  4737 ;;      Temps:          0       0       3       0       0       0       0       0
  4738 ;;      Totals:         0       0       4       0       0       0       0       0
  4739 ;;Total ram usage:        4 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    8
  4742 ;; This function calls:
  4743 ;;		_battery_voltage
  4744 ;;		_printf
  4745 ;;		_selectCurrent
  4746 ;;		_selectDecrease
  4747 ;;		_selectFrequency
  4748 ;;		_selectIncrease
  4749 ;;		_selectResetValue
  4750 ;;		_selectSomething
  4751 ;;		_setCurrent
  4752 ;;		_setFrequency
  4753 ;;		_setLEDColor
  4754 ;;		_writePersistentState
  4755 ;; This function is called by:
  4756 ;;		_main
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           
  4761                           ;psect for function _process_remote_command
  4762  0054                     _process_remote_command:	
  4763                           
  4764                           ;incstack = 0
  4765                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4766                           ;process_remote_command@code stored from wreg
  4767  0054  0021               	movlb	1	; select bank1
  4768  0055  00E9               	movwf	process_remote_command@code^(0+128)
  4769                           
  4770                           ;main.c: 375: setLEDColor(0, 0, 0);
  4771  0056  01F3               	clrf	setLEDColor@green
  4772  0057  01F4               	clrf	setLEDColor@blue
  4773  0058  3000               	movlw	0
  4774  0059  318F  2773  3180   	fcall	_setLEDColor
  4775                           
  4776                           ;main.c: 377: switch(code->command){
  4777  005C  2986               	goto	l3283
  4778  005D                     l3177:	
  4779                           ;main.c: 378: case 0xa0:
  4780                           
  4781                           
  4782                           ;main.c: 379: if(STATE_CURRENT == interfaceState){
  4783  005D  0378               	decf	_interfaceState,w
  4784  005E  1D03               	btfss	3,2
  4785  005F  289D               	goto	l3193
  4786                           
  4787                           ;main.c: 380: currentIndex++;
  4788  0060  3001               	movlw	1
  4789  0061  0021               	movlb	1	; select bank1
  4790  0062  07D5               	addwf	_currentIndex^(0+128),f
  4791  0063  3000               	movlw	0
  4792  0064  3DD6               	addwfc	(_currentIndex+1)^(0+128),f
  4793                           
  4794                           ;main.c: 381: if (currentIndex > maxCurrentIndex - 1)
  4795  0065  0822               	movf	_maxCurrentIndex^(0+128),w
  4796  0066  3EFF               	addlw	255
  4797  0067  00E6               	movwf	??_process_remote_command^(0+128)
  4798  0068  30FF               	movlw	255
  4799  0069  3D23               	addwfc	(_maxCurrentIndex+1)^(0+128),w
  4800  006A  00E7               	movwf	(??_process_remote_command+1)^(0+128)
  4801  006B  0867               	movf	(??_process_remote_command+1)^(0+128),w
  4802  006C  3A80               	xorlw	128
  4803  006D  00E8               	movwf	(??_process_remote_command+2)^(0+128)
  4804  006E  0856               	movf	(_currentIndex+1)^(0+128),w
  4805  006F  3A80               	xorlw	128
  4806  0070  0268               	subwf	(??_process_remote_command+2)^(0+128),w
  4807  0071  1D03               	skipz
  4808  0072  2875               	goto	u2175
  4809  0073  0855               	movf	_currentIndex^(0+128),w
  4810  0074  0266               	subwf	??_process_remote_command^(0+128),w
  4811  0075                     u2175:	
  4812  0075  1803               	skipnc
  4813  0076  2882               	goto	l3187
  4814                           
  4815                           ;main.c: 382: {
  4816                           ;main.c: 383: currentIndex = maxCurrentIndex - 1;
  4817  0077  0021               	movlb	1	; select bank1
  4818  0078  0822               	movf	_maxCurrentIndex^(0+128),w
  4819  0079  3EFF               	addlw	255
  4820  007A  00D5               	movwf	_currentIndex^(0+128)
  4821  007B  30FF               	movlw	255
  4822  007C  3D23               	addwfc	(_maxCurrentIndex+1)^(0+128),w
  4823  007D  00D6               	movwf	(_currentIndex+1)^(0+128)
  4824                           
  4825                           ;main.c: 384: selectSomething();
  4826  007E  3185  2542  3180   	fcall	_selectSomething
  4827                           
  4828                           ;main.c: 385: } else {
  4829  0081  2885               	goto	l3189
  4830  0082                     l3187:	
  4831                           
  4832                           ;main.c: 386: selectIncrease();
  4833  0082  3187  2763  3180   	fcall	_selectIncrease
  4834  0085                     l3189:	
  4835                           
  4836                           ;main.c: 387: }
  4837                           ;main.c: 388: setCurrent(currentValue[currentIndex], battery_voltage());
  4838  0085  0021               	movlb	1	; select bank1
  4839  0086  3555               	lslf	_currentIndex^(0+128),w
  4840  0087  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4841  0088  0086               	movwf	6
  4842  0089  0187               	clrf	7
  4843  008A  3F40               	moviw [0]fsr1
  4844  008B  0020               	movlb	0	; select bank0
  4845  008C  00B9               	movwf	setCurrent@microamps
  4846  008D  3F41               	moviw [1]fsr1
  4847  008E  00BA               	movwf	setCurrent@microamps+1
  4848  008F  3186  2670  3180   	fcall	_battery_voltage
  4849  0092  0020               	movlb	0	; select bank0
  4850  0093  0838               	movf	?_battery_voltage+1,w
  4851  0094  00BC               	movwf	setCurrent@Vdd_mv+1
  4852  0095  0837               	movf	?_battery_voltage,w
  4853  0096  00BB               	movwf	setCurrent@Vdd_mv
  4854  0097  3181  21D4  3180   	fcall	_setCurrent
  4855                           
  4856                           ;main.c: 389: writePersistentState();
  4857  009A  3183  23DA  3180   	fcall	_writePersistentState
  4858  009D                     l3193:	
  4859                           
  4860                           ;main.c: 390: }
  4861                           ;main.c: 391: if(STATE_FREQUENCY == interfaceState){
  4862  009D  3002               	movlw	2
  4863  009E  0678               	xorwf	_interfaceState,w
  4864  009F  1D03               	btfss	3,2
  4865  00A0  28D6               	goto	l3209
  4866                           
  4867                           ;main.c: 392: frequencyIndex++;
  4868  00A1  3001               	movlw	1
  4869  00A2  0021               	movlb	1	; select bank1
  4870  00A3  07D3               	addwf	_frequencyIndex^(0+128),f
  4871  00A4  3000               	movlw	0
  4872  00A5  3DD4               	addwfc	(_frequencyIndex+1)^(0+128),f
  4873                           
  4874                           ;main.c: 393: if (frequencyIndex > maxFrequencyIndex - 1)
  4875  00A6  0820               	movf	_maxFrequencyIndex^(0+128),w
  4876  00A7  3EFF               	addlw	255
  4877  00A8  00E6               	movwf	??_process_remote_command^(0+128)
  4878  00A9  30FF               	movlw	255
  4879  00AA  3D21               	addwfc	(_maxFrequencyIndex+1)^(0+128),w
  4880  00AB  00E7               	movwf	(??_process_remote_command+1)^(0+128)
  4881  00AC  0867               	movf	(??_process_remote_command+1)^(0+128),w
  4882  00AD  3A80               	xorlw	128
  4883  00AE  00E8               	movwf	(??_process_remote_command+2)^(0+128)
  4884  00AF  0854               	movf	(_frequencyIndex+1)^(0+128),w
  4885  00B0  3A80               	xorlw	128
  4886  00B1  0268               	subwf	(??_process_remote_command+2)^(0+128),w
  4887  00B2  1D03               	skipz
  4888  00B3  28B6               	goto	u2195
  4889  00B4  0853               	movf	_frequencyIndex^(0+128),w
  4890  00B5  0266               	subwf	??_process_remote_command^(0+128),w
  4891  00B6                     u2195:	
  4892  00B6  1803               	skipnc
  4893  00B7  28C3               	goto	l3203
  4894                           
  4895                           ;main.c: 394: {
  4896                           ;main.c: 395: frequencyIndex = maxFrequencyIndex - 1;
  4897  00B8  0021               	movlb	1	; select bank1
  4898  00B9  0820               	movf	_maxFrequencyIndex^(0+128),w
  4899  00BA  3EFF               	addlw	255
  4900  00BB  00D3               	movwf	_frequencyIndex^(0+128)
  4901  00BC  30FF               	movlw	255
  4902  00BD  3D21               	addwfc	(_maxFrequencyIndex+1)^(0+128),w
  4903  00BE  00D4               	movwf	(_frequencyIndex+1)^(0+128)
  4904                           
  4905                           ;main.c: 396: selectSomething();
  4906  00BF  3185  2542  3180   	fcall	_selectSomething
  4907                           
  4908                           ;main.c: 397: } else {
  4909  00C2  28C6               	goto	l3205
  4910  00C3                     l3203:	
  4911                           
  4912                           ;main.c: 398: selectIncrease();
  4913  00C3  3187  2763  3180   	fcall	_selectIncrease
  4914  00C6                     l3205:	
  4915                           
  4916                           ;main.c: 399: }
  4917                           ;main.c: 400: setFrequency(frequencyValue[frequencyIndex]);
  4918  00C6  0021               	movlb	1	; select bank1
  4919  00C7  3553               	lslf	_frequencyIndex^(0+128),w
  4920  00C8  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  4921  00C9  0086               	movwf	6
  4922  00CA  0187               	clrf	7
  4923  00CB  3F40               	moviw [0]fsr1
  4924  00CC  0020               	movlb	0	; select bank0
  4925  00CD  00B7               	movwf	setFrequency@frequency_hz
  4926  00CE  3F41               	moviw [1]fsr1
  4927  00CF  00B8               	movwf	setFrequency@frequency_hz+1
  4928  00D0  3184  243F  3180   	fcall	_setFrequency
  4929                           
  4930                           ;main.c: 401: writePersistentState();
  4931  00D3  3183  23DA  3180   	fcall	_writePersistentState
  4932  00D6                     l3209:	
  4933                           
  4934                           ;main.c: 402: }
  4935                           ;main.c: 403: if(STATE_RUNNING == interfaceState){
  4936  00D6  0878               	movf	_interfaceState,w
  4937  00D7  1D03               	btfss	3,2
  4938  00D8  28DC               	goto	l3213
  4939                           
  4940                           ;main.c: 404: selectSomething();
  4941  00D9  3185  2542  3180   	fcall	_selectSomething
  4942  00DC                     l3213:	
  4943                           
  4944                           ;main.c: 405: }
  4945                           ;main.c: 406: if(STATE_LOWBATTERY == interfaceState){
  4946  00DC  3003               	movlw	3
  4947  00DD  0678               	xorwf	_interfaceState,w
  4948  00DE  1D03               	btfss	3,2
  4949  00DF  29B4               	goto	l3285
  4950                           
  4951                           ;main.c: 407: selectSomething();
  4952  00E0  3185  2542  3180   	fcall	_selectSomething
  4953                           
  4954                           ;main.c: 408: }
  4955                           ;main.c: 409: break;
  4956  00E3  29B4               	goto	l3285
  4957  00E4                     l3217:	
  4958                           ;main.c: 410: case 0xb0:
  4959                           
  4960                           
  4961                           ;main.c: 411: if(STATE_CURRENT == interfaceState){
  4962  00E4  0378               	decf	_interfaceState,w
  4963  00E5  1D03               	btfss	3,2
  4964  00E6  290F               	goto	l3233
  4965                           
  4966                           ;main.c: 412: currentIndex--;
  4967  00E7  30FF               	movlw	255
  4968  00E8  0021               	movlb	1	; select bank1
  4969  00E9  07D5               	addwf	_currentIndex^(0+128),f
  4970  00EA  30FF               	movlw	255
  4971  00EB  3DD6               	addwfc	(_currentIndex+1)^(0+128),f
  4972                           
  4973                           ;main.c: 413: if (currentIndex < 0)
  4974  00EC  1FD6               	btfss	(_currentIndex+1)^(0+128),7
  4975  00ED  28F4               	goto	l3227
  4976                           
  4977                           ;main.c: 414: {
  4978                           ;main.c: 415: currentIndex = 0;
  4979  00EE  01D5               	clrf	_currentIndex^(0+128)
  4980  00EF  01D6               	clrf	(_currentIndex+1)^(0+128)
  4981                           
  4982                           ;main.c: 416: selectSomething();
  4983  00F0  3185  2542  3180   	fcall	_selectSomething
  4984                           
  4985                           ;main.c: 417: } else {
  4986  00F3  28F7               	goto	l3229
  4987  00F4                     l3227:	
  4988                           
  4989                           ;main.c: 418: selectDecrease();
  4990  00F4  318F  27C3  3180   	fcall	_selectDecrease
  4991  00F7                     l3229:	
  4992                           
  4993                           ;main.c: 419: }
  4994                           ;main.c: 420: setCurrent(currentValue[currentIndex], battery_voltage());
  4995  00F7  0021               	movlb	1	; select bank1
  4996  00F8  3555               	lslf	_currentIndex^(0+128),w
  4997  00F9  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4998  00FA  0086               	movwf	6
  4999  00FB  0187               	clrf	7
  5000  00FC  3F40               	moviw [0]fsr1
  5001  00FD  0020               	movlb	0	; select bank0
  5002  00FE  00B9               	movwf	setCurrent@microamps
  5003  00FF  3F41               	moviw [1]fsr1
  5004  0100  00BA               	movwf	setCurrent@microamps+1
  5005  0101  3186  2670  3180   	fcall	_battery_voltage
  5006  0104  0020               	movlb	0	; select bank0
  5007  0105  0838               	movf	?_battery_voltage+1,w
  5008  0106  00BC               	movwf	setCurrent@Vdd_mv+1
  5009  0107  0837               	movf	?_battery_voltage,w
  5010  0108  00BB               	movwf	setCurrent@Vdd_mv
  5011  0109  3181  21D4  3180   	fcall	_setCurrent
  5012                           
  5013                           ;main.c: 421: writePersistentState();
  5014  010C  3183  23DA  3180   	fcall	_writePersistentState
  5015  010F                     l3233:	
  5016                           
  5017                           ;main.c: 422: }
  5018                           ;main.c: 423: if(STATE_FREQUENCY == interfaceState){
  5019  010F  3002               	movlw	2
  5020  0110  0678               	xorwf	_interfaceState,w
  5021  0111  1D03               	btfss	3,2
  5022  0112  2933               	goto	l3249
  5023                           
  5024                           ;main.c: 424: frequencyIndex--;
  5025  0113  30FF               	movlw	255
  5026  0114  0021               	movlb	1	; select bank1
  5027  0115  07D3               	addwf	_frequencyIndex^(0+128),f
  5028  0116  30FF               	movlw	255
  5029  0117  3DD4               	addwfc	(_frequencyIndex+1)^(0+128),f
  5030                           
  5031                           ;main.c: 425: if (frequencyIndex < 0)
  5032  0118  1FD4               	btfss	(_frequencyIndex+1)^(0+128),7
  5033  0119  2920               	goto	l3243
  5034                           
  5035                           ;main.c: 426: {
  5036                           ;main.c: 427: frequencyIndex = 0;
  5037  011A  01D3               	clrf	_frequencyIndex^(0+128)
  5038  011B  01D4               	clrf	(_frequencyIndex+1)^(0+128)
  5039                           
  5040                           ;main.c: 428: selectSomething();
  5041  011C  3185  2542  3180   	fcall	_selectSomething
  5042                           
  5043                           ;main.c: 429: } else {
  5044  011F  2923               	goto	l3245
  5045  0120                     l3243:	
  5046                           
  5047                           ;main.c: 430: selectDecrease();
  5048  0120  318F  27C3  3180   	fcall	_selectDecrease
  5049  0123                     l3245:	
  5050                           
  5051                           ;main.c: 431: }
  5052                           ;main.c: 432: setFrequency(frequencyValue[frequencyIndex]);
  5053  0123  0021               	movlb	1	; select bank1
  5054  0124  3553               	lslf	_frequencyIndex^(0+128),w
  5055  0125  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  5056  0126  0086               	movwf	6
  5057  0127  0187               	clrf	7
  5058  0128  3F40               	moviw [0]fsr1
  5059  0129  0020               	movlb	0	; select bank0
  5060  012A  00B7               	movwf	setFrequency@frequency_hz
  5061  012B  3F41               	moviw [1]fsr1
  5062  012C  00B8               	movwf	setFrequency@frequency_hz+1
  5063  012D  3184  243F  3180   	fcall	_setFrequency
  5064                           
  5065                           ;main.c: 433: writePersistentState();
  5066  0130  3183  23DA  3180   	fcall	_writePersistentState
  5067  0133                     l3249:	
  5068                           
  5069                           ;main.c: 434: }
  5070                           ;main.c: 435: if(STATE_RUNNING == interfaceState){
  5071  0133  0878               	movf	_interfaceState,w
  5072  0134  1D03               	btfss	3,2
  5073  0135  2939               	goto	l3253
  5074                           
  5075                           ;main.c: 436: selectSomething();
  5076  0136  3185  2542  3180   	fcall	_selectSomething
  5077  0139                     l3253:	
  5078                           
  5079                           ;main.c: 437: }
  5080                           ;main.c: 438: if(STATE_LOWBATTERY == interfaceState){
  5081  0139  3003               	movlw	3
  5082  013A  0678               	xorwf	_interfaceState,w
  5083  013B  1D03               	btfss	3,2
  5084  013C  29B4               	goto	l3285
  5085                           
  5086                           ;main.c: 439: selectSomething();
  5087  013D  3185  2542  3180   	fcall	_selectSomething
  5088                           
  5089                           ;main.c: 440: }
  5090                           ;main.c: 441: break;
  5091  0140  29B4               	goto	l3285
  5092  0141                     l3257:	
  5093                           ;main.c: 442: case 0x50:
  5094                           
  5095                           
  5096                           ;main.c: 443: selectFrequency();
  5097  0141  3186  26CA  3180   	fcall	_selectFrequency
  5098                           
  5099                           ;main.c: 444: break;
  5100  0144  29B4               	goto	l3285
  5101  0145                     l3259:	
  5102                           ;main.c: 445: case 0x10:
  5103                           
  5104                           
  5105                           ;main.c: 446: selectCurrent();
  5106  0145  3187  2719  3180   	fcall	_selectCurrent
  5107                           
  5108                           ;main.c: 447: break;
  5109  0148  29B4               	goto	l3285
  5110  0149                     l3261:	
  5111                           ;main.c: 448: case 0x08:
  5112                           
  5113                           
  5114                           ;main.c: 449: LED_red = 0;
  5115  0149  0021               	movlb	1	; select bank1
  5116  014A  01DD               	clrf	_LED_red^(0+128)
  5117                           
  5118                           ;main.c: 450: LED_green = 255;
  5119  014B  30FF               	movlw	255
  5120  014C  00E6               	movwf	??_process_remote_command^(0+128)
  5121  014D  0866               	movf	??_process_remote_command^(0+128),w
  5122  014E  00DC               	movwf	_LED_green^(0+128)
  5123                           
  5124                           ;main.c: 451: LED_blue = 0;
  5125  014F  01DB               	clrf	_LED_blue^(0+128)
  5126                           
  5127                           ;main.c: 452: printf("\n reset select");
  5128  0150  304F               	movlw	low (STR_6| (0+32768))
  5129  0151  00F5               	movwf	printf@f
  5130  0152  3088               	movlw	high (STR_6| (0+32768))
  5131  0153  00F6               	movwf	printf@f+1
  5132  0154  318F  27A6  3180   	fcall	_printf
  5133                           
  5134                           ;main.c: 453: break;
  5135  0157  29B4               	goto	l3285
  5136  0158                     l3269:	
  5137                           ;main.c: 454: case 0x88:
  5138                           
  5139                           
  5140                           ;main.c: 455: frequencyIndex = 0;
  5141  0158  0021               	movlb	1	; select bank1
  5142  0159  01D3               	clrf	_frequencyIndex^(0+128)
  5143  015A  01D4               	clrf	(_frequencyIndex+1)^(0+128)
  5144                           
  5145                           ;main.c: 456: setFrequency(frequencyValue[frequencyIndex]);
  5146  015B  3553               	lslf	_frequencyIndex^(0+128),w
  5147  015C  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  5148  015D  0086               	movwf	6
  5149  015E  0187               	clrf	7
  5150  015F  3F40               	moviw [0]fsr1
  5151  0160  0020               	movlb	0	; select bank0
  5152  0161  00B7               	movwf	setFrequency@frequency_hz
  5153  0162  3F41               	moviw [1]fsr1
  5154  0163  00B8               	movwf	setFrequency@frequency_hz+1
  5155  0164  3184  243F  3180   	fcall	_setFrequency
  5156                           
  5157                           ;main.c: 457: selectResetValue();
  5158  0167  3187  273F  3180   	fcall	_selectResetValue
  5159                           
  5160                           ;main.c: 458: break;
  5161  016A  29B4               	goto	l3285
  5162  016B                     l3275:	
  5163                           ;main.c: 459: case 0x48:
  5164                           
  5165                           
  5166                           ;main.c: 460: currentIndex = 0;
  5167  016B  0021               	movlb	1	; select bank1
  5168  016C  01D5               	clrf	_currentIndex^(0+128)
  5169  016D  01D6               	clrf	(_currentIndex+1)^(0+128)
  5170                           
  5171                           ;main.c: 461: setCurrent(currentValue[currentIndex], battery_voltage());
  5172  016E  3555               	lslf	_currentIndex^(0+128),w
  5173  016F  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  5174  0170  0086               	movwf	6
  5175  0171  0187               	clrf	7
  5176  0172  3F40               	moviw [0]fsr1
  5177  0173  0020               	movlb	0	; select bank0
  5178  0174  00B9               	movwf	setCurrent@microamps
  5179  0175  3F41               	moviw [1]fsr1
  5180  0176  00BA               	movwf	setCurrent@microamps+1
  5181  0177  3186  2670  3180   	fcall	_battery_voltage
  5182  017A  0020               	movlb	0	; select bank0
  5183  017B  0838               	movf	?_battery_voltage+1,w
  5184  017C  00BC               	movwf	setCurrent@Vdd_mv+1
  5185  017D  0837               	movf	?_battery_voltage,w
  5186  017E  00BB               	movwf	setCurrent@Vdd_mv
  5187  017F  3181  21D4  3180   	fcall	_setCurrent
  5188                           
  5189                           ;main.c: 462: selectResetValue();
  5190  0182  3187  273F  3180   	fcall	_selectResetValue
  5191                           
  5192                           ;main.c: 479: }
  5193                           
  5194                           ;main.c: 478: break;
  5195                           
  5196                           ;main.c: 477: default:
  5197                           
  5198                           ;main.c: 476: break;
  5199                           
  5200                           ;main.c: 474: case 0x58:
  5201                           
  5202                           ;main.c: 473: break;
  5203                           
  5204                           ;main.c: 472: case 0x98:
  5205                           
  5206                           ;main.c: 471: break;
  5207                           
  5208                           ;main.c: 470: case 0x18:
  5209                           
  5210                           ;main.c: 469: break;
  5211                           
  5212                           ;main.c: 468: case 0x68:
  5213                           
  5214                           ;main.c: 467: break;
  5215                           
  5216                           ;main.c: 466: case 0xa8:
  5217                           
  5218                           ;main.c: 465: break;
  5219                           
  5220                           ;main.c: 464: case 0x28:
  5221                           
  5222                           ;main.c: 463: break;
  5223  0185  29B4               	goto	l3285
  5224  0186                     l3283:	
  5225  0186  0021               	movlb	1	; select bank1
  5226  0187  0869               	movf	process_remote_command@code^(0+128),w
  5227  0188  3E03               	addlw	3
  5228  0189  0086               	movwf	6
  5229  018A  0187               	clrf	7
  5230  018B  0801               	movf	1,w
  5231                           
  5232                           ; Switch size 1, requested type "space"
  5233                           ; Number of cases is 13, Range of values is 8 to 176
  5234                           ; switch strategies available:
  5235                           ; Name         Instructions Cycles
  5236                           ; simple_byte           40    21 (average)
  5237                           ; jumptable            263     9 (fixed)
  5238                           ;	Chosen strategy is simple_byte
  5239  018C  3A08               	xorlw	8	; case 8
  5240  018D  1903               	skipnz
  5241  018E  2949               	goto	l3261
  5242  018F  3A18               	xorlw	24	; case 16
  5243  0190  1903               	skipnz
  5244  0191  2945               	goto	l3259
  5245  0192  3A08               	xorlw	8	; case 24
  5246  0193  1903               	skipnz
  5247  0194  29B4               	goto	l3285
  5248  0195  3A30               	xorlw	48	; case 40
  5249  0196  1903               	skipnz
  5250  0197  29B4               	goto	l3285
  5251  0198  3A60               	xorlw	96	; case 72
  5252  0199  1903               	skipnz
  5253  019A  296B               	goto	l3275
  5254  019B  3A18               	xorlw	24	; case 80
  5255  019C  1903               	skipnz
  5256  019D  2941               	goto	l3257
  5257  019E  3A08               	xorlw	8	; case 88
  5258  019F  1903               	skipnz
  5259  01A0  29B4               	goto	l3285
  5260  01A1  3A30               	xorlw	48	; case 104
  5261  01A2  1903               	skipnz
  5262  01A3  29B4               	goto	l3285
  5263  01A4  3AE0               	xorlw	224	; case 136
  5264  01A5  1903               	skipnz
  5265  01A6  2958               	goto	l3269
  5266  01A7  3A10               	xorlw	16	; case 152
  5267  01A8  1903               	skipnz
  5268  01A9  29B4               	goto	l3285
  5269  01AA  3A38               	xorlw	56	; case 160
  5270  01AB  1903               	skipnz
  5271  01AC  285D               	goto	l3177
  5272  01AD  3A08               	xorlw	8	; case 168
  5273  01AE  1903               	skipnz
  5274  01AF  29B4               	goto	l3285
  5275  01B0  3A18               	xorlw	24	; case 176
  5276  01B1  1903               	skipnz
  5277  01B2  28E4               	goto	l3217
  5278  01B3  29B4               	goto	l3285
  5279  01B4                     l3285:	
  5280                           
  5281                           ;main.c: 480: setLEDColor(LED_red, LED_green, LED_blue);
  5282  01B4  0021               	movlb	1	; select bank1
  5283  01B5  085C               	movf	_LED_green^(0+128),w
  5284  01B6  00E6               	movwf	??_process_remote_command^(0+128)
  5285  01B7  0866               	movf	??_process_remote_command^(0+128),w
  5286  01B8  00F3               	movwf	setLEDColor@green
  5287  01B9  085B               	movf	_LED_blue^(0+128),w
  5288  01BA  00E7               	movwf	(??_process_remote_command+1)^(0+128)
  5289  01BB  0867               	movf	(??_process_remote_command+1)^(0+128),w
  5290  01BC  00F4               	movwf	setLEDColor@blue
  5291  01BD  085D               	movf	_LED_red^(0+128),w
  5292  01BE  318F  2773  3180   	fcall	_setLEDColor
  5293                           
  5294                           ;main.c: 481: _delay((unsigned long)((1000)*(4000000/4000.0)));
  5295  01C1  3006               	movlw	6
  5296  01C2  0021               	movlb	1	; select bank1
  5297  01C3  00E7               	movwf	(??_process_remote_command^(0+128)+1)
  5298  01C4  3013               	movlw	19
  5299  01C5  00E6               	movwf	??_process_remote_command^(0+128)
  5300  01C6  30AD               	movlw	173
  5301  01C7                     u2347:	
  5302  01C7  0B89               	decfsz	9,f
  5303  01C8  29C7               	goto	u2347
  5304  01C9  0BE6               	decfsz	??_process_remote_command^(0+128),f
  5305  01CA  29C7               	goto	u2347
  5306  01CB  0BE7               	decfsz	(??_process_remote_command^(0+128)+1),f
  5307  01CC  29C7               	goto	u2347
  5308  01CD  3200               	nop2
  5309                           
  5310                           ;main.c: 482: setLEDColor(0, 0, 0);
  5311  01CE  01F3               	clrf	setLEDColor@green
  5312  01CF  01F4               	clrf	setLEDColor@blue
  5313  01D0  3000               	movlw	0
  5314  01D1  318F  2773         	fcall	_setLEDColor
  5315  01D3  0008               	return
  5316  01D4                     __end_of_process_remote_command:	
  5317                           
  5318                           	psect	text4
  5319  03DA                     __ptext4:	
  5320 ;; *************** function _writePersistentState *****************
  5321 ;; Defined at:
  5322 ;;		line 127 in file "main.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;		None
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;  i               1   78[BANK0 ] unsigned char 
  5327 ;;  buf            64   14[BANK0 ] unsigned int [32]
  5328 ;;  idx             1   79[BANK0 ] unsigned char 
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      void 
  5331 ;; Registers used:
  5332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5338 ;;      Params:         0       0       0       0       0       0       0       0
  5339 ;;      Locals:         0      66       0       0       0       0       0       0
  5340 ;;      Temps:          0       4       0       0       0       0       0       0
  5341 ;;      Totals:         0      70       0       0       0       0       0       0
  5342 ;;Total ram usage:       70 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:    6
  5345 ;; This function calls:
  5346 ;;		_FLASH_WriteBlock
  5347 ;; This function is called by:
  5348 ;;		_process_remote_command
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           
  5353                           ;psect for function _writePersistentState
  5354  03DA                     _writePersistentState:	
  5355                           
  5356                           ;main.c: 130: uint16_t buf[32];
  5357                           ;main.c: 131: for (uint8_t i=0; i<32; i++){
  5358                           
  5359                           ;incstack = 0
  5360                           ; Regs used in _writePersistentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5361  03DA  0020               	movlb	0	; select bank0
  5362  03DB  01EE               	clrf	writePersistentState@i
  5363  03DC  3020               	movlw	32
  5364  03DD  026E               	subwf	writePersistentState@i,w
  5365  03DE  1803               	btfsc	3,0
  5366  03DF  2BEA               	goto	l3001
  5367  03E0                     l2995:	
  5368                           
  5369                           ;main.c: 132: buf[0] = 0;
  5370  03E0  01AE               	clrf	writePersistentState@buf
  5371  03E1  01AF               	clrf	writePersistentState@buf+1
  5372  03E2  3001               	movlw	1
  5373  03E3  00AA               	movwf	??_writePersistentState
  5374  03E4  082A               	movf	??_writePersistentState,w
  5375  03E5  07EE               	addwf	writePersistentState@i,f
  5376  03E6  3020               	movlw	32
  5377  03E7  026E               	subwf	writePersistentState@i,w
  5378  03E8  1C03               	skipc
  5379  03E9  2BE0               	goto	l2995
  5380  03EA                     l3001:	
  5381                           
  5382                           ;main.c: 133: }
  5383                           ;main.c: 136: uint8_t idx = 0;
  5384  03EA  01EF               	clrf	writePersistentState@idx
  5385                           
  5386                           ;main.c: 137: buf[idx++] = ((uint16_t)(0x3400 | (currentIndex & 0xff)));
  5387  03EB  30FF               	movlw	255
  5388  03EC  0021               	movlb	1	; select bank1
  5389  03ED  0555               	andwf	_currentIndex^(0+128),w
  5390  03EE  0020               	movlb	0	; select bank0
  5391  03EF  00AA               	movwf	??_writePersistentState
  5392  03F0  3000               	movlw	0
  5393  03F1  0021               	movlb	1	; select bank1
  5394  03F2  0556               	andwf	(_currentIndex+1)^(0+128),w
  5395  03F3  0020               	movlb	0	; select bank0
  5396  03F4  00AB               	movwf	??_writePersistentState+1
  5397  03F5  3000               	movlw	0
  5398  03F6  042A               	iorwf	??_writePersistentState,w
  5399  03F7  00AC               	movwf	??_writePersistentState+2
  5400  03F8  3034               	movlw	52
  5401  03F9  042B               	iorwf	??_writePersistentState+1,w
  5402  03FA  00AD               	movwf	??_writePersistentState+3
  5403  03FB  356F               	lslf	writePersistentState@idx,w
  5404  03FC  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  5405  03FD  0086               	movwf	6
  5406  03FE  0187               	clrf	7
  5407  03FF  082C               	movf	??_writePersistentState+2,w
  5408  0400  3FC0               	movwi [0]fsr1
  5409  0401  082D               	movf	??_writePersistentState+3,w
  5410  0402  3FC1               	movwi [1]fsr1
  5411  0403  3001               	movlw	1
  5412  0404  00AA               	movwf	??_writePersistentState
  5413  0405  082A               	movf	??_writePersistentState,w
  5414  0406  07EF               	addwf	writePersistentState@idx,f
  5415                           
  5416                           ;main.c: 138: buf[idx++] = ((uint16_t)(0x3400 | (frequencyIndex & 0xff)));
  5417  0407  30FF               	movlw	255
  5418  0408  0021               	movlb	1	; select bank1
  5419  0409  0553               	andwf	_frequencyIndex^(0+128),w
  5420  040A  0020               	movlb	0	; select bank0
  5421  040B  00AA               	movwf	??_writePersistentState
  5422  040C  3000               	movlw	0
  5423  040D  0021               	movlb	1	; select bank1
  5424  040E  0554               	andwf	(_frequencyIndex+1)^(0+128),w
  5425  040F  0020               	movlb	0	; select bank0
  5426  0410  00AB               	movwf	??_writePersistentState+1
  5427  0411  3000               	movlw	0
  5428  0412  042A               	iorwf	??_writePersistentState,w
  5429  0413  00AC               	movwf	??_writePersistentState+2
  5430  0414  3034               	movlw	52
  5431  0415  042B               	iorwf	??_writePersistentState+1,w
  5432  0416  00AD               	movwf	??_writePersistentState+3
  5433  0417  356F               	lslf	writePersistentState@idx,w
  5434  0418  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  5435  0419  0086               	movwf	6
  5436  041A  0187               	clrf	7
  5437  041B  082C               	movf	??_writePersistentState+2,w
  5438  041C  3FC0               	movwi [0]fsr1
  5439  041D  082D               	movf	??_writePersistentState+3,w
  5440  041E  3FC1               	movwi [1]fsr1
  5441  041F  3001               	movlw	1
  5442  0420  00AA               	movwf	??_writePersistentState
  5443  0421  082A               	movf	??_writePersistentState,w
  5444  0422  07EF               	addwf	writePersistentState@idx,f
  5445                           
  5446                           ;main.c: 139: buf[idx++] = ((uint16_t)(0x3400 | (dc_frequency_flag & 0xff)));
  5447  0423  3000               	movlw	0
  5448  0424  047A               	iorwf	_dc_frequency_flag,w
  5449  0425  00AA               	movwf	??_writePersistentState
  5450  0426  3034               	movlw	52
  5451  0427  00AB               	movwf	??_writePersistentState+1
  5452  0428  356F               	lslf	writePersistentState@idx,w
  5453  0429  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  5454  042A  0086               	movwf	6
  5455  042B  0187               	clrf	7
  5456  042C  082A               	movf	??_writePersistentState,w
  5457  042D  3FC0               	movwi [0]fsr1
  5458  042E  082B               	movf	??_writePersistentState+1,w
  5459  042F  3FC1               	movwi [1]fsr1
  5460  0430  3001               	movlw	1
  5461  0431  00AA               	movwf	??_writePersistentState
  5462  0432  082A               	movf	??_writePersistentState,w
  5463  0433  07EF               	addwf	writePersistentState@idx,f
  5464                           
  5465                           ;main.c: 141: FLASH_WriteBlock((uint16_t)&HEF_persistent_state, buf);
  5466  0434  30E0               	movlw	224
  5467  0435  00A0               	movwf	FLASH_WriteBlock@writeAddr
  5468  0436  300F               	movlw	15
  5469  0437  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
  5470  0438  302E               	movlw	(low (writePersistentState@buf| 0))& (0+255)
  5471  0439  00AA               	movwf	??_writePersistentState
  5472  043A  082A               	movf	??_writePersistentState,w
  5473  043B  00A2               	movwf	FLASH_WriteBlock@flashWordArray
  5474  043C  3183  2371         	fcall	_FLASH_WriteBlock
  5475  043E  0008               	return
  5476  043F                     __end_of_writePersistentState:	
  5477                           
  5478                           	psect	text5
  5479  0371                     __ptext5:	
  5480 ;; *************** function _FLASH_WriteBlock *****************
  5481 ;; Defined at:
  5482 ;;		line 94 in file "mcc_generated_files/memory.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  writeAddr       2    0[BANK0 ] unsigned int 
  5485 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned int 
  5486 ;;		 -> writePersistentState@buf(64), 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  blockStartAd    2    6[BANK0 ] unsigned int 
  5489 ;;  i               1    9[BANK0 ] unsigned char 
  5490 ;;  GIEBitValue     1    8[BANK0 ] unsigned char 
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  1    wreg      char 
  5493 ;; Registers used:
  5494 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5500 ;;      Params:         0       3       0       0       0       0       0       0
  5501 ;;      Locals:         0       4       0       0       0       0       0       0
  5502 ;;      Temps:          0       3       0       0       0       0       0       0
  5503 ;;      Totals:         0      10       0       0       0       0       0       0
  5504 ;;Total ram usage:       10 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    5
  5507 ;; This function calls:
  5508 ;;		_FLASH_EraseBlock
  5509 ;; This function is called by:
  5510 ;;		_writePersistentState
  5511 ;;		_FLASH_WriteWord
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           
  5516                           ;psect for function _FLASH_WriteBlock
  5517  0371                     _FLASH_WriteBlock:	
  5518                           
  5519                           ;memory.c: 96: uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x1000-1) ^ (32-1)));
  5520                           
  5521                           ;incstack = 0
  5522                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5523  0371  30E0               	movlw	224
  5524  0372  0020               	movlb	0	; select bank0
  5525  0373  0520               	andwf	FLASH_WriteBlock@writeAddr,w
  5526  0374  00A6               	movwf	FLASH_WriteBlock@blockStartAddr
  5527  0375  300F               	movlw	15
  5528  0376  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
  5529  0377  00A7               	movwf	FLASH_WriteBlock@blockStartAddr+1
  5530                           
  5531                           ;memory.c: 97: uint8_t GIEBitValue = INTCONbits.GIE;
  5532  0378  3000               	movlw	0
  5533  0379  1B8B               	btfsc	11,7	;volatile
  5534  037A  3001               	movlw	1
  5535  037B  00A8               	movwf	FLASH_WriteBlock@GIEBitValue
  5536                           
  5537                           ;memory.c: 98: uint8_t i;
  5538                           ;memory.c: 101: if( writeAddr != blockStartAddr )
  5539  037C  0827               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  5540  037D  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  5541  037E  1D03               	skipz
  5542  037F  2B82               	goto	u1745
  5543  0380  0826               	movf	FLASH_WriteBlock@blockStartAddr,w
  5544  0381  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
  5545  0382                     u1745:	
  5546  0382  1D03               	btfss	3,2
  5547  0383  0008               	return
  5548                           
  5549                           ;memory.c: 104: }
  5550                           ;memory.c: 106: INTCONbits.GIE = 0;
  5551                           
  5552                           ;memory.c: 102: {
  5553                           ;memory.c: 103: return -1;
  5554                           ;	Return value of _FLASH_WriteBlock is never used
  5555  0384  138B               	bcf	11,7	;volatile
  5556                           
  5557                           ;memory.c: 109: FLASH_EraseBlock(writeAddr);
  5558  0385  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  5559  0386  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  5560  0387  0820               	movf	FLASH_WriteBlock@writeAddr,w
  5561  0388  00F3               	movwf	FLASH_EraseBlock@startAddr
  5562  0389  318F  278A  3183   	fcall	_FLASH_EraseBlock
  5563                           
  5564                           ;memory.c: 112: PMCON1bits.CFGS = 0;
  5565  038C  0023               	movlb	3	; select bank3
  5566  038D  1315               	bcf	21,6	;volatile
  5567                           
  5568                           ;memory.c: 113: PMCON1bits.WREN = 1;
  5569  038E  1515               	bsf	21,2	;volatile
  5570                           
  5571                           ;memory.c: 114: PMCON1bits.LWLO = 1;
  5572  038F  1695               	bsf	21,5	;volatile
  5573                           
  5574                           ;memory.c: 116: for (i=0; i<32; i++)
  5575  0390  0020               	movlb	0	; select bank0
  5576  0391  01A9               	clrf	FLASH_WriteBlock@i
  5577  0392  3020               	movlw	32
  5578  0393  0229               	subwf	FLASH_WriteBlock@i,w
  5579  0394  1803               	btfsc	3,0
  5580  0395  2BD1               	goto	l448
  5581  0396                     l2751:	
  5582                           
  5583                           ;memory.c: 117: {
  5584                           ;memory.c: 119: PMADRL = (writeAddr & 0xFF);
  5585  0396  0820               	movf	FLASH_WriteBlock@writeAddr,w
  5586  0397  0023               	movlb	3	; select bank3
  5587  0398  0091               	movwf	17	;volatile
  5588                           
  5589                           ;memory.c: 121: PMADRH = ((writeAddr & 0xFF00) >> 8);
  5590  0399  0020               	movlb	0	; select bank0
  5591  039A  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  5592  039B  0023               	movlb	3	; select bank3
  5593  039C  0092               	movwf	18	;volatile
  5594                           
  5595                           ;memory.c: 124: PMDATL = flashWordArray[i];
  5596  039D  0020               	movlb	0	; select bank0
  5597  039E  3529               	lslf	FLASH_WriteBlock@i,w
  5598  039F  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  5599  03A0  00A3               	movwf	??_FLASH_WriteBlock
  5600  03A1  0823               	movf	??_FLASH_WriteBlock,w
  5601  03A2  0086               	movwf	6
  5602  03A3  0187               	clrf	7
  5603  03A4  0801               	movf	1,w
  5604  03A5  0023               	movlb	3	; select bank3
  5605  03A6  0093               	movwf	19	;volatile
  5606                           
  5607                           ;memory.c: 125: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
  5608  03A7  0020               	movlb	0	; select bank0
  5609  03A8  3529               	lslf	FLASH_WriteBlock@i,w
  5610  03A9  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  5611  03AA  00A3               	movwf	??_FLASH_WriteBlock
  5612  03AB  0823               	movf	??_FLASH_WriteBlock,w
  5613  03AC  0086               	movwf	6
  5614  03AD  0187               	clrf	7
  5615  03AE  3F40               	moviw [0]fsr1
  5616  03AF  00A4               	movwf	??_FLASH_WriteBlock+1
  5617  03B0  3F41               	moviw [1]fsr1
  5618  03B1  00A5               	movwf	??_FLASH_WriteBlock+2
  5619  03B2  0825               	movf	??_FLASH_WriteBlock+2,w
  5620  03B3  0023               	movlb	3	; select bank3
  5621  03B4  0094               	movwf	20	;volatile
  5622                           
  5623                           ;memory.c: 127: if(i == (32-1))
  5624  03B5  301F               	movlw	31
  5625  03B6  0020               	movlb	0	; select bank0
  5626  03B7  0629               	xorwf	FLASH_WriteBlock@i,w
  5627  03B8  1D03               	btfss	3,2
  5628  03B9  2BBC               	goto	l2763
  5629                           
  5630                           ;memory.c: 128: {
  5631                           ;memory.c: 130: PMCON1bits.LWLO = 0;
  5632  03BA  0023               	movlb	3	; select bank3
  5633  03BB  1295               	bcf	21,5	;volatile
  5634  03BC                     l2763:	
  5635                           
  5636                           ;memory.c: 131: }
  5637                           ;memory.c: 133: PMCON2 = 0x55;
  5638  03BC  3055               	movlw	85
  5639  03BD  0023               	movlb	3	; select bank3
  5640  03BE  0096               	movwf	22	;volsfr
  5641                           
  5642                           ;memory.c: 134: PMCON2 = 0xAA;
  5643  03BF  30AA               	movlw	170
  5644  03C0  0096               	movwf	22	;volsfr
  5645                           
  5646                           ;memory.c: 135: PMCON1bits.WR = 1;
  5647  03C1  1495               	bsf	21,1	;volatile
  5648                           
  5649                           ;memory.c: 136: __nop();
  5650  03C2  0000               	nop
  5651                           
  5652                           ;memory.c: 137: __nop();
  5653  03C3  0000               	nop
  5654                           
  5655                           ;memory.c: 139: writeAddr++;
  5656  03C4  3001               	movlw	1
  5657  03C5  0020               	movlb	0	; select bank0
  5658  03C6  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
  5659  03C7  3000               	movlw	0
  5660  03C8  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  5661  03C9  3001               	movlw	1
  5662  03CA  00A3               	movwf	??_FLASH_WriteBlock
  5663  03CB  0823               	movf	??_FLASH_WriteBlock,w
  5664  03CC  07A9               	addwf	FLASH_WriteBlock@i,f
  5665  03CD  3020               	movlw	32
  5666  03CE  0229               	subwf	FLASH_WriteBlock@i,w
  5667  03CF  1C03               	skipc
  5668  03D0  2B96               	goto	l2751
  5669  03D1                     l448:	
  5670                           
  5671                           ;memory.c: 140: }
  5672                           ;memory.c: 142: PMCON1bits.WREN = 0;
  5673  03D1  0023               	movlb	3	; select bank3
  5674  03D2  1115               	bcf	21,2	;volatile
  5675                           
  5676                           ;memory.c: 143: INTCONbits.GIE = GIEBitValue;
  5677  03D3  0020               	movlb	0	; select bank0
  5678  03D4  0C28               	rrf	FLASH_WriteBlock@GIEBitValue,w
  5679  03D5  1C03               	skipc
  5680  03D6  138B               	bcf	11,7	;volatile
  5681  03D7  1803               	skipnc
  5682  03D8  178B               	bsf	11,7	;volatile
  5683  03D9  0008               	return
  5684  03DA                     __end_of_FLASH_WriteBlock:	
  5685                           ;memory.c: 145: return 0;
  5686                           ;	Return value of _FLASH_WriteBlock is never used
  5687                           
  5688                           
  5689                           	psect	text6
  5690  0F8A                     __ptext6:	
  5691 ;; *************** function _FLASH_EraseBlock *****************
  5692 ;; Defined at:
  5693 ;;		line 148 in file "mcc_generated_files/memory.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  startAddr       2    3[COMMON] unsigned int 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      void 
  5700 ;; Registers used:
  5701 ;;		wreg, status,2, status,0
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5707 ;;      Params:         2       0       0       0       0       0       0       0
  5708 ;;      Locals:         1       0       0       0       0       0       0       0
  5709 ;;      Temps:          0       0       0       0       0       0       0       0
  5710 ;;      Totals:         3       0       0       0       0       0       0       0
  5711 ;;Total ram usage:        3 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    4
  5714 ;; This function calls:
  5715 ;;		Nothing
  5716 ;; This function is called by:
  5717 ;;		_FLASH_WriteBlock
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           
  5722                           ;psect for function _FLASH_EraseBlock
  5723  0F8A                     _FLASH_EraseBlock:	
  5724                           
  5725                           ;memory.c: 150: uint8_t GIEBitValue = INTCONbits.GIE;
  5726                           
  5727                           ;incstack = 0
  5728                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  5729  0F8A  3000               	movlw	0
  5730  0F8B  1B8B               	btfsc	11,7	;volatile
  5731  0F8C  3001               	movlw	1
  5732  0F8D  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
  5733                           
  5734                           ;memory.c: 153: INTCONbits.GIE = 0;
  5735  0F8E  138B               	bcf	11,7	;volatile
  5736                           
  5737                           ;memory.c: 155: PMADRL = (startAddr & 0xFF);
  5738  0F8F  0873               	movf	FLASH_EraseBlock@startAddr,w
  5739  0F90  0023               	movlb	3	; select bank3
  5740  0F91  0091               	movwf	17	;volatile
  5741                           
  5742                           ;memory.c: 157: PMADRH = ((startAddr & 0xFF00) >> 8);
  5743  0F92  0874               	movf	FLASH_EraseBlock@startAddr+1,w
  5744  0F93  0092               	movwf	18	;volatile
  5745                           
  5746                           ;memory.c: 160: PMCON1bits.CFGS = 0;
  5747  0F94  1315               	bcf	21,6	;volatile
  5748                           
  5749                           ;memory.c: 161: PMCON1bits.FREE = 1;
  5750  0F95  1615               	bsf	21,4	;volatile
  5751                           
  5752                           ;memory.c: 162: PMCON1bits.WREN = 1;
  5753  0F96  1515               	bsf	21,2	;volatile
  5754                           
  5755                           ;memory.c: 165: PMCON2 = 0x55;
  5756  0F97  3055               	movlw	85
  5757  0F98  0096               	movwf	22	;volsfr
  5758                           
  5759                           ;memory.c: 166: PMCON2 = 0xAA;
  5760  0F99  30AA               	movlw	170
  5761  0F9A  0096               	movwf	22	;volsfr
  5762                           
  5763                           ;memory.c: 167: PMCON1bits.WR = 1;
  5764  0F9B  1495               	bsf	21,1	;volatile
  5765                           
  5766                           ;memory.c: 168: __nop();
  5767  0F9C  0000               	nop
  5768                           
  5769                           ;memory.c: 169: __nop();
  5770  0F9D  0000               	nop
  5771                           
  5772                           ;memory.c: 171: PMCON1bits.WREN = 0;
  5773  0F9E  0023               	movlb	3	; select bank3
  5774  0F9F  1115               	bcf	21,2	;volatile
  5775                           
  5776                           ;memory.c: 172: INTCONbits.GIE = GIEBitValue;
  5777  0FA0  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
  5778  0FA1  1C03               	skipc
  5779  0FA2  138B               	bcf	11,7	;volatile
  5780  0FA3  1803               	skipnc
  5781  0FA4  178B               	bsf	11,7	;volatile
  5782  0FA5  0008               	return
  5783  0FA6                     __end_of_FLASH_EraseBlock:	
  5784                           
  5785                           	psect	text7
  5786  043F                     __ptext7:	
  5787 ;; *************** function _setFrequency *****************
  5788 ;; Defined at:
  5789 ;;		line 335 in file "main.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;  frequency_hz    2   23[BANK0 ] int 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  PR4_val         2   26[BANK0 ] int 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		wreg, status,2, status,0, pclath, cstack
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5803 ;;      Params:         0       2       0       0       0       0       0       0
  5804 ;;      Locals:         0       2       0       0       0       0       0       0
  5805 ;;      Temps:          0       1       0       0       0       0       0       0
  5806 ;;      Totals:         0       5       0       0       0       0       0       0
  5807 ;;Total ram usage:        5 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    5
  5810 ;; This function calls:
  5811 ;;		_TMR4_LoadPeriodRegister
  5812 ;;		___aldiv
  5813 ;;		___lmul
  5814 ;; This function is called by:
  5815 ;;		_process_remote_command
  5816 ;;		_main
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           
  5821                           ;psect for function _setFrequency
  5822  043F                     _setFrequency:	
  5823                           
  5824                           ;main.c: 351: int16_t PR4_val = 1000000L / (96L * frequency_hz);
  5825                           
  5826                           ;incstack = 0
  5827                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  5828  043F  0020               	movlb	0	; select bank0
  5829  0440  0837               	movf	setFrequency@frequency_hz,w
  5830  0441  00A0               	movwf	___lmul@multiplier
  5831  0442  0838               	movf	setFrequency@frequency_hz+1,w
  5832  0443  00A1               	movwf	___lmul@multiplier+1
  5833  0444  0D89               	rlf	9,f
  5834  0445  3B89               	subwfb	9,f
  5835  0446  0989               	comf	9,f
  5836  0447  00A2               	movwf	___lmul@multiplier+2
  5837  0448  00A3               	movwf	___lmul@multiplier+3
  5838  0449  3000               	movlw	0
  5839  044A  00A7               	movwf	___lmul@multiplicand+3
  5840  044B  3000               	movlw	0
  5841  044C  00A6               	movwf	___lmul@multiplicand+2
  5842  044D  3000               	movlw	0
  5843  044E  00A5               	movwf	___lmul@multiplicand+1
  5844  044F  3060               	movlw	96
  5845  0450  00A4               	movwf	___lmul@multiplicand
  5846  0451  3186  2640  3184   	fcall	___lmul
  5847  0454  0020               	movlb	0	; select bank0
  5848  0455  0823               	movf	?___lmul+3,w
  5849  0456  00AB               	movwf	___aldiv@divisor+3
  5850  0457  0822               	movf	?___lmul+2,w
  5851  0458  00AA               	movwf	___aldiv@divisor+2
  5852  0459  0821               	movf	?___lmul+1,w
  5853  045A  00A9               	movwf	___aldiv@divisor+1
  5854  045B  0820               	movf	?___lmul,w
  5855  045C  00A8               	movwf	___aldiv@divisor
  5856  045D  3000               	movlw	0
  5857  045E  00AF               	movwf	___aldiv@dividend+3
  5858  045F  300F               	movlw	15
  5859  0460  00AE               	movwf	___aldiv@dividend+2
  5860  0461  3042               	movlw	66
  5861  0462  00AD               	movwf	___aldiv@dividend+1
  5862  0463  3040               	movlw	64
  5863  0464  00AC               	movwf	___aldiv@dividend
  5864  0465  3182  227C  3184   	fcall	___aldiv
  5865  0468  0020               	movlb	0	; select bank0
  5866  0469  0829               	movf	?___aldiv+1,w
  5867  046A  00BB               	movwf	setFrequency@PR4_val+1
  5868  046B  0828               	movf	?___aldiv,w
  5869  046C  00BA               	movwf	setFrequency@PR4_val
  5870                           
  5871                           ;main.c: 352: if (PR4_val > 255){
  5872  046D  083B               	movf	setFrequency@PR4_val+1,w
  5873  046E  3A80               	xorlw	128
  5874  046F  00B9               	movwf	??_setFrequency
  5875  0470  3081               	movlw	129
  5876  0471  0239               	subwf	??_setFrequency,w
  5877  0472  1D03               	skipz
  5878  0473  2C76               	goto	u2115
  5879  0474  3000               	movlw	0
  5880  0475  023A               	subwf	setFrequency@PR4_val,w
  5881  0476                     u2115:	
  5882  0476  1C03               	skipc
  5883  0477  2C7D               	goto	l612
  5884                           
  5885                           ;main.c: 353: PR4_val = 255;
  5886  0478  30FF               	movlw	255
  5887  0479  0020               	movlb	0	; select bank0
  5888  047A  00BA               	movwf	setFrequency@PR4_val
  5889  047B  3000               	movlw	0
  5890  047C  00BB               	movwf	setFrequency@PR4_val+1
  5891  047D                     l612:	
  5892                           
  5893                           ;main.c: 354: }
  5894                           ;main.c: 355: if (PR4_val < 68){
  5895  047D  0020               	movlb	0	; select bank0
  5896  047E  083B               	movf	setFrequency@PR4_val+1,w
  5897  047F  3A80               	xorlw	128
  5898  0480  00B9               	movwf	??_setFrequency
  5899  0481  3080               	movlw	128
  5900  0482  0239               	subwf	??_setFrequency,w
  5901  0483  1D03               	skipz
  5902  0484  2C87               	goto	u2125
  5903  0485  3044               	movlw	68
  5904  0486  023A               	subwf	setFrequency@PR4_val,w
  5905  0487                     u2125:	
  5906  0487  1803               	skipnc
  5907  0488  2C8E               	goto	l3097
  5908                           
  5909                           ;main.c: 356: PR4_val = 68;
  5910  0489  3044               	movlw	68
  5911  048A  0020               	movlb	0	; select bank0
  5912  048B  00BA               	movwf	setFrequency@PR4_val
  5913  048C  3000               	movlw	0
  5914  048D  00BB               	movwf	setFrequency@PR4_val+1
  5915  048E                     l3097:	
  5916                           
  5917                           ;main.c: 357: }
  5918                           ;main.c: 362: (INTCONbits.GIE = 0);
  5919  048E  138B               	bcf	11,7	;volatile
  5920                           
  5921                           ;main.c: 363: TMR4_LoadPeriodRegister((uint16_t)PR4_val);
  5922  048F  0020               	movlb	0	; select bank0
  5923  0490  083A               	movf	setFrequency@PR4_val,w
  5924  0491  318E  26B5  3184   	fcall	_TMR4_LoadPeriodRegister
  5925                           
  5926                           ;main.c: 364: if (0 == frequency_hz){
  5927  0494  0020               	movlb	0	; select bank0
  5928  0495  0837               	movf	setFrequency@frequency_hz,w
  5929  0496  0438               	iorwf	setFrequency@frequency_hz+1,w
  5930  0497  1D03               	btfss	3,2
  5931  0498  2C9C               	goto	l3105
  5932                           
  5933                           ;main.c: 365: dc_frequency_flag = 1;
  5934  0499  01FA               	clrf	_dc_frequency_flag
  5935  049A  0AFA               	incf	_dc_frequency_flag,f
  5936                           
  5937                           ;main.c: 366: } else {
  5938  049B  2C9D               	goto	l3107
  5939  049C                     l3105:	
  5940                           
  5941                           ;main.c: 367: dc_frequency_flag = 0;
  5942  049C  01FA               	clrf	_dc_frequency_flag
  5943  049D                     l3107:	
  5944                           
  5945                           ;main.c: 368: }
  5946                           ;main.c: 369: (INTCONbits.GIE = 1);
  5947  049D  178B               	bsf	11,7	;volatile
  5948  049E  0008               	return
  5949  049F                     __end_of_setFrequency:	
  5950                           
  5951                           	psect	text8
  5952  0EB5                     __ptext8:	
  5953 ;; *************** function _TMR4_LoadPeriodRegister *****************
  5954 ;; Defined at:
  5955 ;;		line 115 in file "mcc_generated_files/tmr4.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  periodVal       1    wreg     unsigned char 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  periodVal       1    3[COMMON] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      void 
  5962 ;; Registers used:
  5963 ;;		wreg
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5969 ;;      Params:         0       0       0       0       0       0       0       0
  5970 ;;      Locals:         1       0       0       0       0       0       0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0
  5972 ;;      Totals:         1       0       0       0       0       0       0       0
  5973 ;;Total ram usage:        1 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    4
  5976 ;; This function calls:
  5977 ;;		Nothing
  5978 ;; This function is called by:
  5979 ;;		_setFrequency
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           
  5984                           ;psect for function _TMR4_LoadPeriodRegister
  5985  0EB5                     _TMR4_LoadPeriodRegister:	
  5986                           
  5987                           ;incstack = 0
  5988                           ; Regs used in _TMR4_LoadPeriodRegister: [wreg]
  5989                           ;TMR4_LoadPeriodRegister@periodVal stored from wreg
  5990  0EB5  00F3               	movwf	TMR4_LoadPeriodRegister@periodVal
  5991                           
  5992                           ;tmr4.c: 117: PR4 = periodVal;
  5993  0EB6  0873               	movf	TMR4_LoadPeriodRegister@periodVal,w
  5994  0EB7  0028               	movlb	8	; select bank8
  5995  0EB8  0096               	movwf	22	;volatile
  5996  0EB9  0008               	return
  5997  0EBA                     __end_of_TMR4_LoadPeriodRegister:	
  5998                           
  5999                           	psect	text9
  6000  01D4                     __ptext9:	
  6001 ;; *************** function _setCurrent *****************
  6002 ;; Defined at:
  6003 ;;		line 324 in file "main.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;  microamps       2   25[BANK0 ] int 
  6006 ;;  Vdd_mv          2   27[BANK0 ] int 
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;  DACValue        2   39[BANK0 ] int 
  6009 ;;  Vdac_mv         2   37[BANK0 ] int 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		wreg, status,2, status,0, pclath, cstack
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6019 ;;      Params:         0       4       0       0       0       0       0       0
  6020 ;;      Locals:         0       4       0       0       0       0       0       0
  6021 ;;      Temps:          0       8       0       0       0       0       0       0
  6022 ;;      Totals:         0      16       0       0       0       0       0       0
  6023 ;;Total ram usage:       16 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    5
  6026 ;; This function calls:
  6027 ;;		___aldiv
  6028 ;;		___awdiv
  6029 ;;		___lmul
  6030 ;; This function is called by:
  6031 ;;		_process_remote_command
  6032 ;;		_main
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           
  6037                           ;psect for function _setCurrent
  6038  01D4                     _setCurrent:	
  6039                           
  6040                           ;main.c: 326: int Vdac_mv = Vdd_mv - ((int32_t)(4700) * microamps + 500) / 1000;
  6041                           
  6042                           ;incstack = 0
  6043                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  6044  01D4  3000               	movlw	0
  6045  01D5  0020               	movlb	0	; select bank0
  6046  01D6  00AB               	movwf	___aldiv@divisor+3
  6047  01D7  3000               	movlw	0
  6048  01D8  00AA               	movwf	___aldiv@divisor+2
  6049  01D9  3003               	movlw	3
  6050  01DA  00A9               	movwf	___aldiv@divisor+1
  6051  01DB  30E8               	movlw	232
  6052  01DC  00A8               	movwf	___aldiv@divisor
  6053  01DD  30F4               	movlw	244
  6054  01DE  00BD               	movwf	??_setCurrent
  6055  01DF  3001               	movlw	1
  6056  01E0  00BE               	movwf	??_setCurrent+1
  6057  01E1  3000               	movlw	0
  6058  01E2  00BF               	movwf	??_setCurrent+2
  6059  01E3  3000               	movlw	0
  6060  01E4  00C0               	movwf	??_setCurrent+3
  6061  01E5  0839               	movf	setCurrent@microamps,w
  6062  01E6  00A0               	movwf	___lmul@multiplier
  6063  01E7  083A               	movf	setCurrent@microamps+1,w
  6064  01E8  00A1               	movwf	___lmul@multiplier+1
  6065  01E9  0D89               	rlf	9,f
  6066  01EA  3B89               	subwfb	9,f
  6067  01EB  0989               	comf	9,f
  6068  01EC  00A2               	movwf	___lmul@multiplier+2
  6069  01ED  00A3               	movwf	___lmul@multiplier+3
  6070  01EE  3000               	movlw	0
  6071  01EF  00A7               	movwf	___lmul@multiplicand+3
  6072  01F0  3000               	movlw	0
  6073  01F1  00A6               	movwf	___lmul@multiplicand+2
  6074  01F2  3012               	movlw	18
  6075  01F3  00A5               	movwf	___lmul@multiplicand+1
  6076  01F4  305C               	movlw	92
  6077  01F5  00A4               	movwf	___lmul@multiplicand
  6078  01F6  3186  2640  3181   	fcall	___lmul
  6079  01F9  0020               	movlb	0	; select bank0
  6080  01FA  0820               	movf	?___lmul,w
  6081  01FB  07BD               	addwf	??_setCurrent,f
  6082  01FC  0821               	movf	?___lmul+1,w
  6083  01FD  3DBE               	addwfc	??_setCurrent+1,f
  6084  01FE  0822               	movf	?___lmul+2,w
  6085  01FF  3DBF               	addwfc	??_setCurrent+2,f
  6086  0200  0823               	movf	?___lmul+3,w
  6087  0201  3DC0               	addwfc	??_setCurrent+3,f
  6088  0202  0840               	movf	??_setCurrent+3,w
  6089  0203  00AF               	movwf	___aldiv@dividend+3
  6090  0204  083F               	movf	??_setCurrent+2,w
  6091  0205  00AE               	movwf	___aldiv@dividend+2
  6092  0206  083E               	movf	??_setCurrent+1,w
  6093  0207  00AD               	movwf	___aldiv@dividend+1
  6094  0208  083D               	movf	??_setCurrent,w
  6095  0209  00AC               	movwf	___aldiv@dividend
  6096  020A  3182  227C  3181   	fcall	___aldiv
  6097  020D  0020               	movlb	0	; select bank0
  6098  020E  0928               	comf	?___aldiv,w
  6099  020F  00C1               	movwf	??_setCurrent+4
  6100  0210  0929               	comf	?___aldiv+1,w
  6101  0211  00C2               	movwf	??_setCurrent+5
  6102  0212  0AC1               	incf	??_setCurrent+4,f
  6103  0213  1903               	skipnz
  6104  0214  0AC2               	incf	??_setCurrent+5,f
  6105  0215  083B               	movf	setCurrent@Vdd_mv,w
  6106  0216  0741               	addwf	??_setCurrent+4,w
  6107  0217  00C5               	movwf	setCurrent@Vdac_mv
  6108  0218  083C               	movf	setCurrent@Vdd_mv+1,w
  6109  0219  3D42               	addwfc	??_setCurrent+5,w
  6110  021A  00C6               	movwf	setCurrent@Vdac_mv+1
  6111                           
  6112                           ;main.c: 327: int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  6113  021B  083B               	movf	setCurrent@Vdd_mv,w
  6114  021C  00A8               	movwf	___aldiv@divisor
  6115  021D  083C               	movf	setCurrent@Vdd_mv+1,w
  6116  021E  00A9               	movwf	___aldiv@divisor+1
  6117  021F  0D89               	rlf	9,f
  6118  0220  3B89               	subwfb	9,f
  6119  0221  0989               	comf	9,f
  6120  0222  00AA               	movwf	___aldiv@divisor+2
  6121  0223  00AB               	movwf	___aldiv@divisor+3
  6122  0224  3002               	movlw	2
  6123  0225  00F3               	movwf	___awdiv@divisor
  6124  0226  3000               	movlw	0
  6125  0227  00F4               	movwf	___awdiv@divisor+1
  6126  0228  083C               	movf	setCurrent@Vdd_mv+1,w
  6127  0229  00F6               	movwf	___awdiv@dividend+1
  6128  022A  083B               	movf	setCurrent@Vdd_mv,w
  6129  022B  00F5               	movwf	___awdiv@dividend
  6130  022C  3184  249F  3181   	fcall	___awdiv
  6131  022F  0873               	movf	?___awdiv,w
  6132  0230  0020               	movlb	0	; select bank0
  6133  0231  00BD               	movwf	??_setCurrent
  6134  0232  0874               	movf	?___awdiv+1,w
  6135  0233  00BE               	movwf	??_setCurrent+1
  6136  0234  3000               	movlw	0
  6137  0235  1BBE               	btfsc	??_setCurrent+1,7
  6138  0236  30FF               	movlw	255
  6139  0237  00BF               	movwf	??_setCurrent+2
  6140  0238  00C0               	movwf	??_setCurrent+3
  6141  0239  0845               	movf	setCurrent@Vdac_mv,w
  6142  023A  00C1               	movwf	??_setCurrent+4
  6143  023B  0846               	movf	setCurrent@Vdac_mv+1,w
  6144  023C  00C2               	movwf	??_setCurrent+5
  6145  023D  3000               	movlw	0
  6146  023E  1BC2               	btfsc	??_setCurrent+5,7
  6147  023F  30FF               	movlw	255
  6148  0240  00C3               	movwf	??_setCurrent+6
  6149  0241  00C4               	movwf	??_setCurrent+7
  6150  0242  3008               	movlw	8
  6151  0243                     u2085:	
  6152  0243  35C1               	lslf	??_setCurrent+4,f
  6153  0244  0DC2               	rlf	??_setCurrent+5,f
  6154  0245  0DC3               	rlf	??_setCurrent+6,f
  6155  0246  0DC4               	rlf	??_setCurrent+7,f
  6156  0247  0B89               	decfsz	9,f
  6157  0248  2A43               	goto	u2085
  6158  0249  0841               	movf	??_setCurrent+4,w
  6159  024A  07BD               	addwf	??_setCurrent,f
  6160  024B  0842               	movf	??_setCurrent+5,w
  6161  024C  3DBE               	addwfc	??_setCurrent+1,f
  6162  024D  0843               	movf	??_setCurrent+6,w
  6163  024E  3DBF               	addwfc	??_setCurrent+2,f
  6164  024F  0844               	movf	??_setCurrent+7,w
  6165  0250  3DC0               	addwfc	??_setCurrent+3,f
  6166  0251  0840               	movf	??_setCurrent+3,w
  6167  0252  00AF               	movwf	___aldiv@dividend+3
  6168  0253  083F               	movf	??_setCurrent+2,w
  6169  0254  00AE               	movwf	___aldiv@dividend+2
  6170  0255  083E               	movf	??_setCurrent+1,w
  6171  0256  00AD               	movwf	___aldiv@dividend+1
  6172  0257  083D               	movf	??_setCurrent,w
  6173  0258  00AC               	movwf	___aldiv@dividend
  6174  0259  3182  227C  3181   	fcall	___aldiv
  6175  025C  0020               	movlb	0	; select bank0
  6176  025D  0829               	movf	?___aldiv+1,w
  6177  025E  00C8               	movwf	setCurrent@DACValue+1
  6178  025F  0828               	movf	?___aldiv,w
  6179  0260  00C7               	movwf	setCurrent@DACValue
  6180                           
  6181                           ;main.c: 328: if(DACValue > 255){DACValue = 255;}
  6182  0261  0848               	movf	setCurrent@DACValue+1,w
  6183  0262  3A80               	xorlw	128
  6184  0263  00BD               	movwf	??_setCurrent
  6185  0264  3081               	movlw	129
  6186  0265  023D               	subwf	??_setCurrent,w
  6187  0266  1D03               	skipz
  6188  0267  2A6A               	goto	u2095
  6189  0268  3000               	movlw	0
  6190  0269  0247               	subwf	setCurrent@DACValue,w
  6191  026A                     u2095:	
  6192  026A  1C03               	skipc
  6193  026B  2A71               	goto	l3083
  6194  026C  30FF               	movlw	255
  6195  026D  0020               	movlb	0	; select bank0
  6196  026E  00C7               	movwf	setCurrent@DACValue
  6197  026F  3000               	movlw	0
  6198  0270  00C8               	movwf	setCurrent@DACValue+1
  6199  0271                     l3083:	
  6200                           
  6201                           ;main.c: 329: if(DACValue < 0){DACValue = 0;}
  6202  0271  0020               	movlb	0	; select bank0
  6203  0272  1FC8               	btfss	setCurrent@DACValue+1,7
  6204  0273  2A76               	goto	l3087
  6205  0274  01C7               	clrf	setCurrent@DACValue
  6206  0275  01C8               	clrf	setCurrent@DACValue+1
  6207  0276                     l3087:	
  6208                           
  6209                           ;main.c: 330: dac_value = (uint8_t)DACValue;
  6210  0276  0847               	movf	setCurrent@DACValue,w
  6211  0277  00BD               	movwf	??_setCurrent
  6212  0278  083D               	movf	??_setCurrent,w
  6213  0279  0021               	movlb	1	; select bank1
  6214  027A  00DE               	movwf	_dac_value^(0+128)
  6215  027B  0008               	return
  6216  027C                     __end_of_setCurrent:	
  6217                           
  6218                           	psect	text10
  6219  0640                     __ptext10:	
  6220 ;; *************** function ___lmul *****************
  6221 ;; Defined at:
  6222 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul32.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;  multiplier      4    0[BANK0 ] unsigned long 
  6225 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;  product         4    3[COMMON] unsigned long 
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  4    0[BANK0 ] unsigned long 
  6230 ;; Registers used:
  6231 ;;		wreg, status,2, status,0
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6237 ;;      Params:         0       8       0       0       0       0       0       0
  6238 ;;      Locals:         4       0       0       0       0       0       0       0
  6239 ;;      Temps:          0       0       0       0       0       0       0       0
  6240 ;;      Totals:         4       8       0       0       0       0       0       0
  6241 ;;Total ram usage:       12 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    4
  6244 ;; This function calls:
  6245 ;;		Nothing
  6246 ;; This function is called by:
  6247 ;;		_setCurrent
  6248 ;;		_setFrequency
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           
  6253                           ;psect for function ___lmul
  6254  0640                     ___lmul:	
  6255                           
  6256                           ;incstack = 0
  6257                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6258  0640  3000               	movlw	0
  6259  0641  00F6               	movwf	___lmul@product+3
  6260  0642  3000               	movlw	0
  6261  0643  00F5               	movwf	___lmul@product+2
  6262  0644  3000               	movlw	0
  6263  0645  00F4               	movwf	___lmul@product+1
  6264  0646  3000               	movlw	0
  6265  0647  00F3               	movwf	___lmul@product
  6266  0648                     l2797:	
  6267  0648  0020               	movlb	0	; select bank0
  6268  0649  1C20               	btfss	___lmul@multiplier,0
  6269  064A  2E53               	goto	l2801
  6270  064B  0824               	movf	___lmul@multiplicand,w
  6271  064C  07F3               	addwf	___lmul@product,f
  6272  064D  0825               	movf	___lmul@multiplicand+1,w
  6273  064E  3DF4               	addwfc	___lmul@product+1,f
  6274  064F  0826               	movf	___lmul@multiplicand+2,w
  6275  0650  3DF5               	addwfc	___lmul@product+2,f
  6276  0651  0827               	movf	___lmul@multiplicand+3,w
  6277  0652  3DF6               	addwfc	___lmul@product+3,f
  6278  0653                     l2801:	
  6279  0653  3001               	movlw	1
  6280  0654                     u1815:	
  6281  0654  35A4               	lslf	___lmul@multiplicand,f
  6282  0655  0DA5               	rlf	___lmul@multiplicand+1,f
  6283  0656  0DA6               	rlf	___lmul@multiplicand+2,f
  6284  0657  0DA7               	rlf	___lmul@multiplicand+3,f
  6285  0658  0B89               	decfsz	9,f
  6286  0659  2E54               	goto	u1815
  6287  065A  3001               	movlw	1
  6288  065B                     u1825:	
  6289  065B  36A3               	lsrf	___lmul@multiplier+3,f
  6290  065C  0CA2               	rrf	___lmul@multiplier+2,f
  6291  065D  0CA1               	rrf	___lmul@multiplier+1,f
  6292  065E  0CA0               	rrf	___lmul@multiplier,f
  6293  065F  0B89               	decfsz	9,f
  6294  0660  2E5B               	goto	u1825
  6295  0661  0823               	movf	___lmul@multiplier+3,w
  6296  0662  0422               	iorwf	___lmul@multiplier+2,w
  6297  0663  0421               	iorwf	___lmul@multiplier+1,w
  6298  0664  0420               	iorwf	___lmul@multiplier,w
  6299  0665  1D03               	skipz
  6300  0666  2E48               	goto	l2797
  6301  0667  0876               	movf	___lmul@product+3,w
  6302  0668  00A3               	movwf	?___lmul+3
  6303  0669  0875               	movf	___lmul@product+2,w
  6304  066A  00A2               	movwf	?___lmul+2
  6305  066B  0874               	movf	___lmul@product+1,w
  6306  066C  00A1               	movwf	?___lmul+1
  6307  066D  0873               	movf	___lmul@product,w
  6308  066E  00A0               	movwf	?___lmul
  6309  066F  0008               	return
  6310  0670                     __end_of___lmul:	
  6311                           
  6312                           	psect	text11
  6313  049F                     __ptext11:	
  6314 ;; *************** function ___awdiv *****************
  6315 ;; Defined at:
  6316 ;;		line 6 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  divisor         2    3[COMMON] int 
  6319 ;;  dividend        2    5[COMMON] int 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  quotient        2    2[BANK0 ] int 
  6322 ;;  sign            1    1[BANK0 ] unsigned char 
  6323 ;;  counter         1    0[BANK0 ] unsigned char 
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  2    3[COMMON] int 
  6326 ;; Registers used:
  6327 ;;		wreg, status,2, status,0
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6333 ;;      Params:         4       0       0       0       0       0       0       0
  6334 ;;      Locals:         0       4       0       0       0       0       0       0
  6335 ;;      Temps:          1       0       0       0       0       0       0       0
  6336 ;;      Totals:         5       4       0       0       0       0       0       0
  6337 ;;Total ram usage:        9 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:    4
  6340 ;; This function calls:
  6341 ;;		Nothing
  6342 ;; This function is called by:
  6343 ;;		_setCurrent
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           
  6348                           ;psect for function ___awdiv
  6349  049F                     ___awdiv:	
  6350                           
  6351                           ;incstack = 0
  6352                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6353  049F  0020               	movlb	0	; select bank0
  6354  04A0  01A1               	clrf	___awdiv@sign
  6355  04A1  1FF4               	btfss	___awdiv@divisor+1,7
  6356  04A2  2CAA               	goto	l2857
  6357  04A3  09F3               	comf	___awdiv@divisor,f
  6358  04A4  09F4               	comf	___awdiv@divisor+1,f
  6359  04A5  0AF3               	incf	___awdiv@divisor,f
  6360  04A6  1903               	skipnz
  6361  04A7  0AF4               	incf	___awdiv@divisor+1,f
  6362  04A8  01A1               	clrf	___awdiv@sign
  6363  04A9  0AA1               	incf	___awdiv@sign,f
  6364  04AA                     l2857:	
  6365  04AA  1FF6               	btfss	___awdiv@dividend+1,7
  6366  04AB  2CB5               	goto	l2863
  6367  04AC  09F5               	comf	___awdiv@dividend,f
  6368  04AD  09F6               	comf	___awdiv@dividend+1,f
  6369  04AE  0AF5               	incf	___awdiv@dividend,f
  6370  04AF  1903               	skipnz
  6371  04B0  0AF6               	incf	___awdiv@dividend+1,f
  6372  04B1  3001               	movlw	1
  6373  04B2  00F7               	movwf	??___awdiv
  6374  04B3  0877               	movf	??___awdiv,w
  6375  04B4  06A1               	xorwf	___awdiv@sign,f
  6376  04B5                     l2863:	
  6377  04B5  01A2               	clrf	___awdiv@quotient
  6378  04B6  01A3               	clrf	___awdiv@quotient+1
  6379  04B7  0873               	movf	___awdiv@divisor,w
  6380  04B8  0474               	iorwf	___awdiv@divisor+1,w
  6381  04B9  1903               	btfsc	3,2
  6382  04BA  2CE4               	goto	l2885
  6383  04BB  01A0               	clrf	___awdiv@counter
  6384  04BC  0AA0               	incf	___awdiv@counter,f
  6385  04BD                     l2873:	
  6386  04BD  1BF4               	btfsc	___awdiv@divisor+1,7
  6387  04BE  2CC9               	goto	l2875
  6388  04BF  3001               	movlw	1
  6389  04C0                     u1975:	
  6390  04C0  35F3               	lslf	___awdiv@divisor,f
  6391  04C1  0DF4               	rlf	___awdiv@divisor+1,f
  6392  04C2  0B89               	decfsz	9,f
  6393  04C3  2CC0               	goto	u1975
  6394  04C4  3001               	movlw	1
  6395  04C5  00F7               	movwf	??___awdiv
  6396  04C6  0877               	movf	??___awdiv,w
  6397  04C7  07A0               	addwf	___awdiv@counter,f
  6398  04C8  2CBD               	goto	l2873
  6399  04C9                     l2875:	
  6400  04C9  3001               	movlw	1
  6401  04CA                     u1995:	
  6402  04CA  35A2               	lslf	___awdiv@quotient,f
  6403  04CB  0DA3               	rlf	___awdiv@quotient+1,f
  6404  04CC  0B89               	decfsz	9,f
  6405  04CD  2CCA               	goto	u1995
  6406  04CE  0874               	movf	___awdiv@divisor+1,w
  6407  04CF  0276               	subwf	___awdiv@dividend+1,w
  6408  04D0  1D03               	skipz
  6409  04D1  2CD4               	goto	u2005
  6410  04D2  0873               	movf	___awdiv@divisor,w
  6411  04D3  0275               	subwf	___awdiv@dividend,w
  6412  04D4                     u2005:	
  6413  04D4  1C03               	skipc
  6414  04D5  2CDB               	goto	l2881
  6415  04D6  0873               	movf	___awdiv@divisor,w
  6416  04D7  02F5               	subwf	___awdiv@dividend,f
  6417  04D8  0874               	movf	___awdiv@divisor+1,w
  6418  04D9  3BF6               	subwfb	___awdiv@dividend+1,f
  6419  04DA  1422               	bsf	___awdiv@quotient,0
  6420  04DB                     l2881:	
  6421  04DB  3001               	movlw	1
  6422  04DC                     u2015:	
  6423  04DC  36F4               	lsrf	___awdiv@divisor+1,f
  6424  04DD  0CF3               	rrf	___awdiv@divisor,f
  6425  04DE  0B89               	decfsz	9,f
  6426  04DF  2CDC               	goto	u2015
  6427  04E0  3001               	movlw	1
  6428  04E1  02A0               	subwf	___awdiv@counter,f
  6429  04E2  1D03               	btfss	3,2
  6430  04E3  2CC9               	goto	l2875
  6431  04E4                     l2885:	
  6432  04E4  0821               	movf	___awdiv@sign,w
  6433  04E5  1903               	btfsc	3,2
  6434  04E6  2CEC               	goto	l2889
  6435  04E7  09A2               	comf	___awdiv@quotient,f
  6436  04E8  09A3               	comf	___awdiv@quotient+1,f
  6437  04E9  0AA2               	incf	___awdiv@quotient,f
  6438  04EA  1903               	skipnz
  6439  04EB  0AA3               	incf	___awdiv@quotient+1,f
  6440  04EC                     l2889:	
  6441  04EC  0823               	movf	___awdiv@quotient+1,w
  6442  04ED  00F4               	movwf	?___awdiv+1
  6443  04EE  0822               	movf	___awdiv@quotient,w
  6444  04EF  00F3               	movwf	?___awdiv
  6445  04F0  0008               	return
  6446  04F1                     __end_of___awdiv:	
  6447                           
  6448                           	psect	text12
  6449  0542                     __ptext12:	
  6450 ;; *************** function _selectSomething *****************
  6451 ;; Defined at:
  6452 ;;		line 262 in file "main.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;		None
  6455 ;; Auto vars:     Size  Location     Type
  6456 ;;		None
  6457 ;; Return value:  Size  Location     Type
  6458 ;;                  1    wreg      void 
  6459 ;; Registers used:
  6460 ;;		wreg, status,2, status,0, pclath, cstack
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6466 ;;      Params:         0       0       0       0       0       0       0       0
  6467 ;;      Locals:         0       0       0       0       0       0       0       0
  6468 ;;      Temps:          0       2       0       0       0       0       0       0
  6469 ;;      Totals:         0       2       0       0       0       0       0       0
  6470 ;;Total ram usage:        2 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; Hardware stack levels required when called:    5
  6473 ;; This function calls:
  6474 ;;		_setLEDColor
  6475 ;; This function is called by:
  6476 ;;		_process_remote_command
  6477 ;; This function uses a non-reentrant model
  6478 ;;
  6479                           
  6480                           
  6481                           ;psect for function _selectSomething
  6482  0542                     _selectSomething:	
  6483                           
  6484                           ;main.c: 264: setLEDColor(255, 0, 0);
  6485                           
  6486                           ;incstack = 0
  6487                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  6488  0542  01F3               	clrf	setLEDColor@green
  6489  0543  01F4               	clrf	setLEDColor@blue
  6490  0544  30FF               	movlw	255
  6491  0545  318F  2773  3185   	fcall	_setLEDColor
  6492                           
  6493                           ;main.c: 265: _delay((unsigned long)((500)*(4000000/4000.0)));
  6494  0548  3003               	movlw	3
  6495  0549  0020               	movlb	0	; select bank0
  6496  054A  00A1               	movwf	??_selectSomething+1
  6497  054B  308A               	movlw	138
  6498  054C  00A0               	movwf	??_selectSomething
  6499  054D  3055               	movlw	85
  6500  054E                     u2357:	
  6501  054E  0B89               	decfsz	9,f
  6502  054F  2D4E               	goto	u2357
  6503  0550  0BA0               	decfsz	??_selectSomething,f
  6504  0551  2D4E               	goto	u2357
  6505  0552  0BA1               	decfsz	??_selectSomething+1,f
  6506  0553  2D4E               	goto	u2357
  6507  0554  3200               	nop2
  6508                           
  6509                           ;main.c: 266: setLEDColor(0, 0, 0);
  6510  0555  01F3               	clrf	setLEDColor@green
  6511  0556  01F4               	clrf	setLEDColor@blue
  6512  0557  3000               	movlw	0
  6513  0558  318F  2773  3185   	fcall	_setLEDColor
  6514                           
  6515                           ;main.c: 267: _delay((unsigned long)((500)*(4000000/4000.0)));
  6516  055B  3003               	movlw	3
  6517  055C  0020               	movlb	0	; select bank0
  6518  055D  00A1               	movwf	??_selectSomething+1
  6519  055E  308A               	movlw	138
  6520  055F  00A0               	movwf	??_selectSomething
  6521  0560  3055               	movlw	85
  6522  0561                     u2367:	
  6523  0561  0B89               	decfsz	9,f
  6524  0562  2D61               	goto	u2367
  6525  0563  0BA0               	decfsz	??_selectSomething,f
  6526  0564  2D61               	goto	u2367
  6527  0565  0BA1               	decfsz	??_selectSomething+1,f
  6528  0566  2D61               	goto	u2367
  6529  0567  3200               	nop2
  6530                           
  6531                           ;main.c: 268: setLEDColor(255, 0, 0);
  6532  0568  01F3               	clrf	setLEDColor@green
  6533  0569  01F4               	clrf	setLEDColor@blue
  6534  056A  30FF               	movlw	255
  6535  056B  318F  2773  3185   	fcall	_setLEDColor
  6536                           
  6537                           ;main.c: 269: _delay((unsigned long)((500)*(4000000/4000.0)));
  6538  056E  3003               	movlw	3
  6539  056F  0020               	movlb	0	; select bank0
  6540  0570  00A1               	movwf	??_selectSomething+1
  6541  0571  308A               	movlw	138
  6542  0572  00A0               	movwf	??_selectSomething
  6543  0573  3055               	movlw	85
  6544  0574                     u2377:	
  6545  0574  0B89               	decfsz	9,f
  6546  0575  2D74               	goto	u2377
  6547  0576  0BA0               	decfsz	??_selectSomething,f
  6548  0577  2D74               	goto	u2377
  6549  0578  0BA1               	decfsz	??_selectSomething+1,f
  6550  0579  2D74               	goto	u2377
  6551  057A  3200               	nop2
  6552                           
  6553                           ;main.c: 270: setLEDColor(0, 0, 0);
  6554  057B  01F3               	clrf	setLEDColor@green
  6555  057C  01F4               	clrf	setLEDColor@blue
  6556  057D  3000               	movlw	0
  6557  057E  318F  2773  3185   	fcall	_setLEDColor
  6558                           
  6559                           ;main.c: 271: _delay((unsigned long)((500)*(4000000/4000.0)));
  6560  0581  3003               	movlw	3
  6561  0582  0020               	movlb	0	; select bank0
  6562  0583  00A1               	movwf	??_selectSomething+1
  6563  0584  308A               	movlw	138
  6564  0585  00A0               	movwf	??_selectSomething
  6565  0586  3055               	movlw	85
  6566  0587                     u2387:	
  6567  0587  0B89               	decfsz	9,f
  6568  0588  2D87               	goto	u2387
  6569  0589  0BA0               	decfsz	??_selectSomething,f
  6570  058A  2D87               	goto	u2387
  6571  058B  0BA1               	decfsz	??_selectSomething+1,f
  6572  058C  2D87               	goto	u2387
  6573  058D  3200               	nop2
  6574  058E  0008               	return
  6575  058F                     __end_of_selectSomething:	
  6576                           
  6577                           	psect	text13
  6578  073F                     __ptext13:	
  6579 ;; *************** function _selectResetValue *****************
  6580 ;; Defined at:
  6581 ;;		line 304 in file "main.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;		None
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;		None
  6586 ;; Return value:  Size  Location     Type
  6587 ;;                  1    wreg      void 
  6588 ;; Registers used:
  6589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6595 ;;      Params:         0       0       0       0       0       0       0       0
  6596 ;;      Locals:         0       0       0       0       0       0       0       0
  6597 ;;      Temps:          0       2       0       0       0       0       0       0
  6598 ;;      Totals:         0       2       0       0       0       0       0       0
  6599 ;;Total ram usage:        2 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    7
  6602 ;; This function calls:
  6603 ;;		_printf
  6604 ;;		_setLEDColor
  6605 ;; This function is called by:
  6606 ;;		_process_remote_command
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           
  6611                           ;psect for function _selectResetValue
  6612  073F                     _selectResetValue:	
  6613                           
  6614                           ;main.c: 305: setLEDColor(192, 255, 0);
  6615                           
  6616                           ;incstack = 0
  6617                           ; Regs used in _selectResetValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6618  073F  30FF               	movlw	255
  6619  0740  0020               	movlb	0	; select bank0
  6620  0741  00A5               	movwf	??_selectResetValue
  6621  0742  0825               	movf	??_selectResetValue,w
  6622  0743  00F3               	movwf	setLEDColor@green
  6623  0744  01F4               	clrf	setLEDColor@blue
  6624  0745  30C0               	movlw	192
  6625  0746  318F  2773  3187   	fcall	_setLEDColor
  6626                           
  6627                           ;main.c: 306: _delay((unsigned long)((500)*(4000000/4000.0)));
  6628  0749  3003               	movlw	3
  6629  074A  0020               	movlb	0	; select bank0
  6630  074B  00A6               	movwf	??_selectResetValue+1
  6631  074C  308A               	movlw	138
  6632  074D  00A5               	movwf	??_selectResetValue
  6633  074E  3055               	movlw	85
  6634  074F                     u2397:	
  6635  074F  0B89               	decfsz	9,f
  6636  0750  2F4F               	goto	u2397
  6637  0751  0BA5               	decfsz	??_selectResetValue,f
  6638  0752  2F4F               	goto	u2397
  6639  0753  0BA6               	decfsz	??_selectResetValue+1,f
  6640  0754  2F4F               	goto	u2397
  6641  0755  3200               	nop2
  6642                           
  6643                           ;main.c: 307: setLEDColor(0, 0, 0);
  6644  0756  01F3               	clrf	setLEDColor@green
  6645  0757  01F4               	clrf	setLEDColor@blue
  6646  0758  3000               	movlw	0
  6647  0759  318F  2773  3187   	fcall	_setLEDColor
  6648                           
  6649                           ;main.c: 308: printf("\n reset value selected");
  6650  075C  30E8               	movlw	low (STR_5| (0+32768))
  6651  075D  00F5               	movwf	printf@f
  6652  075E  3087               	movlw	high (STR_5| (0+32768))
  6653  075F  00F6               	movwf	printf@f+1
  6654  0760  318F  27A6         	fcall	_printf
  6655  0762  0008               	return
  6656  0763                     __end_of_selectResetValue:	
  6657                           
  6658                           	psect	text14
  6659  0763                     __ptext14:	
  6660 ;; *************** function _selectIncrease *****************
  6661 ;; Defined at:
  6662 ;;		line 290 in file "main.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;		None
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;		None
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  1    wreg      void 
  6669 ;; Registers used:
  6670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6676 ;;      Params:         0       0       0       0       0       0       0       0
  6677 ;;      Locals:         0       0       0       0       0       0       0       0
  6678 ;;      Temps:          0       2       0       0       0       0       0       0
  6679 ;;      Totals:         0       2       0       0       0       0       0       0
  6680 ;;Total ram usage:        2 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:    7
  6683 ;; This function calls:
  6684 ;;		_printf
  6685 ;;		_setLEDColor
  6686 ;; This function is called by:
  6687 ;;		_process_remote_command
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _selectIncrease
  6693  0763                     _selectIncrease:	
  6694                           
  6695                           ;main.c: 291: setLEDColor(0, 50, 255);
  6696                           
  6697                           ;incstack = 0
  6698                           ; Regs used in _selectIncrease: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6699  0763  3032               	movlw	50
  6700  0764  0020               	movlb	0	; select bank0
  6701  0765  00A5               	movwf	??_selectIncrease
  6702  0766  0825               	movf	??_selectIncrease,w
  6703  0767  00F3               	movwf	setLEDColor@green
  6704  0768  30FF               	movlw	255
  6705  0769  00A6               	movwf	??_selectIncrease+1
  6706  076A  0826               	movf	??_selectIncrease+1,w
  6707  076B  00F4               	movwf	setLEDColor@blue
  6708  076C  3000               	movlw	0
  6709  076D  318F  2773  3187   	fcall	_setLEDColor
  6710                           
  6711                           ;main.c: 292: _delay((unsigned long)((100)*(4000000/4000.0)));
  6712  0770  3082               	movlw	130
  6713  0771  0020               	movlb	0	; select bank0
  6714  0772  00A5               	movwf	??_selectIncrease
  6715  0773  30DD               	movlw	221
  6716  0774                     u2407:	
  6717  0774  0B89               	decfsz	9,f
  6718  0775  2F74               	goto	u2407
  6719  0776  0BA5               	decfsz	??_selectIncrease,f
  6720  0777  2F74               	goto	u2407
  6721  0778  3200               	nop2
  6722                           
  6723                           ;main.c: 293: setLEDColor(0, 0, 0);
  6724  0779  01F3               	clrf	setLEDColor@green
  6725  077A  01F4               	clrf	setLEDColor@blue
  6726  077B  3000               	movlw	0
  6727  077C  318F  2773  3187   	fcall	_setLEDColor
  6728                           
  6729                           ;main.c: 294: printf("\n increase selected");
  6730  077F  3028               	movlw	low (STR_3| (0+32768))
  6731  0780  00F5               	movwf	printf@f
  6732  0781  3088               	movlw	high (STR_3| (0+32768))
  6733  0782  00F6               	movwf	printf@f+1
  6734  0783  318F  27A6         	fcall	_printf
  6735  0785  0008               	return
  6736  0786                     __end_of_selectIncrease:	
  6737                           
  6738                           	psect	text15
  6739  06CA                     __ptext15:	
  6740 ;; *************** function _selectFrequency *****************
  6741 ;; Defined at:
  6742 ;;		line 274 in file "main.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;		None
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;		None
  6747 ;; Return value:  Size  Location     Type
  6748 ;;                  1    wreg      void 
  6749 ;; Registers used:
  6750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6756 ;;      Params:         0       0       0       0       0       0       0       0
  6757 ;;      Locals:         0       0       0       0       0       0       0       0
  6758 ;;      Temps:          0       2       0       0       0       0       0       0
  6759 ;;      Totals:         0       2       0       0       0       0       0       0
  6760 ;;Total ram usage:        2 bytes
  6761 ;; Hardware stack levels used:    1
  6762 ;; Hardware stack levels required when called:    7
  6763 ;; This function calls:
  6764 ;;		_printf
  6765 ;;		_setLEDColor
  6766 ;; This function is called by:
  6767 ;;		_process_remote_command
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           
  6772                           ;psect for function _selectFrequency
  6773  06CA                     _selectFrequency:	
  6774                           
  6775                           ;main.c: 275: interfaceState = STATE_FREQUENCY;
  6776                           
  6777                           ;incstack = 0
  6778                           ; Regs used in _selectFrequency: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6779  06CA  3002               	movlw	2
  6780  06CB  0020               	movlb	0	; select bank0
  6781  06CC  00A5               	movwf	??_selectFrequency
  6782  06CD  0825               	movf	??_selectFrequency,w
  6783  06CE  00F8               	movwf	_interfaceState
  6784                           
  6785                           ;main.c: 276: setLEDColor(255, 0, 255);
  6786  06CF  01F3               	clrf	setLEDColor@green
  6787  06D0  30FF               	movlw	255
  6788  06D1  00A5               	movwf	??_selectFrequency
  6789  06D2  0825               	movf	??_selectFrequency,w
  6790  06D3  00F4               	movwf	setLEDColor@blue
  6791  06D4  30FF               	movlw	255
  6792  06D5  318F  2773  3186   	fcall	_setLEDColor
  6793                           
  6794                           ;main.c: 277: _delay((unsigned long)((1000)*(4000000/4000.0)));
  6795  06D8  3006               	movlw	6
  6796  06D9  0020               	movlb	0	; select bank0
  6797  06DA  00A6               	movwf	??_selectFrequency+1
  6798  06DB  3013               	movlw	19
  6799  06DC  00A5               	movwf	??_selectFrequency
  6800  06DD  30AD               	movlw	173
  6801  06DE                     u2417:	
  6802  06DE  0B89               	decfsz	9,f
  6803  06DF  2EDE               	goto	u2417
  6804  06E0  0BA5               	decfsz	??_selectFrequency,f
  6805  06E1  2EDE               	goto	u2417
  6806  06E2  0BA6               	decfsz	??_selectFrequency+1,f
  6807  06E3  2EDE               	goto	u2417
  6808  06E4  3200               	nop2
  6809                           
  6810                           ;main.c: 278: setLEDColor(0, 0, 0);
  6811  06E5  01F3               	clrf	setLEDColor@green
  6812  06E6  01F4               	clrf	setLEDColor@blue
  6813  06E7  3000               	movlw	0
  6814  06E8  318F  2773  3186   	fcall	_setLEDColor
  6815                           
  6816                           ;main.c: 279: printf("\n Frequency selected");
  6817  06EB  30FF               	movlw	low (STR_1| (0+32768))
  6818  06EC  00F5               	movwf	printf@f
  6819  06ED  3087               	movlw	high (STR_1| (0+32768))
  6820  06EE  00F6               	movwf	printf@f+1
  6821  06EF  318F  27A6         	fcall	_printf
  6822  06F1  0008               	return
  6823  06F2                     __end_of_selectFrequency:	
  6824                           
  6825                           	psect	text16
  6826  0FC3                     __ptext16:	
  6827 ;; *************** function _selectDecrease *****************
  6828 ;; Defined at:
  6829 ;;		line 297 in file "main.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;		None
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;		None
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  1    wreg      void 
  6836 ;; Registers used:
  6837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6843 ;;      Params:         0       0       0       0       0       0       0       0
  6844 ;;      Locals:         0       0       0       0       0       0       0       0
  6845 ;;      Temps:          1       0       0       0       0       0       0       0
  6846 ;;      Totals:         1       0       0       0       0       0       0       0
  6847 ;;Total ram usage:        1 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    7
  6850 ;; This function calls:
  6851 ;;		_printf
  6852 ;;		_setLEDColor
  6853 ;; This function is called by:
  6854 ;;		_process_remote_command
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           
  6859                           ;psect for function _selectDecrease
  6860  0FC3                     _selectDecrease:	
  6861                           
  6862                           ;main.c: 298: setLEDColor(225, 65, 0);
  6863                           
  6864                           ;incstack = 0
  6865                           ; Regs used in _selectDecrease: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6866  0FC3  3041               	movlw	65
  6867  0FC4  00F7               	movwf	??_selectDecrease
  6868  0FC5  0877               	movf	??_selectDecrease,w
  6869  0FC6  00F3               	movwf	setLEDColor@green
  6870  0FC7  01F4               	clrf	setLEDColor@blue
  6871  0FC8  30E1               	movlw	225
  6872  0FC9  318F  2773  318F   	fcall	_setLEDColor
  6873                           
  6874                           ;main.c: 299: _delay((unsigned long)((100)*(4000000/4000.0)));
  6875  0FCC  3082               	movlw	130
  6876  0FCD  00F7               	movwf	??_selectDecrease
  6877  0FCE  30DE               	movlw	222
  6878  0FCF                     u2427:	
  6879  0FCF  0B89               	decfsz	9,f
  6880  0FD0  2FCF               	goto	u2427
  6881  0FD1  0BF7               	decfsz	??_selectDecrease,f
  6882  0FD2  2FCF               	goto	u2427
  6883                           
  6884                           ;main.c: 300: setLEDColor(0, 0, 0);
  6885  0FD3  01F3               	clrf	setLEDColor@green
  6886  0FD4  01F4               	clrf	setLEDColor@blue
  6887  0FD5  3000               	movlw	0
  6888  0FD6  318F  2773  318F   	fcall	_setLEDColor
  6889                           
  6890                           ;main.c: 301: printf("\n decrease selected");
  6891  0FD9  3014               	movlw	low (STR_4| (0+32768))
  6892  0FDA  00F5               	movwf	printf@f
  6893  0FDB  3088               	movlw	high (STR_4| (0+32768))
  6894  0FDC  00F6               	movwf	printf@f+1
  6895  0FDD  318F  27A6         	fcall	_printf
  6896  0FDF  0008               	return
  6897  0FE0                     __end_of_selectDecrease:	
  6898                           
  6899                           	psect	text17
  6900  0719                     __ptext17:	
  6901 ;; *************** function _selectCurrent *****************
  6902 ;; Defined at:
  6903 ;;		line 282 in file "main.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;		None
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;		None
  6908 ;; Return value:  Size  Location     Type
  6909 ;;                  1    wreg      void 
  6910 ;; Registers used:
  6911 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6912 ;; Tracked objects:
  6913 ;;		On entry : 0/0
  6914 ;;		On exit  : 0/0
  6915 ;;		Unchanged: 0/0
  6916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6917 ;;      Params:         0       0       0       0       0       0       0       0
  6918 ;;      Locals:         0       0       0       0       0       0       0       0
  6919 ;;      Temps:          0       2       0       0       0       0       0       0
  6920 ;;      Totals:         0       2       0       0       0       0       0       0
  6921 ;;Total ram usage:        2 bytes
  6922 ;; Hardware stack levels used:    1
  6923 ;; Hardware stack levels required when called:    7
  6924 ;; This function calls:
  6925 ;;		_printf
  6926 ;;		_setLEDColor
  6927 ;; This function is called by:
  6928 ;;		_process_remote_command
  6929 ;; This function uses a non-reentrant model
  6930 ;;
  6931                           
  6932                           
  6933                           ;psect for function _selectCurrent
  6934  0719                     _selectCurrent:	
  6935                           
  6936                           ;main.c: 283: interfaceState = STATE_CURRENT;
  6937                           
  6938                           ;incstack = 0
  6939                           ; Regs used in _selectCurrent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6940  0719  01F8               	clrf	_interfaceState
  6941  071A  0AF8               	incf	_interfaceState,f
  6942                           
  6943                           ;main.c: 284: setLEDColor(0, 0, 255);
  6944  071B  01F3               	clrf	setLEDColor@green
  6945  071C  30FF               	movlw	255
  6946  071D  0020               	movlb	0	; select bank0
  6947  071E  00A5               	movwf	??_selectCurrent
  6948  071F  0825               	movf	??_selectCurrent,w
  6949  0720  00F4               	movwf	setLEDColor@blue
  6950  0721  3000               	movlw	0
  6951  0722  318F  2773  3187   	fcall	_setLEDColor
  6952                           
  6953                           ;main.c: 285: _delay((unsigned long)((1000)*(4000000/4000.0)));
  6954  0725  3006               	movlw	6
  6955  0726  0020               	movlb	0	; select bank0
  6956  0727  00A6               	movwf	??_selectCurrent+1
  6957  0728  3013               	movlw	19
  6958  0729  00A5               	movwf	??_selectCurrent
  6959  072A  30AD               	movlw	173
  6960  072B                     u2437:	
  6961  072B  0B89               	decfsz	9,f
  6962  072C  2F2B               	goto	u2437
  6963  072D  0BA5               	decfsz	??_selectCurrent,f
  6964  072E  2F2B               	goto	u2437
  6965  072F  0BA6               	decfsz	??_selectCurrent+1,f
  6966  0730  2F2B               	goto	u2437
  6967  0731  3200               	nop2
  6968                           
  6969                           ;main.c: 286: setLEDColor(0, 0, 0);
  6970  0732  01F3               	clrf	setLEDColor@green
  6971  0733  01F4               	clrf	setLEDColor@blue
  6972  0734  3000               	movlw	0
  6973  0735  318F  2773  3187   	fcall	_setLEDColor
  6974                           
  6975                           ;main.c: 287: printf("\n current selected");
  6976  0738  303C               	movlw	low (STR_2| (0+32768))
  6977  0739  00F5               	movwf	printf@f
  6978  073A  3088               	movlw	high (STR_2| (0+32768))
  6979  073B  00F6               	movwf	printf@f+1
  6980  073C  318F  27A6         	fcall	_printf
  6981  073E  0008               	return
  6982  073F                     __end_of_selectCurrent:	
  6983                           
  6984                           	psect	text18
  6985  0FA6                     __ptext18:	
  6986 ;; *************** function _printf *****************
  6987 ;; Defined at:
  6988 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  f               2    5[COMMON] PTR const unsigned char 
  6991 ;;		 -> STR_6(15), STR_5(23), STR_4(20), STR_3(20), 
  6992 ;;		 -> STR_2(19), STR_1(21), 
  6993 ;; Auto vars:     Size  Location     Type
  6994 ;;  tmpval          4    0        struct .
  6995 ;;  cp              2    0        PTR const unsigned char 
  6996 ;;  len             2    0        unsigned int 
  6997 ;;  val             2    0        unsigned int 
  6998 ;;  c               1    4[BANK0 ] char 
  6999 ;;  ap              1    3[BANK0 ] PTR void [1]
  7000 ;;		 -> ?_printf(2), 
  7001 ;;  flag            1    0        unsigned char 
  7002 ;;  prec            1    0        char 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  2    5[COMMON] int 
  7005 ;; Registers used:
  7006 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7012 ;;      Params:         2       0       0       0       0       0       0       0
  7013 ;;      Locals:         0       2       0       0       0       0       0       0
  7014 ;;      Temps:          0       3       0       0       0       0       0       0
  7015 ;;      Totals:         2       5       0       0       0       0       0       0
  7016 ;;Total ram usage:        7 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    6
  7019 ;; This function calls:
  7020 ;;		_putch
  7021 ;; This function is called by:
  7022 ;;		_selectFrequency
  7023 ;;		_selectCurrent
  7024 ;;		_selectIncrease
  7025 ;;		_selectDecrease
  7026 ;;		_selectResetValue
  7027 ;;		_process_remote_command
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           
  7032                           ;psect for function _printf
  7033  0FA6                     _printf:	
  7034                           
  7035                           ;doprnt.c: 466: va_list ap;
  7036                           ;doprnt.c: 499: signed char c;
  7037                           ;doprnt.c: 506: signed char prec;
  7038                           ;doprnt.c: 508: unsigned char flag;
  7039                           ;doprnt.c: 523: union {
  7040                           ;doprnt.c: 524: unsigned long vd;
  7041                           ;doprnt.c: 525: double integ;
  7042                           ;doprnt.c: 526: } tmpval;
  7043                           ;doprnt.c: 528: unsigned int val;
  7044                           ;doprnt.c: 529: unsigned len;
  7045                           ;doprnt.c: 530: const char * cp;
  7046                           ;doprnt.c: 533: *ap = __va_start();
  7047                           
  7048                           ;incstack = 0
  7049                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7050  0FA6  3077               	movlw	(low ((?_printf| 0+2)))& (0+255)
  7051  0FA7  0020               	movlb	0	; select bank0
  7052  0FA8  00A0               	movwf	??_printf
  7053  0FA9  0820               	movf	??_printf,w
  7054  0FAA  00A3               	movwf	printf@ap
  7055  0FAB                     l2793:	
  7056                           ;doprnt.c: 543: }
  7057                           ;doprnt.c: 1422: {
  7058                           
  7059                           ;doprnt.c: 542: continue;
  7060                           
  7061                           ;doprnt.c: 536: while(c = *f++) {
  7062                           
  7063  0FAB  0876               	movf	printf@f+1,w
  7064  0FAC  0020               	movlb	0	; select bank0
  7065  0FAD  00A1               	movwf	??_printf+1
  7066  0FAE  0875               	movf	printf@f,w
  7067  0FAF  00A0               	movwf	??_printf
  7068  0FB0  0AF5               	incf	printf@f,f
  7069  0FB1  1903               	skipnz
  7070  0FB2  0AF6               	incf	printf@f+1,f
  7071  0FB3  0820               	movf	??_printf,w
  7072  0FB4  0084               	movwf	4
  7073  0FB5  0821               	movf	??_printf+1,w
  7074  0FB6  0085               	movwf	5
  7075  0FB7  0800               	movf	0,w	;code access
  7076  0FB8  00A2               	movwf	??_printf+2
  7077  0FB9  0822               	movf	??_printf+2,w
  7078  0FBA  00A4               	movwf	printf@c
  7079  0FBB  0824               	movf	printf@c,w
  7080  0FBC  1903               	btfsc	3,2
  7081  0FBD  0008               	return
  7082                           
  7083                           ;doprnt.c: 540: {
  7084                           ;doprnt.c: 541: (putch(c) );
  7085  0FBE  0824               	movf	printf@c,w
  7086  0FBF  318E  26B0  318F   	fcall	_putch
  7087  0FC2  2FAB               	goto	l2793
  7088  0FC3                     __end_of_printf:	
  7089                           ;doprnt.c: 1469: }
  7090                           ;doprnt.c: 1533: }
  7091                           ;doprnt.c: 1540: return 0;
  7092                           ;	Return value of _printf is never used
  7093                           
  7094                           
  7095                           	psect	text19
  7096  0EB0                     __ptext19:	
  7097 ;; *************** function _putch *****************
  7098 ;; Defined at:
  7099 ;;		line 146 in file "mcc_generated_files/eusart.c"
  7100 ;; Parameters:    Size  Location     Type
  7101 ;;  txData          1    wreg     unsigned char 
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;  txData          1    4[COMMON] unsigned char 
  7104 ;; Return value:  Size  Location     Type
  7105 ;;                  1    wreg      void 
  7106 ;; Registers used:
  7107 ;;		wreg, status,2, status,0, pclath, cstack
  7108 ;; Tracked objects:
  7109 ;;		On entry : 0/0
  7110 ;;		On exit  : 0/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7113 ;;      Params:         0       0       0       0       0       0       0       0
  7114 ;;      Locals:         1       0       0       0       0       0       0       0
  7115 ;;      Temps:          0       0       0       0       0       0       0       0
  7116 ;;      Totals:         1       0       0       0       0       0       0       0
  7117 ;;Total ram usage:        1 bytes
  7118 ;; Hardware stack levels used:    1
  7119 ;; Hardware stack levels required when called:    5
  7120 ;; This function calls:
  7121 ;;		_EUSART_Write
  7122 ;; This function is called by:
  7123 ;;		_printf
  7124 ;; This function uses a non-reentrant model
  7125 ;;
  7126                           
  7127                           
  7128                           ;psect for function _putch
  7129  0EB0                     _putch:	
  7130                           
  7131                           ;incstack = 0
  7132                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7133                           ;putch@txData stored from wreg
  7134  0EB0  00F4               	movwf	putch@txData
  7135                           
  7136                           ;eusart.c: 148: EUSART_Write(txData);
  7137  0EB1  0874               	movf	putch@txData,w
  7138  0EB2  318F  2700         	fcall	_EUSART_Write
  7139  0EB4  0008               	return
  7140  0EB5                     __end_of_putch:	
  7141                           
  7142                           	psect	text20
  7143  0F00                     __ptext20:	
  7144 ;; *************** function _EUSART_Write *****************
  7145 ;; Defined at:
  7146 ;;		line 132 in file "mcc_generated_files/eusart.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;  txData          1    wreg     unsigned char 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  txData          1    3[COMMON] unsigned char 
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  1    wreg      void 
  7153 ;; Registers used:
  7154 ;;		wreg
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7160 ;;      Params:         0       0       0       0       0       0       0       0
  7161 ;;      Locals:         1       0       0       0       0       0       0       0
  7162 ;;      Temps:          0       0       0       0       0       0       0       0
  7163 ;;      Totals:         1       0       0       0       0       0       0       0
  7164 ;;Total ram usage:        1 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    4
  7167 ;; This function calls:
  7168 ;;		Nothing
  7169 ;; This function is called by:
  7170 ;;		_putch
  7171 ;; This function uses a non-reentrant model
  7172 ;;
  7173                           
  7174                           
  7175                           ;psect for function _EUSART_Write
  7176  0F00                     _EUSART_Write:	
  7177                           
  7178                           ;incstack = 0
  7179                           ; Regs used in _EUSART_Write: [wreg]
  7180                           ;EUSART_Write@txData stored from wreg
  7181  0F00  00F3               	movwf	EUSART_Write@txData
  7182  0F01                     l213:	
  7183                           ;eusart.c: 135: {
  7184                           
  7185                           ;eusart.c: 134: while(0 == PIR1bits.TXIF)
  7186                           
  7187  0F01  0020               	movlb	0	; select bank0
  7188  0F02  1E11               	btfss	17,4	;volatile
  7189  0F03  2F01               	goto	l213
  7190                           
  7191                           ;eusart.c: 136: }
  7192                           ;eusart.c: 138: TX1REG = txData;
  7193  0F04  0873               	movf	EUSART_Write@txData,w
  7194  0F05  0023               	movlb	3	; select bank3
  7195  0F06  009A               	movwf	26	;volatile
  7196  0F07  0008               	return
  7197  0F08                     __end_of_EUSART_Write:	
  7198                           
  7199                           	psect	text21
  7200  0670                     __ptext21:	
  7201 ;; *************** function _battery_voltage *****************
  7202 ;; Defined at:
  7203 ;;		line 147 in file "main.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;		None
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;		None
  7208 ;; Return value:  Size  Location     Type
  7209 ;;                  2   23[BANK0 ] int 
  7210 ;; Registers used:
  7211 ;;		wreg, status,2, status,0, pclath, cstack
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7217 ;;      Params:         0       2       0       0       0       0       0       0
  7218 ;;      Locals:         0       0       0       0       0       0       0       0
  7219 ;;      Temps:          0       0       0       0       0       0       0       0
  7220 ;;      Totals:         0       2       0       0       0       0       0       0
  7221 ;;Total ram usage:        2 bytes
  7222 ;; Hardware stack levels used:    1
  7223 ;; Hardware stack levels required when called:    5
  7224 ;; This function calls:
  7225 ;;		___aldiv
  7226 ;; This function is called by:
  7227 ;;		_process_remote_command
  7228 ;;		_main
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           
  7233                           ;psect for function _battery_voltage
  7234  0670                     _battery_voltage:	
  7235                           
  7236                           ;main.c: 149: FVRCON = 0b10000001;
  7237                           
  7238                           ;incstack = 0
  7239                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  7240  0670  3081               	movlw	129
  7241  0671  0022               	movlb	2	; select bank2
  7242  0672  0097               	movwf	23	;volatile
  7243                           
  7244                           ;main.c: 150: ADCON0 = 0b01111101;
  7245  0673  307D               	movlw	125
  7246  0674  0021               	movlb	1	; select bank1
  7247  0675  009D               	movwf	29	;volatile
  7248                           
  7249                           ;main.c: 151: ADCON1 = 0b10010000;
  7250  0676  3090               	movlw	144
  7251  0677  009E               	movwf	30	;volatile
  7252  0678                     l562:	
  7253                           ;main.c: 152: while(!FVRCONbits.FVRRDY){ }
  7254                           
  7255  0678  0022               	movlb	2	; select bank2
  7256  0679  1F17               	btfss	23,6	;volatile
  7257  067A  2E78               	goto	l562
  7258                           
  7259                           ;main.c: 153: __nop();
  7260  067B  0000               	nop
  7261                           
  7262                           ;main.c: 154: __nop();
  7263  067C  0000               	nop
  7264                           
  7265                           ;main.c: 155: __nop();
  7266  067D  0000               	nop
  7267                           
  7268                           ;main.c: 156: __nop();
  7269  067E  0000               	nop
  7270                           
  7271                           ;main.c: 157: __nop();
  7272  067F  0000               	nop
  7273                           
  7274                           ;main.c: 158: ADCON0bits.GO_nDONE = 1;
  7275  0680  0021               	movlb	1	; select bank1
  7276  0681  149D               	bsf	29,1	;volatile
  7277  0682                     l565:	
  7278                           ;main.c: 159: while(ADCON0bits.GO_nDONE){ }
  7279                           
  7280  0682  189D               	btfsc	29,1	;volatile
  7281  0683  2E82               	goto	l565
  7282                           
  7283                           ;main.c: 160: ADCON0bits.ADON = 0;
  7284  0684  101D               	bcf	29,0	;volatile
  7285                           
  7286                           ;main.c: 165: return 1047552L / ADRES;
  7287  0685  081B               	movf	27,w	;volatile
  7288  0686  0020               	movlb	0	; select bank0
  7289  0687  00A8               	movwf	___aldiv@divisor
  7290  0688  0021               	movlb	1	; select bank1
  7291  0689  081C               	movf	28,w	;volatile
  7292  068A  0020               	movlb	0	; select bank0
  7293  068B  00A9               	movwf	___aldiv@divisor+1
  7294  068C  01AA               	clrf	___aldiv@divisor+2
  7295  068D  01AB               	clrf	___aldiv@divisor+3
  7296  068E  3000               	movlw	0
  7297  068F  00AF               	movwf	___aldiv@dividend+3
  7298  0690  300F               	movlw	15
  7299  0691  00AE               	movwf	___aldiv@dividend+2
  7300  0692  30FC               	movlw	252
  7301  0693  00AD               	movwf	___aldiv@dividend+1
  7302  0694  3000               	movlw	0
  7303  0695  00AC               	movwf	___aldiv@dividend
  7304  0696  3182  227C         	fcall	___aldiv
  7305  0698  0020               	movlb	0	; select bank0
  7306  0699  0829               	movf	?___aldiv+1,w
  7307  069A  00B8               	movwf	?_battery_voltage+1
  7308  069B  0828               	movf	?___aldiv,w
  7309  069C  00B7               	movwf	?_battery_voltage
  7310  069D  0008               	return
  7311  069E                     __end_of_battery_voltage:	
  7312                           
  7313                           	psect	text22
  7314  027C                     __ptext22:	
  7315 ;; *************** function ___aldiv *****************
  7316 ;; Defined at:
  7317 ;;		line 6 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  divisor         4    8[BANK0 ] long 
  7320 ;;  dividend        4   12[BANK0 ] long 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  quotient        4   19[BANK0 ] long 
  7323 ;;  sign            1   18[BANK0 ] unsigned char 
  7324 ;;  counter         1   17[BANK0 ] unsigned char 
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  4    8[BANK0 ] long 
  7327 ;; Registers used:
  7328 ;;		wreg, status,2, status,0
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7334 ;;      Params:         0       8       0       0       0       0       0       0
  7335 ;;      Locals:         0       6       0       0       0       0       0       0
  7336 ;;      Temps:          0       1       0       0       0       0       0       0
  7337 ;;      Totals:         0      15       0       0       0       0       0       0
  7338 ;;Total ram usage:       15 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:    4
  7341 ;; This function calls:
  7342 ;;		Nothing
  7343 ;; This function is called by:
  7344 ;;		_battery_voltage
  7345 ;;		_setCurrent
  7346 ;;		_setFrequency
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           
  7351                           ;psect for function ___aldiv
  7352  027C                     ___aldiv:	
  7353                           
  7354                           ;incstack = 0
  7355                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7356  027C  0020               	movlb	0	; select bank0
  7357  027D  01B2               	clrf	___aldiv@sign
  7358  027E  1FAB               	btfss	___aldiv@divisor+3,7
  7359  027F  2A8D               	goto	l730
  7360  0280  09A8               	comf	___aldiv@divisor,f
  7361  0281  09A9               	comf	___aldiv@divisor+1,f
  7362  0282  09AA               	comf	___aldiv@divisor+2,f
  7363  0283  09AB               	comf	___aldiv@divisor+3,f
  7364  0284  0AA8               	incf	___aldiv@divisor,f
  7365  0285  1903               	skipnz
  7366  0286  0AA9               	incf	___aldiv@divisor+1,f
  7367  0287  1903               	skipnz
  7368  0288  0AAA               	incf	___aldiv@divisor+2,f
  7369  0289  1903               	skipnz
  7370  028A  0AAB               	incf	___aldiv@divisor+3,f
  7371  028B  01B2               	clrf	___aldiv@sign
  7372  028C  0AB2               	incf	___aldiv@sign,f
  7373  028D                     l730:	
  7374  028D  1FAF               	btfss	___aldiv@dividend+3,7
  7375  028E  2A9E               	goto	l2819
  7376  028F  09AC               	comf	___aldiv@dividend,f
  7377  0290  09AD               	comf	___aldiv@dividend+1,f
  7378  0291  09AE               	comf	___aldiv@dividend+2,f
  7379  0292  09AF               	comf	___aldiv@dividend+3,f
  7380  0293  0AAC               	incf	___aldiv@dividend,f
  7381  0294  1903               	skipnz
  7382  0295  0AAD               	incf	___aldiv@dividend+1,f
  7383  0296  1903               	skipnz
  7384  0297  0AAE               	incf	___aldiv@dividend+2,f
  7385  0298  1903               	skipnz
  7386  0299  0AAF               	incf	___aldiv@dividend+3,f
  7387  029A  3001               	movlw	1
  7388  029B  00B0               	movwf	??___aldiv
  7389  029C  0830               	movf	??___aldiv,w
  7390  029D  06B2               	xorwf	___aldiv@sign,f
  7391  029E                     l2819:	
  7392  029E  3000               	movlw	0
  7393  029F  00B6               	movwf	___aldiv@quotient+3
  7394  02A0  3000               	movlw	0
  7395  02A1  00B5               	movwf	___aldiv@quotient+2
  7396  02A2  3000               	movlw	0
  7397  02A3  00B4               	movwf	___aldiv@quotient+1
  7398  02A4  3000               	movlw	0
  7399  02A5  00B3               	movwf	___aldiv@quotient
  7400  02A6  082B               	movf	___aldiv@divisor+3,w
  7401  02A7  042A               	iorwf	___aldiv@divisor+2,w
  7402  02A8  0429               	iorwf	___aldiv@divisor+1,w
  7403  02A9  0428               	iorwf	___aldiv@divisor,w
  7404  02AA  1903               	skipnz
  7405  02AB  2AE7               	goto	l2841
  7406  02AC  01B1               	clrf	___aldiv@counter
  7407  02AD  0AB1               	incf	___aldiv@counter,f
  7408  02AE                     l2827:	
  7409  02AE  1BAB               	btfsc	___aldiv@divisor+3,7
  7410  02AF  2ABC               	goto	l2829
  7411  02B0  3001               	movlw	1
  7412  02B1                     u1875:	
  7413  02B1  35A8               	lslf	___aldiv@divisor,f
  7414  02B2  0DA9               	rlf	___aldiv@divisor+1,f
  7415  02B3  0DAA               	rlf	___aldiv@divisor+2,f
  7416  02B4  0DAB               	rlf	___aldiv@divisor+3,f
  7417  02B5  0B89               	decfsz	9,f
  7418  02B6  2AB1               	goto	u1875
  7419  02B7  3001               	movlw	1
  7420  02B8  00B0               	movwf	??___aldiv
  7421  02B9  0830               	movf	??___aldiv,w
  7422  02BA  07B1               	addwf	___aldiv@counter,f
  7423  02BB  2AAE               	goto	l2827
  7424  02BC                     l2829:	
  7425  02BC  3001               	movlw	1
  7426  02BD                     u1895:	
  7427  02BD  35B3               	lslf	___aldiv@quotient,f
  7428  02BE  0DB4               	rlf	___aldiv@quotient+1,f
  7429  02BF  0DB5               	rlf	___aldiv@quotient+2,f
  7430  02C0  0DB6               	rlf	___aldiv@quotient+3,f
  7431  02C1  0B89               	decfsz	9,f
  7432  02C2  2ABD               	goto	u1895
  7433  02C3  082B               	movf	___aldiv@divisor+3,w
  7434  02C4  022F               	subwf	___aldiv@dividend+3,w
  7435  02C5  1D03               	skipz
  7436  02C6  2AD1               	goto	u1905
  7437  02C7  082A               	movf	___aldiv@divisor+2,w
  7438  02C8  022E               	subwf	___aldiv@dividend+2,w
  7439  02C9  1D03               	skipz
  7440  02CA  2AD1               	goto	u1905
  7441  02CB  0829               	movf	___aldiv@divisor+1,w
  7442  02CC  022D               	subwf	___aldiv@dividend+1,w
  7443  02CD  1D03               	skipz
  7444  02CE  2AD1               	goto	u1905
  7445  02CF  0828               	movf	___aldiv@divisor,w
  7446  02D0  022C               	subwf	___aldiv@dividend,w
  7447  02D1                     u1905:	
  7448  02D1  1C03               	skipc
  7449  02D2  2ADC               	goto	l2837
  7450  02D3  0828               	movf	___aldiv@divisor,w
  7451  02D4  02AC               	subwf	___aldiv@dividend,f
  7452  02D5  0829               	movf	___aldiv@divisor+1,w
  7453  02D6  3BAD               	subwfb	___aldiv@dividend+1,f
  7454  02D7  082A               	movf	___aldiv@divisor+2,w
  7455  02D8  3BAE               	subwfb	___aldiv@dividend+2,f
  7456  02D9  082B               	movf	___aldiv@divisor+3,w
  7457  02DA  3BAF               	subwfb	___aldiv@dividend+3,f
  7458  02DB  1433               	bsf	___aldiv@quotient,0
  7459  02DC                     l2837:	
  7460  02DC  3001               	movlw	1
  7461  02DD                     u1915:	
  7462  02DD  36AB               	lsrf	___aldiv@divisor+3,f
  7463  02DE  0CAA               	rrf	___aldiv@divisor+2,f
  7464  02DF  0CA9               	rrf	___aldiv@divisor+1,f
  7465  02E0  0CA8               	rrf	___aldiv@divisor,f
  7466  02E1  0B89               	decfsz	9,f
  7467  02E2  2ADD               	goto	u1915
  7468  02E3  3001               	movlw	1
  7469  02E4  02B1               	subwf	___aldiv@counter,f
  7470  02E5  1D03               	btfss	3,2
  7471  02E6  2ABC               	goto	l2829
  7472  02E7                     l2841:	
  7473  02E7  0832               	movf	___aldiv@sign,w
  7474  02E8  1903               	btfsc	3,2
  7475  02E9  2AF5               	goto	l2845
  7476  02EA  09B3               	comf	___aldiv@quotient,f
  7477  02EB  09B4               	comf	___aldiv@quotient+1,f
  7478  02EC  09B5               	comf	___aldiv@quotient+2,f
  7479  02ED  09B6               	comf	___aldiv@quotient+3,f
  7480  02EE  0AB3               	incf	___aldiv@quotient,f
  7481  02EF  1903               	skipnz
  7482  02F0  0AB4               	incf	___aldiv@quotient+1,f
  7483  02F1  1903               	skipnz
  7484  02F2  0AB5               	incf	___aldiv@quotient+2,f
  7485  02F3  1903               	skipnz
  7486  02F4  0AB6               	incf	___aldiv@quotient+3,f
  7487  02F5                     l2845:	
  7488  02F5  0836               	movf	___aldiv@quotient+3,w
  7489  02F6  00AB               	movwf	?___aldiv+3
  7490  02F7  0835               	movf	___aldiv@quotient+2,w
  7491  02F8  00AA               	movwf	?___aldiv+2
  7492  02F9  0834               	movf	___aldiv@quotient+1,w
  7493  02FA  00A9               	movwf	?___aldiv+1
  7494  02FB  0833               	movf	___aldiv@quotient,w
  7495  02FC  00A8               	movwf	?___aldiv
  7496  02FD  0008               	return
  7497  02FE                     __end_of___aldiv:	
  7498                           
  7499                           	psect	text23
  7500  069E                     __ptext23:	
  7501 ;; *************** function _lowBattery *****************
  7502 ;; Defined at:
  7503 ;;		line 234 in file "main.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      void 
  7510 ;; Registers used:
  7511 ;;		wreg, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7517 ;;      Params:         0       0       0       0       0       0       0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0
  7519 ;;      Temps:          0       2       0       0       0       0       0       0
  7520 ;;      Totals:         0       2       0       0       0       0       0       0
  7521 ;;Total ram usage:        2 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    5
  7524 ;; This function calls:
  7525 ;;		_setLEDColor
  7526 ;; This function is called by:
  7527 ;;		_main
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           
  7532                           ;psect for function _lowBattery
  7533  069E                     _lowBattery:	
  7534                           
  7535                           ;main.c: 235: interfaceState = STATE_LOWBATTERY;
  7536                           
  7537                           ;incstack = 0
  7538                           ; Regs used in _lowBattery: [wreg+status,2+status,0+pclath+cstack]
  7539  069E  3003               	movlw	3
  7540  069F  0020               	movlb	0	; select bank0
  7541  06A0  00A0               	movwf	??_lowBattery
  7542  06A1  0820               	movf	??_lowBattery,w
  7543  06A2  00F8               	movwf	_interfaceState
  7544                           
  7545                           ;main.c: 236: setLEDColor(255, 0, 0);
  7546  06A3  01F3               	clrf	setLEDColor@green
  7547  06A4  01F4               	clrf	setLEDColor@blue
  7548  06A5  30FF               	movlw	255
  7549  06A6  318F  2773  3186   	fcall	_setLEDColor
  7550                           
  7551                           ;main.c: 237: _delay((unsigned long)((250)*(4000000/4000.0)));
  7552  06A9  3002               	movlw	2
  7553  06AA  0020               	movlb	0	; select bank0
  7554  06AB  00A1               	movwf	??_lowBattery+1
  7555  06AC  3045               	movlw	69
  7556  06AD  00A0               	movwf	??_lowBattery
  7557  06AE  30A9               	movlw	169
  7558  06AF                     u2447:	
  7559  06AF  0B89               	decfsz	9,f
  7560  06B0  2EAF               	goto	u2447
  7561  06B1  0BA0               	decfsz	??_lowBattery,f
  7562  06B2  2EAF               	goto	u2447
  7563  06B3  0BA1               	decfsz	??_lowBattery+1,f
  7564  06B4  2EAF               	goto	u2447
  7565  06B5  3200               	nop2
  7566                           
  7567                           ;main.c: 238: setLEDColor(0, 0, 0);
  7568  06B6  01F3               	clrf	setLEDColor@green
  7569  06B7  01F4               	clrf	setLEDColor@blue
  7570  06B8  3000               	movlw	0
  7571  06B9  318F  2773  3186   	fcall	_setLEDColor
  7572                           
  7573                           ;main.c: 239: _delay((unsigned long)((500)*(4000000/4000.0)));
  7574  06BC  3003               	movlw	3
  7575  06BD  0020               	movlb	0	; select bank0
  7576  06BE  00A1               	movwf	??_lowBattery+1
  7577  06BF  308A               	movlw	138
  7578  06C0  00A0               	movwf	??_lowBattery
  7579  06C1  3055               	movlw	85
  7580  06C2                     u2457:	
  7581  06C2  0B89               	decfsz	9,f
  7582  06C3  2EC2               	goto	u2457
  7583  06C4  0BA0               	decfsz	??_lowBattery,f
  7584  06C5  2EC2               	goto	u2457
  7585  06C6  0BA1               	decfsz	??_lowBattery+1,f
  7586  06C7  2EC2               	goto	u2457
  7587  06C8  3200               	nop2
  7588  06C9  0008               	return
  7589  06CA                     __end_of_lowBattery:	
  7590                           
  7591                           	psect	text24
  7592  0F73                     __ptext24:	
  7593 ;; *************** function _setLEDColor *****************
  7594 ;; Defined at:
  7595 ;;		line 213 in file "main.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  red             1    wreg     unsigned char 
  7598 ;;  green           1    3[COMMON] unsigned char 
  7599 ;;  blue            1    4[COMMON] unsigned char 
  7600 ;; Auto vars:     Size  Location     Type
  7601 ;;  red             1    6[COMMON] unsigned char 
  7602 ;; Return value:  Size  Location     Type
  7603 ;;                  1    wreg      void 
  7604 ;; Registers used:
  7605 ;;		wreg, status,2, status,0
  7606 ;; Tracked objects:
  7607 ;;		On entry : 0/0
  7608 ;;		On exit  : 0/0
  7609 ;;		Unchanged: 0/0
  7610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7611 ;;      Params:         2       0       0       0       0       0       0       0
  7612 ;;      Locals:         1       0       0       0       0       0       0       0
  7613 ;;      Temps:          1       0       0       0       0       0       0       0
  7614 ;;      Totals:         4       0       0       0       0       0       0       0
  7615 ;;Total ram usage:        4 bytes
  7616 ;; Hardware stack levels used:    1
  7617 ;; Hardware stack levels required when called:    4
  7618 ;; This function calls:
  7619 ;;		Nothing
  7620 ;; This function is called by:
  7621 ;;		_lowBattery
  7622 ;;		_startUp
  7623 ;;		_selectSomething
  7624 ;;		_selectFrequency
  7625 ;;		_selectCurrent
  7626 ;;		_selectIncrease
  7627 ;;		_selectDecrease
  7628 ;;		_selectResetValue
  7629 ;;		_process_remote_command
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           
  7634                           ;psect for function _setLEDColor
  7635  0F73                     _setLEDColor:	
  7636                           
  7637                           ;incstack = 0
  7638                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  7639                           ;setLEDColor@red stored from wreg
  7640  0F73  00F6               	movwf	setLEDColor@red
  7641                           
  7642                           ;main.c: 220: if (0 == blue){
  7643  0F74  0874               	movf	setLEDColor@blue,w
  7644  0F75  1D03               	btfss	3,2
  7645  0F76  2F7A               	goto	l2783
  7646                           
  7647                           ;main.c: 221: TRISC |= 0b00100000;
  7648  0F77  0021               	movlb	1	; select bank1
  7649  0F78  168E               	bsf	14,5	;volatile
  7650                           
  7651                           ;main.c: 222: } else {
  7652  0F79  2F7F               	goto	l575
  7653  0F7A                     l2783:	
  7654                           
  7655                           ;main.c: 223: TRISC &= 0b11011111;
  7656  0F7A  30DF               	movlw	223
  7657  0F7B  00F5               	movwf	??_setLEDColor
  7658  0F7C  0875               	movf	??_setLEDColor,w
  7659  0F7D  0021               	movlb	1	; select bank1
  7660  0F7E  058E               	andwf	14,f	;volatile
  7661  0F7F                     l575:	
  7662                           
  7663                           ;main.c: 224: }
  7664                           ;main.c: 225: CCPR1L = 255U - blue;
  7665  0F7F  0374               	decf	setLEDColor@blue,w
  7666  0F80  3AFF               	xorlw	255
  7667  0F81  3EFF               	addlw	255
  7668  0F82  0025               	movlb	5	; select bank5
  7669  0F83  0091               	movwf	17	;volatile
  7670                           
  7671                           ;main.c: 227: PWM3DCH = red;
  7672  0F84  0876               	movf	setLEDColor@red,w
  7673  0F85  002C               	movlb	12	; select bank12
  7674  0F86  0098               	movwf	24	;volatile
  7675                           
  7676                           ;main.c: 229: PWM4DCH = green;
  7677  0F87  0873               	movf	setLEDColor@green,w
  7678  0F88  009B               	movwf	27	;volatile
  7679  0F89  0008               	return
  7680  0F8A                     __end_of_setLEDColor:	
  7681                           
  7682                           	psect	text25
  7683  058F                     __ptext25:	
  7684 ;; *************** function _initLED *****************
  7685 ;; Defined at:
  7686 ;;		line 172 in file "main.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;		None
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      void 
  7693 ;; Registers used:
  7694 ;;		wreg, status,2, status,0
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7700 ;;      Params:         0       0       0       0       0       0       0       0
  7701 ;;      Locals:         0       0       0       0       0       0       0       0
  7702 ;;      Temps:          1       0       0       0       0       0       0       0
  7703 ;;      Totals:         1       0       0       0       0       0       0       0
  7704 ;;Total ram usage:        1 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    4
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		_main
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           
  7715                           ;psect for function _initLED
  7716  058F                     _initLED:	
  7717                           
  7718                           ;main.c: 175: PR2 = 255;
  7719                           
  7720                           ;incstack = 0
  7721                           ; Regs used in _initLED: [wreg+status,2+status,0]
  7722  058F  30FF               	movlw	255
  7723  0590  0020               	movlb	0	; select bank0
  7724  0591  009B               	movwf	27	;volatile
  7725                           
  7726                           ;main.c: 176: T2CONbits.T2CKPS = 0b10;
  7727  0592  081C               	movf	28,w	;volatile
  7728  0593  39FC               	andlw	-4
  7729  0594  3802               	iorlw	2
  7730  0595  009C               	movwf	28	;volatile
  7731                           
  7732                           ;main.c: 177: T2CONbits.TMR2ON = 1;
  7733  0596  151C               	bsf	28,2	;volatile
  7734                           
  7735                           ;main.c: 181: TRISC |= 0b00010000;
  7736  0597  0021               	movlb	1	; select bank1
  7737  0598  160E               	bsf	14,4	;volatile
  7738                           
  7739                           ;main.c: 182: RC4PPS = 0b01110;
  7740  0599  300E               	movlw	14
  7741  059A  003D               	movlb	29	; select bank29
  7742  059B  00A4               	movwf	36	;volatile
  7743                           
  7744                           ;main.c: 183: CCPTMRSbits.P3TSEL = 0b00;
  7745  059C  30CF               	movlw	-49
  7746  059D  0025               	movlb	5	; select bank5
  7747  059E  059E               	andwf	30,f	;volatile
  7748                           
  7749                           ;main.c: 184: PWM3DCH = 0;
  7750  059F  002C               	movlb	12	; select bank12
  7751  05A0  0198               	clrf	24	;volatile
  7752                           
  7753                           ;main.c: 185: PWM3DCLbits.PWM3DCL = 0;
  7754  05A1  303F               	movlw	-193
  7755  05A2  0597               	andwf	23,f	;volatile
  7756                           
  7757                           ;main.c: 186: PWM3CONbits.PWM3POL = 1;
  7758  05A3  1619               	bsf	25,4	;volatile
  7759                           
  7760                           ;main.c: 187: TRISC &= 0b11101111;
  7761  05A4  30EF               	movlw	239
  7762  05A5  00F3               	movwf	??_initLED
  7763  05A6  0873               	movf	??_initLED,w
  7764  05A7  0021               	movlb	1	; select bank1
  7765  05A8  058E               	andwf	14,f	;volatile
  7766                           
  7767                           ;main.c: 188: PWM3CONbits.PWM3EN = 1;
  7768  05A9  002C               	movlb	12	; select bank12
  7769  05AA  1799               	bsf	25,7	;volatile
  7770                           
  7771                           ;main.c: 192: TRISA |= 0b00100000;
  7772  05AB  0021               	movlb	1	; select bank1
  7773  05AC  168C               	bsf	12,5	;volatile
  7774                           
  7775                           ;main.c: 193: RA5PPS = 0b01111;
  7776  05AD  300F               	movlw	15
  7777  05AE  003D               	movlb	29	; select bank29
  7778  05AF  0095               	movwf	21	;volatile
  7779                           
  7780                           ;main.c: 194: CCPTMRSbits.P4TSEL = 0b00;
  7781  05B0  303F               	movlw	-193
  7782  05B1  0025               	movlb	5	; select bank5
  7783  05B2  059E               	andwf	30,f	;volatile
  7784                           
  7785                           ;main.c: 195: PWM4DCH = 0;
  7786  05B3  002C               	movlb	12	; select bank12
  7787  05B4  019B               	clrf	27	;volatile
  7788                           
  7789                           ;main.c: 196: PWM4DCLbits.PWM4DCL = 0;
  7790  05B5  303F               	movlw	-193
  7791  05B6  059A               	andwf	26,f	;volatile
  7792                           
  7793                           ;main.c: 197: PWM4CONbits.PWM4POL = 1;
  7794  05B7  161C               	bsf	28,4	;volatile
  7795                           
  7796                           ;main.c: 198: TRISA &= 0b11011111;
  7797  05B8  30DF               	movlw	223
  7798  05B9  00F3               	movwf	??_initLED
  7799  05BA  0873               	movf	??_initLED,w
  7800  05BB  0021               	movlb	1	; select bank1
  7801  05BC  058C               	andwf	12,f	;volatile
  7802                           
  7803                           ;main.c: 199: PWM4CONbits.PWM4EN = 1;
  7804  05BD  002C               	movlb	12	; select bank12
  7805  05BE  179C               	bsf	28,7	;volatile
  7806                           
  7807                           ;main.c: 205: TRISC |= 0b00100000;
  7808  05BF  0021               	movlb	1	; select bank1
  7809  05C0  168E               	bsf	14,5	;volatile
  7810                           
  7811                           ;main.c: 206: RC5PPS = 0b01100;
  7812  05C1  300C               	movlw	12
  7813  05C2  003D               	movlb	29	; select bank29
  7814  05C3  00A5               	movwf	37	;volatile
  7815                           
  7816                           ;main.c: 207: CCP1CONbits.CCP1M = 0b1100;
  7817  05C4  0025               	movlb	5	; select bank5
  7818  05C5  0813               	movf	19,w	;volatile
  7819  05C6  39F0               	andlw	-16
  7820  05C7  380C               	iorlw	12
  7821  05C8  0093               	movwf	19	;volatile
  7822                           
  7823                           ;main.c: 208: CCPR1L = 255;
  7824  05C9  30FF               	movlw	255
  7825  05CA  0091               	movwf	17	;volatile
  7826                           
  7827                           ;main.c: 209: CCP1CONbits.DC1B = 0x3;
  7828  05CB  3030               	movlw	48
  7829  05CC  0493               	iorwf	19,f	;volatile
  7830                           
  7831                           ;main.c: 210: TRISC &= 0b11011111;
  7832  05CD  30DF               	movlw	223
  7833  05CE  00F3               	movwf	??_initLED
  7834  05CF  0873               	movf	??_initLED,w
  7835  05D0  0021               	movlb	1	; select bank1
  7836  05D1  058E               	andwf	14,f	;volatile
  7837  05D2  0008               	return
  7838  05D3                     __end_of_initLED:	
  7839                           
  7840                           	psect	text26
  7841  0786                     __ptext26:	
  7842 ;; *************** function _SYSTEM_Initialize *****************
  7843 ;; Defined at:
  7844 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7845 ;; Parameters:    Size  Location     Type
  7846 ;;		None
  7847 ;; Auto vars:     Size  Location     Type
  7848 ;;		None
  7849 ;; Return value:  Size  Location     Type
  7850 ;;                  1    wreg      void 
  7851 ;; Registers used:
  7852 ;;		wreg, status,2, status,0, pclath, cstack
  7853 ;; Tracked objects:
  7854 ;;		On entry : 0/0
  7855 ;;		On exit  : 0/0
  7856 ;;		Unchanged: 0/0
  7857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7858 ;;      Params:         0       0       0       0       0       0       0       0
  7859 ;;      Locals:         0       0       0       0       0       0       0       0
  7860 ;;      Temps:          0       0       0       0       0       0       0       0
  7861 ;;      Totals:         0       0       0       0       0       0       0       0
  7862 ;;Total ram usage:        0 bytes
  7863 ;; Hardware stack levels used:    1
  7864 ;; Hardware stack levels required when called:    6
  7865 ;; This function calls:
  7866 ;;		_DAC_Initialize
  7867 ;;		_EUSART_Initialize
  7868 ;;		_EXT_INT_Initialize
  7869 ;;		_OPA1_Initialize
  7870 ;;		_OPA2_Initialize
  7871 ;;		_OSCILLATOR_Initialize
  7872 ;;		_PIN_MANAGER_Initialize
  7873 ;;		_TMR0_Initialize
  7874 ;;		_TMR2_Initialize
  7875 ;;		_TMR4_Initialize
  7876 ;;		_WDT_Initialize
  7877 ;; This function is called by:
  7878 ;;		_main
  7879 ;; This function uses a non-reentrant model
  7880 ;;
  7881                           
  7882                           
  7883                           ;psect for function _SYSTEM_Initialize
  7884  0786                     _SYSTEM_Initialize:	
  7885                           
  7886                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  7887                           
  7888                           ;incstack = 0
  7889                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7890  0786  3186  260D  3187   	fcall	_PIN_MANAGER_Initialize
  7891                           
  7892                           ;mcc.c: 54: OSCILLATOR_Initialize();
  7893  0789  318E  26F0  3187   	fcall	_OSCILLATOR_Initialize
  7894                           
  7895                           ;mcc.c: 55: WDT_Initialize();
  7896  078C  318E  26A7  3187   	fcall	_WDT_Initialize
  7897                           
  7898                           ;mcc.c: 56: DAC_Initialize();
  7899  078F  318E  26BA  3187   	fcall	_DAC_Initialize
  7900                           
  7901                           ;mcc.c: 57: OPA1_Initialize();
  7902  0792  318E  269F  3187   	fcall	_OPA1_Initialize
  7903                           
  7904                           ;mcc.c: 58: TMR4_Initialize();
  7905  0795  318F  274B  3187   	fcall	_TMR4_Initialize
  7906                           
  7907                           ;mcc.c: 59: OPA2_Initialize();
  7908  0798  318E  26A3  3187   	fcall	_OPA2_Initialize
  7909                           
  7910                           ;mcc.c: 60: TMR2_Initialize();
  7911  079B  318E  26F8  3187   	fcall	_TMR2_Initialize
  7912                           
  7913                           ;mcc.c: 61: EXT_INT_Initialize();
  7914  079E  318F  2713  3187   	fcall	_EXT_INT_Initialize
  7915                           
  7916                           ;mcc.c: 62: TMR0_Initialize();
  7917  07A1  318F  273A  3187   	fcall	_TMR0_Initialize
  7918                           
  7919                           ;mcc.c: 63: EUSART_Initialize();
  7920  07A4  3187  27A7         	fcall	_EUSART_Initialize
  7921  07A6  0008               	return
  7922  07A7                     __end_of_SYSTEM_Initialize:	
  7923                           
  7924                           	psect	text27
  7925  0EA7                     __ptext27:	
  7926 ;; *************** function _WDT_Initialize *****************
  7927 ;; Defined at:
  7928 ;;		line 78 in file "mcc_generated_files/mcc.c"
  7929 ;; Parameters:    Size  Location     Type
  7930 ;;		None
  7931 ;; Auto vars:     Size  Location     Type
  7932 ;;		None
  7933 ;; Return value:  Size  Location     Type
  7934 ;;                  1    wreg      void 
  7935 ;; Registers used:
  7936 ;;		wreg
  7937 ;; Tracked objects:
  7938 ;;		On entry : 0/0
  7939 ;;		On exit  : 0/0
  7940 ;;		Unchanged: 0/0
  7941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7942 ;;      Params:         0       0       0       0       0       0       0       0
  7943 ;;      Locals:         0       0       0       0       0       0       0       0
  7944 ;;      Temps:          0       0       0       0       0       0       0       0
  7945 ;;      Totals:         0       0       0       0       0       0       0       0
  7946 ;;Total ram usage:        0 bytes
  7947 ;; Hardware stack levels used:    1
  7948 ;; Hardware stack levels required when called:    4
  7949 ;; This function calls:
  7950 ;;		Nothing
  7951 ;; This function is called by:
  7952 ;;		_SYSTEM_Initialize
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           
  7957                           ;psect for function _WDT_Initialize
  7958  0EA7                     _WDT_Initialize:	
  7959                           
  7960                           ;mcc.c: 81: WDTCON = 0x16;
  7961                           
  7962                           ;incstack = 0
  7963                           ; Regs used in _WDT_Initialize: [wreg]
  7964  0EA7  3016               	movlw	22
  7965  0EA8  0021               	movlb	1	; select bank1
  7966  0EA9  0097               	movwf	23	;volatile
  7967  0EAA  0008               	return
  7968  0EAB                     __end_of_WDT_Initialize:	
  7969                           
  7970                           	psect	text28
  7971  0F4B                     __ptext28:	
  7972 ;; *************** function _TMR4_Initialize *****************
  7973 ;; Defined at:
  7974 ;;		line 65 in file "mcc_generated_files/tmr4.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;		None
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;		None
  7979 ;; Return value:  Size  Location     Type
  7980 ;;                  1    wreg      void 
  7981 ;; Registers used:
  7982 ;;		wreg, status,2, status,0, pclath, cstack
  7983 ;; Tracked objects:
  7984 ;;		On entry : 0/0
  7985 ;;		On exit  : 0/0
  7986 ;;		Unchanged: 0/0
  7987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7988 ;;      Params:         0       0       0       0       0       0       0       0
  7989 ;;      Locals:         0       0       0       0       0       0       0       0
  7990 ;;      Temps:          0       0       0       0       0       0       0       0
  7991 ;;      Totals:         0       0       0       0       0       0       0       0
  7992 ;;Total ram usage:        0 bytes
  7993 ;; Hardware stack levels used:    1
  7994 ;; Hardware stack levels required when called:    5
  7995 ;; This function calls:
  7996 ;;		_TMR4_SetInterruptHandler
  7997 ;; This function is called by:
  7998 ;;		_SYSTEM_Initialize
  7999 ;; This function uses a non-reentrant model
  8000 ;;
  8001                           
  8002                           
  8003                           ;psect for function _TMR4_Initialize
  8004  0F4B                     _TMR4_Initialize:	
  8005                           
  8006                           ;tmr4.c: 70: PR4 = 0x04;
  8007                           
  8008                           ;incstack = 0
  8009                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8010  0F4B  3004               	movlw	4
  8011  0F4C  0028               	movlb	8	; select bank8
  8012  0F4D  0096               	movwf	22	;volatile
  8013                           
  8014                           ;tmr4.c: 73: TMR4 = 0x00;
  8015  0F4E  0195               	clrf	21	;volatile
  8016                           
  8017                           ;tmr4.c: 76: PIR2bits.TMR4IF = 0;
  8018  0F4F  0020               	movlb	0	; select bank0
  8019  0F50  1092               	bcf	18,1	;volatile
  8020                           
  8021                           ;tmr4.c: 79: PIE2bits.TMR4IE = 1;
  8022  0F51  0021               	movlb	1	; select bank1
  8023  0F52  1492               	bsf	18,1	;volatile
  8024                           
  8025                           ;tmr4.c: 82: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
  8026  0F53  305D               	movlw	low _TMR4_DefaultInterruptHandler
  8027  0F54  00F3               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  8028  0F55  300F               	movlw	high _TMR4_DefaultInterruptHandler
  8029  0F56  00F4               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  8030  0F57  318E  26DE         	fcall	_TMR4_SetInterruptHandler
  8031                           
  8032                           ;tmr4.c: 85: T4CON = 0x16;
  8033  0F59  3016               	movlw	22
  8034  0F5A  0028               	movlb	8	; select bank8
  8035  0F5B  0097               	movwf	23	;volatile
  8036  0F5C  0008               	return
  8037  0F5D                     __end_of_TMR4_Initialize:	
  8038                           
  8039                           	psect	text29
  8040  0EDE                     __ptext29:	
  8041 ;; *************** function _TMR4_SetInterruptHandler *****************
  8042 ;; Defined at:
  8043 ;;		line 133 in file "mcc_generated_files/tmr4.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  8046 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;		None
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  1    wreg      void 
  8051 ;; Registers used:
  8052 ;;		wreg
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/0
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8058 ;;      Params:         2       0       0       0       0       0       0       0
  8059 ;;      Locals:         0       0       0       0       0       0       0       0
  8060 ;;      Temps:          0       0       0       0       0       0       0       0
  8061 ;;      Totals:         2       0       0       0       0       0       0       0
  8062 ;;Total ram usage:        2 bytes
  8063 ;; Hardware stack levels used:    1
  8064 ;; Hardware stack levels required when called:    4
  8065 ;; This function calls:
  8066 ;;		Nothing
  8067 ;; This function is called by:
  8068 ;;		_TMR4_Initialize
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           
  8073                           ;psect for function _TMR4_SetInterruptHandler
  8074  0EDE                     _TMR4_SetInterruptHandler:	
  8075                           
  8076                           ;tmr4.c: 134: TMR4_InterruptHandler = InterruptHandler;
  8077                           
  8078                           ;incstack = 0
  8079                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  8080  0EDE  0874               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  8081  0EDF  0021               	movlb	1	; select bank1
  8082  0EE0  00C8               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
  8083  0EE1  0873               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  8084  0EE2  00C7               	movwf	_TMR4_InterruptHandler^(0+128)
  8085  0EE3  0008               	return
  8086  0EE4                     __end_of_TMR4_SetInterruptHandler:	
  8087                           
  8088                           	psect	text30
  8089  0EF8                     __ptext30:	
  8090 ;; *************** function _TMR2_Initialize *****************
  8091 ;; Defined at:
  8092 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      void 
  8099 ;; Registers used:
  8100 ;;		wreg, status,2
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8106 ;;      Params:         0       0       0       0       0       0       0       0
  8107 ;;      Locals:         0       0       0       0       0       0       0       0
  8108 ;;      Temps:          0       0       0       0       0       0       0       0
  8109 ;;      Totals:         0       0       0       0       0       0       0       0
  8110 ;;Total ram usage:        0 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    4
  8113 ;; This function calls:
  8114 ;;		Nothing
  8115 ;; This function is called by:
  8116 ;;		_SYSTEM_Initialize
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _TMR2_Initialize
  8122  0EF8                     _TMR2_Initialize:	
  8123                           
  8124                           ;tmr2.c: 67: PR2 = 255;
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  8128  0EF8  30FF               	movlw	255
  8129  0EF9  0020               	movlb	0	; select bank0
  8130  0EFA  009B               	movwf	27	;volatile
  8131                           
  8132                           ;tmr2.c: 70: TMR2 = 0x00;
  8133  0EFB  019A               	clrf	26	;volatile
  8134                           
  8135                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
  8136  0EFC  1091               	bcf	17,1	;volatile
  8137                           
  8138                           ;tmr2.c: 76: T2CON = 0x06;
  8139  0EFD  3006               	movlw	6
  8140  0EFE  009C               	movwf	28	;volatile
  8141  0EFF  0008               	return
  8142  0F00                     __end_of_TMR2_Initialize:	
  8143                           
  8144                           	psect	text31
  8145  0F3A                     __ptext31:	
  8146 ;; *************** function _TMR0_Initialize *****************
  8147 ;; Defined at:
  8148 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;		None
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;		None
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  1    wreg      void 
  8155 ;; Registers used:
  8156 ;;		wreg, status,2, status,0, pclath, cstack
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8162 ;;      Params:         0       0       0       0       0       0       0       0
  8163 ;;      Locals:         0       0       0       0       0       0       0       0
  8164 ;;      Temps:          0       0       0       0       0       0       0       0
  8165 ;;      Totals:         0       0       0       0       0       0       0       0
  8166 ;;Total ram usage:        0 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    5
  8169 ;; This function calls:
  8170 ;;		_TMR0_SetInterruptHandler
  8171 ;; This function is called by:
  8172 ;;		_SYSTEM_Initialize
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           
  8177                           ;psect for function _TMR0_Initialize
  8178  0F3A                     _TMR0_Initialize:	
  8179                           
  8180                           ;tmr0.c: 69: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 & 0x3F));
  8181                           
  8182                           ;incstack = 0
  8183                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8184  0F3A  0021               	movlb	1	; select bank1
  8185  0F3B  0815               	movf	21,w	;volatile
  8186  0F3C  39C0               	andlw	192
  8187  0F3D  3815               	iorlw	21
  8188  0F3E  0095               	movwf	21	;volatile
  8189                           
  8190                           ;tmr0.c: 72: TMR0 = 0x00;
  8191  0F3F  0020               	movlb	0	; select bank0
  8192  0F40  0195               	clrf	21	;volatile
  8193                           
  8194                           ;tmr0.c: 75: timer0ReloadVal= 0;
  8195  0F41  01F9               	clrf	_timer0ReloadVal	;volatile
  8196                           
  8197                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  8198  0F42  110B               	bcf	11,2	;volatile
  8199                           
  8200                           ;tmr0.c: 81: INTCONbits.TMR0IE = 0;
  8201  0F43  128B               	bcf	11,5	;volatile
  8202                           
  8203                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8204  0F44  3002               	movlw	low _TMR0_DefaultInterruptHandler
  8205  0F45  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  8206  0F46  3000               	movlw	high _TMR0_DefaultInterruptHandler
  8207  0F47  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  8208  0F48  318E  26D8         	fcall	_TMR0_SetInterruptHandler
  8209  0F4A  0008               	return
  8210  0F4B                     __end_of_TMR0_Initialize:	
  8211                           
  8212                           	psect	text32
  8213  0ED8                     __ptext32:	
  8214 ;; *************** function _TMR0_SetInterruptHandler *****************
  8215 ;; Defined at:
  8216 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  8219 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8220 ;; Auto vars:     Size  Location     Type
  8221 ;;		None
  8222 ;; Return value:  Size  Location     Type
  8223 ;;                  1    wreg      void 
  8224 ;; Registers used:
  8225 ;;		wreg
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 0/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8231 ;;      Params:         2       0       0       0       0       0       0       0
  8232 ;;      Locals:         0       0       0       0       0       0       0       0
  8233 ;;      Temps:          0       0       0       0       0       0       0       0
  8234 ;;      Totals:         2       0       0       0       0       0       0       0
  8235 ;;Total ram usage:        2 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; Hardware stack levels required when called:    4
  8238 ;; This function calls:
  8239 ;;		Nothing
  8240 ;; This function is called by:
  8241 ;;		_TMR0_Initialize
  8242 ;; This function uses a non-reentrant model
  8243 ;;
  8244                           
  8245                           
  8246                           ;psect for function _TMR0_SetInterruptHandler
  8247  0ED8                     _TMR0_SetInterruptHandler:	
  8248                           
  8249                           ;tmr0.c: 126: TMR0_InterruptHandler = InterruptHandler;
  8250                           
  8251                           ;incstack = 0
  8252                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  8253  0ED8  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  8254  0ED9  0021               	movlb	1	; select bank1
  8255  0EDA  00CA               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  8256  0EDB  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  8257  0EDC  00C9               	movwf	_TMR0_InterruptHandler^(0+128)
  8258  0EDD  0008               	return
  8259  0EDE                     __end_of_TMR0_SetInterruptHandler:	
  8260                           
  8261                           	psect	text33
  8262  060D                     __ptext33:	
  8263 ;; *************** function _PIN_MANAGER_Initialize *****************
  8264 ;; Defined at:
  8265 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;		None
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;		None
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  1    wreg      void 
  8272 ;; Registers used:
  8273 ;;		wreg, status,2
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8279 ;;      Params:         0       0       0       0       0       0       0       0
  8280 ;;      Locals:         0       0       0       0       0       0       0       0
  8281 ;;      Temps:          0       0       0       0       0       0       0       0
  8282 ;;      Totals:         0       0       0       0       0       0       0       0
  8283 ;;Total ram usage:        0 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:    4
  8286 ;; This function calls:
  8287 ;;		Nothing
  8288 ;; This function is called by:
  8289 ;;		_SYSTEM_Initialize
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           
  8294                           ;psect for function _PIN_MANAGER_Initialize
  8295  060D                     _PIN_MANAGER_Initialize:	
  8296                           
  8297                           ;pin_manager.c: 60: LATA = 0x00;
  8298                           
  8299                           ;incstack = 0
  8300                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8301  060D  0022               	movlb	2	; select bank2
  8302  060E  018C               	clrf	12	;volatile
  8303                           
  8304                           ;pin_manager.c: 61: LATB = 0x00;
  8305  060F  018D               	clrf	13	;volatile
  8306                           
  8307                           ;pin_manager.c: 62: LATC = 0x00;
  8308  0610  018E               	clrf	14	;volatile
  8309                           
  8310                           ;pin_manager.c: 67: TRISA = 0x04;
  8311  0611  3004               	movlw	4
  8312  0612  0021               	movlb	1	; select bank1
  8313  0613  008C               	movwf	12	;volatile
  8314                           
  8315                           ;pin_manager.c: 68: TRISB = 0x30;
  8316  0614  3030               	movlw	48
  8317  0615  008D               	movwf	13	;volatile
  8318                           
  8319                           ;pin_manager.c: 69: TRISC = 0x50;
  8320  0616  3050               	movlw	80
  8321  0617  008E               	movwf	14	;volatile
  8322                           
  8323                           ;pin_manager.c: 74: ANSELC = 0x40;
  8324  0618  3040               	movlw	64
  8325  0619  0023               	movlb	3	; select bank3
  8326  061A  008E               	movwf	14	;volatile
  8327                           
  8328                           ;pin_manager.c: 75: ANSELB = 0x10;
  8329  061B  3010               	movlw	16
  8330  061C  008D               	movwf	13	;volatile
  8331                           
  8332                           ;pin_manager.c: 76: ANSELA = 0x00;
  8333  061D  018C               	clrf	12	;volatile
  8334                           
  8335                           ;pin_manager.c: 81: WPUB = 0x00;
  8336  061E  0024               	movlb	4	; select bank4
  8337  061F  018D               	clrf	13	;volatile
  8338                           
  8339                           ;pin_manager.c: 82: WPUA = 0x00;
  8340  0620  018C               	clrf	12	;volatile
  8341                           
  8342                           ;pin_manager.c: 83: WPUC = 0x00;
  8343  0621  018E               	clrf	14	;volatile
  8344                           
  8345                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 0;
  8346  0622  0021               	movlb	1	; select bank1
  8347  0623  1395               	bcf	21,7	;volatile
  8348                           
  8349                           ;pin_manager.c: 89: ODCONA = 0x00;
  8350  0624  0025               	movlb	5	; select bank5
  8351  0625  018C               	clrf	12	;volatile
  8352                           
  8353                           ;pin_manager.c: 90: ODCONB = 0x00;
  8354  0626  018D               	clrf	13	;volatile
  8355                           
  8356                           ;pin_manager.c: 91: ODCONC = 0x00;
  8357  0627  018E               	clrf	14	;volatile
  8358                           
  8359                           ;pin_manager.c: 96: SLRCONA = 0x37;
  8360  0628  3037               	movlw	55
  8361  0629  0026               	movlb	6	; select bank6
  8362  062A  008C               	movwf	12	;volatile
  8363                           
  8364                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  8365  062B  30F0               	movlw	240
  8366  062C  008D               	movwf	13	;volatile
  8367                           
  8368                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  8369  062D  30FF               	movlw	255
  8370  062E  008E               	movwf	14	;volatile
  8371                           
  8372                           ;pin_manager.c: 103: INLVLA = 0x3F;
  8373  062F  303F               	movlw	63
  8374  0630  0027               	movlb	7	; select bank7
  8375  0631  008C               	movwf	12	;volatile
  8376                           
  8377                           ;pin_manager.c: 104: INLVLB = 0xF0;
  8378  0632  30F0               	movlw	240
  8379  0633  008D               	movwf	13	;volatile
  8380                           
  8381                           ;pin_manager.c: 105: INLVLC = 0xFF;
  8382  0634  30FF               	movlw	255
  8383  0635  008E               	movwf	14	;volatile
  8384                           
  8385                           ;pin_manager.c: 113: INTCONbits.IOCIE = 1;
  8386  0636  158B               	bsf	11,3	;volatile
  8387                           
  8388                           ;pin_manager.c: 116: INTPPS = 0x02;
  8389  0637  3002               	movlw	2
  8390  0638  003C               	movlb	28	; select bank28
  8391  0639  0090               	movwf	16	;volatile
  8392                           
  8393                           ;pin_manager.c: 117: RXPPS = 0x0D;
  8394  063A  300D               	movlw	13
  8395  063B  00A4               	movwf	36	;volatile
  8396                           
  8397                           ;pin_manager.c: 118: RB7PPS = 0x14;
  8398  063C  3014               	movlw	20
  8399  063D  003D               	movlb	29	; select bank29
  8400  063E  009F               	movwf	31	;volatile
  8401  063F  0008               	return
  8402  0640                     __end_of_PIN_MANAGER_Initialize:	
  8403                           
  8404                           	psect	text34
  8405  0EF0                     __ptext34:	
  8406 ;; *************** function _OSCILLATOR_Initialize *****************
  8407 ;; Defined at:
  8408 ;;		line 66 in file "mcc_generated_files/mcc.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;		None
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;		None
  8413 ;; Return value:  Size  Location     Type
  8414 ;;                  1    wreg      void 
  8415 ;; Registers used:
  8416 ;;		wreg, status,2
  8417 ;; Tracked objects:
  8418 ;;		On entry : 0/0
  8419 ;;		On exit  : 0/0
  8420 ;;		Unchanged: 0/0
  8421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8422 ;;      Params:         0       0       0       0       0       0       0       0
  8423 ;;      Locals:         0       0       0       0       0       0       0       0
  8424 ;;      Temps:          0       0       0       0       0       0       0       0
  8425 ;;      Totals:         0       0       0       0       0       0       0       0
  8426 ;;Total ram usage:        0 bytes
  8427 ;; Hardware stack levels used:    1
  8428 ;; Hardware stack levels required when called:    4
  8429 ;; This function calls:
  8430 ;;		Nothing
  8431 ;; This function is called by:
  8432 ;;		_SYSTEM_Initialize
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           
  8437                           ;psect for function _OSCILLATOR_Initialize
  8438  0EF0                     _OSCILLATOR_Initialize:	
  8439                           
  8440                           ;mcc.c: 69: OSCCON = 0x6A;
  8441                           
  8442                           ;incstack = 0
  8443                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8444  0EF0  306A               	movlw	106
  8445  0EF1  0021               	movlb	1	; select bank1
  8446  0EF2  0099               	movwf	25	;volatile
  8447                           
  8448                           ;mcc.c: 71: OSCSTAT = 0x00;
  8449  0EF3  019A               	clrf	26	;volatile
  8450                           
  8451                           ;mcc.c: 73: OSCTUNE = 0x00;
  8452  0EF4  0198               	clrf	24	;volatile
  8453                           
  8454                           ;mcc.c: 75: BORCON = 0x00;
  8455  0EF5  0022               	movlb	2	; select bank2
  8456  0EF6  0196               	clrf	22	;volatile
  8457  0EF7  0008               	return
  8458  0EF8                     __end_of_OSCILLATOR_Initialize:	
  8459                           
  8460                           	psect	text35
  8461  0EA3                     __ptext35:	
  8462 ;; *************** function _OPA2_Initialize *****************
  8463 ;; Defined at:
  8464 ;;		line 58 in file "mcc_generated_files/opa2.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;		None
  8467 ;; Auto vars:     Size  Location     Type
  8468 ;;		None
  8469 ;; Return value:  Size  Location     Type
  8470 ;;                  1    wreg      void 
  8471 ;; Registers used:
  8472 ;;		wreg
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8478 ;;      Params:         0       0       0       0       0       0       0       0
  8479 ;;      Locals:         0       0       0       0       0       0       0       0
  8480 ;;      Temps:          0       0       0       0       0       0       0       0
  8481 ;;      Totals:         0       0       0       0       0       0       0       0
  8482 ;;Total ram usage:        0 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; Hardware stack levels required when called:    4
  8485 ;; This function calls:
  8486 ;;		Nothing
  8487 ;; This function is called by:
  8488 ;;		_SYSTEM_Initialize
  8489 ;;		_main
  8490 ;; This function uses a non-reentrant model
  8491 ;;
  8492                           
  8493                           
  8494                           ;psect for function _OPA2_Initialize
  8495  0EA3                     _OPA2_Initialize:	
  8496                           
  8497                           ;opa2.c: 61: OPA2CON = 0xC2;
  8498                           
  8499                           ;incstack = 0
  8500                           ; Regs used in _OPA2_Initialize: [wreg]
  8501  0EA3  30C2               	movlw	194
  8502  0EA4  002A               	movlb	10	; select bank10
  8503  0EA5  0095               	movwf	21	;volatile
  8504  0EA6  0008               	return
  8505  0EA7                     __end_of_OPA2_Initialize:	
  8506                           
  8507                           	psect	text36
  8508  0E9F                     __ptext36:	
  8509 ;; *************** function _OPA1_Initialize *****************
  8510 ;; Defined at:
  8511 ;;		line 58 in file "mcc_generated_files/opa1.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;		None
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;		None
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  1    wreg      void 
  8518 ;; Registers used:
  8519 ;;		wreg
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8525 ;;      Params:         0       0       0       0       0       0       0       0
  8526 ;;      Locals:         0       0       0       0       0       0       0       0
  8527 ;;      Temps:          0       0       0       0       0       0       0       0
  8528 ;;      Totals:         0       0       0       0       0       0       0       0
  8529 ;;Total ram usage:        0 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; Hardware stack levels required when called:    4
  8532 ;; This function calls:
  8533 ;;		Nothing
  8534 ;; This function is called by:
  8535 ;;		_SYSTEM_Initialize
  8536 ;;		_main
  8537 ;; This function uses a non-reentrant model
  8538 ;;
  8539                           
  8540                           
  8541                           ;psect for function _OPA1_Initialize
  8542  0E9F                     _OPA1_Initialize:	
  8543                           
  8544                           ;opa1.c: 61: OPA1CON = 0xC2;
  8545                           
  8546                           ;incstack = 0
  8547                           ; Regs used in _OPA1_Initialize: [wreg]
  8548  0E9F  30C2               	movlw	194
  8549  0EA0  002A               	movlb	10	; select bank10
  8550  0EA1  0091               	movwf	17	;volatile
  8551  0EA2  0008               	return
  8552  0EA3                     __end_of_OPA1_Initialize:	
  8553                           
  8554                           	psect	text37
  8555  0F13                     __ptext37:	
  8556 ;; *************** function _EXT_INT_Initialize *****************
  8557 ;; Defined at:
  8558 ;;		line 138 in file "mcc_generated_files/ext_int.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;		None
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;		None
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      void 
  8565 ;; Registers used:
  8566 ;;		wreg, status,2, status,0, pclath, cstack
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8572 ;;      Params:         0       0       0       0       0       0       0       0
  8573 ;;      Locals:         0       0       0       0       0       0       0       0
  8574 ;;      Temps:          0       0       0       0       0       0       0       0
  8575 ;;      Totals:         0       0       0       0       0       0       0       0
  8576 ;;Total ram usage:        0 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:    5
  8579 ;; This function calls:
  8580 ;;		_INT_SetInterruptHandler
  8581 ;; This function is called by:
  8582 ;;		_SYSTEM_Initialize
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           
  8587                           ;psect for function _EXT_INT_Initialize
  8588  0F13                     _EXT_INT_Initialize:	
  8589                           
  8590                           ;ext_int.c: 143: (INTCONbits.INTF = 0);
  8591                           
  8592                           ;incstack = 0
  8593                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8594  0F13  108B               	bcf	11,1	;volatile
  8595                           
  8596                           ;ext_int.c: 144: (OPTION_REGbits.INTEDG = 0);
  8597  0F14  0021               	movlb	1	; select bank1
  8598  0F15  1315               	bcf	21,6	;volatile
  8599                           
  8600                           ;ext_int.c: 146: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  8601  0F16  30F1               	movlw	low _INT_DefaultInterruptHandler
  8602  0F17  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler
  8603  0F18  3004               	movlw	high _INT_DefaultInterruptHandler
  8604  0F19  00F4               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  8605  0F1A  318E  26D2         	fcall	_INT_SetInterruptHandler
  8606                           
  8607                           ;ext_int.c: 147: (INTCONbits.INTE = 1);
  8608  0F1C  160B               	bsf	11,4	;volatile
  8609  0F1D  0008               	return
  8610  0F1E                     __end_of_EXT_INT_Initialize:	
  8611                           
  8612                           	psect	text38
  8613  0ED2                     __ptext38:	
  8614 ;; *************** function _INT_SetInterruptHandler *****************
  8615 ;; Defined at:
  8616 ;;		line 71 in file "mcc_generated_files/ext_int.c"
  8617 ;; Parameters:    Size  Location     Type
  8618 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  8619 ;;		 -> INT_DefaultInterruptHandler(1), 
  8620 ;; Auto vars:     Size  Location     Type
  8621 ;;		None
  8622 ;; Return value:  Size  Location     Type
  8623 ;;                  1    wreg      void 
  8624 ;; Registers used:
  8625 ;;		wreg
  8626 ;; Tracked objects:
  8627 ;;		On entry : 0/0
  8628 ;;		On exit  : 0/0
  8629 ;;		Unchanged: 0/0
  8630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8631 ;;      Params:         2       0       0       0       0       0       0       0
  8632 ;;      Locals:         0       0       0       0       0       0       0       0
  8633 ;;      Temps:          0       0       0       0       0       0       0       0
  8634 ;;      Totals:         2       0       0       0       0       0       0       0
  8635 ;;Total ram usage:        2 bytes
  8636 ;; Hardware stack levels used:    1
  8637 ;; Hardware stack levels required when called:    4
  8638 ;; This function calls:
  8639 ;;		Nothing
  8640 ;; This function is called by:
  8641 ;;		_EXT_INT_Initialize
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645                           
  8646                           ;psect for function _INT_SetInterruptHandler
  8647  0ED2                     _INT_SetInterruptHandler:	
  8648                           
  8649                           ;ext_int.c: 72: INT_InterruptHandler = InterruptHandler;
  8650                           
  8651                           ;incstack = 0
  8652                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  8653  0ED2  0874               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  8654  0ED3  0021               	movlb	1	; select bank1
  8655  0ED4  00CC               	movwf	(_INT_InterruptHandler+1)^(0+128)
  8656  0ED5  0873               	movf	INT_SetInterruptHandler@InterruptHandler,w
  8657  0ED6  00CB               	movwf	_INT_InterruptHandler^(0+128)
  8658  0ED7  0008               	return
  8659  0ED8                     __end_of_INT_SetInterruptHandler:	
  8660                           
  8661                           	psect	text39
  8662  07A7                     __ptext39:	
  8663 ;; *************** function _EUSART_Initialize *****************
  8664 ;; Defined at:
  8665 ;;		line 66 in file "mcc_generated_files/eusart.c"
  8666 ;; Parameters:    Size  Location     Type
  8667 ;;		None
  8668 ;; Auto vars:     Size  Location     Type
  8669 ;;		None
  8670 ;; Return value:  Size  Location     Type
  8671 ;;                  1    wreg      void 
  8672 ;; Registers used:
  8673 ;;		wreg, status,2, status,0, pclath, cstack
  8674 ;; Tracked objects:
  8675 ;;		On entry : 0/0
  8676 ;;		On exit  : 0/0
  8677 ;;		Unchanged: 0/0
  8678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8679 ;;      Params:         0       0       0       0       0       0       0       0
  8680 ;;      Locals:         0       0       0       0       0       0       0       0
  8681 ;;      Temps:          0       0       0       0       0       0       0       0
  8682 ;;      Totals:         0       0       0       0       0       0       0       0
  8683 ;;Total ram usage:        0 bytes
  8684 ;; Hardware stack levels used:    1
  8685 ;; Hardware stack levels required when called:    5
  8686 ;; This function calls:
  8687 ;;		_EUSART_SetErrorHandler
  8688 ;;		_EUSART_SetFramingErrorHandler
  8689 ;;		_EUSART_SetOverrunErrorHandler
  8690 ;; This function is called by:
  8691 ;;		_SYSTEM_Initialize
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           
  8696                           ;psect for function _EUSART_Initialize
  8697  07A7                     _EUSART_Initialize:	
  8698                           
  8699                           ;eusart.c: 71: BAUD1CON = 0x08;
  8700                           
  8701                           ;incstack = 0
  8702                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8703  07A7  3008               	movlw	8
  8704  07A8  0023               	movlb	3	; select bank3
  8705  07A9  009F               	movwf	31	;volatile
  8706                           
  8707                           ;eusart.c: 74: RC1STA = 0x90;
  8708  07AA  3090               	movlw	144
  8709  07AB  009D               	movwf	29	;volatile
  8710                           
  8711                           ;eusart.c: 77: TX1STA = 0x24;
  8712  07AC  3024               	movlw	36
  8713  07AD  009E               	movwf	30	;volatile
  8714                           
  8715                           ;eusart.c: 80: SP1BRGL = 0x08;
  8716  07AE  3008               	movlw	8
  8717  07AF  009B               	movwf	27	;volatile
  8718                           
  8719                           ;eusart.c: 83: SP1BRGH = 0x00;
  8720  07B0  019C               	clrf	28	;volatile
  8721                           
  8722                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  8723  07B1  3000               	movlw	0
  8724  07B2  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  8725  07B3  3000               	movlw	0
  8726  07B4  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  8727  07B5  318E  26C6  3187   	fcall	_EUSART_SetFramingErrorHandler
  8728                           
  8729                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  8730  07B8  3000               	movlw	0
  8731  07B9  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  8732  07BA  3000               	movlw	0
  8733  07BB  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  8734  07BC  318E  26CC  3187   	fcall	_EUSART_SetOverrunErrorHandler
  8735                           
  8736                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  8737  07BF  3000               	movlw	0
  8738  07C0  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler
  8739  07C1  3000               	movlw	0
  8740  07C2  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  8741  07C3  318E  26C0         	fcall	_EUSART_SetErrorHandler
  8742                           
  8743                           ;eusart.c: 90: eusartRxLastError.status = 0;
  8744  07C5  0021               	movlb	1	; select bank1
  8745  07C6  01DF               	clrf	_eusartRxLastError^(0+128)	;volatile
  8746  07C7  0008               	return
  8747  07C8                     __end_of_EUSART_Initialize:	
  8748                           
  8749                           	psect	text40
  8750  0ECC                     __ptext40:	
  8751 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  8752 ;; Defined at:
  8753 ;;		line 170 in file "mcc_generated_files/eusart.c"
  8754 ;; Parameters:    Size  Location     Type
  8755 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  8756 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;		None
  8759 ;; Return value:  Size  Location     Type
  8760 ;;                  1    wreg      void 
  8761 ;; Registers used:
  8762 ;;		wreg
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8768 ;;      Params:         2       0       0       0       0       0       0       0
  8769 ;;      Locals:         0       0       0       0       0       0       0       0
  8770 ;;      Temps:          0       0       0       0       0       0       0       0
  8771 ;;      Totals:         2       0       0       0       0       0       0       0
  8772 ;;Total ram usage:        2 bytes
  8773 ;; Hardware stack levels used:    1
  8774 ;; Hardware stack levels required when called:    4
  8775 ;; This function calls:
  8776 ;;		Nothing
  8777 ;; This function is called by:
  8778 ;;		_EUSART_Initialize
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           
  8783                           ;psect for function _EUSART_SetOverrunErrorHandler
  8784  0ECC                     _EUSART_SetOverrunErrorHandler:	
  8785                           
  8786                           ;eusart.c: 171: EUSART_OverrunErrorHandler = interruptHandler;
  8787                           
  8788                           ;incstack = 0
  8789                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  8790  0ECC  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  8791  0ECD  0021               	movlb	1	; select bank1
  8792  0ECE  00D0               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  8793  0ECF  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  8794  0ED0  00CF               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  8795  0ED1  0008               	return
  8796  0ED2                     __end_of_EUSART_SetOverrunErrorHandler:	
  8797                           
  8798                           	psect	text41
  8799  0EC6                     __ptext41:	
  8800 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  8801 ;; Defined at:
  8802 ;;		line 166 in file "mcc_generated_files/eusart.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  8805 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;		None
  8808 ;; Return value:  Size  Location     Type
  8809 ;;                  1    wreg      void 
  8810 ;; Registers used:
  8811 ;;		wreg
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8817 ;;      Params:         2       0       0       0       0       0       0       0
  8818 ;;      Locals:         0       0       0       0       0       0       0       0
  8819 ;;      Temps:          0       0       0       0       0       0       0       0
  8820 ;;      Totals:         2       0       0       0       0       0       0       0
  8821 ;;Total ram usage:        2 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    4
  8824 ;; This function calls:
  8825 ;;		Nothing
  8826 ;; This function is called by:
  8827 ;;		_EUSART_Initialize
  8828 ;; This function uses a non-reentrant model
  8829 ;;
  8830                           
  8831                           
  8832                           ;psect for function _EUSART_SetFramingErrorHandler
  8833  0EC6                     _EUSART_SetFramingErrorHandler:	
  8834                           
  8835                           ;eusart.c: 167: EUSART_FramingErrorHandler = interruptHandler;
  8836                           
  8837                           ;incstack = 0
  8838                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  8839  0EC6  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  8840  0EC7  0021               	movlb	1	; select bank1
  8841  0EC8  00D2               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  8842  0EC9  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  8843  0ECA  00D1               	movwf	_EUSART_FramingErrorHandler^(0+128)
  8844  0ECB  0008               	return
  8845  0ECC                     __end_of_EUSART_SetFramingErrorHandler:	
  8846                           
  8847                           	psect	text42
  8848  0EC0                     __ptext42:	
  8849 ;; *************** function _EUSART_SetErrorHandler *****************
  8850 ;; Defined at:
  8851 ;;		line 174 in file "mcc_generated_files/eusart.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  8854 ;;		 -> EUSART_DefaultErrorHandler(1), 
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;		None
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  1    wreg      void 
  8859 ;; Registers used:
  8860 ;;		wreg
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8866 ;;      Params:         2       0       0       0       0       0       0       0
  8867 ;;      Locals:         0       0       0       0       0       0       0       0
  8868 ;;      Temps:          0       0       0       0       0       0       0       0
  8869 ;;      Totals:         2       0       0       0       0       0       0       0
  8870 ;;Total ram usage:        2 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:    4
  8873 ;; This function calls:
  8874 ;;		Nothing
  8875 ;; This function is called by:
  8876 ;;		_EUSART_Initialize
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           
  8881                           ;psect for function _EUSART_SetErrorHandler
  8882  0EC0                     _EUSART_SetErrorHandler:	
  8883                           
  8884                           ;eusart.c: 175: EUSART_ErrorHandler = interruptHandler;
  8885                           
  8886                           ;incstack = 0
  8887                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  8888  0EC0  0874               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  8889  0EC1  0021               	movlb	1	; select bank1
  8890  0EC2  00CE               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  8891  0EC3  0873               	movf	EUSART_SetErrorHandler@interruptHandler,w
  8892  0EC4  00CD               	movwf	_EUSART_ErrorHandler^(0+128)
  8893  0EC5  0008               	return
  8894  0EC6                     __end_of_EUSART_SetErrorHandler:	
  8895                           
  8896                           	psect	text43
  8897  0EBA                     __ptext43:	
  8898 ;; *************** function _DAC_Initialize *****************
  8899 ;; Defined at:
  8900 ;;		line 58 in file "mcc_generated_files/dac.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;		None
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;		None
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  1    wreg      void 
  8907 ;; Registers used:
  8908 ;;		wreg
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8914 ;;      Params:         0       0       0       0       0       0       0       0
  8915 ;;      Locals:         0       0       0       0       0       0       0       0
  8916 ;;      Temps:          0       0       0       0       0       0       0       0
  8917 ;;      Totals:         0       0       0       0       0       0       0       0
  8918 ;;Total ram usage:        0 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    4
  8921 ;; This function calls:
  8922 ;;		Nothing
  8923 ;; This function is called by:
  8924 ;;		_SYSTEM_Initialize
  8925 ;;		_main
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           
  8930                           ;psect for function _DAC_Initialize
  8931  0EBA                     _DAC_Initialize:	
  8932                           
  8933                           ;dac.c: 61: DAC1CON0 = 0x80;
  8934                           
  8935                           ;incstack = 0
  8936                           ; Regs used in _DAC_Initialize: [wreg]
  8937  0EBA  3080               	movlw	128
  8938  0EBB  0022               	movlb	2	; select bank2
  8939  0EBC  0098               	movwf	24	;volatile
  8940                           
  8941                           ;dac.c: 63: DAC1CON1 = 0xFF;
  8942  0EBD  30FF               	movlw	255
  8943  0EBE  0099               	movwf	25	;volatile
  8944  0EBF  0008               	return
  8945  0EC0                     __end_of_DAC_Initialize:	
  8946                           
  8947                           	psect	intentry
  8948  0004                     __pintentry:	
  8949 ;; *************** function _INTERRUPT_InterruptManager *****************
  8950 ;; Defined at:
  8951 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;		None
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;		None
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      void 
  8958 ;; Registers used:
  8959 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8965 ;;      Params:         0       0       0       0       0       0       0       0
  8966 ;;      Locals:         0       0       0       0       0       0       0       0
  8967 ;;      Temps:          1       0       0       0       0       0       0       0
  8968 ;;      Totals:         1       0       0       0       0       0       0       0
  8969 ;;Total ram usage:        1 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    3
  8972 ;; This function calls:
  8973 ;;		_INT_ISR
  8974 ;;		_PIN_MANAGER_IOC
  8975 ;;		_TMR0_ISR
  8976 ;;		_TMR4_ISR
  8977 ;; This function is called by:
  8978 ;;		Interrupt level 1
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982  0004                     _INTERRUPT_InterruptManager:	
  8983                           
  8984                           ;incstack = 0
  8985  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8986                           
  8987                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8988  0005  3180               	pagesel	$
  8989  0006  0020               	movlb	0	; select bank0
  8990  0007  087F               	movf	127,w
  8991  0008  00F2               	movwf	??_INTERRUPT_InterruptManager
  8992                           
  8993                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  8994  0009  1A8B               	btfsc	11,5	;volatile
  8995  000A  1D0B               	btfss	11,2	;volatile
  8996  000B  2810               	goto	i1l136
  8997                           
  8998                           ;interrupt_manager.c: 56: {
  8999                           ;interrupt_manager.c: 57: TMR0_ISR();
  9000  000C  318F  272B  3180   	fcall	_TMR0_ISR
  9001                           
  9002                           ;interrupt_manager.c: 58: }
  9003  000F  2828               	goto	i1l146
  9004  0010                     i1l136:	
  9005                           
  9006                           ;interrupt_manager.c: 59: else if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
  9007  0010  1A0B               	btfsc	11,4	;volatile
  9008  0011  1C8B               	btfss	11,1	;volatile
  9009  0012  2817               	goto	i1l138
  9010                           
  9011                           ;interrupt_manager.c: 60: {
  9012                           ;interrupt_manager.c: 61: INT_ISR();
  9013  0013  318E  269B  3180   	fcall	_INT_ISR
  9014                           
  9015                           ;interrupt_manager.c: 62: }
  9016  0016  2828               	goto	i1l146
  9017  0017                     i1l138:	
  9018                           
  9019                           ;interrupt_manager.c: 63: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  9020  0017  198B               	btfsc	11,3	;volatile
  9021  0018  1C0B               	btfss	11,0	;volatile
  9022  0019  281E               	goto	i1l140
  9023                           
  9024                           ;interrupt_manager.c: 64: {
  9025                           ;interrupt_manager.c: 65: PIN_MANAGER_IOC();
  9026  001A  318E  269A  3180   	fcall	_PIN_MANAGER_IOC
  9027                           
  9028                           ;interrupt_manager.c: 66: }
  9029  001D  2828               	goto	i1l146
  9030  001E                     i1l140:	
  9031                           
  9032                           ;interrupt_manager.c: 67: else if(INTCONbits.PEIE == 1)
  9033  001E  1F0B               	btfss	11,6	;volatile
  9034  001F  2828               	goto	i1l146
  9035                           
  9036                           ;interrupt_manager.c: 68: {
  9037                           ;interrupt_manager.c: 69: if(PIE2bits.TMR4IE == 1 && PIR2bits.TMR4IF == 1)
  9038  0020  0021               	movlb	1	; select bank1
  9039  0021  1C92               	btfss	18,1	;volatile
  9040  0022  2828               	goto	i1l146
  9041  0023  0020               	movlb	0	; select bank0
  9042  0024  1C92               	btfss	18,1	;volatile
  9043  0025  2828               	goto	i1l146
  9044                           
  9045                           ;interrupt_manager.c: 70: {
  9046                           ;interrupt_manager.c: 71: TMR4_ISR();
  9047  0026  318F  271E         	fcall	_TMR4_ISR
  9048  0028                     i1l146:	
  9049                           ;interrupt_manager.c: 78: else
  9050                           ;interrupt_manager.c: 79: {
  9051                           
  9052                           ;interrupt_manager.c: 76: }
  9053                           ;interrupt_manager.c: 77: }
  9054                           
  9055                           ;interrupt_manager.c: 73: else
  9056                           ;interrupt_manager.c: 74: {
  9057                           
  9058                           ;interrupt_manager.c: 72: }
  9059                           
  9060  0028  0872               	movf	??_INTERRUPT_InterruptManager,w
  9061  0029  0020               	movlb	0	; select bank0
  9062  002A  00FF               	movwf	127
  9063  002B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9064  002C  0009               	retfie
  9065  002D                     __end_of_INTERRUPT_InterruptManager:	
  9066                           
  9067                           	psect	text45
  9068  0F1E                     __ptext45:	
  9069 ;; *************** function _TMR4_ISR *****************
  9070 ;; Defined at:
  9071 ;;		line 120 in file "mcc_generated_files/tmr4.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;		None
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;		None
  9076 ;; Return value:  Size  Location     Type
  9077 ;;                  1    wreg      void 
  9078 ;; Registers used:
  9079 ;;		wreg, status,2, status,0, pclath, cstack
  9080 ;; Tracked objects:
  9081 ;;		On entry : 0/0
  9082 ;;		On exit  : 0/0
  9083 ;;		Unchanged: 0/0
  9084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9085 ;;      Params:         0       0       0       0       0       0       0       0
  9086 ;;      Locals:         0       0       0       0       0       0       0       0
  9087 ;;      Temps:          0       0       0       0       0       0       0       0
  9088 ;;      Totals:         0       0       0       0       0       0       0       0
  9089 ;;Total ram usage:        0 bytes
  9090 ;; Hardware stack levels used:    1
  9091 ;; Hardware stack levels required when called:    2
  9092 ;; This function calls:
  9093 ;;		Absolute function
  9094 ;;		_TMR4_DefaultInterruptHandler
  9095 ;; This function is called by:
  9096 ;;		_INTERRUPT_InterruptManager
  9097 ;; This function uses a non-reentrant model
  9098 ;;
  9099                           
  9100                           
  9101                           ;psect for function _TMR4_ISR
  9102  0F1E                     _TMR4_ISR:	
  9103                           
  9104                           ;tmr4.c: 124: PIR2bits.TMR4IF = 0;
  9105                           
  9106                           ;incstack = 0
  9107                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
  9108  0F1E  0020               	movlb	0	; select bank0
  9109  0F1F  1092               	bcf	18,1	;volatile
  9110                           
  9111                           ;tmr4.c: 126: if(TMR4_InterruptHandler)
  9112  0F20  0021               	movlb	1	; select bank1
  9113  0F21  0847               	movf	_TMR4_InterruptHandler^(0+128),w
  9114  0F22  0448               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
  9115  0F23  1903               	btfsc	3,2
  9116  0F24  0008               	return
  9117                           
  9118                           ;tmr4.c: 127: {
  9119                           ;tmr4.c: 128: TMR4_InterruptHandler();
  9120  0F25  0848               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
  9121  0F26  008A               	movwf	10
  9122  0F27  0847               	movf	_TMR4_InterruptHandler^(0+128),w
  9123  0F28  000A               	callw
  9124  0F29  318F               	pagesel	$
  9125  0F2A  0008               	return
  9126  0F2B                     __end_of_TMR4_ISR:	
  9127                           
  9128                           	psect	text46
  9129  0F5D                     __ptext46:	
  9130 ;; *************** function _TMR4_DefaultInterruptHandler *****************
  9131 ;; Defined at:
  9132 ;;		line 145 in file "mcc_generated_files/tmr4.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;		None
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;		None
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      void 
  9139 ;; Registers used:
  9140 ;;		wreg, status,2, status,0, pclath, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9146 ;;      Params:         0       0       0       0       0       0       0       0
  9147 ;;      Locals:         0       0       0       0       0       0       0       0
  9148 ;;      Temps:          0       0       0       0       0       0       0       0
  9149 ;;      Totals:         0       0       0       0       0       0       0       0
  9150 ;;Total ram usage:        0 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    1
  9153 ;; This function calls:
  9154 ;;		_DAC_SetOutput
  9155 ;; This function is called by:
  9156 ;;		_TMR4_Initialize
  9157 ;;		_TMR4_ISR
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           
  9162                           ;psect for function _TMR4_DefaultInterruptHandler
  9163  0F5D                     _TMR4_DefaultInterruptHandler:	
  9164                           
  9165                           ;tmr4.c: 151: if (currentIsOn){
  9166                           
  9167                           ;incstack = 0
  9168                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
  9169  0F5D  0021               	movlb	1	; select bank1
  9170  0F5E  0824               	movf	_currentIsOn^(0+128),w
  9171  0F5F  1903               	btfsc	3,2
  9172  0F60  2F6D               	goto	i1l410
  9173                           
  9174                           ;tmr4.c: 152: currentIsOn = 0;
  9175  0F61  01A4               	clrf	_currentIsOn^(0+128)
  9176                           
  9177                           ;tmr4.c: 153: if (dc_frequency_flag){
  9178  0F62  087A               	movf	_dc_frequency_flag,w
  9179  0F63  1903               	btfsc	3,2
  9180  0F64  2F69               	goto	i1l2281
  9181                           
  9182                           ;tmr4.c: 155: DAC_SetOutput(dac_value);
  9183  0F65  085E               	movf	_dac_value^(0+128),w
  9184  0F66  318E  26AB         	fcall	_DAC_SetOutput
  9185                           
  9186                           ;tmr4.c: 156: } else {
  9187  0F68  0008               	return
  9188  0F69                     i1l2281:	
  9189                           
  9190                           ;tmr4.c: 158: DAC_SetOutput(255);
  9191  0F69  30FF               	movlw	255
  9192  0F6A  318E  26AB         	fcall	_DAC_SetOutput
  9193                           
  9194                           ;tmr4.c: 159: }
  9195                           ;tmr4.c: 160: } else {
  9196  0F6C  0008               	return
  9197  0F6D                     i1l410:	
  9198                           
  9199                           ;tmr4.c: 161: currentIsOn = 1;
  9200  0F6D  01A4               	clrf	_currentIsOn^(0+128)
  9201  0F6E  0AA4               	incf	_currentIsOn^(0+128),f
  9202                           
  9203                           ;tmr4.c: 162: DAC_SetOutput(dac_value);
  9204  0F6F  085E               	movf	_dac_value^(0+128),w
  9205  0F70  318E  26AB         	fcall	_DAC_SetOutput
  9206  0F72  0008               	return
  9207  0F73                     __end_of_TMR4_DefaultInterruptHandler:	
  9208                           
  9209                           	psect	text47
  9210  0EAB                     __ptext47:	
  9211 ;; *************** function _DAC_SetOutput *****************
  9212 ;; Defined at:
  9213 ;;		line 66 in file "mcc_generated_files/dac.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;  inputData       1    wreg     unsigned char 
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;  inputData       1    0[COMMON] unsigned char 
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  1    wreg      void 
  9220 ;; Registers used:
  9221 ;;		wreg
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9227 ;;      Params:         0       0       0       0       0       0       0       0
  9228 ;;      Locals:         1       0       0       0       0       0       0       0
  9229 ;;      Temps:          0       0       0       0       0       0       0       0
  9230 ;;      Totals:         1       0       0       0       0       0       0       0
  9231 ;;Total ram usage:        1 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; This function calls:
  9234 ;;		Nothing
  9235 ;; This function is called by:
  9236 ;;		_TMR4_DefaultInterruptHandler
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           
  9241                           ;psect for function _DAC_SetOutput
  9242  0EAB                     _DAC_SetOutput:	
  9243                           
  9244                           ;incstack = 0
  9245                           ; Regs used in _DAC_SetOutput: [wreg]
  9246                           ;DAC_SetOutput@inputData stored from wreg
  9247  0EAB  00F0               	movwf	DAC_SetOutput@inputData
  9248                           
  9249                           ;dac.c: 68: DAC1CON1 = inputData;
  9250  0EAC  0870               	movf	DAC_SetOutput@inputData,w
  9251  0EAD  0022               	movlb	2	; select bank2
  9252  0EAE  0099               	movwf	25	;volatile
  9253  0EAF  0008               	return
  9254  0EB0                     __end_of_DAC_SetOutput:	
  9255                           
  9256                           	psect	text48
  9257  0F2B                     __ptext48:	
  9258 ;; *************** function _TMR0_ISR *****************
  9259 ;; Defined at:
  9260 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  9261 ;; Parameters:    Size  Location     Type
  9262 ;;		None
  9263 ;; Auto vars:     Size  Location     Type
  9264 ;;		None
  9265 ;; Return value:  Size  Location     Type
  9266 ;;                  1    wreg      void 
  9267 ;; Registers used:
  9268 ;;		wreg, status,2, status,0, pclath, cstack
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9274 ;;      Params:         0       0       0       0       0       0       0       0
  9275 ;;      Locals:         0       0       0       0       0       0       0       0
  9276 ;;      Temps:          0       0       0       0       0       0       0       0
  9277 ;;      Totals:         0       0       0       0       0       0       0       0
  9278 ;;Total ram usage:        0 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; Hardware stack levels required when called:    1
  9281 ;; This function calls:
  9282 ;;		Absolute function
  9283 ;;		_TMR0_DefaultInterruptHandler
  9284 ;; This function is called by:
  9285 ;;		_INTERRUPT_InterruptManager
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           
  9290                           ;psect for function _TMR0_ISR
  9291  0F2B                     _TMR0_ISR:	
  9292                           
  9293                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  9294                           
  9295                           ;incstack = 0
  9296                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  9297  0F2B  110B               	bcf	11,2	;volatile
  9298                           
  9299                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  9300  0F2C  0879               	movf	_timer0ReloadVal,w	;volatile
  9301  0F2D  0020               	movlb	0	; select bank0
  9302  0F2E  0095               	movwf	21	;volatile
  9303                           
  9304                           ;tmr0.c: 116: if(TMR0_InterruptHandler)
  9305  0F2F  0021               	movlb	1	; select bank1
  9306  0F30  0849               	movf	_TMR0_InterruptHandler^(0+128),w
  9307  0F31  044A               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
  9308  0F32  1903               	btfsc	3,2
  9309  0F33  0008               	return
  9310                           
  9311                           ;tmr0.c: 117: {
  9312                           ;tmr0.c: 118: TMR0_InterruptHandler();
  9313  0F34  084A               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
  9314  0F35  008A               	movwf	10
  9315  0F36  0849               	movf	_TMR0_InterruptHandler^(0+128),w
  9316  0F37  000A               	callw
  9317  0F38  318F               	pagesel	$
  9318  0F39  0008               	return
  9319  0F3A                     __end_of_TMR0_ISR:	
  9320                           
  9321                           	psect	text49
  9322  0002                     __ptext49:	
  9323 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  9324 ;; Defined at:
  9325 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;		None
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;		None
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  1    wreg      void 
  9332 ;; Registers used:
  9333 ;;		None
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9339 ;;      Params:         0       0       0       0       0       0       0       0
  9340 ;;      Locals:         0       0       0       0       0       0       0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0
  9342 ;;      Totals:         0       0       0       0       0       0       0       0
  9343 ;;Total ram usage:        0 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; This function calls:
  9346 ;;		Nothing
  9347 ;; This function is called by:
  9348 ;;		_TMR0_Initialize
  9349 ;;		_TMR0_ISR
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _TMR0_DefaultInterruptHandler
  9355  0002                     _TMR0_DefaultInterruptHandler:	
  9356                           
  9357                           ;incstack = 0
  9358                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  9359  0002  0008               	return
  9360  0003                     __end_of_TMR0_DefaultInterruptHandler:	
  9361                           
  9362                           	psect	text50
  9363  0E9A                     __ptext50:	
  9364 ;; *************** function _PIN_MANAGER_IOC *****************
  9365 ;; Defined at:
  9366 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
  9367 ;; Parameters:    Size  Location     Type
  9368 ;;		None
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;		None
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  1    wreg      void 
  9373 ;; Registers used:
  9374 ;;		None
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9380 ;;      Params:         0       0       0       0       0       0       0       0
  9381 ;;      Locals:         0       0       0       0       0       0       0       0
  9382 ;;      Temps:          0       0       0       0       0       0       0       0
  9383 ;;      Totals:         0       0       0       0       0       0       0       0
  9384 ;;Total ram usage:        0 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; This function calls:
  9387 ;;		Nothing
  9388 ;; This function is called by:
  9389 ;;		_INTERRUPT_InterruptManager
  9390 ;; This function uses a non-reentrant model
  9391 ;;
  9392                           
  9393                           
  9394                           ;psect for function _PIN_MANAGER_IOC
  9395  0E9A                     _PIN_MANAGER_IOC:	
  9396                           
  9397                           ;incstack = 0
  9398                           ; Regs used in _PIN_MANAGER_IOC: []
  9399  0E9A  0008               	return
  9400  0E9B                     __end_of_PIN_MANAGER_IOC:	
  9401                           
  9402                           	psect	text51
  9403  0E9B                     __ptext51:	
  9404 ;; *************** function _INT_ISR *****************
  9405 ;; Defined at:
  9406 ;;		line 54 in file "mcc_generated_files/ext_int.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;		None
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;		None
  9411 ;; Return value:  Size  Location     Type
  9412 ;;                  1    wreg      void 
  9413 ;; Registers used:
  9414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9420 ;;      Params:         0       0       0       0       0       0       0       0
  9421 ;;      Locals:         0       0       0       0       0       0       0       0
  9422 ;;      Temps:          0       0       0       0       0       0       0       0
  9423 ;;      Totals:         0       0       0       0       0       0       0       0
  9424 ;;Total ram usage:        0 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    2
  9427 ;; This function calls:
  9428 ;;		_INT_CallBack
  9429 ;; This function is called by:
  9430 ;;		_INTERRUPT_InterruptManager
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           
  9435                           ;psect for function _INT_ISR
  9436  0E9B                     _INT_ISR:	
  9437                           
  9438                           ;ext_int.c: 56: (INTCONbits.INTF = 0);
  9439                           
  9440                           ;incstack = 0
  9441                           ; Regs used in _INT_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9442  0E9B  108B               	bcf	11,1	;volatile
  9443                           
  9444                           ;ext_int.c: 59: INT_CallBack();
  9445  0E9C  318F  2708         	fcall	_INT_CallBack
  9446  0E9E  0008               	return
  9447  0E9F                     __end_of_INT_ISR:	
  9448                           
  9449                           	psect	text52
  9450  0F08                     __ptext52:	
  9451 ;; *************** function _INT_CallBack *****************
  9452 ;; Defined at:
  9453 ;;		line 62 in file "mcc_generated_files/ext_int.c"
  9454 ;; Parameters:    Size  Location     Type
  9455 ;;		None
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;		None
  9458 ;; Return value:  Size  Location     Type
  9459 ;;                  1    wreg      void 
  9460 ;; Registers used:
  9461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9462 ;; Tracked objects:
  9463 ;;		On entry : 0/0
  9464 ;;		On exit  : 0/0
  9465 ;;		Unchanged: 0/0
  9466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9467 ;;      Params:         0       0       0       0       0       0       0       0
  9468 ;;      Locals:         0       0       0       0       0       0       0       0
  9469 ;;      Temps:          0       0       0       0       0       0       0       0
  9470 ;;      Totals:         0       0       0       0       0       0       0       0
  9471 ;;Total ram usage:        0 bytes
  9472 ;; Hardware stack levels used:    1
  9473 ;; Hardware stack levels required when called:    1
  9474 ;; This function calls:
  9475 ;;		Absolute function
  9476 ;;		_INT_DefaultInterruptHandler
  9477 ;; This function is called by:
  9478 ;;		_INT_ISR
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           
  9483                           ;psect for function _INT_CallBack
  9484  0F08                     _INT_CallBack:	
  9485                           
  9486                           ;ext_int.c: 65: if(INT_InterruptHandler)
  9487                           
  9488                           ;incstack = 0
  9489                           ; Regs used in _INT_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9490  0F08  0021               	movlb	1	; select bank1
  9491  0F09  084B               	movf	_INT_InterruptHandler^(0+128),w
  9492  0F0A  044C               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
  9493  0F0B  1903               	btfsc	3,2
  9494  0F0C  0008               	return
  9495                           
  9496                           ;ext_int.c: 66: {
  9497                           ;ext_int.c: 67: INT_InterruptHandler();
  9498  0F0D  084C               	movf	(_INT_InterruptHandler+1)^(0+128),w
  9499  0F0E  008A               	movwf	10
  9500  0F0F  084B               	movf	_INT_InterruptHandler^(0+128),w
  9501  0F10  000A               	callw
  9502  0F11  318F               	pagesel	$
  9503  0F12  0008               	return
  9504  0F13                     __end_of_INT_CallBack:	
  9505                           
  9506                           	psect	text53
  9507  04F1                     __ptext53:	
  9508 ;; *************** function _INT_DefaultInterruptHandler *****************
  9509 ;; Defined at:
  9510 ;;		line 75 in file "mcc_generated_files/ext_int.c"
  9511 ;; Parameters:    Size  Location     Type
  9512 ;;		None
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;  time            1    1[COMMON] unsigned char 
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  1    wreg      void 
  9517 ;; Registers used:
  9518 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9524 ;;      Params:         0       0       0       0       0       0       0       0
  9525 ;;      Locals:         1       0       0       0       0       0       0       0
  9526 ;;      Temps:          1       0       0       0       0       0       0       0
  9527 ;;      Totals:         2       0       0       0       0       0       0       0
  9528 ;;Total ram usage:        2 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; This function calls:
  9531 ;;		Nothing
  9532 ;; This function is called by:
  9533 ;;		_EXT_INT_Initialize
  9534 ;;		_INT_CallBack
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           
  9539                           ;psect for function _INT_DefaultInterruptHandler
  9540  04F1                     _INT_DefaultInterruptHandler:	
  9541                           
  9542                           ;ext_int.c: 77: uint8_t time = TMR0;
  9543                           
  9544                           ;incstack = 0
  9545                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr0h+status,2+status,0]
  9546  04F1  0020               	movlb	0	; select bank0
  9547  04F2  0815               	movf	21,w	;volatile
  9548  04F3  00F0               	movwf	??_INT_DefaultInterruptHandler
  9549  04F4  0870               	movf	??_INT_DefaultInterruptHandler,w
  9550  04F5  00F1               	movwf	INT_DefaultInterruptHandler@time
  9551                           
  9552                           ;ext_int.c: 78: TMR0 = 0;
  9553  04F6  0195               	clrf	21	;volatile
  9554                           
  9555                           ;ext_int.c: 81: if (INTCONbits.TMR0IF){
  9556  04F7  190B               	btfsc	11,2	;volatile
  9557                           
  9558                           ;ext_int.c: 82: time = 0;
  9559  04F8  01F1               	clrf	INT_DefaultInterruptHandler@time
  9560                           
  9561                           ;ext_int.c: 83: }
  9562                           ;ext_int.c: 84: INTCONbits.TMR0IF = 0;
  9563  04F9  110B               	bcf	11,2	;volatile
  9564                           
  9565                           ;ext_int.c: 86: switch(ir_code.state){
  9566  04FA  2D34               	goto	i1l2001
  9567  04FB                     i1l1965:	
  9568                           ;ext_int.c: 87: case STATE_RESET:
  9569                           
  9570                           
  9571                           ;ext_int.c: 89: if (time >= 180 && time <= 243){
  9572  04FB  30B4               	movlw	180
  9573  04FC  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9574  04FD  1C03               	skipc
  9575  04FE  2D40               	goto	i1l269
  9576  04FF  30F4               	movlw	244
  9577  0500  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9578  0501  1803               	skipnc
  9579  0502  2D40               	goto	i1l269
  9580                           
  9581                           ;ext_int.c: 90: ir_code.n_bits = 0;
  9582  0503  0021               	movlb	1	; select bank1
  9583  0504  01E0               	clrf	_ir_code^(0+128)
  9584                           
  9585                           ;ext_int.c: 91: ir_code.state = STATE_RECEIVING;
  9586  0505  01E1               	clrf	(_ir_code^(0+128)+1)
  9587  0506  0AE1               	incf	(_ir_code^(0+128)+1),f
  9588                           
  9589                           ;ext_int.c: 95: }
  9590                           ;ext_int.c: 96: break;
  9591  0507  2D40               	goto	i1l269
  9592  0508                     i1l1973:	
  9593                           ;ext_int.c: 97: case STATE_RECEIVING:
  9594                           
  9595                           
  9596                           ;ext_int.c: 99: ir_code.code <<= 1;
  9597  0508  3001               	movlw	1
  9598  0509                     u92_25:	
  9599  0509  35E2               	lslf	(_ir_code^(0+128)+2),f
  9600  050A  0DE3               	rlf	((_ir_code+1)^(0+128)+2),f
  9601  050B  0DE4               	rlf	((_ir_code+2)^(0+128)+2),f
  9602  050C  0DE5               	rlf	((_ir_code+3)^(0+128)+2),f
  9603  050D  0B89               	decfsz	9,f
  9604  050E  2D09               	goto	u92_25
  9605                           
  9606                           ;ext_int.c: 100: if (time >= 29 && time <= 41){
  9607  050F  301D               	movlw	29
  9608  0510  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9609  0511  1C03               	skipc
  9610  0512  2D19               	goto	i1l1983
  9611  0513  302A               	movlw	42
  9612  0514  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9613  0515  1803               	skipnc
  9614  0516  2D19               	goto	i1l1983
  9615                           
  9616                           ;ext_int.c: 104: ir_code.code |= 1;
  9617  0517  1462               	bsf	(_ir_code^(0+128)+2),0
  9618  0518  2D21               	goto	i1l1987
  9619  0519                     i1l1983:	
  9620                           ;ext_int.c: 106: } else if (time >= 14 && time <= 20){
  9621                           
  9622                           ;ext_int.c: 105: ir_code.n_bits++;
  9623                           
  9624  0519  300E               	movlw	14
  9625  051A  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9626  051B  1C03               	skipc
  9627  051C  2D32               	goto	i1l1999
  9628  051D  3015               	movlw	21
  9629  051E  0271               	subwf	INT_DefaultInterruptHandler@time,w
  9630  051F  1803               	skipnc
  9631  0520  2D32               	goto	i1l1999
  9632  0521                     i1l1987:	
  9633                           
  9634                           ;ext_int.c: 110: ir_code.n_bits++;
  9635  0521  3001               	movlw	1
  9636  0522  00F0               	movwf	??_INT_DefaultInterruptHandler
  9637  0523  0870               	movf	??_INT_DefaultInterruptHandler,w
  9638  0524  07E0               	addwf	_ir_code^(0+128),f
  9639                           
  9640                           ;ext_int.c: 115: }
  9641                           ;ext_int.c: 116: if (32 == ir_code.n_bits){
  9642                           
  9643                           ;ext_int.c: 114: break;
  9644                           
  9645                           ;ext_int.c: 113: ir_code.state = STATE_RESET;
  9646                           
  9647                           ;ext_int.c: 111: } else {
  9648  0525  3020               	movlw	32
  9649  0526  0660               	xorwf	_ir_code^(0+128),w
  9650  0527  1D03               	btfss	3,2
  9651  0528  2D40               	goto	i1l269
  9652                           
  9653                           ;ext_int.c: 119: if (ir_code.command == ((~ir_code.command_b) & 0xff)){
  9654  0529  0962               	comf	(_ir_code^(0+128)+2),w
  9655  052A  0663               	xorwf	(_ir_code^(0+128)+3),w
  9656  052B  1D03               	skipz
  9657  052C  2D32               	goto	i1l1999
  9658                           
  9659                           ;ext_int.c: 120: ir_code.state = STATE_DONE;
  9660  052D  3002               	movlw	2
  9661  052E  00F0               	movwf	??_INT_DefaultInterruptHandler
  9662  052F  0870               	movf	??_INT_DefaultInterruptHandler,w
  9663  0530  00E1               	movwf	(_ir_code^(0+128)+1)
  9664                           
  9665                           ;ext_int.c: 121: } else {
  9666  0531  2D40               	goto	i1l269
  9667  0532                     i1l1999:	
  9668                           ;ext_int.c: 130: default:
  9669                           
  9670                           ;ext_int.c: 129: break;
  9671                           
  9672                           ;ext_int.c: 126: case STATE_DONE:
  9673                           
  9674                           ;ext_int.c: 123: }
  9675                           ;ext_int.c: 124: }
  9676                           ;ext_int.c: 125: break;
  9677                           
  9678                           ;ext_int.c: 122: ir_code.state = STATE_RESET;
  9679                           
  9680                           
  9681                           ;ext_int.c: 132: ir_code.state = STATE_RESET;
  9682  0532  01E1               	clrf	(_ir_code^(0+128)+1)
  9683                           
  9684                           ;ext_int.c: 133: }
  9685  0533  2D40               	goto	i1l269
  9686  0534                     i1l2001:	
  9687  0534  0021               	movlb	1	; select bank1
  9688  0535  0861               	movf	(_ir_code^(0+128)+1),w
  9689                           
  9690                           ; Switch size 1, requested type "space"
  9691                           ; Number of cases is 3, Range of values is 0 to 2
  9692                           ; switch strategies available:
  9693                           ; Name         Instructions Cycles
  9694                           ; simple_byte           10     6 (average)
  9695                           ; direct_byte           12     6 (fixed)
  9696                           ; jumptable            260     6 (fixed)
  9697                           ;	Chosen strategy is simple_byte
  9698  0536  3A00               	xorlw	0	; case 0
  9699  0537  1903               	skipnz
  9700  0538  2CFB               	goto	i1l1965
  9701  0539  3A01               	xorlw	1	; case 1
  9702  053A  1903               	skipnz
  9703  053B  2D08               	goto	i1l1973
  9704  053C  3A03               	xorlw	3	; case 2
  9705  053D  1903               	skipnz
  9706  053E  2D40               	goto	i1l269
  9707  053F  2D32               	goto	i1l1999
  9708  0540                     i1l269:	
  9709                           
  9710                           ;ext_int.c: 135: INTCONbits.INTF = 0;
  9711  0540  108B               	bcf	11,1	;volatile
  9712  0541  0008               	return
  9713  0542                     __end_of_INT_DefaultInterruptHandler:	
  9714  007E                     btemp	set	126	;btemp
  9715  007E                     int$flags	set	126
  9716  007E                     wtemp0	set	126


Data Sizes:
    Strings     118
    Constant    0
    Data        40
    BSS         50
    Persistent  16
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80      7      77
    BANK2            80      0      33
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_6(CODE[15]), STR_5(CODE[23]), STR_4(CODE[20]), STR_3(CODE[20]), 
		 -> STR_2(CODE[19]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK1[6]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 64
		 -> writePersistentState@buf(BANK0[64]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _startUp->_setLEDColor
    _process_remote_command->_selectDecrease
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setCurrent->___awdiv
    _selectSomething->_setLEDColor
    _selectResetValue->_printf
    _selectResetValue->_setLEDColor
    _selectIncrease->_printf
    _selectIncrease->_setLEDColor
    _selectFrequency->_printf
    _selectFrequency->_setLEDColor
    _selectDecrease->_printf
    _selectDecrease->_setLEDColor
    _selectCurrent->_printf
    _selectCurrent->_setLEDColor
    _printf->_putch
    _putch->_EUSART_Write
    ___aldiv->___awdiv
    _lowBattery->_setLEDColor
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR4_DefaultInterruptHandler->_DAC_SetOutput
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _process_remote_command->_writePersistentState
    _writePersistentState->_FLASH_WriteBlock
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    _selectResetValue->_printf
    _selectIncrease->_printf
    _selectFrequency->_printf
    _selectDecrease->_printf
    _selectCurrent->_printf
    _battery_voltage->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_process_remote_command

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   70170
                                              4 BANK1      3     3      0
                     _DAC_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
                         _lowBattery
             _process_remote_command
                _readPersistentState
                         _setCurrent
                       _setFrequency
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              4     4      0    5190
                                              0 BANK0      4     4      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (1) _readPersistentState                                  2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               4     4      0   50674
                                              0 BANK1      4     4      0
                    _battery_voltage
                             _printf
                      _selectCurrent
                     _selectDecrease
                    _selectFrequency
                     _selectIncrease
                   _selectResetValue
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
               _writePersistentState
 ---------------------------------------------------------------------------------
 (2) _writePersistentState                                70    70      0    1464
                                             10 BANK0     70    70      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3    1140
                                              0 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     215
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setFrequency                                         5     3      2    2680
                                             23 BANK0      5     3      2
            _TMR4_LoadPeriodRegister
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _TMR4_LoadPeriodRegister                              1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setCurrent                                          16    12      4    4142
                                             25 BANK0     16    12      4
                            ___aldiv
                            ___awdiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     612
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     683
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    5122
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectResetValue                                     2     2      0    5966
                                              5 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectIncrease                                       2     2      0    5966
                                              5 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    5966
                                              5 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectDecrease                                       1     1      0    5966
                                              7 COMMON     1     1      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    5966
                                              5 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    17      2     844
                                              5 COMMON     2     0      2
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      62
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2    1397
                                             23 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1397
                                              8 BANK0     15     7      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lowBattery                                           2     2      0    5122
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    5122
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     900
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     150
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     150
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     150
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     450
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0     156
                                              2 COMMON     1     1      0
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR4_ISR                                             0     0      0      22
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR4_DefaultInterruptHandler                         0     0      0      22
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (9) _DAC_SetOutput                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT_ISR                                              0     0      0     134
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (8) _INT_CallBack                                         0     0      0     134
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _INT_DefaultInterruptHandler                          2     2      0     134
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _lowBattery
     _setLEDColor
   _process_remote_command
     _battery_voltage
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
     _printf
       _putch
         _EUSART_Write
     _selectCurrent
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectDecrease
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectFrequency
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectIncrease
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectResetValue
       _printf
         _putch
           _EUSART_Write
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___awdiv
       ___lmul
       _battery_voltage (ARG)
         ___aldiv
           ___awdiv (ARG)
           ___lmul (ARG)
     _setFrequency
       _TMR4_LoadPeriodRegister
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___lmul
     _setLEDColor
     _writePersistentState
       _FLASH_WriteBlock
         _FLASH_EraseBlock
   _readPersistentState
   _setCurrent
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
     ___awdiv
     ___lmul
     _battery_voltage (ARG)
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
   _setFrequency
     _TMR4_LoadPeriodRegister
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
     ___lmul
   _startUp
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       _DAC_SetOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      C9       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      7      4D       8       96.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      21      10       41.2%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      C9      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jul 24 11:35:01 2020

                                  __CFG_CP$OFF 0000                                   ___awdiv@sign 0021  
                      __end_of_OPA1_Initialize 0EA3                                _timer0ReloadVal 0079  
                      __size_of_selectIncrease 0023                                    __CFG_LVP$ON 0000  
                                          l213 0F01                                            l612 047D  
                                          l448 03D1                                            l730 028D  
                                          l562 0678                                            l565 0682  
                                          l575 0F7F                                            _PR2 001B  
                                          _PR4 0416                 ?_EUSART_SetFramingErrorHandler 0073  
                              _TMR2_Initialize 0EF8                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                    main@batt_mv 00EB  
               FLASH_WriteBlock@flashWordArray 0022                       __size_of_selectFrequency 0028  
                                         l3001 03EA                                           l3105 049C  
                                         l3107 049D                                           l3203 00C3  
                                         l3213 00DC                                           l3205 00C6  
                                         l3233 010F                                           l3217 00E4  
                                         l3209 00D6                                           l3321 0337  
                                         l3083 0271                                           l3243 0120  
                                         l3227 00F4                                           l3261 0149  
                                         l3253 0139                                           l3245 0123  
                                         l3229 00F7                                           l3087 0276  
                                         l3327 0350                                           l2801 0653  
                                         l3097 048E                                           l3257 0141  
                                         l3249 0133                                           l3193 009D  
                                         l3177 005D                                           l3275 016B  
                                         l3259 0145                                           l3187 0082  
                                         l3283 0186                                           l3269 0158  
                                         l3285 01B4                                           l3189 0085  
                                         l2751 0396                                           l2841 02E7  
                                         l2827 02AE                                           l2819 029E  
                                         l2763 03BC                                           l2845 02F5  
                                         l2837 02DC                                           l2829 02BC  
                                         l2783 0F7A                                           l2863 04B5  
                                         l2793 0FAB                                           l2881 04DB  
                                         l2873 04BD                                           l2857 04AA  
                                         l2875 04C9                                           l2885 04E4  
                                         l2797 0648                                           l2889 04EC  
                                         l2995 03E0                                           STR_1 07FF  
                                         STR_2 083C                                           STR_3 0828  
                                         STR_4 0814                                           STR_5 07E8  
                                         STR_6 084F                                           u2005 04D4  
                                         u2015 04DC                                           u2115 0476  
                                         u2125 0487                                           _LATA 010C  
                                         _LATB 010D                                __end_of_INT_ISR 0E9F  
                                         _LATC 010E                                           u2145 05E0  
                                         u2305 034B                                           u2085 0243  
                                         u2407 0774                                           u2095 026A  
                                         u2175 0075                                           u2327 05F3  
                                         u2417 06DE                                           u2337 0602  
                                         u2427 0FCF                                           u2347 01C7  
                                         u2195 00B6                                           u2437 072B  
                                         u2357 054E                                           u2447 06AF  
                                         u2367 0561                                           u1815 0654  
                                         u2457 06C2                                           u1905 02D1  
                                         u2377 0574                                           u1825 065B  
                                         u1745 0382                                           u1915 02DD  
                                         u2387 0587                                           u2397 074F  
                                         u1875 02B1                                           u1895 02BD  
                                         u1975 04C0                                           u1995 04CA  
                                         _TMR0 0015                                           _TMR2 001A  
                                         _TMR4 0415                        __end_of_OPA2_Initialize 0EA7  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                                           _main 02FE  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                              ?_FLASH_WriteBlock 0020  
          __end_of_INT_DefaultInterruptHandler 0542                    _INT_DefaultInterruptHandler 04F1  
                                         start 002D                                  __CFG_IESO$OFF 0000  
              __end_of_INT_SetInterruptHandler 0ED8                             ??_FLASH_WriteBlock 0023  
                                __CFG_MCLRE$ON 0000                     ??_TMR4_SetInterruptHandler 0075  
                      __end_of_TMR0_Initialize 0F4B                 ??_TMR0_DefaultInterruptHandler 0070  
                                ?_EUSART_Write 0070                 __size_of_OSCILLATOR_Initialize 0008  
                __end_of_OSCILLATOR_Initialize 0EF8                                __end_of___aldiv 02FE  
                                        ?_main 0070                                __end_of___awdiv 04F1  
                                        _ADRES 009B                                  __CFG_WDTE$OFF 0000  
                              ___awdiv@divisor 0073                                          _T2CON 001C  
                                        _T4CON 0417                                          i1l140 001E  
                                        i1l136 0010                                          i1l410 0F6D  
                                        i1l138 0017                                          i1l146 0028  
                                        i1l269 0540                                   ?_setLEDColor 0073  
                              ___awdiv@counter 0020                       __size_of_selectSomething 004D  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          u92_25 0509  
                                        _RXPPS 0E24              __size_of_TMR0_SetInterruptHandler 0006  
                              _TMR4_Initialize 0F4B                            ___lmul@multiplicand 0024  
                    ?_TMR0_SetInterruptHandler 0073                               __end_of_TMR0_ISR 0F3A  
                             __end_of_TMR4_ISR 0F2B                                __end_of_initLED 05D3  
                      __end_of_PIN_MANAGER_IOC 0E9B                                 _WDT_Initialize 0EA7  
                          _readPersistentState 07C8                                          _putch 0EB0  
                                        _stats 0120                                 __CFG_BOREN$OFF 0000  
                                        pclath 000A                                __end_of_startUp 060D  
                                        status 0003                        ?_process_remote_command 0070  
                                        wtemp0 007E                               ??_DAC_Initialize 0073  
                              __initialization 002F                                   __end_of_main 0371  
                         ?_readPersistentState 0070                          __end_of_selectCurrent 073F  
                               ??_EUSART_Write 0073                        __end_of_TMR2_Initialize 0F00  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0070  
                             ?_OPA1_Initialize 0070                                         ??_main 00EA  
                     __size_of_battery_voltage 002E                  __size_of_writePersistentState 0065  
                               __CFG_PLLEN$OFF 0000                       ?_TMR4_LoadPeriodRegister 0070  
                       __end_of_WDT_Initialize 0EAB                       __end_of_selectResetValue 0763  
                                    ??_INT_ISR 0072              _EUSART_DefaultFramingErrorHandler 0000  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 00CF                      FLASH_WriteBlock@writeAddr 0020  
                                       _CCPR1L 0291                               ___awdiv@dividend 0075  
                               __CFG_ZCDDIS$ON 0000                                         _ANSELA 018C  
                                       ?_putch 0070                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                       _RC1REG 0199                                         _RA5PPS 0E95  
                                       _RC1STA 019D                                         i1l2001 0534  
                                       _RC4PPS 0EA4                                         _RB7PPS 0E9F  
                                       _RC5PPS 0EA5                                         _ODCONA 028C  
                                       _ODCONB 028D                                         _ODCONC 028E  
                                       i1l2281 0F69                 __end_of_process_remote_command 01D4  
                                       i1l1973 0508                                         i1l1965 04FB  
                                       i1l1983 0519                                         i1l1987 0521  
                                       i1l1999 0532                                         _INLVLA 038C  
                                       _INLVLB 038D                                         _INLVLC 038E  
                                       _FVRCON 0117                                         _INTPPS 0E10  
                                       _PMADRH 0192                                         _PMADRL 0191  
                             ?_OPA2_Initialize 0070                                         _PMDATH 0194  
                                       _PMDATL 0193                                         _PMCON2 0196  
                    __size_of_FLASH_EraseBlock 001C                                         _OSCCON 0099  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                              ??_selectFrequency 0025  
                               __CFG_PWRTE$OFF 0000                                 _selectDecrease 0FC3  
                                       _Vdd_mv 00D7                          ??_readPersistentState 0073  
                                       ___lmul 0640                                      ??___aldiv 0030  
                                    ??___awdiv 0077                                 __CFG_STVREN$ON 0000  
                             ?_TMR0_Initialize 0070                        __end_of_TMR4_Initialize 0F5D  
                             ___awdiv@quotient 0022                                 _selectIncrease 0763  
                                       _printf 0FA6                                  ?_INT_CallBack 0070  
                                    ??_initLED 0073           __end_of_TMR4_DefaultInterruptHandler 0F73  
        __size_of_TMR4_DefaultInterruptHandler 0016                   _TMR4_DefaultInterruptHandler 0F5D  
                                 __pdataCOMMON 007A                               setCurrent@Vdd_mv 003B  
                              ?_WDT_Initialize 0070               __size_of_INT_SetInterruptHandler 0006  
                                    ??_startUp 0020       TMR4_SetInterruptHandler@InterruptHandler 0073  
     TMR0_SetInterruptHandler@InterruptHandler 0073        INT_SetInterruptHandler@InterruptHandler 0073  
                             ?_PIN_MANAGER_IOC 0070                              ??_selectSomething 0020  
                            _SYSTEM_Initialize 0786                        __end_of__initialization 0050  
                       __end_of_selectDecrease 0FE0                             ?_SYSTEM_Initialize 0070  
                       DAC_SetOutput@inputData 0070                              _dc_frequency_flag 007A  
                               __pcstackCOMMON 0070                                   __pidataBANK1 06F2  
                          ??_SYSTEM_Initialize 0075                                      ?_TMR0_ISR 0070  
                                    ?_TMR4_ISR 0070                         __end_of_selectIncrease 0786  
                                __end_of_putch 0EB5                               ?_TMR2_Initialize 0070  
              __end_of_TMR4_LoadPeriodRegister 0EBA                                 ??_INT_CallBack 0072  
                  __size_of_EXT_INT_Initialize 000B                                 _OPTION_REGbits 0095  
                ?_TMR4_DefaultInterruptHandler 0070                         __size_of_DAC_SetOutput 0005  
                         __size_of_setLEDColor 0017                    FLASH_WriteBlock@GIEBitValue 0028  
              ??_EUSART_SetOverrunErrorHandler 0075                              ??_battery_voltage 0078  
                    __end_of_SYSTEM_Initialize 07A7                                        ??_putch 0074  
                                ?_setFrequency 0037                                     __pbssBANK1 00D7  
                                   __pbssBANK2 0120                           __end_of_EUSART_Write 0F08  
                              ?_selectDecrease 0070                          _TMR4_InterruptHandler 00C7  
                                   __pmaintext 02FE               __end_of_TMR0_SetInterruptHandler 0EDE  
                                      ?___lmul 0020                                     ??_TMR0_ISR 0070  
                              __CFG_PPS1WAY$ON 0000                                     ??_TMR4_ISR 0071  
                                   __pintentry 0004                                ?_selectIncrease 0070  
                               ___lmul@product 0073                               ?_TMR4_Initialize 0070  
                                      ?_printf 0075                      __size_of_FLASH_WriteBlock 0069  
                                      _OPA1CON 0511                                        _OPA2CON 0515  
                                      _LED_red 00DD                                        _SP1BRGH 019C  
                                      _SP1BRGL 019B                                        _INT_ISR 0E9B  
                            _maxFrequencyIndex 00A0                                        _OSCSTAT 009A  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM4DCH 061B                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                     ??_EUSART_SetErrorHandler 0075                                 ??_setFrequency 0039  
                              _maxCurrentIndex 00A2                               _FLASH_EraseBlock 0F8A  
                                _DAC_SetOutput 0EAB                                        ___aldiv 027C  
                                      ___awdiv 049F                                __size_of___lmul 0030  
                                      __ptext1 05D3                                        __ptext2 07C8  
                                      __ptext3 0054                                        __ptext4 03DA  
                                      __ptext5 0371                                        __ptext6 0F8A  
                                      __ptext7 043F                                        __ptext8 0EB5  
                                      __ptext9 01D4                                __size_of_printf 001D  
                                      _initLED 058F                                        _ir_code 00E0  
                                   _lowBattery 069E                          _OSCILLATOR_Initialize 0EF0  
                                    _T2CONbits 001C                               ___aldiv@dividend 002C  
                                    _T4CONbits 0417                       ??_PIN_MANAGER_Initialize 0073  
            __size_of_TMR4_SetInterruptHandler 0006                        _INT_SetInterruptHandler 0ED2  
                    ?_TMR4_SetInterruptHandler 0073                              ?_selectResetValue 0070  
                              _selectFrequency 06CA                                        _startUp 05D3  
                   __size_of_SYSTEM_Initialize 0021                                        clrloop0 0EE5  
                           ??_selectResetValue 0025                           end_of_initialization 0050  
               ??_TMR4_DefaultInterruptHandler 0071                                     _setCurrent 01D4  
        __end_of_EUSART_SetOverrunErrorHandler 0ED2         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0ECC                   __end_of_writePersistentState 043F  
                                    _LED_green 00DC                                        init_ram 0EEA  
                                      initloop 0EEB                           __end_of_INT_CallBack 0F13  
             __size_of_TMR4_LoadPeriodRegister 0005                              _EUSART_Initialize 07A7  
                               _frequencyIndex 00D3                              setCurrent@Vdac_mv 0045  
                               ?_DAC_SetOutput 0070                               __CFG_CLKOUTEN$ON 0000  
                               _frequencyValue 00BB                             ?_EUSART_Initialize 0070  
                                      printf@c 0024                                        printf@f 0075  
                             ___aldiv@quotient 0033                                setLEDColor@blue 0074  
                          ??_EUSART_Initialize 0075                               ??_WDT_Initialize 0073  
                     _TMR0_SetInterruptHandler 0ED8                                _selectSomething 0542  
                      writePersistentState@buf 002E                        writePersistentState@idx 006F  
                             __CFG_FOSC$INTOSC 0000                          __size_of_EUSART_Write 0008  
                     __size_of_OPA1_Initialize 0004                __size_of_EUSART_SetErrorHandler 0006  
                       __size_of_selectCurrent 0026                      __end_of_EUSART_Initialize 07C8  
                                  _CCP1CONbits 0293                    __end_of_readPersistentState 07E8  
                            FLASH_WriteBlock@i 0029                       __size_of_OPA2_Initialize 0004  
                         __end_of_setFrequency 049F                                 __end_of___lmul 0670  
                   _EUSART_DefaultErrorHandler 0000                                _battery_voltage 0670  
                                __pidataCOMMON 0003                                   _EUSART_Write 0F00  
                            __size_of_TMR0_ISR 000F                              __size_of_TMR4_ISR 000D  
                             _FLASH_WriteBlock 0371                         ?_OSCILLATOR_Initialize 0070  
                      __end_of_selectFrequency 06F2                      ??_INT_SetInterruptHandler 0075  
                      __size_of_DAC_Initialize 0006                                    ?_lowBattery 0070  
                               __end_of_printf 0FC3                   __p_HEF_persistent_state_text 0FE0  
                          start_initialization 002F                       __size_of_TMR0_Initialize 0011  
              __size_of_PIN_MANAGER_Initialize 0033                               ??_selectDecrease 0077  
                                  putch@txData 0074                                    ?_setCurrent 0039  
                              ??_DAC_SetOutput 0070                       __size_of_PIN_MANAGER_IOC 0001  
                 ?_INT_DefaultInterruptHandler 0070                               ??_selectIncrease 0025  
               ?_EUSART_SetOverrunErrorHandler 0073                     _EUSART_FramingErrorHandler 00D1  
                      __end_of_selectSomething 058F                                       ??___lmul 0073  
                       _EUSART_SetErrorHandler 0EC0                                    _CCPTMRSbits 029E  
                                _selectCurrent 0719                                    __pdataBANK1 00A0  
                  FLASH_EraseBlock@GIEBitValue 0075                     __end_of_EXT_INT_Initialize 0F1E  
                     __end_of_FLASH_EraseBlock 0FA6                                       ??_printf 0020  
                         _writePersistentState 03DA                                  ??_setLEDColor 0075  
                        writePersistentState@i 006E                                    __pbssCOMMON 0078  
                                    ___latbits 0001                       ??_process_remote_command 00E6  
                                     ?_INT_ISR 0070                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00E6                       __size_of_TMR2_Initialize 0008  
                        __size_of_INT_CallBack 000B                                      _dac_value 00DE  
                      _TMR4_LoadPeriodRegister 0EB5                     __size_of_EUSART_Initialize 0021  
                                 _currentIndex 00D5                              ??_OPA1_Initialize 0073  
                                 _currentValue 00A5                          _TMR0_InterruptHandler 00C9  
                                    __pnvBANK1 00C7                            __size_of_lowBattery 002C  
                       _PIN_MANAGER_Initialize 060D                        __end_of_battery_voltage 069E  
                ??_INT_DefaultInterruptHandler 0070                                       ?___aldiv 0028  
             __end_of_TMR4_SetInterruptHandler 0EE4                                 ?_selectCurrent 0070  
                                     ?___awdiv 0073                                       _DAC1CON0 0118  
                                     _DAC1CON1 0119                   ??_INTERRUPT_InterruptManager 0072  
                          __size_of_setCurrent 00A8                          ?_writePersistentState 0070  
                            ??_OPA2_Initialize 0073                               ?_selectFrequency 0070  
                                 _INT_CallBack 0F08                                       _BAUD1CON 019F  
                                     ?_initLED 0070                       __size_of_TMR4_Initialize 0012  
                                     ?_startUp 0070                            __end_of_setLEDColor 0F8A  
                                    _microamps 00D9                                 __size_of_putch 0005  
               FLASH_WriteBlock@blockStartAddr 0026                                ___aldiv@divisor 0028  
                            ??_TMR0_Initialize 0075                                ___aldiv@counter 0031  
       EUSART_SetErrorHandler@interruptHandler 0073                                       _LED_blue 00DB  
                                    clear_ram0 0EE4                                       _PIE2bits 0092  
                            _eusartRxLastError 00DF                   _HEF_persistent_state_absaddr 0FE0  
                        __size_of_setFrequency 0060            __size_of_INTERRUPT_InterruptManager 0029  
                    __size_of_selectResetValue 0024                     ??_TMR0_SetInterruptHandler 0075  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0075  
                                     _PIR2bits 0012                      FLASH_EraseBlock@startAddr 0073  
                             ?_selectSomething 0070                                 setLEDColor@red 0076  
                                     _TMR0_ISR 0F2B              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR4_ISR 0F1E                              ??_PIN_MANAGER_IOC 0070  
                                   _ADCON0bits 009D                                 _DAC_Initialize 0EBA  
         __size_of_INT_DefaultInterruptHandler 0051                __size_of_process_remote_command 0180  
                             __size_of_INT_ISR 0004                      ??_TMR4_LoadPeriodRegister 0073  
                            ___lmul@multiplier 0020                                   _setFrequency 043F  
                            ??_TMR2_Initialize 0073                   __end_of_HEF_persistent_state 1000  
                     __end_of_FLASH_WriteBlock 03DA                                ??_selectCurrent 0025  
                             ?_battery_voltage 0037                        ??_OSCILLATOR_Initialize 0073  
                          _EUSART_ErrorHandler 00CD                               __size_of___aldiv 0082  
                             __size_of___awdiv 0052                         ??_writePersistentState 002A  
                       __end_of_DAC_Initialize 0EC0                            setFrequency@PR4_val 003A  
                     _TMR4_SetInterruptHandler 0EDE                                   ??_lowBattery 0020  
                                  _currentIsOn 00A4                                    _setLEDColor 0F73  
                           setCurrent@DACValue 0047                               __size_of_initLED 0044  
                                     __ptext10 0640                                       __ptext11 049F  
                                     __ptext20 0F00                                       __ptext12 0542  
                                     __ptext21 0670                                       __ptext13 073F  
                                     __ptext30 0EF8                                       __ptext22 027C  
                                     __ptext14 0763                                       __ptext31 0F3A  
                                     __ptext23 069E                                       __ptext15 06CA  
                                     __ptext40 0ECC                                       __ptext32 0ED8  
                                     __ptext24 0F73                                       __ptext16 0FC3  
                                     __ptext41 0EC6                                       __ptext33 060D  
                                     __ptext25 058F                                       __ptext17 0719  
                                     __ptext50 0E9A                                       __ptext42 0EC0  
                                     __ptext34 0EF0                                       __ptext26 0786  
                                     __ptext18 0FA6                                       __ptext51 0E9B  
                                     __ptext43 0EBA                                       __ptext35 0EA3  
                                     __ptext27 0EA7                                       __ptext19 0EB0  
                                     __ptext52 0F08                                       __ptext36 0E9F  
                                     __ptext28 0F4B                                       __ptext53 04F1  
                                     __ptext45 0F1E                                       __ptext37 0F13  
                                     __ptext29 0EDE                                       __ptext46 0F5D  
                                     __ptext38 0ED2                                       __ptext47 0EAB  
                                     __ptext39 07A7                                       __ptext48 0F2B  
                                     __ptext49 0002                               __size_of_startUp 003A  
                                 ??_setCurrent 003D                                 _interfaceState 0078  
                            ??_TMR4_Initialize 0075                                  __size_of_main 0073  
         __end_of_TMR0_DefaultInterruptHandler 0003          __size_of_TMR0_DefaultInterruptHandler 0001  
                 _TMR0_DefaultInterruptHandler 0002                        ?_EUSART_SetErrorHandler 0073  
                       _process_remote_command 0054                                     _RC1STAbits 019D  
                           __end_of_lowBattery 06CA  EUSART_SetOverrunErrorHandler@interruptHandler 0073  
                                     int$flags 007E                   __size_of_readPersistentState 0020  
           __end_of_INTERRUPT_InterruptManager 002D                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 0ECC         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 0EC6                                ?_DAC_Initialize 0070  
                            ?_FLASH_EraseBlock 0073                             __end_of_setCurrent 027C  
                           ??_FLASH_EraseBlock 0075                                     _INTCONbits 000B  
              INT_DefaultInterruptHandler@time 0071                                    _PWM3DCLbits 0617  
                              _OPA1_Initialize 0E9F                                    _PWM4DCLbits 061A  
                                   _FVRCONbits 0117                           _INT_InterruptHandler 00CB  
                                  _PWM3CONbits 0619                                    _PWM4CONbits 061C  
                           _EXT_INT_Initialize 0F13                        __size_of_WDT_Initialize 0004  
                                     intlevel1 0000                                     _PMCON1bits 0195  
                      ?_PIN_MANAGER_Initialize 0070                     process_remote_command@code 00E9  
               __end_of_EUSART_SetErrorHandler 0EC6                            ?_EXT_INT_Initialize 0070  
                        __end_of_DAC_SetOutput 0EB0                                _OPA2_Initialize 0EA3  
                             _selectResetValue 073F                  ?_TMR0_DefaultInterruptHandler 0070  
                                     printf@ap 0023  EUSART_SetFramingErrorHandler@interruptHandler 0073  
                     ?_INT_SetInterruptHandler 0073                                       startUp@i 0022  
                                __pstringtext1 07E8                                  __pstringtext2 07FF  
                                __pstringtext3 0814                                  __pstringtext4 0828  
                                __pstringtext5 083C                                  __pstringtext6 084F  
                                __pstringtext7 0000                           ??_EXT_INT_Initialize 0075  
                                   _OPTION_REG 0095                           _HEF_persistent_state 0FE0  
                             setLEDColor@green 0073                                _TMR0_Initialize 0F3A  
                          setCurrent@microamps 0039                                   ___aldiv@sign 0032  
                                   _TX1STAbits 019E                       setFrequency@frequency_hz 0037  
                           EUSART_Write@txData 0073                 __end_of_PIN_MANAGER_Initialize 0640  
                              _PIN_MANAGER_IOC 0E9A                        __size_of_selectDecrease 001D  
             TMR4_LoadPeriodRegister@periodVal 0073  
