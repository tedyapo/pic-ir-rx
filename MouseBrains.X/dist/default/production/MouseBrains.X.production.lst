

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Jul  2 20:55:36 2020

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF1708
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	intentry,global,class=CODE,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     
    57                           ; Version 2.00
    58                           ; Generated 27/05/2018 GMT
    59                           ; 
    60                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC16LF1708 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0008                     	;# 
   100  0009                     	;# 
   101  000A                     	;# 
   102  000B                     	;# 
   103  000C                     	;# 
   104  000D                     	;# 
   105  000E                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0013                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001C                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  009F                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  0111                     	;# 
   140  0112                     	;# 
   141  0113                     	;# 
   142  0114                     	;# 
   143  0115                     	;# 
   144  0116                     	;# 
   145  0117                     	;# 
   146  0118                     	;# 
   147  0119                     	;# 
   148  011C                     	;# 
   149  018C                     	;# 
   150  018D                     	;# 
   151  018E                     	;# 
   152  0191                     	;# 
   153  0191                     	;# 
   154  0192                     	;# 
   155  0193                     	;# 
   156  0193                     	;# 
   157  0194                     	;# 
   158  0195                     	;# 
   159  0196                     	;# 
   160  0199                     	;# 
   161  0199                     	;# 
   162  0199                     	;# 
   163  019A                     	;# 
   164  019A                     	;# 
   165  019A                     	;# 
   166  019B                     	;# 
   167  019B                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019C                     	;# 
   172  019C                     	;# 
   173  019C                     	;# 
   174  019D                     	;# 
   175  019D                     	;# 
   176  019D                     	;# 
   177  019E                     	;# 
   178  019E                     	;# 
   179  019E                     	;# 
   180  019F                     	;# 
   181  019F                     	;# 
   182  019F                     	;# 
   183  019F                     	;# 
   184  019F                     	;# 
   185  020C                     	;# 
   186  020D                     	;# 
   187  020E                     	;# 
   188  0211                     	;# 
   189  0211                     	;# 
   190  0212                     	;# 
   191  0212                     	;# 
   192  0213                     	;# 
   193  0213                     	;# 
   194  0214                     	;# 
   195  0214                     	;# 
   196  0215                     	;# 
   197  0215                     	;# 
   198  0215                     	;# 
   199  0215                     	;# 
   200  0216                     	;# 
   201  0216                     	;# 
   202  0217                     	;# 
   203  0217                     	;# 
   204  028C                     	;# 
   205  028D                     	;# 
   206  028E                     	;# 
   207  0291                     	;# 
   208  0291                     	;# 
   209  0292                     	;# 
   210  0293                     	;# 
   211  0293                     	;# 
   212  0298                     	;# 
   213  0298                     	;# 
   214  0299                     	;# 
   215  029A                     	;# 
   216  029A                     	;# 
   217  029E                     	;# 
   218  030C                     	;# 
   219  030D                     	;# 
   220  030E                     	;# 
   221  038C                     	;# 
   222  038D                     	;# 
   223  038E                     	;# 
   224  0391                     	;# 
   225  0392                     	;# 
   226  0393                     	;# 
   227  0394                     	;# 
   228  0395                     	;# 
   229  0396                     	;# 
   230  0397                     	;# 
   231  0398                     	;# 
   232  0399                     	;# 
   233  0415                     	;# 
   234  0416                     	;# 
   235  0417                     	;# 
   236  041C                     	;# 
   237  041D                     	;# 
   238  041E                     	;# 
   239  0511                     	;# 
   240  0515                     	;# 
   241  0617                     	;# 
   242  0618                     	;# 
   243  0619                     	;# 
   244  0619                     	;# 
   245  061A                     	;# 
   246  061B                     	;# 
   247  061C                     	;# 
   248  061C                     	;# 
   249  0691                     	;# 
   250  0692                     	;# 
   251  0693                     	;# 
   252  0694                     	;# 
   253  0695                     	;# 
   254  0696                     	;# 
   255  0697                     	;# 
   256  0698                     	;# 
   257  0699                     	;# 
   258  069A                     	;# 
   259  069B                     	;# 
   260  069C                     	;# 
   261  069D                     	;# 
   262  069E                     	;# 
   263  069F                     	;# 
   264  0E0F                     	;# 
   265  0E10                     	;# 
   266  0E11                     	;# 
   267  0E12                     	;# 
   268  0E13                     	;# 
   269  0E14                     	;# 
   270  0E15                     	;# 
   271  0E17                     	;# 
   272  0E20                     	;# 
   273  0E21                     	;# 
   274  0E22                     	;# 
   275  0E24                     	;# 
   276  0E25                     	;# 
   277  0E28                     	;# 
   278  0E29                     	;# 
   279  0E2A                     	;# 
   280  0E2B                     	;# 
   281  0E90                     	;# 
   282  0E91                     	;# 
   283  0E92                     	;# 
   284  0E94                     	;# 
   285  0E95                     	;# 
   286  0E9C                     	;# 
   287  0E9D                     	;# 
   288  0E9E                     	;# 
   289  0E9F                     	;# 
   290  0EA0                     	;# 
   291  0EA1                     	;# 
   292  0EA2                     	;# 
   293  0EA3                     	;# 
   294  0EA4                     	;# 
   295  0EA5                     	;# 
   296  0EA6                     	;# 
   297  0EA7                     	;# 
   298  0F0F                     	;# 
   299  0F10                     	;# 
   300  0F11                     	;# 
   301  0F12                     	;# 
   302  0F13                     	;# 
   303  0F14                     	;# 
   304  0F15                     	;# 
   305  0F16                     	;# 
   306  0F17                     	;# 
   307  0F18                     	;# 
   308  0F19                     	;# 
   309  0F1A                     	;# 
   310  0F1B                     	;# 
   311  0F1C                     	;# 
   312  0F1D                     	;# 
   313  0F1E                     	;# 
   314  0F1F                     	;# 
   315  0F20                     	;# 
   316  0F21                     	;# 
   317  0F22                     	;# 
   318  0F23                     	;# 
   319  0F24                     	;# 
   320  0F25                     	;# 
   321  0F26                     	;# 
   322  0F27                     	;# 
   323  0F28                     	;# 
   324  0F29                     	;# 
   325  0F2A                     	;# 
   326  0F2B                     	;# 
   327  0F2C                     	;# 
   328  0F2D                     	;# 
   329  0FE4                     	;# 
   330  0FE5                     	;# 
   331  0FE6                     	;# 
   332  0FE7                     	;# 
   333  0FE8                     	;# 
   334  0FE9                     	;# 
   335  0FEA                     	;# 
   336  0FEB                     	;# 
   337  0FED                     	;# 
   338  0FEE                     	;# 
   339  0FEF                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0098                     	;# 
   377  0099                     	;# 
   378  009A                     	;# 
   379  009B                     	;# 
   380  009B                     	;# 
   381  009C                     	;# 
   382  009D                     	;# 
   383  009E                     	;# 
   384  009F                     	;# 
   385  010C                     	;# 
   386  010D                     	;# 
   387  010E                     	;# 
   388  0111                     	;# 
   389  0112                     	;# 
   390  0113                     	;# 
   391  0114                     	;# 
   392  0115                     	;# 
   393  0116                     	;# 
   394  0117                     	;# 
   395  0118                     	;# 
   396  0119                     	;# 
   397  011C                     	;# 
   398  018C                     	;# 
   399  018D                     	;# 
   400  018E                     	;# 
   401  0191                     	;# 
   402  0191                     	;# 
   403  0192                     	;# 
   404  0193                     	;# 
   405  0193                     	;# 
   406  0194                     	;# 
   407  0195                     	;# 
   408  0196                     	;# 
   409  0199                     	;# 
   410  0199                     	;# 
   411  0199                     	;# 
   412  019A                     	;# 
   413  019A                     	;# 
   414  019A                     	;# 
   415  019B                     	;# 
   416  019B                     	;# 
   417  019B                     	;# 
   418  019B                     	;# 
   419  019B                     	;# 
   420  019C                     	;# 
   421  019C                     	;# 
   422  019C                     	;# 
   423  019D                     	;# 
   424  019D                     	;# 
   425  019D                     	;# 
   426  019E                     	;# 
   427  019E                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  019F                     	;# 
   431  019F                     	;# 
   432  019F                     	;# 
   433  019F                     	;# 
   434  020C                     	;# 
   435  020D                     	;# 
   436  020E                     	;# 
   437  0211                     	;# 
   438  0211                     	;# 
   439  0212                     	;# 
   440  0212                     	;# 
   441  0213                     	;# 
   442  0213                     	;# 
   443  0214                     	;# 
   444  0214                     	;# 
   445  0215                     	;# 
   446  0215                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0216                     	;# 
   450  0216                     	;# 
   451  0217                     	;# 
   452  0217                     	;# 
   453  028C                     	;# 
   454  028D                     	;# 
   455  028E                     	;# 
   456  0291                     	;# 
   457  0291                     	;# 
   458  0292                     	;# 
   459  0293                     	;# 
   460  0293                     	;# 
   461  0298                     	;# 
   462  0298                     	;# 
   463  0299                     	;# 
   464  029A                     	;# 
   465  029A                     	;# 
   466  029E                     	;# 
   467  030C                     	;# 
   468  030D                     	;# 
   469  030E                     	;# 
   470  038C                     	;# 
   471  038D                     	;# 
   472  038E                     	;# 
   473  0391                     	;# 
   474  0392                     	;# 
   475  0393                     	;# 
   476  0394                     	;# 
   477  0395                     	;# 
   478  0396                     	;# 
   479  0397                     	;# 
   480  0398                     	;# 
   481  0399                     	;# 
   482  0415                     	;# 
   483  0416                     	;# 
   484  0417                     	;# 
   485  041C                     	;# 
   486  041D                     	;# 
   487  041E                     	;# 
   488  0511                     	;# 
   489  0515                     	;# 
   490  0617                     	;# 
   491  0618                     	;# 
   492  0619                     	;# 
   493  0619                     	;# 
   494  061A                     	;# 
   495  061B                     	;# 
   496  061C                     	;# 
   497  061C                     	;# 
   498  0691                     	;# 
   499  0692                     	;# 
   500  0693                     	;# 
   501  0694                     	;# 
   502  0695                     	;# 
   503  0696                     	;# 
   504  0697                     	;# 
   505  0698                     	;# 
   506  0699                     	;# 
   507  069A                     	;# 
   508  069B                     	;# 
   509  069C                     	;# 
   510  069D                     	;# 
   511  069E                     	;# 
   512  069F                     	;# 
   513  0E0F                     	;# 
   514  0E10                     	;# 
   515  0E11                     	;# 
   516  0E12                     	;# 
   517  0E13                     	;# 
   518  0E14                     	;# 
   519  0E15                     	;# 
   520  0E17                     	;# 
   521  0E20                     	;# 
   522  0E21                     	;# 
   523  0E22                     	;# 
   524  0E24                     	;# 
   525  0E25                     	;# 
   526  0E28                     	;# 
   527  0E29                     	;# 
   528  0E2A                     	;# 
   529  0E2B                     	;# 
   530  0E90                     	;# 
   531  0E91                     	;# 
   532  0E92                     	;# 
   533  0E94                     	;# 
   534  0E95                     	;# 
   535  0E9C                     	;# 
   536  0E9D                     	;# 
   537  0E9E                     	;# 
   538  0E9F                     	;# 
   539  0EA0                     	;# 
   540  0EA1                     	;# 
   541  0EA2                     	;# 
   542  0EA3                     	;# 
   543  0EA4                     	;# 
   544  0EA5                     	;# 
   545  0EA6                     	;# 
   546  0EA7                     	;# 
   547  0F0F                     	;# 
   548  0F10                     	;# 
   549  0F11                     	;# 
   550  0F12                     	;# 
   551  0F13                     	;# 
   552  0F14                     	;# 
   553  0F15                     	;# 
   554  0F16                     	;# 
   555  0F17                     	;# 
   556  0F18                     	;# 
   557  0F19                     	;# 
   558  0F1A                     	;# 
   559  0F1B                     	;# 
   560  0F1C                     	;# 
   561  0F1D                     	;# 
   562  0F1E                     	;# 
   563  0F1F                     	;# 
   564  0F20                     	;# 
   565  0F21                     	;# 
   566  0F22                     	;# 
   567  0F23                     	;# 
   568  0F24                     	;# 
   569  0F25                     	;# 
   570  0F26                     	;# 
   571  0F27                     	;# 
   572  0F28                     	;# 
   573  0F29                     	;# 
   574  0F2A                     	;# 
   575  0F2B                     	;# 
   576  0F2C                     	;# 
   577  0F2D                     	;# 
   578  0FE4                     	;# 
   579  0FE5                     	;# 
   580  0FE6                     	;# 
   581  0FE7                     	;# 
   582  0FE8                     	;# 
   583  0FE9                     	;# 
   584  0FEA                     	;# 
   585  0FEB                     	;# 
   586  0FED                     	;# 
   587  0FEE                     	;# 
   588  0FEF                     	;# 
   589  0000                     	;# 
   590  0001                     	;# 
   591  0002                     	;# 
   592  0003                     	;# 
   593  0004                     	;# 
   594  0005                     	;# 
   595  0006                     	;# 
   596  0007                     	;# 
   597  0008                     	;# 
   598  0009                     	;# 
   599  000A                     	;# 
   600  000B                     	;# 
   601  000C                     	;# 
   602  000D                     	;# 
   603  000E                     	;# 
   604  0011                     	;# 
   605  0012                     	;# 
   606  0013                     	;# 
   607  0015                     	;# 
   608  0016                     	;# 
   609  0016                     	;# 
   610  0017                     	;# 
   611  0018                     	;# 
   612  0019                     	;# 
   613  001A                     	;# 
   614  001B                     	;# 
   615  001C                     	;# 
   616  008C                     	;# 
   617  008D                     	;# 
   618  008E                     	;# 
   619  0091                     	;# 
   620  0092                     	;# 
   621  0093                     	;# 
   622  0095                     	;# 
   623  0096                     	;# 
   624  0097                     	;# 
   625  0098                     	;# 
   626  0099                     	;# 
   627  009A                     	;# 
   628  009B                     	;# 
   629  009B                     	;# 
   630  009C                     	;# 
   631  009D                     	;# 
   632  009E                     	;# 
   633  009F                     	;# 
   634  010C                     	;# 
   635  010D                     	;# 
   636  010E                     	;# 
   637  0111                     	;# 
   638  0112                     	;# 
   639  0113                     	;# 
   640  0114                     	;# 
   641  0115                     	;# 
   642  0116                     	;# 
   643  0117                     	;# 
   644  0118                     	;# 
   645  0119                     	;# 
   646  011C                     	;# 
   647  018C                     	;# 
   648  018D                     	;# 
   649  018E                     	;# 
   650  0191                     	;# 
   651  0191                     	;# 
   652  0192                     	;# 
   653  0193                     	;# 
   654  0193                     	;# 
   655  0194                     	;# 
   656  0195                     	;# 
   657  0196                     	;# 
   658  0199                     	;# 
   659  0199                     	;# 
   660  0199                     	;# 
   661  019A                     	;# 
   662  019A                     	;# 
   663  019A                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019C                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019D                     	;# 
   674  019D                     	;# 
   675  019E                     	;# 
   676  019E                     	;# 
   677  019E                     	;# 
   678  019F                     	;# 
   679  019F                     	;# 
   680  019F                     	;# 
   681  019F                     	;# 
   682  019F                     	;# 
   683  020C                     	;# 
   684  020D                     	;# 
   685  020E                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0215                     	;# 
   698  0216                     	;# 
   699  0216                     	;# 
   700  0217                     	;# 
   701  0217                     	;# 
   702  028C                     	;# 
   703  028D                     	;# 
   704  028E                     	;# 
   705  0291                     	;# 
   706  0291                     	;# 
   707  0292                     	;# 
   708  0293                     	;# 
   709  0293                     	;# 
   710  0298                     	;# 
   711  0298                     	;# 
   712  0299                     	;# 
   713  029A                     	;# 
   714  029A                     	;# 
   715  029E                     	;# 
   716  030C                     	;# 
   717  030D                     	;# 
   718  030E                     	;# 
   719  038C                     	;# 
   720  038D                     	;# 
   721  038E                     	;# 
   722  0391                     	;# 
   723  0392                     	;# 
   724  0393                     	;# 
   725  0394                     	;# 
   726  0395                     	;# 
   727  0396                     	;# 
   728  0397                     	;# 
   729  0398                     	;# 
   730  0399                     	;# 
   731  0415                     	;# 
   732  0416                     	;# 
   733  0417                     	;# 
   734  041C                     	;# 
   735  041D                     	;# 
   736  041E                     	;# 
   737  0511                     	;# 
   738  0515                     	;# 
   739  0617                     	;# 
   740  0618                     	;# 
   741  0619                     	;# 
   742  0619                     	;# 
   743  061A                     	;# 
   744  061B                     	;# 
   745  061C                     	;# 
   746  061C                     	;# 
   747  0691                     	;# 
   748  0692                     	;# 
   749  0693                     	;# 
   750  0694                     	;# 
   751  0695                     	;# 
   752  0696                     	;# 
   753  0697                     	;# 
   754  0698                     	;# 
   755  0699                     	;# 
   756  069A                     	;# 
   757  069B                     	;# 
   758  069C                     	;# 
   759  069D                     	;# 
   760  069E                     	;# 
   761  069F                     	;# 
   762  0E0F                     	;# 
   763  0E10                     	;# 
   764  0E11                     	;# 
   765  0E12                     	;# 
   766  0E13                     	;# 
   767  0E14                     	;# 
   768  0E15                     	;# 
   769  0E17                     	;# 
   770  0E20                     	;# 
   771  0E21                     	;# 
   772  0E22                     	;# 
   773  0E24                     	;# 
   774  0E25                     	;# 
   775  0E28                     	;# 
   776  0E29                     	;# 
   777  0E2A                     	;# 
   778  0E2B                     	;# 
   779  0E90                     	;# 
   780  0E91                     	;# 
   781  0E92                     	;# 
   782  0E94                     	;# 
   783  0E95                     	;# 
   784  0E9C                     	;# 
   785  0E9D                     	;# 
   786  0E9E                     	;# 
   787  0E9F                     	;# 
   788  0EA0                     	;# 
   789  0EA1                     	;# 
   790  0EA2                     	;# 
   791  0EA3                     	;# 
   792  0EA4                     	;# 
   793  0EA5                     	;# 
   794  0EA6                     	;# 
   795  0EA7                     	;# 
   796  0F0F                     	;# 
   797  0F10                     	;# 
   798  0F11                     	;# 
   799  0F12                     	;# 
   800  0F13                     	;# 
   801  0F14                     	;# 
   802  0F15                     	;# 
   803  0F16                     	;# 
   804  0F17                     	;# 
   805  0F18                     	;# 
   806  0F19                     	;# 
   807  0F1A                     	;# 
   808  0F1B                     	;# 
   809  0F1C                     	;# 
   810  0F1D                     	;# 
   811  0F1E                     	;# 
   812  0F1F                     	;# 
   813  0F20                     	;# 
   814  0F21                     	;# 
   815  0F22                     	;# 
   816  0F23                     	;# 
   817  0F24                     	;# 
   818  0F25                     	;# 
   819  0F26                     	;# 
   820  0F27                     	;# 
   821  0F28                     	;# 
   822  0F29                     	;# 
   823  0F2A                     	;# 
   824  0F2B                     	;# 
   825  0F2C                     	;# 
   826  0F2D                     	;# 
   827  0FE4                     	;# 
   828  0FE5                     	;# 
   829  0FE6                     	;# 
   830  0FE7                     	;# 
   831  0FE8                     	;# 
   832  0FE9                     	;# 
   833  0FEA                     	;# 
   834  0FEB                     	;# 
   835  0FED                     	;# 
   836  0FEE                     	;# 
   837  0FEF                     	;# 
   838  0000                     	;# 
   839  0001                     	;# 
   840  0002                     	;# 
   841  0003                     	;# 
   842  0004                     	;# 
   843  0005                     	;# 
   844  0006                     	;# 
   845  0007                     	;# 
   846  0008                     	;# 
   847  0009                     	;# 
   848  000A                     	;# 
   849  000B                     	;# 
   850  000C                     	;# 
   851  000D                     	;# 
   852  000E                     	;# 
   853  0011                     	;# 
   854  0012                     	;# 
   855  0013                     	;# 
   856  0015                     	;# 
   857  0016                     	;# 
   858  0016                     	;# 
   859  0017                     	;# 
   860  0018                     	;# 
   861  0019                     	;# 
   862  001A                     	;# 
   863  001B                     	;# 
   864  001C                     	;# 
   865  008C                     	;# 
   866  008D                     	;# 
   867  008E                     	;# 
   868  0091                     	;# 
   869  0092                     	;# 
   870  0093                     	;# 
   871  0095                     	;# 
   872  0096                     	;# 
   873  0097                     	;# 
   874  0098                     	;# 
   875  0099                     	;# 
   876  009A                     	;# 
   877  009B                     	;# 
   878  009B                     	;# 
   879  009C                     	;# 
   880  009D                     	;# 
   881  009E                     	;# 
   882  009F                     	;# 
   883  010C                     	;# 
   884  010D                     	;# 
   885  010E                     	;# 
   886  0111                     	;# 
   887  0112                     	;# 
   888  0113                     	;# 
   889  0114                     	;# 
   890  0115                     	;# 
   891  0116                     	;# 
   892  0117                     	;# 
   893  0118                     	;# 
   894  0119                     	;# 
   895  011C                     	;# 
   896  018C                     	;# 
   897  018D                     	;# 
   898  018E                     	;# 
   899  0191                     	;# 
   900  0191                     	;# 
   901  0192                     	;# 
   902  0193                     	;# 
   903  0193                     	;# 
   904  0194                     	;# 
   905  0195                     	;# 
   906  0196                     	;# 
   907  0199                     	;# 
   908  0199                     	;# 
   909  0199                     	;# 
   910  019A                     	;# 
   911  019A                     	;# 
   912  019A                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019B                     	;# 
   918  019C                     	;# 
   919  019C                     	;# 
   920  019C                     	;# 
   921  019D                     	;# 
   922  019D                     	;# 
   923  019D                     	;# 
   924  019E                     	;# 
   925  019E                     	;# 
   926  019E                     	;# 
   927  019F                     	;# 
   928  019F                     	;# 
   929  019F                     	;# 
   930  019F                     	;# 
   931  019F                     	;# 
   932  020C                     	;# 
   933  020D                     	;# 
   934  020E                     	;# 
   935  0211                     	;# 
   936  0211                     	;# 
   937  0212                     	;# 
   938  0212                     	;# 
   939  0213                     	;# 
   940  0213                     	;# 
   941  0214                     	;# 
   942  0214                     	;# 
   943  0215                     	;# 
   944  0215                     	;# 
   945  0215                     	;# 
   946  0215                     	;# 
   947  0216                     	;# 
   948  0216                     	;# 
   949  0217                     	;# 
   950  0217                     	;# 
   951  028C                     	;# 
   952  028D                     	;# 
   953  028E                     	;# 
   954  0291                     	;# 
   955  0291                     	;# 
   956  0292                     	;# 
   957  0293                     	;# 
   958  0293                     	;# 
   959  0298                     	;# 
   960  0298                     	;# 
   961  0299                     	;# 
   962  029A                     	;# 
   963  029A                     	;# 
   964  029E                     	;# 
   965  030C                     	;# 
   966  030D                     	;# 
   967  030E                     	;# 
   968  038C                     	;# 
   969  038D                     	;# 
   970  038E                     	;# 
   971  0391                     	;# 
   972  0392                     	;# 
   973  0393                     	;# 
   974  0394                     	;# 
   975  0395                     	;# 
   976  0396                     	;# 
   977  0397                     	;# 
   978  0398                     	;# 
   979  0399                     	;# 
   980  0415                     	;# 
   981  0416                     	;# 
   982  0417                     	;# 
   983  041C                     	;# 
   984  041D                     	;# 
   985  041E                     	;# 
   986  0511                     	;# 
   987  0515                     	;# 
   988  0617                     	;# 
   989  0618                     	;# 
   990  0619                     	;# 
   991  0619                     	;# 
   992  061A                     	;# 
   993  061B                     	;# 
   994  061C                     	;# 
   995  061C                     	;# 
   996  0691                     	;# 
   997  0692                     	;# 
   998  0693                     	;# 
   999  0694                     	;# 
  1000  0695                     	;# 
  1001  0696                     	;# 
  1002  0697                     	;# 
  1003  0698                     	;# 
  1004  0699                     	;# 
  1005  069A                     	;# 
  1006  069B                     	;# 
  1007  069C                     	;# 
  1008  069D                     	;# 
  1009  069E                     	;# 
  1010  069F                     	;# 
  1011  0E0F                     	;# 
  1012  0E10                     	;# 
  1013  0E11                     	;# 
  1014  0E12                     	;# 
  1015  0E13                     	;# 
  1016  0E14                     	;# 
  1017  0E15                     	;# 
  1018  0E17                     	;# 
  1019  0E20                     	;# 
  1020  0E21                     	;# 
  1021  0E22                     	;# 
  1022  0E24                     	;# 
  1023  0E25                     	;# 
  1024  0E28                     	;# 
  1025  0E29                     	;# 
  1026  0E2A                     	;# 
  1027  0E2B                     	;# 
  1028  0E90                     	;# 
  1029  0E91                     	;# 
  1030  0E92                     	;# 
  1031  0E94                     	;# 
  1032  0E95                     	;# 
  1033  0E9C                     	;# 
  1034  0E9D                     	;# 
  1035  0E9E                     	;# 
  1036  0E9F                     	;# 
  1037  0EA0                     	;# 
  1038  0EA1                     	;# 
  1039  0EA2                     	;# 
  1040  0EA3                     	;# 
  1041  0EA4                     	;# 
  1042  0EA5                     	;# 
  1043  0EA6                     	;# 
  1044  0EA7                     	;# 
  1045  0F0F                     	;# 
  1046  0F10                     	;# 
  1047  0F11                     	;# 
  1048  0F12                     	;# 
  1049  0F13                     	;# 
  1050  0F14                     	;# 
  1051  0F15                     	;# 
  1052  0F16                     	;# 
  1053  0F17                     	;# 
  1054  0F18                     	;# 
  1055  0F19                     	;# 
  1056  0F1A                     	;# 
  1057  0F1B                     	;# 
  1058  0F1C                     	;# 
  1059  0F1D                     	;# 
  1060  0F1E                     	;# 
  1061  0F1F                     	;# 
  1062  0F20                     	;# 
  1063  0F21                     	;# 
  1064  0F22                     	;# 
  1065  0F23                     	;# 
  1066  0F24                     	;# 
  1067  0F25                     	;# 
  1068  0F26                     	;# 
  1069  0F27                     	;# 
  1070  0F28                     	;# 
  1071  0F29                     	;# 
  1072  0F2A                     	;# 
  1073  0F2B                     	;# 
  1074  0F2C                     	;# 
  1075  0F2D                     	;# 
  1076  0FE4                     	;# 
  1077  0FE5                     	;# 
  1078  0FE6                     	;# 
  1079  0FE7                     	;# 
  1080  0FE8                     	;# 
  1081  0FE9                     	;# 
  1082  0FEA                     	;# 
  1083  0FEB                     	;# 
  1084  0FED                     	;# 
  1085  0FEE                     	;# 
  1086  0FEF                     	;# 
  1087  0000                     	;# 
  1088  0001                     	;# 
  1089  0002                     	;# 
  1090  0003                     	;# 
  1091  0004                     	;# 
  1092  0005                     	;# 
  1093  0006                     	;# 
  1094  0007                     	;# 
  1095  0008                     	;# 
  1096  0009                     	;# 
  1097  000A                     	;# 
  1098  000B                     	;# 
  1099  000C                     	;# 
  1100  000D                     	;# 
  1101  000E                     	;# 
  1102  0011                     	;# 
  1103  0012                     	;# 
  1104  0013                     	;# 
  1105  0015                     	;# 
  1106  0016                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  0019                     	;# 
  1111  001A                     	;# 
  1112  001B                     	;# 
  1113  001C                     	;# 
  1114  008C                     	;# 
  1115  008D                     	;# 
  1116  008E                     	;# 
  1117  0091                     	;# 
  1118  0092                     	;# 
  1119  0093                     	;# 
  1120  0095                     	;# 
  1121  0096                     	;# 
  1122  0097                     	;# 
  1123  0098                     	;# 
  1124  0099                     	;# 
  1125  009A                     	;# 
  1126  009B                     	;# 
  1127  009B                     	;# 
  1128  009C                     	;# 
  1129  009D                     	;# 
  1130  009E                     	;# 
  1131  009F                     	;# 
  1132  010C                     	;# 
  1133  010D                     	;# 
  1134  010E                     	;# 
  1135  0111                     	;# 
  1136  0112                     	;# 
  1137  0113                     	;# 
  1138  0114                     	;# 
  1139  0115                     	;# 
  1140  0116                     	;# 
  1141  0117                     	;# 
  1142  0118                     	;# 
  1143  0119                     	;# 
  1144  011C                     	;# 
  1145  018C                     	;# 
  1146  018D                     	;# 
  1147  018E                     	;# 
  1148  0191                     	;# 
  1149  0191                     	;# 
  1150  0192                     	;# 
  1151  0193                     	;# 
  1152  0193                     	;# 
  1153  0194                     	;# 
  1154  0195                     	;# 
  1155  0196                     	;# 
  1156  0199                     	;# 
  1157  0199                     	;# 
  1158  0199                     	;# 
  1159  019A                     	;# 
  1160  019A                     	;# 
  1161  019A                     	;# 
  1162  019B                     	;# 
  1163  019B                     	;# 
  1164  019B                     	;# 
  1165  019B                     	;# 
  1166  019B                     	;# 
  1167  019C                     	;# 
  1168  019C                     	;# 
  1169  019C                     	;# 
  1170  019D                     	;# 
  1171  019D                     	;# 
  1172  019D                     	;# 
  1173  019E                     	;# 
  1174  019E                     	;# 
  1175  019E                     	;# 
  1176  019F                     	;# 
  1177  019F                     	;# 
  1178  019F                     	;# 
  1179  019F                     	;# 
  1180  019F                     	;# 
  1181  020C                     	;# 
  1182  020D                     	;# 
  1183  020E                     	;# 
  1184  0211                     	;# 
  1185  0211                     	;# 
  1186  0212                     	;# 
  1187  0212                     	;# 
  1188  0213                     	;# 
  1189  0213                     	;# 
  1190  0214                     	;# 
  1191  0214                     	;# 
  1192  0215                     	;# 
  1193  0215                     	;# 
  1194  0215                     	;# 
  1195  0215                     	;# 
  1196  0216                     	;# 
  1197  0216                     	;# 
  1198  0217                     	;# 
  1199  0217                     	;# 
  1200  028C                     	;# 
  1201  028D                     	;# 
  1202  028E                     	;# 
  1203  0291                     	;# 
  1204  0291                     	;# 
  1205  0292                     	;# 
  1206  0293                     	;# 
  1207  0293                     	;# 
  1208  0298                     	;# 
  1209  0298                     	;# 
  1210  0299                     	;# 
  1211  029A                     	;# 
  1212  029A                     	;# 
  1213  029E                     	;# 
  1214  030C                     	;# 
  1215  030D                     	;# 
  1216  030E                     	;# 
  1217  038C                     	;# 
  1218  038D                     	;# 
  1219  038E                     	;# 
  1220  0391                     	;# 
  1221  0392                     	;# 
  1222  0393                     	;# 
  1223  0394                     	;# 
  1224  0395                     	;# 
  1225  0396                     	;# 
  1226  0397                     	;# 
  1227  0398                     	;# 
  1228  0399                     	;# 
  1229  0415                     	;# 
  1230  0416                     	;# 
  1231  0417                     	;# 
  1232  041C                     	;# 
  1233  041D                     	;# 
  1234  041E                     	;# 
  1235  0511                     	;# 
  1236  0515                     	;# 
  1237  0617                     	;# 
  1238  0618                     	;# 
  1239  0619                     	;# 
  1240  0619                     	;# 
  1241  061A                     	;# 
  1242  061B                     	;# 
  1243  061C                     	;# 
  1244  061C                     	;# 
  1245  0691                     	;# 
  1246  0692                     	;# 
  1247  0693                     	;# 
  1248  0694                     	;# 
  1249  0695                     	;# 
  1250  0696                     	;# 
  1251  0697                     	;# 
  1252  0698                     	;# 
  1253  0699                     	;# 
  1254  069A                     	;# 
  1255  069B                     	;# 
  1256  069C                     	;# 
  1257  069D                     	;# 
  1258  069E                     	;# 
  1259  069F                     	;# 
  1260  0E0F                     	;# 
  1261  0E10                     	;# 
  1262  0E11                     	;# 
  1263  0E12                     	;# 
  1264  0E13                     	;# 
  1265  0E14                     	;# 
  1266  0E15                     	;# 
  1267  0E17                     	;# 
  1268  0E20                     	;# 
  1269  0E21                     	;# 
  1270  0E22                     	;# 
  1271  0E24                     	;# 
  1272  0E25                     	;# 
  1273  0E28                     	;# 
  1274  0E29                     	;# 
  1275  0E2A                     	;# 
  1276  0E2B                     	;# 
  1277  0E90                     	;# 
  1278  0E91                     	;# 
  1279  0E92                     	;# 
  1280  0E94                     	;# 
  1281  0E95                     	;# 
  1282  0E9C                     	;# 
  1283  0E9D                     	;# 
  1284  0E9E                     	;# 
  1285  0E9F                     	;# 
  1286  0EA0                     	;# 
  1287  0EA1                     	;# 
  1288  0EA2                     	;# 
  1289  0EA3                     	;# 
  1290  0EA4                     	;# 
  1291  0EA5                     	;# 
  1292  0EA6                     	;# 
  1293  0EA7                     	;# 
  1294  0F0F                     	;# 
  1295  0F10                     	;# 
  1296  0F11                     	;# 
  1297  0F12                     	;# 
  1298  0F13                     	;# 
  1299  0F14                     	;# 
  1300  0F15                     	;# 
  1301  0F16                     	;# 
  1302  0F17                     	;# 
  1303  0F18                     	;# 
  1304  0F19                     	;# 
  1305  0F1A                     	;# 
  1306  0F1B                     	;# 
  1307  0F1C                     	;# 
  1308  0F1D                     	;# 
  1309  0F1E                     	;# 
  1310  0F1F                     	;# 
  1311  0F20                     	;# 
  1312  0F21                     	;# 
  1313  0F22                     	;# 
  1314  0F23                     	;# 
  1315  0F24                     	;# 
  1316  0F25                     	;# 
  1317  0F26                     	;# 
  1318  0F27                     	;# 
  1319  0F28                     	;# 
  1320  0F29                     	;# 
  1321  0F2A                     	;# 
  1322  0F2B                     	;# 
  1323  0F2C                     	;# 
  1324  0F2D                     	;# 
  1325  0FE4                     	;# 
  1326  0FE5                     	;# 
  1327  0FE6                     	;# 
  1328  0FE7                     	;# 
  1329  0FE8                     	;# 
  1330  0FE9                     	;# 
  1331  0FEA                     	;# 
  1332  0FEB                     	;# 
  1333  0FED                     	;# 
  1334  0FEE                     	;# 
  1335  0FEF                     	;# 
  1336  0000                     	;# 
  1337  0001                     	;# 
  1338  0002                     	;# 
  1339  0003                     	;# 
  1340  0004                     	;# 
  1341  0005                     	;# 
  1342  0006                     	;# 
  1343  0007                     	;# 
  1344  0008                     	;# 
  1345  0009                     	;# 
  1346  000A                     	;# 
  1347  000B                     	;# 
  1348  000C                     	;# 
  1349  000D                     	;# 
  1350  000E                     	;# 
  1351  0011                     	;# 
  1352  0012                     	;# 
  1353  0013                     	;# 
  1354  0015                     	;# 
  1355  0016                     	;# 
  1356  0016                     	;# 
  1357  0017                     	;# 
  1358  0018                     	;# 
  1359  0019                     	;# 
  1360  001A                     	;# 
  1361  001B                     	;# 
  1362  001C                     	;# 
  1363  008C                     	;# 
  1364  008D                     	;# 
  1365  008E                     	;# 
  1366  0091                     	;# 
  1367  0092                     	;# 
  1368  0093                     	;# 
  1369  0095                     	;# 
  1370  0096                     	;# 
  1371  0097                     	;# 
  1372  0098                     	;# 
  1373  0099                     	;# 
  1374  009A                     	;# 
  1375  009B                     	;# 
  1376  009B                     	;# 
  1377  009C                     	;# 
  1378  009D                     	;# 
  1379  009E                     	;# 
  1380  009F                     	;# 
  1381  010C                     	;# 
  1382  010D                     	;# 
  1383  010E                     	;# 
  1384  0111                     	;# 
  1385  0112                     	;# 
  1386  0113                     	;# 
  1387  0114                     	;# 
  1388  0115                     	;# 
  1389  0116                     	;# 
  1390  0117                     	;# 
  1391  0118                     	;# 
  1392  0119                     	;# 
  1393  011C                     	;# 
  1394  018C                     	;# 
  1395  018D                     	;# 
  1396  018E                     	;# 
  1397  0191                     	;# 
  1398  0191                     	;# 
  1399  0192                     	;# 
  1400  0193                     	;# 
  1401  0193                     	;# 
  1402  0194                     	;# 
  1403  0195                     	;# 
  1404  0196                     	;# 
  1405  0199                     	;# 
  1406  0199                     	;# 
  1407  0199                     	;# 
  1408  019A                     	;# 
  1409  019A                     	;# 
  1410  019A                     	;# 
  1411  019B                     	;# 
  1412  019B                     	;# 
  1413  019B                     	;# 
  1414  019B                     	;# 
  1415  019B                     	;# 
  1416  019C                     	;# 
  1417  019C                     	;# 
  1418  019C                     	;# 
  1419  019D                     	;# 
  1420  019D                     	;# 
  1421  019D                     	;# 
  1422  019E                     	;# 
  1423  019E                     	;# 
  1424  019E                     	;# 
  1425  019F                     	;# 
  1426  019F                     	;# 
  1427  019F                     	;# 
  1428  019F                     	;# 
  1429  019F                     	;# 
  1430  020C                     	;# 
  1431  020D                     	;# 
  1432  020E                     	;# 
  1433  0211                     	;# 
  1434  0211                     	;# 
  1435  0212                     	;# 
  1436  0212                     	;# 
  1437  0213                     	;# 
  1438  0213                     	;# 
  1439  0214                     	;# 
  1440  0214                     	;# 
  1441  0215                     	;# 
  1442  0215                     	;# 
  1443  0215                     	;# 
  1444  0215                     	;# 
  1445  0216                     	;# 
  1446  0216                     	;# 
  1447  0217                     	;# 
  1448  0217                     	;# 
  1449  028C                     	;# 
  1450  028D                     	;# 
  1451  028E                     	;# 
  1452  0291                     	;# 
  1453  0291                     	;# 
  1454  0292                     	;# 
  1455  0293                     	;# 
  1456  0293                     	;# 
  1457  0298                     	;# 
  1458  0298                     	;# 
  1459  0299                     	;# 
  1460  029A                     	;# 
  1461  029A                     	;# 
  1462  029E                     	;# 
  1463  030C                     	;# 
  1464  030D                     	;# 
  1465  030E                     	;# 
  1466  038C                     	;# 
  1467  038D                     	;# 
  1468  038E                     	;# 
  1469  0391                     	;# 
  1470  0392                     	;# 
  1471  0393                     	;# 
  1472  0394                     	;# 
  1473  0395                     	;# 
  1474  0396                     	;# 
  1475  0397                     	;# 
  1476  0398                     	;# 
  1477  0399                     	;# 
  1478  0415                     	;# 
  1479  0416                     	;# 
  1480  0417                     	;# 
  1481  041C                     	;# 
  1482  041D                     	;# 
  1483  041E                     	;# 
  1484  0511                     	;# 
  1485  0515                     	;# 
  1486  0617                     	;# 
  1487  0618                     	;# 
  1488  0619                     	;# 
  1489  0619                     	;# 
  1490  061A                     	;# 
  1491  061B                     	;# 
  1492  061C                     	;# 
  1493  061C                     	;# 
  1494  0691                     	;# 
  1495  0692                     	;# 
  1496  0693                     	;# 
  1497  0694                     	;# 
  1498  0695                     	;# 
  1499  0696                     	;# 
  1500  0697                     	;# 
  1501  0698                     	;# 
  1502  0699                     	;# 
  1503  069A                     	;# 
  1504  069B                     	;# 
  1505  069C                     	;# 
  1506  069D                     	;# 
  1507  069E                     	;# 
  1508  069F                     	;# 
  1509  0E0F                     	;# 
  1510  0E10                     	;# 
  1511  0E11                     	;# 
  1512  0E12                     	;# 
  1513  0E13                     	;# 
  1514  0E14                     	;# 
  1515  0E15                     	;# 
  1516  0E17                     	;# 
  1517  0E20                     	;# 
  1518  0E21                     	;# 
  1519  0E22                     	;# 
  1520  0E24                     	;# 
  1521  0E25                     	;# 
  1522  0E28                     	;# 
  1523  0E29                     	;# 
  1524  0E2A                     	;# 
  1525  0E2B                     	;# 
  1526  0E90                     	;# 
  1527  0E91                     	;# 
  1528  0E92                     	;# 
  1529  0E94                     	;# 
  1530  0E95                     	;# 
  1531  0E9C                     	;# 
  1532  0E9D                     	;# 
  1533  0E9E                     	;# 
  1534  0E9F                     	;# 
  1535  0EA0                     	;# 
  1536  0EA1                     	;# 
  1537  0EA2                     	;# 
  1538  0EA3                     	;# 
  1539  0EA4                     	;# 
  1540  0EA5                     	;# 
  1541  0EA6                     	;# 
  1542  0EA7                     	;# 
  1543  0F0F                     	;# 
  1544  0F10                     	;# 
  1545  0F11                     	;# 
  1546  0F12                     	;# 
  1547  0F13                     	;# 
  1548  0F14                     	;# 
  1549  0F15                     	;# 
  1550  0F16                     	;# 
  1551  0F17                     	;# 
  1552  0F18                     	;# 
  1553  0F19                     	;# 
  1554  0F1A                     	;# 
  1555  0F1B                     	;# 
  1556  0F1C                     	;# 
  1557  0F1D                     	;# 
  1558  0F1E                     	;# 
  1559  0F1F                     	;# 
  1560  0F20                     	;# 
  1561  0F21                     	;# 
  1562  0F22                     	;# 
  1563  0F23                     	;# 
  1564  0F24                     	;# 
  1565  0F25                     	;# 
  1566  0F26                     	;# 
  1567  0F27                     	;# 
  1568  0F28                     	;# 
  1569  0F29                     	;# 
  1570  0F2A                     	;# 
  1571  0F2B                     	;# 
  1572  0F2C                     	;# 
  1573  0F2D                     	;# 
  1574  0FE4                     	;# 
  1575  0FE5                     	;# 
  1576  0FE6                     	;# 
  1577  0FE7                     	;# 
  1578  0FE8                     	;# 
  1579  0FE9                     	;# 
  1580  0FEA                     	;# 
  1581  0FEB                     	;# 
  1582  0FED                     	;# 
  1583  0FEE                     	;# 
  1584  0FEF                     	;# 
  1585  0000                     	;# 
  1586  0001                     	;# 
  1587  0002                     	;# 
  1588  0003                     	;# 
  1589  0004                     	;# 
  1590  0005                     	;# 
  1591  0006                     	;# 
  1592  0007                     	;# 
  1593  0008                     	;# 
  1594  0009                     	;# 
  1595  000A                     	;# 
  1596  000B                     	;# 
  1597  000C                     	;# 
  1598  000D                     	;# 
  1599  000E                     	;# 
  1600  0011                     	;# 
  1601  0012                     	;# 
  1602  0013                     	;# 
  1603  0015                     	;# 
  1604  0016                     	;# 
  1605  0016                     	;# 
  1606  0017                     	;# 
  1607  0018                     	;# 
  1608  0019                     	;# 
  1609  001A                     	;# 
  1610  001B                     	;# 
  1611  001C                     	;# 
  1612  008C                     	;# 
  1613  008D                     	;# 
  1614  008E                     	;# 
  1615  0091                     	;# 
  1616  0092                     	;# 
  1617  0093                     	;# 
  1618  0095                     	;# 
  1619  0096                     	;# 
  1620  0097                     	;# 
  1621  0098                     	;# 
  1622  0099                     	;# 
  1623  009A                     	;# 
  1624  009B                     	;# 
  1625  009B                     	;# 
  1626  009C                     	;# 
  1627  009D                     	;# 
  1628  009E                     	;# 
  1629  009F                     	;# 
  1630  010C                     	;# 
  1631  010D                     	;# 
  1632  010E                     	;# 
  1633  0111                     	;# 
  1634  0112                     	;# 
  1635  0113                     	;# 
  1636  0114                     	;# 
  1637  0115                     	;# 
  1638  0116                     	;# 
  1639  0117                     	;# 
  1640  0118                     	;# 
  1641  0119                     	;# 
  1642  011C                     	;# 
  1643  018C                     	;# 
  1644  018D                     	;# 
  1645  018E                     	;# 
  1646  0191                     	;# 
  1647  0191                     	;# 
  1648  0192                     	;# 
  1649  0193                     	;# 
  1650  0193                     	;# 
  1651  0194                     	;# 
  1652  0195                     	;# 
  1653  0196                     	;# 
  1654  0199                     	;# 
  1655  0199                     	;# 
  1656  0199                     	;# 
  1657  019A                     	;# 
  1658  019A                     	;# 
  1659  019A                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019C                     	;# 
  1666  019C                     	;# 
  1667  019C                     	;# 
  1668  019D                     	;# 
  1669  019D                     	;# 
  1670  019D                     	;# 
  1671  019E                     	;# 
  1672  019E                     	;# 
  1673  019E                     	;# 
  1674  019F                     	;# 
  1675  019F                     	;# 
  1676  019F                     	;# 
  1677  019F                     	;# 
  1678  019F                     	;# 
  1679  020C                     	;# 
  1680  020D                     	;# 
  1681  020E                     	;# 
  1682  0211                     	;# 
  1683  0211                     	;# 
  1684  0212                     	;# 
  1685  0212                     	;# 
  1686  0213                     	;# 
  1687  0213                     	;# 
  1688  0214                     	;# 
  1689  0214                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  028C                     	;# 
  1699  028D                     	;# 
  1700  028E                     	;# 
  1701  0291                     	;# 
  1702  0291                     	;# 
  1703  0292                     	;# 
  1704  0293                     	;# 
  1705  0293                     	;# 
  1706  0298                     	;# 
  1707  0298                     	;# 
  1708  0299                     	;# 
  1709  029A                     	;# 
  1710  029A                     	;# 
  1711  029E                     	;# 
  1712  030C                     	;# 
  1713  030D                     	;# 
  1714  030E                     	;# 
  1715  038C                     	;# 
  1716  038D                     	;# 
  1717  038E                     	;# 
  1718  0391                     	;# 
  1719  0392                     	;# 
  1720  0393                     	;# 
  1721  0394                     	;# 
  1722  0395                     	;# 
  1723  0396                     	;# 
  1724  0397                     	;# 
  1725  0398                     	;# 
  1726  0399                     	;# 
  1727  0415                     	;# 
  1728  0416                     	;# 
  1729  0417                     	;# 
  1730  041C                     	;# 
  1731  041D                     	;# 
  1732  041E                     	;# 
  1733  0511                     	;# 
  1734  0515                     	;# 
  1735  0617                     	;# 
  1736  0618                     	;# 
  1737  0619                     	;# 
  1738  0619                     	;# 
  1739  061A                     	;# 
  1740  061B                     	;# 
  1741  061C                     	;# 
  1742  061C                     	;# 
  1743  0691                     	;# 
  1744  0692                     	;# 
  1745  0693                     	;# 
  1746  0694                     	;# 
  1747  0695                     	;# 
  1748  0696                     	;# 
  1749  0697                     	;# 
  1750  0698                     	;# 
  1751  0699                     	;# 
  1752  069A                     	;# 
  1753  069B                     	;# 
  1754  069C                     	;# 
  1755  069D                     	;# 
  1756  069E                     	;# 
  1757  069F                     	;# 
  1758  0E0F                     	;# 
  1759  0E10                     	;# 
  1760  0E11                     	;# 
  1761  0E12                     	;# 
  1762  0E13                     	;# 
  1763  0E14                     	;# 
  1764  0E15                     	;# 
  1765  0E17                     	;# 
  1766  0E20                     	;# 
  1767  0E21                     	;# 
  1768  0E22                     	;# 
  1769  0E24                     	;# 
  1770  0E25                     	;# 
  1771  0E28                     	;# 
  1772  0E29                     	;# 
  1773  0E2A                     	;# 
  1774  0E2B                     	;# 
  1775  0E90                     	;# 
  1776  0E91                     	;# 
  1777  0E92                     	;# 
  1778  0E94                     	;# 
  1779  0E95                     	;# 
  1780  0E9C                     	;# 
  1781  0E9D                     	;# 
  1782  0E9E                     	;# 
  1783  0E9F                     	;# 
  1784  0EA0                     	;# 
  1785  0EA1                     	;# 
  1786  0EA2                     	;# 
  1787  0EA3                     	;# 
  1788  0EA4                     	;# 
  1789  0EA5                     	;# 
  1790  0EA6                     	;# 
  1791  0EA7                     	;# 
  1792  0F0F                     	;# 
  1793  0F10                     	;# 
  1794  0F11                     	;# 
  1795  0F12                     	;# 
  1796  0F13                     	;# 
  1797  0F14                     	;# 
  1798  0F15                     	;# 
  1799  0F16                     	;# 
  1800  0F17                     	;# 
  1801  0F18                     	;# 
  1802  0F19                     	;# 
  1803  0F1A                     	;# 
  1804  0F1B                     	;# 
  1805  0F1C                     	;# 
  1806  0F1D                     	;# 
  1807  0F1E                     	;# 
  1808  0F1F                     	;# 
  1809  0F20                     	;# 
  1810  0F21                     	;# 
  1811  0F22                     	;# 
  1812  0F23                     	;# 
  1813  0F24                     	;# 
  1814  0F25                     	;# 
  1815  0F26                     	;# 
  1816  0F27                     	;# 
  1817  0F28                     	;# 
  1818  0F29                     	;# 
  1819  0F2A                     	;# 
  1820  0F2B                     	;# 
  1821  0F2C                     	;# 
  1822  0F2D                     	;# 
  1823  0FE4                     	;# 
  1824  0FE5                     	;# 
  1825  0FE6                     	;# 
  1826  0FE7                     	;# 
  1827  0FE8                     	;# 
  1828  0FE9                     	;# 
  1829  0FEA                     	;# 
  1830  0FEB                     	;# 
  1831  0FED                     	;# 
  1832  0FEE                     	;# 
  1833  0FEF                     	;# 
  1834  0000                     	;# 
  1835  0001                     	;# 
  1836  0002                     	;# 
  1837  0003                     	;# 
  1838  0004                     	;# 
  1839  0005                     	;# 
  1840  0006                     	;# 
  1841  0007                     	;# 
  1842  0008                     	;# 
  1843  0009                     	;# 
  1844  000A                     	;# 
  1845  000B                     	;# 
  1846  000C                     	;# 
  1847  000D                     	;# 
  1848  000E                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0013                     	;# 
  1852  0015                     	;# 
  1853  0016                     	;# 
  1854  0016                     	;# 
  1855  0017                     	;# 
  1856  0018                     	;# 
  1857  0019                     	;# 
  1858  001A                     	;# 
  1859  001B                     	;# 
  1860  001C                     	;# 
  1861  008C                     	;# 
  1862  008D                     	;# 
  1863  008E                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0093                     	;# 
  1867  0095                     	;# 
  1868  0096                     	;# 
  1869  0097                     	;# 
  1870  0098                     	;# 
  1871  0099                     	;# 
  1872  009A                     	;# 
  1873  009B                     	;# 
  1874  009B                     	;# 
  1875  009C                     	;# 
  1876  009D                     	;# 
  1877  009E                     	;# 
  1878  009F                     	;# 
  1879  010C                     	;# 
  1880  010D                     	;# 
  1881  010E                     	;# 
  1882  0111                     	;# 
  1883  0112                     	;# 
  1884  0113                     	;# 
  1885  0114                     	;# 
  1886  0115                     	;# 
  1887  0116                     	;# 
  1888  0117                     	;# 
  1889  0118                     	;# 
  1890  0119                     	;# 
  1891  011C                     	;# 
  1892  018C                     	;# 
  1893  018D                     	;# 
  1894  018E                     	;# 
  1895  0191                     	;# 
  1896  0191                     	;# 
  1897  0192                     	;# 
  1898  0193                     	;# 
  1899  0193                     	;# 
  1900  0194                     	;# 
  1901  0195                     	;# 
  1902  0196                     	;# 
  1903  0199                     	;# 
  1904  0199                     	;# 
  1905  0199                     	;# 
  1906  019A                     	;# 
  1907  019A                     	;# 
  1908  019A                     	;# 
  1909  019B                     	;# 
  1910  019B                     	;# 
  1911  019B                     	;# 
  1912  019B                     	;# 
  1913  019B                     	;# 
  1914  019C                     	;# 
  1915  019C                     	;# 
  1916  019C                     	;# 
  1917  019D                     	;# 
  1918  019D                     	;# 
  1919  019D                     	;# 
  1920  019E                     	;# 
  1921  019E                     	;# 
  1922  019E                     	;# 
  1923  019F                     	;# 
  1924  019F                     	;# 
  1925  019F                     	;# 
  1926  019F                     	;# 
  1927  019F                     	;# 
  1928  020C                     	;# 
  1929  020D                     	;# 
  1930  020E                     	;# 
  1931  0211                     	;# 
  1932  0211                     	;# 
  1933  0212                     	;# 
  1934  0212                     	;# 
  1935  0213                     	;# 
  1936  0213                     	;# 
  1937  0214                     	;# 
  1938  0214                     	;# 
  1939  0215                     	;# 
  1940  0215                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0216                     	;# 
  1944  0216                     	;# 
  1945  0217                     	;# 
  1946  0217                     	;# 
  1947  028C                     	;# 
  1948  028D                     	;# 
  1949  028E                     	;# 
  1950  0291                     	;# 
  1951  0291                     	;# 
  1952  0292                     	;# 
  1953  0293                     	;# 
  1954  0293                     	;# 
  1955  0298                     	;# 
  1956  0298                     	;# 
  1957  0299                     	;# 
  1958  029A                     	;# 
  1959  029A                     	;# 
  1960  029E                     	;# 
  1961  030C                     	;# 
  1962  030D                     	;# 
  1963  030E                     	;# 
  1964  038C                     	;# 
  1965  038D                     	;# 
  1966  038E                     	;# 
  1967  0391                     	;# 
  1968  0392                     	;# 
  1969  0393                     	;# 
  1970  0394                     	;# 
  1971  0395                     	;# 
  1972  0396                     	;# 
  1973  0397                     	;# 
  1974  0398                     	;# 
  1975  0399                     	;# 
  1976  0415                     	;# 
  1977  0416                     	;# 
  1978  0417                     	;# 
  1979  041C                     	;# 
  1980  041D                     	;# 
  1981  041E                     	;# 
  1982  0511                     	;# 
  1983  0515                     	;# 
  1984  0617                     	;# 
  1985  0618                     	;# 
  1986  0619                     	;# 
  1987  0619                     	;# 
  1988  061A                     	;# 
  1989  061B                     	;# 
  1990  061C                     	;# 
  1991  061C                     	;# 
  1992  0691                     	;# 
  1993  0692                     	;# 
  1994  0693                     	;# 
  1995  0694                     	;# 
  1996  0695                     	;# 
  1997  0696                     	;# 
  1998  0697                     	;# 
  1999  0698                     	;# 
  2000  0699                     	;# 
  2001  069A                     	;# 
  2002  069B                     	;# 
  2003  069C                     	;# 
  2004  069D                     	;# 
  2005  069E                     	;# 
  2006  069F                     	;# 
  2007  0E0F                     	;# 
  2008  0E10                     	;# 
  2009  0E11                     	;# 
  2010  0E12                     	;# 
  2011  0E13                     	;# 
  2012  0E14                     	;# 
  2013  0E15                     	;# 
  2014  0E17                     	;# 
  2015  0E20                     	;# 
  2016  0E21                     	;# 
  2017  0E22                     	;# 
  2018  0E24                     	;# 
  2019  0E25                     	;# 
  2020  0E28                     	;# 
  2021  0E29                     	;# 
  2022  0E2A                     	;# 
  2023  0E2B                     	;# 
  2024  0E90                     	;# 
  2025  0E91                     	;# 
  2026  0E92                     	;# 
  2027  0E94                     	;# 
  2028  0E95                     	;# 
  2029  0E9C                     	;# 
  2030  0E9D                     	;# 
  2031  0E9E                     	;# 
  2032  0E9F                     	;# 
  2033  0EA0                     	;# 
  2034  0EA1                     	;# 
  2035  0EA2                     	;# 
  2036  0EA3                     	;# 
  2037  0EA4                     	;# 
  2038  0EA5                     	;# 
  2039  0EA6                     	;# 
  2040  0EA7                     	;# 
  2041  0F0F                     	;# 
  2042  0F10                     	;# 
  2043  0F11                     	;# 
  2044  0F12                     	;# 
  2045  0F13                     	;# 
  2046  0F14                     	;# 
  2047  0F15                     	;# 
  2048  0F16                     	;# 
  2049  0F17                     	;# 
  2050  0F18                     	;# 
  2051  0F19                     	;# 
  2052  0F1A                     	;# 
  2053  0F1B                     	;# 
  2054  0F1C                     	;# 
  2055  0F1D                     	;# 
  2056  0F1E                     	;# 
  2057  0F1F                     	;# 
  2058  0F20                     	;# 
  2059  0F21                     	;# 
  2060  0F22                     	;# 
  2061  0F23                     	;# 
  2062  0F24                     	;# 
  2063  0F25                     	;# 
  2064  0F26                     	;# 
  2065  0F27                     	;# 
  2066  0F28                     	;# 
  2067  0F29                     	;# 
  2068  0F2A                     	;# 
  2069  0F2B                     	;# 
  2070  0F2C                     	;# 
  2071  0F2D                     	;# 
  2072  0FE4                     	;# 
  2073  0FE5                     	;# 
  2074  0FE6                     	;# 
  2075  0FE7                     	;# 
  2076  0FE8                     	;# 
  2077  0FE9                     	;# 
  2078  0FEA                     	;# 
  2079  0FEB                     	;# 
  2080  0FED                     	;# 
  2081  0FEE                     	;# 
  2082  0FEF                     	;# 
  2083  0000                     	;# 
  2084  0001                     	;# 
  2085  0002                     	;# 
  2086  0003                     	;# 
  2087  0004                     	;# 
  2088  0005                     	;# 
  2089  0006                     	;# 
  2090  0007                     	;# 
  2091  0008                     	;# 
  2092  0009                     	;# 
  2093  000A                     	;# 
  2094  000B                     	;# 
  2095  000C                     	;# 
  2096  000D                     	;# 
  2097  000E                     	;# 
  2098  0011                     	;# 
  2099  0012                     	;# 
  2100  0013                     	;# 
  2101  0015                     	;# 
  2102  0016                     	;# 
  2103  0016                     	;# 
  2104  0017                     	;# 
  2105  0018                     	;# 
  2106  0019                     	;# 
  2107  001A                     	;# 
  2108  001B                     	;# 
  2109  001C                     	;# 
  2110  008C                     	;# 
  2111  008D                     	;# 
  2112  008E                     	;# 
  2113  0091                     	;# 
  2114  0092                     	;# 
  2115  0093                     	;# 
  2116  0095                     	;# 
  2117  0096                     	;# 
  2118  0097                     	;# 
  2119  0098                     	;# 
  2120  0099                     	;# 
  2121  009A                     	;# 
  2122  009B                     	;# 
  2123  009B                     	;# 
  2124  009C                     	;# 
  2125  009D                     	;# 
  2126  009E                     	;# 
  2127  009F                     	;# 
  2128  010C                     	;# 
  2129  010D                     	;# 
  2130  010E                     	;# 
  2131  0111                     	;# 
  2132  0112                     	;# 
  2133  0113                     	;# 
  2134  0114                     	;# 
  2135  0115                     	;# 
  2136  0116                     	;# 
  2137  0117                     	;# 
  2138  0118                     	;# 
  2139  0119                     	;# 
  2140  011C                     	;# 
  2141  018C                     	;# 
  2142  018D                     	;# 
  2143  018E                     	;# 
  2144  0191                     	;# 
  2145  0191                     	;# 
  2146  0192                     	;# 
  2147  0193                     	;# 
  2148  0193                     	;# 
  2149  0194                     	;# 
  2150  0195                     	;# 
  2151  0196                     	;# 
  2152  0199                     	;# 
  2153  0199                     	;# 
  2154  0199                     	;# 
  2155  019A                     	;# 
  2156  019A                     	;# 
  2157  019A                     	;# 
  2158  019B                     	;# 
  2159  019B                     	;# 
  2160  019B                     	;# 
  2161  019B                     	;# 
  2162  019B                     	;# 
  2163  019C                     	;# 
  2164  019C                     	;# 
  2165  019C                     	;# 
  2166  019D                     	;# 
  2167  019D                     	;# 
  2168  019D                     	;# 
  2169  019E                     	;# 
  2170  019E                     	;# 
  2171  019E                     	;# 
  2172  019F                     	;# 
  2173  019F                     	;# 
  2174  019F                     	;# 
  2175  019F                     	;# 
  2176  019F                     	;# 
  2177  020C                     	;# 
  2178  020D                     	;# 
  2179  020E                     	;# 
  2180  0211                     	;# 
  2181  0211                     	;# 
  2182  0212                     	;# 
  2183  0212                     	;# 
  2184  0213                     	;# 
  2185  0213                     	;# 
  2186  0214                     	;# 
  2187  0214                     	;# 
  2188  0215                     	;# 
  2189  0215                     	;# 
  2190  0215                     	;# 
  2191  0215                     	;# 
  2192  0216                     	;# 
  2193  0216                     	;# 
  2194  0217                     	;# 
  2195  0217                     	;# 
  2196  028C                     	;# 
  2197  028D                     	;# 
  2198  028E                     	;# 
  2199  0291                     	;# 
  2200  0291                     	;# 
  2201  0292                     	;# 
  2202  0293                     	;# 
  2203  0293                     	;# 
  2204  0298                     	;# 
  2205  0298                     	;# 
  2206  0299                     	;# 
  2207  029A                     	;# 
  2208  029A                     	;# 
  2209  029E                     	;# 
  2210  030C                     	;# 
  2211  030D                     	;# 
  2212  030E                     	;# 
  2213  038C                     	;# 
  2214  038D                     	;# 
  2215  038E                     	;# 
  2216  0391                     	;# 
  2217  0392                     	;# 
  2218  0393                     	;# 
  2219  0394                     	;# 
  2220  0395                     	;# 
  2221  0396                     	;# 
  2222  0397                     	;# 
  2223  0398                     	;# 
  2224  0399                     	;# 
  2225  0415                     	;# 
  2226  0416                     	;# 
  2227  0417                     	;# 
  2228  041C                     	;# 
  2229  041D                     	;# 
  2230  041E                     	;# 
  2231  0511                     	;# 
  2232  0515                     	;# 
  2233  0617                     	;# 
  2234  0618                     	;# 
  2235  0619                     	;# 
  2236  0619                     	;# 
  2237  061A                     	;# 
  2238  061B                     	;# 
  2239  061C                     	;# 
  2240  061C                     	;# 
  2241  0691                     	;# 
  2242  0692                     	;# 
  2243  0693                     	;# 
  2244  0694                     	;# 
  2245  0695                     	;# 
  2246  0696                     	;# 
  2247  0697                     	;# 
  2248  0698                     	;# 
  2249  0699                     	;# 
  2250  069A                     	;# 
  2251  069B                     	;# 
  2252  069C                     	;# 
  2253  069D                     	;# 
  2254  069E                     	;# 
  2255  069F                     	;# 
  2256  0E0F                     	;# 
  2257  0E10                     	;# 
  2258  0E11                     	;# 
  2259  0E12                     	;# 
  2260  0E13                     	;# 
  2261  0E14                     	;# 
  2262  0E15                     	;# 
  2263  0E17                     	;# 
  2264  0E20                     	;# 
  2265  0E21                     	;# 
  2266  0E22                     	;# 
  2267  0E24                     	;# 
  2268  0E25                     	;# 
  2269  0E28                     	;# 
  2270  0E29                     	;# 
  2271  0E2A                     	;# 
  2272  0E2B                     	;# 
  2273  0E90                     	;# 
  2274  0E91                     	;# 
  2275  0E92                     	;# 
  2276  0E94                     	;# 
  2277  0E95                     	;# 
  2278  0E9C                     	;# 
  2279  0E9D                     	;# 
  2280  0E9E                     	;# 
  2281  0E9F                     	;# 
  2282  0EA0                     	;# 
  2283  0EA1                     	;# 
  2284  0EA2                     	;# 
  2285  0EA3                     	;# 
  2286  0EA4                     	;# 
  2287  0EA5                     	;# 
  2288  0EA6                     	;# 
  2289  0EA7                     	;# 
  2290  0F0F                     	;# 
  2291  0F10                     	;# 
  2292  0F11                     	;# 
  2293  0F12                     	;# 
  2294  0F13                     	;# 
  2295  0F14                     	;# 
  2296  0F15                     	;# 
  2297  0F16                     	;# 
  2298  0F17                     	;# 
  2299  0F18                     	;# 
  2300  0F19                     	;# 
  2301  0F1A                     	;# 
  2302  0F1B                     	;# 
  2303  0F1C                     	;# 
  2304  0F1D                     	;# 
  2305  0F1E                     	;# 
  2306  0F1F                     	;# 
  2307  0F20                     	;# 
  2308  0F21                     	;# 
  2309  0F22                     	;# 
  2310  0F23                     	;# 
  2311  0F24                     	;# 
  2312  0F25                     	;# 
  2313  0F26                     	;# 
  2314  0F27                     	;# 
  2315  0F28                     	;# 
  2316  0F29                     	;# 
  2317  0F2A                     	;# 
  2318  0F2B                     	;# 
  2319  0F2C                     	;# 
  2320  0F2D                     	;# 
  2321  0FE4                     	;# 
  2322  0FE5                     	;# 
  2323  0FE6                     	;# 
  2324  0FE7                     	;# 
  2325  0FE8                     	;# 
  2326  0FE9                     	;# 
  2327  0FEA                     	;# 
  2328  0FEB                     	;# 
  2329  0FED                     	;# 
  2330  0FEE                     	;# 
  2331  0FEF                     	;# 
  2332  0000                     	;# 
  2333  0001                     	;# 
  2334  0002                     	;# 
  2335  0003                     	;# 
  2336  0004                     	;# 
  2337  0005                     	;# 
  2338  0006                     	;# 
  2339  0007                     	;# 
  2340  0008                     	;# 
  2341  0009                     	;# 
  2342  000A                     	;# 
  2343  000B                     	;# 
  2344  000C                     	;# 
  2345  000D                     	;# 
  2346  000E                     	;# 
  2347  0011                     	;# 
  2348  0012                     	;# 
  2349  0013                     	;# 
  2350  0015                     	;# 
  2351  0016                     	;# 
  2352  0016                     	;# 
  2353  0017                     	;# 
  2354  0018                     	;# 
  2355  0019                     	;# 
  2356  001A                     	;# 
  2357  001B                     	;# 
  2358  001C                     	;# 
  2359  008C                     	;# 
  2360  008D                     	;# 
  2361  008E                     	;# 
  2362  0091                     	;# 
  2363  0092                     	;# 
  2364  0093                     	;# 
  2365  0095                     	;# 
  2366  0096                     	;# 
  2367  0097                     	;# 
  2368  0098                     	;# 
  2369  0099                     	;# 
  2370  009A                     	;# 
  2371  009B                     	;# 
  2372  009B                     	;# 
  2373  009C                     	;# 
  2374  009D                     	;# 
  2375  009E                     	;# 
  2376  009F                     	;# 
  2377  010C                     	;# 
  2378  010D                     	;# 
  2379  010E                     	;# 
  2380  0111                     	;# 
  2381  0112                     	;# 
  2382  0113                     	;# 
  2383  0114                     	;# 
  2384  0115                     	;# 
  2385  0116                     	;# 
  2386  0117                     	;# 
  2387  0118                     	;# 
  2388  0119                     	;# 
  2389  011C                     	;# 
  2390  018C                     	;# 
  2391  018D                     	;# 
  2392  018E                     	;# 
  2393  0191                     	;# 
  2394  0191                     	;# 
  2395  0192                     	;# 
  2396  0193                     	;# 
  2397  0193                     	;# 
  2398  0194                     	;# 
  2399  0195                     	;# 
  2400  0196                     	;# 
  2401  0199                     	;# 
  2402  0199                     	;# 
  2403  0199                     	;# 
  2404  019A                     	;# 
  2405  019A                     	;# 
  2406  019A                     	;# 
  2407  019B                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019C                     	;# 
  2413  019C                     	;# 
  2414  019C                     	;# 
  2415  019D                     	;# 
  2416  019D                     	;# 
  2417  019D                     	;# 
  2418  019E                     	;# 
  2419  019E                     	;# 
  2420  019E                     	;# 
  2421  019F                     	;# 
  2422  019F                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  019F                     	;# 
  2426  020C                     	;# 
  2427  020D                     	;# 
  2428  020E                     	;# 
  2429  0211                     	;# 
  2430  0211                     	;# 
  2431  0212                     	;# 
  2432  0212                     	;# 
  2433  0213                     	;# 
  2434  0213                     	;# 
  2435  0214                     	;# 
  2436  0214                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0215                     	;# 
  2440  0215                     	;# 
  2441  0216                     	;# 
  2442  0216                     	;# 
  2443  0217                     	;# 
  2444  0217                     	;# 
  2445  028C                     	;# 
  2446  028D                     	;# 
  2447  028E                     	;# 
  2448  0291                     	;# 
  2449  0291                     	;# 
  2450  0292                     	;# 
  2451  0293                     	;# 
  2452  0293                     	;# 
  2453  0298                     	;# 
  2454  0298                     	;# 
  2455  0299                     	;# 
  2456  029A                     	;# 
  2457  029A                     	;# 
  2458  029E                     	;# 
  2459  030C                     	;# 
  2460  030D                     	;# 
  2461  030E                     	;# 
  2462  038C                     	;# 
  2463  038D                     	;# 
  2464  038E                     	;# 
  2465  0391                     	;# 
  2466  0392                     	;# 
  2467  0393                     	;# 
  2468  0394                     	;# 
  2469  0395                     	;# 
  2470  0396                     	;# 
  2471  0397                     	;# 
  2472  0398                     	;# 
  2473  0399                     	;# 
  2474  0415                     	;# 
  2475  0416                     	;# 
  2476  0417                     	;# 
  2477  041C                     	;# 
  2478  041D                     	;# 
  2479  041E                     	;# 
  2480  0511                     	;# 
  2481  0515                     	;# 
  2482  0617                     	;# 
  2483  0618                     	;# 
  2484  0619                     	;# 
  2485  0619                     	;# 
  2486  061A                     	;# 
  2487  061B                     	;# 
  2488  061C                     	;# 
  2489  061C                     	;# 
  2490  0691                     	;# 
  2491  0692                     	;# 
  2492  0693                     	;# 
  2493  0694                     	;# 
  2494  0695                     	;# 
  2495  0696                     	;# 
  2496  0697                     	;# 
  2497  0698                     	;# 
  2498  0699                     	;# 
  2499  069A                     	;# 
  2500  069B                     	;# 
  2501  069C                     	;# 
  2502  069D                     	;# 
  2503  069E                     	;# 
  2504  069F                     	;# 
  2505  0E0F                     	;# 
  2506  0E10                     	;# 
  2507  0E11                     	;# 
  2508  0E12                     	;# 
  2509  0E13                     	;# 
  2510  0E14                     	;# 
  2511  0E15                     	;# 
  2512  0E17                     	;# 
  2513  0E20                     	;# 
  2514  0E21                     	;# 
  2515  0E22                     	;# 
  2516  0E24                     	;# 
  2517  0E25                     	;# 
  2518  0E28                     	;# 
  2519  0E29                     	;# 
  2520  0E2A                     	;# 
  2521  0E2B                     	;# 
  2522  0E90                     	;# 
  2523  0E91                     	;# 
  2524  0E92                     	;# 
  2525  0E94                     	;# 
  2526  0E95                     	;# 
  2527  0E9C                     	;# 
  2528  0E9D                     	;# 
  2529  0E9E                     	;# 
  2530  0E9F                     	;# 
  2531  0EA0                     	;# 
  2532  0EA1                     	;# 
  2533  0EA2                     	;# 
  2534  0EA3                     	;# 
  2535  0EA4                     	;# 
  2536  0EA5                     	;# 
  2537  0EA6                     	;# 
  2538  0EA7                     	;# 
  2539  0F0F                     	;# 
  2540  0F10                     	;# 
  2541  0F11                     	;# 
  2542  0F12                     	;# 
  2543  0F13                     	;# 
  2544  0F14                     	;# 
  2545  0F15                     	;# 
  2546  0F16                     	;# 
  2547  0F17                     	;# 
  2548  0F18                     	;# 
  2549  0F19                     	;# 
  2550  0F1A                     	;# 
  2551  0F1B                     	;# 
  2552  0F1C                     	;# 
  2553  0F1D                     	;# 
  2554  0F1E                     	;# 
  2555  0F1F                     	;# 
  2556  0F20                     	;# 
  2557  0F21                     	;# 
  2558  0F22                     	;# 
  2559  0F23                     	;# 
  2560  0F24                     	;# 
  2561  0F25                     	;# 
  2562  0F26                     	;# 
  2563  0F27                     	;# 
  2564  0F28                     	;# 
  2565  0F29                     	;# 
  2566  0F2A                     	;# 
  2567  0F2B                     	;# 
  2568  0F2C                     	;# 
  2569  0F2D                     	;# 
  2570  0FE4                     	;# 
  2571  0FE5                     	;# 
  2572  0FE6                     	;# 
  2573  0FE7                     	;# 
  2574  0FE8                     	;# 
  2575  0FE9                     	;# 
  2576  0FEA                     	;# 
  2577  0FEB                     	;# 
  2578  0FED                     	;# 
  2579  0FEE                     	;# 
  2580  0FEF                     	;# 
  2581  0000                     	;# 
  2582  0001                     	;# 
  2583  0002                     	;# 
  2584  0003                     	;# 
  2585  0004                     	;# 
  2586  0005                     	;# 
  2587  0006                     	;# 
  2588  0007                     	;# 
  2589  0008                     	;# 
  2590  0009                     	;# 
  2591  000A                     	;# 
  2592  000B                     	;# 
  2593  000C                     	;# 
  2594  000D                     	;# 
  2595  000E                     	;# 
  2596  0011                     	;# 
  2597  0012                     	;# 
  2598  0013                     	;# 
  2599  0015                     	;# 
  2600  0016                     	;# 
  2601  0016                     	;# 
  2602  0017                     	;# 
  2603  0018                     	;# 
  2604  0019                     	;# 
  2605  001A                     	;# 
  2606  001B                     	;# 
  2607  001C                     	;# 
  2608  008C                     	;# 
  2609  008D                     	;# 
  2610  008E                     	;# 
  2611  0091                     	;# 
  2612  0092                     	;# 
  2613  0093                     	;# 
  2614  0095                     	;# 
  2615  0096                     	;# 
  2616  0097                     	;# 
  2617  0098                     	;# 
  2618  0099                     	;# 
  2619  009A                     	;# 
  2620  009B                     	;# 
  2621  009B                     	;# 
  2622  009C                     	;# 
  2623  009D                     	;# 
  2624  009E                     	;# 
  2625  009F                     	;# 
  2626  010C                     	;# 
  2627  010D                     	;# 
  2628  010E                     	;# 
  2629  0111                     	;# 
  2630  0112                     	;# 
  2631  0113                     	;# 
  2632  0114                     	;# 
  2633  0115                     	;# 
  2634  0116                     	;# 
  2635  0117                     	;# 
  2636  0118                     	;# 
  2637  0119                     	;# 
  2638  011C                     	;# 
  2639  018C                     	;# 
  2640  018D                     	;# 
  2641  018E                     	;# 
  2642  0191                     	;# 
  2643  0191                     	;# 
  2644  0192                     	;# 
  2645  0193                     	;# 
  2646  0193                     	;# 
  2647  0194                     	;# 
  2648  0195                     	;# 
  2649  0196                     	;# 
  2650  0199                     	;# 
  2651  0199                     	;# 
  2652  0199                     	;# 
  2653  019A                     	;# 
  2654  019A                     	;# 
  2655  019A                     	;# 
  2656  019B                     	;# 
  2657  019B                     	;# 
  2658  019B                     	;# 
  2659  019B                     	;# 
  2660  019B                     	;# 
  2661  019C                     	;# 
  2662  019C                     	;# 
  2663  019C                     	;# 
  2664  019D                     	;# 
  2665  019D                     	;# 
  2666  019D                     	;# 
  2667  019E                     	;# 
  2668  019E                     	;# 
  2669  019E                     	;# 
  2670  019F                     	;# 
  2671  019F                     	;# 
  2672  019F                     	;# 
  2673  019F                     	;# 
  2674  019F                     	;# 
  2675  020C                     	;# 
  2676  020D                     	;# 
  2677  020E                     	;# 
  2678  0211                     	;# 
  2679  0211                     	;# 
  2680  0212                     	;# 
  2681  0212                     	;# 
  2682  0213                     	;# 
  2683  0213                     	;# 
  2684  0214                     	;# 
  2685  0214                     	;# 
  2686  0215                     	;# 
  2687  0215                     	;# 
  2688  0215                     	;# 
  2689  0215                     	;# 
  2690  0216                     	;# 
  2691  0216                     	;# 
  2692  0217                     	;# 
  2693  0217                     	;# 
  2694  028C                     	;# 
  2695  028D                     	;# 
  2696  028E                     	;# 
  2697  0291                     	;# 
  2698  0291                     	;# 
  2699  0292                     	;# 
  2700  0293                     	;# 
  2701  0293                     	;# 
  2702  0298                     	;# 
  2703  0298                     	;# 
  2704  0299                     	;# 
  2705  029A                     	;# 
  2706  029A                     	;# 
  2707  029E                     	;# 
  2708  030C                     	;# 
  2709  030D                     	;# 
  2710  030E                     	;# 
  2711  038C                     	;# 
  2712  038D                     	;# 
  2713  038E                     	;# 
  2714  0391                     	;# 
  2715  0392                     	;# 
  2716  0393                     	;# 
  2717  0394                     	;# 
  2718  0395                     	;# 
  2719  0396                     	;# 
  2720  0397                     	;# 
  2721  0398                     	;# 
  2722  0399                     	;# 
  2723  0415                     	;# 
  2724  0416                     	;# 
  2725  0417                     	;# 
  2726  041C                     	;# 
  2727  041D                     	;# 
  2728  041E                     	;# 
  2729  0511                     	;# 
  2730  0515                     	;# 
  2731  0617                     	;# 
  2732  0618                     	;# 
  2733  0619                     	;# 
  2734  0619                     	;# 
  2735  061A                     	;# 
  2736  061B                     	;# 
  2737  061C                     	;# 
  2738  061C                     	;# 
  2739  0691                     	;# 
  2740  0692                     	;# 
  2741  0693                     	;# 
  2742  0694                     	;# 
  2743  0695                     	;# 
  2744  0696                     	;# 
  2745  0697                     	;# 
  2746  0698                     	;# 
  2747  0699                     	;# 
  2748  069A                     	;# 
  2749  069B                     	;# 
  2750  069C                     	;# 
  2751  069D                     	;# 
  2752  069E                     	;# 
  2753  069F                     	;# 
  2754  0E0F                     	;# 
  2755  0E10                     	;# 
  2756  0E11                     	;# 
  2757  0E12                     	;# 
  2758  0E13                     	;# 
  2759  0E14                     	;# 
  2760  0E15                     	;# 
  2761  0E17                     	;# 
  2762  0E20                     	;# 
  2763  0E21                     	;# 
  2764  0E22                     	;# 
  2765  0E24                     	;# 
  2766  0E25                     	;# 
  2767  0E28                     	;# 
  2768  0E29                     	;# 
  2769  0E2A                     	;# 
  2770  0E2B                     	;# 
  2771  0E90                     	;# 
  2772  0E91                     	;# 
  2773  0E92                     	;# 
  2774  0E94                     	;# 
  2775  0E95                     	;# 
  2776  0E9C                     	;# 
  2777  0E9D                     	;# 
  2778  0E9E                     	;# 
  2779  0E9F                     	;# 
  2780  0EA0                     	;# 
  2781  0EA1                     	;# 
  2782  0EA2                     	;# 
  2783  0EA3                     	;# 
  2784  0EA4                     	;# 
  2785  0EA5                     	;# 
  2786  0EA6                     	;# 
  2787  0EA7                     	;# 
  2788  0F0F                     	;# 
  2789  0F10                     	;# 
  2790  0F11                     	;# 
  2791  0F12                     	;# 
  2792  0F13                     	;# 
  2793  0F14                     	;# 
  2794  0F15                     	;# 
  2795  0F16                     	;# 
  2796  0F17                     	;# 
  2797  0F18                     	;# 
  2798  0F19                     	;# 
  2799  0F1A                     	;# 
  2800  0F1B                     	;# 
  2801  0F1C                     	;# 
  2802  0F1D                     	;# 
  2803  0F1E                     	;# 
  2804  0F1F                     	;# 
  2805  0F20                     	;# 
  2806  0F21                     	;# 
  2807  0F22                     	;# 
  2808  0F23                     	;# 
  2809  0F24                     	;# 
  2810  0F25                     	;# 
  2811  0F26                     	;# 
  2812  0F27                     	;# 
  2813  0F28                     	;# 
  2814  0F29                     	;# 
  2815  0F2A                     	;# 
  2816  0F2B                     	;# 
  2817  0F2C                     	;# 
  2818  0F2D                     	;# 
  2819  0FE4                     	;# 
  2820  0FE5                     	;# 
  2821  0FE6                     	;# 
  2822  0FE7                     	;# 
  2823  0FE8                     	;# 
  2824  0FE9                     	;# 
  2825  0FEA                     	;# 
  2826  0FEB                     	;# 
  2827  0FED                     	;# 
  2828  0FEE                     	;# 
  2829  0FEF                     	;# 
  2830                           
  2831 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  2832  0000                     
  2833 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  2834  0000                     
  2835 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  2836  0000                     
  2837                           	psect	stringtext1
  2838  0537                     __pstringtext1:	
  2839  0537                     _dpowers:	
  2840  0537  3401               	retlw	1
  2841  0538  3400               	retlw	0
  2842  0539  3400               	retlw	0
  2843  053A  3400               	retlw	0
  2844  053B  340A               	retlw	10
  2845  053C  3400               	retlw	0
  2846  053D  3400               	retlw	0
  2847  053E  3400               	retlw	0
  2848  053F  3464               	retlw	100
  2849  0540  3400               	retlw	0
  2850  0541  3400               	retlw	0
  2851  0542  3400               	retlw	0
  2852  0543  34E8               	retlw	232
  2853  0544  3403               	retlw	3
  2854  0545  3400               	retlw	0
  2855  0546  3400               	retlw	0
  2856  0547  3410               	retlw	16
  2857  0548  3427               	retlw	39
  2858  0549  3400               	retlw	0
  2859  054A  3400               	retlw	0
  2860  054B  34A0               	retlw	160
  2861  054C  3486               	retlw	134
  2862  054D  3401               	retlw	1
  2863  054E  3400               	retlw	0
  2864  054F  3440               	retlw	64
  2865  0550  3442               	retlw	66
  2866  0551  340F               	retlw	15
  2867  0552  3400               	retlw	0
  2868  0553  3480               	retlw	128
  2869  0554  3496               	retlw	150
  2870  0555  3498               	retlw	152
  2871  0556  3400               	retlw	0
  2872  0557  3400               	retlw	0
  2873  0558  34E1               	retlw	225
  2874  0559  34F5               	retlw	245
  2875  055A  3405               	retlw	5
  2876  055B  3400               	retlw	0
  2877  055C  34CA               	retlw	202
  2878  055D  349A               	retlw	154
  2879  055E  343B               	retlw	59
  2880  055F                     __end_of_dpowers:	
  2881                           
  2882                           	psect	stringtext2
  2883  0583                     __pstringtext2:	
  2884  0583                     _hexpowers:	
  2885  0583  3401               	retlw	1
  2886  0584  3400               	retlw	0
  2887  0585  3400               	retlw	0
  2888  0586  3400               	retlw	0
  2889  0587  3410               	retlw	16
  2890  0588  3400               	retlw	0
  2891  0589  3400               	retlw	0
  2892  058A  3400               	retlw	0
  2893  058B  3400               	retlw	0
  2894  058C  3401               	retlw	1
  2895  058D  3400               	retlw	0
  2896  058E  3400               	retlw	0
  2897  058F  3400               	retlw	0
  2898  0590  3410               	retlw	16
  2899  0591  3400               	retlw	0
  2900  0592  3400               	retlw	0
  2901  0593  3400               	retlw	0
  2902  0594  3400               	retlw	0
  2903  0595  3401               	retlw	1
  2904  0596  3400               	retlw	0
  2905  0597  3400               	retlw	0
  2906  0598  3400               	retlw	0
  2907  0599  3410               	retlw	16
  2908  059A  3400               	retlw	0
  2909  059B  3400               	retlw	0
  2910  059C  3400               	retlw	0
  2911  059D  3400               	retlw	0
  2912  059E  3401               	retlw	1
  2913  059F  3400               	retlw	0
  2914  05A0  3400               	retlw	0
  2915  05A1  3400               	retlw	0
  2916  05A2  3410               	retlw	16
  2917  05A3                     __end_of_hexpowers:	
  2918                           
  2919                           	psect	nvBANK0
  2920  0052                     __pnvBANK0:	
  2921  0052                     _INT_InterruptHandler:	
  2922  0052                     	ds	2
  2923  0054                     _EUSART_ErrorHandler:	
  2924  0054                     	ds	2
  2925  0056                     _EUSART_OverrunErrorHandler:	
  2926  0056                     	ds	2
  2927  0058                     _EUSART_FramingErrorHandler:	
  2928  0058                     	ds	2
  2929  001C                     _T2CONbits	set	28
  2930  001C                     _T2CON	set	28
  2931  001A                     _TMR2	set	26
  2932  001B                     _PR2	set	27
  2933  0015                     _TMR0	set	21
  2934  0011                     _PIR1bits	set	17
  2935  000B                     _INTCONbits	set	11
  2936  009D                     _ADCON0bits	set	157
  2937  009E                     _ADCON1	set	158
  2938  009D                     _ADCON0	set	157
  2939  0095                     _OPTION_REG	set	149
  2940  0095                     _OPTION_REGbits	set	149
  2941  008E                     _TRISC	set	142
  2942  008D                     _TRISB	set	141
  2943  008C                     _TRISA	set	140
  2944  0097                     _WDTCON	set	151
  2945  0098                     _OSCTUNE	set	152
  2946  009A                     _OSCSTAT	set	154
  2947  0099                     _OSCCON	set	153
  2948  009B                     _ADRES	set	155
  2949  010E                     _LATCbits	set	270
  2950  010C                     _LATAbits	set	268
  2951  0117                     _FVRCONbits	set	279
  2952  0117                     _FVRCON	set	279
  2953  010E                     _LATC	set	270
  2954  010D                     _LATB	set	269
  2955  010C                     _LATA	set	268
  2956  0116                     _BORCON	set	278
  2957  0119                     _DAC1CON1	set	281
  2958  0118                     _DAC1CON0	set	280
  2959  019A                     _TX1REG	set	410
  2960  0199                     _RC1REG	set	409
  2961  019D                     _RC1STAbits	set	413
  2962  019E                     _TX1STAbits	set	414
  2963  019C                     _SP1BRGH	set	412
  2964  019B                     _SP1BRGL	set	411
  2965  019E                     _TX1STA	set	414
  2966  019D                     _RC1STA	set	413
  2967  019F                     _BAUD1CON	set	415
  2968  018C                     _ANSELA	set	396
  2969  018D                     _ANSELB	set	397
  2970  018E                     _ANSELC	set	398
  2971  020E                     _WPUC	set	526
  2972  020C                     _WPUA	set	524
  2973  020D                     _WPUB	set	525
  2974  0291                     _CCPR1L	set	657
  2975  0293                     _CCP1CONbits	set	659
  2976  029E                     _CCPTMRSbits	set	670
  2977  028E                     _ODCONC	set	654
  2978  028D                     _ODCONB	set	653
  2979  028C                     _ODCONA	set	652
  2980  030E                     _SLRCONC	set	782
  2981  030D                     _SLRCONB	set	781
  2982  030C                     _SLRCONA	set	780
  2983  038E                     _INLVLC	set	910
  2984  038D                     _INLVLB	set	909
  2985  038C                     _INLVLA	set	908
  2986  0515                     _OPA2CON	set	1301
  2987  0511                     _OPA1CON	set	1297
  2988  061C                     _PWM4CONbits	set	1564
  2989  061A                     _PWM4DCLbits	set	1562
  2990  061B                     _PWM4DCH	set	1563
  2991  0619                     _PWM3CONbits	set	1561
  2992  0617                     _PWM3DCLbits	set	1559
  2993  0618                     _PWM3DCH	set	1560
  2994  0E24                     _RXPPS	set	3620
  2995  0E10                     _INTPPS	set	3600
  2996  0EA5                     _RC5PPS	set	3749
  2997  0E95                     _RA5PPS	set	3733
  2998  0EA4                     _RC4PPS	set	3748
  2999  0E9F                     _RB7PPS	set	3743
  3000                           
  3001                           	psect	stringtext3
  3002  05DD                     __pstringtext3:	
  3003  05DD                     STR_4:	
  3004  05DD  3463               	retlw	99	;'c'
  3005  05DE  346F               	retlw	111	;'o'
  3006  05DF  346D               	retlw	109	;'m'
  3007  05E0  346D               	retlw	109	;'m'
  3008  05E1  3461               	retlw	97	;'a'
  3009  05E2  346E               	retlw	110	;'n'
  3010  05E3  3464               	retlw	100	;'d'
  3011  05E4  343A               	retlw	58	;':'
  3012  05E5  3420               	retlw	32	;' '
  3013  05E6  3420               	retlw	32	;' '
  3014  05E7  3420               	retlw	32	;' '
  3015  05E8  3420               	retlw	32	;' '
  3016  05E9  3420               	retlw	32	;' '
  3017  05EA  3420               	retlw	32	;' '
  3018  05EB  3420               	retlw	32	;' '
  3019  05EC  3420               	retlw	32	;' '
  3020  05ED  3420               	retlw	32	;' '
  3021  05EE  3420               	retlw	32	;' '
  3022  05EF  3430               	retlw	48	;'0'
  3023  05F0  3478               	retlw	120	;'x'
  3024  05F1  3425               	retlw	37	;'%'
  3025  05F2  3430               	retlw	48	;'0'
  3026  05F3  3432               	retlw	50	;'2'
  3027  05F4  3478               	retlw	120	;'x'
  3028  05F5  340D               	retlw	13
  3029  05F6  340A               	retlw	10
  3030  05F7  3400               	retlw	0
  3031                           
  3032                           	psect	stringtext4
  3033  05F8                     __pstringtext4:	
  3034  05F8                     STR_6:	
  3035  05F8  3461               	retlw	97	;'a'
  3036  05F9  3464               	retlw	100	;'d'
  3037  05FA  3464               	retlw	100	;'d'
  3038  05FB  3472               	retlw	114	;'r'
  3039  05FC  3465               	retlw	101	;'e'
  3040  05FD  3473               	retlw	115	;'s'
  3041  05FE  3473               	retlw	115	;'s'
  3042  05FF  343A               	retlw	58	;':'
  3043  0600  3420               	retlw	32	;' '
  3044  0601  3420               	retlw	32	;' '
  3045  0602  3420               	retlw	32	;' '
  3046  0603  3420               	retlw	32	;' '
  3047  0604  3420               	retlw	32	;' '
  3048  0605  3420               	retlw	32	;' '
  3049  0606  3420               	retlw	32	;' '
  3050  0607  3420               	retlw	32	;' '
  3051  0608  3420               	retlw	32	;' '
  3052  0609  3420               	retlw	32	;' '
  3053  060A  3430               	retlw	48	;'0'
  3054  060B  3478               	retlw	120	;'x'
  3055  060C  3425               	retlw	37	;'%'
  3056  060D  3430               	retlw	48	;'0'
  3057  060E  3432               	retlw	50	;'2'
  3058  060F  3478               	retlw	120	;'x'
  3059  0610  340D               	retlw	13
  3060  0611  340A               	retlw	10
  3061  0612  3400               	retlw	0
  3062                           
  3063                           	psect	stringtext5
  3064  0613                     __pstringtext5:	
  3065  0613                     STR_5:	
  3066  0613  3463               	retlw	99	;'c'
  3067  0614  346F               	retlw	111	;'o'
  3068  0615  346D               	retlw	109	;'m'
  3069  0616  346D               	retlw	109	;'m'
  3070  0617  3461               	retlw	97	;'a'
  3071  0618  346E               	retlw	110	;'n'
  3072  0619  3464               	retlw	100	;'d'
  3073  061A  345F               	retlw	95	;'_'
  3074  061B  3462               	retlw	98	;'b'
  3075  061C  343A               	retlw	58	;':'
  3076  061D  3420               	retlw	32	;' '
  3077  061E  3420               	retlw	32	;' '
  3078  061F  3420               	retlw	32	;' '
  3079  0620  3420               	retlw	32	;' '
  3080  0621  3420               	retlw	32	;' '
  3081  0622  3420               	retlw	32	;' '
  3082  0623  3420               	retlw	32	;' '
  3083  0624  3420               	retlw	32	;' '
  3084  0625  3430               	retlw	48	;'0'
  3085  0626  3478               	retlw	120	;'x'
  3086  0627  3425               	retlw	37	;'%'
  3087  0628  3430               	retlw	48	;'0'
  3088  0629  3432               	retlw	50	;'2'
  3089  062A  3478               	retlw	120	;'x'
  3090  062B  340D               	retlw	13
  3091  062C  340A               	retlw	10
  3092  062D  3400               	retlw	0
  3093                           
  3094                           	psect	stringtext6
  3095  062E                     __pstringtext6:	
  3096  062E                     STR_7:	
  3097  062E  3461               	retlw	97	;'a'
  3098  062F  3464               	retlw	100	;'d'
  3099  0630  3464               	retlw	100	;'d'
  3100  0631  3472               	retlw	114	;'r'
  3101  0632  3465               	retlw	101	;'e'
  3102  0633  3473               	retlw	115	;'s'
  3103  0634  3473               	retlw	115	;'s'
  3104  0635  345F               	retlw	95	;'_'
  3105  0636  3462               	retlw	98	;'b'
  3106  0637  343A               	retlw	58	;':'
  3107  0638  3420               	retlw	32	;' '
  3108  0639  3420               	retlw	32	;' '
  3109  063A  3420               	retlw	32	;' '
  3110  063B  3420               	retlw	32	;' '
  3111  063C  3420               	retlw	32	;' '
  3112  063D  3420               	retlw	32	;' '
  3113  063E  3420               	retlw	32	;' '
  3114  063F  3420               	retlw	32	;' '
  3115  0640  3430               	retlw	48	;'0'
  3116  0641  3478               	retlw	120	;'x'
  3117  0642  3425               	retlw	37	;'%'
  3118  0643  3430               	retlw	48	;'0'
  3119  0644  3432               	retlw	50	;'2'
  3120  0645  3478               	retlw	120	;'x'
  3121  0646  340D               	retlw	13
  3122  0647  340A               	retlw	10
  3123  0648  3400               	retlw	0
  3124                           
  3125                           	psect	stringtext7
  3126  0649                     __pstringtext7:	
  3127  0649                     STR_8:	
  3128  0649  3465               	retlw	101	;'e'
  3129  064A  3478               	retlw	120	;'x'
  3130  064B  3474               	retlw	116	;'t'
  3131  064C  3465               	retlw	101	;'e'
  3132  064D  346E               	retlw	110	;'n'
  3133  064E  3464               	retlw	100	;'d'
  3134  064F  3465               	retlw	101	;'e'
  3135  0650  3464               	retlw	100	;'d'
  3136  0651  3420               	retlw	32	;' '
  3137  0652  3461               	retlw	97	;'a'
  3138  0653  3464               	retlw	100	;'d'
  3139  0654  3464               	retlw	100	;'d'
  3140  0655  3472               	retlw	114	;'r'
  3141  0656  3465               	retlw	101	;'e'
  3142  0657  3473               	retlw	115	;'s'
  3143  0658  3473               	retlw	115	;'s'
  3144  0659  343A               	retlw	58	;':'
  3145  065A  3420               	retlw	32	;' '
  3146  065B  3430               	retlw	48	;'0'
  3147  065C  3478               	retlw	120	;'x'
  3148  065D  3425               	retlw	37	;'%'
  3149  065E  3430               	retlw	48	;'0'
  3150  065F  3434               	retlw	52	;'4'
  3151  0660  3478               	retlw	120	;'x'
  3152  0661  340D               	retlw	13
  3153  0662  340A               	retlw	10
  3154  0663  3400               	retlw	0
  3155                           
  3156                           	psect	stringtext8
  3157  0664                     __pstringtext8:	
  3158  0664                     STR_3:	
  3159  0664  340D               	retlw	13
  3160  0665  340A               	retlw	10
  3161  0666  3463               	retlw	99	;'c'
  3162  0667  346F               	retlw	111	;'o'
  3163  0668  3464               	retlw	100	;'d'
  3164  0669  3465               	retlw	101	;'e'
  3165  066A  343A               	retlw	58	;':'
  3166  066B  3420               	retlw	32	;' '
  3167  066C  3420               	retlw	32	;' '
  3168  066D  3420               	retlw	32	;' '
  3169  066E  3420               	retlw	32	;' '
  3170  066F  3420               	retlw	32	;' '
  3171  0670  3420               	retlw	32	;' '
  3172  0671  3420               	retlw	32	;' '
  3173  0672  3420               	retlw	32	;' '
  3174  0673  3420               	retlw	32	;' '
  3175  0674  3430               	retlw	48	;'0'
  3176  0675  3478               	retlw	120	;'x'
  3177  0676  3425               	retlw	37	;'%'
  3178  0677  3430               	retlw	48	;'0'
  3179  0678  3438               	retlw	56	;'8'
  3180  0679  346C               	retlw	108	;'l'
  3181  067A  3478               	retlw	120	;'x'
  3182  067B  340D               	retlw	13
  3183  067C  340A               	retlw	10
  3184  067D  3400               	retlw	0
  3185                           
  3186                           	psect	stringtext9
  3187  067E                     __pstringtext9:	
  3188  067E                     STR_9:	
  3189  067E  3430               	retlw	48	;'0'
  3190  067F  3431               	retlw	49	;'1'
  3191  0680  3432               	retlw	50	;'2'
  3192  0681  3433               	retlw	51	;'3'
  3193  0682  3434               	retlw	52	;'4'
  3194  0683  3435               	retlw	53	;'5'
  3195  0684  3436               	retlw	54	;'6'
  3196  0685  3437               	retlw	55	;'7'
  3197  0686  3438               	retlw	56	;'8'
  3198  0687  3439               	retlw	57	;'9'
  3199  0688  3461               	retlw	97	;'a'
  3200  0689  3462               	retlw	98	;'b'
  3201  068A  3463               	retlw	99	;'c'
  3202  068B  3464               	retlw	100	;'d'
  3203  068C  3465               	retlw	101	;'e'
  3204  068D  3466               	retlw	102	;'f'
  3205  068E  3400               	retlw	0
  3206                           
  3207                           	psect	stringtext10
  3208  070C                     __pstringtext10:	
  3209  070C                     STR_1:	
  3210  070C  3425               	retlw	37	;'%'
  3211  070D  3464               	retlw	100	;'d'
  3212  070E  340A               	retlw	10
  3213  070F  3400               	retlw	0
  3214                           
  3215                           	psect	stringtext11
  3216  0000                     __pstringtext11:	
  3217  070C                     
  3218                           ; #config settings
  3219  0000                     
  3220                           	psect	cinit
  3221  0016                     start_initialization:	
  3222  0016                     __initialization:	
  3223                           
  3224                           ; Clear objects allocated to COMMON
  3225  0016  01F0               	clrf	__pbssCOMMON& (0+127)
  3226  0017  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  3227  0018  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  3228  0019  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  3229  001A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  3230  001B  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  3231  001C  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  3232                           
  3233                           ; Clear objects allocated to BANK0
  3234  001D  0020               	movlb	0	; select bank0
  3235  001E  01DA               	clrf	__pbssBANK0& (0+127)
  3236  001F  01DB               	clrf	(__pbssBANK0+1)& (0+127)
  3237  0020  01DC               	clrf	(__pbssBANK0+2)& (0+127)
  3238  0021  01DD               	clrf	(__pbssBANK0+3)& (0+127)
  3239                           
  3240                           ; Clear objects allocated to BANK1
  3241  0022  30A0               	movlw	low __pbssBANK1
  3242  0023  0084               	movwf	4
  3243  0024  3000               	movlw	high __pbssBANK1
  3244  0025  0085               	movwf	5
  3245  0026  3021               	movlw	33
  3246  0027  3186  26E3         	fcall	clear_ram0
  3247  0029                     end_of_initialization:	
  3248                           ;End of C runtime variable initialization code
  3249                           
  3250  0029                     __end_of__initialization:	
  3251  0029  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3252  002A  0020               	movlb	0
  3253  002B  3182  2A5C         	ljmp	_main	;jump to C main() function
  3254                           
  3255                           	psect	bssCOMMON
  3256  0070                     __pbssCOMMON:	
  3257  0070                     _timer0ReloadVal:	
  3258  0070                     	ds	1
  3259  0071                     _ir_code:	
  3260  0071                     	ds	6
  3261                           
  3262                           	psect	bssBANK0
  3263  005A                     __pbssBANK0:	
  3264  005A                     _LED_blue:	
  3265  005A                     	ds	1
  3266  005B                     _LED_green:	
  3267  005B                     	ds	1
  3268  005C                     _LED_red:	
  3269  005C                     	ds	1
  3270  005D                     _eusartRxLastError:	
  3271  005D                     	ds	1
  3272                           
  3273                           	psect	bssBANK1
  3274  00A0                     __pbssBANK1:	
  3275  00A0                     _stats:	
  3276  00A0                     	ds	33
  3277                           
  3278                           	psect	clrtext
  3279  06E3                     clear_ram0:	
  3280                           ;	Called with FSR0 containing the base address, and
  3281                           ;	WREG with the size to clear
  3282                           
  3283  06E3  0064               	clrwdt	;clear the watchdog before getting into this loop
  3284  06E4                     clrloop0:	
  3285  06E4  0180               	clrf	0	;clear RAM location pointed to by FSR
  3286  06E5  3101               	addfsr 0,1
  3287  06E6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3288  06E7  2EE4               	goto	clrloop0	;have we reached the end yet?
  3289  06E8  3400               	retlw	0	;all done for this memory range, return
  3290                           
  3291                           	psect	cstackCOMMON
  3292  0077                     __pcstackCOMMON:	
  3293  0077                     ?_isdigit:	
  3294  0077                     ?_PIN_MANAGER_Initialize:	
  3295                           ; 1 bit 
  3296                           
  3297  0077                     ?_OSCILLATOR_Initialize:	
  3298                           ; 1 bytes @ 0x0
  3299                           
  3300  0077                     ?_WDT_Initialize:	
  3301                           ; 1 bytes @ 0x0
  3302                           
  3303  0077                     ?_OPA1_Initialize:	
  3304                           ; 1 bytes @ 0x0
  3305                           
  3306  0077                     ?_OPA2_Initialize:	
  3307                           ; 1 bytes @ 0x0
  3308                           
  3309  0077                     ?_TMR2_Initialize:	
  3310                           ; 1 bytes @ 0x0
  3311                           
  3312  0077                     ?_EXT_INT_Initialize:	
  3313                           ; 1 bytes @ 0x0
  3314                           
  3315  0077                     ?_TMR0_Initialize:	
  3316                           ; 1 bytes @ 0x0
  3317                           
  3318  0077                     ?_EUSART_Initialize:	
  3319                           ; 1 bytes @ 0x0
  3320                           
  3321  0077                     ?_INT_ISR:	
  3322                           ; 1 bytes @ 0x0
  3323                           
  3324  0077                     ?_INT_CallBack:	
  3325                           ; 1 bytes @ 0x0
  3326                           
  3327  0077                     ?_DAC_Initialize:	
  3328                           ; 1 bytes @ 0x0
  3329                           
  3330  0077                     ?_SYSTEM_Initialize:	
  3331                           ; 1 bytes @ 0x0
  3332                           
  3333  0077                     ?_PIN_MANAGER_IOC:	
  3334                           ; 1 bytes @ 0x0
  3335                           
  3336  0077                     ??_PIN_MANAGER_IOC:	
  3337                           ; 1 bytes @ 0x0
  3338                           
  3339  0077                     ?_INTERRUPT_InterruptManager:	
  3340                           ; 1 bytes @ 0x0
  3341                           
  3342  0077                     ?_EUSART_Write:	
  3343                           ; 1 bytes @ 0x0
  3344                           
  3345  0077                     ?_putch:	
  3346                           ; 1 bytes @ 0x0
  3347                           
  3348  0077                     ?_INT_DefaultInterruptHandler:	
  3349                           ; 1 bytes @ 0x0
  3350                           
  3351  0077                     ??_INT_DefaultInterruptHandler:	
  3352                           ; 1 bytes @ 0x0
  3353                           
  3354  0077                     ?_process_remote_command:	
  3355                           ; 1 bytes @ 0x0
  3356                           
  3357  0077                     ?_main:	
  3358                           ; 1 bytes @ 0x0
  3359                           
  3360                           
  3361                           ; 1 bytes @ 0x0
  3362  0077                     	ds	1
  3363  0078                     INT_DefaultInterruptHandler@time:	
  3364                           
  3365                           ; 1 bytes @ 0x1
  3366  0078                     	ds	1
  3367  0079                     ??_PIN_MANAGER_Initialize:	
  3368  0079                     ??_OSCILLATOR_Initialize:	
  3369                           ; 1 bytes @ 0x2
  3370                           
  3371  0079                     ??_WDT_Initialize:	
  3372                           ; 1 bytes @ 0x2
  3373                           
  3374  0079                     ??_OPA1_Initialize:	
  3375                           ; 1 bytes @ 0x2
  3376                           
  3377  0079                     ??_OPA2_Initialize:	
  3378                           ; 1 bytes @ 0x2
  3379                           
  3380  0079                     ??_TMR2_Initialize:	
  3381                           ; 1 bytes @ 0x2
  3382                           
  3383  0079                     ??_EXT_INT_Initialize:	
  3384                           ; 1 bytes @ 0x2
  3385                           
  3386  0079                     ??_TMR0_Initialize:	
  3387                           ; 1 bytes @ 0x2
  3388                           
  3389  0079                     ??_EUSART_Initialize:	
  3390                           ; 1 bytes @ 0x2
  3391                           
  3392  0079                     ??_INT_ISR:	
  3393                           ; 1 bytes @ 0x2
  3394                           
  3395  0079                     ??_EUSART_SetFramingErrorHandler:	
  3396                           ; 1 bytes @ 0x2
  3397                           
  3398  0079                     ??_EUSART_SetOverrunErrorHandler:	
  3399                           ; 1 bytes @ 0x2
  3400                           
  3401  0079                     ??_EUSART_SetErrorHandler:	
  3402                           ; 1 bytes @ 0x2
  3403                           
  3404  0079                     ??_INT_CallBack:	
  3405                           ; 1 bytes @ 0x2
  3406                           
  3407  0079                     ??_isdigit:	
  3408                           ; 1 bytes @ 0x2
  3409                           
  3410  0079                     ??_DAC_Initialize:	
  3411                           ; 1 bytes @ 0x2
  3412                           
  3413  0079                     ??_SYSTEM_Initialize:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0079                     ??_INTERRUPT_InterruptManager:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0079                     ??_EUSART_Write:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0079                     ??_INT_SetInterruptHandler:	
  3423                           ; 1 bytes @ 0x2
  3424                           
  3425  0079                     ??_setLEDColor:	
  3426                           ; 1 bytes @ 0x2
  3427                           
  3428  0079                     ??___wmul:	
  3429                           ; 1 bytes @ 0x2
  3430                           
  3431  0079                     ??___lldiv:	
  3432                           ; 1 bytes @ 0x2
  3433                           
  3434  0079                     ??___aldiv:	
  3435                           ; 1 bytes @ 0x2
  3436                           
  3437  0079                     EUSART_Write@txData:	
  3438                           ; 1 bytes @ 0x2
  3439                           
  3440  0079                     setLEDColor@red:	
  3441                           ; 1 bytes @ 0x2
  3442                           
  3443  0079                     _isdigit$1232:	
  3444                           ; 1 bytes @ 0x2
  3445                           
  3446  0079                     ___wmul@product:	
  3447                           ; 1 bytes @ 0x2
  3448                           
  3449                           
  3450                           ; 2 bytes @ 0x2
  3451  0079                     	ds	1
  3452  007A                     ??_putch:	
  3453  007A                     ??_battery_voltage:	
  3454                           ; 1 bytes @ 0x3
  3455                           
  3456  007A                     ??___llmod:	
  3457                           ; 1 bytes @ 0x3
  3458                           
  3459  007A                     putch@txData:	
  3460                           ; 1 bytes @ 0x3
  3461                           
  3462  007A                     isdigit@c:	
  3463                           ; 1 bytes @ 0x3
  3464                           
  3465                           
  3466                           ; 1 bytes @ 0x3
  3467  007A                     	ds	1
  3468  007B                     ___llmod@counter:	
  3469                           
  3470                           ; 1 bytes @ 0x4
  3471  007B                     	ds	1
  3472                           
  3473                           	psect	cstackBANK0
  3474  0020                     __pcstackBANK0:	
  3475  0020                     ?_EUSART_SetFramingErrorHandler:	
  3476  0020                     ?_EUSART_SetOverrunErrorHandler:	
  3477                           ; 1 bytes @ 0x0
  3478                           
  3479  0020                     ?_EUSART_SetErrorHandler:	
  3480                           ; 1 bytes @ 0x0
  3481                           
  3482  0020                     ?_INT_SetInterruptHandler:	
  3483                           ; 1 bytes @ 0x0
  3484                           
  3485  0020                     ?_setLEDColor:	
  3486                           ; 1 bytes @ 0x0
  3487                           
  3488  0020                     ?___wmul:	
  3489                           ; 1 bytes @ 0x0
  3490                           
  3491  0020                     ?___lldiv:	
  3492                           ; 2 bytes @ 0x0
  3493                           
  3494  0020                     ?___aldiv:	
  3495                           ; 4 bytes @ 0x0
  3496                           
  3497  0020                     setLEDColor@green:	
  3498                           ; 4 bytes @ 0x0
  3499                           
  3500  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3501                           ; 1 bytes @ 0x0
  3502                           
  3503  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3504                           ; 2 bytes @ 0x0
  3505                           
  3506  0020                     EUSART_SetErrorHandler@interruptHandler:	
  3507                           ; 2 bytes @ 0x0
  3508                           
  3509  0020                     INT_SetInterruptHandler@InterruptHandler:	
  3510                           ; 2 bytes @ 0x0
  3511                           
  3512  0020                     ___wmul@multiplier:	
  3513                           ; 2 bytes @ 0x0
  3514                           
  3515  0020                     ___lldiv@divisor:	
  3516                           ; 2 bytes @ 0x0
  3517                           
  3518  0020                     ___aldiv@divisor:	
  3519                           ; 4 bytes @ 0x0
  3520                           
  3521                           
  3522                           ; 4 bytes @ 0x0
  3523  0020                     	ds	1
  3524  0021                     setLEDColor@blue:	
  3525                           
  3526                           ; 1 bytes @ 0x1
  3527  0021                     	ds	1
  3528  0022                     ___wmul@multiplicand:	
  3529                           
  3530                           ; 2 bytes @ 0x2
  3531  0022                     	ds	2
  3532  0024                     ___lldiv@dividend:	
  3533  0024                     ___aldiv@dividend:	
  3534                           ; 4 bytes @ 0x4
  3535                           
  3536                           
  3537                           ; 4 bytes @ 0x4
  3538  0024                     	ds	4
  3539  0028                     ___aldiv@counter:	
  3540  0028                     ___lldiv@quotient:	
  3541                           ; 1 bytes @ 0x8
  3542                           
  3543                           
  3544                           ; 4 bytes @ 0x8
  3545  0028                     	ds	1
  3546  0029                     ___aldiv@sign:	
  3547                           
  3548                           ; 1 bytes @ 0x9
  3549  0029                     	ds	1
  3550  002A                     ___aldiv@quotient:	
  3551                           
  3552                           ; 4 bytes @ 0xA
  3553  002A                     	ds	2
  3554  002C                     ___lldiv@counter:	
  3555                           
  3556                           ; 1 bytes @ 0xC
  3557  002C                     	ds	1
  3558  002D                     ?___llmod:	
  3559  002D                     ___llmod@divisor:	
  3560                           ; 4 bytes @ 0xD
  3561                           
  3562                           
  3563                           ; 4 bytes @ 0xD
  3564  002D                     	ds	1
  3565  002E                     ?_battery_voltage:	
  3566                           
  3567                           ; 2 bytes @ 0xE
  3568  002E                     	ds	3
  3569  0031                     ___llmod@dividend:	
  3570                           
  3571                           ; 4 bytes @ 0x11
  3572  0031                     	ds	4
  3573  0035                     ?_printf:	
  3574  0035                     printf@f:	
  3575                           ; 2 bytes @ 0x15
  3576                           
  3577                           
  3578                           ; 2 bytes @ 0x15
  3579  0035                     	ds	6
  3580  003B                     ??_printf:	
  3581                           
  3582                           ; 1 bytes @ 0x1B
  3583  003B                     	ds	6
  3584  0041                     printf@idx:	
  3585                           
  3586                           ; 1 bytes @ 0x21
  3587  0041                     	ds	1
  3588  0042                     printf@prec:	
  3589                           
  3590                           ; 2 bytes @ 0x22
  3591  0042                     	ds	2
  3592  0044                     printf@ap:	
  3593                           
  3594                           ; 1 bytes @ 0x24
  3595  0044                     	ds	1
  3596  0045                     printf@val:	
  3597                           
  3598                           ; 4 bytes @ 0x25
  3599  0045                     	ds	4
  3600  0049                     printf@width:	
  3601                           
  3602                           ; 2 bytes @ 0x29
  3603  0049                     	ds	2
  3604  004B                     printf@flag:	
  3605                           
  3606                           ; 1 bytes @ 0x2B
  3607  004B                     	ds	1
  3608  004C                     printf@c:	
  3609                           
  3610                           ; 1 bytes @ 0x2C
  3611  004C                     	ds	1
  3612  004D                     ??_process_remote_command:	
  3613                           
  3614                           ; 1 bytes @ 0x2D
  3615  004D                     	ds	2
  3616  004F                     process_remote_command@code:	
  3617                           
  3618                           ; 1 bytes @ 0x2F
  3619  004F                     	ds	1
  3620  0050                     ??_main:	
  3621                           
  3622                           ; 1 bytes @ 0x30
  3623  0050                     	ds	2
  3624                           
  3625                           	psect	maintext
  3626  025C                     __pmaintext:	
  3627 ;;
  3628 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3629 ;;
  3630 ;; *************** function _main *****************
  3631 ;; Defined at:
  3632 ;;		line 185 in file "main.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : B1F/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3646 ;;      Params:         0       0       0       0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0
  3648 ;;      Temps:          0       2       0       0       0       0       0       0
  3649 ;;      Totals:         0       2       0       0       0       0       0       0
  3650 ;;Total ram usage:        2 bytes
  3651 ;; Hardware stack levels required when called:    8
  3652 ;; This function calls:
  3653 ;;		_DAC_Initialize
  3654 ;;		_OPA1_Initialize
  3655 ;;		_OPA2_Initialize
  3656 ;;		_SYSTEM_Initialize
  3657 ;;		_battery_voltage
  3658 ;;		_printf
  3659 ;;		_process_remote_command
  3660 ;; This function is called by:
  3661 ;;		Startup code after reset
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           
  3666                           ;psect for function _main
  3667  025C                     _main:	
  3668                           
  3669                           ;main.c: 188: SYSTEM_Initialize();
  3670                           
  3671                           ;incstack = 0
  3672                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3673  025C  3185  25A3  3182   	fcall	_SYSTEM_Initialize
  3674                           
  3675                           ;main.c: 189: DAC_Initialize();
  3676  025F  3187  2701  3182   	fcall	_DAC_Initialize
  3677                           
  3678                           ;main.c: 190: OPA1_Initialize();
  3679  0262  3187  2718  3182   	fcall	_OPA1_Initialize
  3680                           
  3681                           ;main.c: 191: OPA2_Initialize();
  3682  0265  3187  2714  3182   	fcall	_OPA2_Initialize
  3683                           
  3684                           ;main.c: 195: (INTCONbits.GIE = 1);
  3685  0268  178B               	bsf	11,7	;volatile
  3686                           
  3687                           ;main.c: 198: (INTCONbits.PEIE = 1);
  3688  0269  170B               	bsf	11,6	;volatile
  3689  026A                     l2243:	
  3690                           ;main.c: 201: do { LATAbits.LATA5 = 1; } while(0);
  3691                           
  3692                           ;main.c: 200: while(1){
  3693                           
  3694  026A  0022               	movlb	2	; select bank2
  3695  026B  168C               	bsf	12,5	;volatile
  3696                           
  3697                           ;main.c: 202: do { LATCbits.LATC5 = 1; } while(0);
  3698  026C  168E               	bsf	14,5	;volatile
  3699                           
  3700                           ;main.c: 203: do { LATCbits.LATC4 = 1; } while(0);
  3701  026D  160E               	bsf	14,4	;volatile
  3702                           
  3703                           ;main.c: 205: if ((int)battery_voltage() < 2500)
  3704  026E  3185  2509  3182   	fcall	_battery_voltage
  3705  0271  0020               	movlb	0	; select bank0
  3706  0272  082F               	movf	?_battery_voltage+1,w
  3707  0273  3A80               	xorlw	128
  3708  0274  00D0               	movwf	??_main
  3709  0275  3089               	movlw	137
  3710  0276  0250               	subwf	??_main,w
  3711  0277  1D03               	skipz
  3712  0278  2A7B               	goto	u2135
  3713  0279  30C4               	movlw	196
  3714  027A  022E               	subwf	?_battery_voltage,w
  3715  027B                     u2135:	
  3716  027B  1803               	skipnc
  3717  027C  2A8F               	goto	l2251
  3718                           
  3719                           ;main.c: 206: {;main.c: 207: do { LATCbits.LATC5 = 0; } while(0);
  3720  027D  0022               	movlb	2	; select bank2
  3721  027E  128E               	bcf	14,5	;volatile
  3722                           
  3723                           ;main.c: 208: printf("%d\n", (int)battery_voltage());
  3724  027F  300C               	movlw	low (STR_1| (0+32768))
  3725  0280  0020               	movlb	0	; select bank0
  3726  0281  00B5               	movwf	printf@f
  3727  0282  3087               	movlw	high (STR_1| (0+32768))
  3728  0283  00B6               	movwf	printf@f+1
  3729  0284  3185  2509  3182   	fcall	_battery_voltage
  3730  0287  0020               	movlb	0	; select bank0
  3731  0288  082F               	movf	?_battery_voltage+1,w
  3732  0289  00B8               	movwf	?_printf+3
  3733  028A  082E               	movf	?_battery_voltage,w
  3734  028B  00B7               	movwf	?_printf+2
  3735  028C  3180  202D  3182   	fcall	_printf
  3736  028F                     l2251:	
  3737                           
  3738                           ;main.c: 209: };main.c: 216: if (STATE_DONE == ir_code.state){
  3739  028F  3002               	movlw	2
  3740  0290  0672               	xorwf	_ir_code+1,w
  3741  0291  1D03               	btfss	3,2
  3742  0292  2A6A               	goto	l2243
  3743                           
  3744                           ;main.c: 218: printf("\r\ncode:         0x%08lx\r\n", (unsigned long)ir_code.code);
  3745  0293  3064               	movlw	low (STR_3| (0+32768))
  3746  0294  0020               	movlb	0	; select bank0
  3747  0295  00B5               	movwf	printf@f
  3748  0296  3086               	movlw	high (STR_3| (0+32768))
  3749  0297  00B6               	movwf	printf@f+1
  3750  0298  3002               	movlw	2
  3751  0299  3E71               	addlw	(low (_ir_code| 0))& (0+255)
  3752  029A  0086               	movwf	6
  3753  029B  0187               	clrf	7
  3754  029C  3F40               	moviw [0]fsr1
  3755  029D  00B7               	movwf	?_printf+2
  3756  029E  3F41               	moviw [1]fsr1
  3757  029F  00B8               	movwf	?_printf+3
  3758  02A0  3F42               	moviw [2]fsr1
  3759  02A1  00B9               	movwf	?_printf+4
  3760  02A2  3F43               	moviw [3]fsr1
  3761  02A3  00BA               	movwf	?_printf+5
  3762  02A4  3180  202D  3182   	fcall	_printf
  3763                           
  3764                           ;main.c: 219: printf("command:          0x%02x\r\n", ir_code.command);
  3765  02A7  30DD               	movlw	low (STR_4| (0+32768))
  3766  02A8  0020               	movlb	0	; select bank0
  3767  02A9  00B5               	movwf	printf@f
  3768  02AA  3085               	movlw	high (STR_4| (0+32768))
  3769  02AB  00B6               	movwf	printf@f+1
  3770  02AC  0874               	movf	_ir_code+3,w
  3771  02AD  00D0               	movwf	??_main
  3772  02AE  01D1               	clrf	??_main+1
  3773  02AF  0850               	movf	??_main,w
  3774  02B0  00B7               	movwf	?_printf+2
  3775  02B1  0851               	movf	??_main+1,w
  3776  02B2  00B8               	movwf	?_printf+3
  3777  02B3  3180  202D  3182   	fcall	_printf
  3778                           
  3779                           ;main.c: 220: printf("command_b:        0x%02x\r\n", ir_code.command_b);
  3780  02B6  3013               	movlw	low (STR_5| (0+32768))
  3781  02B7  0020               	movlb	0	; select bank0
  3782  02B8  00B5               	movwf	printf@f
  3783  02B9  3086               	movlw	high (STR_5| (0+32768))
  3784  02BA  00B6               	movwf	printf@f+1
  3785  02BB  0873               	movf	_ir_code+2,w
  3786  02BC  00D0               	movwf	??_main
  3787  02BD  01D1               	clrf	??_main+1
  3788  02BE  0850               	movf	??_main,w
  3789  02BF  00B7               	movwf	?_printf+2
  3790  02C0  0851               	movf	??_main+1,w
  3791  02C1  00B8               	movwf	?_printf+3
  3792  02C2  3180  202D  3182   	fcall	_printf
  3793                           
  3794                           ;main.c: 221: printf("address:          0x%02x\r\n", ir_code.address);
  3795  02C5  30F8               	movlw	low (STR_6| (0+32768))
  3796  02C6  0020               	movlb	0	; select bank0
  3797  02C7  00B5               	movwf	printf@f
  3798  02C8  3085               	movlw	high (STR_6| (0+32768))
  3799  02C9  00B6               	movwf	printf@f+1
  3800  02CA  0876               	movf	_ir_code+5,w
  3801  02CB  00D0               	movwf	??_main
  3802  02CC  01D1               	clrf	??_main+1
  3803  02CD  0850               	movf	??_main,w
  3804  02CE  00B7               	movwf	?_printf+2
  3805  02CF  0851               	movf	??_main+1,w
  3806  02D0  00B8               	movwf	?_printf+3
  3807  02D1  3180  202D  3182   	fcall	_printf
  3808                           
  3809                           ;main.c: 222: printf("address_b:        0x%02x\r\n", ir_code.address_b);
  3810  02D4  302E               	movlw	low (STR_7| (0+32768))
  3811  02D5  0020               	movlb	0	; select bank0
  3812  02D6  00B5               	movwf	printf@f
  3813  02D7  3086               	movlw	high (STR_7| (0+32768))
  3814  02D8  00B6               	movwf	printf@f+1
  3815  02D9  0875               	movf	_ir_code+4,w
  3816  02DA  00D0               	movwf	??_main
  3817  02DB  01D1               	clrf	??_main+1
  3818  02DC  0850               	movf	??_main,w
  3819  02DD  00B7               	movwf	?_printf+2
  3820  02DE  0851               	movf	??_main+1,w
  3821  02DF  00B8               	movwf	?_printf+3
  3822  02E0  3180  202D  3182   	fcall	_printf
  3823                           
  3824                           ;main.c: 223: printf("extended address: 0x%04x\r\n", (unsigned int)ir_code.extended_addr
      +                          ess);
  3825  02E3  3049               	movlw	low (STR_8| (0+32768))
  3826  02E4  0020               	movlb	0	; select bank0
  3827  02E5  00B5               	movwf	printf@f
  3828  02E6  3086               	movlw	high (STR_8| (0+32768))
  3829  02E7  00B6               	movwf	printf@f+1
  3830  02E8  0876               	movf	_ir_code+5,w
  3831  02E9  00B8               	movwf	?_printf+3
  3832  02EA  0875               	movf	_ir_code+4,w
  3833  02EB  00B7               	movwf	?_printf+2
  3834  02EC  3180  202D  3182   	fcall	_printf
  3835                           
  3836                           ;main.c: 234: process_remote_command(&ir_code);
  3837  02EF  3071               	movlw	(low (_ir_code| 0))& (0+255)
  3838  02F0  3183  2377  3182   	fcall	_process_remote_command
  3839                           
  3840                           ;main.c: 237: ir_code.state = STATE_RESET;
  3841  02F3  01F2               	clrf	_ir_code+1
  3842  02F4  2A6A               	goto	l2243
  3843  02F5                     __end_of_main:	
  3844                           ;main.c: 238: };main.c: 239: };main.c: 241: return;
  3845                           
  3846                           
  3847                           	psect	text1
  3848  0377                     __ptext1:	
  3849 ;; *************** function _process_remote_command *****************
  3850 ;; Defined at:
  3851 ;;		line 140 in file "main.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  code            1    wreg     PTR struct .
  3854 ;;		 -> ir_code(6), 
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;  code            1   47[BANK0 ] PTR struct .
  3857 ;;		 -> ir_code(6), 
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      void 
  3860 ;; Registers used:
  3861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3867 ;;      Params:         0       0       0       0       0       0       0       0
  3868 ;;      Locals:         0       1       0       0       0       0       0       0
  3869 ;;      Temps:          0       2       0       0       0       0       0       0
  3870 ;;      Totals:         0       3       0       0       0       0       0       0
  3871 ;;Total ram usage:        3 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; Hardware stack levels required when called:    7
  3874 ;; This function calls:
  3875 ;;		_battery_voltage
  3876 ;;		_printf
  3877 ;;		_setLEDColor
  3878 ;; This function is called by:
  3879 ;;		_main
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           
  3884                           ;psect for function _process_remote_command
  3885  0377                     _process_remote_command:	
  3886                           
  3887                           ;incstack = 0
  3888                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3889                           ;process_remote_command@code stored from wreg
  3890  0377  0020               	movlb	0	; select bank0
  3891  0378  00CF               	movwf	process_remote_command@code
  3892                           
  3893                           ;main.c: 141: switch(code->command){
  3894  0379  2BA2               	goto	l2233
  3895  037A                     l2217:	
  3896                           ;main.c: 142: case 0xa0:
  3897                           
  3898                           
  3899                           ;main.c: 143: LED_red += 10;
  3900  037A  300A               	movlw	10
  3901  037B  00CD               	movwf	??_process_remote_command
  3902  037C  084D               	movf	??_process_remote_command,w
  3903  037D  07DC               	addwf	_LED_red,f
  3904                           
  3905                           ;main.c: 144: break;
  3906  037E  2BD0               	goto	l2235
  3907  037F                     l2219:	
  3908                           ;main.c: 145: case 0xb0:
  3909                           
  3910                           
  3911                           ;main.c: 146: LED_red -= 10;
  3912  037F  300A               	movlw	10
  3913  0380  02DC               	subwf	_LED_red,f
  3914                           
  3915                           ;main.c: 147: break;
  3916  0381  2BD0               	goto	l2235
  3917  0382                     l2221:	
  3918                           ;main.c: 148: case 0x50:
  3919                           
  3920                           
  3921                           ;main.c: 149: LED_green += 10;
  3922  0382  300A               	movlw	10
  3923  0383  00CD               	movwf	??_process_remote_command
  3924  0384  084D               	movf	??_process_remote_command,w
  3925  0385  07DB               	addwf	_LED_green,f
  3926                           
  3927                           ;main.c: 150: break;
  3928  0386  2BD0               	goto	l2235
  3929  0387                     l2223:	
  3930                           ;main.c: 151: case 0x10:
  3931                           
  3932                           
  3933                           ;main.c: 152: LED_green -= 10;
  3934  0387  300A               	movlw	10
  3935  0388  02DB               	subwf	_LED_green,f
  3936                           
  3937                           ;main.c: 153: break;
  3938  0389  2BD0               	goto	l2235
  3939  038A                     l2225:	
  3940                           ;main.c: 154: case 0x08:
  3941                           
  3942                           
  3943                           ;main.c: 155: LED_blue += 10;
  3944  038A  300A               	movlw	10
  3945  038B  00CD               	movwf	??_process_remote_command
  3946  038C  084D               	movf	??_process_remote_command,w
  3947  038D  07DA               	addwf	_LED_blue,f
  3948                           
  3949                           ;main.c: 156: break;
  3950  038E  2BD0               	goto	l2235
  3951  038F                     l2227:	
  3952                           ;main.c: 157: case 0x88:
  3953                           
  3954                           
  3955                           ;main.c: 158: LED_blue -= 10;
  3956  038F  300A               	movlw	10
  3957  0390  02DA               	subwf	_LED_blue,f
  3958                           
  3959                           ;main.c: 159: break;
  3960  0391  2BD0               	goto	l2235
  3961  0392                     l2229:	
  3962                           ;main.c: 160: case 0x48:
  3963                           
  3964                           
  3965                           ;main.c: 161: printf("%d\n", (int)battery_voltage());
  3966  0392  300C               	movlw	low (STR_1| (0+32768))
  3967  0393  00B5               	movwf	printf@f
  3968  0394  3087               	movlw	high (STR_1| (0+32768))
  3969  0395  00B6               	movwf	printf@f+1
  3970  0396  3185  2509  3183   	fcall	_battery_voltage
  3971  0399  0020               	movlb	0	; select bank0
  3972  039A  082F               	movf	?_battery_voltage+1,w
  3973  039B  00B8               	movwf	?_printf+3
  3974  039C  082E               	movf	?_battery_voltage,w
  3975  039D  00B7               	movwf	?_printf+2
  3976  039E  3180  202D  3183   	fcall	_printf
  3977                           
  3978                           ;main.c: 177: }
  3979                           
  3980                           ;main.c: 176: break;
  3981                           
  3982                           ;main.c: 175: default:
  3983                           
  3984                           ;main.c: 174: break;
  3985                           
  3986                           ;main.c: 173: case 0x58:
  3987                           
  3988                           ;main.c: 172: break;
  3989                           
  3990                           ;main.c: 171: case 0x98:
  3991                           
  3992                           ;main.c: 170: break;
  3993                           
  3994                           ;main.c: 169: case 0x18:
  3995                           
  3996                           ;main.c: 168: break;
  3997                           
  3998                           ;main.c: 167: case 0x68:
  3999                           
  4000                           ;main.c: 166: break;
  4001                           
  4002                           ;main.c: 165: case 0xa8:
  4003                           
  4004                           ;main.c: 164: break;
  4005                           
  4006                           ;main.c: 163: case 0x28:
  4007                           
  4008                           ;main.c: 162: break;
  4009  03A1  2BD0               	goto	l2235
  4010  03A2                     l2233:	
  4011  03A2  0020               	movlb	0	; select bank0
  4012  03A3  084F               	movf	process_remote_command@code,w
  4013  03A4  3E03               	addlw	3
  4014  03A5  0086               	movwf	6
  4015  03A6  0187               	clrf	7
  4016  03A7  0801               	movf	1,w
  4017                           
  4018                           ; Switch size 1, requested type "space"
  4019                           ; Number of cases is 13, Range of values is 8 to 176
  4020                           ; switch strategies available:
  4021                           ; Name         Instructions Cycles
  4022                           ; simple_byte           40    21 (average)
  4023                           ; jumptable            263     9 (fixed)
  4024                           ;	Chosen strategy is simple_byte
  4025  03A8  3A08               	xorlw	8	; case 8
  4026  03A9  1903               	skipnz
  4027  03AA  2B8A               	goto	l2225
  4028  03AB  3A18               	xorlw	24	; case 16
  4029  03AC  1903               	skipnz
  4030  03AD  2B87               	goto	l2223
  4031  03AE  3A08               	xorlw	8	; case 24
  4032  03AF  1903               	skipnz
  4033  03B0  2BD0               	goto	l2235
  4034  03B1  3A30               	xorlw	48	; case 40
  4035  03B2  1903               	skipnz
  4036  03B3  2BD0               	goto	l2235
  4037  03B4  3A60               	xorlw	96	; case 72
  4038  03B5  1903               	skipnz
  4039  03B6  2B92               	goto	l2229
  4040  03B7  3A18               	xorlw	24	; case 80
  4041  03B8  1903               	skipnz
  4042  03B9  2B82               	goto	l2221
  4043  03BA  3A08               	xorlw	8	; case 88
  4044  03BB  1903               	skipnz
  4045  03BC  2BD0               	goto	l2235
  4046  03BD  3A30               	xorlw	48	; case 104
  4047  03BE  1903               	skipnz
  4048  03BF  2BD0               	goto	l2235
  4049  03C0  3AE0               	xorlw	224	; case 136
  4050  03C1  1903               	skipnz
  4051  03C2  2B8F               	goto	l2227
  4052  03C3  3A10               	xorlw	16	; case 152
  4053  03C4  1903               	skipnz
  4054  03C5  2BD0               	goto	l2235
  4055  03C6  3A38               	xorlw	56	; case 160
  4056  03C7  1903               	skipnz
  4057  03C8  2B7A               	goto	l2217
  4058  03C9  3A08               	xorlw	8	; case 168
  4059  03CA  1903               	skipnz
  4060  03CB  2BD0               	goto	l2235
  4061  03CC  3A18               	xorlw	24	; case 176
  4062  03CD  1903               	skipnz
  4063  03CE  2B7F               	goto	l2219
  4064  03CF  2BD0               	goto	l2235
  4065  03D0                     l2235:	
  4066                           
  4067                           ;main.c: 178: setLEDColor(LED_red, LED_green, LED_blue);
  4068  03D0  0020               	movlb	0	; select bank0
  4069  03D1  085B               	movf	_LED_green,w
  4070  03D2  00CD               	movwf	??_process_remote_command
  4071  03D3  084D               	movf	??_process_remote_command,w
  4072  03D4  00A0               	movwf	setLEDColor@green
  4073  03D5  085A               	movf	_LED_blue,w
  4074  03D6  00CE               	movwf	??_process_remote_command+1
  4075  03D7  084E               	movf	??_process_remote_command+1,w
  4076  03D8  00A1               	movwf	setLEDColor@blue
  4077  03D9  085C               	movf	_LED_red,w
  4078  03DA  3186  269D         	fcall	_setLEDColor
  4079  03DC  0008               	return
  4080  03DD                     __end_of_process_remote_command:	
  4081                           
  4082                           	psect	text2
  4083  069D                     __ptext2:	
  4084 ;; *************** function _setLEDColor *****************
  4085 ;; Defined at:
  4086 ;;		line 122 in file "main.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;  red             1    wreg     unsigned char 
  4089 ;;  green           1    0[BANK0 ] unsigned char 
  4090 ;;  blue            1    1[BANK0 ] unsigned char 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  red             1    2[COMMON] unsigned char 
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4102 ;;      Params:         0       2       0       0       0       0       0       0
  4103 ;;      Locals:         1       0       0       0       0       0       0       0
  4104 ;;      Temps:          0       0       0       0       0       0       0       0
  4105 ;;      Totals:         1       2       0       0       0       0       0       0
  4106 ;;Total ram usage:        3 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    4
  4109 ;; This function calls:
  4110 ;;		Nothing
  4111 ;; This function is called by:
  4112 ;;		_process_remote_command
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           
  4117                           ;psect for function _setLEDColor
  4118  069D                     _setLEDColor:	
  4119                           
  4120                           ;incstack = 0
  4121                           ; Regs used in _setLEDColor: [wreg]
  4122                           ;setLEDColor@red stored from wreg
  4123  069D  00F9               	movwf	setLEDColor@red
  4124                           
  4125                           ;main.c: 128: CCPR1L = red;
  4126  069E  0879               	movf	setLEDColor@red,w
  4127  069F  0025               	movlb	5	; select bank5
  4128  06A0  0091               	movwf	17	;volatile
  4129                           
  4130                           ;main.c: 130: PWM3DCH = green;
  4131  06A1  0020               	movlb	0	; select bank0
  4132  06A2  0820               	movf	setLEDColor@green,w
  4133  06A3  002C               	movlb	12	; select bank12
  4134  06A4  0098               	movwf	24	;volatile
  4135                           
  4136                           ;main.c: 132: PWM4DCH = blue;
  4137  06A5  0020               	movlb	0	; select bank0
  4138  06A6  0821               	movf	setLEDColor@blue,w
  4139  06A7  002C               	movlb	12	; select bank12
  4140  06A8  009B               	movwf	27	;volatile
  4141  06A9  0008               	return
  4142  06AA                     __end_of_setLEDColor:	
  4143                           
  4144                           	psect	text3
  4145  002D                     __ptext3:	
  4146 ;; *************** function _printf *****************
  4147 ;; Defined at:
  4148 ;;		line 472 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/doprnt.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  4151 ;;		 -> STR_8(27), STR_7(27), STR_6(27), STR_5(27), 
  4152 ;;		 -> STR_4(27), STR_3(26), STR_2(4), STR_1(4), 
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;  idx             1   33[BANK0 ] unsigned char 
  4155 ;;  val             4   37[BANK0 ] unsigned long 
  4156 ;;  tmpval          4    0        struct .
  4157 ;;  width           2   41[BANK0 ] int 
  4158 ;;  prec            2   34[BANK0 ] int 
  4159 ;;  cp              2    0        PTR const unsigned char 
  4160 ;;  len             2    0        unsigned int 
  4161 ;;  c               1   44[BANK0 ] unsigned char 
  4162 ;;  flag            1   43[BANK0 ] unsigned char 
  4163 ;;  ap              1   36[BANK0 ] PTR void [1]
  4164 ;;		 -> ?_printf(2), 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  2   21[BANK0 ] int 
  4167 ;; Registers used:
  4168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4174 ;;      Params:         0       6       0       0       0       0       0       0
  4175 ;;      Locals:         0      12       0       0       0       0       0       0
  4176 ;;      Temps:          0       6       0       0       0       0       0       0
  4177 ;;      Totals:         0      24       0       0       0       0       0       0
  4178 ;;Total ram usage:       24 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    6
  4181 ;; This function calls:
  4182 ;;		___lldiv
  4183 ;;		___llmod
  4184 ;;		___wmul
  4185 ;;		_isdigit
  4186 ;;		_putch
  4187 ;; This function is called by:
  4188 ;;		_process_remote_command
  4189 ;;		_main
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _printf
  4195  002D                     _printf:	
  4196                           
  4197                           ;doprnt.c: 474: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4201  002D  3037               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4202  002E  0020               	movlb	0	; select bank0
  4203  002F  00BB               	movwf	??_printf
  4204  0030  083B               	movf	??_printf,w
  4205  0031  00C4               	movwf	printf@ap
  4206  0032                     l2213:	
  4207                           ;doprnt.c: 548: while((c = *f++)) {
  4208                           
  4209  0032  0020               	movlb	0	; select bank0
  4210  0033  0836               	movf	printf@f+1,w
  4211  0034  00BC               	movwf	??_printf+1
  4212  0035  0835               	movf	printf@f,w
  4213  0036  00BB               	movwf	??_printf
  4214  0037  0AB5               	incf	printf@f,f
  4215  0038  1903               	skipnz
  4216  0039  0AB6               	incf	printf@f+1,f
  4217  003A  083B               	movf	??_printf,w
  4218  003B  0084               	movwf	4
  4219  003C  083C               	movf	??_printf+1,w
  4220  003D  0085               	movwf	5
  4221  003E  0800               	movf	0,w	;code access
  4222  003F  00BD               	movwf	??_printf+2
  4223  0040  083D               	movf	??_printf+2,w
  4224  0041  00CC               	movwf	printf@c
  4225  0042  084C               	movf	printf@c,w
  4226  0043  1903               	btfsc	3,2
  4227  0044  0008               	return
  4228                           
  4229                           ;doprnt.c: 550: if(c != '%')
  4230  0045  3025               	movlw	37
  4231  0046  064C               	xorwf	printf@c,w
  4232  0047  1903               	btfsc	3,2
  4233  0048  284E               	goto	l2093
  4234                           
  4235                           ;doprnt.c: 552: {;doprnt.c: 553: (putch(c) );
  4236  0049  084C               	movf	printf@c,w
  4237  004A  3187  2707  3180   	fcall	_putch
  4238                           
  4239                           ;doprnt.c: 554: continue;
  4240  004D  2832               	goto	l2213
  4241  004E                     l2093:	
  4242                           
  4243                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  4244  004E  0020               	movlb	0	; select bank0
  4245  004F  01C9               	clrf	printf@width
  4246  0050  01CA               	clrf	printf@width+1
  4247                           
  4248                           ;doprnt.c: 560: flag = 0;
  4249  0051  01CB               	clrf	printf@flag
  4250                           
  4251                           ;doprnt.c: 563: switch(*f) {
  4252                           
  4253                           ;doprnt.c: 562: for(;;) {
  4254  0052  2858               	goto	l2099
  4255  0053                     l473:	
  4256                           ;doprnt.c: 591: case '0':
  4257                           
  4258                           
  4259                           ;doprnt.c: 592: flag |= 0x04;
  4260  0053  154B               	bsf	printf@flag,2
  4261                           
  4262                           ;doprnt.c: 593: f++;
  4263  0054  3001               	movlw	1
  4264  0055  07B5               	addwf	printf@f,f
  4265  0056  3000               	movlw	0
  4266  0057  3DB6               	addwfc	printf@f+1,f
  4267  0058                     l2099:	
  4268                           ;doprnt.c: 596: }
  4269                           
  4270                           ;doprnt.c: 594: continue;
  4271                           
  4272  0058  0835               	movf	printf@f,w
  4273  0059  0084               	movwf	4
  4274  005A  0836               	movf	printf@f+1,w
  4275  005B  0085               	movwf	5
  4276  005C  0800               	movf	0,w	;code access
  4277                           
  4278                           ; Switch size 1, requested type "space"
  4279                           ; Number of cases is 1, Range of values is 48 to 48
  4280                           ; switch strategies available:
  4281                           ; Name         Instructions Cycles
  4282                           ; simple_byte            4     3 (average)
  4283                           ; direct_byte           11     9 (fixed)
  4284                           ; jumptable            263     9 (fixed)
  4285                           ;	Chosen strategy is simple_byte
  4286  005D  3A30               	xorlw	48	; case 48
  4287  005E  1903               	skipnz
  4288  005F  2853               	goto	l473
  4289  0060  2861               	goto	l2101
  4290  0061                     l2101:	
  4291                           ;doprnt.c: 598: }
  4292                           
  4293                           ;doprnt.c: 597: break;
  4294                           
  4295                           
  4296                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  4297  0061  0835               	movf	printf@f,w
  4298  0062  0084               	movwf	4
  4299  0063  0836               	movf	printf@f+1,w
  4300  0064  0085               	movwf	5
  4301  0065  0800               	movf	0,w	;code access
  4302  0066  3186  268F  3180   	fcall	_isdigit
  4303  0069  1C03               	btfss	3,0
  4304  006A  28A1               	goto	l2115
  4305                           
  4306                           ;doprnt.c: 610: width = 0;
  4307  006B  0020               	movlb	0	; select bank0
  4308  006C  01C9               	clrf	printf@width
  4309  006D  01CA               	clrf	printf@width+1
  4310  006E                     l2105:	
  4311                           ;doprnt.c: 611: do {
  4312                           
  4313                           
  4314                           ;doprnt.c: 612: width *= 10;
  4315  006E  300A               	movlw	10
  4316  006F  0020               	movlb	0	; select bank0
  4317  0070  00A0               	movwf	___wmul@multiplier
  4318  0071  3000               	movlw	0
  4319  0072  00A1               	movwf	___wmul@multiplier+1
  4320  0073  084A               	movf	printf@width+1,w
  4321  0074  00A3               	movwf	___wmul@multiplicand+1
  4322  0075  0849               	movf	printf@width,w
  4323  0076  00A2               	movwf	___wmul@multiplicand
  4324  0077  3185  25C1  3180   	fcall	___wmul
  4325  007A  0020               	movlb	0	; select bank0
  4326  007B  0821               	movf	?___wmul+1,w
  4327  007C  00CA               	movwf	printf@width+1
  4328  007D  0820               	movf	?___wmul,w
  4329  007E  00C9               	movwf	printf@width
  4330                           
  4331                           ;doprnt.c: 613: width += *f++ - '0';
  4332  007F  0835               	movf	printf@f,w
  4333  0080  0084               	movwf	4
  4334  0081  0836               	movf	printf@f+1,w
  4335  0082  0085               	movwf	5
  4336  0083  0800               	movf	0,w	;code access
  4337  0084  3ED0               	addlw	208
  4338  0085  00BB               	movwf	??_printf
  4339  0086  30FF               	movlw	255
  4340  0087  1803               	skipnc
  4341  0088  3000               	movlw	0
  4342  0089  00BC               	movwf	??_printf+1
  4343  008A  083B               	movf	??_printf,w
  4344  008B  07C9               	addwf	printf@width,f
  4345  008C  083C               	movf	??_printf+1,w
  4346  008D  3DCA               	addwfc	printf@width+1,f
  4347  008E  3001               	movlw	1
  4348  008F  07B5               	addwf	printf@f,f
  4349  0090  3000               	movlw	0
  4350  0091  3DB6               	addwfc	printf@f+1,f
  4351                           
  4352                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  4353  0092  0835               	movf	printf@f,w
  4354  0093  0084               	movwf	4
  4355  0094  0836               	movf	printf@f+1,w
  4356  0095  0085               	movwf	5
  4357  0096  0800               	movf	0,w	;code access
  4358  0097  3186  268F  3180   	fcall	_isdigit
  4359  009A  1C03               	btfss	3,0
  4360  009B  28A1               	goto	l2115
  4361  009C  286E               	goto	l2105
  4362  009D                     l484:	
  4363                           ;doprnt.c: 660: case 'l':
  4364                           
  4365                           ;doprnt.c: 657: goto alldone;
  4366                           
  4367                           ;doprnt.c: 656: case 0:
  4368                           
  4369                           ;doprnt.c: 654: switch(c = *f++) {
  4370                           
  4371                           ;doprnt.c: 620: };doprnt.c: 652: loop:
  4372                           
  4373                           
  4374                           ;doprnt.c: 662: flag |= 0x10;
  4375  009D  164B               	bsf	printf@flag,4
  4376                           
  4377                           ;doprnt.c: 663: goto loop;
  4378  009E  28A1               	goto	l2115
  4379  009F                     l488:	
  4380                           ;doprnt.c: 737: case 'x':
  4381                           
  4382                           ;doprnt.c: 717: case 'i':;doprnt.c: 718: break;
  4383                           
  4384                           ;doprnt.c: 716: case 'd':
  4385                           
  4386                           
  4387                           ;doprnt.c: 740: flag |= 0x80;
  4388  009F  17CB               	bsf	printf@flag,7
  4389                           
  4390                           ;doprnt.c: 742: break;
  4391  00A0  28BF               	goto	l487
  4392  00A1                     l2115:	
  4393                           ;doprnt.c: 841: }
  4394                           
  4395                           ;doprnt.c: 832: continue;
  4396                           
  4397                           ;doprnt.c: 821: default:
  4398                           
  4399  00A1  0020               	movlb	0	; select bank0
  4400  00A2  0836               	movf	printf@f+1,w
  4401  00A3  00BC               	movwf	??_printf+1
  4402  00A4  0835               	movf	printf@f,w
  4403  00A5  00BB               	movwf	??_printf
  4404  00A6  0AB5               	incf	printf@f,f
  4405  00A7  1903               	skipnz
  4406  00A8  0AB6               	incf	printf@f+1,f
  4407  00A9  083B               	movf	??_printf,w
  4408  00AA  0084               	movwf	4
  4409  00AB  083C               	movf	??_printf+1,w
  4410  00AC  0085               	movwf	5
  4411  00AD  0800               	movf	0,w	;code access
  4412  00AE  00CC               	movwf	printf@c
  4413                           
  4414                           ; Switch size 1, requested type "space"
  4415                           ; Number of cases is 5, Range of values is 0 to 120
  4416                           ; switch strategies available:
  4417                           ; Name         Instructions Cycles
  4418                           ; simple_byte           16     9 (average)
  4419                           ; direct_byte          248     6 (fixed)
  4420                           ; jumptable            260     6 (fixed)
  4421                           ;	Chosen strategy is simple_byte
  4422  00AF  3A00               	xorlw	0	; case 0
  4423  00B0  1903               	skipnz
  4424  00B1  2A5B               	goto	l528
  4425  00B2  3A64               	xorlw	100	; case 100
  4426  00B3  1903               	skipnz
  4427  00B4  28BF               	goto	l487
  4428  00B5  3A0D               	xorlw	13	; case 105
  4429  00B6  1903               	skipnz
  4430  00B7  28BF               	goto	l487
  4431  00B8  3A05               	xorlw	5	; case 108
  4432  00B9  1903               	skipnz
  4433  00BA  289D               	goto	l484
  4434  00BB  3A14               	xorlw	20	; case 120
  4435  00BC  1903               	skipnz
  4436  00BD  289F               	goto	l488
  4437  00BE  2832               	goto	l2213
  4438  00BF                     l487:	
  4439                           
  4440                           ;doprnt.c: 1270: if((flag & 0x80) == 0x00)
  4441  00BF  1BCB               	btfsc	printf@flag,7
  4442  00C0  28F6               	goto	l490
  4443                           
  4444                           ;doprnt.c: 1272: {;doprnt.c: 1274: if(flag & 0x10)
  4445  00C1  1E4B               	btfss	printf@flag,4
  4446  00C2  28D0               	goto	l2123
  4447                           
  4448                           ;doprnt.c: 1275: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4449  00C3  0844               	movf	printf@ap,w
  4450  00C4  0086               	movwf	6
  4451  00C5  0187               	clrf	7
  4452  00C6  3F40               	moviw [0]fsr1
  4453  00C7  00C5               	movwf	printf@val
  4454  00C8  3F41               	moviw [1]fsr1
  4455  00C9  00C6               	movwf	printf@val+1
  4456  00CA  3F42               	moviw [2]fsr1
  4457  00CB  00C7               	movwf	printf@val+2
  4458  00CC  3F43               	moviw [3]fsr1
  4459  00CD  00C8               	movwf	printf@val+3
  4460  00CE  3004               	movlw	4
  4461  00CF  28E1               	goto	L2
  4462  00D0                     l2123:	
  4463                           
  4464                           ;doprnt.c: 1276: else;doprnt.c: 1278: val = (long)(*(int *)__va_arg((*(int **)ap), (int)
      +                          0));
  4465  00D0  0844               	movf	printf@ap,w
  4466  00D1  0086               	movwf	6
  4467  00D2  0187               	clrf	7
  4468  00D3  3F40               	moviw [0]fsr1
  4469  00D4  00BB               	movwf	??_printf
  4470  00D5  3F41               	moviw [1]fsr1
  4471  00D6  00BC               	movwf	??_printf+1
  4472  00D7  083B               	movf	??_printf,w
  4473  00D8  00C5               	movwf	printf@val
  4474  00D9  083C               	movf	??_printf+1,w
  4475  00DA  00C6               	movwf	printf@val+1
  4476  00DB  0D89               	rlf	9,f
  4477  00DC  3B89               	subwfb	9,f
  4478  00DD  0989               	comf	9,f
  4479  00DE  00C7               	movwf	printf@val+2
  4480  00DF  00C8               	movwf	printf@val+3
  4481  00E0  3002               	movlw	2
  4482  00E1                     L2:	
  4483  00E1  00BB               	movwf	??_printf
  4484  00E2  083B               	movf	??_printf,w
  4485  00E3  07C4               	addwf	printf@ap,f
  4486                           
  4487                           ;doprnt.c: 1280: if((long)val < 0) {
  4488  00E4  1FC8               	btfss	printf@val+3,7
  4489  00E5  2977               	goto	l2163
  4490                           
  4491                           ;doprnt.c: 1281: flag |= 0x03;
  4492  00E6  3003               	movlw	3
  4493  00E7  00BB               	movwf	??_printf
  4494  00E8  083B               	movf	??_printf,w
  4495  00E9  04CB               	iorwf	printf@flag,f
  4496                           
  4497                           ;doprnt.c: 1282: val = -val;
  4498  00EA  09C5               	comf	printf@val,f
  4499  00EB  09C6               	comf	printf@val+1,f
  4500  00EC  09C7               	comf	printf@val+2,f
  4501  00ED  09C8               	comf	printf@val+3,f
  4502  00EE  0AC5               	incf	printf@val,f
  4503  00EF  1903               	skipnz
  4504  00F0  0AC6               	incf	printf@val+1,f
  4505  00F1  1903               	skipnz
  4506  00F2  0AC7               	incf	printf@val+2,f
  4507  00F3  1903               	skipnz
  4508  00F4  0AC8               	incf	printf@val+3,f
  4509                           
  4510                           ;doprnt.c: 1283: };doprnt.c: 1285: }
  4511  00F5  2977               	goto	l2163
  4512  00F6                     l490:	
  4513                           
  4514                           ;doprnt.c: 1287: else;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  4515  00F6  1E4B               	btfss	printf@flag,4
  4516  00F7  2905               	goto	l2137
  4517                           
  4518                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4519  00F8  0844               	movf	printf@ap,w
  4520  00F9  0086               	movwf	6
  4521  00FA  0187               	clrf	7
  4522  00FB  3F40               	moviw [0]fsr1
  4523  00FC  00C5               	movwf	printf@val
  4524  00FD  3F41               	moviw [1]fsr1
  4525  00FE  00C6               	movwf	printf@val+1
  4526  00FF  3F42               	moviw [2]fsr1
  4527  0100  00C7               	movwf	printf@val+2
  4528  0101  3F43               	moviw [3]fsr1
  4529  0102  00C8               	movwf	printf@val+3
  4530  0103  3004               	movlw	4
  4531  0104  2913               	goto	L3
  4532  0105                     l2137:	
  4533                           
  4534                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  4535  0105  0844               	movf	printf@ap,w
  4536  0106  0086               	movwf	6
  4537  0107  0187               	clrf	7
  4538  0108  3F40               	moviw [0]fsr1
  4539  0109  00BB               	movwf	??_printf
  4540  010A  3F41               	moviw [1]fsr1
  4541  010B  00BC               	movwf	??_printf+1
  4542  010C  083B               	movf	??_printf,w
  4543  010D  00C5               	movwf	printf@val
  4544  010E  083C               	movf	??_printf+1,w
  4545  010F  00C6               	movwf	printf@val+1
  4546  0110  01C7               	clrf	printf@val+2
  4547  0111  01C8               	clrf	printf@val+3
  4548  0112  3002               	movlw	2
  4549  0113                     L3:	
  4550  0113  00BB               	movwf	??_printf
  4551  0114  083B               	movf	??_printf,w
  4552  0115  07C4               	addwf	printf@ap,f
  4553                           
  4554                           ;doprnt.c: 1306: };doprnt.c: 1313: switch((unsigned char)(flag & 0x80)) {
  4555  0116  2977               	goto	l2163
  4556  0117                     l498:	
  4557                           ;doprnt.c: 1318: case 0x00:
  4558                           
  4559                           
  4560                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4561  0117  01CC               	clrf	printf@c
  4562  0118  0ACC               	incf	printf@c,f
  4563  0119                     L5:	
  4564  0119  300A               	movlw	10
  4565  011A  064C               	xorwf	printf@c,w
  4566  011B  1903               	btfsc	3,2
  4567  011C  2980               	goto	l2165
  4568                           
  4569                           ;doprnt.c: 1325: if(val < dpowers[c])
  4570  011D  084C               	movf	printf@c,w
  4571  011E  00BB               	movwf	??_printf
  4572  011F  01BC               	clrf	??_printf+1
  4573  0120  35BB               	lslf	??_printf,f
  4574  0121  0DBC               	rlf	??_printf+1,f
  4575  0122  35BB               	lslf	??_printf,f
  4576  0123  0DBC               	rlf	??_printf+1,f
  4577  0124  3037               	movlw	low (_dpowers| (0+32768))
  4578  0125  073B               	addwf	??_printf,w
  4579  0126  0084               	movwf	4
  4580  0127  3085               	movlw	high (_dpowers| (0+32768))
  4581  0128  3D3C               	addwfc	??_printf+1,w
  4582  0129  0085               	movwf	5
  4583  012A  3F00               	moviw [0]fsr0
  4584  012B  00BD               	movwf	??_printf+2
  4585  012C  3F01               	moviw [1]fsr0
  4586  012D  00BE               	movwf	??_printf+3
  4587  012E  3F02               	moviw [2]fsr0
  4588  012F  00BF               	movwf	??_printf+4
  4589  0130  3F03               	moviw [3]fsr0
  4590  0131  00C0               	movwf	??_printf+5
  4591  0132  0840               	movf	??_printf+5,w
  4592  0133  0248               	subwf	printf@val+3,w
  4593  0134  1D03               	skipz
  4594  0135  2940               	goto	u1965
  4595  0136  083F               	movf	??_printf+4,w
  4596  0137  0247               	subwf	printf@val+2,w
  4597  0138  1D03               	skipz
  4598  0139  2940               	goto	u1965
  4599  013A  083E               	movf	??_printf+3,w
  4600  013B  0246               	subwf	printf@val+1,w
  4601  013C  1D03               	skipz
  4602  013D  2940               	goto	u1965
  4603  013E  083D               	movf	??_printf+2,w
  4604  013F  0245               	subwf	printf@val,w
  4605  0140                     u1965:	
  4606  0140  1C03               	btfss	3,0
  4607  0141  2980               	goto	l2165
  4608                           
  4609                           ;doprnt.c: 1326: break;
  4610  0142  3001               	movlw	1
  4611  0143  00BB               	movwf	??_printf
  4612  0144  083B               	movf	??_printf,w
  4613  0145  07CC               	addwf	printf@c,f
  4614  0146  2919               	goto	L5
  4615  0147                     l503:	
  4616                           ;doprnt.c: 1333: case 0x80:
  4617                           
  4618                           ;doprnt.c: 1328: break;
  4619                           
  4620                           
  4621                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4622  0147  01CC               	clrf	printf@c
  4623  0148  0ACC               	incf	printf@c,f
  4624  0149                     L6:	
  4625  0149  3008               	movlw	8
  4626  014A  064C               	xorwf	printf@c,w
  4627  014B  1903               	btfsc	3,2
  4628  014C  2980               	goto	l2165
  4629                           
  4630                           ;doprnt.c: 1336: if(val < hexpowers[c])
  4631  014D  084C               	movf	printf@c,w
  4632  014E  00BB               	movwf	??_printf
  4633  014F  01BC               	clrf	??_printf+1
  4634  0150  35BB               	lslf	??_printf,f
  4635  0151  0DBC               	rlf	??_printf+1,f
  4636  0152  35BB               	lslf	??_printf,f
  4637  0153  0DBC               	rlf	??_printf+1,f
  4638  0154  3083               	movlw	low (_hexpowers| (0+32768))
  4639  0155  073B               	addwf	??_printf,w
  4640  0156  0084               	movwf	4
  4641  0157  3085               	movlw	high (_hexpowers| (0+32768))
  4642  0158  3D3C               	addwfc	??_printf+1,w
  4643  0159  0085               	movwf	5
  4644  015A  3F00               	moviw [0]fsr0
  4645  015B  00BD               	movwf	??_printf+2
  4646  015C  3F01               	moviw [1]fsr0
  4647  015D  00BE               	movwf	??_printf+3
  4648  015E  3F02               	moviw [2]fsr0
  4649  015F  00BF               	movwf	??_printf+4
  4650  0160  3F03               	moviw [3]fsr0
  4651  0161  00C0               	movwf	??_printf+5
  4652  0162  0840               	movf	??_printf+5,w
  4653  0163  0248               	subwf	printf@val+3,w
  4654  0164  1D03               	skipz
  4655  0165  2970               	goto	u1995
  4656  0166  083F               	movf	??_printf+4,w
  4657  0167  0247               	subwf	printf@val+2,w
  4658  0168  1D03               	skipz
  4659  0169  2970               	goto	u1995
  4660  016A  083E               	movf	??_printf+3,w
  4661  016B  0246               	subwf	printf@val+1,w
  4662  016C  1D03               	skipz
  4663  016D  2970               	goto	u1995
  4664  016E  083D               	movf	??_printf+2,w
  4665  016F  0245               	subwf	printf@val,w
  4666  0170                     u1995:	
  4667  0170  1C03               	btfss	3,0
  4668  0171  2980               	goto	l2165
  4669                           
  4670                           ;doprnt.c: 1337: break;
  4671  0172  3001               	movlw	1
  4672  0173  00BB               	movwf	??_printf
  4673  0174  083B               	movf	??_printf,w
  4674  0175  07CC               	addwf	printf@c,f
  4675  0176  2949               	goto	L6
  4676  0177                     l2163:	
  4677                           ;doprnt.c: 1355: }
  4678                           
  4679                           ;doprnt.c: 1339: break;
  4680                           
  4681  0177  084B               	movf	printf@flag,w
  4682  0178  3980               	andlw	128
  4683                           
  4684                           ; Switch size 1, requested type "space"
  4685                           ; Number of cases is 2, Range of values is 0 to 128
  4686                           ; switch strategies available:
  4687                           ; Name         Instructions Cycles
  4688                           ; simple_byte            7     4 (average)
  4689                           ; jumptable            260     6 (fixed)
  4690                           ;	Chosen strategy is simple_byte
  4691  0179  3A00               	xorlw	0	; case 0
  4692  017A  1903               	skipnz
  4693  017B  2917               	goto	l498
  4694  017C  3A80               	xorlw	128	; case 128
  4695  017D  1903               	skipnz
  4696  017E  2947               	goto	l503
  4697  017F  2980               	goto	l2165
  4698  0180                     l2165:	
  4699                           
  4700                           ;doprnt.c: 1364: if(width && flag & 0x03)
  4701  0180  0849               	movf	printf@width,w
  4702  0181  044A               	iorwf	printf@width+1,w
  4703  0182  1903               	btfsc	3,2
  4704  0183  298C               	goto	l507
  4705  0184  084B               	movf	printf@flag,w
  4706  0185  3903               	andlw	3
  4707  0186  1903               	btfsc	3,2
  4708  0187  298C               	goto	l507
  4709                           
  4710                           ;doprnt.c: 1365: width--;
  4711  0188  30FF               	movlw	255
  4712  0189  07C9               	addwf	printf@width,f
  4713  018A  30FF               	movlw	255
  4714  018B  3DCA               	addwfc	printf@width+1,f
  4715  018C                     l507:	
  4716                           
  4717                           ;doprnt.c: 1400: if(width > c)
  4718  018C  084A               	movf	printf@width+1,w
  4719  018D  3A80               	xorlw	128
  4720  018E  3C80               	sublw	128
  4721  018F  1D03               	skipz
  4722  0190  2993               	goto	u2035
  4723  0191  0849               	movf	printf@width,w
  4724  0192  024C               	subwf	printf@c,w
  4725  0193                     u2035:	
  4726  0193  1803               	skipnc
  4727  0194  299E               	goto	l2173
  4728                           
  4729                           ;doprnt.c: 1401: width -= c;
  4730  0195  0020               	movlb	0	; select bank0
  4731  0196  084C               	movf	printf@c,w
  4732  0197  00BB               	movwf	??_printf
  4733  0198  01BC               	clrf	??_printf+1
  4734  0199  083B               	movf	??_printf,w
  4735  019A  02C9               	subwf	printf@width,f
  4736  019B  083C               	movf	??_printf+1,w
  4737  019C  3BCA               	subwfb	printf@width+1,f
  4738  019D  29A1               	goto	l2175
  4739  019E                     l2173:	
  4740                           
  4741                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  4742  019E  0020               	movlb	0	; select bank0
  4743  019F  01C9               	clrf	printf@width
  4744  01A0  01CA               	clrf	printf@width+1
  4745  01A1                     l2175:	
  4746                           
  4747                           ;doprnt.c: 1406: if(flag & 0x04) {
  4748  01A1  1D4B               	btfss	printf@flag,2
  4749  01A2  29BA               	goto	l2187
  4750                           
  4751                           ;doprnt.c: 1411: if(flag & 0x03)
  4752  01A3  084B               	movf	printf@flag,w
  4753  01A4  3903               	andlw	3
  4754  01A5  1903               	btfsc	3,2
  4755  01A6  29AB               	goto	l2181
  4756                           
  4757                           ;doprnt.c: 1412: (putch('-') );
  4758  01A7  302D               	movlw	45
  4759  01A8  3187  2707  3180   	fcall	_putch
  4760  01AB                     l2181:	
  4761                           
  4762                           ;doprnt.c: 1434: if(width)
  4763  01AB  0020               	movlb	0	; select bank0
  4764  01AC                     L7:	
  4765  01AC  0849               	movf	printf@width,w
  4766  01AD  044A               	iorwf	printf@width+1,w
  4767  01AE  1903               	btfsc	3,2
  4768  01AF  29D3               	goto	l2197
  4769                           
  4770                           ;doprnt.c: 1436: (putch('0') );
  4771                           
  4772                           ;doprnt.c: 1435: do
  4773  01B0  3030               	movlw	48
  4774  01B1  3187  2707  3180   	fcall	_putch
  4775                           
  4776                           ;doprnt.c: 1437: while(--width);
  4777  01B4  30FF               	movlw	255
  4778  01B5  0020               	movlb	0	; select bank0
  4779  01B6  07C9               	addwf	printf@width,f
  4780  01B7  30FF               	movlw	255
  4781  01B8  3DCA               	addwfc	printf@width+1,f
  4782  01B9  29AC               	goto	L7
  4783  01BA                     l2187:	
  4784                           ;doprnt.c: 1439: } else
  4785                           
  4786                           
  4787                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  4788  01BA  0849               	movf	printf@width,w
  4789  01BB  044A               	iorwf	printf@width+1,w
  4790  01BC  1903               	btfsc	3,2
  4791  01BD  29CB               	goto	l2193
  4792  01BE                     l2189:	
  4793                           ;doprnt.c: 1448: do
  4794                           
  4795                           
  4796                           ;doprnt.c: 1449: (putch(' ') );
  4797  01BE  3020               	movlw	32
  4798  01BF  3187  2707  3180   	fcall	_putch
  4799                           
  4800                           ;doprnt.c: 1450: while(--width);
  4801  01C2  30FF               	movlw	255
  4802  01C3  0020               	movlb	0	; select bank0
  4803  01C4  07C9               	addwf	printf@width,f
  4804  01C5  30FF               	movlw	255
  4805  01C6  3DCA               	addwfc	printf@width+1,f
  4806  01C7  0849               	movf	printf@width,w
  4807  01C8  044A               	iorwf	printf@width+1,w
  4808  01C9  1D03               	btfss	3,2
  4809  01CA  29BE               	goto	l2189
  4810  01CB                     l2193:	
  4811                           
  4812                           ;doprnt.c: 1457: if(flag & 0x03)
  4813  01CB  084B               	movf	printf@flag,w
  4814  01CC  3903               	andlw	3
  4815  01CD  1903               	btfsc	3,2
  4816  01CE  29D3               	goto	l2197
  4817                           
  4818                           ;doprnt.c: 1458: (putch('-') );
  4819  01CF  302D               	movlw	45
  4820  01D0  3187  2707  3180   	fcall	_putch
  4821  01D3                     l2197:	
  4822                           
  4823                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  4824  01D3  0020               	movlb	0	; select bank0
  4825  01D4  084C               	movf	printf@c,w
  4826  01D5  00BB               	movwf	??_printf
  4827  01D6  01BC               	clrf	??_printf+1
  4828  01D7  083B               	movf	??_printf,w
  4829  01D8  00C2               	movwf	printf@prec
  4830  01D9  083C               	movf	??_printf+1,w
  4831  01DA  00C3               	movwf	printf@prec+1
  4832                           
  4833                           ;doprnt.c: 1493: while(prec--) {
  4834  01DB  2A47               	goto	l2211
  4835  01DC                     l2199:	
  4836                           ;doprnt.c: 1497: {;doprnt.c: 1502: case 0x00:
  4837                           
  4838                           ;doprnt.c: 1495: switch((unsigned char)(flag & 0x80))
  4839                           
  4840                           
  4841                           ;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  4842  01DC  3000               	movlw	0
  4843  01DD  00B0               	movwf	___llmod@divisor+3
  4844  01DE  3000               	movlw	0
  4845  01DF  00AF               	movwf	___llmod@divisor+2
  4846  01E0  3000               	movlw	0
  4847  01E1  00AE               	movwf	___llmod@divisor+1
  4848  01E2  300A               	movlw	10
  4849  01E3  00AD               	movwf	___llmod@divisor
  4850  01E4  0843               	movf	printf@prec+1,w
  4851  01E5  0085               	movwf	5
  4852  01E6  0842               	movf	printf@prec,w
  4853  01E7  0084               	movwf	4
  4854  01E8  3584               	lslf	4,f
  4855  01E9  0D85               	rlf	5,f
  4856  01EA  3584               	lslf	4,f
  4857  01EB  0D85               	rlf	5,f
  4858  01EC  3037               	movlw	low (_dpowers| (0+32768))
  4859  01ED  0784               	addwf	4,f
  4860  01EE  3085               	movlw	high (_dpowers| (0+32768))
  4861  01EF  3D85               	addwfc	5,f
  4862  01F0  3F00               	moviw [0]fsr0
  4863  01F1  00A0               	movwf	___lldiv@divisor
  4864  01F2  3F01               	moviw [1]fsr0
  4865  01F3  00A1               	movwf	___lldiv@divisor+1
  4866  01F4  3F02               	moviw [2]fsr0
  4867  01F5  00A2               	movwf	___lldiv@divisor+2
  4868  01F6  3F03               	moviw [3]fsr0
  4869  01F7  00A3               	movwf	___lldiv@divisor+3
  4870  01F8  0848               	movf	printf@val+3,w
  4871  01F9  00A7               	movwf	___lldiv@dividend+3
  4872  01FA  0847               	movf	printf@val+2,w
  4873  01FB  00A6               	movwf	___lldiv@dividend+2
  4874  01FC  0846               	movf	printf@val+1,w
  4875  01FD  00A5               	movwf	___lldiv@dividend+1
  4876  01FE  0845               	movf	printf@val,w
  4877  01FF  00A4               	movwf	___lldiv@dividend
  4878  0200  3184  2443  3180   	fcall	___lldiv
  4879  0203  0020               	movlb	0	; select bank0
  4880  0204  0823               	movf	?___lldiv+3,w
  4881  0205  00B4               	movwf	___llmod@dividend+3
  4882  0206  0822               	movf	?___lldiv+2,w
  4883  0207  00B3               	movwf	___llmod@dividend+2
  4884  0208  0821               	movf	?___lldiv+1,w
  4885  0209  00B2               	movwf	___llmod@dividend+1
  4886  020A  0820               	movf	?___lldiv,w
  4887  020B  00B1               	movwf	___llmod@dividend
  4888  020C  3184  2496  3180   	fcall	___llmod
  4889  020F  0020               	movlb	0	; select bank0
  4890  0210  082D               	movf	?___llmod,w
  4891  0211  3E30               	addlw	48
  4892  0212  2A40               	goto	L4
  4893  0213                     l2201:	
  4894                           ;doprnt.c: 1516: case 0x80:
  4895                           
  4896                           ;doprnt.c: 1510: break;
  4897                           
  4898                           
  4899                           ;doprnt.c: 1518: {;doprnt.c: 1519: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4900  0213  0843               	movf	printf@prec+1,w
  4901  0214  0085               	movwf	5
  4902  0215  0842               	movf	printf@prec,w
  4903  0216  0084               	movwf	4
  4904  0217  3584               	lslf	4,f
  4905  0218  0D85               	rlf	5,f
  4906  0219  3584               	lslf	4,f
  4907  021A  0D85               	rlf	5,f
  4908  021B  3083               	movlw	low (_hexpowers| (0+32768))
  4909  021C  0784               	addwf	4,f
  4910  021D  3085               	movlw	high (_hexpowers| (0+32768))
  4911  021E  3D85               	addwfc	5,f
  4912  021F  3F00               	moviw [0]fsr0
  4913  0220  00A0               	movwf	___lldiv@divisor
  4914  0221  3F01               	moviw [1]fsr0
  4915  0222  00A1               	movwf	___lldiv@divisor+1
  4916  0223  3F02               	moviw [2]fsr0
  4917  0224  00A2               	movwf	___lldiv@divisor+2
  4918  0225  3F03               	moviw [3]fsr0
  4919  0226  00A3               	movwf	___lldiv@divisor+3
  4920  0227  0848               	movf	printf@val+3,w
  4921  0228  00A7               	movwf	___lldiv@dividend+3
  4922  0229  0847               	movf	printf@val+2,w
  4923  022A  00A6               	movwf	___lldiv@dividend+2
  4924  022B  0846               	movf	printf@val+1,w
  4925  022C  00A5               	movwf	___lldiv@dividend+1
  4926  022D  0845               	movf	printf@val,w
  4927  022E  00A4               	movwf	___lldiv@dividend
  4928  022F  3184  2443  3180   	fcall	___lldiv
  4929  0232  0020               	movlb	0	; select bank0
  4930  0233  0820               	movf	?___lldiv,w
  4931  0234  390F               	andlw	15
  4932  0235  00BB               	movwf	??_printf
  4933  0236  083B               	movf	??_printf,w
  4934  0237  00C1               	movwf	printf@idx
  4935                           
  4936                           ;doprnt.c: 1525: c = "0123456789abcdef"[idx];
  4937  0238  0841               	movf	printf@idx,w
  4938  0239  3E7E               	addlw	low (STR_9| (0+32768))
  4939  023A  0084               	movwf	4
  4940  023B  3086               	movlw	high (STR_9| (0+32768))
  4941  023C  1803               	skipnc
  4942  023D  3E01               	addlw	1
  4943  023E  0085               	movwf	5
  4944  023F  0800               	movf	0,w	;code access
  4945  0240                     L4:	
  4946  0240  00BB               	movwf	??_printf
  4947  0241  083B               	movf	??_printf,w
  4948  0242  00CC               	movwf	printf@c
  4949  0243                     l2209:	
  4950                           ;doprnt.c: 1542: }
  4951                           
  4952                           ;doprnt.c: 1527: };doprnt.c: 1529: break;
  4953                           
  4954                           
  4955                           ;doprnt.c: 1543: (putch(c) );
  4956  0243  084C               	movf	printf@c,w
  4957  0244  3187  2707  3180   	fcall	_putch
  4958  0247                     l2211:	
  4959  0247  30FF               	movlw	255
  4960  0248  0020               	movlb	0	; select bank0
  4961  0249  07C2               	addwf	printf@prec,f
  4962  024A  30FF               	movlw	255
  4963  024B  3DC3               	addwfc	printf@prec+1,f
  4964  024C  0A42               	incf	printf@prec,w
  4965  024D  1903               	btfsc	3,2
  4966  024E  0A43               	incf	printf@prec+1,w
  4967  024F  1903               	btfsc	3,2
  4968  0250  2832               	goto	l2213
  4969  0251  084B               	movf	printf@flag,w
  4970  0252  3980               	andlw	128
  4971                           
  4972                           ; Switch size 1, requested type "space"
  4973                           ; Number of cases is 2, Range of values is 0 to 128
  4974                           ; switch strategies available:
  4975                           ; Name         Instructions Cycles
  4976                           ; simple_byte            7     4 (average)
  4977                           ; jumptable            260     6 (fixed)
  4978                           ;	Chosen strategy is simple_byte
  4979  0253  3A00               	xorlw	0	; case 0
  4980  0254  1903               	skipnz
  4981  0255  29DC               	goto	l2199
  4982  0256  3A80               	xorlw	128	; case 128
  4983  0257  1903               	skipnz
  4984  0258  2A13               	goto	l2201
  4985  0259  2A43               	goto	l2209
  4986  025A  2A43               	goto	l2209
  4987  025B                     l528:	
  4988                           ;doprnt.c: 1559: return 0;;	Return value of _printf is never used
  4989                           
  4990                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  4991                           
  4992  025B  0008               	return
  4993  025C                     __end_of_printf:	
  4994                           
  4995                           	psect	text4
  4996  0707                     __ptext4:	
  4997 ;; *************** function _putch *****************
  4998 ;; Defined at:
  4999 ;;		line 146 in file "mcc_generated_files/eusart.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  txData          1    wreg     unsigned char 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;  txData          1    3[COMMON] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, status,2, status,0, pclath, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5013 ;;      Params:         0       0       0       0       0       0       0       0
  5014 ;;      Locals:         1       0       0       0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0       0
  5016 ;;      Totals:         1       0       0       0       0       0       0       0
  5017 ;;Total ram usage:        1 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    5
  5020 ;; This function calls:
  5021 ;;		_EUSART_Write
  5022 ;; This function is called by:
  5023 ;;		_printf
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           
  5028                           ;psect for function _putch
  5029  0707                     _putch:	
  5030                           
  5031                           ;incstack = 0
  5032                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  5033                           ;putch@txData stored from wreg
  5034  0707  00FA               	movwf	putch@txData
  5035                           
  5036                           ;eusart.c: 148: EUSART_Write(txData);
  5037  0708  087A               	movf	putch@txData,w
  5038  0709  3186  26CB         	fcall	_EUSART_Write
  5039  070B  0008               	return
  5040  070C                     __end_of_putch:	
  5041                           
  5042                           	psect	text5
  5043  06CB                     __ptext5:	
  5044 ;; *************** function _EUSART_Write *****************
  5045 ;; Defined at:
  5046 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;  txData          1    wreg     unsigned char 
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  txData          1    2[COMMON] unsigned char 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  1    wreg      void 
  5053 ;; Registers used:
  5054 ;;		wreg
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5060 ;;      Params:         0       0       0       0       0       0       0       0
  5061 ;;      Locals:         1       0       0       0       0       0       0       0
  5062 ;;      Temps:          0       0       0       0       0       0       0       0
  5063 ;;      Totals:         1       0       0       0       0       0       0       0
  5064 ;;Total ram usage:        1 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    4
  5067 ;; This function calls:
  5068 ;;		Nothing
  5069 ;; This function is called by:
  5070 ;;		_putch
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _EUSART_Write
  5076  06CB                     _EUSART_Write:	
  5077                           
  5078                           ;incstack = 0
  5079                           ; Regs used in _EUSART_Write: [wreg]
  5080                           ;EUSART_Write@txData stored from wreg
  5081  06CB  00F9               	movwf	EUSART_Write@txData
  5082  06CC                     l197:	
  5083                           ;eusart.c: 135: {
  5084                           
  5085                           ;eusart.c: 134: while(0 == PIR1bits.TXIF)
  5086                           
  5087  06CC  0020               	movlb	0	; select bank0
  5088  06CD  1E11               	btfss	17,4	;volatile
  5089  06CE  2ECC               	goto	l197
  5090                           
  5091                           ;eusart.c: 136: };eusart.c: 138: TX1REG = txData;
  5092  06CF  0879               	movf	EUSART_Write@txData,w
  5093  06D0  0023               	movlb	3	; select bank3
  5094  06D1  009A               	movwf	26	;volatile
  5095  06D2  0008               	return
  5096  06D3                     __end_of_EUSART_Write:	
  5097                           
  5098                           	psect	text6
  5099  068F                     __ptext6:	
  5100 ;; *************** function _isdigit *****************
  5101 ;; Defined at:
  5102 ;;		line 8 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/isdigit.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  c               1    wreg     unsigned char 
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;  c               1    3[COMMON] unsigned char 
  5107 ;; Return value:  Size  Location     Type
  5108 ;;		None               void
  5109 ;; Registers used:
  5110 ;;		wreg, status,2, status,0
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5116 ;;      Params:         0       0       0       0       0       0       0       0
  5117 ;;      Locals:         2       0       0       0       0       0       0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0       0
  5119 ;;      Totals:         2       0       0       0       0       0       0       0
  5120 ;;Total ram usage:        2 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    4
  5123 ;; This function calls:
  5124 ;;		Nothing
  5125 ;; This function is called by:
  5126 ;;		_printf
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           
  5131                           ;psect for function _isdigit
  5132  068F                     _isdigit:	
  5133                           
  5134                           ;incstack = 0
  5135                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5136                           ;isdigit@c stored from wreg
  5137  068F  00FA               	movwf	isdigit@c
  5138  0690  01F9               	clrf	_isdigit$1232
  5139  0691  303A               	movlw	58
  5140  0692  027A               	subwf	isdigit@c,w
  5141  0693  1803               	skipnc
  5142  0694  2E9B               	goto	l1977
  5143  0695  3030               	movlw	48
  5144  0696  027A               	subwf	isdigit@c,w
  5145  0697  1C03               	skipc
  5146  0698  2E9B               	goto	l1977
  5147  0699  01F9               	clrf	_isdigit$1232
  5148  069A  0AF9               	incf	_isdigit$1232,f
  5149  069B                     l1977:	
  5150  069B  0C79               	rrf	_isdigit$1232,w
  5151  069C  0008               	return
  5152  069D                     __end_of_isdigit:	
  5153                           
  5154                           	psect	text7
  5155  05C1                     __ptext7:	
  5156 ;; *************** function ___wmul *****************
  5157 ;; Defined at:
  5158 ;;		line 15 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/Umul16.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5161 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  product         2    2[COMMON] unsigned int 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  2    0[BANK0 ] unsigned int 
  5166 ;; Registers used:
  5167 ;;		wreg, status,2, status,0
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5173 ;;      Params:         0       4       0       0       0       0       0       0
  5174 ;;      Locals:         2       0       0       0       0       0       0       0
  5175 ;;      Temps:          0       0       0       0       0       0       0       0
  5176 ;;      Totals:         2       4       0       0       0       0       0       0
  5177 ;;Total ram usage:        6 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:    4
  5180 ;; This function calls:
  5181 ;;		Nothing
  5182 ;; This function is called by:
  5183 ;;		_printf
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           
  5188                           ;psect for function ___wmul
  5189  05C1                     ___wmul:	
  5190                           
  5191                           ;incstack = 0
  5192                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5193  05C1  01F9               	clrf	___wmul@product
  5194  05C2  01FA               	clrf	___wmul@product+1
  5195  05C3                     l1983:	
  5196  05C3  0020               	movlb	0	; select bank0
  5197  05C4  1C20               	btfss	___wmul@multiplier,0
  5198  05C5  2DCA               	goto	l532
  5199  05C6  0822               	movf	___wmul@multiplicand,w
  5200  05C7  07F9               	addwf	___wmul@product,f
  5201  05C8  0823               	movf	___wmul@multiplicand+1,w
  5202  05C9  3DFA               	addwfc	___wmul@product+1,f
  5203  05CA                     l532:	
  5204  05CA  3001               	movlw	1
  5205  05CB                     u1605:	
  5206  05CB  35A2               	lslf	___wmul@multiplicand,f
  5207  05CC  0DA3               	rlf	___wmul@multiplicand+1,f
  5208  05CD  0B89               	decfsz	9,f
  5209  05CE  2DCB               	goto	u1605
  5210  05CF  3001               	movlw	1
  5211  05D0                     u1615:	
  5212  05D0  36A1               	lsrf	___wmul@multiplier+1,f
  5213  05D1  0CA0               	rrf	___wmul@multiplier,f
  5214  05D2  0B89               	decfsz	9,f
  5215  05D3  2DD0               	goto	u1615
  5216  05D4  0820               	movf	___wmul@multiplier,w
  5217  05D5  0421               	iorwf	___wmul@multiplier+1,w
  5218  05D6  1D03               	btfss	3,2
  5219  05D7  2DC3               	goto	l1983
  5220  05D8  087A               	movf	___wmul@product+1,w
  5221  05D9  00A1               	movwf	?___wmul+1
  5222  05DA  0879               	movf	___wmul@product,w
  5223  05DB  00A0               	movwf	?___wmul
  5224  05DC  0008               	return
  5225  05DD                     __end_of___wmul:	
  5226                           
  5227                           	psect	text8
  5228  0496                     __ptext8:	
  5229 ;; *************** function ___llmod *****************
  5230 ;; Defined at:
  5231 ;;		line 5 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/llmod.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  divisor         4   13[BANK0 ] unsigned long 
  5234 ;;  dividend        4   17[BANK0 ] unsigned long 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  counter         1    4[COMMON] unsigned char 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  4   13[BANK0 ] unsigned long 
  5239 ;; Registers used:
  5240 ;;		wreg, status,2, status,0
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5246 ;;      Params:         0       8       0       0       0       0       0       0
  5247 ;;      Locals:         1       0       0       0       0       0       0       0
  5248 ;;      Temps:          1       0       0       0       0       0       0       0
  5249 ;;      Totals:         2       8       0       0       0       0       0       0
  5250 ;;Total ram usage:       10 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    4
  5253 ;; This function calls:
  5254 ;;		Nothing
  5255 ;; This function is called by:
  5256 ;;		_printf
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function ___llmod
  5262  0496                     ___llmod:	
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5266  0496  0020               	movlb	0	; select bank0
  5267  0497  0830               	movf	___llmod@divisor+3,w
  5268  0498  042F               	iorwf	___llmod@divisor+2,w
  5269  0499  042E               	iorwf	___llmod@divisor+1,w
  5270  049A  042D               	iorwf	___llmod@divisor,w
  5271  049B  1903               	skipnz
  5272  049C  2CD0               	goto	l2075
  5273  049D  01FB               	clrf	___llmod@counter
  5274  049E  0AFB               	incf	___llmod@counter,f
  5275  049F                     l2065:	
  5276  049F  1BB0               	btfsc	___llmod@divisor+3,7
  5277  04A0  2CAD               	goto	l2067
  5278  04A1  3001               	movlw	1
  5279  04A2                     u1815:	
  5280  04A2  35AD               	lslf	___llmod@divisor,f
  5281  04A3  0DAE               	rlf	___llmod@divisor+1,f
  5282  04A4  0DAF               	rlf	___llmod@divisor+2,f
  5283  04A5  0DB0               	rlf	___llmod@divisor+3,f
  5284  04A6  0B89               	decfsz	9,f
  5285  04A7  2CA2               	goto	u1815
  5286  04A8  3001               	movlw	1
  5287  04A9  00FA               	movwf	??___llmod
  5288  04AA  087A               	movf	??___llmod,w
  5289  04AB  07FB               	addwf	___llmod@counter,f
  5290  04AC  2C9F               	goto	l2065
  5291  04AD                     l2067:	
  5292  04AD  0830               	movf	___llmod@divisor+3,w
  5293  04AE  0234               	subwf	___llmod@dividend+3,w
  5294  04AF  1D03               	skipz
  5295  04B0  2CBB               	goto	u1835
  5296  04B1  082F               	movf	___llmod@divisor+2,w
  5297  04B2  0233               	subwf	___llmod@dividend+2,w
  5298  04B3  1D03               	skipz
  5299  04B4  2CBB               	goto	u1835
  5300  04B5  082E               	movf	___llmod@divisor+1,w
  5301  04B6  0232               	subwf	___llmod@dividend+1,w
  5302  04B7  1D03               	skipz
  5303  04B8  2CBB               	goto	u1835
  5304  04B9  082D               	movf	___llmod@divisor,w
  5305  04BA  0231               	subwf	___llmod@dividend,w
  5306  04BB                     u1835:	
  5307  04BB  1C03               	skipc
  5308  04BC  2CC5               	goto	l2071
  5309  04BD  082D               	movf	___llmod@divisor,w
  5310  04BE  02B1               	subwf	___llmod@dividend,f
  5311  04BF  082E               	movf	___llmod@divisor+1,w
  5312  04C0  3BB2               	subwfb	___llmod@dividend+1,f
  5313  04C1  082F               	movf	___llmod@divisor+2,w
  5314  04C2  3BB3               	subwfb	___llmod@dividend+2,f
  5315  04C3  0830               	movf	___llmod@divisor+3,w
  5316  04C4  3BB4               	subwfb	___llmod@dividend+3,f
  5317  04C5                     l2071:	
  5318  04C5  3001               	movlw	1
  5319  04C6                     u1845:	
  5320  04C6  36B0               	lsrf	___llmod@divisor+3,f
  5321  04C7  0CAF               	rrf	___llmod@divisor+2,f
  5322  04C8  0CAE               	rrf	___llmod@divisor+1,f
  5323  04C9  0CAD               	rrf	___llmod@divisor,f
  5324  04CA  0B89               	decfsz	9,f
  5325  04CB  2CC6               	goto	u1845
  5326  04CC  3001               	movlw	1
  5327  04CD  02FB               	subwf	___llmod@counter,f
  5328  04CE  1D03               	btfss	3,2
  5329  04CF  2CAD               	goto	l2067
  5330  04D0                     l2075:	
  5331  04D0  0834               	movf	___llmod@dividend+3,w
  5332  04D1  00B0               	movwf	?___llmod+3
  5333  04D2  0833               	movf	___llmod@dividend+2,w
  5334  04D3  00AF               	movwf	?___llmod+2
  5335  04D4  0832               	movf	___llmod@dividend+1,w
  5336  04D5  00AE               	movwf	?___llmod+1
  5337  04D6  0831               	movf	___llmod@dividend,w
  5338  04D7  00AD               	movwf	?___llmod
  5339  04D8  0008               	return
  5340  04D9                     __end_of___llmod:	
  5341                           
  5342                           	psect	text9
  5343  0443                     __ptext9:	
  5344 ;; *************** function ___lldiv *****************
  5345 ;; Defined at:
  5346 ;;		line 5 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/__lldiv.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  divisor         4    0[BANK0 ] unsigned long 
  5349 ;;  dividend        4    4[BANK0 ] unsigned long 
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  quotient        4    8[BANK0 ] unsigned long 
  5352 ;;  counter         1   12[BANK0 ] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  4    0[BANK0 ] unsigned long 
  5355 ;; Registers used:
  5356 ;;		wreg, status,2, status,0
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5362 ;;      Params:         0       8       0       0       0       0       0       0
  5363 ;;      Locals:         0       5       0       0       0       0       0       0
  5364 ;;      Temps:          1       0       0       0       0       0       0       0
  5365 ;;      Totals:         1      13       0       0       0       0       0       0
  5366 ;;Total ram usage:       14 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    4
  5369 ;; This function calls:
  5370 ;;		Nothing
  5371 ;; This function is called by:
  5372 ;;		_printf
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           
  5377                           ;psect for function ___lldiv
  5378  0443                     ___lldiv:	
  5379                           
  5380                           ;incstack = 0
  5381                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5382  0443  3000               	movlw	0
  5383  0444  0020               	movlb	0	; select bank0
  5384  0445  00AB               	movwf	___lldiv@quotient+3
  5385  0446  3000               	movlw	0
  5386  0447  00AA               	movwf	___lldiv@quotient+2
  5387  0448  3000               	movlw	0
  5388  0449  00A9               	movwf	___lldiv@quotient+1
  5389  044A  3000               	movlw	0
  5390  044B  00A8               	movwf	___lldiv@quotient
  5391  044C  0823               	movf	___lldiv@divisor+3,w
  5392  044D  0422               	iorwf	___lldiv@divisor+2,w
  5393  044E  0421               	iorwf	___lldiv@divisor+1,w
  5394  044F  0420               	iorwf	___lldiv@divisor,w
  5395  0450  1903               	skipnz
  5396  0451  2C8D               	goto	l2015
  5397  0452  01AC               	clrf	___lldiv@counter
  5398  0453  0AAC               	incf	___lldiv@counter,f
  5399  0454                     l2001:	
  5400  0454  1BA3               	btfsc	___lldiv@divisor+3,7
  5401  0455  2C62               	goto	l2003
  5402  0456  3001               	movlw	1
  5403  0457                     u1645:	
  5404  0457  35A0               	lslf	___lldiv@divisor,f
  5405  0458  0DA1               	rlf	___lldiv@divisor+1,f
  5406  0459  0DA2               	rlf	___lldiv@divisor+2,f
  5407  045A  0DA3               	rlf	___lldiv@divisor+3,f
  5408  045B  0B89               	decfsz	9,f
  5409  045C  2C57               	goto	u1645
  5410  045D  3001               	movlw	1
  5411  045E  00F9               	movwf	??___lldiv
  5412  045F  0879               	movf	??___lldiv,w
  5413  0460  07AC               	addwf	___lldiv@counter,f
  5414  0461  2C54               	goto	l2001
  5415  0462                     l2003:	
  5416  0462  3001               	movlw	1
  5417  0463                     u1665:	
  5418  0463  35A8               	lslf	___lldiv@quotient,f
  5419  0464  0DA9               	rlf	___lldiv@quotient+1,f
  5420  0465  0DAA               	rlf	___lldiv@quotient+2,f
  5421  0466  0DAB               	rlf	___lldiv@quotient+3,f
  5422  0467  0B89               	decfsz	9,f
  5423  0468  2C63               	goto	u1665
  5424  0469  0823               	movf	___lldiv@divisor+3,w
  5425  046A  0227               	subwf	___lldiv@dividend+3,w
  5426  046B  1D03               	skipz
  5427  046C  2C77               	goto	u1675
  5428  046D  0822               	movf	___lldiv@divisor+2,w
  5429  046E  0226               	subwf	___lldiv@dividend+2,w
  5430  046F  1D03               	skipz
  5431  0470  2C77               	goto	u1675
  5432  0471  0821               	movf	___lldiv@divisor+1,w
  5433  0472  0225               	subwf	___lldiv@dividend+1,w
  5434  0473  1D03               	skipz
  5435  0474  2C77               	goto	u1675
  5436  0475  0820               	movf	___lldiv@divisor,w
  5437  0476  0224               	subwf	___lldiv@dividend,w
  5438  0477                     u1675:	
  5439  0477  1C03               	skipc
  5440  0478  2C82               	goto	l2011
  5441  0479  0820               	movf	___lldiv@divisor,w
  5442  047A  02A4               	subwf	___lldiv@dividend,f
  5443  047B  0821               	movf	___lldiv@divisor+1,w
  5444  047C  3BA5               	subwfb	___lldiv@dividend+1,f
  5445  047D  0822               	movf	___lldiv@divisor+2,w
  5446  047E  3BA6               	subwfb	___lldiv@dividend+2,f
  5447  047F  0823               	movf	___lldiv@divisor+3,w
  5448  0480  3BA7               	subwfb	___lldiv@dividend+3,f
  5449  0481  1428               	bsf	___lldiv@quotient,0
  5450  0482                     l2011:	
  5451  0482  3001               	movlw	1
  5452  0483                     u1685:	
  5453  0483  36A3               	lsrf	___lldiv@divisor+3,f
  5454  0484  0CA2               	rrf	___lldiv@divisor+2,f
  5455  0485  0CA1               	rrf	___lldiv@divisor+1,f
  5456  0486  0CA0               	rrf	___lldiv@divisor,f
  5457  0487  0B89               	decfsz	9,f
  5458  0488  2C83               	goto	u1685
  5459  0489  3001               	movlw	1
  5460  048A  02AC               	subwf	___lldiv@counter,f
  5461  048B  1D03               	btfss	3,2
  5462  048C  2C62               	goto	l2003
  5463  048D                     l2015:	
  5464  048D  082B               	movf	___lldiv@quotient+3,w
  5465  048E  00A3               	movwf	?___lldiv+3
  5466  048F  082A               	movf	___lldiv@quotient+2,w
  5467  0490  00A2               	movwf	?___lldiv+2
  5468  0491  0829               	movf	___lldiv@quotient+1,w
  5469  0492  00A1               	movwf	?___lldiv+1
  5470  0493  0828               	movf	___lldiv@quotient,w
  5471  0494  00A0               	movwf	?___lldiv
  5472  0495  0008               	return
  5473  0496                     __end_of___lldiv:	
  5474                           
  5475                           	psect	text10
  5476  0509                     __ptext10:	
  5477 ;; *************** function _battery_voltage *****************
  5478 ;; Defined at:
  5479 ;;		line 56 in file "main.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;		None
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  2   14[BANK0 ] unsigned int 
  5486 ;; Registers used:
  5487 ;;		wreg, status,2, status,0, pclath, cstack
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5493 ;;      Params:         0       2       0       0       0       0       0       0
  5494 ;;      Locals:         0       0       0       0       0       0       0       0
  5495 ;;      Temps:          0       0       0       0       0       0       0       0
  5496 ;;      Totals:         0       2       0       0       0       0       0       0
  5497 ;;Total ram usage:        2 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    5
  5500 ;; This function calls:
  5501 ;;		___aldiv
  5502 ;; This function is called by:
  5503 ;;		_process_remote_command
  5504 ;;		_main
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           
  5509                           ;psect for function _battery_voltage
  5510  0509                     _battery_voltage:	
  5511                           
  5512                           ;main.c: 58: FVRCON = 0b10000001;
  5513                           
  5514                           ;incstack = 0
  5515                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  5516  0509  3081               	movlw	129
  5517  050A  0022               	movlb	2	; select bank2
  5518  050B  0097               	movwf	23	;volatile
  5519                           
  5520                           ;main.c: 59: ADCON0 = 0b01111101;
  5521  050C  307D               	movlw	125
  5522  050D  0021               	movlb	1	; select bank1
  5523  050E  009D               	movwf	29	;volatile
  5524                           
  5525                           ;main.c: 60: ADCON1 = 0b10010000;
  5526  050F  3090               	movlw	144
  5527  0510  009E               	movwf	30	;volatile
  5528  0511                     l398:	
  5529                           ;main.c: 61: while(!FVRCONbits.FVRRDY){ }
  5530                           
  5531  0511  0022               	movlb	2	; select bank2
  5532  0512  1F17               	btfss	23,6	;volatile
  5533  0513  2D11               	goto	l398
  5534                           
  5535                           ;main.c: 62: __nop();
  5536  0514  0000               	nop
  5537                           
  5538                           ;main.c: 63: __nop();
  5539  0515  0000               	nop
  5540                           
  5541                           ;main.c: 64: __nop();
  5542  0516  0000               	nop
  5543                           
  5544                           ;main.c: 65: __nop();
  5545  0517  0000               	nop
  5546                           
  5547                           ;main.c: 66: __nop();
  5548  0518  0000               	nop
  5549                           
  5550                           ;main.c: 67: ADCON0bits.GO_nDONE = 1;
  5551  0519  0021               	movlb	1	; select bank1
  5552  051A  149D               	bsf	29,1	;volatile
  5553  051B                     l401:	
  5554                           ;main.c: 68: while(ADCON0bits.GO_nDONE){ }
  5555                           
  5556  051B  189D               	btfsc	29,1	;volatile
  5557  051C  2D1B               	goto	l401
  5558                           
  5559                           ;main.c: 69: ADCON0bits.ADON = 0;
  5560  051D  101D               	bcf	29,0	;volatile
  5561                           
  5562                           ;main.c: 74: return 1047552L / ADRES;
  5563  051E  081B               	movf	27,w	;volatile
  5564  051F  0020               	movlb	0	; select bank0
  5565  0520  00A0               	movwf	___aldiv@divisor
  5566  0521  0021               	movlb	1	; select bank1
  5567  0522  081C               	movf	28,w	;volatile
  5568  0523  0020               	movlb	0	; select bank0
  5569  0524  00A1               	movwf	___aldiv@divisor+1
  5570  0525  01A2               	clrf	___aldiv@divisor+2
  5571  0526  01A3               	clrf	___aldiv@divisor+3
  5572  0527  3000               	movlw	0
  5573  0528  00A7               	movwf	___aldiv@dividend+3
  5574  0529  300F               	movlw	15
  5575  052A  00A6               	movwf	___aldiv@dividend+2
  5576  052B  30FC               	movlw	252
  5577  052C  00A5               	movwf	___aldiv@dividend+1
  5578  052D  3000               	movlw	0
  5579  052E  00A4               	movwf	___aldiv@dividend
  5580  052F  3182  22F5         	fcall	___aldiv
  5581  0531  0020               	movlb	0	; select bank0
  5582  0532  0821               	movf	?___aldiv+1,w
  5583  0533  00AF               	movwf	?_battery_voltage+1
  5584  0534  0820               	movf	?___aldiv,w
  5585  0535  00AE               	movwf	?_battery_voltage
  5586  0536  0008               	return
  5587  0537                     __end_of_battery_voltage:	
  5588                           
  5589                           	psect	text11
  5590  02F5                     __ptext11:	
  5591 ;; *************** function ___aldiv *****************
  5592 ;; Defined at:
  5593 ;;		line 5 in file "/opt/microchip/xc8/v2.00/pic/sources/c90/common/aldiv.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;  divisor         4    0[BANK0 ] long 
  5596 ;;  dividend        4    4[BANK0 ] long 
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;  quotient        4   10[BANK0 ] long 
  5599 ;;  sign            1    9[BANK0 ] unsigned char 
  5600 ;;  counter         1    8[BANK0 ] unsigned char 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  4    0[BANK0 ] long 
  5603 ;; Registers used:
  5604 ;;		wreg, status,2, status,0
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5610 ;;      Params:         0       8       0       0       0       0       0       0
  5611 ;;      Locals:         0       6       0       0       0       0       0       0
  5612 ;;      Temps:          1       0       0       0       0       0       0       0
  5613 ;;      Totals:         1      14       0       0       0       0       0       0
  5614 ;;Total ram usage:       15 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    4
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		_battery_voltage
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           
  5625                           ;psect for function ___aldiv
  5626  02F5                     ___aldiv:	
  5627                           
  5628                           ;incstack = 0
  5629                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5630  02F5  0020               	movlb	0	; select bank0
  5631  02F6  01A9               	clrf	___aldiv@sign
  5632  02F7  1FA3               	btfss	___aldiv@divisor+3,7
  5633  02F8  2B06               	goto	l603
  5634  02F9  09A0               	comf	___aldiv@divisor,f
  5635  02FA  09A1               	comf	___aldiv@divisor+1,f
  5636  02FB  09A2               	comf	___aldiv@divisor+2,f
  5637  02FC  09A3               	comf	___aldiv@divisor+3,f
  5638  02FD  0AA0               	incf	___aldiv@divisor,f
  5639  02FE  1903               	skipnz
  5640  02FF  0AA1               	incf	___aldiv@divisor+1,f
  5641  0300  1903               	skipnz
  5642  0301  0AA2               	incf	___aldiv@divisor+2,f
  5643  0302  1903               	skipnz
  5644  0303  0AA3               	incf	___aldiv@divisor+3,f
  5645  0304  01A9               	clrf	___aldiv@sign
  5646  0305  0AA9               	incf	___aldiv@sign,f
  5647  0306                     l603:	
  5648  0306  1FA7               	btfss	___aldiv@dividend+3,7
  5649  0307  2B17               	goto	l2029
  5650  0308  09A4               	comf	___aldiv@dividend,f
  5651  0309  09A5               	comf	___aldiv@dividend+1,f
  5652  030A  09A6               	comf	___aldiv@dividend+2,f
  5653  030B  09A7               	comf	___aldiv@dividend+3,f
  5654  030C  0AA4               	incf	___aldiv@dividend,f
  5655  030D  1903               	skipnz
  5656  030E  0AA5               	incf	___aldiv@dividend+1,f
  5657  030F  1903               	skipnz
  5658  0310  0AA6               	incf	___aldiv@dividend+2,f
  5659  0311  1903               	skipnz
  5660  0312  0AA7               	incf	___aldiv@dividend+3,f
  5661  0313  3001               	movlw	1
  5662  0314  00F9               	movwf	??___aldiv
  5663  0315  0879               	movf	??___aldiv,w
  5664  0316  06A9               	xorwf	___aldiv@sign,f
  5665  0317                     l2029:	
  5666  0317  3000               	movlw	0
  5667  0318  00AD               	movwf	___aldiv@quotient+3
  5668  0319  3000               	movlw	0
  5669  031A  00AC               	movwf	___aldiv@quotient+2
  5670  031B  3000               	movlw	0
  5671  031C  00AB               	movwf	___aldiv@quotient+1
  5672  031D  3000               	movlw	0
  5673  031E  00AA               	movwf	___aldiv@quotient
  5674  031F  0823               	movf	___aldiv@divisor+3,w
  5675  0320  0422               	iorwf	___aldiv@divisor+2,w
  5676  0321  0421               	iorwf	___aldiv@divisor+1,w
  5677  0322  0420               	iorwf	___aldiv@divisor,w
  5678  0323  1903               	skipnz
  5679  0324  2B60               	goto	l2051
  5680  0325  01A8               	clrf	___aldiv@counter
  5681  0326  0AA8               	incf	___aldiv@counter,f
  5682  0327                     l2037:	
  5683  0327  1BA3               	btfsc	___aldiv@divisor+3,7
  5684  0328  2B35               	goto	l2039
  5685  0329  3001               	movlw	1
  5686  032A                     u1735:	
  5687  032A  35A0               	lslf	___aldiv@divisor,f
  5688  032B  0DA1               	rlf	___aldiv@divisor+1,f
  5689  032C  0DA2               	rlf	___aldiv@divisor+2,f
  5690  032D  0DA3               	rlf	___aldiv@divisor+3,f
  5691  032E  0B89               	decfsz	9,f
  5692  032F  2B2A               	goto	u1735
  5693  0330  3001               	movlw	1
  5694  0331  00F9               	movwf	??___aldiv
  5695  0332  0879               	movf	??___aldiv,w
  5696  0333  07A8               	addwf	___aldiv@counter,f
  5697  0334  2B27               	goto	l2037
  5698  0335                     l2039:	
  5699  0335  3001               	movlw	1
  5700  0336                     u1755:	
  5701  0336  35AA               	lslf	___aldiv@quotient,f
  5702  0337  0DAB               	rlf	___aldiv@quotient+1,f
  5703  0338  0DAC               	rlf	___aldiv@quotient+2,f
  5704  0339  0DAD               	rlf	___aldiv@quotient+3,f
  5705  033A  0B89               	decfsz	9,f
  5706  033B  2B36               	goto	u1755
  5707  033C  0823               	movf	___aldiv@divisor+3,w
  5708  033D  0227               	subwf	___aldiv@dividend+3,w
  5709  033E  1D03               	skipz
  5710  033F  2B4A               	goto	u1765
  5711  0340  0822               	movf	___aldiv@divisor+2,w
  5712  0341  0226               	subwf	___aldiv@dividend+2,w
  5713  0342  1D03               	skipz
  5714  0343  2B4A               	goto	u1765
  5715  0344  0821               	movf	___aldiv@divisor+1,w
  5716  0345  0225               	subwf	___aldiv@dividend+1,w
  5717  0346  1D03               	skipz
  5718  0347  2B4A               	goto	u1765
  5719  0348  0820               	movf	___aldiv@divisor,w
  5720  0349  0224               	subwf	___aldiv@dividend,w
  5721  034A                     u1765:	
  5722  034A  1C03               	skipc
  5723  034B  2B55               	goto	l2047
  5724  034C  0820               	movf	___aldiv@divisor,w
  5725  034D  02A4               	subwf	___aldiv@dividend,f
  5726  034E  0821               	movf	___aldiv@divisor+1,w
  5727  034F  3BA5               	subwfb	___aldiv@dividend+1,f
  5728  0350  0822               	movf	___aldiv@divisor+2,w
  5729  0351  3BA6               	subwfb	___aldiv@dividend+2,f
  5730  0352  0823               	movf	___aldiv@divisor+3,w
  5731  0353  3BA7               	subwfb	___aldiv@dividend+3,f
  5732  0354  142A               	bsf	___aldiv@quotient,0
  5733  0355                     l2047:	
  5734  0355  3001               	movlw	1
  5735  0356                     u1775:	
  5736  0356  36A3               	lsrf	___aldiv@divisor+3,f
  5737  0357  0CA2               	rrf	___aldiv@divisor+2,f
  5738  0358  0CA1               	rrf	___aldiv@divisor+1,f
  5739  0359  0CA0               	rrf	___aldiv@divisor,f
  5740  035A  0B89               	decfsz	9,f
  5741  035B  2B56               	goto	u1775
  5742  035C  3001               	movlw	1
  5743  035D  02A8               	subwf	___aldiv@counter,f
  5744  035E  1D03               	btfss	3,2
  5745  035F  2B35               	goto	l2039
  5746  0360                     l2051:	
  5747  0360  0829               	movf	___aldiv@sign,w
  5748  0361  1903               	btfsc	3,2
  5749  0362  2B6E               	goto	l2055
  5750  0363  09AA               	comf	___aldiv@quotient,f
  5751  0364  09AB               	comf	___aldiv@quotient+1,f
  5752  0365  09AC               	comf	___aldiv@quotient+2,f
  5753  0366  09AD               	comf	___aldiv@quotient+3,f
  5754  0367  0AAA               	incf	___aldiv@quotient,f
  5755  0368  1903               	skipnz
  5756  0369  0AAB               	incf	___aldiv@quotient+1,f
  5757  036A  1903               	skipnz
  5758  036B  0AAC               	incf	___aldiv@quotient+2,f
  5759  036C  1903               	skipnz
  5760  036D  0AAD               	incf	___aldiv@quotient+3,f
  5761  036E                     l2055:	
  5762  036E  082D               	movf	___aldiv@quotient+3,w
  5763  036F  00A3               	movwf	?___aldiv+3
  5764  0370  082C               	movf	___aldiv@quotient+2,w
  5765  0371  00A2               	movwf	?___aldiv+2
  5766  0372  082B               	movf	___aldiv@quotient+1,w
  5767  0373  00A1               	movwf	?___aldiv+1
  5768  0374  082A               	movf	___aldiv@quotient,w
  5769  0375  00A0               	movwf	?___aldiv
  5770  0376  0008               	return
  5771  0377                     __end_of___aldiv:	
  5772                           
  5773                           	psect	text12
  5774  05A3                     __ptext12:	
  5775 ;; *************** function _SYSTEM_Initialize *****************
  5776 ;; Defined at:
  5777 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;		None
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;		None
  5782 ;; Return value:  Size  Location     Type
  5783 ;;                  1    wreg      void 
  5784 ;; Registers used:
  5785 ;;		wreg, status,2, status,0, pclath, cstack
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5791 ;;      Params:         0       0       0       0       0       0       0       0
  5792 ;;      Locals:         0       0       0       0       0       0       0       0
  5793 ;;      Temps:          0       0       0       0       0       0       0       0
  5794 ;;      Totals:         0       0       0       0       0       0       0       0
  5795 ;;Total ram usage:        0 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    6
  5798 ;; This function calls:
  5799 ;;		_DAC_Initialize
  5800 ;;		_EUSART_Initialize
  5801 ;;		_EXT_INT_Initialize
  5802 ;;		_OPA1_Initialize
  5803 ;;		_OPA2_Initialize
  5804 ;;		_OSCILLATOR_Initialize
  5805 ;;		_PIN_MANAGER_Initialize
  5806 ;;		_TMR0_Initialize
  5807 ;;		_TMR2_Initialize
  5808 ;;		_WDT_Initialize
  5809 ;; This function is called by:
  5810 ;;		_main
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           
  5815                           ;psect for function _SYSTEM_Initialize
  5816  05A3                     _SYSTEM_Initialize:	
  5817                           
  5818                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  5819                           
  5820                           ;incstack = 0
  5821                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5822  05A3  3184  24D9  3185   	fcall	_PIN_MANAGER_Initialize
  5823                           
  5824                           ;mcc.c: 54: OSCILLATOR_Initialize();
  5825  05A6  3186  26DB  3185   	fcall	_OSCILLATOR_Initialize
  5826                           
  5827                           ;mcc.c: 55: WDT_Initialize();
  5828  05A9  3187  2710  3185   	fcall	_WDT_Initialize
  5829                           
  5830                           ;mcc.c: 56: DAC_Initialize();
  5831  05AC  3187  2701  3185   	fcall	_DAC_Initialize
  5832                           
  5833                           ;mcc.c: 57: OPA1_Initialize();
  5834  05AF  3187  2718  3185   	fcall	_OPA1_Initialize
  5835                           
  5836                           ;mcc.c: 58: OPA2_Initialize();
  5837  05B2  3187  2714  3185   	fcall	_OPA2_Initialize
  5838                           
  5839                           ;mcc.c: 59: TMR2_Initialize();
  5840  05B5  3186  26D3  3185   	fcall	_TMR2_Initialize
  5841                           
  5842                           ;mcc.c: 60: EXT_INT_Initialize();
  5843  05B8  3186  26AA  3185   	fcall	_EXT_INT_Initialize
  5844                           
  5845                           ;mcc.c: 61: TMR0_Initialize();
  5846  05BB  3186  26C1  3185   	fcall	_TMR0_Initialize
  5847                           
  5848                           ;mcc.c: 62: EUSART_Initialize();
  5849  05BE  3185  255F         	fcall	_EUSART_Initialize
  5850  05C0  0008               	return
  5851  05C1                     __end_of_SYSTEM_Initialize:	
  5852                           
  5853                           	psect	text13
  5854  0710                     __ptext13:	
  5855 ;; *************** function _WDT_Initialize *****************
  5856 ;; Defined at:
  5857 ;;		line 77 in file "mcc_generated_files/mcc.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;		None
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;		None
  5862 ;; Return value:  Size  Location     Type
  5863 ;;                  1    wreg      void 
  5864 ;; Registers used:
  5865 ;;		wreg
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5871 ;;      Params:         0       0       0       0       0       0       0       0
  5872 ;;      Locals:         0       0       0       0       0       0       0       0
  5873 ;;      Temps:          0       0       0       0       0       0       0       0
  5874 ;;      Totals:         0       0       0       0       0       0       0       0
  5875 ;;Total ram usage:        0 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; Hardware stack levels required when called:    4
  5878 ;; This function calls:
  5879 ;;		Nothing
  5880 ;; This function is called by:
  5881 ;;		_SYSTEM_Initialize
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           
  5886                           ;psect for function _WDT_Initialize
  5887  0710                     _WDT_Initialize:	
  5888                           
  5889                           ;mcc.c: 80: WDTCON = 0x16;
  5890                           
  5891                           ;incstack = 0
  5892                           ; Regs used in _WDT_Initialize: [wreg]
  5893  0710  3016               	movlw	22
  5894  0711  0021               	movlb	1	; select bank1
  5895  0712  0097               	movwf	23	;volatile
  5896  0713  0008               	return
  5897  0714                     __end_of_WDT_Initialize:	
  5898                           
  5899                           	psect	text14
  5900  06D3                     __ptext14:	
  5901 ;; *************** function _TMR2_Initialize *****************
  5902 ;; Defined at:
  5903 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;		None
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;		None
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  1    wreg      void 
  5910 ;; Registers used:
  5911 ;;		wreg, status,2
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5917 ;;      Params:         0       0       0       0       0       0       0       0
  5918 ;;      Locals:         0       0       0       0       0       0       0       0
  5919 ;;      Temps:          0       0       0       0       0       0       0       0
  5920 ;;      Totals:         0       0       0       0       0       0       0       0
  5921 ;;Total ram usage:        0 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    4
  5924 ;; This function calls:
  5925 ;;		Nothing
  5926 ;; This function is called by:
  5927 ;;		_SYSTEM_Initialize
  5928 ;; This function uses a non-reentrant model
  5929 ;;
  5930                           
  5931                           
  5932                           ;psect for function _TMR2_Initialize
  5933  06D3                     _TMR2_Initialize:	
  5934                           
  5935                           ;tmr2.c: 67: PR2 = 0x7F;
  5936                           
  5937                           ;incstack = 0
  5938                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  5939  06D3  307F               	movlw	127
  5940  06D4  0020               	movlb	0	; select bank0
  5941  06D5  009B               	movwf	27	;volatile
  5942                           
  5943                           ;tmr2.c: 70: TMR2 = 0x00;
  5944  06D6  019A               	clrf	26	;volatile
  5945                           
  5946                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
  5947  06D7  1091               	bcf	17,1	;volatile
  5948                           
  5949                           ;tmr2.c: 76: T2CON = 0x04;
  5950  06D8  3004               	movlw	4
  5951  06D9  009C               	movwf	28	;volatile
  5952  06DA  0008               	return
  5953  06DB                     __end_of_TMR2_Initialize:	
  5954                           
  5955                           	psect	text15
  5956  06C1                     __ptext15:	
  5957 ;; *************** function _TMR0_Initialize *****************
  5958 ;; Defined at:
  5959 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;		None
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;		None
  5964 ;; Return value:  Size  Location     Type
  5965 ;;                  1    wreg      void 
  5966 ;; Registers used:
  5967 ;;		wreg, status,2
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5973 ;;      Params:         0       0       0       0       0       0       0       0
  5974 ;;      Locals:         0       0       0       0       0       0       0       0
  5975 ;;      Temps:          0       0       0       0       0       0       0       0
  5976 ;;      Totals:         0       0       0       0       0       0       0       0
  5977 ;;Total ram usage:        0 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    4
  5980 ;; This function calls:
  5981 ;;		Nothing
  5982 ;; This function is called by:
  5983 ;;		_SYSTEM_Initialize
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           
  5988                           ;psect for function _TMR0_Initialize
  5989  06C1                     _TMR0_Initialize:	
  5990                           
  5991                           ;tmr0.c: 68: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 & 0x3F));
  5992                           
  5993                           ;incstack = 0
  5994                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  5995  06C1  0021               	movlb	1	; select bank1
  5996  06C2  0815               	movf	21,w	;volatile
  5997  06C3  39C0               	andlw	192
  5998  06C4  3815               	iorlw	21
  5999  06C5  0095               	movwf	21	;volatile
  6000                           
  6001                           ;tmr0.c: 71: TMR0 = 0x00;
  6002  06C6  0020               	movlb	0	; select bank0
  6003  06C7  0195               	clrf	21	;volatile
  6004                           
  6005                           ;tmr0.c: 74: timer0ReloadVal= 0;
  6006  06C8  01F0               	clrf	_timer0ReloadVal	;volatile
  6007                           
  6008                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  6009  06C9  110B               	bcf	11,2	;volatile
  6010  06CA  0008               	return
  6011  06CB                     __end_of_TMR0_Initialize:	
  6012                           
  6013                           	psect	text16
  6014  04D9                     __ptext16:	
  6015 ;; *************** function _PIN_MANAGER_Initialize *****************
  6016 ;; Defined at:
  6017 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;		None
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;		None
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  1    wreg      void 
  6024 ;; Registers used:
  6025 ;;		wreg, status,2
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6031 ;;      Params:         0       0       0       0       0       0       0       0
  6032 ;;      Locals:         0       0       0       0       0       0       0       0
  6033 ;;      Temps:          0       0       0       0       0       0       0       0
  6034 ;;      Totals:         0       0       0       0       0       0       0       0
  6035 ;;Total ram usage:        0 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    4
  6038 ;; This function calls:
  6039 ;;		Nothing
  6040 ;; This function is called by:
  6041 ;;		_SYSTEM_Initialize
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           
  6046                           ;psect for function _PIN_MANAGER_Initialize
  6047  04D9                     _PIN_MANAGER_Initialize:	
  6048                           
  6049                           ;pin_manager.c: 60: LATA = 0x00;
  6050                           
  6051                           ;incstack = 0
  6052                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6053  04D9  0022               	movlb	2	; select bank2
  6054  04DA  018C               	clrf	12	;volatile
  6055                           
  6056                           ;pin_manager.c: 61: LATB = 0x00;
  6057  04DB  018D               	clrf	13	;volatile
  6058                           
  6059                           ;pin_manager.c: 62: LATC = 0x00;
  6060  04DC  018E               	clrf	14	;volatile
  6061                           
  6062                           ;pin_manager.c: 67: TRISA = 0x04;
  6063  04DD  3004               	movlw	4
  6064  04DE  0021               	movlb	1	; select bank1
  6065  04DF  008C               	movwf	12	;volatile
  6066                           
  6067                           ;pin_manager.c: 68: TRISB = 0x20;
  6068  04E0  3020               	movlw	32
  6069  04E1  008D               	movwf	13	;volatile
  6070                           
  6071                           ;pin_manager.c: 69: TRISC = 0x00;
  6072  04E2  018E               	clrf	14	;volatile
  6073                           
  6074                           ;pin_manager.c: 74: ANSELC = 0x00;
  6075  04E3  0023               	movlb	3	; select bank3
  6076  04E4  018E               	clrf	14	;volatile
  6077                           
  6078                           ;pin_manager.c: 75: ANSELB = 0x00;
  6079  04E5  018D               	clrf	13	;volatile
  6080                           
  6081                           ;pin_manager.c: 76: ANSELA = 0x00;
  6082  04E6  018C               	clrf	12	;volatile
  6083                           
  6084                           ;pin_manager.c: 81: WPUB = 0x00;
  6085  04E7  0024               	movlb	4	; select bank4
  6086  04E8  018D               	clrf	13	;volatile
  6087                           
  6088                           ;pin_manager.c: 82: WPUA = 0x00;
  6089  04E9  018C               	clrf	12	;volatile
  6090                           
  6091                           ;pin_manager.c: 83: WPUC = 0x00;
  6092  04EA  018E               	clrf	14	;volatile
  6093                           
  6094                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 0;
  6095  04EB  0021               	movlb	1	; select bank1
  6096  04EC  1395               	bcf	21,7	;volatile
  6097                           
  6098                           ;pin_manager.c: 89: ODCONA = 0x00;
  6099  04ED  0025               	movlb	5	; select bank5
  6100  04EE  018C               	clrf	12	;volatile
  6101                           
  6102                           ;pin_manager.c: 90: ODCONB = 0x00;
  6103  04EF  018D               	clrf	13	;volatile
  6104                           
  6105                           ;pin_manager.c: 91: ODCONC = 0x00;
  6106  04F0  018E               	clrf	14	;volatile
  6107                           
  6108                           ;pin_manager.c: 96: SLRCONA = 0x37;
  6109  04F1  3037               	movlw	55
  6110  04F2  0026               	movlb	6	; select bank6
  6111  04F3  008C               	movwf	12	;volatile
  6112                           
  6113                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  6114  04F4  30F0               	movlw	240
  6115  04F5  008D               	movwf	13	;volatile
  6116                           
  6117                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  6118  04F6  30FF               	movlw	255
  6119  04F7  008E               	movwf	14	;volatile
  6120                           
  6121                           ;pin_manager.c: 103: INLVLA = 0x3F;
  6122  04F8  303F               	movlw	63
  6123  04F9  0027               	movlb	7	; select bank7
  6124  04FA  008C               	movwf	12	;volatile
  6125                           
  6126                           ;pin_manager.c: 104: INLVLB = 0xF0;
  6127  04FB  30F0               	movlw	240
  6128  04FC  008D               	movwf	13	;volatile
  6129                           
  6130                           ;pin_manager.c: 105: INLVLC = 0xFF;
  6131  04FD  30FF               	movlw	255
  6132  04FE  008E               	movwf	14	;volatile
  6133                           
  6134                           ;pin_manager.c: 113: INTCONbits.IOCIE = 1;
  6135  04FF  158B               	bsf	11,3	;volatile
  6136                           
  6137                           ;pin_manager.c: 116: INTPPS = 0x02;
  6138  0500  3002               	movlw	2
  6139  0501  003C               	movlb	28	; select bank28
  6140  0502  0090               	movwf	16	;volatile
  6141                           
  6142                           ;pin_manager.c: 117: RXPPS = 0x0D;
  6143  0503  300D               	movlw	13
  6144  0504  00A4               	movwf	36	;volatile
  6145                           
  6146                           ;pin_manager.c: 118: RB7PPS = 0x14;
  6147  0505  3014               	movlw	20
  6148  0506  003D               	movlb	29	; select bank29
  6149  0507  009F               	movwf	31	;volatile
  6150  0508  0008               	return
  6151  0509                     __end_of_PIN_MANAGER_Initialize:	
  6152                           
  6153                           	psect	text17
  6154  06DB                     __ptext17:	
  6155 ;; *************** function _OSCILLATOR_Initialize *****************
  6156 ;; Defined at:
  6157 ;;		line 65 in file "mcc_generated_files/mcc.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;		None
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;		None
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  1    wreg      void 
  6164 ;; Registers used:
  6165 ;;		wreg, status,2
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6171 ;;      Params:         0       0       0       0       0       0       0       0
  6172 ;;      Locals:         0       0       0       0       0       0       0       0
  6173 ;;      Temps:          0       0       0       0       0       0       0       0
  6174 ;;      Totals:         0       0       0       0       0       0       0       0
  6175 ;;Total ram usage:        0 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    4
  6178 ;; This function calls:
  6179 ;;		Nothing
  6180 ;; This function is called by:
  6181 ;;		_SYSTEM_Initialize
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           
  6186                           ;psect for function _OSCILLATOR_Initialize
  6187  06DB                     _OSCILLATOR_Initialize:	
  6188                           
  6189                           ;mcc.c: 68: OSCCON = 0x6A;
  6190                           
  6191                           ;incstack = 0
  6192                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6193  06DB  306A               	movlw	106
  6194  06DC  0021               	movlb	1	; select bank1
  6195  06DD  0099               	movwf	25	;volatile
  6196                           
  6197                           ;mcc.c: 70: OSCSTAT = 0x00;
  6198  06DE  019A               	clrf	26	;volatile
  6199                           
  6200                           ;mcc.c: 72: OSCTUNE = 0x00;
  6201  06DF  0198               	clrf	24	;volatile
  6202                           
  6203                           ;mcc.c: 74: BORCON = 0x00;
  6204  06E0  0022               	movlb	2	; select bank2
  6205  06E1  0196               	clrf	22	;volatile
  6206  06E2  0008               	return
  6207  06E3                     __end_of_OSCILLATOR_Initialize:	
  6208                           
  6209                           	psect	text18
  6210  0714                     __ptext18:	
  6211 ;; *************** function _OPA2_Initialize *****************
  6212 ;; Defined at:
  6213 ;;		line 58 in file "mcc_generated_files/opa2.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  1    wreg      void 
  6220 ;; Registers used:
  6221 ;;		wreg
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6227 ;;      Params:         0       0       0       0       0       0       0       0
  6228 ;;      Locals:         0       0       0       0       0       0       0       0
  6229 ;;      Temps:          0       0       0       0       0       0       0       0
  6230 ;;      Totals:         0       0       0       0       0       0       0       0
  6231 ;;Total ram usage:        0 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    4
  6234 ;; This function calls:
  6235 ;;		Nothing
  6236 ;; This function is called by:
  6237 ;;		_SYSTEM_Initialize
  6238 ;;		_main
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           
  6243                           ;psect for function _OPA2_Initialize
  6244  0714                     _OPA2_Initialize:	
  6245                           
  6246                           ;opa2.c: 61: OPA2CON = 0xD2;
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in _OPA2_Initialize: [wreg]
  6250  0714  30D2               	movlw	210
  6251  0715  002A               	movlb	10	; select bank10
  6252  0716  0095               	movwf	21	;volatile
  6253  0717  0008               	return
  6254  0718                     __end_of_OPA2_Initialize:	
  6255                           
  6256                           	psect	text19
  6257  0718                     __ptext19:	
  6258 ;; *************** function _OPA1_Initialize *****************
  6259 ;; Defined at:
  6260 ;;		line 58 in file "mcc_generated_files/opa1.c"
  6261 ;; Parameters:    Size  Location     Type
  6262 ;;		None
  6263 ;; Auto vars:     Size  Location     Type
  6264 ;;		None
  6265 ;; Return value:  Size  Location     Type
  6266 ;;                  1    wreg      void 
  6267 ;; Registers used:
  6268 ;;		wreg
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6274 ;;      Params:         0       0       0       0       0       0       0       0
  6275 ;;      Locals:         0       0       0       0       0       0       0       0
  6276 ;;      Temps:          0       0       0       0       0       0       0       0
  6277 ;;      Totals:         0       0       0       0       0       0       0       0
  6278 ;;Total ram usage:        0 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; Hardware stack levels required when called:    4
  6281 ;; This function calls:
  6282 ;;		Nothing
  6283 ;; This function is called by:
  6284 ;;		_SYSTEM_Initialize
  6285 ;;		_main
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           
  6290                           ;psect for function _OPA1_Initialize
  6291  0718                     _OPA1_Initialize:	
  6292                           
  6293                           ;opa1.c: 61: OPA1CON = 0xD2;
  6294                           
  6295                           ;incstack = 0
  6296                           ; Regs used in _OPA1_Initialize: [wreg]
  6297  0718  30D2               	movlw	210
  6298  0719  002A               	movlb	10	; select bank10
  6299  071A  0091               	movwf	17	;volatile
  6300  071B  0008               	return
  6301  071C                     __end_of_OPA1_Initialize:	
  6302                           
  6303                           	psect	text20
  6304  06AA                     __ptext20:	
  6305 ;; *************** function _EXT_INT_Initialize *****************
  6306 ;; Defined at:
  6307 ;;		line 132 in file "mcc_generated_files/ext_int.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;		None
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;		None
  6312 ;; Return value:  Size  Location     Type
  6313 ;;                  1    wreg      void 
  6314 ;; Registers used:
  6315 ;;		wreg, status,2, status,0, pclath, cstack
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6321 ;;      Params:         0       0       0       0       0       0       0       0
  6322 ;;      Locals:         0       0       0       0       0       0       0       0
  6323 ;;      Temps:          0       0       0       0       0       0       0       0
  6324 ;;      Totals:         0       0       0       0       0       0       0       0
  6325 ;;Total ram usage:        0 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    5
  6328 ;; This function calls:
  6329 ;;		_INT_SetInterruptHandler
  6330 ;; This function is called by:
  6331 ;;		_SYSTEM_Initialize
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           
  6336                           ;psect for function _EXT_INT_Initialize
  6337  06AA                     _EXT_INT_Initialize:	
  6338                           
  6339                           ;ext_int.c: 137: (INTCONbits.INTF = 0);
  6340                           
  6341                           ;incstack = 0
  6342                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6343  06AA  108B               	bcf	11,1	;volatile
  6344                           
  6345                           ;ext_int.c: 138: (OPTION_REGbits.INTEDG = 0);
  6346  06AB  0021               	movlb	1	; select bank1
  6347  06AC  1315               	bcf	21,6	;volatile
  6348                           
  6349                           ;ext_int.c: 140: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  6350  06AD  30DD               	movlw	low _INT_DefaultInterruptHandler
  6351  06AE  0020               	movlb	0	; select bank0
  6352  06AF  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler
  6353  06B0  3003               	movlw	high _INT_DefaultInterruptHandler
  6354  06B1  00A1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  6355  06B2  3186  26E9         	fcall	_INT_SetInterruptHandler
  6356                           
  6357                           ;ext_int.c: 141: (INTCONbits.INTE = 1);
  6358  06B4  160B               	bsf	11,4	;volatile
  6359  06B5  0008               	return
  6360  06B6                     __end_of_EXT_INT_Initialize:	
  6361                           
  6362                           	psect	text21
  6363  06E9                     __ptext21:	
  6364 ;; *************** function _INT_SetInterruptHandler *****************
  6365 ;; Defined at:
  6366 ;;		line 71 in file "mcc_generated_files/ext_int.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  6369 ;;		 -> INT_DefaultInterruptHandler(1), 
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;		None
  6372 ;; Return value:  Size  Location     Type
  6373 ;;                  1    wreg      void 
  6374 ;; Registers used:
  6375 ;;		wreg
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 0/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6381 ;;      Params:         0       2       0       0       0       0       0       0
  6382 ;;      Locals:         0       0       0       0       0       0       0       0
  6383 ;;      Temps:          0       0       0       0       0       0       0       0
  6384 ;;      Totals:         0       2       0       0       0       0       0       0
  6385 ;;Total ram usage:        2 bytes
  6386 ;; Hardware stack levels used:    1
  6387 ;; Hardware stack levels required when called:    4
  6388 ;; This function calls:
  6389 ;;		Nothing
  6390 ;; This function is called by:
  6391 ;;		_EXT_INT_Initialize
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           
  6396                           ;psect for function _INT_SetInterruptHandler
  6397  06E9                     _INT_SetInterruptHandler:	
  6398                           
  6399                           ;ext_int.c: 72: INT_InterruptHandler = InterruptHandler;
  6400                           
  6401                           ;incstack = 0
  6402                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  6403  06E9  0020               	movlb	0	; select bank0
  6404  06EA  0821               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  6405  06EB  00D3               	movwf	_INT_InterruptHandler+1
  6406  06EC  0820               	movf	INT_SetInterruptHandler@InterruptHandler,w
  6407  06ED  00D2               	movwf	_INT_InterruptHandler
  6408  06EE  0008               	return
  6409  06EF                     __end_of_INT_SetInterruptHandler:	
  6410                           
  6411                           	psect	text22
  6412  055F                     __ptext22:	
  6413 ;; *************** function _EUSART_Initialize *****************
  6414 ;; Defined at:
  6415 ;;		line 66 in file "mcc_generated_files/eusart.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;		None
  6418 ;; Auto vars:     Size  Location     Type
  6419 ;;		None
  6420 ;; Return value:  Size  Location     Type
  6421 ;;                  1    wreg      void 
  6422 ;; Registers used:
  6423 ;;		wreg, status,2, status,0, pclath, cstack
  6424 ;; Tracked objects:
  6425 ;;		On entry : 0/0
  6426 ;;		On exit  : 0/0
  6427 ;;		Unchanged: 0/0
  6428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6429 ;;      Params:         0       0       0       0       0       0       0       0
  6430 ;;      Locals:         0       0       0       0       0       0       0       0
  6431 ;;      Temps:          0       0       0       0       0       0       0       0
  6432 ;;      Totals:         0       0       0       0       0       0       0       0
  6433 ;;Total ram usage:        0 bytes
  6434 ;; Hardware stack levels used:    1
  6435 ;; Hardware stack levels required when called:    5
  6436 ;; This function calls:
  6437 ;;		_EUSART_SetErrorHandler
  6438 ;;		_EUSART_SetFramingErrorHandler
  6439 ;;		_EUSART_SetOverrunErrorHandler
  6440 ;; This function is called by:
  6441 ;;		_SYSTEM_Initialize
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           
  6446                           ;psect for function _EUSART_Initialize
  6447  055F                     _EUSART_Initialize:	
  6448                           
  6449                           ;eusart.c: 71: BAUD1CON = 0x08;
  6450                           
  6451                           ;incstack = 0
  6452                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6453  055F  3008               	movlw	8
  6454  0560  0023               	movlb	3	; select bank3
  6455  0561  009F               	movwf	31	;volatile
  6456                           
  6457                           ;eusart.c: 74: RC1STA = 0x90;
  6458  0562  3090               	movlw	144
  6459  0563  009D               	movwf	29	;volatile
  6460                           
  6461                           ;eusart.c: 77: TX1STA = 0x24;
  6462  0564  3024               	movlw	36
  6463  0565  009E               	movwf	30	;volatile
  6464                           
  6465                           ;eusart.c: 80: SP1BRGL = 0x08;
  6466  0566  3008               	movlw	8
  6467  0567  009B               	movwf	27	;volatile
  6468                           
  6469                           ;eusart.c: 83: SP1BRGH = 0x00;
  6470  0568  019C               	clrf	28	;volatile
  6471                           
  6472                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  6473  0569  3000               	movlw	0
  6474  056A  0020               	movlb	0	; select bank0
  6475  056B  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6476  056C  3000               	movlw	0
  6477  056D  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6478  056E  3186  26F5  3185   	fcall	_EUSART_SetFramingErrorHandler
  6479                           
  6480                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  6481  0571  3000               	movlw	0
  6482  0572  0020               	movlb	0	; select bank0
  6483  0573  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6484  0574  3000               	movlw	0
  6485  0575  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6486  0576  3186  26EF  3185   	fcall	_EUSART_SetOverrunErrorHandler
  6487                           
  6488                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  6489  0579  3000               	movlw	0
  6490  057A  0020               	movlb	0	; select bank0
  6491  057B  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  6492  057C  3000               	movlw	0
  6493  057D  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6494  057E  3186  26FB         	fcall	_EUSART_SetErrorHandler
  6495                           
  6496                           ;eusart.c: 90: eusartRxLastError.status = 0;
  6497  0580  0020               	movlb	0	; select bank0
  6498  0581  01DD               	clrf	_eusartRxLastError	;volatile
  6499  0582  0008               	return
  6500  0583                     __end_of_EUSART_Initialize:	
  6501                           
  6502                           	psect	text23
  6503  06EF                     __ptext23:	
  6504 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6505 ;; Defined at:
  6506 ;;		line 170 in file "mcc_generated_files/eusart.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  6509 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;		None
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		wreg
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6521 ;;      Params:         0       2       0       0       0       0       0       0
  6522 ;;      Locals:         0       0       0       0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0
  6524 ;;      Totals:         0       2       0       0       0       0       0       0
  6525 ;;Total ram usage:        2 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    4
  6528 ;; This function calls:
  6529 ;;		Nothing
  6530 ;; This function is called by:
  6531 ;;		_EUSART_Initialize
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           
  6536                           ;psect for function _EUSART_SetOverrunErrorHandler
  6537  06EF                     _EUSART_SetOverrunErrorHandler:	
  6538                           
  6539                           ;eusart.c: 171: EUSART_OverrunErrorHandler = interruptHandler;
  6540                           
  6541                           ;incstack = 0
  6542                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6543  06EF  0020               	movlb	0	; select bank0
  6544  06F0  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6545  06F1  00D7               	movwf	_EUSART_OverrunErrorHandler+1
  6546  06F2  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6547  06F3  00D6               	movwf	_EUSART_OverrunErrorHandler
  6548  06F4  0008               	return
  6549  06F5                     __end_of_EUSART_SetOverrunErrorHandler:	
  6550                           
  6551                           	psect	text24
  6552  06F5                     __ptext24:	
  6553 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6554 ;; Defined at:
  6555 ;;		line 166 in file "mcc_generated_files/eusart.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  6558 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;		None
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  1    wreg      void 
  6563 ;; Registers used:
  6564 ;;		wreg
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6570 ;;      Params:         0       2       0       0       0       0       0       0
  6571 ;;      Locals:         0       0       0       0       0       0       0       0
  6572 ;;      Temps:          0       0       0       0       0       0       0       0
  6573 ;;      Totals:         0       2       0       0       0       0       0       0
  6574 ;;Total ram usage:        2 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    4
  6577 ;; This function calls:
  6578 ;;		Nothing
  6579 ;; This function is called by:
  6580 ;;		_EUSART_Initialize
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           
  6585                           ;psect for function _EUSART_SetFramingErrorHandler
  6586  06F5                     _EUSART_SetFramingErrorHandler:	
  6587                           
  6588                           ;eusart.c: 167: EUSART_FramingErrorHandler = interruptHandler;
  6589                           
  6590                           ;incstack = 0
  6591                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6592  06F5  0020               	movlb	0	; select bank0
  6593  06F6  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  6594  06F7  00D9               	movwf	_EUSART_FramingErrorHandler+1
  6595  06F8  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  6596  06F9  00D8               	movwf	_EUSART_FramingErrorHandler
  6597  06FA  0008               	return
  6598  06FB                     __end_of_EUSART_SetFramingErrorHandler:	
  6599                           
  6600                           	psect	text25
  6601  06FB                     __ptext25:	
  6602 ;; *************** function _EUSART_SetErrorHandler *****************
  6603 ;; Defined at:
  6604 ;;		line 174 in file "mcc_generated_files/eusart.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  6607 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;		None
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  1    wreg      void 
  6612 ;; Registers used:
  6613 ;;		wreg
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6619 ;;      Params:         0       2       0       0       0       0       0       0
  6620 ;;      Locals:         0       0       0       0       0       0       0       0
  6621 ;;      Temps:          0       0       0       0       0       0       0       0
  6622 ;;      Totals:         0       2       0       0       0       0       0       0
  6623 ;;Total ram usage:        2 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    4
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		_EUSART_Initialize
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           
  6634                           ;psect for function _EUSART_SetErrorHandler
  6635  06FB                     _EUSART_SetErrorHandler:	
  6636                           
  6637                           ;eusart.c: 175: EUSART_ErrorHandler = interruptHandler;
  6638                           
  6639                           ;incstack = 0
  6640                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  6641  06FB  0020               	movlb	0	; select bank0
  6642  06FC  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  6643  06FD  00D5               	movwf	_EUSART_ErrorHandler+1
  6644  06FE  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  6645  06FF  00D4               	movwf	_EUSART_ErrorHandler
  6646  0700  0008               	return
  6647  0701                     __end_of_EUSART_SetErrorHandler:	
  6648                           
  6649                           	psect	text26
  6650  0701                     __ptext26:	
  6651 ;; *************** function _DAC_Initialize *****************
  6652 ;; Defined at:
  6653 ;;		line 58 in file "mcc_generated_files/dac.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;		None
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;		None
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  1    wreg      void 
  6660 ;; Registers used:
  6661 ;;		wreg
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6667 ;;      Params:         0       0       0       0       0       0       0       0
  6668 ;;      Locals:         0       0       0       0       0       0       0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0       0
  6670 ;;      Totals:         0       0       0       0       0       0       0       0
  6671 ;;Total ram usage:        0 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    4
  6674 ;; This function calls:
  6675 ;;		Nothing
  6676 ;; This function is called by:
  6677 ;;		_SYSTEM_Initialize
  6678 ;;		_main
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           
  6683                           ;psect for function _DAC_Initialize
  6684  0701                     _DAC_Initialize:	
  6685                           
  6686                           ;dac.c: 61: DAC1CON0 = 0x80;
  6687                           
  6688                           ;incstack = 0
  6689                           ; Regs used in _DAC_Initialize: [wreg]
  6690  0701  3080               	movlw	128
  6691  0702  0022               	movlb	2	; select bank2
  6692  0703  0098               	movwf	24	;volatile
  6693                           
  6694                           ;dac.c: 63: DAC1CON1 = 0xFF;
  6695  0704  30FF               	movlw	255
  6696  0705  0099               	movwf	25	;volatile
  6697  0706  0008               	return
  6698  0707                     __end_of_DAC_Initialize:	
  6699                           
  6700                           	psect	intentry
  6701  0004                     __pintentry:	
  6702 ;; *************** function _INTERRUPT_InterruptManager *****************
  6703 ;; Defined at:
  6704 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;		None
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;		None
  6709 ;; Return value:  Size  Location     Type
  6710 ;;                  1    wreg      void 
  6711 ;; Registers used:
  6712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6718 ;;      Params:         0       0       0       0       0       0       0       0
  6719 ;;      Locals:         0       0       0       0       0       0       0       0
  6720 ;;      Temps:          0       0       0       0       0       0       0       0
  6721 ;;      Totals:         0       0       0       0       0       0       0       0
  6722 ;;Total ram usage:        0 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; Hardware stack levels required when called:    3
  6725 ;; This function calls:
  6726 ;;		_INT_ISR
  6727 ;;		_PIN_MANAGER_IOC
  6728 ;; This function is called by:
  6729 ;;		Interrupt level 1
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733  0004                     _INTERRUPT_InterruptManager:	
  6734                           
  6735                           ;incstack = 0
  6736  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6737                           
  6738                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6739  0005  3180               	pagesel	$
  6740                           
  6741                           ;interrupt_manager.c: 55: if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
  6742  0006  1A0B               	btfsc	11,4	;volatile
  6743  0007  1C8B               	btfss	11,1	;volatile
  6744  0008  280D               	goto	i1l126
  6745                           
  6746                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: INT_ISR();
  6747  0009  3187  271C  3180   	fcall	_INT_ISR
  6748                           
  6749                           ;interrupt_manager.c: 58: }
  6750  000C  2812               	goto	i1l130
  6751  000D                     i1l126:	
  6752                           
  6753                           ;interrupt_manager.c: 59: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  6754  000D  198B               	btfsc	11,3	;volatile
  6755  000E  1C0B               	btfss	11,0	;volatile
  6756  000F  2812               	goto	i1l130
  6757                           
  6758                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: PIN_MANAGER_IOC();
  6759  0010  3187  2720         	fcall	_PIN_MANAGER_IOC
  6760  0012                     i1l130:	
  6761                           ;interrupt_manager.c: 63: else;interrupt_manager.c: 64: {
  6762                           
  6763                           ;interrupt_manager.c: 62: }
  6764                           
  6765  0012  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6766  0013  0009               	retfie
  6767  0014                     __end_of_INTERRUPT_InterruptManager:	
  6768                           
  6769                           	psect	text28
  6770  0720                     __ptext28:	
  6771 ;; *************** function _PIN_MANAGER_IOC *****************
  6772 ;; Defined at:
  6773 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		None
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6787 ;;      Params:         0       0       0       0       0       0       0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0
  6790 ;;      Totals:         0       0       0       0       0       0       0       0
  6791 ;;Total ram usage:        0 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; This function calls:
  6794 ;;		Nothing
  6795 ;; This function is called by:
  6796 ;;		_INTERRUPT_InterruptManager
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           
  6801                           ;psect for function _PIN_MANAGER_IOC
  6802  0720                     _PIN_MANAGER_IOC:	
  6803                           
  6804                           ;incstack = 0
  6805                           ; Regs used in _PIN_MANAGER_IOC: []
  6806  0720  0008               	return
  6807  0721                     __end_of_PIN_MANAGER_IOC:	
  6808                           
  6809                           	psect	text29
  6810  071C                     __ptext29:	
  6811 ;; *************** function _INT_ISR *****************
  6812 ;; Defined at:
  6813 ;;		line 54 in file "mcc_generated_files/ext_int.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;		None
  6816 ;; Auto vars:     Size  Location     Type
  6817 ;;		None
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  1    wreg      void 
  6820 ;; Registers used:
  6821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6827 ;;      Params:         0       0       0       0       0       0       0       0
  6828 ;;      Locals:         0       0       0       0       0       0       0       0
  6829 ;;      Temps:          0       0       0       0       0       0       0       0
  6830 ;;      Totals:         0       0       0       0       0       0       0       0
  6831 ;;Total ram usage:        0 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; Hardware stack levels required when called:    2
  6834 ;; This function calls:
  6835 ;;		_INT_CallBack
  6836 ;; This function is called by:
  6837 ;;		_INTERRUPT_InterruptManager
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           
  6842                           ;psect for function _INT_ISR
  6843  071C                     _INT_ISR:	
  6844                           
  6845                           ;ext_int.c: 56: (INTCONbits.INTF = 0);
  6846                           
  6847                           ;incstack = 0
  6848                           ; Regs used in _INT_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6849  071C  108B               	bcf	11,1	;volatile
  6850                           
  6851                           ;ext_int.c: 59: INT_CallBack();
  6852  071D  3186  26B6         	fcall	_INT_CallBack
  6853  071F  0008               	return
  6854  0720                     __end_of_INT_ISR:	
  6855                           
  6856                           	psect	text30
  6857  06B6                     __ptext30:	
  6858 ;; *************** function _INT_CallBack *****************
  6859 ;; Defined at:
  6860 ;;		line 62 in file "mcc_generated_files/ext_int.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;		None
  6863 ;; Auto vars:     Size  Location     Type
  6864 ;;		None
  6865 ;; Return value:  Size  Location     Type
  6866 ;;                  1    wreg      void 
  6867 ;; Registers used:
  6868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6874 ;;      Params:         0       0       0       0       0       0       0       0
  6875 ;;      Locals:         0       0       0       0       0       0       0       0
  6876 ;;      Temps:          0       0       0       0       0       0       0       0
  6877 ;;      Totals:         0       0       0       0       0       0       0       0
  6878 ;;Total ram usage:        0 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    1
  6881 ;; This function calls:
  6882 ;;		Absolute function
  6883 ;;		_INT_DefaultInterruptHandler
  6884 ;; This function is called by:
  6885 ;;		_INT_ISR
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           
  6890                           ;psect for function _INT_CallBack
  6891  06B6                     _INT_CallBack:	
  6892                           
  6893                           ;ext_int.c: 65: if(INT_InterruptHandler)
  6894                           
  6895                           ;incstack = 0
  6896                           ; Regs used in _INT_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6897  06B6  0020               	movlb	0	; select bank0
  6898  06B7  0852               	movf	_INT_InterruptHandler,w
  6899  06B8  0453               	iorwf	_INT_InterruptHandler+1,w
  6900  06B9  1903               	btfsc	3,2
  6901  06BA  0008               	return
  6902                           
  6903                           ;ext_int.c: 66: {;ext_int.c: 67: INT_InterruptHandler();
  6904  06BB  0853               	movf	_INT_InterruptHandler+1,w
  6905  06BC  008A               	movwf	10
  6906  06BD  0852               	movf	_INT_InterruptHandler,w
  6907  06BE  000A               	callw
  6908  06BF  3186               	pagesel	$
  6909  06C0  0008               	return
  6910  06C1                     __end_of_INT_CallBack:	
  6911                           
  6912                           	psect	text31
  6913  03DD                     __ptext31:	
  6914 ;; *************** function _INT_DefaultInterruptHandler *****************
  6915 ;; Defined at:
  6916 ;;		line 75 in file "mcc_generated_files/ext_int.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;  time            1    1[COMMON] unsigned char 
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6930 ;;      Params:         0       0       0       0       0       0       0       0
  6931 ;;      Locals:         1       0       0       0       0       0       0       0
  6932 ;;      Temps:          1       0       0       0       0       0       0       0
  6933 ;;      Totals:         2       0       0       0       0       0       0       0
  6934 ;;Total ram usage:        2 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; This function calls:
  6937 ;;		Nothing
  6938 ;; This function is called by:
  6939 ;;		_EXT_INT_Initialize
  6940 ;;		_INT_CallBack
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           
  6945                           ;psect for function _INT_DefaultInterruptHandler
  6946  03DD                     _INT_DefaultInterruptHandler:	
  6947                           
  6948                           ;ext_int.c: 77: uint8_t time = TMR0;
  6949                           
  6950                           ;incstack = 0
  6951                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr1h+status,2+status,0]
  6952  03DD  0020               	movlb	0	; select bank0
  6953  03DE  0815               	movf	21,w	;volatile
  6954  03DF  00F7               	movwf	??_INT_DefaultInterruptHandler
  6955  03E0  0877               	movf	??_INT_DefaultInterruptHandler,w
  6956  03E1  00F8               	movwf	INT_DefaultInterruptHandler@time
  6957                           
  6958                           ;ext_int.c: 78: TMR0 = 0;
  6959  03E2  0195               	clrf	21	;volatile
  6960                           
  6961                           ;ext_int.c: 81: if (INTCONbits.TMR0IF){
  6962  03E3  190B               	btfsc	11,2	;volatile
  6963                           
  6964                           ;ext_int.c: 82: time = 0;
  6965  03E4  01F8               	clrf	INT_DefaultInterruptHandler@time
  6966                           
  6967                           ;ext_int.c: 83: };ext_int.c: 84: INTCONbits.TMR0IF = 0;
  6968  03E5  110B               	bcf	11,2	;volatile
  6969                           
  6970                           ;ext_int.c: 86: switch(ir_code.state){
  6971  03E6  2C36               	goto	i1l1619
  6972  03E7                     i1l1577:	
  6973                           ;ext_int.c: 87: case STATE_RESET:
  6974                           
  6975                           
  6976                           ;ext_int.c: 89: if (time >= 180 && time <= 243){
  6977  03E7  30B4               	movlw	180
  6978  03E8  0278               	subwf	INT_DefaultInterruptHandler@time,w
  6979  03E9  1C03               	skipc
  6980  03EA  2C41               	goto	i1l255
  6981  03EB  30F4               	movlw	244
  6982  03EC  0278               	subwf	INT_DefaultInterruptHandler@time,w
  6983  03ED  1803               	skipnc
  6984  03EE  2C41               	goto	i1l255
  6985                           
  6986                           ;ext_int.c: 90: ir_code.n_bits = 0;
  6987  03EF  01F1               	clrf	_ir_code
  6988                           
  6989                           ;ext_int.c: 91: ir_code.state = STATE_RECEIVING;
  6990  03F0  01F2               	clrf	_ir_code+1
  6991  03F1  0AF2               	incf	_ir_code+1,f
  6992                           
  6993                           ;ext_int.c: 92: stats[0] = time;
  6994  03F2  0878               	movf	INT_DefaultInterruptHandler@time,w
  6995  03F3  00F7               	movwf	??_INT_DefaultInterruptHandler
  6996  03F4  0877               	movf	??_INT_DefaultInterruptHandler,w
  6997  03F5  0021               	movlb	1	; select bank1
  6998  03F6  00A0               	movwf	_stats^(0+128)
  6999                           
  7000                           ;ext_int.c: 93: };ext_int.c: 94: break;
  7001  03F7  2C41               	goto	i1l255
  7002  03F8                     i1l1587:	
  7003                           ;ext_int.c: 95: case STATE_RECEIVING:
  7004                           
  7005                           
  7006                           ;ext_int.c: 97: ir_code.code <<= 1;
  7007  03F8  3001               	movlw	1
  7008  03F9                     u84_25:	
  7009  03F9  35F3               	lslf	_ir_code+2,f
  7010  03FA  0DF4               	rlf	_ir_code+3,f
  7011  03FB  0DF5               	rlf	_ir_code+4,f
  7012  03FC  0DF6               	rlf	_ir_code+5,f
  7013  03FD  0B89               	decfsz	9,f
  7014  03FE  2BF9               	goto	u84_25
  7015                           
  7016                           ;ext_int.c: 98: if (time >= 29 && time <= 41){
  7017  03FF  301D               	movlw	29
  7018  0400  0278               	subwf	INT_DefaultInterruptHandler@time,w
  7019  0401  1C03               	skipc
  7020  0402  2C12               	goto	i1l1599
  7021  0403  302A               	movlw	42
  7022  0404  0278               	subwf	INT_DefaultInterruptHandler@time,w
  7023  0405  1803               	skipnc
  7024  0406  2C12               	goto	i1l1599
  7025                           
  7026                           ;ext_int.c: 99: stats[1+ir_code.n_bits] = time;
  7027  0407  0878               	movf	INT_DefaultInterruptHandler@time,w
  7028  0408  00F7               	movwf	??_INT_DefaultInterruptHandler
  7029  0409  0871               	movf	_ir_code,w
  7030  040A  3E01               	addlw	1
  7031  040B  3EA0               	addlw	(low (_stats| 0))& (0+255)
  7032  040C  0086               	movwf	6
  7033  040D  0187               	clrf	7
  7034  040E  0877               	movf	??_INT_DefaultInterruptHandler,w
  7035  040F  0081               	movwf	1
  7036                           
  7037                           ;ext_int.c: 100: ir_code.code |= 1;
  7038  0410  1473               	bsf	_ir_code+2,0
  7039  0411  2C23               	goto	i1l1605
  7040  0412                     i1l1599:	
  7041                           ;ext_int.c: 102: } else if (time >= 14 && time <= 20){
  7042                           
  7043                           ;ext_int.c: 101: ir_code.n_bits++;
  7044                           
  7045  0412  300E               	movlw	14
  7046  0413  0278               	subwf	INT_DefaultInterruptHandler@time,w
  7047  0414  1C03               	skipc
  7048  0415  2C34               	goto	i1l1617
  7049  0416  3015               	movlw	21
  7050  0417  0278               	subwf	INT_DefaultInterruptHandler@time,w
  7051  0418  1803               	skipnc
  7052  0419  2C34               	goto	i1l1617
  7053                           
  7054                           ;ext_int.c: 103: stats[1+ir_code.n_bits] = time;
  7055  041A  0878               	movf	INT_DefaultInterruptHandler@time,w
  7056  041B  00F7               	movwf	??_INT_DefaultInterruptHandler
  7057  041C  0871               	movf	_ir_code,w
  7058  041D  3E01               	addlw	1
  7059  041E  3EA0               	addlw	(low (_stats| 0))& (0+255)
  7060  041F  0086               	movwf	6
  7061  0420  0187               	clrf	7
  7062  0421  0877               	movf	??_INT_DefaultInterruptHandler,w
  7063  0422  0081               	movwf	1
  7064  0423                     i1l1605:	
  7065                           
  7066                           ;ext_int.c: 104: ir_code.n_bits++;
  7067  0423  3001               	movlw	1
  7068  0424  00F7               	movwf	??_INT_DefaultInterruptHandler
  7069  0425  0877               	movf	??_INT_DefaultInterruptHandler,w
  7070  0426  07F1               	addwf	_ir_code,f
  7071                           
  7072                           ;ext_int.c: 109: };ext_int.c: 110: if (32 == ir_code.n_bits){
  7073                           
  7074                           ;ext_int.c: 108: break;
  7075                           
  7076                           ;ext_int.c: 107: ir_code.state = STATE_RESET;
  7077                           
  7078                           ;ext_int.c: 105: } else {
  7079  0427  3020               	movlw	32
  7080  0428  0671               	xorwf	_ir_code,w
  7081  0429  1D03               	btfss	3,2
  7082  042A  2C41               	goto	i1l255
  7083                           
  7084                           ;ext_int.c: 113: if (ir_code.command == ((~ir_code.command_b) & 0xff)){
  7085  042B  0973               	comf	_ir_code+2,w
  7086  042C  0674               	xorwf	_ir_code+3,w
  7087  042D  1D03               	skipz
  7088  042E  2C34               	goto	i1l1617
  7089                           
  7090                           ;ext_int.c: 114: ir_code.state = STATE_DONE;
  7091  042F  3002               	movlw	2
  7092  0430  00F7               	movwf	??_INT_DefaultInterruptHandler
  7093  0431  0877               	movf	??_INT_DefaultInterruptHandler,w
  7094  0432  00F2               	movwf	_ir_code+1
  7095                           
  7096                           ;ext_int.c: 115: } else {
  7097  0433  2C41               	goto	i1l255
  7098  0434                     i1l1617:	
  7099                           ;ext_int.c: 124: default:
  7100                           
  7101                           ;ext_int.c: 123: break;
  7102                           
  7103                           ;ext_int.c: 120: case STATE_DONE:
  7104                           
  7105                           ;ext_int.c: 117: };ext_int.c: 118: };ext_int.c: 119: break;
  7106                           
  7107                           ;ext_int.c: 116: ir_code.state = STATE_RESET;
  7108                           
  7109                           
  7110                           ;ext_int.c: 126: ir_code.state = STATE_RESET;
  7111  0434  01F2               	clrf	_ir_code+1
  7112                           
  7113                           ;ext_int.c: 127: }
  7114  0435  2C41               	goto	i1l255
  7115  0436                     i1l1619:	
  7116  0436  0872               	movf	_ir_code+1,w
  7117                           
  7118                           ; Switch size 1, requested type "space"
  7119                           ; Number of cases is 3, Range of values is 0 to 2
  7120                           ; switch strategies available:
  7121                           ; Name         Instructions Cycles
  7122                           ; simple_byte           10     6 (average)
  7123                           ; direct_byte           12     6 (fixed)
  7124                           ; jumptable            260     6 (fixed)
  7125                           ;	Chosen strategy is simple_byte
  7126  0437  3A00               	xorlw	0	; case 0
  7127  0438  1903               	skipnz
  7128  0439  2BE7               	goto	i1l1577
  7129  043A  3A01               	xorlw	1	; case 1
  7130  043B  1903               	skipnz
  7131  043C  2BF8               	goto	i1l1587
  7132  043D  3A03               	xorlw	3	; case 2
  7133  043E  1903               	skipnz
  7134  043F  2C41               	goto	i1l255
  7135  0440  2C34               	goto	i1l1617
  7136  0441                     i1l255:	
  7137                           
  7138                           ;ext_int.c: 129: INTCONbits.INTF = 0;
  7139  0441  108B               	bcf	11,1	;volatile
  7140  0442  0008               	return
  7141  0443                     __end_of_INT_DefaultInterruptHandler:	
  7142  007E                     btemp	set	126	;btemp
  7143  007E                     int$flags	set	126
  7144  007E                     wtemp0	set	126


Data Sizes:
    Strings     182
    Constant    72
    Data        0
    BSS         44
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      12
    BANK0            80     50      62
    BANK1            80      0      33
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_8(CODE[27]), STR_7(CODE[27]), STR_6(CODE[27]), STR_5(CODE[27]), 
		 -> STR_4(CODE[27]), STR_3(CODE[26]), STR_2(CODE[4]), STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(COMMON[6]), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _printf->___llmod
    _putch->_EUSART_Write
    ___llmod->___lldiv
    _battery_voltage->___aldiv

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _main->_process_remote_command
    _process_remote_command->_printf
    _printf->___llmod
    ___llmod->___lldiv
    _battery_voltage->___aldiv
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10798
                                             48 BANK0      2     2      0
                     _DAC_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                             _printf
             _process_remote_command
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0    5351
                                             45 BANK0      3     3      0
                    _battery_voltage
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          3     1      2     331
                                              2 COMMON     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              32    26      6    4264
                                             21 BANK0     24    18      6
                            ___lldiv
                            ___llmod
                             ___wmul
                    _battery_voltage (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      62
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     374
                                              2 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     470
                                              3 COMMON     2     2      0
                                             13 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     717
                                              2 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2     683
                                             14 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     683
                                              2 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     500
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     125
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     375
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     125
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0     200
                            _INT_ISR
                    _PIN_MANAGER_IOC
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _INT_ISR                                              0     0      0     200
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (7) _INT_CallBack                                         0     0      0     200
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _INT_DefaultInterruptHandler                          2     2      0     200
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _battery_voltage
     ___aldiv
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _battery_voltage (ARG)
       ___aldiv
     _isdigit (ARG)
     _putch (ARG)
       _EUSART_Write
   _process_remote_command
     _battery_voltage
       ___aldiv
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _battery_voltage (ARG)
         ___aldiv
       _isdigit (ARG)
       _putch (ARG)
         _EUSART_Write
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     32      3E       6       77.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      21       8       41.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      6B      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Jul  2 20:55:36 2020

                                  __CFG_CP$OFF 0000                        __end_of_OPA1_Initialize 071C  
                          ___wmul@multiplicand 0022                                _timer0ReloadVal 0070  
                                  __CFG_LVP$ON 0000                                            l401 051B  
                                          l503 0147                                            l603 0306  
                                          l507 018C                                            l532 05CA  
                                          l197 06CC                                            l528 025B  
                                          l473 0053                                            l490 00F6  
                                          l484 009D                                            l398 0511  
                                          l487 00BF                                            l488 009F  
                                          l498 0117                                            _PR2 001B  
               ?_EUSART_SetFramingErrorHandler 0020                                _TMR2_Initialize 06D3  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                         l2001 0454                                           l2011 0482  
                                         l2003 0462                                           l2101 0061  
                                         l2015 048D                                           l2201 0213  
                                         l2105 006E                                           l2051 0360  
                                         l2211 0247                                           l2123 00D0  
                                         l2115 00A1                                           l2037 0327  
                                         l2029 0317                                           l2213 0032  
                                         l2221 0382                                           l2055 036E  
                                         l2047 0355                                           l2039 0335  
                                         l2071 04C5                                           l2223 0387  
                                         l2065 049F                                           l2209 0243  
                                         l2137 0105                                           l2225 038A  
                                         l2217 037A                                           l2233 03A2  
                                         l2067 04AD                                           l2075 04D0  
                                         l2163 0177                                           l2227 038F  
                                         l2219 037F                                           l2235 03D0  
                                         l2251 028F                                           l2243 026A  
                                         l2181 01AB                                           l2173 019E  
                                         l2165 0180                                           l2093 004E  
                                         l2229 0392                                           l2175 01A1  
                                         l2193 01CB                                           l2187 01BA  
                                         l2099 0058                                           l2189 01BE  
                                         l2197 01D3                                           l2199 01DC  
                                         l1983 05C3                                           l1977 069B  
                                         STR_1 070C                                           STR_2 070C  
                                         STR_3 0664                                           STR_4 05DD  
                                         STR_5 0613                                           STR_6 05F8  
                                         STR_7 062E                                           STR_8 0649  
                                         STR_9 067E                                           u2035 0193  
                                         _LATA 010C                                           _LATB 010D  
                              __end_of_INT_ISR 0720                                           u2135 027B  
                                         _LATC 010E                                           u1605 05CB  
                                         u1615 05D0                                           u1645 0457  
                                         u1735 032A                                           u1815 04A2  
                                         u1665 0463                                           u1755 0336  
                                         u1675 0477                                           u1835 04BB  
                                         u1765 034A                                           u1685 0483  
                                         u1845 04C6                                           u1775 0356  
                                         u1965 0140                                           u1995 0170  
                                         _TMR0 0015                                           _TMR2 001A  
                      __end_of_OPA2_Initialize 0718                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _main 025C                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
          __end_of_INT_DefaultInterruptHandler 0443                    _INT_DefaultInterruptHandler 03DD  
                                         start 0014                                  __CFG_IESO$OFF 0000  
              __end_of_INT_SetInterruptHandler 06EF                                  __CFG_MCLRE$ON 0000  
                      __end_of_TMR0_Initialize 06CB                                  ?_EUSART_Write 0077  
               __size_of_OSCILLATOR_Initialize 0008                  __end_of_OSCILLATOR_Initialize 06E3  
                              __end_of___aldiv 0377                                          ?_main 0077  
                                        _ADRES 009B                                  __CFG_WDTE$OFF 0000  
                              __end_of___lldiv 0496                                __end_of___llmod 04D9  
                                        _T2CON 001C                                          i1l130 0012  
                                        i1l126 000D                                          i1l255 0441  
                                 ?_setLEDColor 0020                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        u84_25 03F9                                          _RXPPS 0E24  
                      __end_of_PIN_MANAGER_IOC 0721                                __end_of_dpowers 055F  
                               _WDT_Initialize 0710                                __end_of_isdigit 069D  
                                        _putch 0707                                          _stats 00A0  
                               __CFG_BOREN$OFF 0000                                          pclath 000A  
                                        status 0003                        ?_process_remote_command 0077  
                                        wtemp0 007E                               ??_DAC_Initialize 0079  
                              __initialization 0016                                   __end_of_main 02F5  
                               ??_EUSART_Write 0079                        __end_of_TMR2_Initialize 06DB  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0077  
                             ?_OPA1_Initialize 0077                                         ??_main 0050  
                     __size_of_battery_voltage 002E                                 __CFG_PLLEN$OFF 0000  
                       __end_of_WDT_Initialize 0714                                      ??_INT_ISR 0079  
            _EUSART_DefaultFramingErrorHandler 0000                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 0056  
                             ___llmod@dividend 0031                                         _CCPR1L 0291  
                               __CFG_ZCDDIS$ON 0000                                         _ANSELA 018C  
                                       ?_putch 0077                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                       _RC1REG 0199                                         _RA5PPS 0E95  
                                       _RC1STA 019D                                         _RC4PPS 0EA4  
                                       _RB7PPS 0E9F                                         _RC5PPS 0EA5  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       _ODCONC 028E                                         i1l1605 0423  
                                       i1l1617 0434                                         i1l1619 0436  
               __end_of_process_remote_command 03DD                                         i1l1577 03E7  
                                       i1l1587 03F8                                         i1l1599 0412  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         _FVRCON 0117  
                                       _INTPPS 0E10                               ?_OPA2_Initialize 0077  
                                       _OSCCON 0099                                         _TX1REG 019A  
                                       _WDTCON 0097                                         _TX1STA 019E  
                               __CFG_PWRTE$OFF 0000                                      ??___aldiv 0079  
                                       ___wmul 05C1                                 __CFG_STVREN$ON 0000  
                                    ??___lldiv 0079                                      ??___llmod 007A  
                             ?_TMR0_Initialize 0077                                         _printf 002D  
                                ?_INT_CallBack 0077                                      ??_isdigit 0079  
                              ?_WDT_Initialize 0077               __size_of_INT_SetInterruptHandler 0006  
      INT_SetInterruptHandler@InterruptHandler 0020                               ?_PIN_MANAGER_IOC 0077  
                            _SYSTEM_Initialize 05A3                        __end_of__initialization 0029  
                           ?_SYSTEM_Initialize 0077                                 __pcstackCOMMON 0077  
                          ??_SYSTEM_Initialize 0079                                  __end_of_putch 070C  
                             ?_TMR2_Initialize 0077                                 ??_INT_CallBack 0079  
                  __size_of_EXT_INT_Initialize 000C                                 _OPTION_REGbits 0095  
                         __size_of_setLEDColor 000D                ??_EUSART_SetOverrunErrorHandler 0079  
                            ??_battery_voltage 007A                      __end_of_SYSTEM_Initialize 05C1  
                                      ??_putch 007A                                     __pbssBANK0 005A  
                                   __pbssBANK1 00A0                           __end_of_EUSART_Write 06D3  
                                   __pmaintext 025C                                        ?___wmul 0020  
                              __CFG_PPS1WAY$ON 0000                                     __pintentry 0004  
                                      ?_printf 0035                                        _OPA1CON 0511  
                                      _OPA2CON 0515                                        _LED_red 005C  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                                      _INT_ISR 071C                                        _OSCSTAT 009A  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM4DCH 061B                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                     ??_EUSART_SetErrorHandler 0079                                        ___aldiv 02F5  
                                      ___lldiv 0443                                __size_of___wmul 001C  
                                      ___llmod 0496                                        __ptext1 0377  
                                      __ptext2 069D                                        __ptext3 002D  
                                      __ptext4 0707                                        __ptext5 06CB  
                                      __ptext6 068F                                        __ptext7 05C1  
                                      __ptext8 0496                                        __ptext9 0443  
                              __size_of_printf 022F                              __end_of_hexpowers 05A3  
                                      _ir_code 0071                                        _dpowers 0537  
                        _OSCILLATOR_Initialize 06DB                                      _T2CONbits 001C  
                                      _isdigit 068F                               ___aldiv@dividend 0024  
                     ??_PIN_MANAGER_Initialize 0079                        _INT_SetInterruptHandler 06E9  
                   __size_of_SYSTEM_Initialize 001E                                        clrloop0 06E4  
                         end_of_initialization 0029          __end_of_EUSART_SetOverrunErrorHandler 06F5  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 06EF  
                                    _LED_green 005B                           __end_of_INT_CallBack 06C1  
                            _EUSART_Initialize 055F                                ___lldiv@divisor 0020  
                             __CFG_CLKOUTEN$ON 0000                                ___lldiv@counter 002C  
                           ?_EUSART_Initialize 0077                                        printf@c 004C  
                                      printf@f 0035                               ___aldiv@quotient 002A  
                              setLEDColor@blue 0021                            ??_EUSART_Initialize 0079  
                             ??_WDT_Initialize 0079                               __CFG_FOSC$INTOSC 0000  
                        __size_of_EUSART_Write 0008                       __size_of_OPA1_Initialize 0004  
              __size_of_EUSART_SetErrorHandler 0006                      __end_of_EUSART_Initialize 0583  
                                  _CCP1CONbits 0293                                    printf@width 0049  
                     __size_of_OPA2_Initialize 0004                     _EUSART_DefaultErrorHandler 0000  
                               __end_of___wmul 05DD                                _battery_voltage 0509  
                                 _EUSART_Write 06CB                         ?_OSCILLATOR_Initialize 0077  
                    ??_INT_SetInterruptHandler 0079                        __size_of_DAC_Initialize 0006  
                               __end_of_printf 025C                            start_initialization 0016  
                     __size_of_TMR0_Initialize 000A                __size_of_PIN_MANAGER_Initialize 0030  
                                  putch@txData 007A                                ___llmod@divisor 002D  
                              ___llmod@counter 007B                       __size_of_PIN_MANAGER_IOC 0001  
                 ?_INT_DefaultInterruptHandler 0077                 ?_EUSART_SetOverrunErrorHandler 0020  
                   _EUSART_FramingErrorHandler 0058                                       ??___wmul 0079  
                       _EUSART_SetErrorHandler 06FB                                    _CCPTMRSbits 029E  
                   __end_of_EXT_INT_Initialize 06B6                                       ??_printf 003B  
                                ??_setLEDColor 0079                                    __pbssCOMMON 0070  
                                    ___latbits 0001                       ??_process_remote_command 004D  
                                     ?_INT_ISR 0077                                  __pcstackBANK0 0020  
                     __size_of_TMR2_Initialize 0008                                   _isdigit$1232 0079  
                        __size_of_INT_CallBack 000B                     __size_of_EUSART_Initialize 0024  
                            ??_OPA1_Initialize 0079                                      __pnvBANK0 0052  
                       _PIN_MANAGER_Initialize 04D9                        __end_of_battery_voltage 0537  
                ??_INT_DefaultInterruptHandler 0077                                       ?___aldiv 0020  
                                     ?___lldiv 0020                                       ?___llmod 002D  
                                     _DAC1CON0 0118                                       _DAC1CON1 0119  
                 ??_INTERRUPT_InterruptManager 0079                              ??_OPA2_Initialize 0079  
                                 _INT_CallBack 06B6                                       _BAUD1CON 019F  
                                     ?_isdigit 0077                                      _hexpowers 0583  
                          __end_of_setLEDColor 06AA                                 __size_of_putch 0005  
                              ___aldiv@divisor 0020                              ??_TMR0_Initialize 0079  
                              ___aldiv@counter 0028                                 ___wmul@product 0079  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 0020  
                                     _LATCbits 010E                                       _LED_blue 005A  
                                    clear_ram0 06E3                              _eusartRxLastError 005D  
          __size_of_INTERRUPT_InterruptManager 0010                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0079                                 setLEDColor@red 0079  
            _EUSART_DefaultOverrunErrorHandler 0000                              ??_PIN_MANAGER_IOC 0077  
                                   _ADCON0bits 009D                              ___wmul@multiplier 0020  
                               _DAC_Initialize 0701                                     printf@flag 004B  
                                   printf@prec 0042           __size_of_INT_DefaultInterruptHandler 0066  
              __size_of_process_remote_command 0066                               __size_of_INT_ISR 0004  
                            ??_TMR2_Initialize 0079                               ?_battery_voltage 002E  
                      ??_OSCILLATOR_Initialize 0079                            _EUSART_ErrorHandler 0054  
                             __size_of___aldiv 0082                         __end_of_DAC_Initialize 0707  
                             __size_of___lldiv 0053                               __size_of___llmod 0043  
                                  _setLEDColor 069D                               __size_of_isdigit 000E  
                                     __ptext10 0509                                       __ptext11 02F5  
                                     __ptext20 06AA                                       __ptext12 05A3  
                                     __ptext21 06E9                                       __ptext13 0710  
                                     __ptext30 06B6                                       __ptext22 055F  
                                     __ptext14 06D3                                       __ptext31 03DD  
                                     __ptext23 06EF                                       __ptext15 06C1  
                                     __ptext24 06F5                                       __ptext16 04D9  
                                     __ptext25 06FB                                       __ptext17 06DB  
                                     __ptext26 0701                                       __ptext18 0714  
                                     __ptext19 0718                                       __ptext28 0720  
                                     __ptext29 071C                                  __size_of_main 0099  
                      ?_EUSART_SetErrorHandler 0020                         _process_remote_command 0377  
                                   _RC1STAbits 019D  EUSART_SetOverrunErrorHandler@interruptHandler 0020  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 0014  
                   _INTERRUPT_InterruptManager 0004                                      printf@idx 0041  
        __end_of_EUSART_SetFramingErrorHandler 06FB         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 06F5                                ?_DAC_Initialize 0077  
                                    printf@val 0045                                     _INTCONbits 000B  
              INT_DefaultInterruptHandler@time 0078                                    _PWM3DCLbits 0617  
                              _OPA1_Initialize 0718                                    _PWM4DCLbits 061A  
                                   _FVRCONbits 0117                           _INT_InterruptHandler 0052  
                                  _PWM3CONbits 0619                                 __pstringtext10 070C  
                               __pstringtext11 0000                                       isdigit@c 007A  
                                  _PWM4CONbits 061C                             _EXT_INT_Initialize 06AA  
                      __size_of_WDT_Initialize 0004                                       intlevel1 0000  
                             ___lldiv@dividend 0024                        ?_PIN_MANAGER_Initialize 0077  
                   process_remote_command@code 004F                 __end_of_EUSART_SetErrorHandler 0701  
                          ?_EXT_INT_Initialize 0077                                _OPA2_Initialize 0714  
                                     printf@ap 0044  EUSART_SetFramingErrorHandler@interruptHandler 0020  
                     ?_INT_SetInterruptHandler 0020                                  __pstringtext1 0537  
                                __pstringtext2 0583                                  __pstringtext3 05DD  
                                __pstringtext4 05F8                                  __pstringtext5 0613  
                                __pstringtext6 062E                                  __pstringtext7 0649  
                                __pstringtext8 0664                                  __pstringtext9 067E  
                         ??_EXT_INT_Initialize 0079                                     _OPTION_REG 0095  
                             setLEDColor@green 0020                               ___lldiv@quotient 0028  
                              _TMR0_Initialize 06C1                                   ___aldiv@sign 0029  
                                   _TX1STAbits 019E                             EUSART_Write@txData 0079  
               __end_of_PIN_MANAGER_Initialize 0509                                _PIN_MANAGER_IOC 0720  
