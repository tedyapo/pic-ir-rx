

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Aug  2 15:42:28 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16LF1708
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	_HEF_persistent_state_text,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	stringtext1,global,class=STRCODE,delta=2
    10                           	psect	stringtext2,global,class=STRCODE,delta=2
    11                           	psect	stringtext3,global,class=STRCODE,delta=2
    12                           	psect	stringtext4,global,class=STRCODE,delta=2
    13                           	psect	stringtext5,global,class=STRCODE,delta=2
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	inittext,global,class=CODE,delta=2
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2
    37                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text12,local,class=CODE,merge=1,delta=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2
    41                           	psect	text14,local,class=CODE,merge=1,delta=2
    42                           	psect	text15,local,class=CODE,merge=1,delta=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2
    45                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,delta=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2
    70                           	psect	text43,local,class=CODE,merge=1,delta=2
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2
    78                           	psect	text51,local,class=CODE,merge=1,delta=2
    79                           	psect	text52,local,class=CODE,merge=1,delta=2
    80                           	psect	text53,local,class=CODE,merge=1,delta=2
    81                           	psect	text54,local,class=CODE,merge=1,delta=2
    82                           	psect	text55,local,class=CODE,merge=1,delta=2
    83                           	psect	text56,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x7E,2
    85  0000                     
    86                           ; Version 2.10
    87                           ; Generated 31/07/2019 GMT
    88                           ; 
    89                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    90                           ; All rights reserved.
    91                           ; 
    92                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    93                           ; 
    94                           ; Redistribution and use in source and binary forms, with or without modification, are
    95                           ; permitted provided that the following conditions are met:
    96                           ; 
    97                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    98                           ;        conditions and the following disclaimer.
    99                           ; 
   100                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   101                           ;        of conditions and the following disclaimer in the documentation and/or other
   102                           ;        materials provided with the distribution.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC16LF1708 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  0008                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000D                     	;# 
   134  000E                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0016                     	;# 
   141  0017                     	;# 
   142  0018                     	;# 
   143  0019                     	;# 
   144  001A                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0095                     	;# 
   154  0096                     	;# 
   155  0097                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009A                     	;# 
   159  009B                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  0111                     	;# 
   169  0112                     	;# 
   170  0113                     	;# 
   171  0114                     	;# 
   172  0115                     	;# 
   173  0116                     	;# 
   174  0117                     	;# 
   175  0118                     	;# 
   176  0119                     	;# 
   177  011C                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180  018E                     	;# 
   181  0191                     	;# 
   182  0191                     	;# 
   183  0192                     	;# 
   184  0193                     	;# 
   185  0193                     	;# 
   186  0194                     	;# 
   187  0195                     	;# 
   188  0196                     	;# 
   189  0199                     	;# 
   190  0199                     	;# 
   191  0199                     	;# 
   192  019A                     	;# 
   193  019A                     	;# 
   194  019A                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019C                     	;# 
   201  019C                     	;# 
   202  019C                     	;# 
   203  019D                     	;# 
   204  019D                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019E                     	;# 
   208  019E                     	;# 
   209  019F                     	;# 
   210  019F                     	;# 
   211  019F                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  020C                     	;# 
   215  020D                     	;# 
   216  020E                     	;# 
   217  0211                     	;# 
   218  0211                     	;# 
   219  0212                     	;# 
   220  0212                     	;# 
   221  0213                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  028C                     	;# 
   234  028D                     	;# 
   235  028E                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0293                     	;# 
   241  0298                     	;# 
   242  0298                     	;# 
   243  0299                     	;# 
   244  029A                     	;# 
   245  029A                     	;# 
   246  029E                     	;# 
   247  030C                     	;# 
   248  030D                     	;# 
   249  030E                     	;# 
   250  038C                     	;# 
   251  038D                     	;# 
   252  038E                     	;# 
   253  0391                     	;# 
   254  0392                     	;# 
   255  0393                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0397                     	;# 
   260  0398                     	;# 
   261  0399                     	;# 
   262  0415                     	;# 
   263  0416                     	;# 
   264  0417                     	;# 
   265  041C                     	;# 
   266  041D                     	;# 
   267  041E                     	;# 
   268  0511                     	;# 
   269  0515                     	;# 
   270  0617                     	;# 
   271  0618                     	;# 
   272  0619                     	;# 
   273  0619                     	;# 
   274  061A                     	;# 
   275  061B                     	;# 
   276  061C                     	;# 
   277  061C                     	;# 
   278  0691                     	;# 
   279  0692                     	;# 
   280  0693                     	;# 
   281  0694                     	;# 
   282  0695                     	;# 
   283  0696                     	;# 
   284  0697                     	;# 
   285  0698                     	;# 
   286  0699                     	;# 
   287  069A                     	;# 
   288  069B                     	;# 
   289  069C                     	;# 
   290  069D                     	;# 
   291  069E                     	;# 
   292  069F                     	;# 
   293  0E0F                     	;# 
   294  0E10                     	;# 
   295  0E11                     	;# 
   296  0E12                     	;# 
   297  0E13                     	;# 
   298  0E14                     	;# 
   299  0E15                     	;# 
   300  0E17                     	;# 
   301  0E20                     	;# 
   302  0E21                     	;# 
   303  0E22                     	;# 
   304  0E24                     	;# 
   305  0E25                     	;# 
   306  0E28                     	;# 
   307  0E29                     	;# 
   308  0E2A                     	;# 
   309  0E2B                     	;# 
   310  0E90                     	;# 
   311  0E91                     	;# 
   312  0E92                     	;# 
   313  0E94                     	;# 
   314  0E95                     	;# 
   315  0E9C                     	;# 
   316  0E9D                     	;# 
   317  0E9E                     	;# 
   318  0E9F                     	;# 
   319  0EA0                     	;# 
   320  0EA1                     	;# 
   321  0EA2                     	;# 
   322  0EA3                     	;# 
   323  0EA4                     	;# 
   324  0EA5                     	;# 
   325  0EA6                     	;# 
   326  0EA7                     	;# 
   327  0F0F                     	;# 
   328  0F10                     	;# 
   329  0F11                     	;# 
   330  0F12                     	;# 
   331  0F13                     	;# 
   332  0F14                     	;# 
   333  0F15                     	;# 
   334  0F16                     	;# 
   335  0F17                     	;# 
   336  0F18                     	;# 
   337  0F19                     	;# 
   338  0F1A                     	;# 
   339  0F1B                     	;# 
   340  0F1C                     	;# 
   341  0F1D                     	;# 
   342  0F1E                     	;# 
   343  0F1F                     	;# 
   344  0F20                     	;# 
   345  0F21                     	;# 
   346  0F22                     	;# 
   347  0F23                     	;# 
   348  0F24                     	;# 
   349  0F25                     	;# 
   350  0F26                     	;# 
   351  0F27                     	;# 
   352  0F28                     	;# 
   353  0F29                     	;# 
   354  0F2A                     	;# 
   355  0F2B                     	;# 
   356  0F2C                     	;# 
   357  0F2D                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000D                     	;# 
   383  000E                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0098                     	;# 
   406  0099                     	;# 
   407  009A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  009F                     	;# 
   414  010C                     	;# 
   415  010D                     	;# 
   416  010E                     	;# 
   417  0111                     	;# 
   418  0112                     	;# 
   419  0113                     	;# 
   420  0114                     	;# 
   421  0115                     	;# 
   422  0116                     	;# 
   423  0117                     	;# 
   424  0118                     	;# 
   425  0119                     	;# 
   426  011C                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0199                     	;# 
   439  0199                     	;# 
   440  0199                     	;# 
   441  019A                     	;# 
   442  019A                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019C                     	;# 
   450  019C                     	;# 
   451  019C                     	;# 
   452  019D                     	;# 
   453  019D                     	;# 
   454  019D                     	;# 
   455  019E                     	;# 
   456  019E                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  019F                     	;# 
   460  019F                     	;# 
   461  019F                     	;# 
   462  019F                     	;# 
   463  020C                     	;# 
   464  020D                     	;# 
   465  020E                     	;# 
   466  0211                     	;# 
   467  0211                     	;# 
   468  0212                     	;# 
   469  0212                     	;# 
   470  0213                     	;# 
   471  0213                     	;# 
   472  0214                     	;# 
   473  0214                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0215                     	;# 
   477  0215                     	;# 
   478  0216                     	;# 
   479  0216                     	;# 
   480  0217                     	;# 
   481  0217                     	;# 
   482  028C                     	;# 
   483  028D                     	;# 
   484  028E                     	;# 
   485  0291                     	;# 
   486  0291                     	;# 
   487  0292                     	;# 
   488  0293                     	;# 
   489  0293                     	;# 
   490  0298                     	;# 
   491  0298                     	;# 
   492  0299                     	;# 
   493  029A                     	;# 
   494  029A                     	;# 
   495  029E                     	;# 
   496  030C                     	;# 
   497  030D                     	;# 
   498  030E                     	;# 
   499  038C                     	;# 
   500  038D                     	;# 
   501  038E                     	;# 
   502  0391                     	;# 
   503  0392                     	;# 
   504  0393                     	;# 
   505  0394                     	;# 
   506  0395                     	;# 
   507  0396                     	;# 
   508  0397                     	;# 
   509  0398                     	;# 
   510  0399                     	;# 
   511  0415                     	;# 
   512  0416                     	;# 
   513  0417                     	;# 
   514  041C                     	;# 
   515  041D                     	;# 
   516  041E                     	;# 
   517  0511                     	;# 
   518  0515                     	;# 
   519  0617                     	;# 
   520  0618                     	;# 
   521  0619                     	;# 
   522  0619                     	;# 
   523  061A                     	;# 
   524  061B                     	;# 
   525  061C                     	;# 
   526  061C                     	;# 
   527  0691                     	;# 
   528  0692                     	;# 
   529  0693                     	;# 
   530  0694                     	;# 
   531  0695                     	;# 
   532  0696                     	;# 
   533  0697                     	;# 
   534  0698                     	;# 
   535  0699                     	;# 
   536  069A                     	;# 
   537  069B                     	;# 
   538  069C                     	;# 
   539  069D                     	;# 
   540  069E                     	;# 
   541  069F                     	;# 
   542  0E0F                     	;# 
   543  0E10                     	;# 
   544  0E11                     	;# 
   545  0E12                     	;# 
   546  0E13                     	;# 
   547  0E14                     	;# 
   548  0E15                     	;# 
   549  0E17                     	;# 
   550  0E20                     	;# 
   551  0E21                     	;# 
   552  0E22                     	;# 
   553  0E24                     	;# 
   554  0E25                     	;# 
   555  0E28                     	;# 
   556  0E29                     	;# 
   557  0E2A                     	;# 
   558  0E2B                     	;# 
   559  0E90                     	;# 
   560  0E91                     	;# 
   561  0E92                     	;# 
   562  0E94                     	;# 
   563  0E95                     	;# 
   564  0E9C                     	;# 
   565  0E9D                     	;# 
   566  0E9E                     	;# 
   567  0E9F                     	;# 
   568  0EA0                     	;# 
   569  0EA1                     	;# 
   570  0EA2                     	;# 
   571  0EA3                     	;# 
   572  0EA4                     	;# 
   573  0EA5                     	;# 
   574  0EA6                     	;# 
   575  0EA7                     	;# 
   576  0F0F                     	;# 
   577  0F10                     	;# 
   578  0F11                     	;# 
   579  0F12                     	;# 
   580  0F13                     	;# 
   581  0F14                     	;# 
   582  0F15                     	;# 
   583  0F16                     	;# 
   584  0F17                     	;# 
   585  0F18                     	;# 
   586  0F19                     	;# 
   587  0F1A                     	;# 
   588  0F1B                     	;# 
   589  0F1C                     	;# 
   590  0F1D                     	;# 
   591  0F1E                     	;# 
   592  0F1F                     	;# 
   593  0F20                     	;# 
   594  0F21                     	;# 
   595  0F22                     	;# 
   596  0F23                     	;# 
   597  0F24                     	;# 
   598  0F25                     	;# 
   599  0F26                     	;# 
   600  0F27                     	;# 
   601  0F28                     	;# 
   602  0F29                     	;# 
   603  0F2A                     	;# 
   604  0F2B                     	;# 
   605  0F2C                     	;# 
   606  0F2D                     	;# 
   607  0FE4                     	;# 
   608  0FE5                     	;# 
   609  0FE6                     	;# 
   610  0FE7                     	;# 
   611  0FE8                     	;# 
   612  0FE9                     	;# 
   613  0FEA                     	;# 
   614  0FEB                     	;# 
   615  0FED                     	;# 
   616  0FEE                     	;# 
   617  0FEF                     	;# 
   618  0000                     	;# 
   619  0001                     	;# 
   620  0002                     	;# 
   621  0003                     	;# 
   622  0004                     	;# 
   623  0005                     	;# 
   624  0006                     	;# 
   625  0007                     	;# 
   626  0008                     	;# 
   627  0009                     	;# 
   628  000A                     	;# 
   629  000B                     	;# 
   630  000C                     	;# 
   631  000D                     	;# 
   632  000E                     	;# 
   633  0011                     	;# 
   634  0012                     	;# 
   635  0013                     	;# 
   636  0015                     	;# 
   637  0016                     	;# 
   638  0016                     	;# 
   639  0017                     	;# 
   640  0018                     	;# 
   641  0019                     	;# 
   642  001A                     	;# 
   643  001B                     	;# 
   644  001C                     	;# 
   645  008C                     	;# 
   646  008D                     	;# 
   647  008E                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0093                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0097                     	;# 
   654  0098                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009B                     	;# 
   659  009C                     	;# 
   660  009D                     	;# 
   661  009E                     	;# 
   662  009F                     	;# 
   663  010C                     	;# 
   664  010D                     	;# 
   665  010E                     	;# 
   666  0111                     	;# 
   667  0112                     	;# 
   668  0113                     	;# 
   669  0114                     	;# 
   670  0115                     	;# 
   671  0116                     	;# 
   672  0117                     	;# 
   673  0118                     	;# 
   674  0119                     	;# 
   675  011C                     	;# 
   676  018C                     	;# 
   677  018D                     	;# 
   678  018E                     	;# 
   679  0191                     	;# 
   680  0191                     	;# 
   681  0192                     	;# 
   682  0193                     	;# 
   683  0193                     	;# 
   684  0194                     	;# 
   685  0195                     	;# 
   686  0196                     	;# 
   687  0199                     	;# 
   688  0199                     	;# 
   689  0199                     	;# 
   690  019A                     	;# 
   691  019A                     	;# 
   692  019A                     	;# 
   693  019B                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019B                     	;# 
   697  019B                     	;# 
   698  019C                     	;# 
   699  019C                     	;# 
   700  019C                     	;# 
   701  019D                     	;# 
   702  019D                     	;# 
   703  019D                     	;# 
   704  019E                     	;# 
   705  019E                     	;# 
   706  019E                     	;# 
   707  019F                     	;# 
   708  019F                     	;# 
   709  019F                     	;# 
   710  019F                     	;# 
   711  019F                     	;# 
   712  020C                     	;# 
   713  020D                     	;# 
   714  020E                     	;# 
   715  0211                     	;# 
   716  0211                     	;# 
   717  0212                     	;# 
   718  0212                     	;# 
   719  0213                     	;# 
   720  0213                     	;# 
   721  0214                     	;# 
   722  0214                     	;# 
   723  0215                     	;# 
   724  0215                     	;# 
   725  0215                     	;# 
   726  0215                     	;# 
   727  0216                     	;# 
   728  0216                     	;# 
   729  0217                     	;# 
   730  0217                     	;# 
   731  028C                     	;# 
   732  028D                     	;# 
   733  028E                     	;# 
   734  0291                     	;# 
   735  0291                     	;# 
   736  0292                     	;# 
   737  0293                     	;# 
   738  0293                     	;# 
   739  0298                     	;# 
   740  0298                     	;# 
   741  0299                     	;# 
   742  029A                     	;# 
   743  029A                     	;# 
   744  029E                     	;# 
   745  030C                     	;# 
   746  030D                     	;# 
   747  030E                     	;# 
   748  038C                     	;# 
   749  038D                     	;# 
   750  038E                     	;# 
   751  0391                     	;# 
   752  0392                     	;# 
   753  0393                     	;# 
   754  0394                     	;# 
   755  0395                     	;# 
   756  0396                     	;# 
   757  0397                     	;# 
   758  0398                     	;# 
   759  0399                     	;# 
   760  0415                     	;# 
   761  0416                     	;# 
   762  0417                     	;# 
   763  041C                     	;# 
   764  041D                     	;# 
   765  041E                     	;# 
   766  0511                     	;# 
   767  0515                     	;# 
   768  0617                     	;# 
   769  0618                     	;# 
   770  0619                     	;# 
   771  0619                     	;# 
   772  061A                     	;# 
   773  061B                     	;# 
   774  061C                     	;# 
   775  061C                     	;# 
   776  0691                     	;# 
   777  0692                     	;# 
   778  0693                     	;# 
   779  0694                     	;# 
   780  0695                     	;# 
   781  0696                     	;# 
   782  0697                     	;# 
   783  0698                     	;# 
   784  0699                     	;# 
   785  069A                     	;# 
   786  069B                     	;# 
   787  069C                     	;# 
   788  069D                     	;# 
   789  069E                     	;# 
   790  069F                     	;# 
   791  0E0F                     	;# 
   792  0E10                     	;# 
   793  0E11                     	;# 
   794  0E12                     	;# 
   795  0E13                     	;# 
   796  0E14                     	;# 
   797  0E15                     	;# 
   798  0E17                     	;# 
   799  0E20                     	;# 
   800  0E21                     	;# 
   801  0E22                     	;# 
   802  0E24                     	;# 
   803  0E25                     	;# 
   804  0E28                     	;# 
   805  0E29                     	;# 
   806  0E2A                     	;# 
   807  0E2B                     	;# 
   808  0E90                     	;# 
   809  0E91                     	;# 
   810  0E92                     	;# 
   811  0E94                     	;# 
   812  0E95                     	;# 
   813  0E9C                     	;# 
   814  0E9D                     	;# 
   815  0E9E                     	;# 
   816  0E9F                     	;# 
   817  0EA0                     	;# 
   818  0EA1                     	;# 
   819  0EA2                     	;# 
   820  0EA3                     	;# 
   821  0EA4                     	;# 
   822  0EA5                     	;# 
   823  0EA6                     	;# 
   824  0EA7                     	;# 
   825  0F0F                     	;# 
   826  0F10                     	;# 
   827  0F11                     	;# 
   828  0F12                     	;# 
   829  0F13                     	;# 
   830  0F14                     	;# 
   831  0F15                     	;# 
   832  0F16                     	;# 
   833  0F17                     	;# 
   834  0F18                     	;# 
   835  0F19                     	;# 
   836  0F1A                     	;# 
   837  0F1B                     	;# 
   838  0F1C                     	;# 
   839  0F1D                     	;# 
   840  0F1E                     	;# 
   841  0F1F                     	;# 
   842  0F20                     	;# 
   843  0F21                     	;# 
   844  0F22                     	;# 
   845  0F23                     	;# 
   846  0F24                     	;# 
   847  0F25                     	;# 
   848  0F26                     	;# 
   849  0F27                     	;# 
   850  0F28                     	;# 
   851  0F29                     	;# 
   852  0F2A                     	;# 
   853  0F2B                     	;# 
   854  0F2C                     	;# 
   855  0F2D                     	;# 
   856  0FE4                     	;# 
   857  0FE5                     	;# 
   858  0FE6                     	;# 
   859  0FE7                     	;# 
   860  0FE8                     	;# 
   861  0FE9                     	;# 
   862  0FEA                     	;# 
   863  0FEB                     	;# 
   864  0FED                     	;# 
   865  0FEE                     	;# 
   866  0FEF                     	;# 
   867  0000                     	;# 
   868  0001                     	;# 
   869  0002                     	;# 
   870  0003                     	;# 
   871  0004                     	;# 
   872  0005                     	;# 
   873  0006                     	;# 
   874  0007                     	;# 
   875  0008                     	;# 
   876  0009                     	;# 
   877  000A                     	;# 
   878  000B                     	;# 
   879  000C                     	;# 
   880  000D                     	;# 
   881  000E                     	;# 
   882  0011                     	;# 
   883  0012                     	;# 
   884  0013                     	;# 
   885  0015                     	;# 
   886  0016                     	;# 
   887  0016                     	;# 
   888  0017                     	;# 
   889  0018                     	;# 
   890  0019                     	;# 
   891  001A                     	;# 
   892  001B                     	;# 
   893  001C                     	;# 
   894  008C                     	;# 
   895  008D                     	;# 
   896  008E                     	;# 
   897  0091                     	;# 
   898  0092                     	;# 
   899  0093                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0097                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009A                     	;# 
   906  009B                     	;# 
   907  009B                     	;# 
   908  009C                     	;# 
   909  009D                     	;# 
   910  009E                     	;# 
   911  009F                     	;# 
   912  010C                     	;# 
   913  010D                     	;# 
   914  010E                     	;# 
   915  0111                     	;# 
   916  0112                     	;# 
   917  0113                     	;# 
   918  0114                     	;# 
   919  0115                     	;# 
   920  0116                     	;# 
   921  0117                     	;# 
   922  0118                     	;# 
   923  0119                     	;# 
   924  011C                     	;# 
   925  018C                     	;# 
   926  018D                     	;# 
   927  018E                     	;# 
   928  0191                     	;# 
   929  0191                     	;# 
   930  0192                     	;# 
   931  0193                     	;# 
   932  0193                     	;# 
   933  0194                     	;# 
   934  0195                     	;# 
   935  0196                     	;# 
   936  0199                     	;# 
   937  0199                     	;# 
   938  0199                     	;# 
   939  019A                     	;# 
   940  019A                     	;# 
   941  019A                     	;# 
   942  019B                     	;# 
   943  019B                     	;# 
   944  019B                     	;# 
   945  019B                     	;# 
   946  019B                     	;# 
   947  019C                     	;# 
   948  019C                     	;# 
   949  019C                     	;# 
   950  019D                     	;# 
   951  019D                     	;# 
   952  019D                     	;# 
   953  019E                     	;# 
   954  019E                     	;# 
   955  019E                     	;# 
   956  019F                     	;# 
   957  019F                     	;# 
   958  019F                     	;# 
   959  019F                     	;# 
   960  019F                     	;# 
   961  020C                     	;# 
   962  020D                     	;# 
   963  020E                     	;# 
   964  0211                     	;# 
   965  0211                     	;# 
   966  0212                     	;# 
   967  0212                     	;# 
   968  0213                     	;# 
   969  0213                     	;# 
   970  0214                     	;# 
   971  0214                     	;# 
   972  0215                     	;# 
   973  0215                     	;# 
   974  0215                     	;# 
   975  0215                     	;# 
   976  0216                     	;# 
   977  0216                     	;# 
   978  0217                     	;# 
   979  0217                     	;# 
   980  028C                     	;# 
   981  028D                     	;# 
   982  028E                     	;# 
   983  0291                     	;# 
   984  0291                     	;# 
   985  0292                     	;# 
   986  0293                     	;# 
   987  0293                     	;# 
   988  0298                     	;# 
   989  0298                     	;# 
   990  0299                     	;# 
   991  029A                     	;# 
   992  029A                     	;# 
   993  029E                     	;# 
   994  030C                     	;# 
   995  030D                     	;# 
   996  030E                     	;# 
   997  038C                     	;# 
   998  038D                     	;# 
   999  038E                     	;# 
  1000  0391                     	;# 
  1001  0392                     	;# 
  1002  0393                     	;# 
  1003  0394                     	;# 
  1004  0395                     	;# 
  1005  0396                     	;# 
  1006  0397                     	;# 
  1007  0398                     	;# 
  1008  0399                     	;# 
  1009  0415                     	;# 
  1010  0416                     	;# 
  1011  0417                     	;# 
  1012  041C                     	;# 
  1013  041D                     	;# 
  1014  041E                     	;# 
  1015  0511                     	;# 
  1016  0515                     	;# 
  1017  0617                     	;# 
  1018  0618                     	;# 
  1019  0619                     	;# 
  1020  0619                     	;# 
  1021  061A                     	;# 
  1022  061B                     	;# 
  1023  061C                     	;# 
  1024  061C                     	;# 
  1025  0691                     	;# 
  1026  0692                     	;# 
  1027  0693                     	;# 
  1028  0694                     	;# 
  1029  0695                     	;# 
  1030  0696                     	;# 
  1031  0697                     	;# 
  1032  0698                     	;# 
  1033  0699                     	;# 
  1034  069A                     	;# 
  1035  069B                     	;# 
  1036  069C                     	;# 
  1037  069D                     	;# 
  1038  069E                     	;# 
  1039  069F                     	;# 
  1040  0E0F                     	;# 
  1041  0E10                     	;# 
  1042  0E11                     	;# 
  1043  0E12                     	;# 
  1044  0E13                     	;# 
  1045  0E14                     	;# 
  1046  0E15                     	;# 
  1047  0E17                     	;# 
  1048  0E20                     	;# 
  1049  0E21                     	;# 
  1050  0E22                     	;# 
  1051  0E24                     	;# 
  1052  0E25                     	;# 
  1053  0E28                     	;# 
  1054  0E29                     	;# 
  1055  0E2A                     	;# 
  1056  0E2B                     	;# 
  1057  0E90                     	;# 
  1058  0E91                     	;# 
  1059  0E92                     	;# 
  1060  0E94                     	;# 
  1061  0E95                     	;# 
  1062  0E9C                     	;# 
  1063  0E9D                     	;# 
  1064  0E9E                     	;# 
  1065  0E9F                     	;# 
  1066  0EA0                     	;# 
  1067  0EA1                     	;# 
  1068  0EA2                     	;# 
  1069  0EA3                     	;# 
  1070  0EA4                     	;# 
  1071  0EA5                     	;# 
  1072  0EA6                     	;# 
  1073  0EA7                     	;# 
  1074  0F0F                     	;# 
  1075  0F10                     	;# 
  1076  0F11                     	;# 
  1077  0F12                     	;# 
  1078  0F13                     	;# 
  1079  0F14                     	;# 
  1080  0F15                     	;# 
  1081  0F16                     	;# 
  1082  0F17                     	;# 
  1083  0F18                     	;# 
  1084  0F19                     	;# 
  1085  0F1A                     	;# 
  1086  0F1B                     	;# 
  1087  0F1C                     	;# 
  1088  0F1D                     	;# 
  1089  0F1E                     	;# 
  1090  0F1F                     	;# 
  1091  0F20                     	;# 
  1092  0F21                     	;# 
  1093  0F22                     	;# 
  1094  0F23                     	;# 
  1095  0F24                     	;# 
  1096  0F25                     	;# 
  1097  0F26                     	;# 
  1098  0F27                     	;# 
  1099  0F28                     	;# 
  1100  0F29                     	;# 
  1101  0F2A                     	;# 
  1102  0F2B                     	;# 
  1103  0F2C                     	;# 
  1104  0F2D                     	;# 
  1105  0FE4                     	;# 
  1106  0FE5                     	;# 
  1107  0FE6                     	;# 
  1108  0FE7                     	;# 
  1109  0FE8                     	;# 
  1110  0FE9                     	;# 
  1111  0FEA                     	;# 
  1112  0FEB                     	;# 
  1113  0FED                     	;# 
  1114  0FEE                     	;# 
  1115  0FEF                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0008                     	;# 
  1125  0009                     	;# 
  1126  000A                     	;# 
  1127  000B                     	;# 
  1128  000C                     	;# 
  1129  000D                     	;# 
  1130  000E                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0015                     	;# 
  1135  0016                     	;# 
  1136  0016                     	;# 
  1137  0017                     	;# 
  1138  0018                     	;# 
  1139  0019                     	;# 
  1140  001A                     	;# 
  1141  001B                     	;# 
  1142  001C                     	;# 
  1143  008C                     	;# 
  1144  008D                     	;# 
  1145  008E                     	;# 
  1146  0091                     	;# 
  1147  0092                     	;# 
  1148  0093                     	;# 
  1149  0095                     	;# 
  1150  0096                     	;# 
  1151  0097                     	;# 
  1152  0098                     	;# 
  1153  0099                     	;# 
  1154  009A                     	;# 
  1155  009B                     	;# 
  1156  009B                     	;# 
  1157  009C                     	;# 
  1158  009D                     	;# 
  1159  009E                     	;# 
  1160  009F                     	;# 
  1161  010C                     	;# 
  1162  010D                     	;# 
  1163  010E                     	;# 
  1164  0111                     	;# 
  1165  0112                     	;# 
  1166  0113                     	;# 
  1167  0114                     	;# 
  1168  0115                     	;# 
  1169  0116                     	;# 
  1170  0117                     	;# 
  1171  0118                     	;# 
  1172  0119                     	;# 
  1173  011C                     	;# 
  1174  018C                     	;# 
  1175  018D                     	;# 
  1176  018E                     	;# 
  1177  0191                     	;# 
  1178  0191                     	;# 
  1179  0192                     	;# 
  1180  0193                     	;# 
  1181  0193                     	;# 
  1182  0194                     	;# 
  1183  0195                     	;# 
  1184  0196                     	;# 
  1185  0199                     	;# 
  1186  0199                     	;# 
  1187  0199                     	;# 
  1188  019A                     	;# 
  1189  019A                     	;# 
  1190  019A                     	;# 
  1191  019B                     	;# 
  1192  019B                     	;# 
  1193  019B                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019C                     	;# 
  1197  019C                     	;# 
  1198  019C                     	;# 
  1199  019D                     	;# 
  1200  019D                     	;# 
  1201  019D                     	;# 
  1202  019E                     	;# 
  1203  019E                     	;# 
  1204  019E                     	;# 
  1205  019F                     	;# 
  1206  019F                     	;# 
  1207  019F                     	;# 
  1208  019F                     	;# 
  1209  019F                     	;# 
  1210  020C                     	;# 
  1211  020D                     	;# 
  1212  020E                     	;# 
  1213  0211                     	;# 
  1214  0211                     	;# 
  1215  0212                     	;# 
  1216  0212                     	;# 
  1217  0213                     	;# 
  1218  0213                     	;# 
  1219  0214                     	;# 
  1220  0214                     	;# 
  1221  0215                     	;# 
  1222  0215                     	;# 
  1223  0215                     	;# 
  1224  0215                     	;# 
  1225  0216                     	;# 
  1226  0216                     	;# 
  1227  0217                     	;# 
  1228  0217                     	;# 
  1229  028C                     	;# 
  1230  028D                     	;# 
  1231  028E                     	;# 
  1232  0291                     	;# 
  1233  0291                     	;# 
  1234  0292                     	;# 
  1235  0293                     	;# 
  1236  0293                     	;# 
  1237  0298                     	;# 
  1238  0298                     	;# 
  1239  0299                     	;# 
  1240  029A                     	;# 
  1241  029A                     	;# 
  1242  029E                     	;# 
  1243  030C                     	;# 
  1244  030D                     	;# 
  1245  030E                     	;# 
  1246  038C                     	;# 
  1247  038D                     	;# 
  1248  038E                     	;# 
  1249  0391                     	;# 
  1250  0392                     	;# 
  1251  0393                     	;# 
  1252  0394                     	;# 
  1253  0395                     	;# 
  1254  0396                     	;# 
  1255  0397                     	;# 
  1256  0398                     	;# 
  1257  0399                     	;# 
  1258  0415                     	;# 
  1259  0416                     	;# 
  1260  0417                     	;# 
  1261  041C                     	;# 
  1262  041D                     	;# 
  1263  041E                     	;# 
  1264  0511                     	;# 
  1265  0515                     	;# 
  1266  0617                     	;# 
  1267  0618                     	;# 
  1268  0619                     	;# 
  1269  0619                     	;# 
  1270  061A                     	;# 
  1271  061B                     	;# 
  1272  061C                     	;# 
  1273  061C                     	;# 
  1274  0691                     	;# 
  1275  0692                     	;# 
  1276  0693                     	;# 
  1277  0694                     	;# 
  1278  0695                     	;# 
  1279  0696                     	;# 
  1280  0697                     	;# 
  1281  0698                     	;# 
  1282  0699                     	;# 
  1283  069A                     	;# 
  1284  069B                     	;# 
  1285  069C                     	;# 
  1286  069D                     	;# 
  1287  069E                     	;# 
  1288  069F                     	;# 
  1289  0E0F                     	;# 
  1290  0E10                     	;# 
  1291  0E11                     	;# 
  1292  0E12                     	;# 
  1293  0E13                     	;# 
  1294  0E14                     	;# 
  1295  0E15                     	;# 
  1296  0E17                     	;# 
  1297  0E20                     	;# 
  1298  0E21                     	;# 
  1299  0E22                     	;# 
  1300  0E24                     	;# 
  1301  0E25                     	;# 
  1302  0E28                     	;# 
  1303  0E29                     	;# 
  1304  0E2A                     	;# 
  1305  0E2B                     	;# 
  1306  0E90                     	;# 
  1307  0E91                     	;# 
  1308  0E92                     	;# 
  1309  0E94                     	;# 
  1310  0E95                     	;# 
  1311  0E9C                     	;# 
  1312  0E9D                     	;# 
  1313  0E9E                     	;# 
  1314  0E9F                     	;# 
  1315  0EA0                     	;# 
  1316  0EA1                     	;# 
  1317  0EA2                     	;# 
  1318  0EA3                     	;# 
  1319  0EA4                     	;# 
  1320  0EA5                     	;# 
  1321  0EA6                     	;# 
  1322  0EA7                     	;# 
  1323  0F0F                     	;# 
  1324  0F10                     	;# 
  1325  0F11                     	;# 
  1326  0F12                     	;# 
  1327  0F13                     	;# 
  1328  0F14                     	;# 
  1329  0F15                     	;# 
  1330  0F16                     	;# 
  1331  0F17                     	;# 
  1332  0F18                     	;# 
  1333  0F19                     	;# 
  1334  0F1A                     	;# 
  1335  0F1B                     	;# 
  1336  0F1C                     	;# 
  1337  0F1D                     	;# 
  1338  0F1E                     	;# 
  1339  0F1F                     	;# 
  1340  0F20                     	;# 
  1341  0F21                     	;# 
  1342  0F22                     	;# 
  1343  0F23                     	;# 
  1344  0F24                     	;# 
  1345  0F25                     	;# 
  1346  0F26                     	;# 
  1347  0F27                     	;# 
  1348  0F28                     	;# 
  1349  0F29                     	;# 
  1350  0F2A                     	;# 
  1351  0F2B                     	;# 
  1352  0F2C                     	;# 
  1353  0F2D                     	;# 
  1354  0FE4                     	;# 
  1355  0FE5                     	;# 
  1356  0FE6                     	;# 
  1357  0FE7                     	;# 
  1358  0FE8                     	;# 
  1359  0FE9                     	;# 
  1360  0FEA                     	;# 
  1361  0FEB                     	;# 
  1362  0FED                     	;# 
  1363  0FEE                     	;# 
  1364  0FEF                     	;# 
  1365  0000                     	;# 
  1366  0001                     	;# 
  1367  0002                     	;# 
  1368  0003                     	;# 
  1369  0004                     	;# 
  1370  0005                     	;# 
  1371  0006                     	;# 
  1372  0007                     	;# 
  1373  0008                     	;# 
  1374  0009                     	;# 
  1375  000A                     	;# 
  1376  000B                     	;# 
  1377  000C                     	;# 
  1378  000D                     	;# 
  1379  000E                     	;# 
  1380  0011                     	;# 
  1381  0012                     	;# 
  1382  0013                     	;# 
  1383  0015                     	;# 
  1384  0016                     	;# 
  1385  0016                     	;# 
  1386  0017                     	;# 
  1387  0018                     	;# 
  1388  0019                     	;# 
  1389  001A                     	;# 
  1390  001B                     	;# 
  1391  001C                     	;# 
  1392  008C                     	;# 
  1393  008D                     	;# 
  1394  008E                     	;# 
  1395  0091                     	;# 
  1396  0092                     	;# 
  1397  0093                     	;# 
  1398  0095                     	;# 
  1399  0096                     	;# 
  1400  0097                     	;# 
  1401  0098                     	;# 
  1402  0099                     	;# 
  1403  009A                     	;# 
  1404  009B                     	;# 
  1405  009B                     	;# 
  1406  009C                     	;# 
  1407  009D                     	;# 
  1408  009E                     	;# 
  1409  009F                     	;# 
  1410  010C                     	;# 
  1411  010D                     	;# 
  1412  010E                     	;# 
  1413  0111                     	;# 
  1414  0112                     	;# 
  1415  0113                     	;# 
  1416  0114                     	;# 
  1417  0115                     	;# 
  1418  0116                     	;# 
  1419  0117                     	;# 
  1420  0118                     	;# 
  1421  0119                     	;# 
  1422  011C                     	;# 
  1423  018C                     	;# 
  1424  018D                     	;# 
  1425  018E                     	;# 
  1426  0191                     	;# 
  1427  0191                     	;# 
  1428  0192                     	;# 
  1429  0193                     	;# 
  1430  0193                     	;# 
  1431  0194                     	;# 
  1432  0195                     	;# 
  1433  0196                     	;# 
  1434  0199                     	;# 
  1435  0199                     	;# 
  1436  0199                     	;# 
  1437  019A                     	;# 
  1438  019A                     	;# 
  1439  019A                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019C                     	;# 
  1446  019C                     	;# 
  1447  019C                     	;# 
  1448  019D                     	;# 
  1449  019D                     	;# 
  1450  019D                     	;# 
  1451  019E                     	;# 
  1452  019E                     	;# 
  1453  019E                     	;# 
  1454  019F                     	;# 
  1455  019F                     	;# 
  1456  019F                     	;# 
  1457  019F                     	;# 
  1458  019F                     	;# 
  1459  020C                     	;# 
  1460  020D                     	;# 
  1461  020E                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  028C                     	;# 
  1479  028D                     	;# 
  1480  028E                     	;# 
  1481  0291                     	;# 
  1482  0291                     	;# 
  1483  0292                     	;# 
  1484  0293                     	;# 
  1485  0293                     	;# 
  1486  0298                     	;# 
  1487  0298                     	;# 
  1488  0299                     	;# 
  1489  029A                     	;# 
  1490  029A                     	;# 
  1491  029E                     	;# 
  1492  030C                     	;# 
  1493  030D                     	;# 
  1494  030E                     	;# 
  1495  038C                     	;# 
  1496  038D                     	;# 
  1497  038E                     	;# 
  1498  0391                     	;# 
  1499  0392                     	;# 
  1500  0393                     	;# 
  1501  0394                     	;# 
  1502  0395                     	;# 
  1503  0396                     	;# 
  1504  0397                     	;# 
  1505  0398                     	;# 
  1506  0399                     	;# 
  1507  0415                     	;# 
  1508  0416                     	;# 
  1509  0417                     	;# 
  1510  041C                     	;# 
  1511  041D                     	;# 
  1512  041E                     	;# 
  1513  0511                     	;# 
  1514  0515                     	;# 
  1515  0617                     	;# 
  1516  0618                     	;# 
  1517  0619                     	;# 
  1518  0619                     	;# 
  1519  061A                     	;# 
  1520  061B                     	;# 
  1521  061C                     	;# 
  1522  061C                     	;# 
  1523  0691                     	;# 
  1524  0692                     	;# 
  1525  0693                     	;# 
  1526  0694                     	;# 
  1527  0695                     	;# 
  1528  0696                     	;# 
  1529  0697                     	;# 
  1530  0698                     	;# 
  1531  0699                     	;# 
  1532  069A                     	;# 
  1533  069B                     	;# 
  1534  069C                     	;# 
  1535  069D                     	;# 
  1536  069E                     	;# 
  1537  069F                     	;# 
  1538  0E0F                     	;# 
  1539  0E10                     	;# 
  1540  0E11                     	;# 
  1541  0E12                     	;# 
  1542  0E13                     	;# 
  1543  0E14                     	;# 
  1544  0E15                     	;# 
  1545  0E17                     	;# 
  1546  0E20                     	;# 
  1547  0E21                     	;# 
  1548  0E22                     	;# 
  1549  0E24                     	;# 
  1550  0E25                     	;# 
  1551  0E28                     	;# 
  1552  0E29                     	;# 
  1553  0E2A                     	;# 
  1554  0E2B                     	;# 
  1555  0E90                     	;# 
  1556  0E91                     	;# 
  1557  0E92                     	;# 
  1558  0E94                     	;# 
  1559  0E95                     	;# 
  1560  0E9C                     	;# 
  1561  0E9D                     	;# 
  1562  0E9E                     	;# 
  1563  0E9F                     	;# 
  1564  0EA0                     	;# 
  1565  0EA1                     	;# 
  1566  0EA2                     	;# 
  1567  0EA3                     	;# 
  1568  0EA4                     	;# 
  1569  0EA5                     	;# 
  1570  0EA6                     	;# 
  1571  0EA7                     	;# 
  1572  0F0F                     	;# 
  1573  0F10                     	;# 
  1574  0F11                     	;# 
  1575  0F12                     	;# 
  1576  0F13                     	;# 
  1577  0F14                     	;# 
  1578  0F15                     	;# 
  1579  0F16                     	;# 
  1580  0F17                     	;# 
  1581  0F18                     	;# 
  1582  0F19                     	;# 
  1583  0F1A                     	;# 
  1584  0F1B                     	;# 
  1585  0F1C                     	;# 
  1586  0F1D                     	;# 
  1587  0F1E                     	;# 
  1588  0F1F                     	;# 
  1589  0F20                     	;# 
  1590  0F21                     	;# 
  1591  0F22                     	;# 
  1592  0F23                     	;# 
  1593  0F24                     	;# 
  1594  0F25                     	;# 
  1595  0F26                     	;# 
  1596  0F27                     	;# 
  1597  0F28                     	;# 
  1598  0F29                     	;# 
  1599  0F2A                     	;# 
  1600  0F2B                     	;# 
  1601  0F2C                     	;# 
  1602  0F2D                     	;# 
  1603  0FE4                     	;# 
  1604  0FE5                     	;# 
  1605  0FE6                     	;# 
  1606  0FE7                     	;# 
  1607  0FE8                     	;# 
  1608  0FE9                     	;# 
  1609  0FEA                     	;# 
  1610  0FEB                     	;# 
  1611  0FED                     	;# 
  1612  0FEE                     	;# 
  1613  0FEF                     	;# 
  1614  0000                     	;# 
  1615  0001                     	;# 
  1616  0002                     	;# 
  1617  0003                     	;# 
  1618  0004                     	;# 
  1619  0005                     	;# 
  1620  0006                     	;# 
  1621  0007                     	;# 
  1622  0008                     	;# 
  1623  0009                     	;# 
  1624  000A                     	;# 
  1625  000B                     	;# 
  1626  000C                     	;# 
  1627  000D                     	;# 
  1628  000E                     	;# 
  1629  0011                     	;# 
  1630  0012                     	;# 
  1631  0013                     	;# 
  1632  0015                     	;# 
  1633  0016                     	;# 
  1634  0016                     	;# 
  1635  0017                     	;# 
  1636  0018                     	;# 
  1637  0019                     	;# 
  1638  001A                     	;# 
  1639  001B                     	;# 
  1640  001C                     	;# 
  1641  008C                     	;# 
  1642  008D                     	;# 
  1643  008E                     	;# 
  1644  0091                     	;# 
  1645  0092                     	;# 
  1646  0093                     	;# 
  1647  0095                     	;# 
  1648  0096                     	;# 
  1649  0097                     	;# 
  1650  0098                     	;# 
  1651  0099                     	;# 
  1652  009A                     	;# 
  1653  009B                     	;# 
  1654  009B                     	;# 
  1655  009C                     	;# 
  1656  009D                     	;# 
  1657  009E                     	;# 
  1658  009F                     	;# 
  1659  010C                     	;# 
  1660  010D                     	;# 
  1661  010E                     	;# 
  1662  0111                     	;# 
  1663  0112                     	;# 
  1664  0113                     	;# 
  1665  0114                     	;# 
  1666  0115                     	;# 
  1667  0116                     	;# 
  1668  0117                     	;# 
  1669  0118                     	;# 
  1670  0119                     	;# 
  1671  011C                     	;# 
  1672  018C                     	;# 
  1673  018D                     	;# 
  1674  018E                     	;# 
  1675  0191                     	;# 
  1676  0191                     	;# 
  1677  0192                     	;# 
  1678  0193                     	;# 
  1679  0193                     	;# 
  1680  0194                     	;# 
  1681  0195                     	;# 
  1682  0196                     	;# 
  1683  0199                     	;# 
  1684  0199                     	;# 
  1685  0199                     	;# 
  1686  019A                     	;# 
  1687  019A                     	;# 
  1688  019A                     	;# 
  1689  019B                     	;# 
  1690  019B                     	;# 
  1691  019B                     	;# 
  1692  019B                     	;# 
  1693  019B                     	;# 
  1694  019C                     	;# 
  1695  019C                     	;# 
  1696  019C                     	;# 
  1697  019D                     	;# 
  1698  019D                     	;# 
  1699  019D                     	;# 
  1700  019E                     	;# 
  1701  019E                     	;# 
  1702  019E                     	;# 
  1703  019F                     	;# 
  1704  019F                     	;# 
  1705  019F                     	;# 
  1706  019F                     	;# 
  1707  019F                     	;# 
  1708  020C                     	;# 
  1709  020D                     	;# 
  1710  020E                     	;# 
  1711  0211                     	;# 
  1712  0211                     	;# 
  1713  0212                     	;# 
  1714  0212                     	;# 
  1715  0213                     	;# 
  1716  0213                     	;# 
  1717  0214                     	;# 
  1718  0214                     	;# 
  1719  0215                     	;# 
  1720  0215                     	;# 
  1721  0215                     	;# 
  1722  0215                     	;# 
  1723  0216                     	;# 
  1724  0216                     	;# 
  1725  0217                     	;# 
  1726  0217                     	;# 
  1727  028C                     	;# 
  1728  028D                     	;# 
  1729  028E                     	;# 
  1730  0291                     	;# 
  1731  0291                     	;# 
  1732  0292                     	;# 
  1733  0293                     	;# 
  1734  0293                     	;# 
  1735  0298                     	;# 
  1736  0298                     	;# 
  1737  0299                     	;# 
  1738  029A                     	;# 
  1739  029A                     	;# 
  1740  029E                     	;# 
  1741  030C                     	;# 
  1742  030D                     	;# 
  1743  030E                     	;# 
  1744  038C                     	;# 
  1745  038D                     	;# 
  1746  038E                     	;# 
  1747  0391                     	;# 
  1748  0392                     	;# 
  1749  0393                     	;# 
  1750  0394                     	;# 
  1751  0395                     	;# 
  1752  0396                     	;# 
  1753  0397                     	;# 
  1754  0398                     	;# 
  1755  0399                     	;# 
  1756  0415                     	;# 
  1757  0416                     	;# 
  1758  0417                     	;# 
  1759  041C                     	;# 
  1760  041D                     	;# 
  1761  041E                     	;# 
  1762  0511                     	;# 
  1763  0515                     	;# 
  1764  0617                     	;# 
  1765  0618                     	;# 
  1766  0619                     	;# 
  1767  0619                     	;# 
  1768  061A                     	;# 
  1769  061B                     	;# 
  1770  061C                     	;# 
  1771  061C                     	;# 
  1772  0691                     	;# 
  1773  0692                     	;# 
  1774  0693                     	;# 
  1775  0694                     	;# 
  1776  0695                     	;# 
  1777  0696                     	;# 
  1778  0697                     	;# 
  1779  0698                     	;# 
  1780  0699                     	;# 
  1781  069A                     	;# 
  1782  069B                     	;# 
  1783  069C                     	;# 
  1784  069D                     	;# 
  1785  069E                     	;# 
  1786  069F                     	;# 
  1787  0E0F                     	;# 
  1788  0E10                     	;# 
  1789  0E11                     	;# 
  1790  0E12                     	;# 
  1791  0E13                     	;# 
  1792  0E14                     	;# 
  1793  0E15                     	;# 
  1794  0E17                     	;# 
  1795  0E20                     	;# 
  1796  0E21                     	;# 
  1797  0E22                     	;# 
  1798  0E24                     	;# 
  1799  0E25                     	;# 
  1800  0E28                     	;# 
  1801  0E29                     	;# 
  1802  0E2A                     	;# 
  1803  0E2B                     	;# 
  1804  0E90                     	;# 
  1805  0E91                     	;# 
  1806  0E92                     	;# 
  1807  0E94                     	;# 
  1808  0E95                     	;# 
  1809  0E9C                     	;# 
  1810  0E9D                     	;# 
  1811  0E9E                     	;# 
  1812  0E9F                     	;# 
  1813  0EA0                     	;# 
  1814  0EA1                     	;# 
  1815  0EA2                     	;# 
  1816  0EA3                     	;# 
  1817  0EA4                     	;# 
  1818  0EA5                     	;# 
  1819  0EA6                     	;# 
  1820  0EA7                     	;# 
  1821  0F0F                     	;# 
  1822  0F10                     	;# 
  1823  0F11                     	;# 
  1824  0F12                     	;# 
  1825  0F13                     	;# 
  1826  0F14                     	;# 
  1827  0F15                     	;# 
  1828  0F16                     	;# 
  1829  0F17                     	;# 
  1830  0F18                     	;# 
  1831  0F19                     	;# 
  1832  0F1A                     	;# 
  1833  0F1B                     	;# 
  1834  0F1C                     	;# 
  1835  0F1D                     	;# 
  1836  0F1E                     	;# 
  1837  0F1F                     	;# 
  1838  0F20                     	;# 
  1839  0F21                     	;# 
  1840  0F22                     	;# 
  1841  0F23                     	;# 
  1842  0F24                     	;# 
  1843  0F25                     	;# 
  1844  0F26                     	;# 
  1845  0F27                     	;# 
  1846  0F28                     	;# 
  1847  0F29                     	;# 
  1848  0F2A                     	;# 
  1849  0F2B                     	;# 
  1850  0F2C                     	;# 
  1851  0F2D                     	;# 
  1852  0FE4                     	;# 
  1853  0FE5                     	;# 
  1854  0FE6                     	;# 
  1855  0FE7                     	;# 
  1856  0FE8                     	;# 
  1857  0FE9                     	;# 
  1858  0FEA                     	;# 
  1859  0FEB                     	;# 
  1860  0FED                     	;# 
  1861  0FEE                     	;# 
  1862  0FEF                     	;# 
  1863  0000                     	;# 
  1864  0001                     	;# 
  1865  0002                     	;# 
  1866  0003                     	;# 
  1867  0004                     	;# 
  1868  0005                     	;# 
  1869  0006                     	;# 
  1870  0007                     	;# 
  1871  0008                     	;# 
  1872  0009                     	;# 
  1873  000A                     	;# 
  1874  000B                     	;# 
  1875  000C                     	;# 
  1876  000D                     	;# 
  1877  000E                     	;# 
  1878  0011                     	;# 
  1879  0012                     	;# 
  1880  0013                     	;# 
  1881  0015                     	;# 
  1882  0016                     	;# 
  1883  0016                     	;# 
  1884  0017                     	;# 
  1885  0018                     	;# 
  1886  0019                     	;# 
  1887  001A                     	;# 
  1888  001B                     	;# 
  1889  001C                     	;# 
  1890  008C                     	;# 
  1891  008D                     	;# 
  1892  008E                     	;# 
  1893  0091                     	;# 
  1894  0092                     	;# 
  1895  0093                     	;# 
  1896  0095                     	;# 
  1897  0096                     	;# 
  1898  0097                     	;# 
  1899  0098                     	;# 
  1900  0099                     	;# 
  1901  009A                     	;# 
  1902  009B                     	;# 
  1903  009B                     	;# 
  1904  009C                     	;# 
  1905  009D                     	;# 
  1906  009E                     	;# 
  1907  009F                     	;# 
  1908  010C                     	;# 
  1909  010D                     	;# 
  1910  010E                     	;# 
  1911  0111                     	;# 
  1912  0112                     	;# 
  1913  0113                     	;# 
  1914  0114                     	;# 
  1915  0115                     	;# 
  1916  0116                     	;# 
  1917  0117                     	;# 
  1918  0118                     	;# 
  1919  0119                     	;# 
  1920  011C                     	;# 
  1921  018C                     	;# 
  1922  018D                     	;# 
  1923  018E                     	;# 
  1924  0191                     	;# 
  1925  0191                     	;# 
  1926  0192                     	;# 
  1927  0193                     	;# 
  1928  0193                     	;# 
  1929  0194                     	;# 
  1930  0195                     	;# 
  1931  0196                     	;# 
  1932  0199                     	;# 
  1933  0199                     	;# 
  1934  0199                     	;# 
  1935  019A                     	;# 
  1936  019A                     	;# 
  1937  019A                     	;# 
  1938  019B                     	;# 
  1939  019B                     	;# 
  1940  019B                     	;# 
  1941  019B                     	;# 
  1942  019B                     	;# 
  1943  019C                     	;# 
  1944  019C                     	;# 
  1945  019C                     	;# 
  1946  019D                     	;# 
  1947  019D                     	;# 
  1948  019D                     	;# 
  1949  019E                     	;# 
  1950  019E                     	;# 
  1951  019E                     	;# 
  1952  019F                     	;# 
  1953  019F                     	;# 
  1954  019F                     	;# 
  1955  019F                     	;# 
  1956  019F                     	;# 
  1957  020C                     	;# 
  1958  020D                     	;# 
  1959  020E                     	;# 
  1960  0211                     	;# 
  1961  0211                     	;# 
  1962  0212                     	;# 
  1963  0212                     	;# 
  1964  0213                     	;# 
  1965  0213                     	;# 
  1966  0214                     	;# 
  1967  0214                     	;# 
  1968  0215                     	;# 
  1969  0215                     	;# 
  1970  0215                     	;# 
  1971  0215                     	;# 
  1972  0216                     	;# 
  1973  0216                     	;# 
  1974  0217                     	;# 
  1975  0217                     	;# 
  1976  028C                     	;# 
  1977  028D                     	;# 
  1978  028E                     	;# 
  1979  0291                     	;# 
  1980  0291                     	;# 
  1981  0292                     	;# 
  1982  0293                     	;# 
  1983  0293                     	;# 
  1984  0298                     	;# 
  1985  0298                     	;# 
  1986  0299                     	;# 
  1987  029A                     	;# 
  1988  029A                     	;# 
  1989  029E                     	;# 
  1990  030C                     	;# 
  1991  030D                     	;# 
  1992  030E                     	;# 
  1993  038C                     	;# 
  1994  038D                     	;# 
  1995  038E                     	;# 
  1996  0391                     	;# 
  1997  0392                     	;# 
  1998  0393                     	;# 
  1999  0394                     	;# 
  2000  0395                     	;# 
  2001  0396                     	;# 
  2002  0397                     	;# 
  2003  0398                     	;# 
  2004  0399                     	;# 
  2005  0415                     	;# 
  2006  0416                     	;# 
  2007  0417                     	;# 
  2008  041C                     	;# 
  2009  041D                     	;# 
  2010  041E                     	;# 
  2011  0511                     	;# 
  2012  0515                     	;# 
  2013  0617                     	;# 
  2014  0618                     	;# 
  2015  0619                     	;# 
  2016  0619                     	;# 
  2017  061A                     	;# 
  2018  061B                     	;# 
  2019  061C                     	;# 
  2020  061C                     	;# 
  2021  0691                     	;# 
  2022  0692                     	;# 
  2023  0693                     	;# 
  2024  0694                     	;# 
  2025  0695                     	;# 
  2026  0696                     	;# 
  2027  0697                     	;# 
  2028  0698                     	;# 
  2029  0699                     	;# 
  2030  069A                     	;# 
  2031  069B                     	;# 
  2032  069C                     	;# 
  2033  069D                     	;# 
  2034  069E                     	;# 
  2035  069F                     	;# 
  2036  0E0F                     	;# 
  2037  0E10                     	;# 
  2038  0E11                     	;# 
  2039  0E12                     	;# 
  2040  0E13                     	;# 
  2041  0E14                     	;# 
  2042  0E15                     	;# 
  2043  0E17                     	;# 
  2044  0E20                     	;# 
  2045  0E21                     	;# 
  2046  0E22                     	;# 
  2047  0E24                     	;# 
  2048  0E25                     	;# 
  2049  0E28                     	;# 
  2050  0E29                     	;# 
  2051  0E2A                     	;# 
  2052  0E2B                     	;# 
  2053  0E90                     	;# 
  2054  0E91                     	;# 
  2055  0E92                     	;# 
  2056  0E94                     	;# 
  2057  0E95                     	;# 
  2058  0E9C                     	;# 
  2059  0E9D                     	;# 
  2060  0E9E                     	;# 
  2061  0E9F                     	;# 
  2062  0EA0                     	;# 
  2063  0EA1                     	;# 
  2064  0EA2                     	;# 
  2065  0EA3                     	;# 
  2066  0EA4                     	;# 
  2067  0EA5                     	;# 
  2068  0EA6                     	;# 
  2069  0EA7                     	;# 
  2070  0F0F                     	;# 
  2071  0F10                     	;# 
  2072  0F11                     	;# 
  2073  0F12                     	;# 
  2074  0F13                     	;# 
  2075  0F14                     	;# 
  2076  0F15                     	;# 
  2077  0F16                     	;# 
  2078  0F17                     	;# 
  2079  0F18                     	;# 
  2080  0F19                     	;# 
  2081  0F1A                     	;# 
  2082  0F1B                     	;# 
  2083  0F1C                     	;# 
  2084  0F1D                     	;# 
  2085  0F1E                     	;# 
  2086  0F1F                     	;# 
  2087  0F20                     	;# 
  2088  0F21                     	;# 
  2089  0F22                     	;# 
  2090  0F23                     	;# 
  2091  0F24                     	;# 
  2092  0F25                     	;# 
  2093  0F26                     	;# 
  2094  0F27                     	;# 
  2095  0F28                     	;# 
  2096  0F29                     	;# 
  2097  0F2A                     	;# 
  2098  0F2B                     	;# 
  2099  0F2C                     	;# 
  2100  0F2D                     	;# 
  2101  0FE4                     	;# 
  2102  0FE5                     	;# 
  2103  0FE6                     	;# 
  2104  0FE7                     	;# 
  2105  0FE8                     	;# 
  2106  0FE9                     	;# 
  2107  0FEA                     	;# 
  2108  0FEB                     	;# 
  2109  0FED                     	;# 
  2110  0FEE                     	;# 
  2111  0FEF                     	;# 
  2112  0000                     	;# 
  2113  0001                     	;# 
  2114  0002                     	;# 
  2115  0003                     	;# 
  2116  0004                     	;# 
  2117  0005                     	;# 
  2118  0006                     	;# 
  2119  0007                     	;# 
  2120  0008                     	;# 
  2121  0009                     	;# 
  2122  000A                     	;# 
  2123  000B                     	;# 
  2124  000C                     	;# 
  2125  000D                     	;# 
  2126  000E                     	;# 
  2127  0011                     	;# 
  2128  0012                     	;# 
  2129  0013                     	;# 
  2130  0015                     	;# 
  2131  0016                     	;# 
  2132  0016                     	;# 
  2133  0017                     	;# 
  2134  0018                     	;# 
  2135  0019                     	;# 
  2136  001A                     	;# 
  2137  001B                     	;# 
  2138  001C                     	;# 
  2139  008C                     	;# 
  2140  008D                     	;# 
  2141  008E                     	;# 
  2142  0091                     	;# 
  2143  0092                     	;# 
  2144  0093                     	;# 
  2145  0095                     	;# 
  2146  0096                     	;# 
  2147  0097                     	;# 
  2148  0098                     	;# 
  2149  0099                     	;# 
  2150  009A                     	;# 
  2151  009B                     	;# 
  2152  009B                     	;# 
  2153  009C                     	;# 
  2154  009D                     	;# 
  2155  009E                     	;# 
  2156  009F                     	;# 
  2157  010C                     	;# 
  2158  010D                     	;# 
  2159  010E                     	;# 
  2160  0111                     	;# 
  2161  0112                     	;# 
  2162  0113                     	;# 
  2163  0114                     	;# 
  2164  0115                     	;# 
  2165  0116                     	;# 
  2166  0117                     	;# 
  2167  0118                     	;# 
  2168  0119                     	;# 
  2169  011C                     	;# 
  2170  018C                     	;# 
  2171  018D                     	;# 
  2172  018E                     	;# 
  2173  0191                     	;# 
  2174  0191                     	;# 
  2175  0192                     	;# 
  2176  0193                     	;# 
  2177  0193                     	;# 
  2178  0194                     	;# 
  2179  0195                     	;# 
  2180  0196                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  020C                     	;# 
  2207  020D                     	;# 
  2208  020E                     	;# 
  2209  0211                     	;# 
  2210  0211                     	;# 
  2211  0212                     	;# 
  2212  0212                     	;# 
  2213  0213                     	;# 
  2214  0213                     	;# 
  2215  0214                     	;# 
  2216  0214                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0216                     	;# 
  2222  0216                     	;# 
  2223  0217                     	;# 
  2224  0217                     	;# 
  2225  028C                     	;# 
  2226  028D                     	;# 
  2227  028E                     	;# 
  2228  0291                     	;# 
  2229  0291                     	;# 
  2230  0292                     	;# 
  2231  0293                     	;# 
  2232  0293                     	;# 
  2233  0298                     	;# 
  2234  0298                     	;# 
  2235  0299                     	;# 
  2236  029A                     	;# 
  2237  029A                     	;# 
  2238  029E                     	;# 
  2239  030C                     	;# 
  2240  030D                     	;# 
  2241  030E                     	;# 
  2242  038C                     	;# 
  2243  038D                     	;# 
  2244  038E                     	;# 
  2245  0391                     	;# 
  2246  0392                     	;# 
  2247  0393                     	;# 
  2248  0394                     	;# 
  2249  0395                     	;# 
  2250  0396                     	;# 
  2251  0397                     	;# 
  2252  0398                     	;# 
  2253  0399                     	;# 
  2254  0415                     	;# 
  2255  0416                     	;# 
  2256  0417                     	;# 
  2257  041C                     	;# 
  2258  041D                     	;# 
  2259  041E                     	;# 
  2260  0511                     	;# 
  2261  0515                     	;# 
  2262  0617                     	;# 
  2263  0618                     	;# 
  2264  0619                     	;# 
  2265  0619                     	;# 
  2266  061A                     	;# 
  2267  061B                     	;# 
  2268  061C                     	;# 
  2269  061C                     	;# 
  2270  0691                     	;# 
  2271  0692                     	;# 
  2272  0693                     	;# 
  2273  0694                     	;# 
  2274  0695                     	;# 
  2275  0696                     	;# 
  2276  0697                     	;# 
  2277  0698                     	;# 
  2278  0699                     	;# 
  2279  069A                     	;# 
  2280  069B                     	;# 
  2281  069C                     	;# 
  2282  069D                     	;# 
  2283  069E                     	;# 
  2284  069F                     	;# 
  2285  0E0F                     	;# 
  2286  0E10                     	;# 
  2287  0E11                     	;# 
  2288  0E12                     	;# 
  2289  0E13                     	;# 
  2290  0E14                     	;# 
  2291  0E15                     	;# 
  2292  0E17                     	;# 
  2293  0E20                     	;# 
  2294  0E21                     	;# 
  2295  0E22                     	;# 
  2296  0E24                     	;# 
  2297  0E25                     	;# 
  2298  0E28                     	;# 
  2299  0E29                     	;# 
  2300  0E2A                     	;# 
  2301  0E2B                     	;# 
  2302  0E90                     	;# 
  2303  0E91                     	;# 
  2304  0E92                     	;# 
  2305  0E94                     	;# 
  2306  0E95                     	;# 
  2307  0E9C                     	;# 
  2308  0E9D                     	;# 
  2309  0E9E                     	;# 
  2310  0E9F                     	;# 
  2311  0EA0                     	;# 
  2312  0EA1                     	;# 
  2313  0EA2                     	;# 
  2314  0EA3                     	;# 
  2315  0EA4                     	;# 
  2316  0EA5                     	;# 
  2317  0EA6                     	;# 
  2318  0EA7                     	;# 
  2319  0F0F                     	;# 
  2320  0F10                     	;# 
  2321  0F11                     	;# 
  2322  0F12                     	;# 
  2323  0F13                     	;# 
  2324  0F14                     	;# 
  2325  0F15                     	;# 
  2326  0F16                     	;# 
  2327  0F17                     	;# 
  2328  0F18                     	;# 
  2329  0F19                     	;# 
  2330  0F1A                     	;# 
  2331  0F1B                     	;# 
  2332  0F1C                     	;# 
  2333  0F1D                     	;# 
  2334  0F1E                     	;# 
  2335  0F1F                     	;# 
  2336  0F20                     	;# 
  2337  0F21                     	;# 
  2338  0F22                     	;# 
  2339  0F23                     	;# 
  2340  0F24                     	;# 
  2341  0F25                     	;# 
  2342  0F26                     	;# 
  2343  0F27                     	;# 
  2344  0F28                     	;# 
  2345  0F29                     	;# 
  2346  0F2A                     	;# 
  2347  0F2B                     	;# 
  2348  0F2C                     	;# 
  2349  0F2D                     	;# 
  2350  0FE4                     	;# 
  2351  0FE5                     	;# 
  2352  0FE6                     	;# 
  2353  0FE7                     	;# 
  2354  0FE8                     	;# 
  2355  0FE9                     	;# 
  2356  0FEA                     	;# 
  2357  0FEB                     	;# 
  2358  0FED                     	;# 
  2359  0FEE                     	;# 
  2360  0FEF                     	;# 
  2361  0000                     	;# 
  2362  0001                     	;# 
  2363  0002                     	;# 
  2364  0003                     	;# 
  2365  0004                     	;# 
  2366  0005                     	;# 
  2367  0006                     	;# 
  2368  0007                     	;# 
  2369  0008                     	;# 
  2370  0009                     	;# 
  2371  000A                     	;# 
  2372  000B                     	;# 
  2373  000C                     	;# 
  2374  000D                     	;# 
  2375  000E                     	;# 
  2376  0011                     	;# 
  2377  0012                     	;# 
  2378  0013                     	;# 
  2379  0015                     	;# 
  2380  0016                     	;# 
  2381  0016                     	;# 
  2382  0017                     	;# 
  2383  0018                     	;# 
  2384  0019                     	;# 
  2385  001A                     	;# 
  2386  001B                     	;# 
  2387  001C                     	;# 
  2388  008C                     	;# 
  2389  008D                     	;# 
  2390  008E                     	;# 
  2391  0091                     	;# 
  2392  0092                     	;# 
  2393  0093                     	;# 
  2394  0095                     	;# 
  2395  0096                     	;# 
  2396  0097                     	;# 
  2397  0098                     	;# 
  2398  0099                     	;# 
  2399  009A                     	;# 
  2400  009B                     	;# 
  2401  009B                     	;# 
  2402  009C                     	;# 
  2403  009D                     	;# 
  2404  009E                     	;# 
  2405  009F                     	;# 
  2406  010C                     	;# 
  2407  010D                     	;# 
  2408  010E                     	;# 
  2409  0111                     	;# 
  2410  0112                     	;# 
  2411  0113                     	;# 
  2412  0114                     	;# 
  2413  0115                     	;# 
  2414  0116                     	;# 
  2415  0117                     	;# 
  2416  0118                     	;# 
  2417  0119                     	;# 
  2418  011C                     	;# 
  2419  018C                     	;# 
  2420  018D                     	;# 
  2421  018E                     	;# 
  2422  0191                     	;# 
  2423  0191                     	;# 
  2424  0192                     	;# 
  2425  0193                     	;# 
  2426  0193                     	;# 
  2427  0194                     	;# 
  2428  0195                     	;# 
  2429  0196                     	;# 
  2430  0199                     	;# 
  2431  0199                     	;# 
  2432  0199                     	;# 
  2433  019A                     	;# 
  2434  019A                     	;# 
  2435  019A                     	;# 
  2436  019B                     	;# 
  2437  019B                     	;# 
  2438  019B                     	;# 
  2439  019B                     	;# 
  2440  019B                     	;# 
  2441  019C                     	;# 
  2442  019C                     	;# 
  2443  019C                     	;# 
  2444  019D                     	;# 
  2445  019D                     	;# 
  2446  019D                     	;# 
  2447  019E                     	;# 
  2448  019E                     	;# 
  2449  019E                     	;# 
  2450  019F                     	;# 
  2451  019F                     	;# 
  2452  019F                     	;# 
  2453  019F                     	;# 
  2454  019F                     	;# 
  2455  020C                     	;# 
  2456  020D                     	;# 
  2457  020E                     	;# 
  2458  0211                     	;# 
  2459  0211                     	;# 
  2460  0212                     	;# 
  2461  0212                     	;# 
  2462  0213                     	;# 
  2463  0213                     	;# 
  2464  0214                     	;# 
  2465  0214                     	;# 
  2466  0215                     	;# 
  2467  0215                     	;# 
  2468  0215                     	;# 
  2469  0215                     	;# 
  2470  0216                     	;# 
  2471  0216                     	;# 
  2472  0217                     	;# 
  2473  0217                     	;# 
  2474  028C                     	;# 
  2475  028D                     	;# 
  2476  028E                     	;# 
  2477  0291                     	;# 
  2478  0291                     	;# 
  2479  0292                     	;# 
  2480  0293                     	;# 
  2481  0293                     	;# 
  2482  0298                     	;# 
  2483  0298                     	;# 
  2484  0299                     	;# 
  2485  029A                     	;# 
  2486  029A                     	;# 
  2487  029E                     	;# 
  2488  030C                     	;# 
  2489  030D                     	;# 
  2490  030E                     	;# 
  2491  038C                     	;# 
  2492  038D                     	;# 
  2493  038E                     	;# 
  2494  0391                     	;# 
  2495  0392                     	;# 
  2496  0393                     	;# 
  2497  0394                     	;# 
  2498  0395                     	;# 
  2499  0396                     	;# 
  2500  0397                     	;# 
  2501  0398                     	;# 
  2502  0399                     	;# 
  2503  0415                     	;# 
  2504  0416                     	;# 
  2505  0417                     	;# 
  2506  041C                     	;# 
  2507  041D                     	;# 
  2508  041E                     	;# 
  2509  0511                     	;# 
  2510  0515                     	;# 
  2511  0617                     	;# 
  2512  0618                     	;# 
  2513  0619                     	;# 
  2514  0619                     	;# 
  2515  061A                     	;# 
  2516  061B                     	;# 
  2517  061C                     	;# 
  2518  061C                     	;# 
  2519  0691                     	;# 
  2520  0692                     	;# 
  2521  0693                     	;# 
  2522  0694                     	;# 
  2523  0695                     	;# 
  2524  0696                     	;# 
  2525  0697                     	;# 
  2526  0698                     	;# 
  2527  0699                     	;# 
  2528  069A                     	;# 
  2529  069B                     	;# 
  2530  069C                     	;# 
  2531  069D                     	;# 
  2532  069E                     	;# 
  2533  069F                     	;# 
  2534  0E0F                     	;# 
  2535  0E10                     	;# 
  2536  0E11                     	;# 
  2537  0E12                     	;# 
  2538  0E13                     	;# 
  2539  0E14                     	;# 
  2540  0E15                     	;# 
  2541  0E17                     	;# 
  2542  0E20                     	;# 
  2543  0E21                     	;# 
  2544  0E22                     	;# 
  2545  0E24                     	;# 
  2546  0E25                     	;# 
  2547  0E28                     	;# 
  2548  0E29                     	;# 
  2549  0E2A                     	;# 
  2550  0E2B                     	;# 
  2551  0E90                     	;# 
  2552  0E91                     	;# 
  2553  0E92                     	;# 
  2554  0E94                     	;# 
  2555  0E95                     	;# 
  2556  0E9C                     	;# 
  2557  0E9D                     	;# 
  2558  0E9E                     	;# 
  2559  0E9F                     	;# 
  2560  0EA0                     	;# 
  2561  0EA1                     	;# 
  2562  0EA2                     	;# 
  2563  0EA3                     	;# 
  2564  0EA4                     	;# 
  2565  0EA5                     	;# 
  2566  0EA6                     	;# 
  2567  0EA7                     	;# 
  2568  0F0F                     	;# 
  2569  0F10                     	;# 
  2570  0F11                     	;# 
  2571  0F12                     	;# 
  2572  0F13                     	;# 
  2573  0F14                     	;# 
  2574  0F15                     	;# 
  2575  0F16                     	;# 
  2576  0F17                     	;# 
  2577  0F18                     	;# 
  2578  0F19                     	;# 
  2579  0F1A                     	;# 
  2580  0F1B                     	;# 
  2581  0F1C                     	;# 
  2582  0F1D                     	;# 
  2583  0F1E                     	;# 
  2584  0F1F                     	;# 
  2585  0F20                     	;# 
  2586  0F21                     	;# 
  2587  0F22                     	;# 
  2588  0F23                     	;# 
  2589  0F24                     	;# 
  2590  0F25                     	;# 
  2591  0F26                     	;# 
  2592  0F27                     	;# 
  2593  0F28                     	;# 
  2594  0F29                     	;# 
  2595  0F2A                     	;# 
  2596  0F2B                     	;# 
  2597  0F2C                     	;# 
  2598  0F2D                     	;# 
  2599  0FE4                     	;# 
  2600  0FE5                     	;# 
  2601  0FE6                     	;# 
  2602  0FE7                     	;# 
  2603  0FE8                     	;# 
  2604  0FE9                     	;# 
  2605  0FEA                     	;# 
  2606  0FEB                     	;# 
  2607  0FED                     	;# 
  2608  0FEE                     	;# 
  2609  0FEF                     	;# 
  2610  0000                     	;# 
  2611  0001                     	;# 
  2612  0002                     	;# 
  2613  0003                     	;# 
  2614  0004                     	;# 
  2615  0005                     	;# 
  2616  0006                     	;# 
  2617  0007                     	;# 
  2618  0008                     	;# 
  2619  0009                     	;# 
  2620  000A                     	;# 
  2621  000B                     	;# 
  2622  000C                     	;# 
  2623  000D                     	;# 
  2624  000E                     	;# 
  2625  0011                     	;# 
  2626  0012                     	;# 
  2627  0013                     	;# 
  2628  0015                     	;# 
  2629  0016                     	;# 
  2630  0016                     	;# 
  2631  0017                     	;# 
  2632  0018                     	;# 
  2633  0019                     	;# 
  2634  001A                     	;# 
  2635  001B                     	;# 
  2636  001C                     	;# 
  2637  008C                     	;# 
  2638  008D                     	;# 
  2639  008E                     	;# 
  2640  0091                     	;# 
  2641  0092                     	;# 
  2642  0093                     	;# 
  2643  0095                     	;# 
  2644  0096                     	;# 
  2645  0097                     	;# 
  2646  0098                     	;# 
  2647  0099                     	;# 
  2648  009A                     	;# 
  2649  009B                     	;# 
  2650  009B                     	;# 
  2651  009C                     	;# 
  2652  009D                     	;# 
  2653  009E                     	;# 
  2654  009F                     	;# 
  2655  010C                     	;# 
  2656  010D                     	;# 
  2657  010E                     	;# 
  2658  0111                     	;# 
  2659  0112                     	;# 
  2660  0113                     	;# 
  2661  0114                     	;# 
  2662  0115                     	;# 
  2663  0116                     	;# 
  2664  0117                     	;# 
  2665  0118                     	;# 
  2666  0119                     	;# 
  2667  011C                     	;# 
  2668  018C                     	;# 
  2669  018D                     	;# 
  2670  018E                     	;# 
  2671  0191                     	;# 
  2672  0191                     	;# 
  2673  0192                     	;# 
  2674  0193                     	;# 
  2675  0193                     	;# 
  2676  0194                     	;# 
  2677  0195                     	;# 
  2678  0196                     	;# 
  2679  0199                     	;# 
  2680  0199                     	;# 
  2681  0199                     	;# 
  2682  019A                     	;# 
  2683  019A                     	;# 
  2684  019A                     	;# 
  2685  019B                     	;# 
  2686  019B                     	;# 
  2687  019B                     	;# 
  2688  019B                     	;# 
  2689  019B                     	;# 
  2690  019C                     	;# 
  2691  019C                     	;# 
  2692  019C                     	;# 
  2693  019D                     	;# 
  2694  019D                     	;# 
  2695  019D                     	;# 
  2696  019E                     	;# 
  2697  019E                     	;# 
  2698  019E                     	;# 
  2699  019F                     	;# 
  2700  019F                     	;# 
  2701  019F                     	;# 
  2702  019F                     	;# 
  2703  019F                     	;# 
  2704  020C                     	;# 
  2705  020D                     	;# 
  2706  020E                     	;# 
  2707  0211                     	;# 
  2708  0211                     	;# 
  2709  0212                     	;# 
  2710  0212                     	;# 
  2711  0213                     	;# 
  2712  0213                     	;# 
  2713  0214                     	;# 
  2714  0214                     	;# 
  2715  0215                     	;# 
  2716  0215                     	;# 
  2717  0215                     	;# 
  2718  0215                     	;# 
  2719  0216                     	;# 
  2720  0216                     	;# 
  2721  0217                     	;# 
  2722  0217                     	;# 
  2723  028C                     	;# 
  2724  028D                     	;# 
  2725  028E                     	;# 
  2726  0291                     	;# 
  2727  0291                     	;# 
  2728  0292                     	;# 
  2729  0293                     	;# 
  2730  0293                     	;# 
  2731  0298                     	;# 
  2732  0298                     	;# 
  2733  0299                     	;# 
  2734  029A                     	;# 
  2735  029A                     	;# 
  2736  029E                     	;# 
  2737  030C                     	;# 
  2738  030D                     	;# 
  2739  030E                     	;# 
  2740  038C                     	;# 
  2741  038D                     	;# 
  2742  038E                     	;# 
  2743  0391                     	;# 
  2744  0392                     	;# 
  2745  0393                     	;# 
  2746  0394                     	;# 
  2747  0395                     	;# 
  2748  0396                     	;# 
  2749  0397                     	;# 
  2750  0398                     	;# 
  2751  0399                     	;# 
  2752  0415                     	;# 
  2753  0416                     	;# 
  2754  0417                     	;# 
  2755  041C                     	;# 
  2756  041D                     	;# 
  2757  041E                     	;# 
  2758  0511                     	;# 
  2759  0515                     	;# 
  2760  0617                     	;# 
  2761  0618                     	;# 
  2762  0619                     	;# 
  2763  0619                     	;# 
  2764  061A                     	;# 
  2765  061B                     	;# 
  2766  061C                     	;# 
  2767  061C                     	;# 
  2768  0691                     	;# 
  2769  0692                     	;# 
  2770  0693                     	;# 
  2771  0694                     	;# 
  2772  0695                     	;# 
  2773  0696                     	;# 
  2774  0697                     	;# 
  2775  0698                     	;# 
  2776  0699                     	;# 
  2777  069A                     	;# 
  2778  069B                     	;# 
  2779  069C                     	;# 
  2780  069D                     	;# 
  2781  069E                     	;# 
  2782  069F                     	;# 
  2783  0E0F                     	;# 
  2784  0E10                     	;# 
  2785  0E11                     	;# 
  2786  0E12                     	;# 
  2787  0E13                     	;# 
  2788  0E14                     	;# 
  2789  0E15                     	;# 
  2790  0E17                     	;# 
  2791  0E20                     	;# 
  2792  0E21                     	;# 
  2793  0E22                     	;# 
  2794  0E24                     	;# 
  2795  0E25                     	;# 
  2796  0E28                     	;# 
  2797  0E29                     	;# 
  2798  0E2A                     	;# 
  2799  0E2B                     	;# 
  2800  0E90                     	;# 
  2801  0E91                     	;# 
  2802  0E92                     	;# 
  2803  0E94                     	;# 
  2804  0E95                     	;# 
  2805  0E9C                     	;# 
  2806  0E9D                     	;# 
  2807  0E9E                     	;# 
  2808  0E9F                     	;# 
  2809  0EA0                     	;# 
  2810  0EA1                     	;# 
  2811  0EA2                     	;# 
  2812  0EA3                     	;# 
  2813  0EA4                     	;# 
  2814  0EA5                     	;# 
  2815  0EA6                     	;# 
  2816  0EA7                     	;# 
  2817  0F0F                     	;# 
  2818  0F10                     	;# 
  2819  0F11                     	;# 
  2820  0F12                     	;# 
  2821  0F13                     	;# 
  2822  0F14                     	;# 
  2823  0F15                     	;# 
  2824  0F16                     	;# 
  2825  0F17                     	;# 
  2826  0F18                     	;# 
  2827  0F19                     	;# 
  2828  0F1A                     	;# 
  2829  0F1B                     	;# 
  2830  0F1C                     	;# 
  2831  0F1D                     	;# 
  2832  0F1E                     	;# 
  2833  0F1F                     	;# 
  2834  0F20                     	;# 
  2835  0F21                     	;# 
  2836  0F22                     	;# 
  2837  0F23                     	;# 
  2838  0F24                     	;# 
  2839  0F25                     	;# 
  2840  0F26                     	;# 
  2841  0F27                     	;# 
  2842  0F28                     	;# 
  2843  0F29                     	;# 
  2844  0F2A                     	;# 
  2845  0F2B                     	;# 
  2846  0F2C                     	;# 
  2847  0F2D                     	;# 
  2848  0FE4                     	;# 
  2849  0FE5                     	;# 
  2850  0FE6                     	;# 
  2851  0FE7                     	;# 
  2852  0FE8                     	;# 
  2853  0FE9                     	;# 
  2854  0FEA                     	;# 
  2855  0FEB                     	;# 
  2856  0FED                     	;# 
  2857  0FEE                     	;# 
  2858  0FEF                     	;# 
  2859  0000                     	;# 
  2860  0001                     	;# 
  2861  0002                     	;# 
  2862  0003                     	;# 
  2863  0004                     	;# 
  2864  0005                     	;# 
  2865  0006                     	;# 
  2866  0007                     	;# 
  2867  0008                     	;# 
  2868  0009                     	;# 
  2869  000A                     	;# 
  2870  000B                     	;# 
  2871  000C                     	;# 
  2872  000D                     	;# 
  2873  000E                     	;# 
  2874  0011                     	;# 
  2875  0012                     	;# 
  2876  0013                     	;# 
  2877  0015                     	;# 
  2878  0016                     	;# 
  2879  0016                     	;# 
  2880  0017                     	;# 
  2881  0018                     	;# 
  2882  0019                     	;# 
  2883  001A                     	;# 
  2884  001B                     	;# 
  2885  001C                     	;# 
  2886  008C                     	;# 
  2887  008D                     	;# 
  2888  008E                     	;# 
  2889  0091                     	;# 
  2890  0092                     	;# 
  2891  0093                     	;# 
  2892  0095                     	;# 
  2893  0096                     	;# 
  2894  0097                     	;# 
  2895  0098                     	;# 
  2896  0099                     	;# 
  2897  009A                     	;# 
  2898  009B                     	;# 
  2899  009B                     	;# 
  2900  009C                     	;# 
  2901  009D                     	;# 
  2902  009E                     	;# 
  2903  009F                     	;# 
  2904  010C                     	;# 
  2905  010D                     	;# 
  2906  010E                     	;# 
  2907  0111                     	;# 
  2908  0112                     	;# 
  2909  0113                     	;# 
  2910  0114                     	;# 
  2911  0115                     	;# 
  2912  0116                     	;# 
  2913  0117                     	;# 
  2914  0118                     	;# 
  2915  0119                     	;# 
  2916  011C                     	;# 
  2917  018C                     	;# 
  2918  018D                     	;# 
  2919  018E                     	;# 
  2920  0191                     	;# 
  2921  0191                     	;# 
  2922  0192                     	;# 
  2923  0193                     	;# 
  2924  0193                     	;# 
  2925  0194                     	;# 
  2926  0195                     	;# 
  2927  0196                     	;# 
  2928  0199                     	;# 
  2929  0199                     	;# 
  2930  0199                     	;# 
  2931  019A                     	;# 
  2932  019A                     	;# 
  2933  019A                     	;# 
  2934  019B                     	;# 
  2935  019B                     	;# 
  2936  019B                     	;# 
  2937  019B                     	;# 
  2938  019B                     	;# 
  2939  019C                     	;# 
  2940  019C                     	;# 
  2941  019C                     	;# 
  2942  019D                     	;# 
  2943  019D                     	;# 
  2944  019D                     	;# 
  2945  019E                     	;# 
  2946  019E                     	;# 
  2947  019E                     	;# 
  2948  019F                     	;# 
  2949  019F                     	;# 
  2950  019F                     	;# 
  2951  019F                     	;# 
  2952  019F                     	;# 
  2953  020C                     	;# 
  2954  020D                     	;# 
  2955  020E                     	;# 
  2956  0211                     	;# 
  2957  0211                     	;# 
  2958  0212                     	;# 
  2959  0212                     	;# 
  2960  0213                     	;# 
  2961  0213                     	;# 
  2962  0214                     	;# 
  2963  0214                     	;# 
  2964  0215                     	;# 
  2965  0215                     	;# 
  2966  0215                     	;# 
  2967  0215                     	;# 
  2968  0216                     	;# 
  2969  0216                     	;# 
  2970  0217                     	;# 
  2971  0217                     	;# 
  2972  028C                     	;# 
  2973  028D                     	;# 
  2974  028E                     	;# 
  2975  0291                     	;# 
  2976  0291                     	;# 
  2977  0292                     	;# 
  2978  0293                     	;# 
  2979  0293                     	;# 
  2980  0298                     	;# 
  2981  0298                     	;# 
  2982  0299                     	;# 
  2983  029A                     	;# 
  2984  029A                     	;# 
  2985  029E                     	;# 
  2986  030C                     	;# 
  2987  030D                     	;# 
  2988  030E                     	;# 
  2989  038C                     	;# 
  2990  038D                     	;# 
  2991  038E                     	;# 
  2992  0391                     	;# 
  2993  0392                     	;# 
  2994  0393                     	;# 
  2995  0394                     	;# 
  2996  0395                     	;# 
  2997  0396                     	;# 
  2998  0397                     	;# 
  2999  0398                     	;# 
  3000  0399                     	;# 
  3001  0415                     	;# 
  3002  0416                     	;# 
  3003  0417                     	;# 
  3004  041C                     	;# 
  3005  041D                     	;# 
  3006  041E                     	;# 
  3007  0511                     	;# 
  3008  0515                     	;# 
  3009  0617                     	;# 
  3010  0618                     	;# 
  3011  0619                     	;# 
  3012  0619                     	;# 
  3013  061A                     	;# 
  3014  061B                     	;# 
  3015  061C                     	;# 
  3016  061C                     	;# 
  3017  0691                     	;# 
  3018  0692                     	;# 
  3019  0693                     	;# 
  3020  0694                     	;# 
  3021  0695                     	;# 
  3022  0696                     	;# 
  3023  0697                     	;# 
  3024  0698                     	;# 
  3025  0699                     	;# 
  3026  069A                     	;# 
  3027  069B                     	;# 
  3028  069C                     	;# 
  3029  069D                     	;# 
  3030  069E                     	;# 
  3031  069F                     	;# 
  3032  0E0F                     	;# 
  3033  0E10                     	;# 
  3034  0E11                     	;# 
  3035  0E12                     	;# 
  3036  0E13                     	;# 
  3037  0E14                     	;# 
  3038  0E15                     	;# 
  3039  0E17                     	;# 
  3040  0E20                     	;# 
  3041  0E21                     	;# 
  3042  0E22                     	;# 
  3043  0E24                     	;# 
  3044  0E25                     	;# 
  3045  0E28                     	;# 
  3046  0E29                     	;# 
  3047  0E2A                     	;# 
  3048  0E2B                     	;# 
  3049  0E90                     	;# 
  3050  0E91                     	;# 
  3051  0E92                     	;# 
  3052  0E94                     	;# 
  3053  0E95                     	;# 
  3054  0E9C                     	;# 
  3055  0E9D                     	;# 
  3056  0E9E                     	;# 
  3057  0E9F                     	;# 
  3058  0EA0                     	;# 
  3059  0EA1                     	;# 
  3060  0EA2                     	;# 
  3061  0EA3                     	;# 
  3062  0EA4                     	;# 
  3063  0EA5                     	;# 
  3064  0EA6                     	;# 
  3065  0EA7                     	;# 
  3066  0F0F                     	;# 
  3067  0F10                     	;# 
  3068  0F11                     	;# 
  3069  0F12                     	;# 
  3070  0F13                     	;# 
  3071  0F14                     	;# 
  3072  0F15                     	;# 
  3073  0F16                     	;# 
  3074  0F17                     	;# 
  3075  0F18                     	;# 
  3076  0F19                     	;# 
  3077  0F1A                     	;# 
  3078  0F1B                     	;# 
  3079  0F1C                     	;# 
  3080  0F1D                     	;# 
  3081  0F1E                     	;# 
  3082  0F1F                     	;# 
  3083  0F20                     	;# 
  3084  0F21                     	;# 
  3085  0F22                     	;# 
  3086  0F23                     	;# 
  3087  0F24                     	;# 
  3088  0F25                     	;# 
  3089  0F26                     	;# 
  3090  0F27                     	;# 
  3091  0F28                     	;# 
  3092  0F29                     	;# 
  3093  0F2A                     	;# 
  3094  0F2B                     	;# 
  3095  0F2C                     	;# 
  3096  0F2D                     	;# 
  3097  0FE4                     	;# 
  3098  0FE5                     	;# 
  3099  0FE6                     	;# 
  3100  0FE7                     	;# 
  3101  0FE8                     	;# 
  3102  0FE9                     	;# 
  3103  0FEA                     	;# 
  3104  0FEB                     	;# 
  3105  0FED                     	;# 
  3106  0FEE                     	;# 
  3107  0FEF                     	;# 
  3108  0000                     	;# 
  3109  0001                     	;# 
  3110  0002                     	;# 
  3111  0003                     	;# 
  3112  0004                     	;# 
  3113  0005                     	;# 
  3114  0006                     	;# 
  3115  0007                     	;# 
  3116  0008                     	;# 
  3117  0009                     	;# 
  3118  000A                     	;# 
  3119  000B                     	;# 
  3120  000C                     	;# 
  3121  000D                     	;# 
  3122  000E                     	;# 
  3123  0011                     	;# 
  3124  0012                     	;# 
  3125  0013                     	;# 
  3126  0015                     	;# 
  3127  0016                     	;# 
  3128  0016                     	;# 
  3129  0017                     	;# 
  3130  0018                     	;# 
  3131  0019                     	;# 
  3132  001A                     	;# 
  3133  001B                     	;# 
  3134  001C                     	;# 
  3135  008C                     	;# 
  3136  008D                     	;# 
  3137  008E                     	;# 
  3138  0091                     	;# 
  3139  0092                     	;# 
  3140  0093                     	;# 
  3141  0095                     	;# 
  3142  0096                     	;# 
  3143  0097                     	;# 
  3144  0098                     	;# 
  3145  0099                     	;# 
  3146  009A                     	;# 
  3147  009B                     	;# 
  3148  009B                     	;# 
  3149  009C                     	;# 
  3150  009D                     	;# 
  3151  009E                     	;# 
  3152  009F                     	;# 
  3153  010C                     	;# 
  3154  010D                     	;# 
  3155  010E                     	;# 
  3156  0111                     	;# 
  3157  0112                     	;# 
  3158  0113                     	;# 
  3159  0114                     	;# 
  3160  0115                     	;# 
  3161  0116                     	;# 
  3162  0117                     	;# 
  3163  0118                     	;# 
  3164  0119                     	;# 
  3165  011C                     	;# 
  3166  018C                     	;# 
  3167  018D                     	;# 
  3168  018E                     	;# 
  3169  0191                     	;# 
  3170  0191                     	;# 
  3171  0192                     	;# 
  3172  0193                     	;# 
  3173  0193                     	;# 
  3174  0194                     	;# 
  3175  0195                     	;# 
  3176  0196                     	;# 
  3177  0199                     	;# 
  3178  0199                     	;# 
  3179  0199                     	;# 
  3180  019A                     	;# 
  3181  019A                     	;# 
  3182  019A                     	;# 
  3183  019B                     	;# 
  3184  019B                     	;# 
  3185  019B                     	;# 
  3186  019B                     	;# 
  3187  019B                     	;# 
  3188  019C                     	;# 
  3189  019C                     	;# 
  3190  019C                     	;# 
  3191  019D                     	;# 
  3192  019D                     	;# 
  3193  019D                     	;# 
  3194  019E                     	;# 
  3195  019E                     	;# 
  3196  019E                     	;# 
  3197  019F                     	;# 
  3198  019F                     	;# 
  3199  019F                     	;# 
  3200  019F                     	;# 
  3201  019F                     	;# 
  3202  020C                     	;# 
  3203  020D                     	;# 
  3204  020E                     	;# 
  3205  0211                     	;# 
  3206  0211                     	;# 
  3207  0212                     	;# 
  3208  0212                     	;# 
  3209  0213                     	;# 
  3210  0213                     	;# 
  3211  0214                     	;# 
  3212  0214                     	;# 
  3213  0215                     	;# 
  3214  0215                     	;# 
  3215  0215                     	;# 
  3216  0215                     	;# 
  3217  0216                     	;# 
  3218  0216                     	;# 
  3219  0217                     	;# 
  3220  0217                     	;# 
  3221  028C                     	;# 
  3222  028D                     	;# 
  3223  028E                     	;# 
  3224  0291                     	;# 
  3225  0291                     	;# 
  3226  0292                     	;# 
  3227  0293                     	;# 
  3228  0293                     	;# 
  3229  0298                     	;# 
  3230  0298                     	;# 
  3231  0299                     	;# 
  3232  029A                     	;# 
  3233  029A                     	;# 
  3234  029E                     	;# 
  3235  030C                     	;# 
  3236  030D                     	;# 
  3237  030E                     	;# 
  3238  038C                     	;# 
  3239  038D                     	;# 
  3240  038E                     	;# 
  3241  0391                     	;# 
  3242  0392                     	;# 
  3243  0393                     	;# 
  3244  0394                     	;# 
  3245  0395                     	;# 
  3246  0396                     	;# 
  3247  0397                     	;# 
  3248  0398                     	;# 
  3249  0399                     	;# 
  3250  0415                     	;# 
  3251  0416                     	;# 
  3252  0417                     	;# 
  3253  041C                     	;# 
  3254  041D                     	;# 
  3255  041E                     	;# 
  3256  0511                     	;# 
  3257  0515                     	;# 
  3258  0617                     	;# 
  3259  0618                     	;# 
  3260  0619                     	;# 
  3261  0619                     	;# 
  3262  061A                     	;# 
  3263  061B                     	;# 
  3264  061C                     	;# 
  3265  061C                     	;# 
  3266  0691                     	;# 
  3267  0692                     	;# 
  3268  0693                     	;# 
  3269  0694                     	;# 
  3270  0695                     	;# 
  3271  0696                     	;# 
  3272  0697                     	;# 
  3273  0698                     	;# 
  3274  0699                     	;# 
  3275  069A                     	;# 
  3276  069B                     	;# 
  3277  069C                     	;# 
  3278  069D                     	;# 
  3279  069E                     	;# 
  3280  069F                     	;# 
  3281  0E0F                     	;# 
  3282  0E10                     	;# 
  3283  0E11                     	;# 
  3284  0E12                     	;# 
  3285  0E13                     	;# 
  3286  0E14                     	;# 
  3287  0E15                     	;# 
  3288  0E17                     	;# 
  3289  0E20                     	;# 
  3290  0E21                     	;# 
  3291  0E22                     	;# 
  3292  0E24                     	;# 
  3293  0E25                     	;# 
  3294  0E28                     	;# 
  3295  0E29                     	;# 
  3296  0E2A                     	;# 
  3297  0E2B                     	;# 
  3298  0E90                     	;# 
  3299  0E91                     	;# 
  3300  0E92                     	;# 
  3301  0E94                     	;# 
  3302  0E95                     	;# 
  3303  0E9C                     	;# 
  3304  0E9D                     	;# 
  3305  0E9E                     	;# 
  3306  0E9F                     	;# 
  3307  0EA0                     	;# 
  3308  0EA1                     	;# 
  3309  0EA2                     	;# 
  3310  0EA3                     	;# 
  3311  0EA4                     	;# 
  3312  0EA5                     	;# 
  3313  0EA6                     	;# 
  3314  0EA7                     	;# 
  3315  0F0F                     	;# 
  3316  0F10                     	;# 
  3317  0F11                     	;# 
  3318  0F12                     	;# 
  3319  0F13                     	;# 
  3320  0F14                     	;# 
  3321  0F15                     	;# 
  3322  0F16                     	;# 
  3323  0F17                     	;# 
  3324  0F18                     	;# 
  3325  0F19                     	;# 
  3326  0F1A                     	;# 
  3327  0F1B                     	;# 
  3328  0F1C                     	;# 
  3329  0F1D                     	;# 
  3330  0F1E                     	;# 
  3331  0F1F                     	;# 
  3332  0F20                     	;# 
  3333  0F21                     	;# 
  3334  0F22                     	;# 
  3335  0F23                     	;# 
  3336  0F24                     	;# 
  3337  0F25                     	;# 
  3338  0F26                     	;# 
  3339  0F27                     	;# 
  3340  0F28                     	;# 
  3341  0F29                     	;# 
  3342  0F2A                     	;# 
  3343  0F2B                     	;# 
  3344  0F2C                     	;# 
  3345  0F2D                     	;# 
  3346  0FE4                     	;# 
  3347  0FE5                     	;# 
  3348  0FE6                     	;# 
  3349  0FE7                     	;# 
  3350  0FE8                     	;# 
  3351  0FE9                     	;# 
  3352  0FEA                     	;# 
  3353  0FEB                     	;# 
  3354  0FED                     	;# 
  3355  0FEE                     	;# 
  3356  0FEF                     	;# 
  3357                           
  3358 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3359  0000                     
  3360 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3361  0000                     
  3362 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3363  0000                     
  3364                           	psect	idataCOMMON
  3365  0003                     __pidataCOMMON:	
  3366                           
  3367                           ;initializer for _dc_frequency_flag
  3368  0003  3401               	retlw	1
  3369                           
  3370                           	psect	idataBANK1
  3371  0F3B                     __pidataBANK1:	
  3372                           
  3373                           ;initializer for _maxFrequencyIndex
  3374  0F3B  3406               	retlw	6
  3375  0F3C  3400               	retlw	0
  3376                           
  3377                           ;initializer for _maxCurrentIndex
  3378  0F3D  340B               	retlw	11
  3379  0F3E  3400               	retlw	0
  3380                           
  3381                           ;initializer for _currentIsOn
  3382  0F3F  3401               	retlw	1
  3383                           
  3384                           ;initializer for _currentValue
  3385  0F40  3400               	retlw	0
  3386  0F41  3400               	retlw	0
  3387  0F42  341E               	retlw	30
  3388  0F43  3400               	retlw	0
  3389  0F44  3432               	retlw	50
  3390  0F45  3400               	retlw	0
  3391  0F46  3446               	retlw	70
  3392  0F47  3400               	retlw	0
  3393  0F48  345A               	retlw	90
  3394  0F49  3400               	retlw	0
  3395  0F4A  346E               	retlw	110
  3396  0F4B  3400               	retlw	0
  3397  0F4C  3482               	retlw	130
  3398  0F4D  3400               	retlw	0
  3399  0F4E  34A0               	retlw	160
  3400  0F4F  3400               	retlw	0
  3401  0F50  34BE               	retlw	190
  3402  0F51  3400               	retlw	0
  3403  0F52  34DC               	retlw	220
  3404  0F53  3400               	retlw	0
  3405  0F54  34FA               	retlw	250
  3406  0F55  3400               	retlw	0
  3407                           
  3408                           ;initializer for _frequencyValue
  3409  0F56  3400               	retlw	0
  3410  0F57  3400               	retlw	0
  3411  0F58  3432               	retlw	50
  3412  0F59  3400               	retlw	0
  3413  0F5A  3464               	retlw	100
  3414  0F5B  3400               	retlw	0
  3415  0F5C  3478               	retlw	120
  3416  0F5D  3400               	retlw	0
  3417  0F5E  3482               	retlw	130
  3418  0F5F  3400               	retlw	0
  3419  0F60  348C               	retlw	140
  3420  0F61  3400               	retlw	0
  3421  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3422  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3423                           
  3424                           	psect	_HEF_persistent_state_text
  3425  0FE0                     __p_HEF_persistent_state_text:	
  3426  0FE0                     _HEF_persistent_state:	
  3427  0FE0  3405               	retlw	5
  3428  0FE1  3403               	retlw	3
  3429  0FE2  3400               	retlw	0
  3430  0FE3  3400               	retlw	0
  3431  0FE4  3400               	retlw	0
  3432  0FE5  3400               	retlw	0
  3433  0FE6  3400               	retlw	0
  3434  0FE7  3400               	retlw	0
  3435  0FE8  3400               	retlw	0
  3436  0FE9  3400               	retlw	0
  3437  0FEA  3400               	retlw	0
  3438  0FEB  3400               	retlw	0
  3439  0FEC  3400               	retlw	0
  3440  0FED  3400               	retlw	0
  3441  0FEE  3400               	retlw	0
  3442  0FEF  3400               	retlw	0
  3443  0FF0  3400               	retlw	0
  3444  0FF1  3400               	retlw	0
  3445  0FF2  3400               	retlw	0
  3446  0FF3  3400               	retlw	0
  3447  0FF4  3400               	retlw	0
  3448  0FF5  3400               	retlw	0
  3449  0FF6  3400               	retlw	0
  3450  0FF7  3400               	retlw	0
  3451  0FF8  3400               	retlw	0
  3452  0FF9  3400               	retlw	0
  3453  0FFA  3400               	retlw	0
  3454  0FFB  3400               	retlw	0
  3455  0FFC  3400               	retlw	0
  3456  0FFD  3400               	retlw	0
  3457  0FFE  3400               	retlw	0
  3458  0FFF  3400               	retlw	0
  3459  1000                     __end_of_HEF_persistent_state:	
  3460                           
  3461                           	psect	nvBANK1
  3462  00DE                     __pnvBANK1:	
  3463  00DE                     _TMR4_InterruptHandler:	
  3464  00DE                     	ds	2
  3465  00E0                     _TMR0_InterruptHandler:	
  3466  00E0                     	ds	2
  3467  00E2                     _INT_InterruptHandler:	
  3468  00E2                     	ds	2
  3469  00E4                     _EUSART_OverrunErrorHandler:	
  3470  00E4                     	ds	2
  3471  00E6                     _EUSART_FramingErrorHandler:	
  3472  00E6                     	ds	2
  3473  00E8                     _frequencyIndex:	
  3474  00E8                     	ds	2
  3475  00EA                     _currentIndex:	
  3476  00EA                     	ds	2
  3477                           
  3478                           	psect	nvBANK2
  3479  0161                     __pnvBANK2:	
  3480  0161                     _EUSART_ErrorHandler:	
  3481  0161                     	ds	2
  3482  001C                     _T2CONbits	set	28
  3483  001C                     _T2CON	set	28
  3484  001A                     _TMR2	set	26
  3485  001B                     _PR2	set	27
  3486  0015                     _TMR0	set	21
  3487  0011                     _PIR1bits	set	17
  3488  0012                     _PIR2bits	set	18
  3489  000B                     _INTCONbits	set	11
  3490  009D                     _ADCON0bits	set	157
  3491  009E                     _ADCON1	set	158
  3492  009D                     _ADCON0	set	157
  3493  0095                     _OPTION_REG	set	149
  3494  0092                     _PIE2bits	set	146
  3495  0095                     _OPTION_REGbits	set	149
  3496  008E                     _TRISC	set	142
  3497  008D                     _TRISB	set	141
  3498  008C                     _TRISA	set	140
  3499  0097                     _WDTCON	set	151
  3500  0098                     _OSCTUNE	set	152
  3501  009A                     _OSCSTAT	set	154
  3502  0099                     _OSCCON	set	153
  3503  009B                     _ADRES	set	155
  3504  0117                     _FVRCONbits	set	279
  3505  0117                     _FVRCON	set	279
  3506  010E                     _LATC	set	270
  3507  010D                     _LATB	set	269
  3508  010C                     _LATA	set	268
  3509  0116                     _BORCON	set	278
  3510  0119                     _DAC1CON1	set	281
  3511  0118                     _DAC1CON0	set	280
  3512  0196                     _PMCON2	set	406
  3513  0193                     _PMDATL	set	403
  3514  0194                     _PMDATH	set	404
  3515  0195                     _PMCON1bits	set	405
  3516  0192                     _PMADRH	set	402
  3517  0191                     _PMADRL	set	401
  3518  019A                     _TX1REG	set	410
  3519  0199                     _RC1REG	set	409
  3520  019D                     _RC1STAbits	set	413
  3521  019E                     _TX1STAbits	set	414
  3522  019C                     _SP1BRGH	set	412
  3523  019B                     _SP1BRGL	set	411
  3524  019E                     _TX1STA	set	414
  3525  019D                     _RC1STA	set	413
  3526  019F                     _BAUD1CON	set	415
  3527  018C                     _ANSELA	set	396
  3528  018D                     _ANSELB	set	397
  3529  018E                     _ANSELC	set	398
  3530  020E                     _WPUC	set	526
  3531  020C                     _WPUA	set	524
  3532  020D                     _WPUB	set	525
  3533  0291                     _CCPR1L	set	657
  3534  0293                     _CCP1CONbits	set	659
  3535  029E                     _CCPTMRSbits	set	670
  3536  028E                     _ODCONC	set	654
  3537  028D                     _ODCONB	set	653
  3538  028C                     _ODCONA	set	652
  3539  030E                     _SLRCONC	set	782
  3540  030D                     _SLRCONB	set	781
  3541  030C                     _SLRCONA	set	780
  3542  038E                     _INLVLC	set	910
  3543  038D                     _INLVLB	set	909
  3544  038C                     _INLVLA	set	908
  3545  0417                     _T4CONbits	set	1047
  3546  0417                     _T4CON	set	1047
  3547  0415                     _TMR4	set	1045
  3548  0416                     _PR4	set	1046
  3549  0515                     _OPA2CON	set	1301
  3550  0511                     _OPA1CON	set	1297
  3551  061C                     _PWM4CONbits	set	1564
  3552  061A                     _PWM4DCLbits	set	1562
  3553  061B                     _PWM4DCH	set	1563
  3554  0619                     _PWM3CONbits	set	1561
  3555  0617                     _PWM3DCLbits	set	1559
  3556  0618                     _PWM3DCH	set	1560
  3557  0E24                     _RXPPS	set	3620
  3558  0E10                     _INTPPS	set	3600
  3559  0EA5                     _RC5PPS	set	3749
  3560  0E95                     _RA5PPS	set	3733
  3561  0EA4                     _RC4PPS	set	3748
  3562  0E9F                     _RB7PPS	set	3743
  3563                           
  3564                           	psect	stringtext1
  3565  0800                     __pstringtext1:	
  3566  0800                     STR_5:	
  3567  0800  340A               	retlw	10
  3568  0801  3420               	retlw	32	;' '
  3569  0802  3472               	retlw	114	;'r'
  3570  0803  3465               	retlw	101	;'e'
  3571  0804  3473               	retlw	115	;'s'
  3572  0805  3465               	retlw	101	;'e'
  3573  0806  3474               	retlw	116	;'t'
  3574  0807  3420               	retlw	32	;' '
  3575  0808  3476               	retlw	118	;'v'
  3576  0809  3461               	retlw	97	;'a'
  3577  080A  346C               	retlw	108	;'l'
  3578  080B  3475               	retlw	117	;'u'
  3579  080C  3465               	retlw	101	;'e'
  3580  080D  3420               	retlw	32	;' '
  3581  080E  3473               	retlw	115	;'s'
  3582  080F  3465               	retlw	101	;'e'
  3583  0810  346C               	retlw	108	;'l'
  3584  0811  3465               	retlw	101	;'e'
  3585  0812  3463               	retlw	99	;'c'
  3586  0813  3474               	retlw	116	;'t'
  3587  0814  3465               	retlw	101	;'e'
  3588  0815  3464               	retlw	100	;'d'
  3589  0816  3400               	retlw	0
  3590                           
  3591                           	psect	stringtext2
  3592  0817                     __pstringtext2:	
  3593  0817                     STR_1:	
  3594  0817  340A               	retlw	10
  3595  0818  3420               	retlw	32	;' '
  3596  0819  3446               	retlw	70	;'F'
  3597  081A  3472               	retlw	114	;'r'
  3598  081B  3465               	retlw	101	;'e'
  3599  081C  3471               	retlw	113	;'q'
  3600  081D  3475               	retlw	117	;'u'
  3601  081E  3465               	retlw	101	;'e'
  3602  081F  346E               	retlw	110	;'n'
  3603  0820  3463               	retlw	99	;'c'
  3604  0821  3479               	retlw	121	;'y'
  3605  0822  3420               	retlw	32	;' '
  3606  0823  3473               	retlw	115	;'s'
  3607  0824  3465               	retlw	101	;'e'
  3608  0825  346C               	retlw	108	;'l'
  3609  0826  3465               	retlw	101	;'e'
  3610  0827  3463               	retlw	99	;'c'
  3611  0828  3474               	retlw	116	;'t'
  3612  0829  3465               	retlw	101	;'e'
  3613  082A  3464               	retlw	100	;'d'
  3614  082B  3400               	retlw	0
  3615                           
  3616                           	psect	stringtext3
  3617  082C                     __pstringtext3:	
  3618  082C                     STR_4:	
  3619  082C  340A               	retlw	10
  3620  082D  3420               	retlw	32	;' '
  3621  082E  3464               	retlw	100	;'d'
  3622  082F  3465               	retlw	101	;'e'
  3623  0830  3463               	retlw	99	;'c'
  3624  0831  3472               	retlw	114	;'r'
  3625  0832  3465               	retlw	101	;'e'
  3626  0833  3461               	retlw	97	;'a'
  3627  0834  3473               	retlw	115	;'s'
  3628  0835  3465               	retlw	101	;'e'
  3629  0836  3420               	retlw	32	;' '
  3630  0837  3473               	retlw	115	;'s'
  3631  0838  3465               	retlw	101	;'e'
  3632  0839  346C               	retlw	108	;'l'
  3633  083A  3465               	retlw	101	;'e'
  3634  083B  3463               	retlw	99	;'c'
  3635  083C  3474               	retlw	116	;'t'
  3636  083D  3465               	retlw	101	;'e'
  3637  083E  3464               	retlw	100	;'d'
  3638  083F  3400               	retlw	0
  3639                           
  3640                           	psect	stringtext4
  3641  0840                     __pstringtext4:	
  3642  0840                     STR_3:	
  3643  0840  340A               	retlw	10
  3644  0841  3420               	retlw	32	;' '
  3645  0842  3469               	retlw	105	;'i'
  3646  0843  346E               	retlw	110	;'n'
  3647  0844  3463               	retlw	99	;'c'
  3648  0845  3472               	retlw	114	;'r'
  3649  0846  3465               	retlw	101	;'e'
  3650  0847  3461               	retlw	97	;'a'
  3651  0848  3473               	retlw	115	;'s'
  3652  0849  3465               	retlw	101	;'e'
  3653  084A  3420               	retlw	32	;' '
  3654  084B  3473               	retlw	115	;'s'
  3655  084C  3465               	retlw	101	;'e'
  3656  084D  346C               	retlw	108	;'l'
  3657  084E  3465               	retlw	101	;'e'
  3658  084F  3463               	retlw	99	;'c'
  3659  0850  3474               	retlw	116	;'t'
  3660  0851  3465               	retlw	101	;'e'
  3661  0852  3464               	retlw	100	;'d'
  3662  0853  3400               	retlw	0
  3663                           
  3664                           	psect	stringtext5
  3665  0854                     __pstringtext5:	
  3666  0854                     STR_2:	
  3667  0854  340A               	retlw	10
  3668  0855  3420               	retlw	32	;' '
  3669  0856  3463               	retlw	99	;'c'
  3670  0857  3475               	retlw	117	;'u'
  3671  0858  3472               	retlw	114	;'r'
  3672  0859  3472               	retlw	114	;'r'
  3673  085A  3465               	retlw	101	;'e'
  3674  085B  346E               	retlw	110	;'n'
  3675  085C  3474               	retlw	116	;'t'
  3676  085D  3420               	retlw	32	;' '
  3677  085E  3473               	retlw	115	;'s'
  3678  085F  3465               	retlw	101	;'e'
  3679  0860  346C               	retlw	108	;'l'
  3680  0861  3465               	retlw	101	;'e'
  3681  0862  3463               	retlw	99	;'c'
  3682  0863  3474               	retlw	116	;'t'
  3683  0864  3465               	retlw	101	;'e'
  3684  0865  3464               	retlw	100	;'d'
  3685  0866  3400               	retlw	0
  3686                           
  3687                           	psect	stringtext6
  3688  0000                     __pstringtext6:	
  3689                           
  3690                           ; #config settings
  3691  0000                     
  3692                           	psect	cinit
  3693  0040                     start_initialization:	
  3694  0040                     __initialization:	
  3695                           
  3696                           ; Initialize objects allocated to COMMON
  3697  0040  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  3698  0043  00FA               	movwf	__pdataCOMMON& (0+127)
  3699                           
  3700                           ; Initialize objects allocated to BANK1
  3701  0044  303B               	movlw	low __pidataBANK1
  3702  0045  0084               	movwf	4
  3703  0046  308F               	movlw	(high __pidataBANK1)| (0+128)
  3704  0047  0085               	movwf	5
  3705  0048  30A0               	movlw	low __pdataBANK1
  3706  0049  0086               	movwf	6
  3707  004A  3000               	movlw	high __pdataBANK1
  3708  004B  0087               	movwf	7
  3709  004C  3027               	movlw	39
  3710  004D  318D  25A7  3180   	fcall	init_ram
  3711                           
  3712                           ; Clear objects allocated to COMMON
  3713  0050  01F8               	clrf	__pbssCOMMON& (0+127)
  3714  0051  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  3715                           
  3716                           ; Clear objects allocated to BANK1
  3717  0052  30C7               	movlw	low __pbssBANK1
  3718  0053  0084               	movwf	4
  3719  0054  3000               	movlw	high __pbssBANK1
  3720  0055  0085               	movwf	5
  3721  0056  3017               	movlw	23
  3722  0057  318D  25A1  3180   	fcall	clear_ram0
  3723                           
  3724                           ; Clear objects allocated to BANK2
  3725  005A  3020               	movlw	low __pbssBANK2
  3726  005B  0084               	movwf	4
  3727  005C  3001               	movlw	high __pbssBANK2
  3728  005D  0085               	movwf	5
  3729  005E  3041               	movlw	65
  3730  005F  318D  25A1  3180   	fcall	clear_ram0
  3731  0062                     end_of_initialization:	
  3732                           ;End of C runtime variable initialization code
  3733                           
  3734  0062                     __end_of__initialization:	
  3735  0062  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3736  0063  0020               	movlb	0
  3737  0064  3183  2B88         	ljmp	_main	;jump to C main() function
  3738                           
  3739                           	psect	bssCOMMON
  3740  0078                     __pbssCOMMON:	
  3741  0078                     _interfaceState:	
  3742  0078                     	ds	1
  3743  0079                     _timer0ReloadVal:	
  3744  0079                     	ds	1
  3745                           
  3746                           	psect	dataCOMMON
  3747  007A                     __pdataCOMMON:	
  3748  007A                     _dc_frequency_flag:	
  3749  007A                     	ds	1
  3750                           
  3751                           	psect	bssBANK1
  3752  00C7                     __pbssBANK1:	
  3753  00C7                     _nout:	
  3754  00C7                     	ds	2
  3755  00C9                     _width:	
  3756  00C9                     	ds	2
  3757  00CB                     _prec:	
  3758  00CB                     	ds	2
  3759  00CD                     _flags:	
  3760  00CD                     	ds	2
  3761  00CF                     _Vdd_mv:	
  3762  00CF                     	ds	2
  3763  00D1                     _microamps:	
  3764  00D1                     	ds	2
  3765  00D3                     _LED_blue:	
  3766  00D3                     	ds	1
  3767  00D4                     _LED_green:	
  3768  00D4                     	ds	1
  3769  00D5                     _LED_red:	
  3770  00D5                     	ds	1
  3771  00D6                     _dac_value:	
  3772  00D6                     	ds	1
  3773  00D7                     _eusartRxLastError:	
  3774  00D7                     	ds	1
  3775  00D8                     _ir_code:	
  3776  00D8                     	ds	6
  3777                           
  3778                           	psect	dataBANK1
  3779  00A0                     __pdataBANK1:	
  3780  00A0                     _maxFrequencyIndex:	
  3781  00A0                     	ds	2
  3782  00A2                     _maxCurrentIndex:	
  3783  00A2                     	ds	2
  3784  00A4                     _currentIsOn:	
  3785  00A4                     	ds	1
  3786  00A5                     _currentValue:	
  3787  00A5                     	ds	22
  3788  00BB                     _frequencyValue:	
  3789  00BB                     	ds	12
  3790                           
  3791                           	psect	bssBANK2
  3792  0120                     __pbssBANK2:	
  3793  0120                     _stats:	
  3794  0120                     	ds	33
  3795  0141                     _dbuf:	
  3796  0141                     	ds	32
  3797                           
  3798                           	psect	inittext
  3799  0DA7                     init_ram:	
  3800  0DA7  00FE               	movwf	btemp
  3801  0DA8                     initloop:	
  3802  0DA8  0012               	moviw fsr0++
  3803  0DA9  001E               	movwi fsr1++
  3804  0DAA  0BFE               	decfsz	btemp,f
  3805  0DAB  2DA8               	goto	initloop
  3806  0DAC  3400               	retlw	0
  3807                           
  3808                           	psect	clrtext
  3809  0DA1                     clear_ram0:	
  3810                           ;	Called with FSR0 containing the base address, and
  3811                           ;	WREG with the size to clear
  3812                           
  3813  0DA1  0064               	clrwdt	;clear the watchdog before getting into this loop
  3814  0DA2                     clrloop0:	
  3815  0DA2  0180               	clrf	0	;clear RAM location pointed to by FSR
  3816  0DA3  3101               	addfsr 0,1
  3817  0DA4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3818  0DA5  2DA2               	goto	clrloop0	;have we reached the end yet?
  3819  0DA6  3400               	retlw	0	;all done for this memory range, return
  3820                           
  3821                           	psect	cstackBANK2
  3822  0163                     __pcstackBANK2:	
  3823  0163                     main@batt_mv:	
  3824                           
  3825                           ; 2 bytes @ 0x0
  3826  0163                     	ds	2
  3827                           
  3828                           	psect	cstackBANK1
  3829  00EC                     __pcstackBANK1:	
  3830  00EC                     ??_process_remote_command:	
  3831                           
  3832                           ; 1 bytes @ 0x0
  3833  00EC                     	ds	2
  3834  00EE                     process_remote_command@code:	
  3835                           
  3836                           ; 1 bytes @ 0x2
  3837  00EE                     	ds	1
  3838  00EF                     ??_main:	
  3839                           
  3840                           ; 1 bytes @ 0x3
  3841  00EF                     	ds	1
  3842                           
  3843                           	psect	cstackCOMMON
  3844  0070                     __pcstackCOMMON:	
  3845  0070                     ?_PIN_MANAGER_Initialize:	
  3846  0070                     ?_OSCILLATOR_Initialize:	
  3847                           ; 1 bytes @ 0x0
  3848                           
  3849  0070                     ?_WDT_Initialize:	
  3850                           ; 1 bytes @ 0x0
  3851                           
  3852  0070                     ?_OPA1_Initialize:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855  0070                     ?_TMR4_Initialize:	
  3856                           ; 1 bytes @ 0x0
  3857                           
  3858  0070                     ?_OPA2_Initialize:	
  3859                           ; 1 bytes @ 0x0
  3860                           
  3861  0070                     ?_TMR2_Initialize:	
  3862                           ; 1 bytes @ 0x0
  3863                           
  3864  0070                     ?_EXT_INT_Initialize:	
  3865                           ; 1 bytes @ 0x0
  3866                           
  3867  0070                     ?_TMR0_Initialize:	
  3868                           ; 1 bytes @ 0x0
  3869                           
  3870  0070                     ?_EUSART_Initialize:	
  3871                           ; 1 bytes @ 0x0
  3872                           
  3873  0070                     ?_TMR0_ISR:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876  0070                     ??_TMR0_ISR:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879  0070                     ?_INT_ISR:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882  0070                     ?_TMR4_ISR:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885  0070                     ?_INT_CallBack:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888  0070                     ?_TMR0_DefaultInterruptHandler:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891  0070                     ??_TMR0_DefaultInterruptHandler:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894  0070                     ?_TMR4_DefaultInterruptHandler:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897  0070                     ?_DAC_Initialize:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900  0070                     ?_DAC_SetOutput:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903  0070                     ??_DAC_SetOutput:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906  0070                     ?_SYSTEM_Initialize:	
  3907                           ; 1 bytes @ 0x0
  3908                           
  3909  0070                     ?_PIN_MANAGER_IOC:	
  3910                           ; 1 bytes @ 0x0
  3911                           
  3912  0070                     ??_PIN_MANAGER_IOC:	
  3913                           ; 1 bytes @ 0x0
  3914                           
  3915  0070                     ?_INTERRUPT_InterruptManager:	
  3916                           ; 1 bytes @ 0x0
  3917                           
  3918  0070                     ?_EUSART_Write:	
  3919                           ; 1 bytes @ 0x0
  3920                           
  3921  0070                     ?_putch:	
  3922                           ; 1 bytes @ 0x0
  3923                           
  3924  0070                     ?_INT_DefaultInterruptHandler:	
  3925                           ; 1 bytes @ 0x0
  3926                           
  3927  0070                     ??_INT_DefaultInterruptHandler:	
  3928                           ; 1 bytes @ 0x0
  3929                           
  3930  0070                     ?_TMR4_LoadPeriodRegister:	
  3931                           ; 1 bytes @ 0x0
  3932                           
  3933  0070                     ?_readPersistentState:	
  3934                           ; 1 bytes @ 0x0
  3935                           
  3936  0070                     ?_writePersistentState:	
  3937                           ; 1 bytes @ 0x0
  3938                           
  3939  0070                     ?_initLED:	
  3940                           ; 1 bytes @ 0x0
  3941                           
  3942  0070                     ?_lowBattery:	
  3943                           ; 1 bytes @ 0x0
  3944                           
  3945  0070                     ?_startUp:	
  3946                           ; 1 bytes @ 0x0
  3947                           
  3948  0070                     ?_selectSomething:	
  3949                           ; 1 bytes @ 0x0
  3950                           
  3951  0070                     ?_selectFrequency:	
  3952                           ; 1 bytes @ 0x0
  3953                           
  3954  0070                     ?_selectCurrent:	
  3955                           ; 1 bytes @ 0x0
  3956                           
  3957  0070                     ?_selectIncrease:	
  3958                           ; 1 bytes @ 0x0
  3959                           
  3960  0070                     ?_selectDecrease:	
  3961                           ; 1 bytes @ 0x0
  3962                           
  3963  0070                     ?_selectResetValue:	
  3964                           ; 1 bytes @ 0x0
  3965                           
  3966  0070                     ?_process_remote_command:	
  3967                           ; 1 bytes @ 0x0
  3968                           
  3969  0070                     ?_main:	
  3970                           ; 1 bytes @ 0x0
  3971                           
  3972  0070                     DAC_SetOutput@inputData:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975                           
  3976                           ; 1 bytes @ 0x0
  3977  0070                     	ds	1
  3978  0071                     ??_TMR4_ISR:	
  3979  0071                     ??_TMR4_DefaultInterruptHandler:	
  3980                           ; 1 bytes @ 0x1
  3981                           
  3982                           
  3983                           ; 1 bytes @ 0x1
  3984  0071                     	ds	1
  3985  0072                     INT_DefaultInterruptHandler@time:	
  3986                           
  3987                           ; 1 bytes @ 0x2
  3988  0072                     	ds	1
  3989  0073                     ??_PIN_MANAGER_Initialize:	
  3990  0073                     ??_OSCILLATOR_Initialize:	
  3991                           ; 1 bytes @ 0x3
  3992                           
  3993  0073                     ??_WDT_Initialize:	
  3994                           ; 1 bytes @ 0x3
  3995                           
  3996  0073                     ??_OPA1_Initialize:	
  3997                           ; 1 bytes @ 0x3
  3998                           
  3999  0073                     ??_OPA2_Initialize:	
  4000                           ; 1 bytes @ 0x3
  4001                           
  4002  0073                     ??_TMR2_Initialize:	
  4003                           ; 1 bytes @ 0x3
  4004                           
  4005  0073                     ??_INT_ISR:	
  4006                           ; 1 bytes @ 0x3
  4007                           
  4008  0073                     ?_EUSART_SetFramingErrorHandler:	
  4009                           ; 1 bytes @ 0x3
  4010                           
  4011  0073                     ?_EUSART_SetOverrunErrorHandler:	
  4012                           ; 1 bytes @ 0x3
  4013                           
  4014  0073                     ?_EUSART_SetErrorHandler:	
  4015                           ; 1 bytes @ 0x3
  4016                           
  4017  0073                     ??_INT_CallBack:	
  4018                           ; 1 bytes @ 0x3
  4019                           
  4020  0073                     ?_TMR0_SetInterruptHandler:	
  4021                           ; 1 bytes @ 0x3
  4022                           
  4023  0073                     ?_TMR4_SetInterruptHandler:	
  4024                           ; 1 bytes @ 0x3
  4025                           
  4026  0073                     ?_FLASH_EraseBlock:	
  4027                           ; 1 bytes @ 0x3
  4028                           
  4029  0073                     ??_DAC_Initialize:	
  4030                           ; 1 bytes @ 0x3
  4031                           
  4032  0073                     ??_INTERRUPT_InterruptManager:	
  4033                           ; 1 bytes @ 0x3
  4034                           
  4035  0073                     ??_EUSART_Write:	
  4036                           ; 1 bytes @ 0x3
  4037                           
  4038  0073                     ?_INT_SetInterruptHandler:	
  4039                           ; 1 bytes @ 0x3
  4040                           
  4041  0073                     ??_TMR4_LoadPeriodRegister:	
  4042                           ; 1 bytes @ 0x3
  4043                           
  4044  0073                     ??_readPersistentState:	
  4045                           ; 1 bytes @ 0x3
  4046                           
  4047  0073                     ??_initLED:	
  4048                           ; 1 bytes @ 0x3
  4049                           
  4050  0073                     ?_setLEDColor:	
  4051                           ; 1 bytes @ 0x3
  4052                           
  4053  0073                     ??___lmul:	
  4054                           ; 1 bytes @ 0x3
  4055                           
  4056  0073                     ?___awdiv:	
  4057                           ; 1 bytes @ 0x3
  4058                           
  4059  0073                     EUSART_Write@txData:	
  4060                           ; 2 bytes @ 0x3
  4061                           
  4062  0073                     TMR4_LoadPeriodRegister@periodVal:	
  4063                           ; 1 bytes @ 0x3
  4064                           
  4065  0073                     setLEDColor@green:	
  4066                           ; 1 bytes @ 0x3
  4067                           
  4068  0073                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4069                           ; 1 bytes @ 0x3
  4070                           
  4071  0073                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4072                           ; 2 bytes @ 0x3
  4073                           
  4074  0073                     EUSART_SetErrorHandler@interruptHandler:	
  4075                           ; 2 bytes @ 0x3
  4076                           
  4077  0073                     INT_SetInterruptHandler@InterruptHandler:	
  4078                           ; 2 bytes @ 0x3
  4079                           
  4080  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  4081                           ; 2 bytes @ 0x3
  4082                           
  4083  0073                     TMR4_SetInterruptHandler@InterruptHandler:	
  4084                           ; 2 bytes @ 0x3
  4085                           
  4086  0073                     FLASH_EraseBlock@startAddr:	
  4087                           ; 2 bytes @ 0x3
  4088                           
  4089  0073                     ___awdiv@divisor:	
  4090                           ; 2 bytes @ 0x3
  4091                           
  4092  0073                     ___lmul@product:	
  4093                           ; 2 bytes @ 0x3
  4094                           
  4095                           
  4096                           ; 4 bytes @ 0x3
  4097  0073                     	ds	1
  4098  0074                     ??_putch:	
  4099  0074                     putch@txData:	
  4100                           ; 1 bytes @ 0x4
  4101                           
  4102  0074                     setLEDColor@blue:	
  4103                           ; 1 bytes @ 0x4
  4104                           
  4105                           
  4106                           ; 1 bytes @ 0x4
  4107  0074                     	ds	1
  4108  0075                     ??_TMR4_Initialize:	
  4109  0075                     ??_EXT_INT_Initialize:	
  4110                           ; 1 bytes @ 0x5
  4111                           
  4112  0075                     ??_TMR0_Initialize:	
  4113                           ; 1 bytes @ 0x5
  4114                           
  4115  0075                     ??_EUSART_Initialize:	
  4116                           ; 1 bytes @ 0x5
  4117                           
  4118  0075                     ??_EUSART_SetFramingErrorHandler:	
  4119                           ; 1 bytes @ 0x5
  4120                           
  4121  0075                     ??_EUSART_SetOverrunErrorHandler:	
  4122                           ; 1 bytes @ 0x5
  4123                           
  4124  0075                     ??_EUSART_SetErrorHandler:	
  4125                           ; 1 bytes @ 0x5
  4126                           
  4127  0075                     ??_TMR0_SetInterruptHandler:	
  4128                           ; 1 bytes @ 0x5
  4129                           
  4130  0075                     ??_TMR4_SetInterruptHandler:	
  4131                           ; 1 bytes @ 0x5
  4132                           
  4133  0075                     ??_FLASH_EraseBlock:	
  4134                           ; 1 bytes @ 0x5
  4135                           
  4136  0075                     ??_SYSTEM_Initialize:	
  4137                           ; 1 bytes @ 0x5
  4138                           
  4139  0075                     ??_INT_SetInterruptHandler:	
  4140                           ; 1 bytes @ 0x5
  4141                           
  4142  0075                     ??_setLEDColor:	
  4143                           ; 1 bytes @ 0x5
  4144                           
  4145  0075                     ?_fputc:	
  4146                           ; 1 bytes @ 0x5
  4147                           
  4148  0075                     FLASH_EraseBlock@GIEBitValue:	
  4149                           ; 2 bytes @ 0x5
  4150                           
  4151  0075                     ___awdiv@dividend:	
  4152                           ; 1 bytes @ 0x5
  4153                           
  4154  0075                     fputc@c:	
  4155                           ; 2 bytes @ 0x5
  4156                           
  4157                           
  4158                           ; 2 bytes @ 0x5
  4159  0075                     	ds	1
  4160  0076                     setLEDColor@red:	
  4161                           
  4162                           ; 1 bytes @ 0x6
  4163  0076                     	ds	1
  4164  0077                     ??___awdiv:	
  4165  0077                     fputc@fp:	
  4166                           ; 1 bytes @ 0x7
  4167                           
  4168                           
  4169                           ; 1 bytes @ 0x7
  4170  0077                     	ds	1
  4171  0078                     ??_battery_voltage:	
  4172                           
  4173                           	psect	cstackBANK0
  4174  0020                     __pcstackBANK0:	
  4175                           ; 1 bytes @ 0x8
  4176                           
  4177  0020                     ?_FLASH_WriteBlock:	
  4178  0020                     ??_fputc:	
  4179                           ; 1 bytes @ 0x0
  4180                           
  4181  0020                     ??_lowBattery:	
  4182                           ; 1 bytes @ 0x0
  4183                           
  4184  0020                     ??_startUp:	
  4185                           ; 1 bytes @ 0x0
  4186                           
  4187  0020                     ??_selectSomething:	
  4188                           ; 1 bytes @ 0x0
  4189                           
  4190  0020                     ?___lmul:	
  4191                           ; 1 bytes @ 0x0
  4192                           
  4193  0020                     ___awdiv@counter:	
  4194                           ; 4 bytes @ 0x0
  4195                           
  4196  0020                     FLASH_WriteBlock@writeAddr:	
  4197                           ; 1 bytes @ 0x0
  4198                           
  4199  0020                     ___lmul@multiplier:	
  4200                           ; 2 bytes @ 0x0
  4201                           
  4202                           
  4203                           ; 4 bytes @ 0x0
  4204  0020                     	ds	1
  4205  0021                     ___awdiv@sign:	
  4206                           
  4207                           ; 1 bytes @ 0x1
  4208  0021                     	ds	1
  4209  0022                     FLASH_WriteBlock@flashWordArray:	
  4210  0022                     startUp@i:	
  4211                           ; 1 bytes @ 0x2
  4212                           
  4213  0022                     ___awdiv@quotient:	
  4214                           ; 2 bytes @ 0x2
  4215                           
  4216                           
  4217                           ; 2 bytes @ 0x2
  4218  0022                     	ds	1
  4219  0023                     ??_FLASH_WriteBlock:	
  4220                           
  4221                           ; 1 bytes @ 0x3
  4222  0023                     	ds	1
  4223  0024                     ___lmul@multiplicand:	
  4224                           
  4225                           ; 4 bytes @ 0x4
  4226  0024                     	ds	1
  4227  0025                     ?_vfpfcnvrt:	
  4228  0025                     vfpfcnvrt@fmt:	
  4229                           ; 2 bytes @ 0x5
  4230                           
  4231                           
  4232                           ; 1 bytes @ 0x5
  4233  0025                     	ds	1
  4234  0026                     vfpfcnvrt@ap:	
  4235  0026                     FLASH_WriteBlock@blockStartAddr:	
  4236                           ; 1 bytes @ 0x6
  4237                           
  4238                           
  4239                           ; 2 bytes @ 0x6
  4240  0026                     	ds	1
  4241  0027                     ??_vfpfcnvrt:	
  4242                           
  4243                           ; 1 bytes @ 0x7
  4244  0027                     	ds	1
  4245  0028                     ?___aldiv:	
  4246  0028                     FLASH_WriteBlock@GIEBitValue:	
  4247                           ; 4 bytes @ 0x8
  4248                           
  4249  0028                     ___aldiv@divisor:	
  4250                           ; 1 bytes @ 0x8
  4251                           
  4252                           
  4253                           ; 4 bytes @ 0x8
  4254  0028                     	ds	1
  4255  0029                     FLASH_WriteBlock@i:	
  4256                           
  4257                           ; 1 bytes @ 0x9
  4258  0029                     	ds	1
  4259  002A                     ??_writePersistentState:	
  4260                           
  4261                           ; 1 bytes @ 0xA
  4262  002A                     	ds	2
  4263  002C                     vfpfcnvrt@fp:	
  4264  002C                     ___aldiv@dividend:	
  4265                           ; 1 bytes @ 0xC
  4266                           
  4267                           
  4268                           ; 4 bytes @ 0xC
  4269  002C                     	ds	1
  4270  002D                     ?_vfprintf:	
  4271  002D                     vfprintf@fmt:	
  4272                           ; 2 bytes @ 0xD
  4273                           
  4274                           
  4275                           ; 2 bytes @ 0xD
  4276  002D                     	ds	1
  4277  002E                     writePersistentState@buf:	
  4278                           
  4279                           ; 64 bytes @ 0xE
  4280  002E                     	ds	1
  4281  002F                     vfprintf@ap:	
  4282                           
  4283                           ; 1 bytes @ 0xF
  4284  002F                     	ds	1
  4285  0030                     ??_vfprintf:	
  4286  0030                     ??___aldiv:	
  4287                           ; 1 bytes @ 0x10
  4288                           
  4289                           
  4290                           ; 1 bytes @ 0x10
  4291  0030                     	ds	1
  4292  0031                     ___aldiv@counter:	
  4293                           
  4294                           ; 1 bytes @ 0x11
  4295  0031                     	ds	1
  4296  0032                     vfprintf@fp:	
  4297  0032                     ___aldiv@sign:	
  4298                           ; 1 bytes @ 0x12
  4299                           
  4300                           
  4301                           ; 1 bytes @ 0x12
  4302  0032                     	ds	1
  4303  0033                     vfprintf@cfmt:	
  4304  0033                     ___aldiv@quotient:	
  4305                           ; 2 bytes @ 0x13
  4306                           
  4307                           
  4308                           ; 4 bytes @ 0x13
  4309  0033                     	ds	2
  4310  0035                     ?_printf:	
  4311  0035                     printf@fmt:	
  4312                           ; 2 bytes @ 0x15
  4313                           
  4314                           
  4315                           ; 2 bytes @ 0x15
  4316  0035                     	ds	2
  4317  0037                     ??_printf:	
  4318  0037                     ?_setFrequency:	
  4319                           ; 1 bytes @ 0x17
  4320                           
  4321  0037                     ?_battery_voltage:	
  4322                           ; 1 bytes @ 0x17
  4323                           
  4324  0037                     setFrequency@frequency_hz:	
  4325                           ; 2 bytes @ 0x17
  4326                           
  4327                           
  4328                           ; 2 bytes @ 0x17
  4329  0037                     	ds	2
  4330  0039                     ?_setCurrent:	
  4331  0039                     ??_setFrequency:	
  4332                           ; 1 bytes @ 0x19
  4333                           
  4334  0039                     setCurrent@microamps:	
  4335                           ; 1 bytes @ 0x19
  4336                           
  4337                           
  4338                           ; 2 bytes @ 0x19
  4339  0039                     	ds	1
  4340  003A                     printf@ap:	
  4341  003A                     setFrequency@PR4_val:	
  4342                           ; 1 bytes @ 0x1A
  4343                           
  4344                           
  4345                           ; 2 bytes @ 0x1A
  4346  003A                     	ds	1
  4347  003B                     ??_selectFrequency:	
  4348  003B                     ??_selectCurrent:	
  4349                           ; 1 bytes @ 0x1B
  4350                           
  4351  003B                     ??_selectIncrease:	
  4352                           ; 1 bytes @ 0x1B
  4353                           
  4354  003B                     ??_selectDecrease:	
  4355                           ; 1 bytes @ 0x1B
  4356                           
  4357  003B                     ??_selectResetValue:	
  4358                           ; 1 bytes @ 0x1B
  4359                           
  4360  003B                     setCurrent@Vdd_mv:	
  4361                           ; 1 bytes @ 0x1B
  4362                           
  4363                           
  4364                           ; 2 bytes @ 0x1B
  4365  003B                     	ds	2
  4366  003D                     ??_setCurrent:	
  4367                           
  4368                           ; 1 bytes @ 0x1D
  4369  003D                     	ds	8
  4370  0045                     setCurrent@Vdac_mv:	
  4371                           
  4372                           ; 2 bytes @ 0x25
  4373  0045                     	ds	2
  4374  0047                     setCurrent@DACValue:	
  4375                           
  4376                           ; 2 bytes @ 0x27
  4377  0047                     	ds	39
  4378  006E                     writePersistentState@i:	
  4379                           
  4380                           ; 1 bytes @ 0x4E
  4381  006E                     	ds	1
  4382  006F                     writePersistentState@idx:	
  4383                           
  4384                           ; 1 bytes @ 0x4F
  4385  006F                     	ds	1
  4386                           
  4387                           	psect	maintext
  4388  0388                     __pmaintext:	
  4389 ;;
  4390 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4391 ;;
  4392 ;; *************** function _main *****************
  4393 ;; Defined at:
  4394 ;;		line 477 in file "main.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;		None
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;  batt_mv         2    0[BANK2 ] short 
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  1    wreg      void 
  4401 ;; Registers used:
  4402 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4403 ;; Tracked objects:
  4404 ;;		On entry : B1F/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4408 ;;      Params:         0       0       0       0       0       0       0       0
  4409 ;;      Locals:         0       0       0       2       0       0       0       0
  4410 ;;      Temps:          0       0       1       0       0       0       0       0
  4411 ;;      Totals:         0       0       1       2       0       0       0       0
  4412 ;;Total ram usage:        3 bytes
  4413 ;; Hardware stack levels required when called:   12
  4414 ;; This function calls:
  4415 ;;		_DAC_Initialize
  4416 ;;		_OPA1_Initialize
  4417 ;;		_OPA2_Initialize
  4418 ;;		_SYSTEM_Initialize
  4419 ;;		_battery_voltage
  4420 ;;		_initLED
  4421 ;;		_lowBattery
  4422 ;;		_process_remote_command
  4423 ;;		_readPersistentState
  4424 ;;		_setCurrent
  4425 ;;		_setFrequency
  4426 ;;		_startUp
  4427 ;; This function is called by:
  4428 ;;		Startup code after reset
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           
  4433                           ;psect for function _main
  4434  0388                     _main:	
  4435  0388                     l3793:	
  4436                           ;incstack = 0
  4437                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4438                           
  4439                           
  4440                           ;main.c: 479:   SYSTEM_Initialize();
  4441  0388  318E  26AC  3183   	fcall	_SYSTEM_Initialize
  4442                           
  4443                           ;main.c: 480:   DAC_Initialize();
  4444  038B  318D  2571  3183   	fcall	_DAC_Initialize
  4445                           
  4446                           ;main.c: 481:   OPA1_Initialize();
  4447  038E  318D  2556  3183   	fcall	_OPA1_Initialize
  4448                           
  4449                           ;main.c: 482:   OPA2_Initialize();
  4450  0391  318D  255A  3183   	fcall	_OPA2_Initialize
  4451                           
  4452                           ;main.c: 483:   initLED();
  4453  0394  3186  2658  3183   	fcall	_initLED
  4454  0397                     l3795:	
  4455                           
  4456                           ;main.c: 488:   readPersistentState();
  4457  0397  318E  266A  3183   	fcall	_readPersistentState
  4458  039A                     l3797:	
  4459                           
  4460                           ;main.c: 489:   setCurrent(currentValue[currentIndex], battery_voltage());
  4461  039A  0021               	movlb	1	; select bank1
  4462  039B  356A               	lslf	_currentIndex^(0+128),w
  4463  039C  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4464  039D  0086               	movwf	6
  4465  039E  0187               	clrf	7
  4466  039F  3F40               	moviw [0]fsr1
  4467  03A0  0020               	movlb	0	; select bank0
  4468  03A1  00B9               	movwf	setCurrent@microamps
  4469  03A2  3F41               	moviw [1]fsr1
  4470  03A3  00BA               	movwf	setCurrent@microamps+1
  4471  03A4  3187  274C  3183   	fcall	_battery_voltage
  4472  03A7  0020               	movlb	0	; select bank0
  4473  03A8  0838               	movf	?_battery_voltage+1,w
  4474  03A9  00BC               	movwf	setCurrent@Vdd_mv+1
  4475  03AA  0837               	movf	?_battery_voltage,w
  4476  03AB  00BB               	movwf	setCurrent@Vdd_mv
  4477  03AC  3181  21D5  3183   	fcall	_setCurrent
  4478  03AF                     l3799:	
  4479                           
  4480                           ;main.c: 490:   setFrequency(frequencyValue[frequencyIndex]);
  4481  03AF  0021               	movlb	1	; select bank1
  4482  03B0  3568               	lslf	_frequencyIndex^(0+128),w
  4483  03B1  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  4484  03B2  0086               	movwf	6
  4485  03B3  0187               	clrf	7
  4486  03B4  3F40               	moviw [0]fsr1
  4487  03B5  0020               	movlb	0	; select bank0
  4488  03B6  00B7               	movwf	setFrequency@frequency_hz
  4489  03B7  3F41               	moviw [1]fsr1
  4490  03B8  00B8               	movwf	setFrequency@frequency_hz+1
  4491  03B9  3184  24DB  3183   	fcall	_setFrequency
  4492  03BC                     l3801:	
  4493                           
  4494                           ;main.c: 492:   (INTCONbits.GIE = 1);
  4495  03BC  178B               	bsf	11,7	;volatile
  4496  03BD                     l3803:	
  4497                           
  4498                           ;main.c: 493:   (INTCONbits.PEIE = 1);
  4499  03BD  170B               	bsf	11,6	;volatile
  4500  03BE                     l3805:	
  4501                           
  4502                           ;main.c: 494:   startUp();
  4503  03BE  3186  26DC  3183   	fcall	_startUp
  4504  03C1                     l3807:	
  4505                           
  4506                           ;main.c: 500:     int16_t batt_mv = battery_voltage();
  4507  03C1  3187  274C  3183   	fcall	_battery_voltage
  4508  03C4  0020               	movlb	0	; select bank0
  4509  03C5  0838               	movf	?_battery_voltage+1,w
  4510  03C6  0022               	movlb	2	; select bank2
  4511  03C7  00E4               	movwf	(main@batt_mv+1)^(0+256)
  4512  03C8  0020               	movlb	0	; select bank0
  4513  03C9  0837               	movf	?_battery_voltage,w
  4514  03CA  0022               	movlb	2	; select bank2
  4515  03CB  00E3               	movwf	main@batt_mv^(0+256)
  4516  03CC                     l3809:	
  4517                           
  4518                           ;main.c: 502:     if (batt_mv < 2500)
  4519  03CC  0864               	movf	(main@batt_mv+1)^(0+256),w
  4520  03CD  3A80               	xorlw	128
  4521  03CE  0021               	movlb	1	; select bank1
  4522  03CF  00EF               	movwf	??_main^(0+128)
  4523  03D0  3089               	movlw	137
  4524  03D1  026F               	subwf	??_main^(0+128),w
  4525  03D2  1D03               	skipz
  4526  03D3  2BD7               	goto	u2365
  4527  03D4  30C4               	movlw	196
  4528  03D5  0022               	movlb	2	; select bank2
  4529  03D6  0263               	subwf	main@batt_mv^(0+256),w
  4530  03D7                     u2365:	
  4531  03D7  1803               	skipnc
  4532  03D8  2BDA               	goto	u2361
  4533  03D9  2BDB               	goto	u2360
  4534  03DA                     u2361:	
  4535  03DA  2BDE               	goto	l3813
  4536  03DB                     u2360:	
  4537  03DB                     l3811:	
  4538                           
  4539                           ;main.c: 503:     {;main.c: 504:       lowBattery();
  4540  03DB  318F  27B4  3183   	fcall	_lowBattery
  4541  03DE                     l3813:	
  4542                           
  4543                           ;main.c: 510:     setCurrent(currentValue[currentIndex], batt_mv);
  4544  03DE  0021               	movlb	1	; select bank1
  4545  03DF  356A               	lslf	_currentIndex^(0+128),w
  4546  03E0  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4547  03E1  0086               	movwf	6
  4548  03E2  0187               	clrf	7
  4549  03E3  3F40               	moviw [0]fsr1
  4550  03E4  0020               	movlb	0	; select bank0
  4551  03E5  00B9               	movwf	setCurrent@microamps
  4552  03E6  3F41               	moviw [1]fsr1
  4553  03E7  00BA               	movwf	setCurrent@microamps+1
  4554  03E8  0022               	movlb	2	; select bank2
  4555  03E9  0864               	movf	(main@batt_mv+1)^(0+256),w
  4556  03EA  0020               	movlb	0	; select bank0
  4557  03EB  00BC               	movwf	setCurrent@Vdd_mv+1
  4558  03EC  0022               	movlb	2	; select bank2
  4559  03ED  0863               	movf	main@batt_mv^(0+256),w
  4560  03EE  0020               	movlb	0	; select bank0
  4561  03EF  00BB               	movwf	setCurrent@Vdd_mv
  4562  03F0  3181  21D5  3183   	fcall	_setCurrent
  4563  03F3                     l3815:	
  4564                           
  4565                           ;main.c: 517:     if (STATE_DONE == ir_code.state){
  4566  03F3  3002               	movlw	2
  4567  03F4  0021               	movlb	1	; select bank1
  4568  03F5  0659               	xorwf	(_ir_code^(0+128)+1),w
  4569  03F6  1D03               	btfss	3,2
  4570  03F7  2BF9               	goto	u2371
  4571  03F8  2BFA               	goto	u2370
  4572  03F9                     u2371:	
  4573  03F9  2BC1               	goto	l3807
  4574  03FA                     u2370:	
  4575  03FA                     l3817:	
  4576                           
  4577                           ;main.c: 535:       process_remote_command(&ir_code);
  4578  03FA  30D8               	movlw	(low (_ir_code| 0))& (0+255)
  4579  03FB  3180  2066  3183   	fcall	_process_remote_command
  4580  03FE                     l3819:	
  4581                           
  4582                           ;main.c: 538:       ir_code.state = STATE_RESET;
  4583  03FE  0021               	movlb	1	; select bank1
  4584  03FF  01D9               	clrf	(_ir_code^(0+128)+1)
  4585  0400  2BC1               	goto	l3807
  4586  0401  3180  283E         	ljmp	start
  4587  0403                     __end_of_main:	
  4588                           
  4589                           	psect	text1
  4590  06DC                     __ptext1:	
  4591 ;; *************** function _startUp *****************
  4592 ;; Defined at:
  4593 ;;		line 252 in file "main.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;		None
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;  i               2    2[BANK0 ] int 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      void 
  4600 ;; Registers used:
  4601 ;;		wreg, status,2, status,0, pclath, cstack
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4607 ;;      Params:         0       0       0       0       0       0       0       0
  4608 ;;      Locals:         0       2       0       0       0       0       0       0
  4609 ;;      Temps:          0       2       0       0       0       0       0       0
  4610 ;;      Totals:         0       4       0       0       0       0       0       0
  4611 ;;Total ram usage:        4 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    5
  4614 ;; This function calls:
  4615 ;;		_setLEDColor
  4616 ;; This function is called by:
  4617 ;;		_main
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           
  4622                           ;psect for function _startUp
  4623  06DC                     _startUp:	
  4624  06DC                     l3655:	
  4625                           ;incstack = 0
  4626                           ; Regs used in _startUp: [wreg+status,2+status,0+pclath+cstack]
  4627                           
  4628                           
  4629                           ;main.c: 253:   interfaceState = STATE_RUNNING;
  4630  06DC  01F8               	clrf	_interfaceState
  4631                           
  4632                           ;main.c: 254:   for (int i = 0; i < 5; i++){
  4633  06DD  0020               	movlb	0	; select bank0
  4634  06DE  01A2               	clrf	startUp@i
  4635  06DF  01A3               	clrf	startUp@i+1
  4636  06E0                     l3661:	
  4637                           
  4638                           ;main.c: 255:     setLEDColor(0, 180, 230);
  4639  06E0  30B4               	movlw	180
  4640  06E1  0020               	movlb	0	; select bank0
  4641  06E2  00A0               	movwf	??_startUp
  4642  06E3  0820               	movf	??_startUp,w
  4643  06E4  00F3               	movwf	setLEDColor@green
  4644  06E5  30E6               	movlw	230
  4645  06E6  00A1               	movwf	??_startUp+1
  4646  06E7  0821               	movf	??_startUp+1,w
  4647  06E8  00F4               	movwf	setLEDColor@blue
  4648  06E9  3000               	movlw	0
  4649  06EA  318E  2637  3186   	fcall	_setLEDColor
  4650  06ED                     l3663:	
  4651                           
  4652                           ;main.c: 256:     _delay((unsigned long)((100)*(4000000/4000.0)));
  4653  06ED  3082               	movlw	130
  4654  06EE  0020               	movlb	0	; select bank0
  4655  06EF  00A0               	movwf	??_startUp
  4656  06F0  30DD               	movlw	221
  4657  06F1                     u2387:	
  4658  06F1  0B89               	decfsz	9,f
  4659  06F2  2EF1               	goto	u2387
  4660  06F3  0BA0               	decfsz	??_startUp,f
  4661  06F4  2EF1               	goto	u2387
  4662  06F5  3200               	nop2
  4663  06F6                     l3665:	
  4664                           
  4665                           ;main.c: 257:     setLEDColor(0, 0, 0);
  4666  06F6  01F3               	clrf	setLEDColor@green
  4667  06F7  01F4               	clrf	setLEDColor@blue
  4668  06F8  3000               	movlw	0
  4669  06F9  318E  2637  3186   	fcall	_setLEDColor
  4670                           
  4671                           ;main.c: 258:     _delay((unsigned long)((100)*(4000000/4000.0)));
  4672  06FC  3082               	movlw	130
  4673  06FD  0020               	movlb	0	; select bank0
  4674  06FE  00A0               	movwf	??_startUp
  4675  06FF  30DD               	movlw	221
  4676  0700                     u2397:	
  4677  0700  0B89               	decfsz	9,f
  4678  0701  2F00               	goto	u2397
  4679  0702  0BA0               	decfsz	??_startUp,f
  4680  0703  2F00               	goto	u2397
  4681  0704  3200               	nop2
  4682                           
  4683                           ;main.c: 259:   }
  4684  0705  3001               	movlw	1
  4685  0706  0020               	movlb	0	; select bank0
  4686  0707  07A2               	addwf	startUp@i,f
  4687  0708  3000               	movlw	0
  4688  0709  3DA3               	addwfc	startUp@i+1,f
  4689  070A  0823               	movf	startUp@i+1,w
  4690  070B  3A80               	xorlw	128
  4691  070C  00A0               	movwf	??_startUp
  4692  070D  3080               	movlw	128
  4693  070E  0220               	subwf	??_startUp,w
  4694  070F  1D03               	skipz
  4695  0710  2F13               	goto	u2225
  4696  0711  3005               	movlw	5
  4697  0712  0222               	subwf	startUp@i,w
  4698  0713                     u2225:	
  4699  0713  1C03               	skipc
  4700  0714  2F16               	goto	u2221
  4701  0715  2F17               	goto	u2220
  4702  0716                     u2221:	
  4703  0716  2EE0               	goto	l3661
  4704  0717                     u2220:	
  4705  0717                     l584:	
  4706  0717  0008               	return
  4707  0718                     __end_of_startUp:	
  4708                           
  4709                           	psect	text2
  4710  0E6A                     __ptext2:	
  4711 ;; *************** function _readPersistentState *****************
  4712 ;; Defined at:
  4713 ;;		line 115 in file "main.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;		None
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;		None
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1    wreg      void 
  4720 ;; Registers used:
  4721 ;;		wreg, fsr0l, fsr0h, pclath
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4727 ;;      Params:         0       0       0       0       0       0       0       0
  4728 ;;      Locals:         0       0       0       0       0       0       0       0
  4729 ;;      Temps:          2       0       0       0       0       0       0       0
  4730 ;;      Totals:         2       0       0       0       0       0       0       0
  4731 ;;Total ram usage:        2 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    4
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		_main
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           
  4742                           ;psect for function _readPersistentState
  4743  0E6A                     _readPersistentState:	
  4744  0E6A                     l3603:	
  4745                           ;incstack = 0
  4746                           ; Regs used in _readPersistentState: [wreg-fsr0h+pclath]
  4747                           
  4748                           
  4749                           ;main.c: 117:   currentIndex = HEF_persistent_state.currentIndex;
  4750  0E6A  30E0               	movlw	224
  4751  0E6B  0084               	movwf	4
  4752  0E6C  308F               	movlw	143
  4753  0E6D  0085               	movwf	5
  4754  0E6E  0800               	movf	0,w	;code access
  4755  0E6F  00F3               	movwf	??_readPersistentState
  4756  0E70  01F4               	clrf	??_readPersistentState+1
  4757  0E71  0873               	movf	??_readPersistentState,w
  4758  0E72  0021               	movlb	1	; select bank1
  4759  0E73  00EA               	movwf	_currentIndex^(0+128)
  4760  0E74  0874               	movf	??_readPersistentState+1,w
  4761  0E75  00EB               	movwf	(_currentIndex+1)^(0+128)
  4762                           
  4763                           ;main.c: 118:   frequencyIndex = HEF_persistent_state.frequencyIndex;
  4764  0E76  30E1               	movlw	225
  4765  0E77  0084               	movwf	4
  4766  0E78  308F               	movlw	143
  4767  0E79  0085               	movwf	5
  4768  0E7A  0800               	movf	0,w	;code access
  4769  0E7B  00F3               	movwf	??_readPersistentState
  4770  0E7C  01F4               	clrf	??_readPersistentState+1
  4771  0E7D  0873               	movf	??_readPersistentState,w
  4772  0E7E  00E8               	movwf	_frequencyIndex^(0+128)
  4773  0E7F  0874               	movf	??_readPersistentState+1,w
  4774  0E80  00E9               	movwf	(_frequencyIndex+1)^(0+128)
  4775                           
  4776                           ;main.c: 119:   dc_frequency_flag = HEF_persistent_state.dc_frequency_flag;
  4777  0E81  30E2               	movlw	226
  4778  0E82  0084               	movwf	4
  4779  0E83  308F               	movlw	143
  4780  0E84  0085               	movwf	5
  4781  0E85  0800               	movf	0,w	;code access
  4782  0E86  00F3               	movwf	??_readPersistentState
  4783  0E87  0873               	movf	??_readPersistentState,w
  4784  0E88  00FA               	movwf	_dc_frequency_flag
  4785  0E89                     l554:	
  4786  0E89  0008               	return
  4787  0E8A                     __end_of_readPersistentState:	
  4788                           
  4789                           	psect	text3
  4790  0066                     __ptext3:	
  4791 ;; *************** function _process_remote_command *****************
  4792 ;; Defined at:
  4793 ;;		line 366 in file "main.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;  code            1    wreg     PTR struct .
  4796 ;;		 -> ir_code(6), 
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;  code            1    2[BANK1 ] PTR struct .
  4799 ;;		 -> ir_code(6), 
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      void 
  4802 ;; Registers used:
  4803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4809 ;;      Params:         0       0       0       0       0       0       0       0
  4810 ;;      Locals:         0       0       1       0       0       0       0       0
  4811 ;;      Temps:          0       0       2       0       0       0       0       0
  4812 ;;      Totals:         0       0       3       0       0       0       0       0
  4813 ;;Total ram usage:        3 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:   11
  4816 ;; This function calls:
  4817 ;;		_battery_voltage
  4818 ;;		_selectCurrent
  4819 ;;		_selectDecrease
  4820 ;;		_selectFrequency
  4821 ;;		_selectIncrease
  4822 ;;		_selectResetValue
  4823 ;;		_selectSomething
  4824 ;;		_setCurrent
  4825 ;;		_setFrequency
  4826 ;;		_setLEDColor
  4827 ;;		_writePersistentState
  4828 ;; This function is called by:
  4829 ;;		_main
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           
  4834                           ;psect for function _process_remote_command
  4835  0066                     _process_remote_command:	
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4839                           ;process_remote_command@code stored from wreg
  4840  0066  0021               	movlb	1	; select bank1
  4841  0067  00EE               	movwf	process_remote_command@code^(0+128)
  4842  0068                     l3667:	
  4843                           
  4844                           ;main.c: 367:   setLEDColor(0, 0, 0);
  4845  0068  01F3               	clrf	setLEDColor@green
  4846  0069  01F4               	clrf	setLEDColor@blue
  4847  006A  3000               	movlw	0
  4848  006B  318E  2637  3180   	fcall	_setLEDColor
  4849                           
  4850                           ;main.c: 369:   switch(code->command){
  4851  006E  2985               	goto	l3763
  4852  006F                     l3669:	
  4853                           
  4854                           ;main.c: 371:     if(STATE_CURRENT == interfaceState){
  4855  006F  0378               	decf	_interfaceState,w
  4856  0070  1D03               	btfss	3,2
  4857  0071  2873               	goto	u2231
  4858  0072  2874               	goto	u2230
  4859  0073                     u2231:	
  4860  0073  28A9               	goto	l3683
  4861  0074                     u2230:	
  4862  0074                     l3671:	
  4863                           
  4864                           ;main.c: 372:       currentIndex++;
  4865  0074  3001               	movlw	1
  4866  0075  07EA               	addwf	_currentIndex^(0+128),f
  4867  0076  3000               	movlw	0
  4868  0077  3DEB               	addwfc	(_currentIndex+1)^(0+128),f
  4869                           
  4870                           ;main.c: 373:       if (currentIndex > maxCurrentIndex - 1)
  4871  0078  086B               	movf	(_currentIndex+1)^(0+128),w
  4872  0079  3A80               	xorlw	128
  4873  007A  00EC               	movwf	??_process_remote_command^(0+128)
  4874  007B  3080               	movlw	128
  4875  007C  026C               	subwf	??_process_remote_command^(0+128),w
  4876  007D  1D03               	skipz
  4877  007E  2881               	goto	u2245
  4878  007F  300B               	movlw	11
  4879  0080  026A               	subwf	_currentIndex^(0+128),w
  4880  0081                     u2245:	
  4881  0081  1C03               	skipc
  4882  0082  2884               	goto	u2241
  4883  0083  2885               	goto	u2240
  4884  0084                     u2241:	
  4885  0084  288E               	goto	l3677
  4886  0085                     u2240:	
  4887  0085                     l3673:	
  4888                           
  4889                           ;main.c: 374:       {;main.c: 375:         currentIndex = maxCurrentIndex - 1;
  4890  0085  300A               	movlw	10
  4891  0086  0021               	movlb	1	; select bank1
  4892  0087  00EA               	movwf	_currentIndex^(0+128)
  4893  0088  3000               	movlw	0
  4894  0089  00EB               	movwf	(_currentIndex^(0+128)+1)
  4895  008A                     l3675:	
  4896                           
  4897                           ;main.c: 376:         selectSomething();
  4898  008A  3185  25FD  3180   	fcall	_selectSomething
  4899                           
  4900                           ;main.c: 377:       } else {
  4901  008D  2891               	goto	l3679
  4902  008E                     l3677:	
  4903                           
  4904                           ;main.c: 378:         selectIncrease();
  4905  008E  318E  26F0  3180   	fcall	_selectIncrease
  4906  0091                     l3679:	
  4907                           
  4908                           ;main.c: 380:       setCurrent(currentValue[currentIndex], battery_voltage());
  4909  0091  0021               	movlb	1	; select bank1
  4910  0092  356A               	lslf	_currentIndex^(0+128),w
  4911  0093  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  4912  0094  0086               	movwf	6
  4913  0095  0187               	clrf	7
  4914  0096  3F40               	moviw [0]fsr1
  4915  0097  0020               	movlb	0	; select bank0
  4916  0098  00B9               	movwf	setCurrent@microamps
  4917  0099  3F41               	moviw [1]fsr1
  4918  009A  00BA               	movwf	setCurrent@microamps+1
  4919  009B  3187  274C  3180   	fcall	_battery_voltage
  4920  009E  0020               	movlb	0	; select bank0
  4921  009F  0838               	movf	?_battery_voltage+1,w
  4922  00A0  00BC               	movwf	setCurrent@Vdd_mv+1
  4923  00A1  0837               	movf	?_battery_voltage,w
  4924  00A2  00BB               	movwf	setCurrent@Vdd_mv
  4925  00A3  3181  21D5  3180   	fcall	_setCurrent
  4926  00A6                     l3681:	
  4927                           
  4928                           ;main.c: 381:       writePersistentState();
  4929  00A6  3185  25A1  3180   	fcall	_writePersistentState
  4930  00A9                     l3683:	
  4931                           
  4932                           ;main.c: 383:     if(STATE_FREQUENCY == interfaceState){
  4933  00A9  3002               	movlw	2
  4934  00AA  0678               	xorwf	_interfaceState,w
  4935  00AB  1D03               	btfss	3,2
  4936  00AC  28AE               	goto	u2251
  4937  00AD  28AF               	goto	u2250
  4938  00AE                     u2251:	
  4939  00AE  28DD               	goto	l3697
  4940  00AF                     u2250:	
  4941  00AF                     l3685:	
  4942                           
  4943                           ;main.c: 384:       frequencyIndex++;
  4944  00AF  3001               	movlw	1
  4945  00B0  0021               	movlb	1	; select bank1
  4946  00B1  07E8               	addwf	_frequencyIndex^(0+128),f
  4947  00B2  3000               	movlw	0
  4948  00B3  3DE9               	addwfc	(_frequencyIndex+1)^(0+128),f
  4949                           
  4950                           ;main.c: 385:       if (frequencyIndex > maxFrequencyIndex - 1)
  4951  00B4  0869               	movf	(_frequencyIndex+1)^(0+128),w
  4952  00B5  3A80               	xorlw	128
  4953  00B6  00EC               	movwf	??_process_remote_command^(0+128)
  4954  00B7  3080               	movlw	128
  4955  00B8  026C               	subwf	??_process_remote_command^(0+128),w
  4956  00B9  1D03               	skipz
  4957  00BA  28BD               	goto	u2265
  4958  00BB  3006               	movlw	6
  4959  00BC  0268               	subwf	_frequencyIndex^(0+128),w
  4960  00BD                     u2265:	
  4961  00BD  1C03               	skipc
  4962  00BE  28C0               	goto	u2261
  4963  00BF  28C1               	goto	u2260
  4964  00C0                     u2261:	
  4965  00C0  28CA               	goto	l3691
  4966  00C1                     u2260:	
  4967  00C1                     l3687:	
  4968                           
  4969                           ;main.c: 386:       {;main.c: 387:         frequencyIndex = maxFrequencyIndex - 1;
  4970  00C1  3005               	movlw	5
  4971  00C2  0021               	movlb	1	; select bank1
  4972  00C3  00E8               	movwf	_frequencyIndex^(0+128)
  4973  00C4  3000               	movlw	0
  4974  00C5  00E9               	movwf	(_frequencyIndex^(0+128)+1)
  4975  00C6                     l3689:	
  4976                           
  4977                           ;main.c: 388:         selectSomething();
  4978  00C6  3185  25FD  3180   	fcall	_selectSomething
  4979                           
  4980                           ;main.c: 389:       } else {
  4981  00C9  28CD               	goto	l3693
  4982  00CA                     l3691:	
  4983                           
  4984                           ;main.c: 390:         selectIncrease();
  4985  00CA  318E  26F0  3180   	fcall	_selectIncrease
  4986  00CD                     l3693:	
  4987                           
  4988                           ;main.c: 392:       setFrequency(frequencyValue[frequencyIndex]);
  4989  00CD  0021               	movlb	1	; select bank1
  4990  00CE  3568               	lslf	_frequencyIndex^(0+128),w
  4991  00CF  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  4992  00D0  0086               	movwf	6
  4993  00D1  0187               	clrf	7
  4994  00D2  3F40               	moviw [0]fsr1
  4995  00D3  0020               	movlb	0	; select bank0
  4996  00D4  00B7               	movwf	setFrequency@frequency_hz
  4997  00D5  3F41               	moviw [1]fsr1
  4998  00D6  00B8               	movwf	setFrequency@frequency_hz+1
  4999  00D7  3184  24DB  3180   	fcall	_setFrequency
  5000  00DA                     l3695:	
  5001                           
  5002                           ;main.c: 393:       writePersistentState();
  5003  00DA  3185  25A1  3180   	fcall	_writePersistentState
  5004  00DD                     l3697:	
  5005                           
  5006                           ;main.c: 395:     if(STATE_RUNNING == interfaceState){
  5007  00DD  0878               	movf	_interfaceState,w
  5008  00DE  1D03               	btfss	3,2
  5009  00DF  28E1               	goto	u2271
  5010  00E0  28E2               	goto	u2270
  5011  00E1                     u2271:	
  5012  00E1  28E5               	goto	l3701
  5013  00E2                     u2270:	
  5014  00E2                     l3699:	
  5015                           
  5016                           ;main.c: 396:       selectSomething();
  5017  00E2  3185  25FD  3180   	fcall	_selectSomething
  5018  00E5                     l3701:	
  5019                           
  5020                           ;main.c: 398:     if(STATE_LOWBATTERY == interfaceState){
  5021  00E5  3003               	movlw	3
  5022  00E6  0678               	xorwf	_interfaceState,w
  5023  00E7  1D03               	btfss	3,2
  5024  00E8  28EA               	goto	u2281
  5025  00E9  28EB               	goto	u2280
  5026  00EA                     u2281:	
  5027  00EA  29BB               	goto	l3765
  5028  00EB                     u2280:	
  5029  00EB                     l3703:	
  5030                           
  5031                           ;main.c: 399:       selectSomething();
  5032  00EB  3185  25FD  3180   	fcall	_selectSomething
  5033  00EE  29BB               	goto	l3765
  5034  00EF                     l3705:	
  5035                           
  5036                           ;main.c: 403:     if(STATE_CURRENT == interfaceState){
  5037  00EF  0378               	decf	_interfaceState,w
  5038  00F0  1D03               	btfss	3,2
  5039  00F1  28F3               	goto	u2291
  5040  00F2  28F4               	goto	u2290
  5041  00F3                     u2291:	
  5042  00F3  291D               	goto	l3721
  5043  00F4                     u2290:	
  5044  00F4                     l3707:	
  5045                           
  5046                           ;main.c: 404:       currentIndex--;
  5047  00F4  30FF               	movlw	255
  5048  00F5  07EA               	addwf	_currentIndex^(0+128),f
  5049  00F6  30FF               	movlw	255
  5050  00F7  3DEB               	addwfc	(_currentIndex+1)^(0+128),f
  5051  00F8                     l3709:	
  5052                           
  5053                           ;main.c: 405:       if (currentIndex < 0)
  5054  00F8  1FEB               	btfss	(_currentIndex+1)^(0+128),7
  5055  00F9  28FB               	goto	u2301
  5056  00FA  28FC               	goto	u2300
  5057  00FB                     u2301:	
  5058  00FB  2902               	goto	l3715
  5059  00FC                     u2300:	
  5060  00FC                     l3711:	
  5061                           
  5062                           ;main.c: 406:       {;main.c: 407:         currentIndex = 0;
  5063  00FC  01EA               	clrf	_currentIndex^(0+128)
  5064  00FD  01EB               	clrf	(_currentIndex+1)^(0+128)
  5065  00FE                     l3713:	
  5066                           
  5067                           ;main.c: 408:         selectSomething();
  5068  00FE  3185  25FD  3180   	fcall	_selectSomething
  5069                           
  5070                           ;main.c: 409:       } else {
  5071  0101  2905               	goto	l3717
  5072  0102                     l3715:	
  5073                           
  5074                           ;main.c: 410:         selectDecrease();
  5075  0102  318E  26CE  3180   	fcall	_selectDecrease
  5076  0105                     l3717:	
  5077                           
  5078                           ;main.c: 412:       setCurrent(currentValue[currentIndex], battery_voltage());
  5079  0105  0021               	movlb	1	; select bank1
  5080  0106  356A               	lslf	_currentIndex^(0+128),w
  5081  0107  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  5082  0108  0086               	movwf	6
  5083  0109  0187               	clrf	7
  5084  010A  3F40               	moviw [0]fsr1
  5085  010B  0020               	movlb	0	; select bank0
  5086  010C  00B9               	movwf	setCurrent@microamps
  5087  010D  3F41               	moviw [1]fsr1
  5088  010E  00BA               	movwf	setCurrent@microamps+1
  5089  010F  3187  274C  3180   	fcall	_battery_voltage
  5090  0112  0020               	movlb	0	; select bank0
  5091  0113  0838               	movf	?_battery_voltage+1,w
  5092  0114  00BC               	movwf	setCurrent@Vdd_mv+1
  5093  0115  0837               	movf	?_battery_voltage,w
  5094  0116  00BB               	movwf	setCurrent@Vdd_mv
  5095  0117  3181  21D5  3180   	fcall	_setCurrent
  5096  011A                     l3719:	
  5097                           
  5098                           ;main.c: 413:       writePersistentState();
  5099  011A  3185  25A1  3180   	fcall	_writePersistentState
  5100  011D                     l3721:	
  5101                           
  5102                           ;main.c: 415:     if(STATE_FREQUENCY == interfaceState){
  5103  011D  3002               	movlw	2
  5104  011E  0678               	xorwf	_interfaceState,w
  5105  011F  1D03               	btfss	3,2
  5106  0120  2922               	goto	u2311
  5107  0121  2923               	goto	u2310
  5108  0122                     u2311:	
  5109  0122  2945               	goto	l3737
  5110  0123                     u2310:	
  5111  0123                     l3723:	
  5112                           
  5113                           ;main.c: 416:       frequencyIndex--;
  5114  0123  30FF               	movlw	255
  5115  0124  0021               	movlb	1	; select bank1
  5116  0125  07E8               	addwf	_frequencyIndex^(0+128),f
  5117  0126  30FF               	movlw	255
  5118  0127  3DE9               	addwfc	(_frequencyIndex+1)^(0+128),f
  5119  0128                     l3725:	
  5120                           
  5121                           ;main.c: 417:       if (frequencyIndex < 0)
  5122  0128  1FE9               	btfss	(_frequencyIndex+1)^(0+128),7
  5123  0129  292B               	goto	u2321
  5124  012A  292C               	goto	u2320
  5125  012B                     u2321:	
  5126  012B  2932               	goto	l3731
  5127  012C                     u2320:	
  5128  012C                     l3727:	
  5129                           
  5130                           ;main.c: 418:       {;main.c: 419:         frequencyIndex = 0;
  5131  012C  01E8               	clrf	_frequencyIndex^(0+128)
  5132  012D  01E9               	clrf	(_frequencyIndex+1)^(0+128)
  5133  012E                     l3729:	
  5134                           
  5135                           ;main.c: 420:         selectSomething();
  5136  012E  3185  25FD  3180   	fcall	_selectSomething
  5137                           
  5138                           ;main.c: 421:       } else {
  5139  0131  2935               	goto	l3733
  5140  0132                     l3731:	
  5141                           
  5142                           ;main.c: 422:         selectDecrease();
  5143  0132  318E  26CE  3180   	fcall	_selectDecrease
  5144  0135                     l3733:	
  5145                           
  5146                           ;main.c: 424:       setFrequency(frequencyValue[frequencyIndex]);
  5147  0135  0021               	movlb	1	; select bank1
  5148  0136  3568               	lslf	_frequencyIndex^(0+128),w
  5149  0137  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  5150  0138  0086               	movwf	6
  5151  0139  0187               	clrf	7
  5152  013A  3F40               	moviw [0]fsr1
  5153  013B  0020               	movlb	0	; select bank0
  5154  013C  00B7               	movwf	setFrequency@frequency_hz
  5155  013D  3F41               	moviw [1]fsr1
  5156  013E  00B8               	movwf	setFrequency@frequency_hz+1
  5157  013F  3184  24DB  3180   	fcall	_setFrequency
  5158  0142                     l3735:	
  5159                           
  5160                           ;main.c: 425:       writePersistentState();
  5161  0142  3185  25A1  3180   	fcall	_writePersistentState
  5162  0145                     l3737:	
  5163                           
  5164                           ;main.c: 427:     if(STATE_RUNNING == interfaceState){
  5165  0145  0878               	movf	_interfaceState,w
  5166  0146  1D03               	btfss	3,2
  5167  0147  2949               	goto	u2331
  5168  0148  294A               	goto	u2330
  5169  0149                     u2331:	
  5170  0149  294D               	goto	l3741
  5171  014A                     u2330:	
  5172  014A                     l3739:	
  5173                           
  5174                           ;main.c: 428:       selectSomething();
  5175  014A  3185  25FD  3180   	fcall	_selectSomething
  5176  014D                     l3741:	
  5177                           
  5178                           ;main.c: 430:     if(STATE_LOWBATTERY == interfaceState){
  5179  014D  3003               	movlw	3
  5180  014E  0678               	xorwf	_interfaceState,w
  5181  014F  1D03               	btfss	3,2
  5182  0150  2952               	goto	u2341
  5183  0151  2953               	goto	u2340
  5184  0152                     u2341:	
  5185  0152  29BB               	goto	l3765
  5186  0153                     u2340:	
  5187  0153  28EB               	goto	l3703
  5188  0154                     l3745:	
  5189                           
  5190                           ;main.c: 435:     selectFrequency();
  5191  0154  318F  278A  3180   	fcall	_selectFrequency
  5192                           
  5193                           ;main.c: 436:     break;
  5194  0157  29BB               	goto	l3765
  5195  0158                     l3747:	
  5196                           
  5197                           ;main.c: 438:     selectCurrent();
  5198  0158  318F  2762  3180   	fcall	_selectCurrent
  5199                           
  5200                           ;main.c: 439:     break;
  5201  015B  29BB               	goto	l3765
  5202  015C                     l3749:	
  5203                           
  5204                           ;main.c: 443:     frequencyIndex = 0;
  5205  015C  01E8               	clrf	_frequencyIndex^(0+128)
  5206  015D  01E9               	clrf	(_frequencyIndex+1)^(0+128)
  5207  015E                     l3751:	
  5208                           
  5209                           ;main.c: 444:     setFrequency(frequencyValue[frequencyIndex]);
  5210  015E  3568               	lslf	_frequencyIndex^(0+128),w
  5211  015F  3EBB               	addlw	(low (_frequencyValue| 0))& (0+255)
  5212  0160  0086               	movwf	6
  5213  0161  0187               	clrf	7
  5214  0162  3F40               	moviw [0]fsr1
  5215  0163  0020               	movlb	0	; select bank0
  5216  0164  00B7               	movwf	setFrequency@frequency_hz
  5217  0165  3F41               	moviw [1]fsr1
  5218  0166  00B8               	movwf	setFrequency@frequency_hz+1
  5219  0167  3184  24DB  3180   	fcall	_setFrequency
  5220  016A                     l3753:	
  5221                           
  5222                           ;main.c: 445:     selectResetValue();
  5223  016A  318F  2715  3180   	fcall	_selectResetValue
  5224                           
  5225                           ;main.c: 446:     break;
  5226  016D  29BB               	goto	l3765
  5227  016E                     l3755:	
  5228                           
  5229                           ;main.c: 448:     currentIndex = 0;
  5230  016E  01EA               	clrf	_currentIndex^(0+128)
  5231  016F  01EB               	clrf	(_currentIndex+1)^(0+128)
  5232  0170                     l3757:	
  5233                           
  5234                           ;main.c: 449:     setCurrent(currentValue[currentIndex], battery_voltage());
  5235  0170  356A               	lslf	_currentIndex^(0+128),w
  5236  0171  3EA5               	addlw	(low (_currentValue| 0))& (0+255)
  5237  0172  0086               	movwf	6
  5238  0173  0187               	clrf	7
  5239  0174  3F40               	moviw [0]fsr1
  5240  0175  0020               	movlb	0	; select bank0
  5241  0176  00B9               	movwf	setCurrent@microamps
  5242  0177  3F41               	moviw [1]fsr1
  5243  0178  00BA               	movwf	setCurrent@microamps+1
  5244  0179  3187  274C  3180   	fcall	_battery_voltage
  5245  017C  0020               	movlb	0	; select bank0
  5246  017D  0838               	movf	?_battery_voltage+1,w
  5247  017E  00BC               	movwf	setCurrent@Vdd_mv+1
  5248  017F  0837               	movf	?_battery_voltage,w
  5249  0180  00BB               	movwf	setCurrent@Vdd_mv
  5250  0181  3181  21D5  3180   	fcall	_setCurrent
  5251  0184  296A               	goto	l3753
  5252  0185                     l3763:	
  5253  0185  0021               	movlb	1	; select bank1
  5254  0186  086E               	movf	process_remote_command@code^(0+128),w
  5255  0187  3E03               	addlw	3
  5256  0188  0086               	movwf	6
  5257  0189  0187               	clrf	7
  5258  018A  0801               	movf	1,w
  5259  018B  00EC               	movwf	??_process_remote_command^(0+128)
  5260  018C  01ED               	clrf	(??_process_remote_command^(0+128)+1)
  5261                           
  5262                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5263                           ; Switch size 1, requested type "simple"
  5264                           ; Number of cases is 1, Range of values is 0 to 0
  5265                           ; switch strategies available:
  5266                           ; Name         Instructions Cycles
  5267                           ; simple_byte            4     3 (average)
  5268                           ; direct_byte            8     6 (fixed)
  5269                           ; jumptable            260     6 (fixed)
  5270                           ;	Chosen strategy is simple_byte
  5271  018D  086D               	movf	(??_process_remote_command+1)^(0+128),w
  5272  018E  3A00               	xorlw	0	; case 0
  5273  018F  1903               	skipnz
  5274  0190  2992               	goto	l3881
  5275  0191  29BB               	goto	l3765
  5276  0192                     l3881:	
  5277                           
  5278                           ; Switch size 1, requested type "simple"
  5279                           ; Number of cases is 13, Range of values is 8 to 176
  5280                           ; switch strategies available:
  5281                           ; Name         Instructions Cycles
  5282                           ; simple_byte           40    21 (average)
  5283                           ; jumptable            263     9 (fixed)
  5284                           ;	Chosen strategy is simple_byte
  5285  0192  086C               	movf	??_process_remote_command^(0+128),w
  5286  0193  3A08               	xorlw	8	; case 8
  5287  0194  1903               	skipnz
  5288  0195  29BB               	goto	l3765
  5289  0196  3A18               	xorlw	24	; case 16
  5290  0197  1903               	skipnz
  5291  0198  2958               	goto	l3747
  5292  0199  3A08               	xorlw	8	; case 24
  5293  019A  1903               	skipnz
  5294  019B  29BB               	goto	l3765
  5295  019C  3A30               	xorlw	48	; case 40
  5296  019D  1903               	skipnz
  5297  019E  29BB               	goto	l3765
  5298  019F  3A60               	xorlw	96	; case 72
  5299  01A0  1903               	skipnz
  5300  01A1  296E               	goto	l3755
  5301  01A2  3A18               	xorlw	24	; case 80
  5302  01A3  1903               	skipnz
  5303  01A4  2954               	goto	l3745
  5304  01A5  3A08               	xorlw	8	; case 88
  5305  01A6  1903               	skipnz
  5306  01A7  29BB               	goto	l3765
  5307  01A8  3A30               	xorlw	48	; case 104
  5308  01A9  1903               	skipnz
  5309  01AA  29BB               	goto	l3765
  5310  01AB  3AE0               	xorlw	224	; case 136
  5311  01AC  1903               	skipnz
  5312  01AD  295C               	goto	l3749
  5313  01AE  3A10               	xorlw	16	; case 152
  5314  01AF  1903               	skipnz
  5315  01B0  29BB               	goto	l3765
  5316  01B1  3A38               	xorlw	56	; case 160
  5317  01B2  1903               	skipnz
  5318  01B3  286F               	goto	l3669
  5319  01B4  3A08               	xorlw	8	; case 168
  5320  01B5  1903               	skipnz
  5321  01B6  29BB               	goto	l3765
  5322  01B7  3A18               	xorlw	24	; case 176
  5323  01B8  1903               	skipnz
  5324  01B9  28EF               	goto	l3705
  5325  01BA  29BB               	goto	l3765
  5326  01BB                     l3765:	
  5327                           
  5328                           ;main.c: 468:   setLEDColor(LED_red, LED_green, LED_blue);
  5329  01BB  01F3               	clrf	setLEDColor@green
  5330  01BC  01F4               	clrf	setLEDColor@blue
  5331  01BD  3000               	movlw	0
  5332  01BE  318E  2637  3180   	fcall	_setLEDColor
  5333  01C1                     l3767:	
  5334                           
  5335                           ;main.c: 469:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  5336  01C1  3006               	movlw	6
  5337  01C2  0021               	movlb	1	; select bank1
  5338  01C3  00ED               	movwf	(??_process_remote_command^(0+128)+1)
  5339  01C4  3013               	movlw	19
  5340  01C5  00EC               	movwf	??_process_remote_command^(0+128)
  5341  01C6  30AD               	movlw	173
  5342  01C7                     u2407:	
  5343  01C7  0B89               	decfsz	9,f
  5344  01C8  29C7               	goto	u2407
  5345  01C9  0BEC               	decfsz	??_process_remote_command^(0+128),f
  5346  01CA  29C7               	goto	u2407
  5347  01CB  0BED               	decfsz	(??_process_remote_command^(0+128)+1),f
  5348  01CC  29C7               	goto	u2407
  5349  01CD  3200               	nop2
  5350  01CE                     l3769:	
  5351                           
  5352                           ;main.c: 470:   setLEDColor(0, 0, 0);
  5353  01CE  01F3               	clrf	setLEDColor@green
  5354  01CF  01F4               	clrf	setLEDColor@blue
  5355  01D0  3000               	movlw	0
  5356  01D1  318E  2637  3180   	fcall	_setLEDColor
  5357  01D4                     l651:	
  5358  01D4  0008               	return
  5359  01D5                     __end_of_process_remote_command:	
  5360                           
  5361                           	psect	text4
  5362  05A1                     __ptext4:	
  5363 ;; *************** function _writePersistentState *****************
  5364 ;; Defined at:
  5365 ;;		line 127 in file "main.c"
  5366 ;; Parameters:    Size  Location     Type
  5367 ;;		None
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;  i               1   78[BANK0 ] unsigned char 
  5370 ;;  buf            64   14[BANK0 ] unsigned short [32]
  5371 ;;  idx             1   79[BANK0 ] unsigned char 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  1    wreg      void 
  5374 ;; Registers used:
  5375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5381 ;;      Params:         0       0       0       0       0       0       0       0
  5382 ;;      Locals:         0      66       0       0       0       0       0       0
  5383 ;;      Temps:          0       4       0       0       0       0       0       0
  5384 ;;      Totals:         0      70       0       0       0       0       0       0
  5385 ;;Total ram usage:       70 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    6
  5388 ;; This function calls:
  5389 ;;		_FLASH_WriteBlock
  5390 ;; This function is called by:
  5391 ;;		_process_remote_command
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           
  5396                           ;psect for function _writePersistentState
  5397  05A1                     _writePersistentState:	
  5398  05A1                     l3481:	
  5399                           ;incstack = 0
  5400                           ; Regs used in _writePersistentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5401                           
  5402                           
  5403                           ;main.c: 130:   uint16_t buf[32];;main.c: 131:   for (uint8_t i=0; i<32; i++){
  5404  05A1  0020               	movlb	0	; select bank0
  5405  05A2  01EE               	clrf	writePersistentState@i
  5406  05A3                     l3487:	
  5407                           
  5408                           ;main.c: 132:     buf[0] = 0;
  5409  05A3  01AE               	clrf	writePersistentState@buf
  5410  05A4  01AF               	clrf	writePersistentState@buf+1
  5411  05A5                     l3489:	
  5412                           
  5413                           ;main.c: 133:   }
  5414  05A5  3001               	movlw	1
  5415  05A6  00AA               	movwf	??_writePersistentState
  5416  05A7  082A               	movf	??_writePersistentState,w
  5417  05A8  07EE               	addwf	writePersistentState@i,f
  5418  05A9                     l3491:	
  5419  05A9  3020               	movlw	32
  5420  05AA  026E               	subwf	writePersistentState@i,w
  5421  05AB  1C03               	skipc
  5422  05AC  2DAE               	goto	u2131
  5423  05AD  2DAF               	goto	u2130
  5424  05AE                     u2131:	
  5425  05AE  2DA3               	goto	l3487
  5426  05AF                     u2130:	
  5427  05AF                     l3493:	
  5428                           
  5429                           ;main.c: 136:   uint8_t idx = 0;
  5430  05AF  01EF               	clrf	writePersistentState@idx
  5431  05B0                     l3495:	
  5432                           
  5433                           ;main.c: 137:   buf[idx++] = ((uint16_t)(0x3400 | (currentIndex & 0xff)));
  5434  05B0  30FF               	movlw	255
  5435  05B1  0021               	movlb	1	; select bank1
  5436  05B2  056A               	andwf	_currentIndex^(0+128),w
  5437  05B3  0020               	movlb	0	; select bank0
  5438  05B4  00AA               	movwf	??_writePersistentState
  5439  05B5  3000               	movlw	0
  5440  05B6  0021               	movlb	1	; select bank1
  5441  05B7  056B               	andwf	(_currentIndex+1)^(0+128),w
  5442  05B8  0020               	movlb	0	; select bank0
  5443  05B9  00AB               	movwf	??_writePersistentState+1
  5444  05BA  3000               	movlw	0
  5445  05BB  042A               	iorwf	??_writePersistentState,w
  5446  05BC  00AE               	movwf	writePersistentState@buf
  5447  05BD  3034               	movlw	52
  5448  05BE  042B               	iorwf	??_writePersistentState+1,w
  5449  05BF  00AF               	movwf	writePersistentState@buf+1
  5450  05C0                     l3497:	
  5451  05C0  3001               	movlw	1
  5452  05C1  00AA               	movwf	??_writePersistentState
  5453  05C2  082A               	movf	??_writePersistentState,w
  5454  05C3  07EF               	addwf	writePersistentState@idx,f
  5455  05C4                     l3499:	
  5456                           
  5457                           ;main.c: 138:   buf[idx++] = ((uint16_t)(0x3400 | (frequencyIndex & 0xff)));
  5458  05C4  30FF               	movlw	255
  5459  05C5  0021               	movlb	1	; select bank1
  5460  05C6  0568               	andwf	_frequencyIndex^(0+128),w
  5461  05C7  0020               	movlb	0	; select bank0
  5462  05C8  00AA               	movwf	??_writePersistentState
  5463  05C9  3000               	movlw	0
  5464  05CA  0021               	movlb	1	; select bank1
  5465  05CB  0569               	andwf	(_frequencyIndex+1)^(0+128),w
  5466  05CC  0020               	movlb	0	; select bank0
  5467  05CD  00AB               	movwf	??_writePersistentState+1
  5468  05CE  3000               	movlw	0
  5469  05CF  042A               	iorwf	??_writePersistentState,w
  5470  05D0  00AC               	movwf	??_writePersistentState+2
  5471  05D1  3034               	movlw	52
  5472  05D2  042B               	iorwf	??_writePersistentState+1,w
  5473  05D3  00AD               	movwf	??_writePersistentState+3
  5474  05D4  356F               	lslf	writePersistentState@idx,w
  5475  05D5  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  5476  05D6  0086               	movwf	6
  5477  05D7  0187               	clrf	7
  5478  05D8  082C               	movf	??_writePersistentState+2,w
  5479  05D9  3FC0               	movwi [0]fsr1
  5480  05DA  082D               	movf	??_writePersistentState+3,w
  5481  05DB  3FC1               	movwi [1]fsr1
  5482  05DC                     l3501:	
  5483  05DC  3001               	movlw	1
  5484  05DD  00AA               	movwf	??_writePersistentState
  5485  05DE  082A               	movf	??_writePersistentState,w
  5486  05DF  07EF               	addwf	writePersistentState@idx,f
  5487  05E0                     l3503:	
  5488                           
  5489                           ;main.c: 139:   buf[idx++] = ((uint16_t)(0x3400 | (dc_frequency_flag & 0xff)));
  5490  05E0  3000               	movlw	0
  5491  05E1  047A               	iorwf	_dc_frequency_flag,w
  5492  05E2  00AA               	movwf	??_writePersistentState
  5493  05E3  3034               	movlw	52
  5494  05E4  00AB               	movwf	??_writePersistentState+1
  5495  05E5  356F               	lslf	writePersistentState@idx,w
  5496  05E6  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  5497  05E7  0086               	movwf	6
  5498  05E8  0187               	clrf	7
  5499  05E9  082A               	movf	??_writePersistentState,w
  5500  05EA  3FC0               	movwi [0]fsr1
  5501  05EB  082B               	movf	??_writePersistentState+1,w
  5502  05EC  3FC1               	movwi [1]fsr1
  5503  05ED                     l3505:	
  5504  05ED  3001               	movlw	1
  5505  05EE  00AA               	movwf	??_writePersistentState
  5506  05EF  082A               	movf	??_writePersistentState,w
  5507  05F0  07EF               	addwf	writePersistentState@idx,f
  5508  05F1                     l3507:	
  5509                           
  5510                           ;main.c: 141:   FLASH_WriteBlock((uint16_t)&HEF_persistent_state, buf);
  5511  05F1  30E0               	movlw	224
  5512  05F2  00A0               	movwf	FLASH_WriteBlock@writeAddr
  5513  05F3  300F               	movlw	15
  5514  05F4  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
  5515  05F5  302E               	movlw	(low (writePersistentState@buf| 0))& (0+255)
  5516  05F6  00AA               	movwf	??_writePersistentState
  5517  05F7  082A               	movf	??_writePersistentState,w
  5518  05F8  00A2               	movwf	FLASH_WriteBlock@flashWordArray
  5519  05F9  3184  2403  3185   	fcall	_FLASH_WriteBlock
  5520  05FC                     l559:	
  5521  05FC  0008               	return
  5522  05FD                     __end_of_writePersistentState:	
  5523                           
  5524                           	psect	text5
  5525  0403                     __ptext5:	
  5526 ;; *************** function _FLASH_WriteBlock *****************
  5527 ;; Defined at:
  5528 ;;		line 94 in file "mcc_generated_files/memory.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  writeAddr       2    0[BANK0 ] unsigned short 
  5531 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned short 
  5532 ;;		 -> writePersistentState@buf(64), 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;  blockStartAd    2    6[BANK0 ] unsigned short 
  5535 ;;  i               1    9[BANK0 ] unsigned char 
  5536 ;;  GIEBitValue     1    8[BANK0 ] unsigned char 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  1    wreg      char 
  5539 ;; Registers used:
  5540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5546 ;;      Params:         0       3       0       0       0       0       0       0
  5547 ;;      Locals:         0       4       0       0       0       0       0       0
  5548 ;;      Temps:          0       3       0       0       0       0       0       0
  5549 ;;      Totals:         0      10       0       0       0       0       0       0
  5550 ;;Total ram usage:       10 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:    5
  5553 ;; This function calls:
  5554 ;;		_FLASH_EraseBlock
  5555 ;; This function is called by:
  5556 ;;		_writePersistentState
  5557 ;;		_FLASH_WriteWord
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           
  5562                           ;psect for function _FLASH_WriteBlock
  5563  0403                     _FLASH_WriteBlock:	
  5564  0403                     l3219:	
  5565                           ;incstack = 0
  5566                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5567                           
  5568                           
  5569                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x1000 -1) ^ (32 -1)));
  5570  0403  30E0               	movlw	224
  5571  0404  0020               	movlb	0	; select bank0
  5572  0405  0520               	andwf	FLASH_WriteBlock@writeAddr,w
  5573  0406  00A6               	movwf	FLASH_WriteBlock@blockStartAddr
  5574  0407  300F               	movlw	15
  5575  0408  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
  5576  0409  00A7               	movwf	FLASH_WriteBlock@blockStartAddr+1
  5577  040A                     l3221:	
  5578                           
  5579                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  5580  040A  3000               	movlw	0
  5581  040B  1B8B               	btfsc	11,7	;volatile
  5582  040C  3001               	movlw	1
  5583  040D  00A8               	movwf	FLASH_WriteBlock@GIEBitValue
  5584  040E                     l3223:	
  5585                           
  5586                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  5587  040E  0827               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  5588  040F  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  5589  0410  1D03               	skipz
  5590  0411  2C14               	goto	u1855
  5591  0412  0826               	movf	FLASH_WriteBlock@blockStartAddr,w
  5592  0413  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
  5593  0414                     u1855:	
  5594  0414  1903               	skipnz
  5595  0415  2C17               	goto	u1851
  5596  0416  2C18               	goto	u1850
  5597  0417                     u1851:	
  5598  0417  2C19               	goto	l445
  5599  0418                     u1850:	
  5600  0418  2C6E               	goto	l446
  5601  0419                     l445:	
  5602                           ;mcc_generated_files/memory.c: 104:     }
  5603                           
  5604                           
  5605                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  5606  0419  138B               	bcf	11,7	;volatile
  5607  041A                     l3227:	
  5608                           
  5609                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  5610  041A  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  5611  041B  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  5612  041C  0820               	movf	FLASH_WriteBlock@writeAddr,w
  5613  041D  00F3               	movwf	FLASH_EraseBlock@startAddr
  5614  041E  318E  264E  3184   	fcall	_FLASH_EraseBlock
  5615  0421                     l3229:	
  5616                           
  5617                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  5618  0421  0023               	movlb	3	; select bank3
  5619  0422  1315               	bcf	21,6	;volatile
  5620  0423                     l3231:	
  5621                           
  5622                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  5623  0423  1515               	bsf	21,2	;volatile
  5624  0424                     l3233:	
  5625                           
  5626                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  5627  0424  1695               	bsf	21,5	;volatile
  5628  0425                     l3235:	
  5629                           
  5630                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<32; i++)
  5631  0425  0020               	movlb	0	; select bank0
  5632  0426  01A9               	clrf	FLASH_WriteBlock@i
  5633  0427                     l3241:	
  5634                           
  5635                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  5636  0427  0820               	movf	FLASH_WriteBlock@writeAddr,w
  5637  0428  0023               	movlb	3	; select bank3
  5638  0429  0091               	movwf	17	;volatile
  5639  042A                     l3243:	
  5640                           
  5641                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  5642  042A  0020               	movlb	0	; select bank0
  5643  042B  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  5644  042C  0023               	movlb	3	; select bank3
  5645  042D  0092               	movwf	18	;volatile
  5646  042E                     l3245:	
  5647                           
  5648                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  5649  042E  0020               	movlb	0	; select bank0
  5650  042F  3529               	lslf	FLASH_WriteBlock@i,w
  5651  0430  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  5652  0431  00A3               	movwf	??_FLASH_WriteBlock
  5653  0432  0823               	movf	??_FLASH_WriteBlock,w
  5654  0433  0086               	movwf	6
  5655  0434  0187               	clrf	7
  5656  0435  0801               	movf	1,w
  5657  0436  0023               	movlb	3	; select bank3
  5658  0437  0093               	movwf	19	;volatile
  5659  0438                     l3247:	
  5660                           
  5661                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  5662  0438  0020               	movlb	0	; select bank0
  5663  0439  3529               	lslf	FLASH_WriteBlock@i,w
  5664  043A  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  5665  043B  00A3               	movwf	??_FLASH_WriteBlock
  5666  043C  0823               	movf	??_FLASH_WriteBlock,w
  5667  043D  0086               	movwf	6
  5668  043E  0187               	clrf	7
  5669  043F  3F40               	moviw [0]fsr1
  5670  0440  00A4               	movwf	??_FLASH_WriteBlock+1
  5671  0441  3F41               	moviw [1]fsr1
  5672  0442  00A5               	movwf	??_FLASH_WriteBlock+2
  5673  0443  0825               	movf	??_FLASH_WriteBlock+2,w
  5674  0444  0023               	movlb	3	; select bank3
  5675  0445  0094               	movwf	20	;volatile
  5676  0446                     l3249:	
  5677                           
  5678                           ;mcc_generated_files/memory.c: 127:         if(i == (32 -1))
  5679  0446  301F               	movlw	31
  5680  0447  0020               	movlb	0	; select bank0
  5681  0448  0629               	xorwf	FLASH_WriteBlock@i,w
  5682  0449  1D03               	btfss	3,2
  5683  044A  2C4C               	goto	u1861
  5684  044B  2C4D               	goto	u1860
  5685  044C                     u1861:	
  5686  044C  2C4F               	goto	l3253
  5687  044D                     u1860:	
  5688  044D                     l3251:	
  5689                           
  5690                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  5691  044D  0023               	movlb	3	; select bank3
  5692  044E  1295               	bcf	21,5	;volatile
  5693  044F                     l3253:	
  5694                           
  5695                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  5696  044F  3055               	movlw	85
  5697  0450  0023               	movlb	3	; select bank3
  5698  0451  0096               	movwf	22	;volsfr
  5699                           
  5700                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  5701  0452  30AA               	movlw	170
  5702  0453  0096               	movwf	22	;volsfr
  5703  0454                     l3255:	
  5704                           
  5705                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  5706  0454  1495               	bsf	21,1	;volatile
  5707  0455                     l3257:	
  5708                           
  5709                           ;mcc_generated_files/memory.c: 136:         __nop();
  5710  0455  0000               	nop
  5711  0456                     l3259:	
  5712                           
  5713                           ;mcc_generated_files/memory.c: 137:         __nop();
  5714  0456  0000               	nop
  5715                           
  5716                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  5717  0457  3001               	movlw	1
  5718  0458  0020               	movlb	0	; select bank0
  5719  0459  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
  5720  045A  3000               	movlw	0
  5721  045B  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  5722  045C                     l3261:	
  5723                           
  5724                           ;mcc_generated_files/memory.c: 140:     }
  5725  045C  3001               	movlw	1
  5726  045D  00A3               	movwf	??_FLASH_WriteBlock
  5727  045E  0823               	movf	??_FLASH_WriteBlock,w
  5728  045F  07A9               	addwf	FLASH_WriteBlock@i,f
  5729  0460                     l3263:	
  5730  0460  3020               	movlw	32
  5731  0461  0229               	subwf	FLASH_WriteBlock@i,w
  5732  0462  1C03               	skipc
  5733  0463  2C65               	goto	u1871
  5734  0464  2C66               	goto	u1870
  5735  0465                     u1871:	
  5736  0465  2C27               	goto	l3241
  5737  0466                     u1870:	
  5738  0466                     l448:	
  5739                           
  5740                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  5741  0466  0023               	movlb	3	; select bank3
  5742  0467  1115               	bcf	21,2	;volatile
  5743  0468                     l3265:	
  5744                           
  5745                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  5746  0468  0020               	movlb	0	; select bank0
  5747  0469  0C28               	rrf	FLASH_WriteBlock@GIEBitValue,w
  5748  046A  1C03               	skipc
  5749  046B  138B               	bcf	11,7	;volatile
  5750  046C  1803               	skipnc
  5751  046D  178B               	bsf	11,7	;volatile
  5752  046E                     l446:	
  5753  046E  0008               	return
  5754  046F                     __end_of_FLASH_WriteBlock:	
  5755                           
  5756                           	psect	text6
  5757  0E4E                     __ptext6:	
  5758 ;; *************** function _FLASH_EraseBlock *****************
  5759 ;; Defined at:
  5760 ;;		line 148 in file "mcc_generated_files/memory.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  startAddr       2    3[COMMON] unsigned short 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  1    wreg      void 
  5767 ;; Registers used:
  5768 ;;		wreg, status,2, status,0
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5774 ;;      Params:         2       0       0       0       0       0       0       0
  5775 ;;      Locals:         1       0       0       0       0       0       0       0
  5776 ;;      Temps:          0       0       0       0       0       0       0       0
  5777 ;;      Totals:         3       0       0       0       0       0       0       0
  5778 ;;Total ram usage:        3 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    4
  5781 ;; This function calls:
  5782 ;;		Nothing
  5783 ;; This function is called by:
  5784 ;;		_FLASH_WriteBlock
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           
  5789                           ;psect for function _FLASH_EraseBlock
  5790  0E4E                     _FLASH_EraseBlock:	
  5791  0E4E                     l3169:	
  5792                           ;incstack = 0
  5793                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  5794                           
  5795                           
  5796                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  5797  0E4E  3000               	movlw	0
  5798  0E4F  1B8B               	btfsc	11,7	;volatile
  5799  0E50  3001               	movlw	1
  5800  0E51  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
  5801  0E52                     l3171:	
  5802                           
  5803                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  5804  0E52  138B               	bcf	11,7	;volatile
  5805  0E53                     l3173:	
  5806                           
  5807                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  5808  0E53  0873               	movf	FLASH_EraseBlock@startAddr,w
  5809  0E54  0023               	movlb	3	; select bank3
  5810  0E55  0091               	movwf	17	;volatile
  5811  0E56                     l3175:	
  5812                           
  5813                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  5814  0E56  0874               	movf	FLASH_EraseBlock@startAddr+1,w
  5815  0E57  0092               	movwf	18	;volatile
  5816  0E58                     l3177:	
  5817                           
  5818                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  5819  0E58  1315               	bcf	21,6	;volatile
  5820  0E59                     l3179:	
  5821                           
  5822                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  5823  0E59  1615               	bsf	21,4	;volatile
  5824  0E5A                     l3181:	
  5825                           
  5826                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  5827  0E5A  1515               	bsf	21,2	;volatile
  5828                           
  5829                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  5830  0E5B  3055               	movlw	85
  5831  0E5C  0096               	movwf	22	;volsfr
  5832                           
  5833                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  5834  0E5D  30AA               	movlw	170
  5835  0E5E  0096               	movwf	22	;volsfr
  5836  0E5F                     l3183:	
  5837                           
  5838                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  5839  0E5F  1495               	bsf	21,1	;volatile
  5840  0E60                     l3185:	
  5841                           
  5842                           ;mcc_generated_files/memory.c: 168:     __nop();
  5843  0E60  0000               	nop
  5844  0E61                     l3187:	
  5845                           
  5846                           ;mcc_generated_files/memory.c: 169:     __nop();
  5847  0E61  0000               	nop
  5848  0E62                     l3189:	
  5849                           
  5850                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  5851  0E62  0023               	movlb	3	; select bank3
  5852  0E63  1115               	bcf	21,2	;volatile
  5853  0E64                     l3191:	
  5854                           
  5855                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  5856  0E64  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
  5857  0E65  1C03               	skipc
  5858  0E66  138B               	bcf	11,7	;volatile
  5859  0E67  1803               	skipnc
  5860  0E68  178B               	bsf	11,7	;volatile
  5861  0E69                     l452:	
  5862  0E69  0008               	return
  5863  0E6A                     __end_of_FLASH_EraseBlock:	
  5864                           
  5865                           	psect	text7
  5866  04DB                     __ptext7:	
  5867 ;; *************** function _setFrequency *****************
  5868 ;; Defined at:
  5869 ;;		line 327 in file "main.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;  frequency_hz    2   23[BANK0 ] short 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  PR4_val         2   26[BANK0 ] short 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      void 
  5876 ;; Registers used:
  5877 ;;		wreg, status,2, status,0, pclath, cstack
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5883 ;;      Params:         0       2       0       0       0       0       0       0
  5884 ;;      Locals:         0       2       0       0       0       0       0       0
  5885 ;;      Temps:          0       1       0       0       0       0       0       0
  5886 ;;      Totals:         0       5       0       0       0       0       0       0
  5887 ;;Total ram usage:        5 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    5
  5890 ;; This function calls:
  5891 ;;		_TMR4_LoadPeriodRegister
  5892 ;;		___aldiv
  5893 ;;		___lmul
  5894 ;; This function is called by:
  5895 ;;		_process_remote_command
  5896 ;;		_main
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           
  5901                           ;psect for function _setFrequency
  5902  04DB                     _setFrequency:	
  5903  04DB                     l3581:	
  5904                           ;incstack = 0
  5905                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  5906                           
  5907                           
  5908                           ;main.c: 327: void setFrequency(int16_t frequency_hz);main.c: 328: {;main.c: 343:   int1
      +                          6_t PR4_val = 1000000L / (96L * frequency_hz);
  5909  04DB  0020               	movlb	0	; select bank0
  5910  04DC  0837               	movf	setFrequency@frequency_hz,w
  5911  04DD  00A0               	movwf	___lmul@multiplier
  5912  04DE  0838               	movf	setFrequency@frequency_hz+1,w
  5913  04DF  00A1               	movwf	___lmul@multiplier+1
  5914  04E0  0D89               	rlf	9,f
  5915  04E1  3B89               	subwfb	9,f
  5916  04E2  0989               	comf	9,f
  5917  04E3  00A2               	movwf	___lmul@multiplier+2
  5918  04E4  00A3               	movwf	___lmul@multiplier+3
  5919  04E5  3000               	movlw	0
  5920  04E6  00A7               	movwf	___lmul@multiplicand+3
  5921  04E7  3000               	movlw	0
  5922  04E8  00A6               	movwf	___lmul@multiplicand+2
  5923  04E9  3000               	movlw	0
  5924  04EA  00A5               	movwf	___lmul@multiplicand+1
  5925  04EB  3060               	movlw	96
  5926  04EC  00A4               	movwf	___lmul@multiplicand
  5927  04ED  3187  2718  3184   	fcall	___lmul
  5928  04F0  0020               	movlb	0	; select bank0
  5929  04F1  0823               	movf	?___lmul+3,w
  5930  04F2  00AB               	movwf	___aldiv@divisor+3
  5931  04F3  0822               	movf	?___lmul+2,w
  5932  04F4  00AA               	movwf	___aldiv@divisor+2
  5933  04F5  0821               	movf	?___lmul+1,w
  5934  04F6  00A9               	movwf	___aldiv@divisor+1
  5935  04F7  0820               	movf	?___lmul,w
  5936  04F8  00A8               	movwf	___aldiv@divisor
  5937  04F9  3000               	movlw	0
  5938  04FA  00AF               	movwf	___aldiv@dividend+3
  5939  04FB  300F               	movlw	15
  5940  04FC  00AE               	movwf	___aldiv@dividend+2
  5941  04FD  3042               	movlw	66
  5942  04FE  00AD               	movwf	___aldiv@dividend+1
  5943  04FF  3040               	movlw	64
  5944  0500  00AC               	movwf	___aldiv@dividend
  5945  0501  3182  227A  3184   	fcall	___aldiv
  5946  0504  0020               	movlb	0	; select bank0
  5947  0505  0829               	movf	?___aldiv+1,w
  5948  0506  00BB               	movwf	setFrequency@PR4_val+1
  5949  0507  0828               	movf	?___aldiv,w
  5950  0508  00BA               	movwf	setFrequency@PR4_val
  5951  0509                     l3583:	
  5952                           
  5953                           ;main.c: 344:   if (PR4_val > 255){
  5954  0509  083B               	movf	setFrequency@PR4_val+1,w
  5955  050A  3A80               	xorlw	128
  5956  050B  00B9               	movwf	??_setFrequency
  5957  050C  3081               	movlw	129
  5958  050D  0239               	subwf	??_setFrequency,w
  5959  050E  1D03               	skipz
  5960  050F  2D12               	goto	u2195
  5961  0510  3000               	movlw	0
  5962  0511  023A               	subwf	setFrequency@PR4_val,w
  5963  0512                     u2195:	
  5964  0512  1C03               	skipc
  5965  0513  2D15               	goto	u2191
  5966  0514  2D16               	goto	u2190
  5967  0515                     u2191:	
  5968  0515  2D1B               	goto	l612
  5969  0516                     u2190:	
  5970  0516                     l3585:	
  5971                           
  5972                           ;main.c: 345:     PR4_val = 255;
  5973  0516  30FF               	movlw	255
  5974  0517  0020               	movlb	0	; select bank0
  5975  0518  00BA               	movwf	setFrequency@PR4_val
  5976  0519  3000               	movlw	0
  5977  051A  00BB               	movwf	setFrequency@PR4_val+1
  5978  051B                     l612:	
  5979                           ;main.c: 346:   }
  5980                           
  5981                           
  5982                           ;main.c: 347:   if (PR4_val < 68){
  5983  051B  0020               	movlb	0	; select bank0
  5984  051C  083B               	movf	setFrequency@PR4_val+1,w
  5985  051D  3A80               	xorlw	128
  5986  051E  00B9               	movwf	??_setFrequency
  5987  051F  3080               	movlw	128
  5988  0520  0239               	subwf	??_setFrequency,w
  5989  0521  1D03               	skipz
  5990  0522  2D25               	goto	u2205
  5991  0523  3044               	movlw	68
  5992  0524  023A               	subwf	setFrequency@PR4_val,w
  5993  0525                     u2205:	
  5994  0525  1803               	skipnc
  5995  0526  2D28               	goto	u2201
  5996  0527  2D29               	goto	u2200
  5997  0528                     u2201:	
  5998  0528  2D2E               	goto	l3589
  5999  0529                     u2200:	
  6000  0529                     l3587:	
  6001                           
  6002                           ;main.c: 348:     PR4_val = 68;
  6003  0529  3044               	movlw	68
  6004  052A  0020               	movlb	0	; select bank0
  6005  052B  00BA               	movwf	setFrequency@PR4_val
  6006  052C  3000               	movlw	0
  6007  052D  00BB               	movwf	setFrequency@PR4_val+1
  6008  052E                     l3589:	
  6009                           
  6010                           ;main.c: 354:   (INTCONbits.GIE = 0);
  6011  052E  138B               	bcf	11,7	;volatile
  6012  052F                     l3591:	
  6013                           
  6014                           ;main.c: 355:   TMR4_LoadPeriodRegister((uint16_t)PR4_val);
  6015  052F  0020               	movlb	0	; select bank0
  6016  0530  083A               	movf	setFrequency@PR4_val,w
  6017  0531  318D  256C  3184   	fcall	_TMR4_LoadPeriodRegister
  6018  0534                     l3593:	
  6019                           
  6020                           ;main.c: 356:   if (0 == frequency_hz){
  6021  0534  0020               	movlb	0	; select bank0
  6022  0535  0837               	movf	setFrequency@frequency_hz,w
  6023  0536  0438               	iorwf	setFrequency@frequency_hz+1,w
  6024  0537  1D03               	btfss	3,2
  6025  0538  2D3A               	goto	u2211
  6026  0539  2D3B               	goto	u2210
  6027  053A                     u2211:	
  6028  053A  2D3E               	goto	l3597
  6029  053B                     u2210:	
  6030  053B                     l3595:	
  6031                           
  6032                           ;main.c: 357:     dc_frequency_flag = 1;
  6033  053B  01FA               	clrf	_dc_frequency_flag
  6034  053C  0AFA               	incf	_dc_frequency_flag,f
  6035                           
  6036                           ;main.c: 358:   } else {
  6037  053D  2D3F               	goto	l3599
  6038  053E                     l3597:	
  6039                           
  6040                           ;main.c: 359:     dc_frequency_flag = 0;
  6041  053E  01FA               	clrf	_dc_frequency_flag
  6042  053F                     l3599:	
  6043                           
  6044                           ;main.c: 361:   (INTCONbits.GIE = 1);
  6045  053F  178B               	bsf	11,7	;volatile
  6046  0540                     l616:	
  6047  0540  0008               	return
  6048  0541                     __end_of_setFrequency:	
  6049                           
  6050                           	psect	text8
  6051  0D6C                     __ptext8:	
  6052 ;; *************** function _TMR4_LoadPeriodRegister *****************
  6053 ;; Defined at:
  6054 ;;		line 115 in file "mcc_generated_files/tmr4.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  periodVal       1    wreg     unsigned char 
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;  periodVal       1    3[COMMON] unsigned char 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      void 
  6061 ;; Registers used:
  6062 ;;		wreg
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6068 ;;      Params:         0       0       0       0       0       0       0       0
  6069 ;;      Locals:         1       0       0       0       0       0       0       0
  6070 ;;      Temps:          0       0       0       0       0       0       0       0
  6071 ;;      Totals:         1       0       0       0       0       0       0       0
  6072 ;;Total ram usage:        1 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    4
  6075 ;; This function calls:
  6076 ;;		Nothing
  6077 ;; This function is called by:
  6078 ;;		_setFrequency
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           
  6083                           ;psect for function _TMR4_LoadPeriodRegister
  6084  0D6C                     _TMR4_LoadPeriodRegister:	
  6085                           
  6086                           ;incstack = 0
  6087                           ; Regs used in _TMR4_LoadPeriodRegister: [wreg]
  6088                           ;TMR4_LoadPeriodRegister@periodVal stored from wreg
  6089  0D6C  00F3               	movwf	TMR4_LoadPeriodRegister@periodVal
  6090  0D6D                     l3217:	
  6091                           
  6092                           ;mcc_generated_files/tmr4.c: 115: void TMR4_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr4.c: 116: {;mcc_generated_files/tmr4.c: 117:    PR4 = periodVal;
  6093  0D6D  0873               	movf	TMR4_LoadPeriodRegister@periodVal,w
  6094  0D6E  0028               	movlb	8	; select bank8
  6095  0D6F  0096               	movwf	22	;volatile
  6096  0D70                     l398:	
  6097  0D70  0008               	return
  6098  0D71                     __end_of_TMR4_LoadPeriodRegister:	
  6099                           
  6100                           	psect	text9
  6101  01D5                     __ptext9:	
  6102 ;; *************** function _setCurrent *****************
  6103 ;; Defined at:
  6104 ;;		line 316 in file "main.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  microamps       2   25[BANK0 ] int 
  6107 ;;  Vdd_mv          2   27[BANK0 ] int 
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;  DACValue        2   39[BANK0 ] int 
  6110 ;;  Vdac_mv         2   37[BANK0 ] int 
  6111 ;; Return value:  Size  Location     Type
  6112 ;;                  1    wreg      void 
  6113 ;; Registers used:
  6114 ;;		wreg, status,2, status,0, pclath, cstack
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6120 ;;      Params:         0       4       0       0       0       0       0       0
  6121 ;;      Locals:         0       4       0       0       0       0       0       0
  6122 ;;      Temps:          0       8       0       0       0       0       0       0
  6123 ;;      Totals:         0      16       0       0       0       0       0       0
  6124 ;;Total ram usage:       16 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    5
  6127 ;; This function calls:
  6128 ;;		___aldiv
  6129 ;;		___awdiv
  6130 ;;		___lmul
  6131 ;; This function is called by:
  6132 ;;		_process_remote_command
  6133 ;;		_main
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           
  6138                           ;psect for function _setCurrent
  6139  01D5                     _setCurrent:	
  6140  01D5                     l3569:	
  6141                           ;incstack = 0
  6142                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  6143                           
  6144                           
  6145                           ;main.c: 316: void setCurrent(int microamps, int Vdd_mv);main.c: 317: {;main.c: 318:   i
      +                          nt Vdac_mv = Vdd_mv - ((int32_t)(4700) * microamps + 500) / 1000;
  6146  01D5  3000               	movlw	0
  6147  01D6  0020               	movlb	0	; select bank0
  6148  01D7  00AB               	movwf	___aldiv@divisor+3
  6149  01D8  3000               	movlw	0
  6150  01D9  00AA               	movwf	___aldiv@divisor+2
  6151  01DA  3003               	movlw	3
  6152  01DB  00A9               	movwf	___aldiv@divisor+1
  6153  01DC  30E8               	movlw	232
  6154  01DD  00A8               	movwf	___aldiv@divisor
  6155  01DE  30F4               	movlw	244
  6156  01DF  00BD               	movwf	??_setCurrent
  6157  01E0  3001               	movlw	1
  6158  01E1  00BE               	movwf	??_setCurrent+1
  6159  01E2  3000               	movlw	0
  6160  01E3  00BF               	movwf	??_setCurrent+2
  6161  01E4  3000               	movlw	0
  6162  01E5  00C0               	movwf	??_setCurrent+3
  6163  01E6  0839               	movf	setCurrent@microamps,w
  6164  01E7  00A0               	movwf	___lmul@multiplier
  6165  01E8  083A               	movf	setCurrent@microamps+1,w
  6166  01E9  00A1               	movwf	___lmul@multiplier+1
  6167  01EA  0D89               	rlf	9,f
  6168  01EB  3B89               	subwfb	9,f
  6169  01EC  0989               	comf	9,f
  6170  01ED  00A2               	movwf	___lmul@multiplier+2
  6171  01EE  00A3               	movwf	___lmul@multiplier+3
  6172  01EF  3000               	movlw	0
  6173  01F0  00A7               	movwf	___lmul@multiplicand+3
  6174  01F1  3000               	movlw	0
  6175  01F2  00A6               	movwf	___lmul@multiplicand+2
  6176  01F3  3012               	movlw	18
  6177  01F4  00A5               	movwf	___lmul@multiplicand+1
  6178  01F5  305C               	movlw	92
  6179  01F6  00A4               	movwf	___lmul@multiplicand
  6180  01F7  3187  2718  3181   	fcall	___lmul
  6181  01FA  0020               	movlb	0	; select bank0
  6182  01FB  0820               	movf	?___lmul,w
  6183  01FC  07BD               	addwf	??_setCurrent,f
  6184  01FD  0821               	movf	?___lmul+1,w
  6185  01FE  3DBE               	addwfc	??_setCurrent+1,f
  6186  01FF  0822               	movf	?___lmul+2,w
  6187  0200  3DBF               	addwfc	??_setCurrent+2,f
  6188  0201  0823               	movf	?___lmul+3,w
  6189  0202  3DC0               	addwfc	??_setCurrent+3,f
  6190  0203  0840               	movf	??_setCurrent+3,w
  6191  0204  00AF               	movwf	___aldiv@dividend+3
  6192  0205  083F               	movf	??_setCurrent+2,w
  6193  0206  00AE               	movwf	___aldiv@dividend+2
  6194  0207  083E               	movf	??_setCurrent+1,w
  6195  0208  00AD               	movwf	___aldiv@dividend+1
  6196  0209  083D               	movf	??_setCurrent,w
  6197  020A  00AC               	movwf	___aldiv@dividend
  6198  020B  3182  227A  3181   	fcall	___aldiv
  6199  020E  0020               	movlb	0	; select bank0
  6200  020F  0828               	movf	?___aldiv,w
  6201  0210  023B               	subwf	setCurrent@Vdd_mv,w
  6202  0211  00C5               	movwf	setCurrent@Vdac_mv
  6203  0212  0829               	movf	?___aldiv+1,w
  6204  0213  3B3C               	subwfb	setCurrent@Vdd_mv+1,w
  6205  0214  00C6               	movwf	setCurrent@Vdac_mv+1
  6206                           
  6207                           ;main.c: 319:   int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  6208  0215  083B               	movf	setCurrent@Vdd_mv,w
  6209  0216  00A8               	movwf	___aldiv@divisor
  6210  0217  083C               	movf	setCurrent@Vdd_mv+1,w
  6211  0218  00A9               	movwf	___aldiv@divisor+1
  6212  0219  0D89               	rlf	9,f
  6213  021A  3B89               	subwfb	9,f
  6214  021B  0989               	comf	9,f
  6215  021C  00AA               	movwf	___aldiv@divisor+2
  6216  021D  00AB               	movwf	___aldiv@divisor+3
  6217  021E  3002               	movlw	2
  6218  021F  00F3               	movwf	___awdiv@divisor
  6219  0220  3000               	movlw	0
  6220  0221  00F4               	movwf	___awdiv@divisor+1
  6221  0222  083C               	movf	setCurrent@Vdd_mv+1,w
  6222  0223  00F6               	movwf	___awdiv@dividend+1
  6223  0224  083B               	movf	setCurrent@Vdd_mv,w
  6224  0225  00F5               	movwf	___awdiv@dividend
  6225  0226  3185  2541  3181   	fcall	___awdiv
  6226  0229  0873               	movf	?___awdiv,w
  6227  022A  0020               	movlb	0	; select bank0
  6228  022B  00BD               	movwf	??_setCurrent
  6229  022C  0874               	movf	?___awdiv+1,w
  6230  022D  00BE               	movwf	??_setCurrent+1
  6231  022E  3000               	movlw	0
  6232  022F  1BBE               	btfsc	??_setCurrent+1,7
  6233  0230  30FF               	movlw	255
  6234  0231  00BF               	movwf	??_setCurrent+2
  6235  0232  00C0               	movwf	??_setCurrent+3
  6236  0233  0845               	movf	setCurrent@Vdac_mv,w
  6237  0234  00C1               	movwf	??_setCurrent+4
  6238  0235  0846               	movf	setCurrent@Vdac_mv+1,w
  6239  0236  00C2               	movwf	??_setCurrent+5
  6240  0237  3000               	movlw	0
  6241  0238  1BC2               	btfsc	??_setCurrent+5,7
  6242  0239  30FF               	movlw	255
  6243  023A  00C3               	movwf	??_setCurrent+6
  6244  023B  00C4               	movwf	??_setCurrent+7
  6245  023C  3008               	movlw	8
  6246  023D                     u2165:	
  6247  023D  35C1               	lslf	??_setCurrent+4,f
  6248  023E  0DC2               	rlf	??_setCurrent+5,f
  6249  023F  0DC3               	rlf	??_setCurrent+6,f
  6250  0240  0DC4               	rlf	??_setCurrent+7,f
  6251  0241                     u2160:	
  6252  0241  0B89               	decfsz	9,f
  6253  0242  2A3D               	goto	u2165
  6254  0243  0841               	movf	??_setCurrent+4,w
  6255  0244  07BD               	addwf	??_setCurrent,f
  6256  0245  0842               	movf	??_setCurrent+5,w
  6257  0246  3DBE               	addwfc	??_setCurrent+1,f
  6258  0247  0843               	movf	??_setCurrent+6,w
  6259  0248  3DBF               	addwfc	??_setCurrent+2,f
  6260  0249  0844               	movf	??_setCurrent+7,w
  6261  024A  3DC0               	addwfc	??_setCurrent+3,f
  6262  024B  0840               	movf	??_setCurrent+3,w
  6263  024C  00AF               	movwf	___aldiv@dividend+3
  6264  024D  083F               	movf	??_setCurrent+2,w
  6265  024E  00AE               	movwf	___aldiv@dividend+2
  6266  024F  083E               	movf	??_setCurrent+1,w
  6267  0250  00AD               	movwf	___aldiv@dividend+1
  6268  0251  083D               	movf	??_setCurrent,w
  6269  0252  00AC               	movwf	___aldiv@dividend
  6270  0253  3182  227A  3181   	fcall	___aldiv
  6271  0256  0020               	movlb	0	; select bank0
  6272  0257  0829               	movf	?___aldiv+1,w
  6273  0258  00C8               	movwf	setCurrent@DACValue+1
  6274  0259  0828               	movf	?___aldiv,w
  6275  025A  00C7               	movwf	setCurrent@DACValue
  6276  025B                     l3571:	
  6277                           
  6278                           ;main.c: 320:   if(DACValue > 255){DACValue = 255;}
  6279  025B  0848               	movf	setCurrent@DACValue+1,w
  6280  025C  3A80               	xorlw	128
  6281  025D  00BD               	movwf	??_setCurrent
  6282  025E  3081               	movlw	129
  6283  025F  023D               	subwf	??_setCurrent,w
  6284  0260  1D03               	skipz
  6285  0261  2A64               	goto	u2175
  6286  0262  3000               	movlw	0
  6287  0263  0247               	subwf	setCurrent@DACValue,w
  6288  0264                     u2175:	
  6289  0264  1C03               	skipc
  6290  0265  2A67               	goto	u2171
  6291  0266  2A68               	goto	u2170
  6292  0267                     u2171:	
  6293  0267  2A6D               	goto	l3575
  6294  0268                     u2170:	
  6295  0268                     l3573:	
  6296  0268  30FF               	movlw	255
  6297  0269  0020               	movlb	0	; select bank0
  6298  026A  00C7               	movwf	setCurrent@DACValue
  6299  026B  3000               	movlw	0
  6300  026C  00C8               	movwf	setCurrent@DACValue+1
  6301  026D                     l3575:	
  6302                           
  6303                           ;main.c: 321:   if(DACValue < 0){DACValue = 0;}
  6304  026D  0020               	movlb	0	; select bank0
  6305  026E  1FC8               	btfss	setCurrent@DACValue+1,7
  6306  026F  2A71               	goto	u2181
  6307  0270  2A72               	goto	u2180
  6308  0271                     u2181:	
  6309  0271  2A74               	goto	l3579
  6310  0272                     u2180:	
  6311  0272                     l3577:	
  6312  0272  01C7               	clrf	setCurrent@DACValue
  6313  0273  01C8               	clrf	setCurrent@DACValue+1
  6314  0274                     l3579:	
  6315                           
  6316                           ;main.c: 322:   dac_value = (uint8_t)DACValue;
  6317  0274  0847               	movf	setCurrent@DACValue,w
  6318  0275  00BD               	movwf	??_setCurrent
  6319  0276  083D               	movf	??_setCurrent,w
  6320  0277  0021               	movlb	1	; select bank1
  6321  0278  00D6               	movwf	_dac_value^(0+128)
  6322  0279                     l609:	
  6323  0279  0008               	return
  6324  027A                     __end_of_setCurrent:	
  6325                           
  6326                           	psect	text10
  6327  0718                     __ptext10:	
  6328 ;; *************** function ___lmul *****************
  6329 ;; Defined at:
  6330 ;;		line 15 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/Umul32.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;  multiplier      4    0[BANK0 ] unsigned long 
  6333 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  product         4    3[COMMON] unsigned long 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  4    0[BANK0 ] unsigned long 
  6338 ;; Registers used:
  6339 ;;		wreg, status,2, status,0
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6345 ;;      Params:         0       8       0       0       0       0       0       0
  6346 ;;      Locals:         4       0       0       0       0       0       0       0
  6347 ;;      Temps:          0       0       0       0       0       0       0       0
  6348 ;;      Totals:         4       8       0       0       0       0       0       0
  6349 ;;Total ram usage:       12 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    4
  6352 ;; This function calls:
  6353 ;;		Nothing
  6354 ;; This function is called by:
  6355 ;;		_setCurrent
  6356 ;;		_setFrequency
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           
  6361                           ;psect for function ___lmul
  6362  0718                     ___lmul:	
  6363  0718                     l3287:	
  6364                           ;incstack = 0
  6365                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6366                           
  6367  0718  3000               	movlw	0
  6368  0719  00F6               	movwf	___lmul@product+3
  6369  071A  3000               	movlw	0
  6370  071B  00F5               	movwf	___lmul@product+2
  6371  071C  3000               	movlw	0
  6372  071D  00F4               	movwf	___lmul@product+1
  6373  071E  3000               	movlw	0
  6374  071F  00F3               	movwf	___lmul@product
  6375  0720                     l3289:	
  6376  0720  0020               	movlb	0	; select bank0
  6377  0721  1C20               	btfss	___lmul@multiplier,0
  6378  0722  2F24               	goto	u1891
  6379  0723  2F25               	goto	u1890
  6380  0724                     u1891:	
  6381  0724  2F2D               	goto	l3293
  6382  0725                     u1890:	
  6383  0725                     l3291:	
  6384  0725  0824               	movf	___lmul@multiplicand,w
  6385  0726  07F3               	addwf	___lmul@product,f
  6386  0727  0825               	movf	___lmul@multiplicand+1,w
  6387  0728  3DF4               	addwfc	___lmul@product+1,f
  6388  0729  0826               	movf	___lmul@multiplicand+2,w
  6389  072A  3DF5               	addwfc	___lmul@product+2,f
  6390  072B  0827               	movf	___lmul@multiplicand+3,w
  6391  072C  3DF6               	addwfc	___lmul@product+3,f
  6392  072D                     l3293:	
  6393  072D  3001               	movlw	1
  6394  072E                     u1905:	
  6395  072E  35A4               	lslf	___lmul@multiplicand,f
  6396  072F  0DA5               	rlf	___lmul@multiplicand+1,f
  6397  0730  0DA6               	rlf	___lmul@multiplicand+2,f
  6398  0731  0DA7               	rlf	___lmul@multiplicand+3,f
  6399  0732  0B89               	decfsz	9,f
  6400  0733  2F2E               	goto	u1905
  6401  0734                     l3295:	
  6402  0734  3001               	movlw	1
  6403  0735                     u1915:	
  6404  0735  36A3               	lsrf	___lmul@multiplier+3,f
  6405  0736  0CA2               	rrf	___lmul@multiplier+2,f
  6406  0737  0CA1               	rrf	___lmul@multiplier+1,f
  6407  0738  0CA0               	rrf	___lmul@multiplier,f
  6408  0739  0B89               	decfsz	9,f
  6409  073A  2F35               	goto	u1915
  6410  073B  0823               	movf	___lmul@multiplier+3,w
  6411  073C  0422               	iorwf	___lmul@multiplier+2,w
  6412  073D  0421               	iorwf	___lmul@multiplier+1,w
  6413  073E  0420               	iorwf	___lmul@multiplier,w
  6414  073F  1D03               	skipz
  6415  0740  2F42               	goto	u1921
  6416  0741  2F43               	goto	u1920
  6417  0742                     u1921:	
  6418  0742  2F20               	goto	l3289
  6419  0743                     u1920:	
  6420  0743                     l3297:	
  6421  0743  0876               	movf	___lmul@product+3,w
  6422  0744  00A3               	movwf	?___lmul+3
  6423  0745  0875               	movf	___lmul@product+2,w
  6424  0746  00A2               	movwf	?___lmul+2
  6425  0747  0874               	movf	___lmul@product+1,w
  6426  0748  00A1               	movwf	?___lmul+1
  6427  0749  0873               	movf	___lmul@product,w
  6428  074A  00A0               	movwf	?___lmul
  6429  074B                     l782:	
  6430  074B  0008               	return
  6431  074C                     __end_of___lmul:	
  6432                           
  6433                           	psect	text11
  6434  0541                     __ptext11:	
  6435 ;; *************** function ___awdiv *****************
  6436 ;; Defined at:
  6437 ;;		line 5 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;  divisor         2    3[COMMON] int 
  6440 ;;  dividend        2    5[COMMON] int 
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;  quotient        2    2[BANK0 ] int 
  6443 ;;  sign            1    1[BANK0 ] unsigned char 
  6444 ;;  counter         1    0[BANK0 ] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  2    3[COMMON] int 
  6447 ;; Registers used:
  6448 ;;		wreg, status,2, status,0
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6454 ;;      Params:         4       0       0       0       0       0       0       0
  6455 ;;      Locals:         0       4       0       0       0       0       0       0
  6456 ;;      Temps:          1       0       0       0       0       0       0       0
  6457 ;;      Totals:         5       4       0       0       0       0       0       0
  6458 ;;Total ram usage:        9 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    4
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_setCurrent
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           
  6469                           ;psect for function ___awdiv
  6470  0541                     ___awdiv:	
  6471  0541                     l3341:	
  6472                           ;incstack = 0
  6473                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6474                           
  6475  0541  0020               	movlb	0	; select bank0
  6476  0542  01A1               	clrf	___awdiv@sign
  6477  0543                     l3343:	
  6478  0543  1FF4               	btfss	___awdiv@divisor+1,7
  6479  0544  2D46               	goto	u2031
  6480  0545  2D47               	goto	u2030
  6481  0546                     u2031:	
  6482  0546  2D4E               	goto	l3349
  6483  0547                     u2030:	
  6484  0547                     l3345:	
  6485  0547  09F3               	comf	___awdiv@divisor,f
  6486  0548  09F4               	comf	___awdiv@divisor+1,f
  6487  0549  0AF3               	incf	___awdiv@divisor,f
  6488  054A  1903               	skipnz
  6489  054B  0AF4               	incf	___awdiv@divisor+1,f
  6490  054C                     l3347:	
  6491  054C  01A1               	clrf	___awdiv@sign
  6492  054D  0AA1               	incf	___awdiv@sign,f
  6493  054E                     l3349:	
  6494  054E  1FF6               	btfss	___awdiv@dividend+1,7
  6495  054F  2D51               	goto	u2041
  6496  0550  2D52               	goto	u2040
  6497  0551                     u2041:	
  6498  0551  2D5B               	goto	l3355
  6499  0552                     u2040:	
  6500  0552                     l3351:	
  6501  0552  09F5               	comf	___awdiv@dividend,f
  6502  0553  09F6               	comf	___awdiv@dividend+1,f
  6503  0554  0AF5               	incf	___awdiv@dividend,f
  6504  0555  1903               	skipnz
  6505  0556  0AF6               	incf	___awdiv@dividend+1,f
  6506  0557                     l3353:	
  6507  0557  3001               	movlw	1
  6508  0558  00F7               	movwf	??___awdiv
  6509  0559  0877               	movf	??___awdiv,w
  6510  055A  06A1               	xorwf	___awdiv@sign,f
  6511  055B                     l3355:	
  6512  055B  01A2               	clrf	___awdiv@quotient
  6513  055C  01A3               	clrf	___awdiv@quotient+1
  6514  055D                     l3357:	
  6515  055D  0873               	movf	___awdiv@divisor,w
  6516  055E  0474               	iorwf	___awdiv@divisor+1,w
  6517  055F  1903               	btfsc	3,2
  6518  0560  2D62               	goto	u2051
  6519  0561  2D63               	goto	u2050
  6520  0562                     u2051:	
  6521  0562  2D92               	goto	l3377
  6522  0563                     u2050:	
  6523  0563                     l3359:	
  6524  0563  01A0               	clrf	___awdiv@counter
  6525  0564  0AA0               	incf	___awdiv@counter,f
  6526  0565  2D6F               	goto	l3365
  6527  0566                     l3361:	
  6528  0566  3001               	movlw	1
  6529  0567                     u2065:	
  6530  0567  35F3               	lslf	___awdiv@divisor,f
  6531  0568  0DF4               	rlf	___awdiv@divisor+1,f
  6532  0569  0B89               	decfsz	9,f
  6533  056A  2D67               	goto	u2065
  6534  056B                     l3363:	
  6535  056B  3001               	movlw	1
  6536  056C  00F7               	movwf	??___awdiv
  6537  056D  0877               	movf	??___awdiv,w
  6538  056E  07A0               	addwf	___awdiv@counter,f
  6539  056F                     l3365:	
  6540  056F  1FF4               	btfss	___awdiv@divisor+1,7
  6541  0570  2D72               	goto	u2071
  6542  0571  2D73               	goto	u2070
  6543  0572                     u2071:	
  6544  0572  2D66               	goto	l3361
  6545  0573                     u2070:	
  6546  0573                     l3367:	
  6547  0573  3001               	movlw	1
  6548  0574                     u2085:	
  6549  0574  35A2               	lslf	___awdiv@quotient,f
  6550  0575  0DA3               	rlf	___awdiv@quotient+1,f
  6551  0576  0B89               	decfsz	9,f
  6552  0577  2D74               	goto	u2085
  6553  0578  0874               	movf	___awdiv@divisor+1,w
  6554  0579  0276               	subwf	___awdiv@dividend+1,w
  6555  057A  1D03               	skipz
  6556  057B  2D7E               	goto	u2095
  6557  057C  0873               	movf	___awdiv@divisor,w
  6558  057D  0275               	subwf	___awdiv@dividend,w
  6559  057E                     u2095:	
  6560  057E  1C03               	skipc
  6561  057F  2D81               	goto	u2091
  6562  0580  2D82               	goto	u2090
  6563  0581                     u2091:	
  6564  0581  2D87               	goto	l3373
  6565  0582                     u2090:	
  6566  0582                     l3369:	
  6567  0582  0873               	movf	___awdiv@divisor,w
  6568  0583  02F5               	subwf	___awdiv@dividend,f
  6569  0584  0874               	movf	___awdiv@divisor+1,w
  6570  0585  3BF6               	subwfb	___awdiv@dividend+1,f
  6571  0586                     l3371:	
  6572  0586  1422               	bsf	___awdiv@quotient,0
  6573  0587                     l3373:	
  6574  0587  3001               	movlw	1
  6575  0588                     u2105:	
  6576  0588  36F4               	lsrf	___awdiv@divisor+1,f
  6577  0589  0CF3               	rrf	___awdiv@divisor,f
  6578  058A  0B89               	decfsz	9,f
  6579  058B  2D88               	goto	u2105
  6580  058C                     l3375:	
  6581  058C  3001               	movlw	1
  6582  058D  02A0               	subwf	___awdiv@counter,f
  6583  058E  1D03               	btfss	3,2
  6584  058F  2D91               	goto	u2111
  6585  0590  2D92               	goto	u2110
  6586  0591                     u2111:	
  6587  0591  2D73               	goto	l3367
  6588  0592                     u2110:	
  6589  0592                     l3377:	
  6590  0592  0821               	movf	___awdiv@sign,w
  6591  0593  1903               	btfsc	3,2
  6592  0594  2D96               	goto	u2121
  6593  0595  2D97               	goto	u2120
  6594  0596                     u2121:	
  6595  0596  2D9C               	goto	l3381
  6596  0597                     u2120:	
  6597  0597                     l3379:	
  6598  0597  09A2               	comf	___awdiv@quotient,f
  6599  0598  09A3               	comf	___awdiv@quotient+1,f
  6600  0599  0AA2               	incf	___awdiv@quotient,f
  6601  059A  1903               	skipnz
  6602  059B  0AA3               	incf	___awdiv@quotient+1,f
  6603  059C                     l3381:	
  6604  059C  0823               	movf	___awdiv@quotient+1,w
  6605  059D  00F4               	movwf	?___awdiv+1
  6606  059E  0822               	movf	___awdiv@quotient,w
  6607  059F  00F3               	movwf	?___awdiv
  6608  05A0                     l921:	
  6609  05A0  0008               	return
  6610  05A1                     __end_of___awdiv:	
  6611                           
  6612                           	psect	text12
  6613  05FD                     __ptext12:	
  6614 ;; *************** function _selectSomething *****************
  6615 ;; Defined at:
  6616 ;;		line 262 in file "main.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0, pclath, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6630 ;;      Params:         0       0       0       0       0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0
  6632 ;;      Temps:          0       2       0       0       0       0       0       0
  6633 ;;      Totals:         0       2       0       0       0       0       0       0
  6634 ;;Total ram usage:        2 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    5
  6637 ;; This function calls:
  6638 ;;		_setLEDColor
  6639 ;; This function is called by:
  6640 ;;		_process_remote_command
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _selectSomething
  6646  05FD                     _selectSomething:	
  6647  05FD                     l3515:	
  6648                           ;incstack = 0
  6649                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  6650                           
  6651                           
  6652                           ;main.c: 264:   setLEDColor(0, 180, 230);
  6653  05FD  30B4               	movlw	180
  6654  05FE  0020               	movlb	0	; select bank0
  6655  05FF  00A0               	movwf	??_selectSomething
  6656  0600  0820               	movf	??_selectSomething,w
  6657  0601  00F3               	movwf	setLEDColor@green
  6658  0602  30E6               	movlw	230
  6659  0603  00A1               	movwf	??_selectSomething+1
  6660  0604  0821               	movf	??_selectSomething+1,w
  6661  0605  00F4               	movwf	setLEDColor@blue
  6662  0606  3000               	movlw	0
  6663  0607  318E  2637  3185   	fcall	_setLEDColor
  6664  060A                     l3517:	
  6665                           
  6666                           ;main.c: 265:   _delay((unsigned long)((500)*(4000000/4000.0)));
  6667  060A  3003               	movlw	3
  6668  060B  0020               	movlb	0	; select bank0
  6669  060C  00A1               	movwf	??_selectSomething+1
  6670  060D  308A               	movlw	138
  6671  060E  00A0               	movwf	??_selectSomething
  6672  060F  3055               	movlw	85
  6673  0610                     u2417:	
  6674  0610  0B89               	decfsz	9,f
  6675  0611  2E10               	goto	u2417
  6676  0612  0BA0               	decfsz	??_selectSomething,f
  6677  0613  2E10               	goto	u2417
  6678  0614  0BA1               	decfsz	??_selectSomething+1,f
  6679  0615  2E10               	goto	u2417
  6680  0616  3200               	nop2
  6681  0617                     l3519:	
  6682                           
  6683                           ;main.c: 266:   setLEDColor(0, 0, 0);
  6684  0617  01F3               	clrf	setLEDColor@green
  6685  0618  01F4               	clrf	setLEDColor@blue
  6686  0619  3000               	movlw	0
  6687  061A  318E  2637  3185   	fcall	_setLEDColor
  6688                           
  6689                           ;main.c: 267:   _delay((unsigned long)((500)*(4000000/4000.0)));
  6690  061D  3003               	movlw	3
  6691  061E  0020               	movlb	0	; select bank0
  6692  061F  00A1               	movwf	??_selectSomething+1
  6693  0620  308A               	movlw	138
  6694  0621  00A0               	movwf	??_selectSomething
  6695  0622  3055               	movlw	85
  6696  0623                     u2427:	
  6697  0623  0B89               	decfsz	9,f
  6698  0624  2E23               	goto	u2427
  6699  0625  0BA0               	decfsz	??_selectSomething,f
  6700  0626  2E23               	goto	u2427
  6701  0627  0BA1               	decfsz	??_selectSomething+1,f
  6702  0628  2E23               	goto	u2427
  6703  0629  3200               	nop2
  6704  062A                     l3521:	
  6705                           
  6706                           ;main.c: 268:   setLEDColor(0, 180, 230);
  6707  062A  30B4               	movlw	180
  6708  062B  0020               	movlb	0	; select bank0
  6709  062C  00A0               	movwf	??_selectSomething
  6710  062D  0820               	movf	??_selectSomething,w
  6711  062E  00F3               	movwf	setLEDColor@green
  6712  062F  30E6               	movlw	230
  6713  0630  00A1               	movwf	??_selectSomething+1
  6714  0631  0821               	movf	??_selectSomething+1,w
  6715  0632  00F4               	movwf	setLEDColor@blue
  6716  0633  3000               	movlw	0
  6717  0634  318E  2637  3185   	fcall	_setLEDColor
  6718  0637                     l3523:	
  6719                           
  6720                           ;main.c: 269:   _delay((unsigned long)((500)*(4000000/4000.0)));
  6721  0637  3003               	movlw	3
  6722  0638  0020               	movlb	0	; select bank0
  6723  0639  00A1               	movwf	??_selectSomething+1
  6724  063A  308A               	movlw	138
  6725  063B  00A0               	movwf	??_selectSomething
  6726  063C  3055               	movlw	85
  6727  063D                     u2437:	
  6728  063D  0B89               	decfsz	9,f
  6729  063E  2E3D               	goto	u2437
  6730  063F  0BA0               	decfsz	??_selectSomething,f
  6731  0640  2E3D               	goto	u2437
  6732  0641  0BA1               	decfsz	??_selectSomething+1,f
  6733  0642  2E3D               	goto	u2437
  6734  0643  3200               	nop2
  6735                           
  6736                           ;main.c: 270:   setLEDColor(0, 0, 0);
  6737  0644  01F3               	clrf	setLEDColor@green
  6738  0645  01F4               	clrf	setLEDColor@blue
  6739  0646  3000               	movlw	0
  6740  0647  318E  2637  3185   	fcall	_setLEDColor
  6741  064A                     l3525:	
  6742                           
  6743                           ;main.c: 271:   _delay((unsigned long)((500)*(4000000/4000.0)));
  6744  064A  3003               	movlw	3
  6745  064B  0020               	movlb	0	; select bank0
  6746  064C  00A1               	movwf	??_selectSomething+1
  6747  064D  308A               	movlw	138
  6748  064E  00A0               	movwf	??_selectSomething
  6749  064F  3055               	movlw	85
  6750  0650                     u2447:	
  6751  0650  0B89               	decfsz	9,f
  6752  0651  2E50               	goto	u2447
  6753  0652  0BA0               	decfsz	??_selectSomething,f
  6754  0653  2E50               	goto	u2447
  6755  0654  0BA1               	decfsz	??_selectSomething+1,f
  6756  0655  2E50               	goto	u2447
  6757  0656  3200               	nop2
  6758  0657                     l587:	
  6759  0657  0008               	return
  6760  0658                     __end_of_selectSomething:	
  6761                           
  6762                           	psect	text13
  6763  0F15                     __ptext13:	
  6764 ;; *************** function _selectResetValue *****************
  6765 ;; Defined at:
  6766 ;;		line 304 in file "main.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;		None
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;		None
  6771 ;; Return value:  Size  Location     Type
  6772 ;;                  1    wreg      void 
  6773 ;; Registers used:
  6774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6780 ;;      Params:         0       0       0       0       0       0       0       0
  6781 ;;      Locals:         0       0       0       0       0       0       0       0
  6782 ;;      Temps:          0       2       0       0       0       0       0       0
  6783 ;;      Totals:         0       2       0       0       0       0       0       0
  6784 ;;Total ram usage:        2 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:   10
  6787 ;; This function calls:
  6788 ;;		_printf
  6789 ;;		_setLEDColor
  6790 ;; This function is called by:
  6791 ;;		_process_remote_command
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           
  6796                           ;psect for function _selectResetValue
  6797  0F15                     _selectResetValue:	
  6798  0F15                     l3561:	
  6799                           ;incstack = 0
  6800                           ; Regs used in _selectResetValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6801                           
  6802                           
  6803                           ;main.c: 305:   setLEDColor(200, 105, 0);
  6804  0F15  3069               	movlw	105
  6805  0F16  0020               	movlb	0	; select bank0
  6806  0F17  00BB               	movwf	??_selectResetValue
  6807  0F18  083B               	movf	??_selectResetValue,w
  6808  0F19  00F3               	movwf	setLEDColor@green
  6809  0F1A  01F4               	clrf	setLEDColor@blue
  6810  0F1B  30C8               	movlw	200
  6811  0F1C  318E  2637  318F   	fcall	_setLEDColor
  6812  0F1F                     l3563:	
  6813                           
  6814                           ;main.c: 306:   _delay((unsigned long)((500)*(4000000/4000.0)));
  6815  0F1F  3003               	movlw	3
  6816  0F20  0020               	movlb	0	; select bank0
  6817  0F21  00BC               	movwf	??_selectResetValue+1
  6818  0F22  308A               	movlw	138
  6819  0F23  00BB               	movwf	??_selectResetValue
  6820  0F24  3055               	movlw	85
  6821  0F25                     u2457:	
  6822  0F25  0B89               	decfsz	9,f
  6823  0F26  2F25               	goto	u2457
  6824  0F27  0BBB               	decfsz	??_selectResetValue,f
  6825  0F28  2F25               	goto	u2457
  6826  0F29  0BBC               	decfsz	??_selectResetValue+1,f
  6827  0F2A  2F25               	goto	u2457
  6828  0F2B  3200               	nop2
  6829  0F2C                     l3565:	
  6830                           
  6831                           ;main.c: 307:   setLEDColor(0, 0, 0);
  6832  0F2C  01F3               	clrf	setLEDColor@green
  6833  0F2D  01F4               	clrf	setLEDColor@blue
  6834  0F2E  3000               	movlw	0
  6835  0F2F  318E  2637  318F   	fcall	_setLEDColor
  6836  0F32                     l3567:	
  6837                           
  6838                           ;main.c: 308:   printf("\n reset value selected");
  6839  0F32  3000               	movlw	low (STR_5| (0+32768))
  6840  0F33  0020               	movlb	0	; select bank0
  6841  0F34  00B5               	movwf	printf@fmt
  6842  0F35  3088               	movlw	high (STR_5| (0+32768))
  6843  0F36  00B6               	movwf	printf@fmt+1
  6844  0F37  318E  2612  318F   	fcall	_printf
  6845  0F3A                     l602:	
  6846  0F3A  0008               	return
  6847  0F3B                     __end_of_selectResetValue:	
  6848                           
  6849                           	psect	text14
  6850  0EF0                     __ptext14:	
  6851 ;; *************** function _selectIncrease *****************
  6852 ;; Defined at:
  6853 ;;		line 290 in file "main.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;		None
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;		None
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  1    wreg      void 
  6860 ;; Registers used:
  6861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6867 ;;      Params:         0       0       0       0       0       0       0       0
  6868 ;;      Locals:         0       0       0       0       0       0       0       0
  6869 ;;      Temps:          0       2       0       0       0       0       0       0
  6870 ;;      Totals:         0       2       0       0       0       0       0       0
  6871 ;;Total ram usage:        2 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:   10
  6874 ;; This function calls:
  6875 ;;		_printf
  6876 ;;		_setLEDColor
  6877 ;; This function is called by:
  6878 ;;		_process_remote_command
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _selectIncrease
  6884  0EF0                     _selectIncrease:	
  6885  0EF0                     l3545:	
  6886                           ;incstack = 0
  6887                           ; Regs used in _selectIncrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6888                           
  6889                           
  6890                           ;main.c: 291:   setLEDColor(0, 50, 255);
  6891  0EF0  3032               	movlw	50
  6892  0EF1  0020               	movlb	0	; select bank0
  6893  0EF2  00BB               	movwf	??_selectIncrease
  6894  0EF3  083B               	movf	??_selectIncrease,w
  6895  0EF4  00F3               	movwf	setLEDColor@green
  6896  0EF5  30FF               	movlw	255
  6897  0EF6  00BC               	movwf	??_selectIncrease+1
  6898  0EF7  083C               	movf	??_selectIncrease+1,w
  6899  0EF8  00F4               	movwf	setLEDColor@blue
  6900  0EF9  3000               	movlw	0
  6901  0EFA  318E  2637  318E   	fcall	_setLEDColor
  6902  0EFD                     l3547:	
  6903                           
  6904                           ;main.c: 292:   _delay((unsigned long)((100)*(4000000/4000.0)));
  6905  0EFD  3082               	movlw	130
  6906  0EFE  0020               	movlb	0	; select bank0
  6907  0EFF  00BB               	movwf	??_selectIncrease
  6908  0F00  30DD               	movlw	221
  6909  0F01                     u2467:	
  6910  0F01  0B89               	decfsz	9,f
  6911  0F02  2F01               	goto	u2467
  6912  0F03  0BBB               	decfsz	??_selectIncrease,f
  6913  0F04  2F01               	goto	u2467
  6914  0F05  3200               	nop2
  6915  0F06                     l3549:	
  6916                           
  6917                           ;main.c: 293:   setLEDColor(0, 0, 0);
  6918  0F06  01F3               	clrf	setLEDColor@green
  6919  0F07  01F4               	clrf	setLEDColor@blue
  6920  0F08  3000               	movlw	0
  6921  0F09  318E  2637  318E   	fcall	_setLEDColor
  6922  0F0C                     l3551:	
  6923                           
  6924                           ;main.c: 294:   printf("\n increase selected");
  6925  0F0C  3040               	movlw	low (STR_3| (0+32768))
  6926  0F0D  0020               	movlb	0	; select bank0
  6927  0F0E  00B5               	movwf	printf@fmt
  6928  0F0F  3088               	movlw	high (STR_3| (0+32768))
  6929  0F10  00B6               	movwf	printf@fmt+1
  6930  0F11  318E  2612  318E   	fcall	_printf
  6931  0F14                     l596:	
  6932  0F14  0008               	return
  6933  0F15                     __end_of_selectIncrease:	
  6934                           
  6935                           	psect	text15
  6936  0F8A                     __ptext15:	
  6937 ;; *************** function _selectFrequency *****************
  6938 ;; Defined at:
  6939 ;;		line 274 in file "main.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;		None
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;		None
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  1    wreg      void 
  6946 ;; Registers used:
  6947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6953 ;;      Params:         0       0       0       0       0       0       0       0
  6954 ;;      Locals:         0       0       0       0       0       0       0       0
  6955 ;;      Temps:          0       2       0       0       0       0       0       0
  6956 ;;      Totals:         0       2       0       0       0       0       0       0
  6957 ;;Total ram usage:        2 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:   10
  6960 ;; This function calls:
  6961 ;;		_printf
  6962 ;;		_setLEDColor
  6963 ;; This function is called by:
  6964 ;;		_process_remote_command
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _selectFrequency
  6970  0F8A                     _selectFrequency:	
  6971  0F8A                     l3527:	
  6972                           ;incstack = 0
  6973                           ; Regs used in _selectFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6974                           
  6975                           
  6976                           ;main.c: 275:   interfaceState = STATE_FREQUENCY;
  6977  0F8A  3002               	movlw	2
  6978  0F8B  0020               	movlb	0	; select bank0
  6979  0F8C  00BB               	movwf	??_selectFrequency
  6980  0F8D  083B               	movf	??_selectFrequency,w
  6981  0F8E  00F8               	movwf	_interfaceState
  6982  0F8F                     l3529:	
  6983                           
  6984                           ;main.c: 276:   setLEDColor(0, 150, 0);
  6985  0F8F  3096               	movlw	150
  6986  0F90  00BB               	movwf	??_selectFrequency
  6987  0F91  083B               	movf	??_selectFrequency,w
  6988  0F92  00F3               	movwf	setLEDColor@green
  6989  0F93  01F4               	clrf	setLEDColor@blue
  6990  0F94  3000               	movlw	0
  6991  0F95  318E  2637  318F   	fcall	_setLEDColor
  6992  0F98                     l3531:	
  6993                           
  6994                           ;main.c: 277:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  6995  0F98  3006               	movlw	6
  6996  0F99  0020               	movlb	0	; select bank0
  6997  0F9A  00BC               	movwf	??_selectFrequency+1
  6998  0F9B  3013               	movlw	19
  6999  0F9C  00BB               	movwf	??_selectFrequency
  7000  0F9D  30AD               	movlw	173
  7001  0F9E                     u2477:	
  7002  0F9E  0B89               	decfsz	9,f
  7003  0F9F  2F9E               	goto	u2477
  7004  0FA0  0BBB               	decfsz	??_selectFrequency,f
  7005  0FA1  2F9E               	goto	u2477
  7006  0FA2  0BBC               	decfsz	??_selectFrequency+1,f
  7007  0FA3  2F9E               	goto	u2477
  7008  0FA4  3200               	nop2
  7009                           
  7010                           ;main.c: 278:   setLEDColor(0, 0, 0);
  7011  0FA5  01F3               	clrf	setLEDColor@green
  7012  0FA6  01F4               	clrf	setLEDColor@blue
  7013  0FA7  3000               	movlw	0
  7014  0FA8  318E  2637  318F   	fcall	_setLEDColor
  7015  0FAB                     l3533:	
  7016                           
  7017                           ;main.c: 279:   printf("\n Frequency selected");
  7018  0FAB  3017               	movlw	low (STR_1| (0+32768))
  7019  0FAC  0020               	movlb	0	; select bank0
  7020  0FAD  00B5               	movwf	printf@fmt
  7021  0FAE  3088               	movlw	high (STR_1| (0+32768))
  7022  0FAF  00B6               	movwf	printf@fmt+1
  7023  0FB0  318E  2612  318F   	fcall	_printf
  7024  0FB3                     l590:	
  7025  0FB3  0008               	return
  7026  0FB4                     __end_of_selectFrequency:	
  7027                           
  7028                           	psect	text16
  7029  0ECE                     __ptext16:	
  7030 ;; *************** function _selectDecrease *****************
  7031 ;; Defined at:
  7032 ;;		line 297 in file "main.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;		None
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;		None
  7037 ;; Return value:  Size  Location     Type
  7038 ;;                  1    wreg      void 
  7039 ;; Registers used:
  7040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7041 ;; Tracked objects:
  7042 ;;		On entry : 0/0
  7043 ;;		On exit  : 0/0
  7044 ;;		Unchanged: 0/0
  7045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7046 ;;      Params:         0       0       0       0       0       0       0       0
  7047 ;;      Locals:         0       0       0       0       0       0       0       0
  7048 ;;      Temps:          0       1       0       0       0       0       0       0
  7049 ;;      Totals:         0       1       0       0       0       0       0       0
  7050 ;;Total ram usage:        1 bytes
  7051 ;; Hardware stack levels used:    1
  7052 ;; Hardware stack levels required when called:   10
  7053 ;; This function calls:
  7054 ;;		_printf
  7055 ;;		_setLEDColor
  7056 ;; This function is called by:
  7057 ;;		_process_remote_command
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           
  7062                           ;psect for function _selectDecrease
  7063  0ECE                     _selectDecrease:	
  7064  0ECE                     l3553:	
  7065                           ;incstack = 0
  7066                           ; Regs used in _selectDecrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7067                           
  7068                           
  7069                           ;main.c: 298:   setLEDColor(130, 160, 0);
  7070  0ECE  30A0               	movlw	160
  7071  0ECF  0020               	movlb	0	; select bank0
  7072  0ED0  00BB               	movwf	??_selectDecrease
  7073  0ED1  083B               	movf	??_selectDecrease,w
  7074  0ED2  00F3               	movwf	setLEDColor@green
  7075  0ED3  01F4               	clrf	setLEDColor@blue
  7076  0ED4  3082               	movlw	130
  7077  0ED5  318E  2637  318E   	fcall	_setLEDColor
  7078  0ED8                     l3555:	
  7079                           
  7080                           ;main.c: 299:   _delay((unsigned long)((100)*(4000000/4000.0)));
  7081  0ED8  3082               	movlw	130
  7082  0ED9  0020               	movlb	0	; select bank0
  7083  0EDA  00BB               	movwf	??_selectDecrease
  7084  0EDB  30DD               	movlw	221
  7085  0EDC                     u2487:	
  7086  0EDC  0B89               	decfsz	9,f
  7087  0EDD  2EDC               	goto	u2487
  7088  0EDE  0BBB               	decfsz	??_selectDecrease,f
  7089  0EDF  2EDC               	goto	u2487
  7090  0EE0  3200               	nop2
  7091  0EE1                     l3557:	
  7092                           
  7093                           ;main.c: 300:   setLEDColor(0, 0, 0);
  7094  0EE1  01F3               	clrf	setLEDColor@green
  7095  0EE2  01F4               	clrf	setLEDColor@blue
  7096  0EE3  3000               	movlw	0
  7097  0EE4  318E  2637  318E   	fcall	_setLEDColor
  7098  0EE7                     l3559:	
  7099                           
  7100                           ;main.c: 301:   printf("\n decrease selected");
  7101  0EE7  302C               	movlw	low (STR_4| (0+32768))
  7102  0EE8  0020               	movlb	0	; select bank0
  7103  0EE9  00B5               	movwf	printf@fmt
  7104  0EEA  3088               	movlw	high (STR_4| (0+32768))
  7105  0EEB  00B6               	movwf	printf@fmt+1
  7106  0EEC  318E  2612  318E   	fcall	_printf
  7107  0EEF                     l599:	
  7108  0EEF  0008               	return
  7109  0EF0                     __end_of_selectDecrease:	
  7110                           
  7111                           	psect	text17
  7112  0F62                     __ptext17:	
  7113 ;; *************** function _selectCurrent *****************
  7114 ;; Defined at:
  7115 ;;		line 282 in file "main.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;		None
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;		None
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  1    wreg      void 
  7122 ;; Registers used:
  7123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7129 ;;      Params:         0       0       0       0       0       0       0       0
  7130 ;;      Locals:         0       0       0       0       0       0       0       0
  7131 ;;      Temps:          0       2       0       0       0       0       0       0
  7132 ;;      Totals:         0       2       0       0       0       0       0       0
  7133 ;;Total ram usage:        2 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:   10
  7136 ;; This function calls:
  7137 ;;		_printf
  7138 ;;		_setLEDColor
  7139 ;; This function is called by:
  7140 ;;		_process_remote_command
  7141 ;; This function uses a non-reentrant model
  7142 ;;
  7143                           
  7144                           
  7145                           ;psect for function _selectCurrent
  7146  0F62                     _selectCurrent:	
  7147  0F62                     l3535:	
  7148                           ;incstack = 0
  7149                           ; Regs used in _selectCurrent: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7150                           
  7151                           
  7152                           ;main.c: 283:   interfaceState = STATE_CURRENT;
  7153  0F62  01F8               	clrf	_interfaceState
  7154  0F63  0AF8               	incf	_interfaceState,f
  7155  0F64                     l3537:	
  7156                           
  7157                           ;main.c: 284:   setLEDColor(0, 0, 255);
  7158  0F64  01F3               	clrf	setLEDColor@green
  7159  0F65  30FF               	movlw	255
  7160  0F66  0020               	movlb	0	; select bank0
  7161  0F67  00BB               	movwf	??_selectCurrent
  7162  0F68  083B               	movf	??_selectCurrent,w
  7163  0F69  00F4               	movwf	setLEDColor@blue
  7164  0F6A  3000               	movlw	0
  7165  0F6B  318E  2637  318F   	fcall	_setLEDColor
  7166  0F6E                     l3539:	
  7167                           
  7168                           ;main.c: 285:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  7169  0F6E  3006               	movlw	6
  7170  0F6F  0020               	movlb	0	; select bank0
  7171  0F70  00BC               	movwf	??_selectCurrent+1
  7172  0F71  3013               	movlw	19
  7173  0F72  00BB               	movwf	??_selectCurrent
  7174  0F73  30AD               	movlw	173
  7175  0F74                     u2497:	
  7176  0F74  0B89               	decfsz	9,f
  7177  0F75  2F74               	goto	u2497
  7178  0F76  0BBB               	decfsz	??_selectCurrent,f
  7179  0F77  2F74               	goto	u2497
  7180  0F78  0BBC               	decfsz	??_selectCurrent+1,f
  7181  0F79  2F74               	goto	u2497
  7182  0F7A  3200               	nop2
  7183  0F7B                     l3541:	
  7184                           
  7185                           ;main.c: 286:   setLEDColor(0, 0, 0);
  7186  0F7B  01F3               	clrf	setLEDColor@green
  7187  0F7C  01F4               	clrf	setLEDColor@blue
  7188  0F7D  3000               	movlw	0
  7189  0F7E  318E  2637  318F   	fcall	_setLEDColor
  7190  0F81                     l3543:	
  7191                           
  7192                           ;main.c: 287:   printf("\n current selected");
  7193  0F81  3054               	movlw	low (STR_2| (0+32768))
  7194  0F82  0020               	movlb	0	; select bank0
  7195  0F83  00B5               	movwf	printf@fmt
  7196  0F84  3088               	movlw	high (STR_2| (0+32768))
  7197  0F85  00B6               	movwf	printf@fmt+1
  7198  0F86  318E  2612  318F   	fcall	_printf
  7199  0F89                     l593:	
  7200  0F89  0008               	return
  7201  0F8A                     __end_of_selectCurrent:	
  7202                           
  7203                           	psect	text18
  7204  0E12                     __ptext18:	
  7205 ;; *************** function _printf *****************
  7206 ;; Defined at:
  7207 ;;		line 5 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/printf.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;  fmt             2   21[BANK0 ] PTR const unsigned char 
  7210 ;;		 -> STR_5(23), STR_4(20), STR_3(20), STR_2(19), 
  7211 ;;		 -> STR_1(21), 
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;  ret             2    0        int 
  7214 ;;  ap              1   26[BANK0 ] PTR void [1]
  7215 ;;		 -> ?_printf(2), 
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  2   21[BANK0 ] int 
  7218 ;; Registers used:
  7219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7225 ;;      Params:         0       2       0       0       0       0       0       0
  7226 ;;      Locals:         0       3       0       0       0       0       0       0
  7227 ;;      Temps:          0       1       0       0       0       0       0       0
  7228 ;;      Totals:         0       6       0       0       0       0       0       0
  7229 ;;Total ram usage:        6 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    9
  7232 ;; This function calls:
  7233 ;;		_vfprintf
  7234 ;; This function is called by:
  7235 ;;		_selectFrequency
  7236 ;;		_selectCurrent
  7237 ;;		_selectIncrease
  7238 ;;		_selectDecrease
  7239 ;;		_selectResetValue
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           
  7244                           ;psect for function _printf
  7245  0E12                     _printf:	
  7246  0E12                     l3281:	
  7247                           ;incstack = 0
  7248                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7249                           
  7250  0E12  3037               	movlw	(low ((?_printf| 0+2)))& (0+255)
  7251  0E13  0020               	movlb	0	; select bank0
  7252  0E14  00B7               	movwf	??_printf
  7253  0E15  0837               	movf	??_printf,w
  7254  0E16  00BA               	movwf	printf@ap
  7255  0E17                     l3283:	
  7256  0E17  0836               	movf	printf@fmt+1,w
  7257  0E18  00AE               	movwf	vfprintf@fmt+1
  7258  0E19  0835               	movf	printf@fmt,w
  7259  0E1A  00AD               	movwf	vfprintf@fmt
  7260  0E1B  303A               	movlw	(low (printf@ap| 0))& (0+255)
  7261  0E1C  00B7               	movwf	??_printf
  7262  0E1D  0837               	movf	??_printf,w
  7263  0E1E  00AF               	movwf	vfprintf@ap
  7264  0E1F  3000               	movlw	0
  7265  0E20  3187  27B2  318E   	fcall	_vfprintf
  7266  0E23                     l1245:	
  7267  0E23  0008               	return
  7268  0E24                     __end_of_printf:	
  7269                           
  7270                           	psect	text19
  7271  07B2                     __ptext19:	
  7272 ;; *************** function _vfprintf *****************
  7273 ;; Defined at:
  7274 ;;		line 1368 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  fp              1    wreg     PTR struct _IO_FILE
  7277 ;;		 -> NULL(0), 
  7278 ;;  fmt             2   13[BANK0 ] PTR const unsigned char 
  7279 ;;		 -> STR_5(23), STR_4(20), STR_3(20), STR_2(19), 
  7280 ;;		 -> STR_1(21), 
  7281 ;;  ap              1   15[BANK0 ] PTR PTR void 
  7282 ;;		 -> printf@ap(1), 
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;  fp              1   18[BANK0 ] PTR struct _IO_FILE
  7285 ;;		 -> NULL(0), 
  7286 ;;  cfmt            2   19[BANK0 ] PTR unsigned char 
  7287 ;;		 -> STR_5(23), STR_4(20), STR_3(20), STR_2(19), 
  7288 ;;		 -> STR_1(21), 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  2   13[BANK0 ] int 
  7291 ;; Registers used:
  7292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7298 ;;      Params:         0       3       0       0       0       0       0       0
  7299 ;;      Locals:         0       3       0       0       0       0       0       0
  7300 ;;      Temps:          0       2       0       0       0       0       0       0
  7301 ;;      Totals:         0       8       0       0       0       0       0       0
  7302 ;;Total ram usage:        8 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    8
  7305 ;; This function calls:
  7306 ;;		_vfpfcnvrt
  7307 ;; This function is called by:
  7308 ;;		_printf
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function _vfprintf
  7314  07B2                     _vfprintf:	
  7315                           
  7316                           ;incstack = 0
  7317                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7318                           ;vfprintf@fp stored from wreg
  7319  07B2  0020               	movlb	0	; select bank0
  7320  07B3  00B2               	movwf	vfprintf@fp
  7321  07B4                     l3193:	
  7322                           
  7323                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.10/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
  7324  07B4  082E               	movf	vfprintf@fmt+1,w
  7325  07B5  00B4               	movwf	vfprintf@cfmt+1
  7326  07B6  082D               	movf	vfprintf@fmt,w
  7327  07B7  00B3               	movwf	vfprintf@cfmt
  7328  07B8                     l3195:	
  7329                           
  7330                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  7331  07B8  0021               	movlb	1	; select bank1
  7332  07B9  01C7               	clrf	_nout^(0+128)
  7333  07BA  01C8               	clrf	(_nout+1)^(0+128)
  7334                           
  7335                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  7336  07BB  2FD0               	goto	l3199
  7337  07BC                     l3197:	
  7338                           
  7339                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
  7340  07BC  3033               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  7341  07BD  00B0               	movwf	??_vfprintf
  7342  07BE  0830               	movf	??_vfprintf,w
  7343  07BF  00A5               	movwf	vfpfcnvrt@fmt
  7344  07C0  082F               	movf	vfprintf@ap,w
  7345  07C1  00B1               	movwf	??_vfprintf+1
  7346  07C2  0831               	movf	??_vfprintf+1,w
  7347  07C3  00A6               	movwf	vfpfcnvrt@ap
  7348  07C4  0832               	movf	vfprintf@fp,w
  7349  07C5  3183  230A  3187   	fcall	_vfpfcnvrt
  7350  07C8  0020               	movlb	0	; select bank0
  7351  07C9  0825               	movf	?_vfpfcnvrt,w
  7352  07CA  0021               	movlb	1	; select bank1
  7353  07CB  07C7               	addwf	_nout^(0+128),f
  7354  07CC  0020               	movlb	0	; select bank0
  7355  07CD  0826               	movf	?_vfpfcnvrt+1,w
  7356  07CE  0021               	movlb	1	; select bank1
  7357  07CF  3DC8               	addwfc	(_nout+1)^(0+128),f
  7358  07D0                     l3199:	
  7359                           
  7360                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  7361  07D0  0020               	movlb	0	; select bank0
  7362  07D1  0833               	movf	vfprintf@cfmt,w
  7363  07D2  0084               	movwf	4
  7364  07D3  0834               	movf	vfprintf@cfmt+1,w
  7365  07D4  0085               	movwf	5
  7366  07D5  0012               	moviw fsr0++
  7367  07D6  1D03               	btfss	3,2
  7368  07D7  2FD9               	goto	u1841
  7369  07D8  2FDA               	goto	u1840
  7370  07D9                     u1841:	
  7371  07D9  2FBC               	goto	l3197
  7372  07DA                     u1840:	
  7373  07DA                     l3201:	
  7374                           
  7375                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
  7376  07DA  0021               	movlb	1	; select bank1
  7377  07DB  0848               	movf	(_nout+1)^(0+128),w
  7378  07DC  0020               	movlb	0	; select bank0
  7379  07DD  00AE               	movwf	?_vfprintf+1
  7380  07DE  0021               	movlb	1	; select bank1
  7381  07DF  0847               	movf	_nout^(0+128),w
  7382  07E0  0020               	movlb	0	; select bank0
  7383  07E1  00AD               	movwf	?_vfprintf
  7384  07E2                     l764:	
  7385  07E2  0008               	return
  7386  07E3                     __end_of_vfprintf:	
  7387                           
  7388                           	psect	text20
  7389  030A                     __ptext20:	
  7390 ;; *************** function _vfpfcnvrt *****************
  7391 ;; Defined at:
  7392 ;;		line 670 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;  fp              1    wreg     PTR struct _IO_FILE
  7395 ;;		 -> NULL(0), 
  7396 ;;  fmt             1    5[BANK0 ] PTR PTR unsigned char 
  7397 ;;		 -> vfprintf@cfmt(2), 
  7398 ;;  ap              1    6[BANK0 ] PTR PTR void 
  7399 ;;		 -> printf@ap(1), 
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  7402 ;;		 -> NULL(0), 
  7403 ;;  llu             8    0        unsigned long long 
  7404 ;;  ll              8    0        long long 
  7405 ;;  f               4    0        long long 
  7406 ;;  ct              3    0        unsigned char [3]
  7407 ;;  vp              2    0        PTR void 
  7408 ;;  i               2    0        int 
  7409 ;;  done            2    0        int 
  7410 ;;  cp              2    0        PTR unsigned char 
  7411 ;;  c               1    0        unsigned char 
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  2    5[BANK0 ] int 
  7414 ;; Registers used:
  7415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7421 ;;      Params:         0       2       0       0       0       0       0       0
  7422 ;;      Locals:         0       1       0       0       0       0       0       0
  7423 ;;      Temps:          0       5       0       0       0       0       0       0
  7424 ;;      Totals:         0       8       0       0       0       0       0       0
  7425 ;;Total ram usage:        8 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    7
  7428 ;; This function calls:
  7429 ;;		_fputc
  7430 ;; This function is called by:
  7431 ;;		_vfprintf
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           
  7436                           ;psect for function _vfpfcnvrt
  7437  030A                     _vfpfcnvrt:	
  7438                           
  7439                           ;incstack = 0
  7440                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7441                           ;vfpfcnvrt@fp stored from wreg
  7442  030A  0020               	movlb	0	; select bank0
  7443  030B  00AC               	movwf	vfpfcnvrt@fp
  7444  030C                     l3137:	
  7445                           
  7446                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.10/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.10/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.10/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.10/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
  7447  030C  0825               	movf	vfpfcnvrt@fmt,w
  7448  030D  0086               	movwf	6
  7449  030E  0187               	clrf	7
  7450  030F  3F40               	moviw [0]fsr1
  7451  0310  00A7               	movwf	??_vfpfcnvrt
  7452  0311  3F41               	moviw [1]fsr1
  7453  0312  00A8               	movwf	??_vfpfcnvrt+1
  7454  0313  0827               	movf	??_vfpfcnvrt,w
  7455  0314  0084               	movwf	4
  7456  0315  0828               	movf	??_vfpfcnvrt+1,w
  7457  0316  0085               	movwf	5
  7458  0317  0012               	moviw fsr0++
  7459  0318  3A25               	xorlw	37
  7460  0319  1D03               	btfss	3,2
  7461  031A  2B1C               	goto	u1821
  7462  031B  2B1D               	goto	u1820
  7463  031C                     u1821:	
  7464  031C  2B64               	goto	l3161
  7465  031D                     u1820:	
  7466  031D                     l3139:	
  7467                           
  7468                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  7469  031D  0825               	movf	vfpfcnvrt@fmt,w
  7470  031E  0086               	movwf	6
  7471  031F  0187               	clrf	7
  7472  0320  3001               	movlw	1
  7473  0321  0781               	addwf	1,f
  7474  0322  3141               	addfsr 1,1
  7475  0323  1803               	skipnc
  7476  0324  0A81               	incf	1,f
  7477  0325                     l3141:	
  7478                           
  7479                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
  7480  0325  0021               	movlb	1	; select bank1
  7481  0326  01C9               	clrf	_width^(0+128)
  7482  0327  01CA               	clrf	(_width+1)^(0+128)
  7483  0328  01CD               	clrf	_flags^(0+128)
  7484  0329  01CE               	clrf	(_flags+1)^(0+128)
  7485  032A                     l3143:	
  7486                           
  7487                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
  7488  032A  30FF               	movlw	255
  7489  032B  00CB               	movwf	_prec^(0+128)
  7490  032C  30FF               	movlw	255
  7491  032D  00CC               	movwf	(_prec^(0+128)+1)
  7492  032E                     l3145:	
  7493                           
  7494                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  7495  032E  0020               	movlb	0	; select bank0
  7496  032F  0825               	movf	vfpfcnvrt@fmt,w
  7497  0330  0086               	movwf	6
  7498  0331  0187               	clrf	7
  7499  0332  3F40               	moviw [0]fsr1
  7500  0333  00A7               	movwf	??_vfpfcnvrt
  7501  0334  3F41               	moviw [1]fsr1
  7502  0335  00A8               	movwf	??_vfpfcnvrt+1
  7503  0336  0827               	movf	??_vfpfcnvrt,w
  7504  0337  0084               	movwf	4
  7505  0338  0828               	movf	??_vfpfcnvrt+1,w
  7506  0339  0085               	movwf	5
  7507  033A  0012               	moviw fsr0++
  7508  033B  3A25               	xorlw	37
  7509  033C  1D03               	btfss	3,2
  7510  033D  2B3F               	goto	u1831
  7511  033E  2B40               	goto	u1830
  7512  033F                     u1831:	
  7513  033F  2B59               	goto	l3155
  7514  0340                     u1830:	
  7515  0340                     l3147:	
  7516                           
  7517                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  7518  0340  0825               	movf	vfpfcnvrt@fmt,w
  7519  0341  0086               	movwf	6
  7520  0342  0187               	clrf	7
  7521  0343  3001               	movlw	1
  7522  0344  0781               	addwf	1,f
  7523  0345  3141               	addfsr 1,1
  7524  0346  1803               	skipnc
  7525  0347  0A81               	incf	1,f
  7526  0348                     l3149:	
  7527                           
  7528                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  7529  0348  3025               	movlw	37
  7530  0349  00F5               	movwf	fputc@c
  7531  034A  3000               	movlw	0
  7532  034B  00F6               	movwf	fputc@c+1
  7533  034C  082C               	movf	vfpfcnvrt@fp,w
  7534  034D  00A7               	movwf	??_vfpfcnvrt
  7535  034E  0827               	movf	??_vfpfcnvrt,w
  7536  034F  00F7               	movwf	fputc@fp
  7537  0350  3186  269C  3183   	fcall	_fputc
  7538  0353                     l3151:	
  7539                           
  7540                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  7541  0353  3001               	movlw	1
  7542  0354  0020               	movlb	0	; select bank0
  7543  0355  00A5               	movwf	?_vfpfcnvrt
  7544  0356  3000               	movlw	0
  7545  0357  00A6               	movwf	?_vfpfcnvrt+1
  7546  0358  2B87               	goto	l758
  7547  0359                     l3155:	
  7548                           
  7549                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  7550  0359  0825               	movf	vfpfcnvrt@fmt,w
  7551  035A  0086               	movwf	6
  7552  035B  0187               	clrf	7
  7553  035C  3001               	movlw	1
  7554  035D  0781               	addwf	1,f
  7555  035E  3141               	addfsr 1,1
  7556  035F  1803               	skipnc
  7557  0360  0A81               	incf	1,f
  7558  0361                     l3157:	
  7559                           
  7560                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  7561  0361  01A5               	clrf	?_vfpfcnvrt
  7562  0362  01A6               	clrf	?_vfpfcnvrt+1
  7563  0363  2B87               	goto	l758
  7564  0364                     l3161:	
  7565                           
  7566                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  7567  0364  0825               	movf	vfpfcnvrt@fmt,w
  7568  0365  0086               	movwf	6
  7569  0366  0187               	clrf	7
  7570  0367  3F40               	moviw [0]fsr1
  7571  0368  00A7               	movwf	??_vfpfcnvrt
  7572  0369  3F41               	moviw [1]fsr1
  7573  036A  00A8               	movwf	??_vfpfcnvrt+1
  7574  036B  0827               	movf	??_vfpfcnvrt,w
  7575  036C  0084               	movwf	4
  7576  036D  0828               	movf	??_vfpfcnvrt+1,w
  7577  036E  0085               	movwf	5
  7578  036F  0800               	movf	0,w	;code access
  7579  0370  00A9               	movwf	??_vfpfcnvrt+2
  7580  0371  01AA               	clrf	??_vfpfcnvrt+3
  7581  0372  0829               	movf	??_vfpfcnvrt+2,w
  7582  0373  00F5               	movwf	fputc@c
  7583  0374  082A               	movf	??_vfpfcnvrt+3,w
  7584  0375  00F6               	movwf	fputc@c+1
  7585  0376  082C               	movf	vfpfcnvrt@fp,w
  7586  0377  00AB               	movwf	??_vfpfcnvrt+4
  7587  0378  082B               	movf	??_vfpfcnvrt+4,w
  7588  0379  00F7               	movwf	fputc@fp
  7589  037A  3186  269C  3183   	fcall	_fputc
  7590  037D                     l3163:	
  7591                           
  7592                           ;/Applications/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  7593  037D  0020               	movlb	0	; select bank0
  7594  037E  0825               	movf	vfpfcnvrt@fmt,w
  7595  037F  0086               	movwf	6
  7596  0380  0187               	clrf	7
  7597  0381  3001               	movlw	1
  7598  0382  0781               	addwf	1,f
  7599  0383  3141               	addfsr 1,1
  7600  0384  1803               	skipnc
  7601  0385  0A81               	incf	1,f
  7602  0386  2B53               	goto	l3151
  7603  0387                     l758:	
  7604  0387  0008               	return
  7605  0388                     __end_of_vfpfcnvrt:	
  7606                           
  7607                           	psect	text21
  7608  069C                     __ptext21:	
  7609 ;; *************** function _fputc *****************
  7610 ;; Defined at:
  7611 ;;		line 8 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/nf_fputc.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;  c               2    5[COMMON] int 
  7614 ;;  fp              1    7[COMMON] PTR struct _IO_FILE
  7615 ;;		 -> NULL(0), 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;		None
  7618 ;; Return value:  Size  Location     Type
  7619 ;;                  2    5[COMMON] int 
  7620 ;; Registers used:
  7621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7627 ;;      Params:         3       0       0       0       0       0       0       0
  7628 ;;      Locals:         0       0       0       0       0       0       0       0
  7629 ;;      Temps:          0       5       0       0       0       0       0       0
  7630 ;;      Totals:         3       5       0       0       0       0       0       0
  7631 ;;Total ram usage:        8 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; Hardware stack levels required when called:    6
  7634 ;; This function calls:
  7635 ;;		_putch
  7636 ;; This function is called by:
  7637 ;;		_vfpfcnvrt
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           
  7642                           ;psect for function _fputc
  7643  069C                     _fputc:	
  7644  069C                     l3123:	
  7645                           ;incstack = 0
  7646                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7647                           
  7648  069C  0877               	movf	fputc@fp,w
  7649  069D  1903               	btfsc	3,2
  7650  069E  2EA0               	goto	u1781
  7651  069F  2EA1               	goto	u1780
  7652  06A0                     u1781:	
  7653  06A0  2EA6               	goto	l3127
  7654  06A1                     u1780:	
  7655  06A1                     l3125:	
  7656  06A1  0877               	movf	fputc@fp,w
  7657  06A2  1D03               	btfss	3,2
  7658  06A3  2EA5               	goto	u1791
  7659  06A4  2EA6               	goto	u1790
  7660  06A5                     u1791:	
  7661  06A5  2EAB               	goto	l3129
  7662  06A6                     u1790:	
  7663  06A6                     l3127:	
  7664  06A6  0875               	movf	fputc@c,w
  7665  06A7  318D  259B  3186   	fcall	_putch
  7666  06AA  2EDB               	goto	l1230
  7667  06AB                     l3129:	
  7668  06AB  0877               	movf	fputc@fp,w
  7669  06AC  3E03               	addlw	3
  7670  06AD  0086               	movwf	6
  7671  06AE  0187               	clrf	7
  7672  06AF  0016               	moviw fsr1++
  7673  06B0  0401               	iorwf	1,w
  7674  06B1  1903               	btfsc	3,2
  7675  06B2  2EB4               	goto	u1801
  7676  06B3  2EB5               	goto	u1800
  7677  06B4                     u1801:	
  7678  06B4  2ED3               	goto	l3133
  7679  06B5                     u1800:	
  7680  06B5                     l3131:	
  7681  06B5  0877               	movf	fputc@fp,w
  7682  06B6  3E03               	addlw	3
  7683  06B7  0086               	movwf	6
  7684  06B8  0187               	clrf	7
  7685  06B9  3F40               	moviw [0]fsr1
  7686  06BA  0020               	movlb	0	; select bank0
  7687  06BB  00A0               	movwf	??_fputc
  7688  06BC  3F41               	moviw [1]fsr1
  7689  06BD  00A1               	movwf	??_fputc+1
  7690  06BE  0A77               	incf	fputc@fp,w
  7691  06BF  0086               	movwf	6
  7692  06C0  0187               	clrf	7
  7693  06C1  3F40               	moviw [0]fsr1
  7694  06C2  00A2               	movwf	??_fputc+2
  7695  06C3  3F41               	moviw [1]fsr1
  7696  06C4  00A3               	movwf	??_fputc+3
  7697  06C5  0823               	movf	??_fputc+3,w
  7698  06C6  3A80               	xorlw	128
  7699  06C7  00A4               	movwf	??_fputc+4
  7700  06C8  0821               	movf	??_fputc+1,w
  7701  06C9  3A80               	xorlw	128
  7702  06CA  0224               	subwf	??_fputc+4,w
  7703  06CB  1D03               	skipz
  7704  06CC  2ECF               	goto	u1815
  7705  06CD  0820               	movf	??_fputc,w
  7706  06CE  0222               	subwf	??_fputc+2,w
  7707  06CF                     u1815:	
  7708  06CF  1803               	skipnc
  7709  06D0  2ED2               	goto	u1811
  7710  06D1  2ED3               	goto	u1810
  7711  06D2                     u1811:	
  7712  06D2  2EDB               	goto	l1230
  7713  06D3                     u1810:	
  7714  06D3                     l3133:	
  7715  06D3  0A77               	incf	fputc@fp,w
  7716  06D4  0086               	movwf	6
  7717  06D5  0187               	clrf	7
  7718  06D6  3001               	movlw	1
  7719  06D7  0781               	addwf	1,f
  7720  06D8  3141               	addfsr 1,1
  7721  06D9  1803               	skipnc
  7722  06DA  0A81               	incf	1,f
  7723  06DB                     l1230:	
  7724  06DB  0008               	return
  7725  06DC                     __end_of_fputc:	
  7726                           
  7727                           	psect	text22
  7728  0D9B                     __ptext22:	
  7729 ;; *************** function _putch *****************
  7730 ;; Defined at:
  7731 ;;		line 146 in file "mcc_generated_files/eusart.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;  txData          1    wreg     unsigned char 
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;  txData          1    4[COMMON] unsigned char 
  7736 ;; Return value:  Size  Location     Type
  7737 ;;                  1    wreg      void 
  7738 ;; Registers used:
  7739 ;;		wreg, status,2, status,0, pclath, cstack
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7745 ;;      Params:         0       0       0       0       0       0       0       0
  7746 ;;      Locals:         1       0       0       0       0       0       0       0
  7747 ;;      Temps:          0       0       0       0       0       0       0       0
  7748 ;;      Totals:         1       0       0       0       0       0       0       0
  7749 ;;Total ram usage:        1 bytes
  7750 ;; Hardware stack levels used:    1
  7751 ;; Hardware stack levels required when called:    5
  7752 ;; This function calls:
  7753 ;;		_EUSART_Write
  7754 ;; This function is called by:
  7755 ;;		_fputc
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           
  7760                           ;psect for function _putch
  7761  0D9B                     _putch:	
  7762                           
  7763                           ;incstack = 0
  7764                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  7765                           ;putch@txData stored from wreg
  7766  0D9B  00F4               	movwf	putch@txData
  7767  0D9C                     l3121:	
  7768                           
  7769                           ;mcc_generated_files/eusart.c: 146: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 147: {;mcc_generated_files/eusart.c: 148:     EUSART_Write(txData);
  7770  0D9C  0874               	movf	putch@txData,w
  7771  0D9D  318D  25BD  318D   	fcall	_EUSART_Write
  7772  0DA0                     l222:	
  7773  0DA0  0008               	return
  7774  0DA1                     __end_of_putch:	
  7775                           
  7776                           	psect	text23
  7777  0DBD                     __ptext23:	
  7778 ;; *************** function _EUSART_Write *****************
  7779 ;; Defined at:
  7780 ;;		line 132 in file "mcc_generated_files/eusart.c"
  7781 ;; Parameters:    Size  Location     Type
  7782 ;;  txData          1    wreg     unsigned char 
  7783 ;; Auto vars:     Size  Location     Type
  7784 ;;  txData          1    3[COMMON] unsigned char 
  7785 ;; Return value:  Size  Location     Type
  7786 ;;                  1    wreg      void 
  7787 ;; Registers used:
  7788 ;;		wreg
  7789 ;; Tracked objects:
  7790 ;;		On entry : 0/0
  7791 ;;		On exit  : 0/0
  7792 ;;		Unchanged: 0/0
  7793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7794 ;;      Params:         0       0       0       0       0       0       0       0
  7795 ;;      Locals:         1       0       0       0       0       0       0       0
  7796 ;;      Temps:          0       0       0       0       0       0       0       0
  7797 ;;      Totals:         1       0       0       0       0       0       0       0
  7798 ;;Total ram usage:        1 bytes
  7799 ;; Hardware stack levels used:    1
  7800 ;; Hardware stack levels required when called:    4
  7801 ;; This function calls:
  7802 ;;		Nothing
  7803 ;; This function is called by:
  7804 ;;		_putch
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           
  7809                           ;psect for function _EUSART_Write
  7810  0DBD                     _EUSART_Write:	
  7811                           
  7812                           ;incstack = 0
  7813                           ; Regs used in _EUSART_Write: [wreg]
  7814                           ;EUSART_Write@txData stored from wreg
  7815  0DBD  00F3               	movwf	EUSART_Write@txData
  7816  0DBE                     l3117:	
  7817  0DBE                     l213:	
  7818                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  7819                           
  7820                           
  7821                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  7822  0DBE  0020               	movlb	0	; select bank0
  7823  0DBF  1E11               	btfss	17,4	;volatile
  7824  0DC0  2DC2               	goto	u1771
  7825  0DC1  2DC3               	goto	u1770
  7826  0DC2                     u1771:	
  7827  0DC2  2DBE               	goto	l213
  7828  0DC3                     u1770:	
  7829  0DC3                     l3119:	
  7830                           
  7831                           ;mcc_generated_files/eusart.c: 138:     TX1REG = txData;
  7832  0DC3  0873               	movf	EUSART_Write@txData,w
  7833  0DC4  0023               	movlb	3	; select bank3
  7834  0DC5  009A               	movwf	26	;volatile
  7835  0DC6                     l216:	
  7836  0DC6  0008               	return
  7837  0DC7                     __end_of_EUSART_Write:	
  7838                           
  7839                           	psect	text24
  7840  074C                     __ptext24:	
  7841 ;; *************** function _battery_voltage *****************
  7842 ;; Defined at:
  7843 ;;		line 147 in file "main.c"
  7844 ;; Parameters:    Size  Location     Type
  7845 ;;		None
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;		None
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  2   23[BANK0 ] short 
  7850 ;; Registers used:
  7851 ;;		wreg, status,2, status,0, pclath, cstack
  7852 ;; Tracked objects:
  7853 ;;		On entry : 0/0
  7854 ;;		On exit  : 0/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7857 ;;      Params:         0       2       0       0       0       0       0       0
  7858 ;;      Locals:         0       0       0       0       0       0       0       0
  7859 ;;      Temps:          0       0       0       0       0       0       0       0
  7860 ;;      Totals:         0       2       0       0       0       0       0       0
  7861 ;;Total ram usage:        2 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; Hardware stack levels required when called:    5
  7864 ;; This function calls:
  7865 ;;		___aldiv
  7866 ;; This function is called by:
  7867 ;;		_process_remote_command
  7868 ;;		_main
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           
  7873                           ;psect for function _battery_voltage
  7874  074C                     _battery_voltage:	
  7875  074C                     l3509:	
  7876                           ;incstack = 0
  7877                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  7878                           
  7879                           
  7880                           ;main.c: 149:   FVRCON = 0b10000001;
  7881  074C  3081               	movlw	129
  7882  074D  0022               	movlb	2	; select bank2
  7883  074E  0097               	movwf	23	;volatile
  7884                           
  7885                           ;main.c: 150:   ADCON0 = 0b01111101;
  7886  074F  307D               	movlw	125
  7887  0750  0021               	movlb	1	; select bank1
  7888  0751  009D               	movwf	29	;volatile
  7889                           
  7890                           ;main.c: 151:   ADCON1 = 0b10010000;
  7891  0752  3090               	movlw	144
  7892  0753  009E               	movwf	30	;volatile
  7893  0754                     l562:	
  7894                           ;main.c: 152:   while(!FVRCONbits.FVRRDY){ }
  7895                           
  7896  0754  0022               	movlb	2	; select bank2
  7897  0755  1F17               	btfss	23,6	;volatile
  7898  0756  2F58               	goto	u2141
  7899  0757  2F59               	goto	u2140
  7900  0758                     u2141:	
  7901  0758  2F54               	goto	l562
  7902  0759                     u2140:	
  7903  0759                     l564:	
  7904                           
  7905                           ;main.c: 153:   __nop();
  7906  0759  0000               	nop
  7907                           
  7908                           ;main.c: 154:   __nop();
  7909  075A  0000               	nop
  7910                           
  7911                           ;main.c: 155:   __nop();
  7912  075B  0000               	nop
  7913                           
  7914                           ;main.c: 156:   __nop();
  7915  075C  0000               	nop
  7916                           
  7917                           ;main.c: 157:   __nop();
  7918  075D  0000               	nop
  7919                           
  7920                           ;main.c: 158:   ADCON0bits.GO_nDONE = 1;
  7921  075E  0021               	movlb	1	; select bank1
  7922  075F  149D               	bsf	29,1	;volatile
  7923  0760                     l565:	
  7924                           ;main.c: 159:   while(ADCON0bits.GO_nDONE){ }
  7925                           
  7926  0760  189D               	btfsc	29,1	;volatile
  7927  0761  2F63               	goto	u2151
  7928  0762  2F64               	goto	u2150
  7929  0763                     u2151:	
  7930  0763  2F60               	goto	l565
  7931  0764                     u2150:	
  7932  0764                     l567:	
  7933                           
  7934                           ;main.c: 160:   ADCON0bits.ADON = 0;
  7935  0764  101D               	bcf	29,0	;volatile
  7936  0765                     l3511:	
  7937                           
  7938                           ;main.c: 165:   return 1047552L / ADRES;
  7939  0765  081B               	movf	27,w	;volatile
  7940  0766  0020               	movlb	0	; select bank0
  7941  0767  00A8               	movwf	___aldiv@divisor
  7942  0768  0021               	movlb	1	; select bank1
  7943  0769  081C               	movf	28,w	;volatile
  7944  076A  0020               	movlb	0	; select bank0
  7945  076B  00A9               	movwf	___aldiv@divisor+1
  7946  076C  01AA               	clrf	___aldiv@divisor+2
  7947  076D  01AB               	clrf	___aldiv@divisor+3
  7948  076E  3000               	movlw	0
  7949  076F  00AF               	movwf	___aldiv@dividend+3
  7950  0770  300F               	movlw	15
  7951  0771  00AE               	movwf	___aldiv@dividend+2
  7952  0772  30FC               	movlw	252
  7953  0773  00AD               	movwf	___aldiv@dividend+1
  7954  0774  3000               	movlw	0
  7955  0775  00AC               	movwf	___aldiv@dividend
  7956  0776  3182  227A  3187   	fcall	___aldiv
  7957  0779  0020               	movlb	0	; select bank0
  7958  077A  0829               	movf	?___aldiv+1,w
  7959  077B  00B8               	movwf	?_battery_voltage+1
  7960  077C  0828               	movf	?___aldiv,w
  7961  077D  00B7               	movwf	?_battery_voltage
  7962  077E                     l568:	
  7963  077E  0008               	return
  7964  077F                     __end_of_battery_voltage:	
  7965                           
  7966                           	psect	text25
  7967  027A                     __ptext25:	
  7968 ;; *************** function ___aldiv *****************
  7969 ;; Defined at:
  7970 ;;		line 5 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/aldiv.c"
  7971 ;; Parameters:    Size  Location     Type
  7972 ;;  divisor         4    8[BANK0 ] long 
  7973 ;;  dividend        4   12[BANK0 ] long 
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;  quotient        4   19[BANK0 ] long 
  7976 ;;  sign            1   18[BANK0 ] unsigned char 
  7977 ;;  counter         1   17[BANK0 ] unsigned char 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  4    8[BANK0 ] long 
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7987 ;;      Params:         0       8       0       0       0       0       0       0
  7988 ;;      Locals:         0       6       0       0       0       0       0       0
  7989 ;;      Temps:          0       1       0       0       0       0       0       0
  7990 ;;      Totals:         0      15       0       0       0       0       0       0
  7991 ;;Total ram usage:       15 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    4
  7994 ;; This function calls:
  7995 ;;		Nothing
  7996 ;; This function is called by:
  7997 ;;		_battery_voltage
  7998 ;;		_setCurrent
  7999 ;;		_setFrequency
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           
  8004                           ;psect for function ___aldiv
  8005  027A                     ___aldiv:	
  8006  027A                     l3301:	
  8007                           ;incstack = 0
  8008                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  8009                           
  8010  027A  0020               	movlb	0	; select bank0
  8011  027B  01B2               	clrf	___aldiv@sign
  8012  027C                     l3303:	
  8013  027C  1FAB               	btfss	___aldiv@divisor+3,7
  8014  027D  2A7F               	goto	u1931
  8015  027E  2A80               	goto	u1930
  8016  027F                     u1931:	
  8017  027F  2A8D               	goto	l833
  8018  0280                     u1930:	
  8019  0280                     l3305:	
  8020  0280  09A8               	comf	___aldiv@divisor,f
  8021  0281  09A9               	comf	___aldiv@divisor+1,f
  8022  0282  09AA               	comf	___aldiv@divisor+2,f
  8023  0283  09AB               	comf	___aldiv@divisor+3,f
  8024  0284  0AA8               	incf	___aldiv@divisor,f
  8025  0285  1903               	skipnz
  8026  0286  0AA9               	incf	___aldiv@divisor+1,f
  8027  0287  1903               	skipnz
  8028  0288  0AAA               	incf	___aldiv@divisor+2,f
  8029  0289  1903               	skipnz
  8030  028A  0AAB               	incf	___aldiv@divisor+3,f
  8031  028B  01B2               	clrf	___aldiv@sign
  8032  028C  0AB2               	incf	___aldiv@sign,f
  8033  028D                     l833:	
  8034  028D  1FAF               	btfss	___aldiv@dividend+3,7
  8035  028E  2A90               	goto	u1941
  8036  028F  2A91               	goto	u1940
  8037  0290                     u1941:	
  8038  0290  2AA0               	goto	l3311
  8039  0291                     u1940:	
  8040  0291                     l3307:	
  8041  0291  09AC               	comf	___aldiv@dividend,f
  8042  0292  09AD               	comf	___aldiv@dividend+1,f
  8043  0293  09AE               	comf	___aldiv@dividend+2,f
  8044  0294  09AF               	comf	___aldiv@dividend+3,f
  8045  0295  0AAC               	incf	___aldiv@dividend,f
  8046  0296  1903               	skipnz
  8047  0297  0AAD               	incf	___aldiv@dividend+1,f
  8048  0298  1903               	skipnz
  8049  0299  0AAE               	incf	___aldiv@dividend+2,f
  8050  029A  1903               	skipnz
  8051  029B  0AAF               	incf	___aldiv@dividend+3,f
  8052  029C                     l3309:	
  8053  029C  3001               	movlw	1
  8054  029D  00B0               	movwf	??___aldiv
  8055  029E  0830               	movf	??___aldiv,w
  8056  029F  06B2               	xorwf	___aldiv@sign,f
  8057  02A0                     l3311:	
  8058  02A0  3000               	movlw	0
  8059  02A1  00B6               	movwf	___aldiv@quotient+3
  8060  02A2  3000               	movlw	0
  8061  02A3  00B5               	movwf	___aldiv@quotient+2
  8062  02A4  3000               	movlw	0
  8063  02A5  00B4               	movwf	___aldiv@quotient+1
  8064  02A6  3000               	movlw	0
  8065  02A7  00B3               	movwf	___aldiv@quotient
  8066  02A8                     l3313:	
  8067  02A8  082B               	movf	___aldiv@divisor+3,w
  8068  02A9  042A               	iorwf	___aldiv@divisor+2,w
  8069  02AA  0429               	iorwf	___aldiv@divisor+1,w
  8070  02AB  0428               	iorwf	___aldiv@divisor,w
  8071  02AC  1903               	skipnz
  8072  02AD  2AAF               	goto	u1951
  8073  02AE  2AB0               	goto	u1950
  8074  02AF                     u1951:	
  8075  02AF  2AF1               	goto	l3333
  8076  02B0                     u1950:	
  8077  02B0                     l3315:	
  8078  02B0  01B1               	clrf	___aldiv@counter
  8079  02B1  0AB1               	incf	___aldiv@counter,f
  8080  02B2  2ABE               	goto	l3319
  8081  02B3                     l3317:	
  8082  02B3  3001               	movlw	1
  8083  02B4                     u1965:	
  8084  02B4  35A8               	lslf	___aldiv@divisor,f
  8085  02B5  0DA9               	rlf	___aldiv@divisor+1,f
  8086  02B6  0DAA               	rlf	___aldiv@divisor+2,f
  8087  02B7  0DAB               	rlf	___aldiv@divisor+3,f
  8088  02B8  0B89               	decfsz	9,f
  8089  02B9  2AB4               	goto	u1965
  8090  02BA  3001               	movlw	1
  8091  02BB  00B0               	movwf	??___aldiv
  8092  02BC  0830               	movf	??___aldiv,w
  8093  02BD  07B1               	addwf	___aldiv@counter,f
  8094  02BE                     l3319:	
  8095  02BE  1FAB               	btfss	___aldiv@divisor+3,7
  8096  02BF  2AC1               	goto	u1971
  8097  02C0  2AC2               	goto	u1970
  8098  02C1                     u1971:	
  8099  02C1  2AB3               	goto	l3317
  8100  02C2                     u1970:	
  8101  02C2                     l3321:	
  8102  02C2  3001               	movlw	1
  8103  02C3                     u1985:	
  8104  02C3  35B3               	lslf	___aldiv@quotient,f
  8105  02C4  0DB4               	rlf	___aldiv@quotient+1,f
  8106  02C5  0DB5               	rlf	___aldiv@quotient+2,f
  8107  02C6  0DB6               	rlf	___aldiv@quotient+3,f
  8108  02C7  0B89               	decfsz	9,f
  8109  02C8  2AC3               	goto	u1985
  8110  02C9                     l3323:	
  8111  02C9  082B               	movf	___aldiv@divisor+3,w
  8112  02CA  022F               	subwf	___aldiv@dividend+3,w
  8113  02CB  1D03               	skipz
  8114  02CC  2AD7               	goto	u1995
  8115  02CD  082A               	movf	___aldiv@divisor+2,w
  8116  02CE  022E               	subwf	___aldiv@dividend+2,w
  8117  02CF  1D03               	skipz
  8118  02D0  2AD7               	goto	u1995
  8119  02D1  0829               	movf	___aldiv@divisor+1,w
  8120  02D2  022D               	subwf	___aldiv@dividend+1,w
  8121  02D3  1D03               	skipz
  8122  02D4  2AD7               	goto	u1995
  8123  02D5  0828               	movf	___aldiv@divisor,w
  8124  02D6  022C               	subwf	___aldiv@dividend,w
  8125  02D7                     u1995:	
  8126  02D7  1C03               	skipc
  8127  02D8  2ADA               	goto	u1991
  8128  02D9  2ADB               	goto	u1990
  8129  02DA                     u1991:	
  8130  02DA  2AE4               	goto	l3329
  8131  02DB                     u1990:	
  8132  02DB                     l3325:	
  8133  02DB  0828               	movf	___aldiv@divisor,w
  8134  02DC  02AC               	subwf	___aldiv@dividend,f
  8135  02DD  0829               	movf	___aldiv@divisor+1,w
  8136  02DE  3BAD               	subwfb	___aldiv@dividend+1,f
  8137  02DF  082A               	movf	___aldiv@divisor+2,w
  8138  02E0  3BAE               	subwfb	___aldiv@dividend+2,f
  8139  02E1  082B               	movf	___aldiv@divisor+3,w
  8140  02E2  3BAF               	subwfb	___aldiv@dividend+3,f
  8141  02E3                     l3327:	
  8142  02E3  1433               	bsf	___aldiv@quotient,0
  8143  02E4                     l3329:	
  8144  02E4  3001               	movlw	1
  8145  02E5                     u2005:	
  8146  02E5  36AB               	lsrf	___aldiv@divisor+3,f
  8147  02E6  0CAA               	rrf	___aldiv@divisor+2,f
  8148  02E7  0CA9               	rrf	___aldiv@divisor+1,f
  8149  02E8  0CA8               	rrf	___aldiv@divisor,f
  8150  02E9  0B89               	decfsz	9,f
  8151  02EA  2AE5               	goto	u2005
  8152  02EB                     l3331:	
  8153  02EB  3001               	movlw	1
  8154  02EC  02B1               	subwf	___aldiv@counter,f
  8155  02ED  1D03               	btfss	3,2
  8156  02EE  2AF0               	goto	u2011
  8157  02EF  2AF1               	goto	u2010
  8158  02F0                     u2011:	
  8159  02F0  2AC2               	goto	l3321
  8160  02F1                     u2010:	
  8161  02F1                     l3333:	
  8162  02F1  0832               	movf	___aldiv@sign,w
  8163  02F2  1903               	btfsc	3,2
  8164  02F3  2AF5               	goto	u2021
  8165  02F4  2AF6               	goto	u2020
  8166  02F5                     u2021:	
  8167  02F5  2B01               	goto	l3337
  8168  02F6                     u2020:	
  8169  02F6                     l3335:	
  8170  02F6  09B3               	comf	___aldiv@quotient,f
  8171  02F7  09B4               	comf	___aldiv@quotient+1,f
  8172  02F8  09B5               	comf	___aldiv@quotient+2,f
  8173  02F9  09B6               	comf	___aldiv@quotient+3,f
  8174  02FA  0AB3               	incf	___aldiv@quotient,f
  8175  02FB  1903               	skipnz
  8176  02FC  0AB4               	incf	___aldiv@quotient+1,f
  8177  02FD  1903               	skipnz
  8178  02FE  0AB5               	incf	___aldiv@quotient+2,f
  8179  02FF  1903               	skipnz
  8180  0300  0AB6               	incf	___aldiv@quotient+3,f
  8181  0301                     l3337:	
  8182  0301  0836               	movf	___aldiv@quotient+3,w
  8183  0302  00AB               	movwf	?___aldiv+3
  8184  0303  0835               	movf	___aldiv@quotient+2,w
  8185  0304  00AA               	movwf	?___aldiv+2
  8186  0305  0834               	movf	___aldiv@quotient+1,w
  8187  0306  00A9               	movwf	?___aldiv+1
  8188  0307  0833               	movf	___aldiv@quotient,w
  8189  0308  00A8               	movwf	?___aldiv
  8190  0309                     l843:	
  8191  0309  0008               	return
  8192  030A                     __end_of___aldiv:	
  8193                           
  8194                           	psect	text26
  8195  0FB4                     __ptext26:	
  8196 ;; *************** function _lowBattery *****************
  8197 ;; Defined at:
  8198 ;;		line 234 in file "main.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;		None
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;		None
  8203 ;; Return value:  Size  Location     Type
  8204 ;;                  1    wreg      void 
  8205 ;; Registers used:
  8206 ;;		wreg, status,2, status,0, pclath, cstack
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8212 ;;      Params:         0       0       0       0       0       0       0       0
  8213 ;;      Locals:         0       0       0       0       0       0       0       0
  8214 ;;      Temps:          0       2       0       0       0       0       0       0
  8215 ;;      Totals:         0       2       0       0       0       0       0       0
  8216 ;;Total ram usage:        2 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; Hardware stack levels required when called:    5
  8219 ;; This function calls:
  8220 ;;		_setLEDColor
  8221 ;; This function is called by:
  8222 ;;		_main
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           
  8227                           ;psect for function _lowBattery
  8228  0FB4                     _lowBattery:	
  8229  0FB4                     l3647:	
  8230                           ;incstack = 0
  8231                           ; Regs used in _lowBattery: [wreg+status,2+status,0+pclath+cstack]
  8232                           
  8233                           
  8234                           ;main.c: 235:   interfaceState = STATE_LOWBATTERY;
  8235  0FB4  3003               	movlw	3
  8236  0FB5  0020               	movlb	0	; select bank0
  8237  0FB6  00A0               	movwf	??_lowBattery
  8238  0FB7  0820               	movf	??_lowBattery,w
  8239  0FB8  00F8               	movwf	_interfaceState
  8240  0FB9                     l3649:	
  8241                           
  8242                           ;main.c: 236:   setLEDColor(255, 0, 0);
  8243  0FB9  01F3               	clrf	setLEDColor@green
  8244  0FBA  01F4               	clrf	setLEDColor@blue
  8245  0FBB  30FF               	movlw	255
  8246  0FBC  318E  2637  318F   	fcall	_setLEDColor
  8247  0FBF                     l3651:	
  8248                           
  8249                           ;main.c: 237:   _delay((unsigned long)((250)*(4000000/4000.0)));
  8250  0FBF  3002               	movlw	2
  8251  0FC0  0020               	movlb	0	; select bank0
  8252  0FC1  00A1               	movwf	??_lowBattery+1
  8253  0FC2  3045               	movlw	69
  8254  0FC3  00A0               	movwf	??_lowBattery
  8255  0FC4  30A9               	movlw	169
  8256  0FC5                     u2507:	
  8257  0FC5  0B89               	decfsz	9,f
  8258  0FC6  2FC5               	goto	u2507
  8259  0FC7  0BA0               	decfsz	??_lowBattery,f
  8260  0FC8  2FC5               	goto	u2507
  8261  0FC9  0BA1               	decfsz	??_lowBattery+1,f
  8262  0FCA  2FC5               	goto	u2507
  8263  0FCB  3200               	nop2
  8264                           
  8265                           ;main.c: 238:   setLEDColor(0, 0, 0);
  8266  0FCC  01F3               	clrf	setLEDColor@green
  8267  0FCD  01F4               	clrf	setLEDColor@blue
  8268  0FCE  3000               	movlw	0
  8269  0FCF  318E  2637  318F   	fcall	_setLEDColor
  8270  0FD2                     l3653:	
  8271                           
  8272                           ;main.c: 239:   _delay((unsigned long)((500)*(4000000/4000.0)));
  8273  0FD2  3003               	movlw	3
  8274  0FD3  0020               	movlb	0	; select bank0
  8275  0FD4  00A1               	movwf	??_lowBattery+1
  8276  0FD5  308A               	movlw	138
  8277  0FD6  00A0               	movwf	??_lowBattery
  8278  0FD7  3055               	movlw	85
  8279  0FD8                     u2517:	
  8280  0FD8  0B89               	decfsz	9,f
  8281  0FD9  2FD8               	goto	u2517
  8282  0FDA  0BA0               	decfsz	??_lowBattery,f
  8283  0FDB  2FD8               	goto	u2517
  8284  0FDC  0BA1               	decfsz	??_lowBattery+1,f
  8285  0FDD  2FD8               	goto	u2517
  8286  0FDE  3200               	nop2
  8287  0FDF                     l579:	
  8288  0FDF  0008               	return
  8289  0FE0                     __end_of_lowBattery:	
  8290                           
  8291                           	psect	text27
  8292  0E37                     __ptext27:	
  8293 ;; *************** function _setLEDColor *****************
  8294 ;; Defined at:
  8295 ;;		line 213 in file "main.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  red             1    wreg     unsigned char 
  8298 ;;  green           1    3[COMMON] unsigned char 
  8299 ;;  blue            1    4[COMMON] unsigned char 
  8300 ;; Auto vars:     Size  Location     Type
  8301 ;;  red             1    6[COMMON] unsigned char 
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  1    wreg      void 
  8304 ;; Registers used:
  8305 ;;		wreg, status,2, status,0
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8311 ;;      Params:         2       0       0       0       0       0       0       0
  8312 ;;      Locals:         1       0       0       0       0       0       0       0
  8313 ;;      Temps:          1       0       0       0       0       0       0       0
  8314 ;;      Totals:         4       0       0       0       0       0       0       0
  8315 ;;Total ram usage:        4 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; Hardware stack levels required when called:    4
  8318 ;; This function calls:
  8319 ;;		Nothing
  8320 ;; This function is called by:
  8321 ;;		_lowBattery
  8322 ;;		_startUp
  8323 ;;		_selectSomething
  8324 ;;		_selectFrequency
  8325 ;;		_selectCurrent
  8326 ;;		_selectIncrease
  8327 ;;		_selectDecrease
  8328 ;;		_selectResetValue
  8329 ;;		_process_remote_command
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           
  8334                           ;psect for function _setLEDColor
  8335  0E37                     _setLEDColor:	
  8336                           
  8337                           ;incstack = 0
  8338                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  8339                           ;setLEDColor@red stored from wreg
  8340  0E37  00F6               	movwf	setLEDColor@red
  8341  0E38                     l3269:	
  8342                           
  8343                           ;main.c: 213: void setLEDColor(uint8_t red, uint8_t green, uint8_t blue);main.c: 214: {;
      +                          main.c: 220:   if (0 == blue){
  8344  0E38  0874               	movf	setLEDColor@blue,w
  8345  0E39  1D03               	btfss	3,2
  8346  0E3A  2E3C               	goto	u1881
  8347  0E3B  2E3D               	goto	u1880
  8348  0E3C                     u1881:	
  8349  0E3C  2E40               	goto	l3273
  8350  0E3D                     u1880:	
  8351  0E3D                     l3271:	
  8352                           
  8353                           ;main.c: 221:     TRISC |= 0b00100000;
  8354  0E3D  0021               	movlb	1	; select bank1
  8355  0E3E  168E               	bsf	14,5	;volatile
  8356                           
  8357                           ;main.c: 222:   } else {
  8358  0E3F  2E45               	goto	l3275
  8359  0E40                     l3273:	
  8360                           
  8361                           ;main.c: 223:     TRISC &= 0b11011111;
  8362  0E40  30DF               	movlw	223
  8363  0E41  00F5               	movwf	??_setLEDColor
  8364  0E42  0875               	movf	??_setLEDColor,w
  8365  0E43  0021               	movlb	1	; select bank1
  8366  0E44  058E               	andwf	14,f	;volatile
  8367  0E45                     l3275:	
  8368                           
  8369                           ;main.c: 225:   CCPR1L = 255U - blue;
  8370  0E45  0974               	comf	setLEDColor@blue,w
  8371  0E46  0025               	movlb	5	; select bank5
  8372  0E47  0091               	movwf	17	;volatile
  8373  0E48                     l3277:	
  8374                           
  8375                           ;main.c: 227:   PWM3DCH = red;
  8376  0E48  0876               	movf	setLEDColor@red,w
  8377  0E49  002C               	movlb	12	; select bank12
  8378  0E4A  0098               	movwf	24	;volatile
  8379  0E4B                     l3279:	
  8380                           
  8381                           ;main.c: 229:   PWM4DCH = green;
  8382  0E4B  0873               	movf	setLEDColor@green,w
  8383  0E4C  009B               	movwf	27	;volatile
  8384  0E4D                     l576:	
  8385  0E4D  0008               	return
  8386  0E4E                     __end_of_setLEDColor:	
  8387                           
  8388                           	psect	text28
  8389  0658                     __ptext28:	
  8390 ;; *************** function _initLED *****************
  8391 ;; Defined at:
  8392 ;;		line 172 in file "main.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;		None
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;		None
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		wreg, status,2, status,0
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8406 ;;      Params:         0       0       0       0       0       0       0       0
  8407 ;;      Locals:         0       0       0       0       0       0       0       0
  8408 ;;      Temps:          1       0       0       0       0       0       0       0
  8409 ;;      Totals:         1       0       0       0       0       0       0       0
  8410 ;;Total ram usage:        1 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    4
  8413 ;; This function calls:
  8414 ;;		Nothing
  8415 ;; This function is called by:
  8416 ;;		_main
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function _initLED
  8422  0658                     _initLED:	
  8423  0658                     l3605:	
  8424                           ;incstack = 0
  8425                           ; Regs used in _initLED: [wreg+status,2+status,0]
  8426                           
  8427                           
  8428                           ;main.c: 175:   PR2 = 255;
  8429  0658  30FF               	movlw	255
  8430  0659  0020               	movlb	0	; select bank0
  8431  065A  009B               	movwf	27	;volatile
  8432  065B                     l3607:	
  8433                           
  8434                           ;main.c: 176:   T2CONbits.T2CKPS = 0b10;
  8435  065B  081C               	movf	28,w	;volatile
  8436  065C  39FC               	andlw	-4
  8437  065D  3802               	iorlw	2
  8438  065E  009C               	movwf	28	;volatile
  8439  065F                     l3609:	
  8440                           
  8441                           ;main.c: 177:   T2CONbits.TMR2ON = 1;
  8442  065F  151C               	bsf	28,2	;volatile
  8443  0660                     l3611:	
  8444                           
  8445                           ;main.c: 181:   TRISC |= 0b00010000;
  8446  0660  0021               	movlb	1	; select bank1
  8447  0661  160E               	bsf	14,4	;volatile
  8448  0662                     l3613:	
  8449                           
  8450                           ;main.c: 182:   RC4PPS = 0b01110;
  8451  0662  300E               	movlw	14
  8452  0663  003D               	movlb	29	; select bank29
  8453  0664  00A4               	movwf	36	;volatile
  8454                           
  8455                           ;main.c: 183:   CCPTMRSbits.P3TSEL = 0b00;
  8456  0665  30CF               	movlw	-49
  8457  0666  0025               	movlb	5	; select bank5
  8458  0667  059E               	andwf	30,f	;volatile
  8459  0668                     l3615:	
  8460                           
  8461                           ;main.c: 184:   PWM3DCH = 0;
  8462  0668  002C               	movlb	12	; select bank12
  8463  0669  0198               	clrf	24	;volatile
  8464  066A                     l3617:	
  8465                           
  8466                           ;main.c: 185:   PWM3DCLbits.PWM3DCL = 0;
  8467  066A  303F               	movlw	-193
  8468  066B  0597               	andwf	23,f	;volatile
  8469  066C                     l3619:	
  8470                           
  8471                           ;main.c: 186:   PWM3CONbits.PWM3POL = 1;
  8472  066C  1619               	bsf	25,4	;volatile
  8473  066D                     l3621:	
  8474                           
  8475                           ;main.c: 187:   TRISC &= 0b11101111;
  8476  066D  30EF               	movlw	239
  8477  066E  00F3               	movwf	??_initLED
  8478  066F  0873               	movf	??_initLED,w
  8479  0670  0021               	movlb	1	; select bank1
  8480  0671  058E               	andwf	14,f	;volatile
  8481  0672                     l3623:	
  8482                           
  8483                           ;main.c: 188:   PWM3CONbits.PWM3EN = 1;
  8484  0672  002C               	movlb	12	; select bank12
  8485  0673  1799               	bsf	25,7	;volatile
  8486  0674                     l3625:	
  8487                           
  8488                           ;main.c: 192:   TRISA |= 0b00100000;
  8489  0674  0021               	movlb	1	; select bank1
  8490  0675  168C               	bsf	12,5	;volatile
  8491  0676                     l3627:	
  8492                           
  8493                           ;main.c: 193:   RA5PPS = 0b01111;
  8494  0676  300F               	movlw	15
  8495  0677  003D               	movlb	29	; select bank29
  8496  0678  0095               	movwf	21	;volatile
  8497  0679                     l3629:	
  8498                           
  8499                           ;main.c: 194:   CCPTMRSbits.P4TSEL = 0b00;
  8500  0679  303F               	movlw	-193
  8501  067A  0025               	movlb	5	; select bank5
  8502  067B  059E               	andwf	30,f	;volatile
  8503  067C                     l3631:	
  8504                           
  8505                           ;main.c: 195:   PWM4DCH = 0;
  8506  067C  002C               	movlb	12	; select bank12
  8507  067D  019B               	clrf	27	;volatile
  8508  067E                     l3633:	
  8509                           
  8510                           ;main.c: 196:   PWM4DCLbits.PWM4DCL = 0;
  8511  067E  303F               	movlw	-193
  8512  067F  059A               	andwf	26,f	;volatile
  8513  0680                     l3635:	
  8514                           
  8515                           ;main.c: 197:   PWM4CONbits.PWM4POL = 1;
  8516  0680  161C               	bsf	28,4	;volatile
  8517  0681                     l3637:	
  8518                           
  8519                           ;main.c: 198:   TRISA &= 0b11011111;
  8520  0681  30DF               	movlw	223
  8521  0682  00F3               	movwf	??_initLED
  8522  0683  0873               	movf	??_initLED,w
  8523  0684  0021               	movlb	1	; select bank1
  8524  0685  058C               	andwf	12,f	;volatile
  8525  0686                     l3639:	
  8526                           
  8527                           ;main.c: 199:   PWM4CONbits.PWM4EN = 1;
  8528  0686  002C               	movlb	12	; select bank12
  8529  0687  179C               	bsf	28,7	;volatile
  8530  0688                     l3641:	
  8531                           
  8532                           ;main.c: 205:   TRISC |= 0b00100000;
  8533  0688  0021               	movlb	1	; select bank1
  8534  0689  168E               	bsf	14,5	;volatile
  8535                           
  8536                           ;main.c: 206:   RC5PPS = 0b01100;
  8537  068A  300C               	movlw	12
  8538  068B  003D               	movlb	29	; select bank29
  8539  068C  00A5               	movwf	37	;volatile
  8540  068D                     l3643:	
  8541                           
  8542                           ;main.c: 207:   CCP1CONbits.CCP1M = 0b1100;
  8543  068D  0025               	movlb	5	; select bank5
  8544  068E  0813               	movf	19,w	;volatile
  8545  068F  39F0               	andlw	-16
  8546  0690  380C               	iorlw	12
  8547  0691  0093               	movwf	19	;volatile
  8548  0692                     l3645:	
  8549                           
  8550                           ;main.c: 208:   CCPR1L = 255;
  8551  0692  30FF               	movlw	255
  8552  0693  0091               	movwf	17	;volatile
  8553                           
  8554                           ;main.c: 209:   CCP1CONbits.DC1B = 0x3;
  8555  0694  3030               	movlw	48
  8556  0695  0493               	iorwf	19,f	;volatile
  8557                           
  8558                           ;main.c: 210:   TRISC &= 0b11011111;
  8559  0696  30DF               	movlw	223
  8560  0697  00F3               	movwf	??_initLED
  8561  0698  0873               	movf	??_initLED,w
  8562  0699  0021               	movlb	1	; select bank1
  8563  069A  058E               	andwf	14,f	;volatile
  8564  069B                     l571:	
  8565  069B  0008               	return
  8566  069C                     __end_of_initLED:	
  8567                           
  8568                           	psect	text29
  8569  0EAC                     __ptext29:	
  8570 ;; *************** function _SYSTEM_Initialize *****************
  8571 ;; Defined at:
  8572 ;;		line 50 in file "mcc_generated_files/mcc.c"
  8573 ;; Parameters:    Size  Location     Type
  8574 ;;		None
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;		None
  8577 ;; Return value:  Size  Location     Type
  8578 ;;                  1    wreg      void 
  8579 ;; Registers used:
  8580 ;;		wreg, status,2, status,0, pclath, cstack
  8581 ;; Tracked objects:
  8582 ;;		On entry : 0/0
  8583 ;;		On exit  : 0/0
  8584 ;;		Unchanged: 0/0
  8585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8586 ;;      Params:         0       0       0       0       0       0       0       0
  8587 ;;      Locals:         0       0       0       0       0       0       0       0
  8588 ;;      Temps:          0       0       0       0       0       0       0       0
  8589 ;;      Totals:         0       0       0       0       0       0       0       0
  8590 ;;Total ram usage:        0 bytes
  8591 ;; Hardware stack levels used:    1
  8592 ;; Hardware stack levels required when called:    6
  8593 ;; This function calls:
  8594 ;;		_DAC_Initialize
  8595 ;;		_EUSART_Initialize
  8596 ;;		_EXT_INT_Initialize
  8597 ;;		_OPA1_Initialize
  8598 ;;		_OPA2_Initialize
  8599 ;;		_OSCILLATOR_Initialize
  8600 ;;		_PIN_MANAGER_Initialize
  8601 ;;		_TMR0_Initialize
  8602 ;;		_TMR2_Initialize
  8603 ;;		_TMR4_Initialize
  8604 ;;		_WDT_Initialize
  8605 ;; This function is called by:
  8606 ;;		_main
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           
  8611                           ;psect for function _SYSTEM_Initialize
  8612  0EAC                     _SYSTEM_Initialize:	
  8613  0EAC                     l3601:	
  8614                           ;incstack = 0
  8615                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8616                           
  8617                           
  8618                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  8619  0EAC  3187  277F  318E   	fcall	_PIN_MANAGER_Initialize
  8620                           
  8621                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  8622  0EAF  318D  25AD  318E   	fcall	_OSCILLATOR_Initialize
  8623                           
  8624                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  8625  0EB2  318D  255E  318E   	fcall	_WDT_Initialize
  8626                           
  8627                           ;mcc_generated_files/mcc.c: 56:     DAC_Initialize();
  8628  0EB5  318D  2571  318E   	fcall	_DAC_Initialize
  8629                           
  8630                           ;mcc_generated_files/mcc.c: 57:     OPA1_Initialize();
  8631  0EB8  318D  2556  318E   	fcall	_OPA1_Initialize
  8632                           
  8633                           ;mcc_generated_files/mcc.c: 58:     TMR4_Initialize();
  8634  0EBB  318E  2624  318E   	fcall	_TMR4_Initialize
  8635                           
  8636                           ;mcc_generated_files/mcc.c: 59:     OPA2_Initialize();
  8637  0EBE  318D  255A  318E   	fcall	_OPA2_Initialize
  8638                           
  8639                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
  8640  0EC1  318D  25B5  318E   	fcall	_TMR2_Initialize
  8641                           
  8642                           ;mcc_generated_files/mcc.c: 61:     EXT_INT_Initialize();
  8643  0EC4  318D  25C7  318E   	fcall	_EXT_INT_Initialize
  8644                           
  8645                           ;mcc_generated_files/mcc.c: 62:     TMR0_Initialize();
  8646  0EC7  318E  2600  318E   	fcall	_TMR0_Initialize
  8647                           
  8648                           ;mcc_generated_files/mcc.c: 63:     EUSART_Initialize();
  8649  0ECA  318E  268A  318E   	fcall	_EUSART_Initialize
  8650  0ECD                     l48:	
  8651  0ECD  0008               	return
  8652  0ECE                     __end_of_SYSTEM_Initialize:	
  8653                           
  8654                           	psect	text30
  8655  0D5E                     __ptext30:	
  8656 ;; *************** function _WDT_Initialize *****************
  8657 ;; Defined at:
  8658 ;;		line 78 in file "mcc_generated_files/mcc.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;		None
  8661 ;; Auto vars:     Size  Location     Type
  8662 ;;		None
  8663 ;; Return value:  Size  Location     Type
  8664 ;;                  1    wreg      void 
  8665 ;; Registers used:
  8666 ;;		wreg
  8667 ;; Tracked objects:
  8668 ;;		On entry : 0/0
  8669 ;;		On exit  : 0/0
  8670 ;;		Unchanged: 0/0
  8671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8672 ;;      Params:         0       0       0       0       0       0       0       0
  8673 ;;      Locals:         0       0       0       0       0       0       0       0
  8674 ;;      Temps:          0       0       0       0       0       0       0       0
  8675 ;;      Totals:         0       0       0       0       0       0       0       0
  8676 ;;Total ram usage:        0 bytes
  8677 ;; Hardware stack levels used:    1
  8678 ;; Hardware stack levels required when called:    4
  8679 ;; This function calls:
  8680 ;;		Nothing
  8681 ;; This function is called by:
  8682 ;;		_SYSTEM_Initialize
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686                           
  8687                           ;psect for function _WDT_Initialize
  8688  0D5E                     _WDT_Initialize:	
  8689  0D5E                     l3425:	
  8690                           ;incstack = 0
  8691                           ; Regs used in _WDT_Initialize: [wreg]
  8692                           
  8693                           
  8694                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0x16;
  8695  0D5E  3016               	movlw	22
  8696  0D5F  0021               	movlb	1	; select bank1
  8697  0D60  0097               	movwf	23	;volatile
  8698  0D61                     l54:	
  8699  0D61  0008               	return
  8700  0D62                     __end_of_WDT_Initialize:	
  8701                           
  8702                           	psect	text31
  8703  0E24                     __ptext31:	
  8704 ;; *************** function _TMR4_Initialize *****************
  8705 ;; Defined at:
  8706 ;;		line 65 in file "mcc_generated_files/tmr4.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;		None
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;		None
  8711 ;; Return value:  Size  Location     Type
  8712 ;;                  1    wreg      void 
  8713 ;; Registers used:
  8714 ;;		wreg, status,2, status,0, pclath, cstack
  8715 ;; Tracked objects:
  8716 ;;		On entry : 0/0
  8717 ;;		On exit  : 0/0
  8718 ;;		Unchanged: 0/0
  8719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8720 ;;      Params:         0       0       0       0       0       0       0       0
  8721 ;;      Locals:         0       0       0       0       0       0       0       0
  8722 ;;      Temps:          0       0       0       0       0       0       0       0
  8723 ;;      Totals:         0       0       0       0       0       0       0       0
  8724 ;;Total ram usage:        0 bytes
  8725 ;; Hardware stack levels used:    1
  8726 ;; Hardware stack levels required when called:    5
  8727 ;; This function calls:
  8728 ;;		_TMR4_SetInterruptHandler
  8729 ;; This function is called by:
  8730 ;;		_SYSTEM_Initialize
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           
  8735                           ;psect for function _TMR4_Initialize
  8736  0E24                     _TMR4_Initialize:	
  8737  0E24                     l3429:	
  8738                           ;incstack = 0
  8739                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8740                           
  8741                           
  8742                           ;mcc_generated_files/tmr4.c: 70:     PR4 = 0x04;
  8743  0E24  3004               	movlw	4
  8744  0E25  0028               	movlb	8	; select bank8
  8745  0E26  0096               	movwf	22	;volatile
  8746  0E27                     l3431:	
  8747                           
  8748                           ;mcc_generated_files/tmr4.c: 73:     TMR4 = 0x00;
  8749  0E27  0195               	clrf	21	;volatile
  8750  0E28                     l3433:	
  8751                           
  8752                           ;mcc_generated_files/tmr4.c: 76:     PIR2bits.TMR4IF = 0;
  8753  0E28  0020               	movlb	0	; select bank0
  8754  0E29  1092               	bcf	18,1	;volatile
  8755  0E2A                     l3435:	
  8756                           
  8757                           ;mcc_generated_files/tmr4.c: 79:     PIE2bits.TMR4IE = 1;
  8758  0E2A  0021               	movlb	1	; select bank1
  8759  0E2B  1492               	bsf	18,1	;volatile
  8760  0E2C                     l3437:	
  8761                           
  8762                           ;mcc_generated_files/tmr4.c: 82:     TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandl
      +                          er);
  8763  0E2C  30E3               	movlw	low _TMR4_DefaultInterruptHandler
  8764  0E2D  00F3               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  8765  0E2E  3007               	movlw	high _TMR4_DefaultInterruptHandler
  8766  0E2F  00F4               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  8767  0E30  318D  2595  318E   	fcall	_TMR4_SetInterruptHandler
  8768  0E33                     l3439:	
  8769                           
  8770                           ;mcc_generated_files/tmr4.c: 85:     T4CON = 0x16;
  8771  0E33  3016               	movlw	22
  8772  0E34  0028               	movlb	8	; select bank8
  8773  0E35  0097               	movwf	23	;volatile
  8774  0E36                     l383:	
  8775  0E36  0008               	return
  8776  0E37                     __end_of_TMR4_Initialize:	
  8777                           
  8778                           	psect	text32
  8779  0D95                     __ptext32:	
  8780 ;; *************** function _TMR4_SetInterruptHandler *****************
  8781 ;; Defined at:
  8782 ;;		line 133 in file "mcc_generated_files/tmr4.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  8785 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  8786 ;; Auto vars:     Size  Location     Type
  8787 ;;		None
  8788 ;; Return value:  Size  Location     Type
  8789 ;;                  1    wreg      void 
  8790 ;; Registers used:
  8791 ;;		wreg
  8792 ;; Tracked objects:
  8793 ;;		On entry : 0/0
  8794 ;;		On exit  : 0/0
  8795 ;;		Unchanged: 0/0
  8796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8797 ;;      Params:         2       0       0       0       0       0       0       0
  8798 ;;      Locals:         0       0       0       0       0       0       0       0
  8799 ;;      Temps:          0       0       0       0       0       0       0       0
  8800 ;;      Totals:         2       0       0       0       0       0       0       0
  8801 ;;Total ram usage:        2 bytes
  8802 ;; Hardware stack levels used:    1
  8803 ;; Hardware stack levels required when called:    4
  8804 ;; This function calls:
  8805 ;;		Nothing
  8806 ;; This function is called by:
  8807 ;;		_TMR4_Initialize
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           
  8812                           ;psect for function _TMR4_SetInterruptHandler
  8813  0D95                     _TMR4_SetInterruptHandler:	
  8814  0D95                     l3215:	
  8815                           ;incstack = 0
  8816                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  8817                           
  8818                           
  8819                           ;mcc_generated_files/tmr4.c: 134:     TMR4_InterruptHandler = InterruptHandler;
  8820  0D95  0874               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  8821  0D96  0021               	movlb	1	; select bank1
  8822  0D97  00DF               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
  8823  0D98  0873               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  8824  0D99  00DE               	movwf	_TMR4_InterruptHandler^(0+128)
  8825  0D9A                     l405:	
  8826  0D9A  0008               	return
  8827  0D9B                     __end_of_TMR4_SetInterruptHandler:	
  8828                           
  8829                           	psect	text33
  8830  0DB5                     __ptext33:	
  8831 ;; *************** function _TMR2_Initialize *****************
  8832 ;; Defined at:
  8833 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;		None
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;		None
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  1    wreg      void 
  8840 ;; Registers used:
  8841 ;;		wreg, status,2
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8847 ;;      Params:         0       0       0       0       0       0       0       0
  8848 ;;      Locals:         0       0       0       0       0       0       0       0
  8849 ;;      Temps:          0       0       0       0       0       0       0       0
  8850 ;;      Totals:         0       0       0       0       0       0       0       0
  8851 ;;Total ram usage:        0 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    4
  8854 ;; This function calls:
  8855 ;;		Nothing
  8856 ;; This function is called by:
  8857 ;;		_SYSTEM_Initialize
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           
  8862                           ;psect for function _TMR2_Initialize
  8863  0DB5                     _TMR2_Initialize:	
  8864  0DB5                     l3443:	
  8865                           ;incstack = 0
  8866                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  8867                           
  8868                           
  8869                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 255;
  8870  0DB5  30FF               	movlw	255
  8871  0DB6  0020               	movlb	0	; select bank0
  8872  0DB7  009B               	movwf	27	;volatile
  8873  0DB8                     l3445:	
  8874                           
  8875                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  8876  0DB8  019A               	clrf	26	;volatile
  8877  0DB9                     l3447:	
  8878                           
  8879                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  8880  0DB9  1091               	bcf	17,1	;volatile
  8881  0DBA                     l3449:	
  8882                           
  8883                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x06;
  8884  0DBA  3006               	movlw	6
  8885  0DBB  009C               	movwf	28	;volatile
  8886  0DBC                     l296:	
  8887  0DBC  0008               	return
  8888  0DBD                     __end_of_TMR2_Initialize:	
  8889                           
  8890                           	psect	text34
  8891  0E00                     __ptext34:	
  8892 ;; *************** function _TMR0_Initialize *****************
  8893 ;; Defined at:
  8894 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;		None
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      void 
  8901 ;; Registers used:
  8902 ;;		wreg, status,2, status,0, pclath, cstack
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8908 ;;      Params:         0       0       0       0       0       0       0       0
  8909 ;;      Locals:         0       0       0       0       0       0       0       0
  8910 ;;      Temps:          0       0       0       0       0       0       0       0
  8911 ;;      Totals:         0       0       0       0       0       0       0       0
  8912 ;;Total ram usage:        0 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:    5
  8915 ;; This function calls:
  8916 ;;		_TMR0_SetInterruptHandler
  8917 ;; This function is called by:
  8918 ;;		_SYSTEM_Initialize
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           
  8923                           ;psect for function _TMR0_Initialize
  8924  0E00                     _TMR0_Initialize:	
  8925  0E00                     l3457:	
  8926                           ;incstack = 0
  8927                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8928                           
  8929                           
  8930                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 
      +                          & 0x3F));
  8931  0E00  0021               	movlb	1	; select bank1
  8932  0E01  0815               	movf	21,w	;volatile
  8933  0E02  39C0               	andlw	192
  8934  0E03  3815               	iorlw	21
  8935  0E04  0095               	movwf	21	;volatile
  8936  0E05                     l3459:	
  8937                           
  8938                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x00;
  8939  0E05  0020               	movlb	0	; select bank0
  8940  0E06  0195               	clrf	21	;volatile
  8941  0E07                     l3461:	
  8942                           
  8943                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 0;
  8944  0E07  01F9               	clrf	_timer0ReloadVal	;volatile
  8945  0E08                     l3463:	
  8946                           
  8947                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  8948  0E08  110B               	bcf	11,2	;volatile
  8949  0E09                     l3465:	
  8950                           
  8951                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 0;
  8952  0E09  128B               	bcf	11,5	;volatile
  8953  0E0A                     l3467:	
  8954                           
  8955                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  8956  0E0A  3002               	movlw	low _TMR0_DefaultInterruptHandler
  8957  0E0B  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  8958  0E0C  3000               	movlw	high _TMR0_DefaultInterruptHandler
  8959  0E0D  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  8960  0E0E  318D  258F  318E   	fcall	_TMR0_SetInterruptHandler
  8961  0E11                     l337:	
  8962  0E11  0008               	return
  8963  0E12                     __end_of_TMR0_Initialize:	
  8964                           
  8965                           	psect	text35
  8966  0D8F                     __ptext35:	
  8967 ;; *************** function _TMR0_SetInterruptHandler *****************
  8968 ;; Defined at:
  8969 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  8970 ;; Parameters:    Size  Location     Type
  8971 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  8972 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8973 ;; Auto vars:     Size  Location     Type
  8974 ;;		None
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  1    wreg      void 
  8977 ;; Registers used:
  8978 ;;		wreg
  8979 ;; Tracked objects:
  8980 ;;		On entry : 0/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8984 ;;      Params:         2       0       0       0       0       0       0       0
  8985 ;;      Locals:         0       0       0       0       0       0       0       0
  8986 ;;      Temps:          0       0       0       0       0       0       0       0
  8987 ;;      Totals:         2       0       0       0       0       0       0       0
  8988 ;;Total ram usage:        2 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:    4
  8991 ;; This function calls:
  8992 ;;		Nothing
  8993 ;; This function is called by:
  8994 ;;		_TMR0_Initialize
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           
  8999                           ;psect for function _TMR0_SetInterruptHandler
  9000  0D8F                     _TMR0_SetInterruptHandler:	
  9001  0D8F                     l3213:	
  9002                           ;incstack = 0
  9003                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  9004                           
  9005                           
  9006                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
  9007  0D8F  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  9008  0D90  0021               	movlb	1	; select bank1
  9009  0D91  00E1               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  9010  0D92  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  9011  0D93  00E0               	movwf	_TMR0_InterruptHandler^(0+128)
  9012  0D94                     l353:	
  9013  0D94  0008               	return
  9014  0D95                     __end_of_TMR0_SetInterruptHandler:	
  9015                           
  9016                           	psect	text36
  9017  077F                     __ptext36:	
  9018 ;; *************** function _PIN_MANAGER_Initialize *****************
  9019 ;; Defined at:
  9020 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  9021 ;; Parameters:    Size  Location     Type
  9022 ;;		None
  9023 ;; Auto vars:     Size  Location     Type
  9024 ;;		None
  9025 ;; Return value:  Size  Location     Type
  9026 ;;                  1    wreg      void 
  9027 ;; Registers used:
  9028 ;;		wreg, status,2
  9029 ;; Tracked objects:
  9030 ;;		On entry : 0/0
  9031 ;;		On exit  : 0/0
  9032 ;;		Unchanged: 0/0
  9033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9034 ;;      Params:         0       0       0       0       0       0       0       0
  9035 ;;      Locals:         0       0       0       0       0       0       0       0
  9036 ;;      Temps:          0       0       0       0       0       0       0       0
  9037 ;;      Totals:         0       0       0       0       0       0       0       0
  9038 ;;Total ram usage:        0 bytes
  9039 ;; Hardware stack levels used:    1
  9040 ;; Hardware stack levels required when called:    4
  9041 ;; This function calls:
  9042 ;;		Nothing
  9043 ;; This function is called by:
  9044 ;;		_SYSTEM_Initialize
  9045 ;; This function uses a non-reentrant model
  9046 ;;
  9047                           
  9048                           
  9049                           ;psect for function _PIN_MANAGER_Initialize
  9050  077F                     _PIN_MANAGER_Initialize:	
  9051  077F                     l3387:	
  9052                           ;incstack = 0
  9053                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9054                           
  9055                           
  9056                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  9057  077F  0022               	movlb	2	; select bank2
  9058  0780  018C               	clrf	12	;volatile
  9059                           
  9060                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  9061  0781  018D               	clrf	13	;volatile
  9062                           
  9063                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  9064  0782  018E               	clrf	14	;volatile
  9065  0783                     l3389:	
  9066                           
  9067                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x04;
  9068  0783  3004               	movlw	4
  9069  0784  0021               	movlb	1	; select bank1
  9070  0785  008C               	movwf	12	;volatile
  9071  0786                     l3391:	
  9072                           
  9073                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x30;
  9074  0786  3030               	movlw	48
  9075  0787  008D               	movwf	13	;volatile
  9076  0788                     l3393:	
  9077                           
  9078                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x50;
  9079  0788  3050               	movlw	80
  9080  0789  008E               	movwf	14	;volatile
  9081  078A                     l3395:	
  9082                           
  9083                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x40;
  9084  078A  3040               	movlw	64
  9085  078B  0023               	movlb	3	; select bank3
  9086  078C  008E               	movwf	14	;volatile
  9087  078D                     l3397:	
  9088                           
  9089                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x10;
  9090  078D  3010               	movlw	16
  9091  078E  008D               	movwf	13	;volatile
  9092  078F                     l3399:	
  9093                           
  9094                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x00;
  9095  078F  018C               	clrf	12	;volatile
  9096  0790                     l3401:	
  9097                           
  9098                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  9099  0790  0024               	movlb	4	; select bank4
  9100  0791  018D               	clrf	13	;volatile
  9101  0792                     l3403:	
  9102                           
  9103                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  9104  0792  018C               	clrf	12	;volatile
  9105  0793                     l3405:	
  9106                           
  9107                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
  9108  0793  018E               	clrf	14	;volatile
  9109  0794                     l3407:	
  9110                           
  9111                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
  9112  0794  0021               	movlb	1	; select bank1
  9113  0795  1395               	bcf	21,7	;volatile
  9114  0796                     l3409:	
  9115                           
  9116                           ;mcc_generated_files/pin_manager.c: 89:     ODCONA = 0x00;
  9117  0796  0025               	movlb	5	; select bank5
  9118  0797  018C               	clrf	12	;volatile
  9119  0798                     l3411:	
  9120                           
  9121                           ;mcc_generated_files/pin_manager.c: 90:     ODCONB = 0x00;
  9122  0798  018D               	clrf	13	;volatile
  9123  0799                     l3413:	
  9124                           
  9125                           ;mcc_generated_files/pin_manager.c: 91:     ODCONC = 0x00;
  9126  0799  018E               	clrf	14	;volatile
  9127                           
  9128                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONA = 0x37;
  9129  079A  3037               	movlw	55
  9130  079B  0026               	movlb	6	; select bank6
  9131  079C  008C               	movwf	12	;volatile
  9132                           
  9133                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONB = 0xF0;
  9134  079D  30F0               	movlw	240
  9135  079E  008D               	movwf	13	;volatile
  9136                           
  9137                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONC = 0xFF;
  9138  079F  30FF               	movlw	255
  9139  07A0  008E               	movwf	14	;volatile
  9140                           
  9141                           ;mcc_generated_files/pin_manager.c: 103:     INLVLA = 0x3F;
  9142  07A1  303F               	movlw	63
  9143  07A2  0027               	movlb	7	; select bank7
  9144  07A3  008C               	movwf	12	;volatile
  9145                           
  9146                           ;mcc_generated_files/pin_manager.c: 104:     INLVLB = 0xF0;
  9147  07A4  30F0               	movlw	240
  9148  07A5  008D               	movwf	13	;volatile
  9149                           
  9150                           ;mcc_generated_files/pin_manager.c: 105:     INLVLC = 0xFF;
  9151  07A6  30FF               	movlw	255
  9152  07A7  008E               	movwf	14	;volatile
  9153  07A8                     l3415:	
  9154                           
  9155                           ;mcc_generated_files/pin_manager.c: 113:     INTCONbits.IOCIE = 1;
  9156  07A8  158B               	bsf	11,3	;volatile
  9157                           
  9158                           ;mcc_generated_files/pin_manager.c: 116:     INTPPS = 0x02;
  9159  07A9  3002               	movlw	2
  9160  07AA  003C               	movlb	28	; select bank28
  9161  07AB  0090               	movwf	16	;volatile
  9162                           
  9163                           ;mcc_generated_files/pin_manager.c: 117:     RXPPS = 0x0D;
  9164  07AC  300D               	movlw	13
  9165  07AD  00A4               	movwf	36	;volatile
  9166                           
  9167                           ;mcc_generated_files/pin_manager.c: 118:     RB7PPS = 0x14;
  9168  07AE  3014               	movlw	20
  9169  07AF  003D               	movlb	29	; select bank29
  9170  07B0  009F               	movwf	31	;volatile
  9171  07B1                     l109:	
  9172  07B1  0008               	return
  9173  07B2                     __end_of_PIN_MANAGER_Initialize:	
  9174                           
  9175                           	psect	text37
  9176  0DAD                     __ptext37:	
  9177 ;; *************** function _OSCILLATOR_Initialize *****************
  9178 ;; Defined at:
  9179 ;;		line 66 in file "mcc_generated_files/mcc.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;		None
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;		None
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      void 
  9186 ;; Registers used:
  9187 ;;		wreg, status,2
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9193 ;;      Params:         0       0       0       0       0       0       0       0
  9194 ;;      Locals:         0       0       0       0       0       0       0       0
  9195 ;;      Temps:          0       0       0       0       0       0       0       0
  9196 ;;      Totals:         0       0       0       0       0       0       0       0
  9197 ;;Total ram usage:        0 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    4
  9200 ;; This function calls:
  9201 ;;		Nothing
  9202 ;; This function is called by:
  9203 ;;		_SYSTEM_Initialize
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           
  9208                           ;psect for function _OSCILLATOR_Initialize
  9209  0DAD                     _OSCILLATOR_Initialize:	
  9210  0DAD                     l3417:	
  9211                           ;incstack = 0
  9212                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9213                           
  9214                           
  9215                           ;mcc_generated_files/mcc.c: 69:     OSCCON = 0x6A;
  9216  0DAD  306A               	movlw	106
  9217  0DAE  0021               	movlb	1	; select bank1
  9218  0DAF  0099               	movwf	25	;volatile
  9219  0DB0                     l3419:	
  9220                           
  9221                           ;mcc_generated_files/mcc.c: 71:     OSCSTAT = 0x00;
  9222  0DB0  019A               	clrf	26	;volatile
  9223  0DB1                     l3421:	
  9224                           
  9225                           ;mcc_generated_files/mcc.c: 73:     OSCTUNE = 0x00;
  9226  0DB1  0198               	clrf	24	;volatile
  9227  0DB2                     l3423:	
  9228                           
  9229                           ;mcc_generated_files/mcc.c: 75:     BORCON = 0x00;
  9230  0DB2  0022               	movlb	2	; select bank2
  9231  0DB3  0196               	clrf	22	;volatile
  9232  0DB4                     l51:	
  9233  0DB4  0008               	return
  9234  0DB5                     __end_of_OSCILLATOR_Initialize:	
  9235                           
  9236                           	psect	text38
  9237  0D5A                     __ptext38:	
  9238 ;; *************** function _OPA2_Initialize *****************
  9239 ;; Defined at:
  9240 ;;		line 58 in file "mcc_generated_files/opa2.c"
  9241 ;; Parameters:    Size  Location     Type
  9242 ;;		None
  9243 ;; Auto vars:     Size  Location     Type
  9244 ;;		None
  9245 ;; Return value:  Size  Location     Type
  9246 ;;                  1    wreg      void 
  9247 ;; Registers used:
  9248 ;;		wreg
  9249 ;; Tracked objects:
  9250 ;;		On entry : 0/0
  9251 ;;		On exit  : 0/0
  9252 ;;		Unchanged: 0/0
  9253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9254 ;;      Params:         0       0       0       0       0       0       0       0
  9255 ;;      Locals:         0       0       0       0       0       0       0       0
  9256 ;;      Temps:          0       0       0       0       0       0       0       0
  9257 ;;      Totals:         0       0       0       0       0       0       0       0
  9258 ;;Total ram usage:        0 bytes
  9259 ;; Hardware stack levels used:    1
  9260 ;; Hardware stack levels required when called:    4
  9261 ;; This function calls:
  9262 ;;		Nothing
  9263 ;; This function is called by:
  9264 ;;		_SYSTEM_Initialize
  9265 ;;		_main
  9266 ;; This function uses a non-reentrant model
  9267 ;;
  9268                           
  9269                           
  9270                           ;psect for function _OPA2_Initialize
  9271  0D5A                     _OPA2_Initialize:	
  9272  0D5A                     l3441:	
  9273                           ;incstack = 0
  9274                           ; Regs used in _OPA2_Initialize: [wreg]
  9275                           
  9276                           
  9277                           ;mcc_generated_files/opa2.c: 61:     OPA2CON = 0xC2;
  9278  0D5A  30C2               	movlw	194
  9279  0D5B  002A               	movlb	10	; select bank10
  9280  0D5C  0095               	movwf	21	;volatile
  9281  0D5D                     l320:	
  9282  0D5D  0008               	return
  9283  0D5E                     __end_of_OPA2_Initialize:	
  9284                           
  9285                           	psect	text39
  9286  0D56                     __ptext39:	
  9287 ;; *************** function _OPA1_Initialize *****************
  9288 ;; Defined at:
  9289 ;;		line 58 in file "mcc_generated_files/opa1.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;		None
  9292 ;; Auto vars:     Size  Location     Type
  9293 ;;		None
  9294 ;; Return value:  Size  Location     Type
  9295 ;;                  1    wreg      void 
  9296 ;; Registers used:
  9297 ;;		wreg
  9298 ;; Tracked objects:
  9299 ;;		On entry : 0/0
  9300 ;;		On exit  : 0/0
  9301 ;;		Unchanged: 0/0
  9302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9303 ;;      Params:         0       0       0       0       0       0       0       0
  9304 ;;      Locals:         0       0       0       0       0       0       0       0
  9305 ;;      Temps:          0       0       0       0       0       0       0       0
  9306 ;;      Totals:         0       0       0       0       0       0       0       0
  9307 ;;Total ram usage:        0 bytes
  9308 ;; Hardware stack levels used:    1
  9309 ;; Hardware stack levels required when called:    4
  9310 ;; This function calls:
  9311 ;;		Nothing
  9312 ;; This function is called by:
  9313 ;;		_SYSTEM_Initialize
  9314 ;;		_main
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           
  9319                           ;psect for function _OPA1_Initialize
  9320  0D56                     _OPA1_Initialize:	
  9321  0D56                     l3427:	
  9322                           ;incstack = 0
  9323                           ; Regs used in _OPA1_Initialize: [wreg]
  9324                           
  9325                           
  9326                           ;mcc_generated_files/opa1.c: 61:     OPA1CON = 0xC2;
  9327  0D56  30C2               	movlw	194
  9328  0D57  002A               	movlb	10	; select bank10
  9329  0D58  0091               	movwf	17	;volatile
  9330  0D59                     l117:	
  9331  0D59  0008               	return
  9332  0D5A                     __end_of_OPA1_Initialize:	
  9333                           
  9334                           	psect	text40
  9335  0DC7                     __ptext40:	
  9336 ;; *************** function _EXT_INT_Initialize *****************
  9337 ;; Defined at:
  9338 ;;		line 138 in file "mcc_generated_files/ext_int.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;		None
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;		None
  9343 ;; Return value:  Size  Location     Type
  9344 ;;                  1    wreg      void 
  9345 ;; Registers used:
  9346 ;;		wreg, status,2, status,0, pclath, cstack
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9352 ;;      Params:         0       0       0       0       0       0       0       0
  9353 ;;      Locals:         0       0       0       0       0       0       0       0
  9354 ;;      Temps:          0       0       0       0       0       0       0       0
  9355 ;;      Totals:         0       0       0       0       0       0       0       0
  9356 ;;Total ram usage:        0 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    5
  9359 ;; This function calls:
  9360 ;;		_INT_SetInterruptHandler
  9361 ;; This function is called by:
  9362 ;;		_SYSTEM_Initialize
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function _EXT_INT_Initialize
  9368  0DC7                     _EXT_INT_Initialize:	
  9369  0DC7                     l3451:	
  9370                           ;incstack = 0
  9371                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9372                           
  9373                           
  9374                           ;mcc_generated_files/ext_int.c: 143:     (INTCONbits.INTF = 0);
  9375  0DC7  108B               	bcf	11,1	;volatile
  9376                           
  9377                           ;mcc_generated_files/ext_int.c: 144:     (OPTION_REGbits.INTEDG = 0);
  9378  0DC8  0021               	movlb	1	; select bank1
  9379  0DC9  1315               	bcf	21,6	;volatile
  9380  0DCA                     l3453:	
  9381                           
  9382                           ;mcc_generated_files/ext_int.c: 146:     INT_SetInterruptHandler(INT_DefaultInterruptHan
      +                          dler);
  9383  0DCA  306F               	movlw	low _INT_DefaultInterruptHandler
  9384  0DCB  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler
  9385  0DCC  3004               	movlw	high _INT_DefaultInterruptHandler
  9386  0DCD  00F4               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  9387  0DCE  318D  2589  318D   	fcall	_INT_SetInterruptHandler
  9388  0DD1                     l3455:	
  9389                           
  9390                           ;mcc_generated_files/ext_int.c: 147:     (INTCONbits.INTE = 1);
  9391  0DD1  160B               	bsf	11,4	;volatile
  9392  0DD2                     l283:	
  9393  0DD2  0008               	return
  9394  0DD3                     __end_of_EXT_INT_Initialize:	
  9395                           
  9396                           	psect	text41
  9397  0D89                     __ptext41:	
  9398 ;; *************** function _INT_SetInterruptHandler *****************
  9399 ;; Defined at:
  9400 ;;		line 71 in file "mcc_generated_files/ext_int.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  9403 ;;		 -> INT_DefaultInterruptHandler(1), 
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;		None
  9406 ;; Return value:  Size  Location     Type
  9407 ;;                  1    wreg      void 
  9408 ;; Registers used:
  9409 ;;		wreg
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9415 ;;      Params:         2       0       0       0       0       0       0       0
  9416 ;;      Locals:         0       0       0       0       0       0       0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0       0
  9418 ;;      Totals:         2       0       0       0       0       0       0       0
  9419 ;;Total ram usage:        2 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    4
  9422 ;; This function calls:
  9423 ;;		Nothing
  9424 ;; This function is called by:
  9425 ;;		_EXT_INT_Initialize
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _INT_SetInterruptHandler
  9431  0D89                     _INT_SetInterruptHandler:	
  9432  0D89                     l3211:	
  9433                           ;incstack = 0
  9434                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  9435                           
  9436                           
  9437                           ;mcc_generated_files/ext_int.c: 72:     INT_InterruptHandler = InterruptHandler;
  9438  0D89  0874               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  9439  0D8A  0021               	movlb	1	; select bank1
  9440  0D8B  00E3               	movwf	(_INT_InterruptHandler+1)^(0+128)
  9441  0D8C  0873               	movf	INT_SetInterruptHandler@InterruptHandler,w
  9442  0D8D  00E2               	movwf	_INT_InterruptHandler^(0+128)
  9443  0D8E                     l262:	
  9444  0D8E  0008               	return
  9445  0D8F                     __end_of_INT_SetInterruptHandler:	
  9446                           
  9447                           	psect	text42
  9448  0E8A                     __ptext42:	
  9449 ;; *************** function _EUSART_Initialize *****************
  9450 ;; Defined at:
  9451 ;;		line 66 in file "mcc_generated_files/eusart.c"
  9452 ;; Parameters:    Size  Location     Type
  9453 ;;		None
  9454 ;; Auto vars:     Size  Location     Type
  9455 ;;		None
  9456 ;; Return value:  Size  Location     Type
  9457 ;;                  1    wreg      void 
  9458 ;; Registers used:
  9459 ;;		wreg, status,2, status,0, pclath, cstack
  9460 ;; Tracked objects:
  9461 ;;		On entry : 0/0
  9462 ;;		On exit  : 0/0
  9463 ;;		Unchanged: 0/0
  9464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9465 ;;      Params:         0       0       0       0       0       0       0       0
  9466 ;;      Locals:         0       0       0       0       0       0       0       0
  9467 ;;      Temps:          0       0       0       0       0       0       0       0
  9468 ;;      Totals:         0       0       0       0       0       0       0       0
  9469 ;;Total ram usage:        0 bytes
  9470 ;; Hardware stack levels used:    1
  9471 ;; Hardware stack levels required when called:    5
  9472 ;; This function calls:
  9473 ;;		_EUSART_SetErrorHandler
  9474 ;;		_EUSART_SetFramingErrorHandler
  9475 ;;		_EUSART_SetOverrunErrorHandler
  9476 ;; This function is called by:
  9477 ;;		_SYSTEM_Initialize
  9478 ;; This function uses a non-reentrant model
  9479 ;;
  9480                           
  9481                           
  9482                           ;psect for function _EUSART_Initialize
  9483  0E8A                     _EUSART_Initialize:	
  9484  0E8A                     l3469:	
  9485                           ;incstack = 0
  9486                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9487                           
  9488                           
  9489                           ;mcc_generated_files/eusart.c: 71:     BAUD1CON = 0x08;
  9490  0E8A  3008               	movlw	8
  9491  0E8B  0023               	movlb	3	; select bank3
  9492  0E8C  009F               	movwf	31	;volatile
  9493                           
  9494                           ;mcc_generated_files/eusart.c: 74:     RC1STA = 0x90;
  9495  0E8D  3090               	movlw	144
  9496  0E8E  009D               	movwf	29	;volatile
  9497                           
  9498                           ;mcc_generated_files/eusart.c: 77:     TX1STA = 0x24;
  9499  0E8F  3024               	movlw	36
  9500  0E90  009E               	movwf	30	;volatile
  9501                           
  9502                           ;mcc_generated_files/eusart.c: 80:     SP1BRGL = 0x08;
  9503  0E91  3008               	movlw	8
  9504  0E92  009B               	movwf	27	;volatile
  9505  0E93                     l3471:	
  9506                           
  9507                           ;mcc_generated_files/eusart.c: 83:     SP1BRGH = 0x00;
  9508  0E93  019C               	clrf	28	;volatile
  9509  0E94                     l3473:	
  9510                           
  9511                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
  9512  0E94  3000               	movlw	0
  9513  0E95  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  9514  0E96  3000               	movlw	0
  9515  0E97  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  9516  0E98  318D  257D  318E   	fcall	_EUSART_SetFramingErrorHandler
  9517  0E9B                     l3475:	
  9518                           
  9519                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
  9520  0E9B  3000               	movlw	0
  9521  0E9C  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  9522  0E9D  3000               	movlw	0
  9523  0E9E  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  9524  0E9F  318D  2583  318E   	fcall	_EUSART_SetOverrunErrorHandler
  9525  0EA2                     l3477:	
  9526                           
  9527                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
  9528  0EA2  3000               	movlw	0
  9529  0EA3  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler
  9530  0EA4  3000               	movlw	0
  9531  0EA5  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  9532  0EA6  318D  2577  318E   	fcall	_EUSART_SetErrorHandler
  9533  0EA9                     l3479:	
  9534                           
  9535                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
  9536  0EA9  0021               	movlb	1	; select bank1
  9537  0EAA  01D7               	clrf	_eusartRxLastError^(0+128)	;volatile
  9538  0EAB                     l189:	
  9539  0EAB  0008               	return
  9540  0EAC                     __end_of_EUSART_Initialize:	
  9541                           
  9542                           	psect	text43
  9543  0D83                     __ptext43:	
  9544 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  9545 ;; Defined at:
  9546 ;;		line 170 in file "mcc_generated_files/eusart.c"
  9547 ;; Parameters:    Size  Location     Type
  9548 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  9549 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;		None
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  1    wreg      void 
  9554 ;; Registers used:
  9555 ;;		wreg
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9561 ;;      Params:         2       0       0       0       0       0       0       0
  9562 ;;      Locals:         0       0       0       0       0       0       0       0
  9563 ;;      Temps:          0       0       0       0       0       0       0       0
  9564 ;;      Totals:         2       0       0       0       0       0       0       0
  9565 ;;Total ram usage:        2 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    4
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_EUSART_Initialize
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           
  9576                           ;psect for function _EUSART_SetOverrunErrorHandler
  9577  0D83                     _EUSART_SetOverrunErrorHandler:	
  9578  0D83                     l3207:	
  9579                           ;incstack = 0
  9580                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  9581                           
  9582                           
  9583                           ;mcc_generated_files/eusart.c: 171:     EUSART_OverrunErrorHandler = interruptHandler;
  9584  0D83  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  9585  0D84  0021               	movlb	1	; select bank1
  9586  0D85  00E5               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  9587  0D86  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  9588  0D87  00E4               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  9589  0D88                     l237:	
  9590  0D88  0008               	return
  9591  0D89                     __end_of_EUSART_SetOverrunErrorHandler:	
  9592                           
  9593                           	psect	text44
  9594  0D7D                     __ptext44:	
  9595 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  9596 ;; Defined at:
  9597 ;;		line 166 in file "mcc_generated_files/eusart.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  9600 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  9601 ;; Auto vars:     Size  Location     Type
  9602 ;;		None
  9603 ;; Return value:  Size  Location     Type
  9604 ;;                  1    wreg      void 
  9605 ;; Registers used:
  9606 ;;		wreg
  9607 ;; Tracked objects:
  9608 ;;		On entry : 0/0
  9609 ;;		On exit  : 0/0
  9610 ;;		Unchanged: 0/0
  9611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9612 ;;      Params:         2       0       0       0       0       0       0       0
  9613 ;;      Locals:         0       0       0       0       0       0       0       0
  9614 ;;      Temps:          0       0       0       0       0       0       0       0
  9615 ;;      Totals:         2       0       0       0       0       0       0       0
  9616 ;;Total ram usage:        2 bytes
  9617 ;; Hardware stack levels used:    1
  9618 ;; Hardware stack levels required when called:    4
  9619 ;; This function calls:
  9620 ;;		Nothing
  9621 ;; This function is called by:
  9622 ;;		_EUSART_Initialize
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           
  9627                           ;psect for function _EUSART_SetFramingErrorHandler
  9628  0D7D                     _EUSART_SetFramingErrorHandler:	
  9629  0D7D                     l3205:	
  9630                           ;incstack = 0
  9631                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  9632                           
  9633                           
  9634                           ;mcc_generated_files/eusart.c: 167:     EUSART_FramingErrorHandler = interruptHandler;
  9635  0D7D  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  9636  0D7E  0021               	movlb	1	; select bank1
  9637  0D7F  00E7               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  9638  0D80  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  9639  0D81  00E6               	movwf	_EUSART_FramingErrorHandler^(0+128)
  9640  0D82                     l234:	
  9641  0D82  0008               	return
  9642  0D83                     __end_of_EUSART_SetFramingErrorHandler:	
  9643                           
  9644                           	psect	text45
  9645  0D77                     __ptext45:	
  9646 ;; *************** function _EUSART_SetErrorHandler *****************
  9647 ;; Defined at:
  9648 ;;		line 174 in file "mcc_generated_files/eusart.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  9651 ;;		 -> EUSART_DefaultErrorHandler(1), 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;		None
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  1    wreg      void 
  9656 ;; Registers used:
  9657 ;;		wreg
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9663 ;;      Params:         2       0       0       0       0       0       0       0
  9664 ;;      Locals:         0       0       0       0       0       0       0       0
  9665 ;;      Temps:          0       0       0       0       0       0       0       0
  9666 ;;      Totals:         2       0       0       0       0       0       0       0
  9667 ;;Total ram usage:        2 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    4
  9670 ;; This function calls:
  9671 ;;		Nothing
  9672 ;; This function is called by:
  9673 ;;		_EUSART_Initialize
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           
  9678                           ;psect for function _EUSART_SetErrorHandler
  9679  0D77                     _EUSART_SetErrorHandler:	
  9680  0D77                     l3209:	
  9681                           ;incstack = 0
  9682                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  9683                           
  9684                           
  9685                           ;mcc_generated_files/eusart.c: 175:     EUSART_ErrorHandler = interruptHandler;
  9686  0D77  0874               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  9687  0D78  0022               	movlb	2	; select bank2
  9688  0D79  00E2               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  9689  0D7A  0873               	movf	EUSART_SetErrorHandler@interruptHandler,w
  9690  0D7B  00E1               	movwf	_EUSART_ErrorHandler^(0+256)
  9691  0D7C                     l240:	
  9692  0D7C  0008               	return
  9693  0D7D                     __end_of_EUSART_SetErrorHandler:	
  9694                           
  9695                           	psect	text46
  9696  0D71                     __ptext46:	
  9697 ;; *************** function _DAC_Initialize *****************
  9698 ;; Defined at:
  9699 ;;		line 58 in file "mcc_generated_files/dac.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;		None
  9702 ;; Auto vars:     Size  Location     Type
  9703 ;;		None
  9704 ;; Return value:  Size  Location     Type
  9705 ;;                  1    wreg      void 
  9706 ;; Registers used:
  9707 ;;		wreg
  9708 ;; Tracked objects:
  9709 ;;		On entry : 0/0
  9710 ;;		On exit  : 0/0
  9711 ;;		Unchanged: 0/0
  9712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9713 ;;      Params:         0       0       0       0       0       0       0       0
  9714 ;;      Locals:         0       0       0       0       0       0       0       0
  9715 ;;      Temps:          0       0       0       0       0       0       0       0
  9716 ;;      Totals:         0       0       0       0       0       0       0       0
  9717 ;;Total ram usage:        0 bytes
  9718 ;; Hardware stack levels used:    1
  9719 ;; Hardware stack levels required when called:    4
  9720 ;; This function calls:
  9721 ;;		Nothing
  9722 ;; This function is called by:
  9723 ;;		_SYSTEM_Initialize
  9724 ;;		_main
  9725 ;; This function uses a non-reentrant model
  9726 ;;
  9727                           
  9728                           
  9729                           ;psect for function _DAC_Initialize
  9730  0D71                     _DAC_Initialize:	
  9731  0D71                     l3385:	
  9732                           ;incstack = 0
  9733                           ; Regs used in _DAC_Initialize: [wreg]
  9734                           
  9735                           
  9736                           ;mcc_generated_files/dac.c: 61:     DAC1CON0 = 0x80;
  9737  0D71  3080               	movlw	128
  9738  0D72  0022               	movlb	2	; select bank2
  9739  0D73  0098               	movwf	24	;volatile
  9740                           
  9741                           ;mcc_generated_files/dac.c: 63:     DAC1CON1 = 0xFF;
  9742  0D74  30FF               	movlw	255
  9743  0D75  0099               	movwf	25	;volatile
  9744  0D76                     l7:	
  9745  0D76  0008               	return
  9746  0D77                     __end_of_DAC_Initialize:	
  9747                           
  9748                           	psect	intentry
  9749  0004                     __pintentry:	
  9750 ;; *************** function _INTERRUPT_InterruptManager *****************
  9751 ;; Defined at:
  9752 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;		None
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;		None
  9757 ;; Return value:  Size  Location     Type
  9758 ;;                  1    wreg      void 
  9759 ;; Registers used:
  9760 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9761 ;; Tracked objects:
  9762 ;;		On entry : 0/0
  9763 ;;		On exit  : 0/0
  9764 ;;		Unchanged: 0/0
  9765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9766 ;;      Params:         0       0       0       0       0       0       0       0
  9767 ;;      Locals:         0       0       0       0       0       0       0       0
  9768 ;;      Temps:          0       0       0       0       0       0       0       0
  9769 ;;      Totals:         0       0       0       0       0       0       0       0
  9770 ;;Total ram usage:        0 bytes
  9771 ;; Hardware stack levels used:    1
  9772 ;; Hardware stack levels required when called:    3
  9773 ;; This function calls:
  9774 ;;		_INT_ISR
  9775 ;;		_PIN_MANAGER_IOC
  9776 ;;		_TMR0_ISR
  9777 ;;		_TMR4_ISR
  9778 ;; This function is called by:
  9779 ;;		Interrupt level 1
  9780 ;; This function uses a non-reentrant model
  9781 ;;
  9782                           
  9783  0004                     _INTERRUPT_InterruptManager:	
  9784                           
  9785                           ;incstack = 0
  9786  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  9787                           
  9788                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9789  0005  3180               	pagesel	$
  9790  0006                     i1l2999:	
  9791                           
  9792                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  9793  0006  1E8B               	btfss	11,5	;volatile
  9794  0007  2809               	goto	u165_21
  9795  0008  280A               	goto	u165_20
  9796  0009                     u165_21:	
  9797  0009  2812               	goto	i1l136
  9798  000A                     u165_20:	
  9799  000A                     i1l3001:	
  9800  000A  1D0B               	btfss	11,2	;volatile
  9801  000B  280D               	goto	u166_21
  9802  000C  280E               	goto	u166_20
  9803  000D                     u166_21:	
  9804  000D  2812               	goto	i1l136
  9805  000E                     u166_20:	
  9806  000E                     i1l3003:	
  9807                           
  9808                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  9809  000E  318D  25EF  3180   	fcall	_TMR0_ISR
  9810                           
  9811                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  9812  0011  283C               	goto	i1l146
  9813  0012                     i1l136:	
  9814                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.INTE == 1 && INTCON
      +                          bits.INTF == 1)
  9815                           
  9816  0012  1E0B               	btfss	11,4	;volatile
  9817  0013  2815               	goto	u167_21
  9818  0014  2816               	goto	u167_20
  9819  0015                     u167_21:	
  9820  0015  281E               	goto	i1l138
  9821  0016                     u167_20:	
  9822  0016                     i1l3005:	
  9823  0016  1C8B               	btfss	11,1	;volatile
  9824  0017  2819               	goto	u168_21
  9825  0018  281A               	goto	u168_20
  9826  0019                     u168_21:	
  9827  0019  281E               	goto	i1l138
  9828  001A                     u168_20:	
  9829  001A                     i1l3007:	
  9830                           
  9831                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         INT_ISR();
  9832  001A  318D  2562  3180   	fcall	_INT_ISR
  9833                           
  9834                           ;mcc_generated_files/interrupt_manager.c: 62:     }
  9835  001D  283C               	goto	i1l146
  9836  001E                     i1l138:	
  9837                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.IOCIE == 1 && INTCO
      +                          Nbits.IOCIF == 1)
  9838                           
  9839  001E  1D8B               	btfss	11,3	;volatile
  9840  001F  2821               	goto	u169_21
  9841  0020  2822               	goto	u169_20
  9842  0021                     u169_21:	
  9843  0021  282A               	goto	i1l140
  9844  0022                     u169_20:	
  9845  0022                     i1l3009:	
  9846  0022  1C0B               	btfss	11,0	;volatile
  9847  0023  2825               	goto	u170_21
  9848  0024  2826               	goto	u170_20
  9849  0025                     u170_21:	
  9850  0025  282A               	goto	i1l140
  9851  0026                     u170_20:	
  9852  0026                     i1l3011:	
  9853                           
  9854                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         PIN_MANAGER_IOC();
  9855  0026  318D  2555  3180   	fcall	_PIN_MANAGER_IOC
  9856                           
  9857                           ;mcc_generated_files/interrupt_manager.c: 66:     }
  9858  0029  283C               	goto	i1l146
  9859  002A                     i1l140:	
  9860                           ;mcc_generated_files/interrupt_manager.c: 67:     else if(INTCONbits.PEIE == 1)
  9861                           
  9862  002A  1F0B               	btfss	11,6	;volatile
  9863  002B  282D               	goto	u171_21
  9864  002C  282E               	goto	u171_20
  9865  002D                     u171_21:	
  9866  002D  283C               	goto	i1l141
  9867  002E                     u171_20:	
  9868  002E                     i1l3013:	
  9869                           
  9870                           ;mcc_generated_files/interrupt_manager.c: 68:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 69:         if(PIE2bits.TMR4IE == 1 && PIR2bits.TMR4IF == 1)
  9871  002E  0021               	movlb	1	; select bank1
  9872  002F  1C92               	btfss	18,1	;volatile
  9873  0030  2832               	goto	u172_21
  9874  0031  2833               	goto	u172_20
  9875  0032                     u172_21:	
  9876  0032  283C               	goto	i1l141
  9877  0033                     u172_20:	
  9878  0033                     i1l3015:	
  9879  0033  0020               	movlb	0	; select bank0
  9880  0034  1C92               	btfss	18,1	;volatile
  9881  0035  2837               	goto	u173_21
  9882  0036  2838               	goto	u173_20
  9883  0037                     u173_21:	
  9884  0037  283C               	goto	i1l141
  9885  0038                     u173_20:	
  9886  0038                     i1l3017:	
  9887                           
  9888                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             TMR4_ISR();
  9889  0038  318D  25E0  3180   	fcall	_TMR4_ISR
  9890                           
  9891                           ;mcc_generated_files/interrupt_manager.c: 72:         }
  9892  003B  283C               	goto	i1l146
  9893  003C                     i1l141:	
  9894  003C                     i1l146:	
  9895  003C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  9896  003D  0009               	retfie
  9897  003E                     __end_of_INTERRUPT_InterruptManager:	
  9898                           
  9899                           	psect	text48
  9900  0DE0                     __ptext48:	
  9901 ;; *************** function _TMR4_ISR *****************
  9902 ;; Defined at:
  9903 ;;		line 120 in file "mcc_generated_files/tmr4.c"
  9904 ;; Parameters:    Size  Location     Type
  9905 ;;		None
  9906 ;; Auto vars:     Size  Location     Type
  9907 ;;		None
  9908 ;; Return value:  Size  Location     Type
  9909 ;;                  1    wreg      void 
  9910 ;; Registers used:
  9911 ;;		wreg, status,2, status,0, pclath, cstack
  9912 ;; Tracked objects:
  9913 ;;		On entry : 0/0
  9914 ;;		On exit  : 0/0
  9915 ;;		Unchanged: 0/0
  9916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9917 ;;      Params:         0       0       0       0       0       0       0       0
  9918 ;;      Locals:         0       0       0       0       0       0       0       0
  9919 ;;      Temps:          0       0       0       0       0       0       0       0
  9920 ;;      Totals:         0       0       0       0       0       0       0       0
  9921 ;;Total ram usage:        0 bytes
  9922 ;; Hardware stack levels used:    1
  9923 ;; Hardware stack levels required when called:    2
  9924 ;; This function calls:
  9925 ;;		Absolute function
  9926 ;;		_TMR4_DefaultInterruptHandler
  9927 ;; This function is called by:
  9928 ;;		_INTERRUPT_InterruptManager
  9929 ;; This function uses a non-reentrant model
  9930 ;;
  9931                           
  9932                           
  9933                           ;psect for function _TMR4_ISR
  9934  0DE0                     _TMR4_ISR:	
  9935  0DE0                     i1l2809:	
  9936                           ;incstack = 0
  9937                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
  9938                           
  9939                           
  9940                           ;mcc_generated_files/tmr4.c: 124:     PIR2bits.TMR4IF = 0;
  9941  0DE0  0020               	movlb	0	; select bank0
  9942  0DE1  1092               	bcf	18,1	;volatile
  9943  0DE2                     i1l2811:	
  9944                           
  9945                           ;mcc_generated_files/tmr4.c: 126:     if(TMR4_InterruptHandler)
  9946  0DE2  0021               	movlb	1	; select bank1
  9947  0DE3  085E               	movf	_TMR4_InterruptHandler^(0+128),w
  9948  0DE4  045F               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
  9949  0DE5  1903               	btfsc	3,2
  9950  0DE6  2DE8               	goto	u149_21
  9951  0DE7  2DE9               	goto	u149_20
  9952  0DE8                     u149_21:	
  9953  0DE8  2DEE               	goto	i1l402
  9954  0DE9                     u149_20:	
  9955  0DE9                     i1l2813:	
  9956                           
  9957                           ;mcc_generated_files/tmr4.c: 127:     {;mcc_generated_files/tmr4.c: 128:         TMR4_In
      +                          terruptHandler();
  9958  0DE9  085F               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
  9959  0DEA  008A               	movwf	10
  9960  0DEB  085E               	movf	_TMR4_InterruptHandler^(0+128),w
  9961  0DEC  000A               	callw
  9962  0DED  318D               	pagesel	$
  9963  0DEE                     i1l402:	
  9964  0DEE  0008               	return
  9965  0DEF                     __end_of_TMR4_ISR:	
  9966                           
  9967                           	psect	text49
  9968  07E3                     __ptext49:	
  9969 ;; *************** function _TMR4_DefaultInterruptHandler *****************
  9970 ;; Defined at:
  9971 ;;		line 145 in file "mcc_generated_files/tmr4.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;		None
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;		None
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  1    wreg      void 
  9978 ;; Registers used:
  9979 ;;		wreg, status,2, status,0, pclath, cstack
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9985 ;;      Params:         0       0       0       0       0       0       0       0
  9986 ;;      Locals:         0       0       0       0       0       0       0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0
  9988 ;;      Totals:         0       0       0       0       0       0       0       0
  9989 ;;Total ram usage:        0 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    1
  9992 ;; This function calls:
  9993 ;;		_DAC_SetOutput
  9994 ;; This function is called by:
  9995 ;;		_TMR4_Initialize
  9996 ;;		_TMR4_ISR
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           
 10001                           ;psect for function _TMR4_DefaultInterruptHandler
 10002  07E3                     _TMR4_DefaultInterruptHandler:	
 10003  07E3                     i1l2663:	
 10004                           ;incstack = 0
 10005                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 10006                           
 10007                           
 10008                           ;mcc_generated_files/tmr4.c: 151:   if (currentIsOn){
 10009  07E3  0021               	movlb	1	; select bank1
 10010  07E4  0824               	movf	_currentIsOn^(0+128),w
 10011  07E5  1903               	btfsc	3,2
 10012  07E6  2FE8               	goto	u137_21
 10013  07E7  2FE9               	goto	u137_20
 10014  07E8                     u137_21:	
 10015  07E8  2FF9               	goto	i1l410
 10016  07E9                     u137_20:	
 10017  07E9                     i1l2665:	
 10018                           
 10019                           ;mcc_generated_files/tmr4.c: 152:     currentIsOn = 0;
 10020  07E9  01A4               	clrf	_currentIsOn^(0+128)
 10021  07EA                     i1l2667:	
 10022                           
 10023                           ;mcc_generated_files/tmr4.c: 153:     if (dc_frequency_flag){
 10024  07EA  087A               	movf	_dc_frequency_flag,w
 10025  07EB  1903               	btfsc	3,2
 10026  07EC  2FEE               	goto	u138_21
 10027  07ED  2FEF               	goto	u138_20
 10028  07EE                     u138_21:	
 10029  07EE  2FF4               	goto	i1l2671
 10030  07EF                     u138_20:	
 10031  07EF                     i1l2669:	
 10032                           
 10033                           ;mcc_generated_files/tmr4.c: 155:       DAC_SetOutput(dac_value);
 10034  07EF  0856               	movf	_dac_value^(0+128),w
 10035  07F0  318D  2567  3187   	fcall	_DAC_SetOutput
 10036                           
 10037                           ;mcc_generated_files/tmr4.c: 156:     } else {
 10038  07F3  2FFF               	goto	i1l414
 10039  07F4                     i1l2671:	
 10040                           
 10041                           ;mcc_generated_files/tmr4.c: 158:       DAC_SetOutput(255);
 10042  07F4  30FF               	movlw	255
 10043  07F5  318D  2567  3187   	fcall	_DAC_SetOutput
 10044  07F8  2FFF               	goto	i1l414
 10045  07F9                     i1l410:	
 10046                           
 10047                           ;mcc_generated_files/tmr4.c: 161:     currentIsOn = 1;
 10048  07F9  01A4               	clrf	_currentIsOn^(0+128)
 10049  07FA  0AA4               	incf	_currentIsOn^(0+128),f
 10050  07FB                     i1l2673:	
 10051                           
 10052                           ;mcc_generated_files/tmr4.c: 162:     DAC_SetOutput(dac_value);
 10053  07FB  0856               	movf	_dac_value^(0+128),w
 10054  07FC  318D  2567  3187   	fcall	_DAC_SetOutput
 10055  07FF                     i1l414:	
 10056  07FF  0008               	return
 10057  0800                     __end_of_TMR4_DefaultInterruptHandler:	
 10058                           
 10059                           	psect	text50
 10060  0D67                     __ptext50:	
 10061 ;; *************** function _DAC_SetOutput *****************
 10062 ;; Defined at:
 10063 ;;		line 66 in file "mcc_generated_files/dac.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;  inputData       1    wreg     unsigned char 
 10066 ;; Auto vars:     Size  Location     Type
 10067 ;;  inputData       1    0[COMMON] unsigned char 
 10068 ;; Return value:  Size  Location     Type
 10069 ;;                  1    wreg      void 
 10070 ;; Registers used:
 10071 ;;		wreg
 10072 ;; Tracked objects:
 10073 ;;		On entry : 0/0
 10074 ;;		On exit  : 0/0
 10075 ;;		Unchanged: 0/0
 10076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10077 ;;      Params:         0       0       0       0       0       0       0       0
 10078 ;;      Locals:         1       0       0       0       0       0       0       0
 10079 ;;      Temps:          0       0       0       0       0       0       0       0
 10080 ;;      Totals:         1       0       0       0       0       0       0       0
 10081 ;;Total ram usage:        1 bytes
 10082 ;; Hardware stack levels used:    1
 10083 ;; This function calls:
 10084 ;;		Nothing
 10085 ;; This function is called by:
 10086 ;;		_TMR4_DefaultInterruptHandler
 10087 ;; This function uses a non-reentrant model
 10088 ;;
 10089                           
 10090                           
 10091                           ;psect for function _DAC_SetOutput
 10092  0D67                     _DAC_SetOutput:	
 10093                           
 10094                           ;incstack = 0
 10095                           ; Regs used in _DAC_SetOutput: [wreg]
 10096                           ;DAC_SetOutput@inputData stored from wreg
 10097  0D67  00F0               	movwf	DAC_SetOutput@inputData
 10098  0D68                     i1l2327:	
 10099                           
 10100                           ;mcc_generated_files/dac.c: 66: void DAC_SetOutput(uint8_t inputData);mcc_generated_file
      +                          s/dac.c: 67: {;mcc_generated_files/dac.c: 68:     DAC1CON1 = inputData;
 10101  0D68  0870               	movf	DAC_SetOutput@inputData,w
 10102  0D69  0022               	movlb	2	; select bank2
 10103  0D6A  0099               	movwf	25	;volatile
 10104  0D6B                     i1l10:	
 10105  0D6B  0008               	return
 10106  0D6C                     __end_of_DAC_SetOutput:	
 10107                           
 10108                           	psect	text51
 10109  0DEF                     __ptext51:	
 10110 ;; *************** function _TMR0_ISR *****************
 10111 ;; Defined at:
 10112 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;		None
 10115 ;; Auto vars:     Size  Location     Type
 10116 ;;		None
 10117 ;; Return value:  Size  Location     Type
 10118 ;;                  1    wreg      void 
 10119 ;; Registers used:
 10120 ;;		wreg, status,2, status,0, pclath, cstack
 10121 ;; Tracked objects:
 10122 ;;		On entry : 0/0
 10123 ;;		On exit  : 0/0
 10124 ;;		Unchanged: 0/0
 10125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10126 ;;      Params:         0       0       0       0       0       0       0       0
 10127 ;;      Locals:         0       0       0       0       0       0       0       0
 10128 ;;      Temps:          0       0       0       0       0       0       0       0
 10129 ;;      Totals:         0       0       0       0       0       0       0       0
 10130 ;;Total ram usage:        0 bytes
 10131 ;; Hardware stack levels used:    1
 10132 ;; Hardware stack levels required when called:    1
 10133 ;; This function calls:
 10134 ;;		Absolute function
 10135 ;;		_TMR0_DefaultInterruptHandler
 10136 ;; This function is called by:
 10137 ;;		_INTERRUPT_InterruptManager
 10138 ;; This function uses a non-reentrant model
 10139 ;;
 10140                           
 10141                           
 10142                           ;psect for function _TMR0_ISR
 10143  0DEF                     _TMR0_ISR:	
 10144  0DEF                     i1l2797:	
 10145                           ;incstack = 0
 10146                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 10147                           
 10148                           
 10149                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 10150  0DEF  110B               	bcf	11,2	;volatile
 10151  0DF0                     i1l2799:	
 10152                           
 10153                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 10154  0DF0  0879               	movf	_timer0ReloadVal,w	;volatile
 10155  0DF1  0020               	movlb	0	; select bank0
 10156  0DF2  0095               	movwf	21	;volatile
 10157  0DF3                     i1l2801:	
 10158                           
 10159                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
 10160  0DF3  0021               	movlb	1	; select bank1
 10161  0DF4  0860               	movf	_TMR0_InterruptHandler^(0+128),w
 10162  0DF5  0461               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 10163  0DF6  1903               	btfsc	3,2
 10164  0DF7  2DF9               	goto	u148_21
 10165  0DF8  2DFA               	goto	u148_20
 10166  0DF9                     u148_21:	
 10167  0DF9  2DFF               	goto	i1l350
 10168  0DFA                     u148_20:	
 10169  0DFA                     i1l2803:	
 10170                           
 10171                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
 10172  0DFA  0861               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 10173  0DFB  008A               	movwf	10
 10174  0DFC  0860               	movf	_TMR0_InterruptHandler^(0+128),w
 10175  0DFD  000A               	callw
 10176  0DFE  318D               	pagesel	$
 10177  0DFF                     i1l350:	
 10178  0DFF  0008               	return
 10179  0E00                     __end_of_TMR0_ISR:	
 10180                           
 10181                           	psect	text52
 10182  0002                     __ptext52:	
 10183 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 10184 ;; Defined at:
 10185 ;;		line 129 in file "mcc_generated_files/tmr0.c"
 10186 ;; Parameters:    Size  Location     Type
 10187 ;;		None
 10188 ;; Auto vars:     Size  Location     Type
 10189 ;;		None
 10190 ;; Return value:  Size  Location     Type
 10191 ;;                  1    wreg      void 
 10192 ;; Registers used:
 10193 ;;		None
 10194 ;; Tracked objects:
 10195 ;;		On entry : 0/0
 10196 ;;		On exit  : 0/0
 10197 ;;		Unchanged: 0/0
 10198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10199 ;;      Params:         0       0       0       0       0       0       0       0
 10200 ;;      Locals:         0       0       0       0       0       0       0       0
 10201 ;;      Temps:          0       0       0       0       0       0       0       0
 10202 ;;      Totals:         0       0       0       0       0       0       0       0
 10203 ;;Total ram usage:        0 bytes
 10204 ;; Hardware stack levels used:    1
 10205 ;; This function calls:
 10206 ;;		Nothing
 10207 ;; This function is called by:
 10208 ;;		_TMR0_Initialize
 10209 ;;		_TMR0_ISR
 10210 ;; This function uses a non-reentrant model
 10211 ;;
 10212                           
 10213                           
 10214                           ;psect for function _TMR0_DefaultInterruptHandler
 10215  0002                     _TMR0_DefaultInterruptHandler:	
 10216  0002                     i1l356:	
 10217                           ;incstack = 0
 10218                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 10219                           
 10220  0002  0008               	return
 10221  0003                     __end_of_TMR0_DefaultInterruptHandler:	
 10222                           
 10223                           	psect	text53
 10224  0D55                     __ptext53:	
 10225 ;; *************** function _PIN_MANAGER_IOC *****************
 10226 ;; Defined at:
 10227 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;		None
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;		None
 10232 ;; Return value:  Size  Location     Type
 10233 ;;                  1    wreg      void 
 10234 ;; Registers used:
 10235 ;;		None
 10236 ;; Tracked objects:
 10237 ;;		On entry : 0/0
 10238 ;;		On exit  : 0/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10241 ;;      Params:         0       0       0       0       0       0       0       0
 10242 ;;      Locals:         0       0       0       0       0       0       0       0
 10243 ;;      Temps:          0       0       0       0       0       0       0       0
 10244 ;;      Totals:         0       0       0       0       0       0       0       0
 10245 ;;Total ram usage:        0 bytes
 10246 ;; Hardware stack levels used:    1
 10247 ;; This function calls:
 10248 ;;		Nothing
 10249 ;; This function is called by:
 10250 ;;		_INTERRUPT_InterruptManager
 10251 ;; This function uses a non-reentrant model
 10252 ;;
 10253                           
 10254                           
 10255                           ;psect for function _PIN_MANAGER_IOC
 10256  0D55                     _PIN_MANAGER_IOC:	
 10257  0D55                     i1l112:	
 10258                           ;incstack = 0
 10259                           ; Regs used in _PIN_MANAGER_IOC: []
 10260                           
 10261  0D55  0008               	return
 10262  0D56                     __end_of_PIN_MANAGER_IOC:	
 10263                           
 10264                           	psect	text54
 10265  0D62                     __ptext54:	
 10266 ;; *************** function _INT_ISR *****************
 10267 ;; Defined at:
 10268 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 10269 ;; Parameters:    Size  Location     Type
 10270 ;;		None
 10271 ;; Auto vars:     Size  Location     Type
 10272 ;;		None
 10273 ;; Return value:  Size  Location     Type
 10274 ;;                  1    wreg      void 
 10275 ;; Registers used:
 10276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10277 ;; Tracked objects:
 10278 ;;		On entry : 0/0
 10279 ;;		On exit  : 0/0
 10280 ;;		Unchanged: 0/0
 10281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10282 ;;      Params:         0       0       0       0       0       0       0       0
 10283 ;;      Locals:         0       0       0       0       0       0       0       0
 10284 ;;      Temps:          0       0       0       0       0       0       0       0
 10285 ;;      Totals:         0       0       0       0       0       0       0       0
 10286 ;;Total ram usage:        0 bytes
 10287 ;; Hardware stack levels used:    1
 10288 ;; Hardware stack levels required when called:    2
 10289 ;; This function calls:
 10290 ;;		_INT_CallBack
 10291 ;; This function is called by:
 10292 ;;		_INTERRUPT_InterruptManager
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           
 10297                           ;psect for function _INT_ISR
 10298  0D62                     _INT_ISR:	
 10299  0D62                     i1l2805:	
 10300                           ;incstack = 0
 10301                           ; Regs used in _INT_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10302                           
 10303                           
 10304                           ;mcc_generated_files/ext_int.c: 56:     (INTCONbits.INTF = 0);
 10305  0D62  108B               	bcf	11,1	;volatile
 10306  0D63                     i1l2807:	
 10307                           
 10308                           ;mcc_generated_files/ext_int.c: 59:     INT_CallBack();
 10309  0D63  318D  25D3  318D   	fcall	_INT_CallBack
 10310  0D66                     i1l255:	
 10311  0D66  0008               	return
 10312  0D67                     __end_of_INT_ISR:	
 10313                           
 10314                           	psect	text55
 10315  0DD3                     __ptext55:	
 10316 ;; *************** function _INT_CallBack *****************
 10317 ;; Defined at:
 10318 ;;		line 62 in file "mcc_generated_files/ext_int.c"
 10319 ;; Parameters:    Size  Location     Type
 10320 ;;		None
 10321 ;; Auto vars:     Size  Location     Type
 10322 ;;		None
 10323 ;; Return value:  Size  Location     Type
 10324 ;;                  1    wreg      void 
 10325 ;; Registers used:
 10326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10327 ;; Tracked objects:
 10328 ;;		On entry : 0/0
 10329 ;;		On exit  : 0/0
 10330 ;;		Unchanged: 0/0
 10331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10332 ;;      Params:         0       0       0       0       0       0       0       0
 10333 ;;      Locals:         0       0       0       0       0       0       0       0
 10334 ;;      Temps:          0       0       0       0       0       0       0       0
 10335 ;;      Totals:         0       0       0       0       0       0       0       0
 10336 ;;Total ram usage:        0 bytes
 10337 ;; Hardware stack levels used:    1
 10338 ;; Hardware stack levels required when called:    1
 10339 ;; This function calls:
 10340 ;;		Absolute function
 10341 ;;		_INT_DefaultInterruptHandler
 10342 ;; This function is called by:
 10343 ;;		_INT_ISR
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           
 10348                           ;psect for function _INT_CallBack
 10349  0DD3                     _INT_CallBack:	
 10350  0DD3                     i1l2659:	
 10351                           ;incstack = 0
 10352                           ; Regs used in _INT_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10353                           
 10354                           
 10355                           ;mcc_generated_files/ext_int.c: 65:     if(INT_InterruptHandler)
 10356  0DD3  0021               	movlb	1	; select bank1
 10357  0DD4  0862               	movf	_INT_InterruptHandler^(0+128),w
 10358  0DD5  0463               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 10359  0DD6  1903               	btfsc	3,2
 10360  0DD7  2DD9               	goto	u136_21
 10361  0DD8  2DDA               	goto	u136_20
 10362  0DD9                     u136_21:	
 10363  0DD9  2DDF               	goto	i1l259
 10364  0DDA                     u136_20:	
 10365  0DDA                     i1l2661:	
 10366                           
 10367                           ;mcc_generated_files/ext_int.c: 66:     {;mcc_generated_files/ext_int.c: 67:         INT
      +                          _InterruptHandler();
 10368  0DDA  0863               	movf	(_INT_InterruptHandler+1)^(0+128),w
 10369  0DDB  008A               	movwf	10
 10370  0DDC  0862               	movf	_INT_InterruptHandler^(0+128),w
 10371  0DDD  000A               	callw
 10372  0DDE  318D               	pagesel	$
 10373  0DDF                     i1l259:	
 10374  0DDF  0008               	return
 10375  0DE0                     __end_of_INT_CallBack:	
 10376                           
 10377                           	psect	text56
 10378  046F                     __ptext56:	
 10379 ;; *************** function _INT_DefaultInterruptHandler *****************
 10380 ;; Defined at:
 10381 ;;		line 75 in file "mcc_generated_files/ext_int.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;		None
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;  time            1    2[COMMON] unsigned char 
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      void 
 10388 ;; Registers used:
 10389 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10395 ;;      Params:         0       0       0       0       0       0       0       0
 10396 ;;      Locals:         1       0       0       0       0       0       0       0
 10397 ;;      Temps:          2       0       0       0       0       0       0       0
 10398 ;;      Totals:         3       0       0       0       0       0       0       0
 10399 ;;Total ram usage:        3 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; This function calls:
 10402 ;;		Nothing
 10403 ;; This function is called by:
 10404 ;;		_EXT_INT_Initialize
 10405 ;;		_INT_CallBack
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           
 10410                           ;psect for function _INT_DefaultInterruptHandler
 10411  046F                     _INT_DefaultInterruptHandler:	
 10412  046F                     i1l2337:	
 10413                           ;incstack = 0
 10414                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr0h+status,2+status,0]
 10415                           
 10416                           
 10417                           ;mcc_generated_files/ext_int.c: 77:   uint8_t time = TMR0;
 10418  046F  0020               	movlb	0	; select bank0
 10419  0470  0815               	movf	21,w	;volatile
 10420  0471  00F0               	movwf	??_INT_DefaultInterruptHandler
 10421  0472  0870               	movf	??_INT_DefaultInterruptHandler,w
 10422  0473  00F2               	movwf	INT_DefaultInterruptHandler@time
 10423  0474                     i1l2339:	
 10424                           
 10425                           ;mcc_generated_files/ext_int.c: 78:   TMR0 = 0;
 10426  0474  0195               	clrf	21	;volatile
 10427  0475                     i1l2341:	
 10428                           
 10429                           ;mcc_generated_files/ext_int.c: 81:   if (INTCONbits.TMR0IF){
 10430  0475  1D0B               	btfss	11,2	;volatile
 10431  0476  2C78               	goto	u98_21
 10432  0477  2C79               	goto	u98_20
 10433  0478                     u98_21:	
 10434  0478  2C7A               	goto	i1l2345
 10435  0479                     u98_20:	
 10436  0479                     i1l2343:	
 10437                           
 10438                           ;mcc_generated_files/ext_int.c: 82:     time = 0;
 10439  0479  01F2               	clrf	INT_DefaultInterruptHandler@time
 10440  047A                     i1l2345:	
 10441                           
 10442                           ;mcc_generated_files/ext_int.c: 84:   INTCONbits.TMR0IF = 0;
 10443  047A  110B               	bcf	11,2	;volatile
 10444                           
 10445                           ;mcc_generated_files/ext_int.c: 86:   switch(ir_code.state){
 10446  047B  2CC5               	goto	i1l2383
 10447  047C                     i1l2347:	
 10448                           
 10449                           ;mcc_generated_files/ext_int.c: 89:     if (time >= 180 && time <= 243){
 10450  047C  30B4               	movlw	180
 10451  047D  0272               	subwf	INT_DefaultInterruptHandler@time,w
 10452  047E  1C03               	skipc
 10453  047F  2C81               	goto	u99_21
 10454  0480  2C82               	goto	u99_20
 10455  0481                     u99_21:	
 10456  0481  2CD9               	goto	i1l269
 10457  0482                     u99_20:	
 10458  0482                     i1l2349:	
 10459  0482  30F4               	movlw	244
 10460  0483  0272               	subwf	INT_DefaultInterruptHandler@time,w
 10461  0484  1803               	skipnc
 10462  0485  2C87               	goto	u100_21
 10463  0486  2C88               	goto	u100_20
 10464  0487                     u100_21:	
 10465  0487  2CD9               	goto	i1l269
 10466  0488                     u100_20:	
 10467  0488                     i1l2351:	
 10468                           
 10469                           ;mcc_generated_files/ext_int.c: 90:       ir_code.n_bits = 0;
 10470  0488  01D8               	clrf	_ir_code^(0+128)
 10471  0489                     i1l2353:	
 10472                           
 10473                           ;mcc_generated_files/ext_int.c: 91:       ir_code.state = STATE_RECEIVING;
 10474  0489  01D9               	clrf	(_ir_code^(0+128)+1)
 10475  048A  0AD9               	incf	(_ir_code^(0+128)+1),f
 10476  048B  2CD9               	goto	i1l269
 10477  048C                     i1l2355:	
 10478                           
 10479                           ;mcc_generated_files/ext_int.c: 99:     ir_code.code <<= 1;
 10480  048C  3001               	movlw	1
 10481  048D                     u101_25:	
 10482  048D  35DA               	lslf	(_ir_code^(0+128)+2),f
 10483  048E  0DDB               	rlf	((_ir_code+1)^(0+128)+2),f
 10484  048F  0DDC               	rlf	((_ir_code+2)^(0+128)+2),f
 10485  0490  0DDD               	rlf	((_ir_code+3)^(0+128)+2),f
 10486  0491  0B89               	decfsz	9,f
 10487  0492  2C8D               	goto	u101_25
 10488  0493                     i1l2357:	
 10489                           
 10490                           ;mcc_generated_files/ext_int.c: 100:     if (time >= 29 && time <= 41){
 10491  0493  301D               	movlw	29
 10492  0494  0272               	subwf	INT_DefaultInterruptHandler@time,w
 10493  0495  1C03               	skipc
 10494  0496  2C98               	goto	u102_21
 10495  0497  2C99               	goto	u102_20
 10496  0498                     u102_21:	
 10497  0498  2CA5               	goto	i1l2365
 10498  0499                     u102_20:	
 10499  0499                     i1l2359:	
 10500  0499  302A               	movlw	42
 10501  049A  0272               	subwf	INT_DefaultInterruptHandler@time,w
 10502  049B  1803               	skipnc
 10503  049C  2C9E               	goto	u103_21
 10504  049D  2C9F               	goto	u103_20
 10505  049E                     u103_21:	
 10506  049E  2CA5               	goto	i1l2365
 10507  049F                     u103_20:	
 10508  049F                     i1l2361:	
 10509                           
 10510                           ;mcc_generated_files/ext_int.c: 104:       ir_code.code |= 1;
 10511  049F  145A               	bsf	(_ir_code^(0+128)+2),0
 10512  04A0                     i1l2363:	
 10513                           
 10514                           ;mcc_generated_files/ext_int.c: 105:       ir_code.n_bits++;
 10515  04A0  3001               	movlw	1
 10516  04A1  00F0               	movwf	??_INT_DefaultInterruptHandler
 10517  04A2  0870               	movf	??_INT_DefaultInterruptHandler,w
 10518  04A3  07D8               	addwf	_ir_code^(0+128),f
 10519                           
 10520                           ;mcc_generated_files/ext_int.c: 106:     } else if (time >= 14 && time <= 20){
 10521  04A4  2CB4               	goto	i1l2373
 10522  04A5                     i1l2365:	
 10523  04A5  300E               	movlw	14
 10524  04A6  0272               	subwf	INT_DefaultInterruptHandler@time,w
 10525  04A7  1C03               	skipc
 10526  04A8  2CAA               	goto	u104_21
 10527  04A9  2CAB               	goto	u104_20
 10528  04AA                     u104_21:	
 10529  04AA  2CB2               	goto	i1l2371
 10530  04AB                     u104_20:	
 10531  04AB                     i1l2367:	
 10532  04AB  3015               	movlw	21
 10533  04AC  0272               	subwf	INT_DefaultInterruptHandler@time,w
 10534  04AD  1803               	skipnc
 10535  04AE  2CB0               	goto	u105_21
 10536  04AF  2CB1               	goto	u105_20
 10537  04B0                     u105_21:	
 10538  04B0  2CB2               	goto	i1l2371
 10539  04B1                     u105_20:	
 10540  04B1  2CA0               	goto	i1l2363
 10541  04B2                     i1l2371:	
 10542                           
 10543                           ;mcc_generated_files/ext_int.c: 113:       ir_code.state = STATE_RESET;
 10544  04B2  01D9               	clrf	(_ir_code^(0+128)+1)
 10545                           
 10546                           ;mcc_generated_files/ext_int.c: 114:       break;
 10547  04B3  2CD9               	goto	i1l269
 10548  04B4                     i1l2373:	
 10549                           
 10550                           ;mcc_generated_files/ext_int.c: 116:     if (32 == ir_code.n_bits){
 10551  04B4  3020               	movlw	32
 10552  04B5  0658               	xorwf	_ir_code^(0+128),w
 10553  04B6  1D03               	btfss	3,2
 10554  04B7  2CB9               	goto	u106_21
 10555  04B8  2CBA               	goto	u106_20
 10556  04B9                     u106_21:	
 10557  04B9  2CD9               	goto	i1l269
 10558  04BA                     u106_20:	
 10559  04BA                     i1l2375:	
 10560                           
 10561                           ;mcc_generated_files/ext_int.c: 119:       if (ir_code.command == ((~ir_code.command_b) 
      +                          & 0xff)){
 10562  04BA  095A               	comf	(_ir_code^(0+128)+2),w
 10563  04BB  065B               	xorwf	(_ir_code^(0+128)+3),w
 10564  04BC  1D03               	skipz
 10565  04BD  2CBF               	goto	u107_21
 10566  04BE  2CC0               	goto	u107_20
 10567  04BF                     u107_21:	
 10568  04BF  2CB2               	goto	i1l2371
 10569  04C0                     u107_20:	
 10570  04C0                     i1l2377:	
 10571                           
 10572                           ;mcc_generated_files/ext_int.c: 120:         ir_code.state = STATE_DONE;
 10573  04C0  3002               	movlw	2
 10574  04C1  00F0               	movwf	??_INT_DefaultInterruptHandler
 10575  04C2  0870               	movf	??_INT_DefaultInterruptHandler,w
 10576  04C3  00D9               	movwf	(_ir_code^(0+128)+1)
 10577                           
 10578                           ;mcc_generated_files/ext_int.c: 121:       } else {
 10579  04C4  2CD9               	goto	i1l269
 10580  04C5                     i1l2383:	
 10581  04C5  0021               	movlb	1	; select bank1
 10582  04C6  0859               	movf	(_ir_code^(0+128)+1),w
 10583  04C7  00F0               	movwf	??_INT_DefaultInterruptHandler
 10584  04C8  01F1               	clrf	??_INT_DefaultInterruptHandler+1
 10585                           
 10586                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10587                           ; Switch size 1, requested type "simple"
 10588                           ; Number of cases is 1, Range of values is 0 to 0
 10589                           ; switch strategies available:
 10590                           ; Name         Instructions Cycles
 10591                           ; simple_byte            4     3 (average)
 10592                           ; direct_byte            8     6 (fixed)
 10593                           ; jumptable            260     6 (fixed)
 10594                           ;	Chosen strategy is simple_byte
 10595  04C9  0871               	movf	??_INT_DefaultInterruptHandler+1,w
 10596  04CA  3A00               	xorlw	0	; case 0
 10597  04CB  1903               	skipnz
 10598  04CC  2CCE               	goto	i1l3883
 10599  04CD  2CB2               	goto	i1l2371
 10600  04CE                     i1l3883:	
 10601                           
 10602                           ; Switch size 1, requested type "simple"
 10603                           ; Number of cases is 3, Range of values is 0 to 2
 10604                           ; switch strategies available:
 10605                           ; Name         Instructions Cycles
 10606                           ; simple_byte           10     6 (average)
 10607                           ; direct_byte           12     6 (fixed)
 10608                           ; jumptable            260     6 (fixed)
 10609                           ;	Chosen strategy is simple_byte
 10610  04CE  0870               	movf	??_INT_DefaultInterruptHandler,w
 10611  04CF  3A00               	xorlw	0	; case 0
 10612  04D0  1903               	skipnz
 10613  04D1  2C7C               	goto	i1l2347
 10614  04D2  3A01               	xorlw	1	; case 1
 10615  04D3  1903               	skipnz
 10616  04D4  2C8C               	goto	i1l2355
 10617  04D5  3A03               	xorlw	3	; case 2
 10618  04D6  1903               	skipnz
 10619  04D7  2CD9               	goto	i1l269
 10620  04D8  2CB2               	goto	i1l2371
 10621  04D9                     i1l269:	
 10622                           
 10623                           ;mcc_generated_files/ext_int.c: 135:   INTCONbits.INTF = 0;
 10624  04D9  108B               	bcf	11,1	;volatile
 10625  04DA                     i1l280:	
 10626  04DA  0008               	return
 10627  04DB                     __end_of_INT_DefaultInterruptHandler:	
 10628  007E                     btemp	set	126	;btemp
 10629  007E                     int$flags	set	126
 10630  007E                     wtemp0	set	126


Data Sizes:
    Strings     103
    Constant    0
    Data        40
    BSS         90
    Persistent  48
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80      4      80
    BANK2            80      2      69
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_5(CODE[23]), STR_4(CODE[20]), STR_3(CODE[20]), STR_2(CODE[19]), 
		 -> STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S1629_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_5(CODE[23]), STR_4(CODE[20]), STR_3(CODE[20]), STR_2(CODE[19]), 
		 -> STR_1(CODE[21]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 23
		 -> STR_5(CODE[23]), STR_4(CODE[20]), STR_3(CODE[20]), STR_2(CODE[19]), 
		 -> STR_1(CODE[21]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK1[6]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> writePersistentState@buf(BANK0[64]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _startUp->_setLEDColor
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setCurrent->___awdiv
    _selectSomething->_setLEDColor
    _vfpfcnvrt->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    ___aldiv->___awdiv
    _lowBattery->_setLEDColor
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR4_DefaultInterruptHandler->_DAC_SetOutput
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _process_remote_command->_writePersistentState
    _writePersistentState->_FLASH_WriteBlock
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    _selectResetValue->_printf
    _selectIncrease->_printf
    _selectFrequency->_printf
    _selectDecrease->_printf
    _selectCurrent->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _battery_voltage->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_process_remote_command

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   79816
                                              3 BANK1      1     1      0
                                              0 BANK2      2     2      0
                     _DAC_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
                         _lowBattery
             _process_remote_command
                _readPersistentState
                         _setCurrent
                       _setFrequency
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              4     4      0    5190
                                              0 BANK0      4     4      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (1) _readPersistentState                                  2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0   60320
                                              0 BANK1      3     3      0
                    _battery_voltage
                      _selectCurrent
                     _selectDecrease
                    _selectFrequency
                     _selectIncrease
                   _selectResetValue
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
               _writePersistentState
 ---------------------------------------------------------------------------------
 (2) _writePersistentState                                70    70      0    1464
                                             10 BANK0     70    70      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3    1140
                                              0 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     215
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setFrequency                                         5     3      2    2680
                                             23 BANK0      5     3      2
            _TMR4_LoadPeriodRegister
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _TMR4_LoadPeriodRegister                              1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setCurrent                                          16    12      4    4142
                                             25 BANK0     16    12      4
                            ___aldiv
                            ___awdiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     612
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     683
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    5122
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectResetValue                                     2     2      0    8064
                                             27 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectIncrease                                       2     2      0    8064
                                             27 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    8064
                                             27 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectDecrease                                       1     1      0    8064
                                             27 BANK0      1     1      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    8064
                                             27 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (3) _printf                                               6     4      2    2942
                                             21 BANK0      6     4      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     5      3    2272
                                             13 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           40    38      2    1759
                                              5 BANK0      8     6      2
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3    1158
                                              5 COMMON     3     0      3
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0      62
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART_Write                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2    1397
                                             23 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1397
                                              8 BANK0     15     7      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lowBattery                                           2     2      0    5122
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    5122
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     900
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     150
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     150
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     150
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     450
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     150
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0     156
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR4_ISR                                            0     0      0      22
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR4_DefaultInterruptHandler                        0     0      0      22
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (12) _DAC_SetOutput                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT_ISR                                             0     0      0     134
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (11) _INT_CallBack                                        0     0      0     134
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _INT_DefaultInterruptHandler                         3     3      0     134
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _lowBattery
     _setLEDColor
   _process_remote_command
     _battery_voltage
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
     _selectCurrent
       _printf
         _vfprintf
           _vfpfcnvrt
             _fputc
               _putch
                 _EUSART_Write
       _setLEDColor
     _selectDecrease
       _printf
         _vfprintf
           _vfpfcnvrt
             _fputc
               _putch
                 _EUSART_Write
       _setLEDColor
     _selectFrequency
       _printf
         _vfprintf
           _vfpfcnvrt
             _fputc
               _putch
                 _EUSART_Write
       _setLEDColor
     _selectIncrease
       _printf
         _vfprintf
           _vfpfcnvrt
             _fputc
               _putch
                 _EUSART_Write
       _setLEDColor
     _selectResetValue
       _printf
         _vfprintf
           _vfpfcnvrt
             _fputc
               _putch
                 _EUSART_Write
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___awdiv
       ___lmul
       _battery_voltage (ARG)
         ___aldiv
           ___awdiv (ARG)
           ___lmul (ARG)
     _setFrequency
       _TMR4_LoadPeriodRegister
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
       ___lmul
     _setLEDColor
     _writePersistentState
       _FLASH_WriteBlock
         _FLASH_EraseBlock
   _readPersistentState
   _setCurrent
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
     ___awdiv
     ___lmul
     _battery_voltage (ARG)
       ___aldiv
         ___awdiv (ARG)
         ___lmul (ARG)
   _setFrequency
     _TMR4_LoadPeriodRegister
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
     ___lmul
   _startUp
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       _DAC_SetOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      F0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      4      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      2      45      10       86.2%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      F0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Aug  2 15:42:28 2020

                                            l7 0D76                                    __CFG_CP$OFF 0000  
                                           l51 0DB4                                             l54 0D61  
                                           l48 0ECD                                   ___awdiv@sign 0021  
                      __end_of_OPA1_Initialize 0D5A                                _timer0ReloadVal 0079  
                      __size_of_selectIncrease 0025                                    __CFG_LVP$ON 0000  
                                          l117 0D59                                            l109 07B1  
                                          l213 0DBE                                            l222 0DA0  
                                          l240 0D7C                                            l320 0D5D  
                                          l216 0DC6                                            l234 0D82  
                                          l237 0D88                                            l405 0D9A  
                                          l262 0D8E                                            l353 0D94  
                                          l337 0E11                                            l602 0F3A  
                                          l283 0DD2                                            l612 051B  
                                          l452 0E69                                            l189 0EAB  
                                          l445 0419                                            l446 046E  
                                          l383 0E36                                            l296 0DBC  
                                          l616 0540                                            l448 0466  
                                          l609 0279                                            l562 0754  
                                          l554 0E89                                            l571 069B  
                                          l651 01D4                                            l564 0759  
                                          l565 0760                                            l590 0FB3  
                                          l398 0D70                                            l567 0764  
                                          l559 05FC                                            l576 0E4D  
                                          l568 077E                                            l584 0717  
                                          l833 028D                                            l593 0F89  
                                          l921 05A0                                            l579 0FDF  
                                          l843 0309                                            l587 0657  
                                          l764 07E2                                            l596 0F14  
                                          l758 0387                                            l782 074B  
                                          l599 0EEF                                            _PR2 001B  
                                          _PR4 0416                 ?_EUSART_SetFramingErrorHandler 0073  
                              _TMR2_Initialize 0DB5                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                    main@batt_mv 0163  
               FLASH_WriteBlock@flashWordArray 0022                       __size_of_selectFrequency 002A  
                                         l1230 06DB                                           l1245 0E23  
                                         l3121 0D9C                                           l3201 07DA  
                                         l3211 0D89                                           l3131 06B5  
                                         l3123 069C                                           l3205 0D7D  
                                         l3213 0D8F                                           l3301 027A  
                                         l3117 0DBE                                           l3133 06D3  
                                         l3125 06A1                                           l3141 0325  
                                         l3221 040A                                           l3207 0D83  
                                         l3215 0D95                                           l3311 02A0  
                                         l3303 027C                                           l3119 0DC3  
                                         l3127 06A6                                           l3151 0353  
                                         l3143 032A                                           l3231 0423  
                                         l3223 040E                                           l3209 0D77  
                                         l3401 0790                                           l3321 02C2  
                                         l3313 02A8                                           l3305 0280  
                                         l3129 06AB                                           l3145 032E  
                                         l3161 0364                                           l3137 030C  
                                         l3217 0D6D                                           l3241 0427  
                                         l3233 0424                                           l3411 0798  
                                         l3403 0792                                           l3331 02EB  
                                         l3323 02C9                                           l3315 02B0  
                                         l3307 0291                                           l3163 037D  
                                         l3147 0340                                           l3155 0359  
                                         l3139 031D                                           l3171 0E52  
                                         l3251 044D                                           l3243 042A  
                                         l3235 0425                                           l3227 041A  
                                         l3219 0403                                           l3421 0DB1  
                                         l3413 0799                                           l3405 0793  
                                         l3325 02DB                                           l3317 02B3  
                                         l3333 02F1                                           l3309 029C  
                                         l3157 0361                                           l3149 0348  
                                         l3341 0541                                           l3181 0E5A  
                                         l3173 0E53                                           l3261 045C  
                                         l3253 044F                                           l3245 042E  
                                         l3229 0421                                           l3501 05DC  
                                         l3423 0DB2                                           l3415 07A8  
                                         l3407 0794                                           l3431 0E27  
                                         l3271 0E3D                                           l3335 02F6  
                                         l3327 02E3                                           l3319 02BE  
                                         l3511 0765                                           l3351 0552  
                                         l3343 0543                                           l3191 0E64  
                                         l3183 0E5F                                           l3175 0E56  
                                         l3263 0460                                           l3255 0454  
                                         l3247 0438                                           l3503 05E0  
                                         l3441 0D5A                                           l3417 0DAD  
                                         l3409 0796                                           l3433 0E28  
                                         l3425 0D5E                                           l3601 0EAC  
                                         l3273 0E40                                           l3337 0301  
                                         l3329 02E4                                           l3193 07B4  
                                         l3281 0E12                                           l3521 062A  
                                         l3361 0566                                           l3353 0557  
                                         l3345 0547                                           l3185 0E60  
                                         l3177 0E58                                           l3169 0E4E  
                                         l3265 0468                                           l3257 0455  
                                         l3249 0446                                           l3505 05ED  
                                         l3451 0DC7                                           l3427 0D56  
                                         l3419 0DB0                                           l3443 0DB5  
                                         l3435 0E2A                                           l3611 0660  
                                         l3275 0E45                                           l3195 07B8  
                                         l3283 0E17                                           l3531 0F98  
                                         l3523 0637                                           l3515 05FD  
                                         l3371 0586                                           l3363 056B  
                                         l3355 055B                                           l3347 054C  
                                         l3291 0725                                           l3187 0E61  
                                         l3179 0E59                                           l3259 0456  
                                         l3507 05F1                                           l3603 0E6A  
                                         l3453 0DCA                                           l3461 0E07  
                                         l3445 0DB8                                           l3437 0E2C  
                                         l3429 0E24                                           l3621 066D  
                                         l3613 0662                                           l3605 0658  
                                         l3277 0E48                                           l3269 0E38  
                                         l3509 074C                                           l3197 07BC  
                                         l3541 0F7B                                           l3533 0FAB  
                                         l3525 064A                                           l3517 060A  
                                         l3381 059C                                           l3373 0587  
                                         l3365 056F                                           l3357 055D  
                                         l3349 054E                                           l3293 072D  
                                         l3189 0E62                                           l3701 00E5  
                                         l3471 0E93                                           l3455 0DD1  
                                         l3391 0786                                           l3463 0E08  
                                         l3447 0DB9                                           l3439 0E33  
                                         l3631 067C                                           l3623 0672  
                                         l3615 0668                                           l3607 065B  
                                         l3279 0E4B                                           l3199 07D0  
                                         l3543 0F81                                           l3535 0F62  
                                         l3527 0F8A                                           l3551 0F0C  
                                         l3519 0617                                           l3375 058C  
                                         l3367 0573                                           l3359 0563  
                                         l3295 0734                                           l3287 0718  
                                         l3711 00FC                                           l3703 00EB  
                                         l3385 0D71                                           l3473 0E94  
                                         l3393 0788                                           l3465 0E09  
                                         l3457 0E00                                           l3449 0DBA  
                                         l3641 0688                                           l3633 067E  
                                         l3625 0674                                           l3617 066A  
                                         l3609 065F                                           l3537 0F64  
                                         l3553 0ECE                                           l3529 0F8F  
                                         l3545 0EF0                                           l3561 0F15  
                                         l3369 0582                                           l3377 0592  
                                         l3297 0743                                           l3289 0720  
                                         l3481 05A1                                           l3713 00FE  
                                         l3721 011D                                           l3705 00EF  
                                         l3801 03BC                                           l3475 0E9B  
                                         l3395 078A                                           l3387 077F  
                                         l3467 0E0A                                           l3459 0E05  
                                         l3643 068D                                           l3635 0680  
                                         l3627 0676                                           l3619 066C  
                                         l3651 0FBF                                           l3539 0F6E  
                                         l3555 0ED8                                           l3547 0EFD  
                                         l3563 0F1F                                           l3379 0597  
                                         l3571 025B                                           l3491 05A9  
                                         l3731 0132                                           l3723 0123  
                                         l3715 0102                                           l3707 00F4  
                                         l3811 03DB                                           l3803 03BD  
                                         l3477 0EA2                                           l3469 0E8A  
                                         l3397 078D                                           l3389 0783  
                                         l3645 0692                                           l3637 0681  
                                         l3629 0679                                           l3653 0FD2  
                                         l3557 0EE1                                           l3549 0F06  
                                         l3565 0F2C                                           l3573 0268  
                                         l3581 04DB                                           l3493 05AF  
                                         l3741 014D                                           l3733 0135  
                                         l3725 0128                                           l3717 0105  
                                         l3709 00F8                                           l3661 06E0  
                                         l3813 03DE                                           l3805 03BE  
                                         l3479 0EA9                                           l3399 078F  
                                         l3639 0686                                           l3647 0FB4  
                                         l3559 0EE7                                           l3567 0F32  
                                         l3575 026D                                           l3591 052F  
                                         l3583 0509                                           l3495 05B0  
                                         l3487 05A3                                           l3751 015E  
                                         l3735 0142                                           l3727 012C  
                                         l3719 011A                                           l3671 0074  
                                         l3663 06ED                                           l3655 06DC  
                                         l3815 03F3                                           l3807 03C1  
                                         l3649 0FB9                                           l3577 0272  
                                         l3569 01D5                                           l3593 0534  
                                         l3585 0516                                           l3497 05C0  
                                         l3489 05A5                                           l3753 016A  
                                         l3745 0154                                           l3729 012E  
                                         l3737 0145                                           l3681 00A6  
                                         l3673 0085                                           l3665 06F6  
                                         l3817 03FA                                           l3809 03CC  
                                         l3579 0274                                           l3595 053B  
                                         l3587 0529                                           l3499 05C4  
                                         l3755 016E                                           l3747 0158  
                                         l3739 014A                                           l3691 00CA  
                                         l3675 008A                                           l3683 00A9  
                                         l3763 0185                                           l3667 0068  
                                         l3819 03FE                                           l3597 053E  
                                         l3589 052E                                           l3757 0170  
                                         l3749 015C                                           l3765 01BB  
                                         l3693 00CD                                           l3685 00AF  
                                         l3677 008E                                           l3669 006F  
                                         l3599 053F                                           l3767 01C1  
                                         l3695 00DA                                           l3687 00C1  
                                         l3679 0091                                           l3769 01CE  
                                         l3881 0192                                           l3689 00C6  
                                         l3697 00DD                                           l3793 0388  
                                         l3699 00E2                                           l3795 0397  
                                         l3797 039A                                           l3799 03AF  
                                         STR_1 0817                                           STR_2 0854  
                                         STR_3 0840                                           STR_4 082C  
                                         STR_5 0800                                           u2010 02F1  
                                         u2011 02F0                                           u2020 02F6  
                                         u2021 02F5                                           u2005 02E5  
                                         u2110 0592                                           u2030 0547  
                                         u2111 0591                                           u2031 0546  
                                         u2120 0597                                           u2040 0552  
                                         u2200 0529                                           u2121 0596  
                                         u2105 0588                                           u2041 0551  
                                         u2201 0528                                           u2050 0563  
                                         u2210 053B                                           u2130 05AF  
                                         u2051 0562                                           u2211 053A  
                                         u2131 05AE                                           u2140 0759  
                                         u2300 00FC                                           u2220 0717  
                                         u2141 0758                                           u2205 0525  
                                         u2301 00FB                                           u2221 0716  
                                         _LATA 010C                                           u2150 0764  
                                         u2070 0573                                           u2310 0123  
                                         u2230 0074                                           _LATB 010D  
                              __end_of_INT_ISR 0D67                                           u2151 0763  
                                         u2071 0572                                           u2311 0122  
                                         u2231 0073                                           _LATC 010E  
                                         u2160 0241                                           u2320 012C  
                                         u2240 0085                                           u2065 0567  
                                         u2321 012B                                           u2241 0084  
                                         u2225 0713                                           u2090 0582  
                                         u2170 0268                                           u2330 014A  
                                         u2250 00AF                                           u2091 0581  
                                         u2171 0267                                           u2331 0149  
                                         u2251 00AE                                           u2180 0272  
                                         u2340 0153                                           u2260 00C1  
                                         u2085 0574                                           u2181 0271  
                                         u2165 023D                                           u2341 0152  
                                         u2261 00C0                                           u2245 0081  
                                         u2190 0516                                           u2270 00E2  
                                         u2095 057E                                           u2175 0264  
                                         u2191 0515                                           u2407 01C7  
                                         u2271 00E1                                           u1800 06B5  
                                         u2280 00EB                                           u2360 03DB  
                                         u1801 06B4                                           u2417 0610  
                                         u2281 00EA                                           u2265 00BD  
                                         u2361 03DA                                           u1810 06D3  
                                         u2290 00F4                                           u2370 03FA  
                                         u2507 0FC5                                           u1811 06D2  
                                         u2427 0623                                           u2195 0512  
                                         u2291 00F3                                           u2371 03F9  
                                         u1820 031D                                           u2517 0FD8  
                                         u1821 031C                                           u2437 063D  
                                         u2365 03D7                                           u1830 0340  
                                         u1815 06CF                                           u1831 033F  
                                         u2447 0650                                           u1840 07DA  
                                         u1920 0743                                           u1841 07D9  
                                         u2457 0F25                                           u1921 0742  
                                         u1905 072E                                           u1930 0280  
                                         u1770 0DC3                                           u1850 0418  
                                         u1931 027F                                           u1771 0DC2  
                                         u2467 0F01                                           u1915 0735  
                                         u1851 0417                                           u2387 06F1  
                                         u1940 0291                                           u1780 06A1  
                                         u1860 044D                                           u1941 0290  
                                         u1781 06A0                                           u2477 0F9E  
                                         u1861 044C                                           u2397 0700  
                                         u1950 02B0                                           u1790 06A6  
                                         u1870 0466                                           u1951 02AF  
                                         u1791 06A5                                           u2487 0EDC  
                                         u1871 0465                                           u1855 0414  
                                         u1880 0E3D                                           u1881 0E3C  
                                         u2497 0F74                                           i1l10 0D6B  
                                         u1970 02C2                                           u1890 0725  
                                         u1971 02C1                                           u1891 0724  
                                         u1965 02B4                                           u1990 02DB  
                                         u1991 02DA                                           u1985 02C3  
                                         u1995 02D7                                           _TMR0 0015  
                                         _TMR2 001A                                           _TMR4 0415  
                      __end_of_OPA2_Initialize 0D5E                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _dbuf 0141                                           _main 0388  
                                         _prec 00CB                                           _nout 00C7  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                              ?_FLASH_WriteBlock 0020  
          __end_of_INT_DefaultInterruptHandler 04DB                    _INT_DefaultInterruptHandler 046F  
                                         start 003E                                  __CFG_IESO$OFF 0000  
              __end_of_INT_SetInterruptHandler 0D8F                             ??_FLASH_WriteBlock 0023  
                                __CFG_MCLRE$ON 0000                     ??_TMR4_SetInterruptHandler 0075  
                      __end_of_TMR0_Initialize 0E12                 ??_TMR0_DefaultInterruptHandler 0070  
                                ?_EUSART_Write 0070                 __size_of_OSCILLATOR_Initialize 0008  
                __end_of_OSCILLATOR_Initialize 0DB5                                __end_of___aldiv 030A  
                                        ?_main 0070                                __end_of___awdiv 05A1  
                                        _ADRES 009B                                  __CFG_WDTE$OFF 0000  
                              ___awdiv@divisor 0073                                          _T2CON 001C  
                                        _T4CON 0417                                          i1l112 0D55  
                                        i1l140 002A                                          i1l141 003C  
                                        i1l136 0012                                          i1l410 07F9  
                                        i1l402 0DEE                                          i1l138 001E  
                                        i1l146 003C                                          i1l350 0DFF  
                                        i1l414 07FF                                          i1l255 0D66  
                                        i1l280 04DA                                          i1l259 0DDF  
                                        i1l356 0002                                          i1l269 04D9  
                                 ?_setLEDColor 0073                                ___awdiv@counter 0020  
                                 vfpfcnvrt@fmt 0025                       __size_of_selectSomething 005B  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _RXPPS 0E24  
                                        u98_20 0479                                          u98_21 0478  
                                        u99_20 0482                                          u99_21 0481  
            __size_of_TMR0_SetInterruptHandler 0006                                _TMR4_Initialize 0E24  
                          ___lmul@multiplicand 0024                      ?_TMR0_SetInterruptHandler 0073  
                             __end_of_TMR0_ISR 0E00                               __end_of_TMR4_ISR 0DEF  
                              __end_of_initLED 069C                        __end_of_PIN_MANAGER_IOC 0D56  
                                        _flags 00CD                                 _WDT_Initialize 0D5E  
                                        _fputc 069C                            _readPersistentState 0E6A  
                                        _width 00C9                                          _putch 0D9B  
                                        _stats 0120                                 __CFG_BOREN$OFF 0000  
                                        pclath 000A                                __end_of_startUp 0718  
                                        status 0003                        ?_process_remote_command 0070  
                                        wtemp0 007E                               ??_DAC_Initialize 0073  
                              __initialization 0040                                   __end_of_main 0403  
                         ?_readPersistentState 0070                          __end_of_selectCurrent 0F8A  
                               ??_EUSART_Write 0073                        __end_of_TMR2_Initialize 0DBD  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0070  
                             ?_OPA1_Initialize 0070                                         ??_main 00EF  
                     __size_of_battery_voltage 0033                  __size_of_writePersistentState 005C  
                               __CFG_PLLEN$OFF 0000                       ?_TMR4_LoadPeriodRegister 0070  
                       __end_of_WDT_Initialize 0D62                       __end_of_selectResetValue 0F3B  
                                    ??_INT_ISR 0073              _EUSART_DefaultFramingErrorHandler 0000  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 00E4                      FLASH_WriteBlock@writeAddr 0020  
                                       ?_fputc 0075                                         _CCPR1L 0291  
                             ___awdiv@dividend 0075                                 __CFG_ZCDDIS$ON 0000  
                                       _ANSELA 018C                                         ?_putch 0070  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                         _RC1REG 0199  
                                       _RA5PPS 0E95                                         _RC1STA 019D  
                                       u100_20 0488                                         u100_21 0487  
                                       u101_25 048D                                         u102_20 0499  
                                       u102_21 0498                                         _RC4PPS 0EA4  
                                       u103_20 049F                                         u103_21 049E  
                                       i1l3001 000A                                         i1l3011 0026  
                                       i1l3003 000E                                         _RB7PPS 0E9F  
                                       _RC5PPS 0EA5                                         i1l3013 002E  
                                       i1l3005 0016                                         i1l3015 0033  
                                       i1l3007 001A                                         u104_20 04AB  
                                       u104_21 04AA                                         i1l3017 0038  
                                       i1l3009 0022                                         _ODCONA 028C  
                                       _ODCONB 028D                                         _ODCONC 028E  
                                       i1l2341 0475                                         i1l2351 0488  
                                       i1l2343 0479                                         i1l2327 0D68  
                                       u105_20 04B1                                         u105_21 04B0  
                                       i1l2361 049F                                         i1l2353 0489  
                                       i1l2345 047A                                         i1l2337 046F  
                                       i1l2371 04B2                                         i1l2363 04A0  
                                       i1l2355 048C                                         i1l2347 047C  
                                       i1l2339 0474                 __end_of_process_remote_command 01D5  
                                       i1l2373 04B4                                         i1l2365 04A5  
                                       i1l2357 0493                                         i1l2349 0482  
                                       i1l2375 04BA                                         i1l2367 04AB  
                                       i1l2359 0499                                         i1l2383 04C5  
                                       u106_20 04BA                                         i1l2377 04C0  
                                       u106_21 04B9                                         i1l2801 0DF3  
                                       i1l2803 0DFA                                         i1l2811 0DE2  
                                       i1l2661 0DDA                                         i1l2805 0D62  
                                       i1l2813 0DE9                                         i1l2807 0D63  
                                       i1l2671 07F4                                         i1l2663 07E3  
                                       u107_20 04C0                                         u107_21 04BF  
                                       i1l2673 07FB                                         i1l2665 07E9  
                                       i1l2809 0DE0                                         i1l2659 0DD3  
                                       i1l2667 07EA                                         i1l2669 07EF  
                                       i1l2797 0DEF                                         i1l2799 0DF0  
                                       i1l3883 04CE                                         i1l2999 0006  
                                       u136_20 0DDA                                         u136_21 0DD9  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         u137_20 07E9  
                                       u137_21 07E8                                         u138_20 07EF  
                                       u170_20 0026                                         u138_21 07EE  
                                       u170_21 0025                                         u171_20 002E  
                                       _FVRCON 0117                                         u171_21 002D  
                                       u148_20 0DFA                                         u172_20 0033  
                                       u148_21 0DF9                                         u172_21 0032  
                                       u149_20 0DE9                                         u173_20 0038  
                                       u165_20 000A                                         u149_21 0DE8  
                                       u173_21 0037                                         u165_21 0009  
                                       u166_20 000E                                         u166_21 000D  
                                       u167_20 0016                                         u167_21 0015  
                                       u168_20 001A                                         u168_21 0019  
                                       _INTPPS 0E10                                         _PMADRH 0192  
                                       u169_20 0022                                         _PMADRL 0191  
                                       u169_21 0021                               ?_OPA2_Initialize 0070  
                                       _PMDATH 0194                                         _PMDATL 0193  
                                       _PMCON2 0196                      __size_of_FLASH_EraseBlock 001C  
                                       _OSCCON 0099                                         _TX1REG 019A  
                                       _WDTCON 0097                                         _TX1STA 019E  
                            ??_selectFrequency 003B                                 __CFG_PWRTE$OFF 0000  
                               _selectDecrease 0ECE                                         _Vdd_mv 00CF  
                                 vfprintf@cfmt 0033                          ??_readPersistentState 0073  
                                       ___lmul 0718                                      ??___aldiv 0030  
                                    ??___awdiv 0077                                 __CFG_STVREN$ON 0000  
                             ?_TMR0_Initialize 0070                        __end_of_TMR4_Initialize 0E37  
                             ___awdiv@quotient 0022                                 _selectIncrease 0EF0  
                                       _printf 0E12                                  ?_INT_CallBack 0070  
                                    ??_initLED 0073           __end_of_TMR4_DefaultInterruptHandler 0800  
        __size_of_TMR4_DefaultInterruptHandler 001D                   _TMR4_DefaultInterruptHandler 07E3  
                                       fputc@c 0075                                   __pdataCOMMON 007A  
                             setCurrent@Vdd_mv 003B                                ?_WDT_Initialize 0070  
             __size_of_INT_SetInterruptHandler 0006                               __end_of_vfprintf 07E3  
                                    ??_startUp 0020       TMR4_SetInterruptHandler@InterruptHandler 0073  
     TMR0_SetInterruptHandler@InterruptHandler 0073        INT_SetInterruptHandler@InterruptHandler 0073  
                             ?_PIN_MANAGER_IOC 0070                              ??_selectSomething 0020  
                            _SYSTEM_Initialize 0EAC                        __end_of__initialization 0062  
                       __end_of_selectDecrease 0EF0                             ?_SYSTEM_Initialize 0070  
                       DAC_SetOutput@inputData 0070                              _dc_frequency_flag 007A  
                               __pcstackCOMMON 0070                                   __pidataBANK1 0F3B  
                          ??_SYSTEM_Initialize 0075                                      ?_TMR0_ISR 0070  
                                    ?_TMR4_ISR 0070                         __end_of_selectIncrease 0F15  
                                __end_of_fputc 06DC                                  __end_of_putch 0DA1  
                             ?_TMR2_Initialize 0070                __end_of_TMR4_LoadPeriodRegister 0D71  
                               ??_INT_CallBack 0073                    __size_of_EXT_INT_Initialize 000C  
                               _OPTION_REGbits 0095                  ?_TMR4_DefaultInterruptHandler 0070  
                       __size_of_DAC_SetOutput 0005                           __size_of_setLEDColor 0017  
                  FLASH_WriteBlock@GIEBitValue 0028                ??_EUSART_SetOverrunErrorHandler 0075  
                            ??_battery_voltage 0078                                        ??_fputc 0020  
                    __end_of_SYSTEM_Initialize 0ECE                                        ??_putch 0074  
                                ?_setFrequency 0037                                     __pbssBANK1 00C7  
                                   __pbssBANK2 0120                           __end_of_EUSART_Write 0DC7  
                              ?_selectDecrease 0070                          _TMR4_InterruptHandler 00DE  
                                   __pmaintext 0388               __end_of_TMR0_SetInterruptHandler 0D95  
                                      ?___lmul 0020                                     ??_TMR0_ISR 0070  
                              __CFG_PPS1WAY$ON 0000                                     ??_TMR4_ISR 0071  
                                   __pintentry 0004                                ?_selectIncrease 0070  
                               ___lmul@product 0073                               ?_TMR4_Initialize 0070  
                                      ?_printf 0035                      __size_of_FLASH_WriteBlock 006C  
                                      _OPA1CON 0511                                        _OPA2CON 0515  
                                      _LED_red 00D5                                        _SP1BRGH 019C  
                                      _SP1BRGL 019B                                        _INT_ISR 0D62  
                           __size_of_vfpfcnvrt 007E                              _maxFrequencyIndex 00A0  
                                      _OSCSTAT 009A                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM4DCH 061B  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                       ??_EUSART_SetErrorHandler 0075  
                               ??_setFrequency 0039                                _maxCurrentIndex 00A2  
                             _FLASH_EraseBlock 0E4E                                  _DAC_SetOutput 0D67  
                                      ___aldiv 027A                                        ___awdiv 0541  
                              __size_of___lmul 0034                                      ?_vfprintf 002D  
                                      __ptext1 06DC                                        __ptext2 0E6A  
                                      __ptext3 0066                                        __ptext4 05A1  
                                      __ptext5 0403                                        __ptext6 0E4E  
                                      __ptext7 04DB                                        __ptext8 0D6C  
                                      __ptext9 01D5                                __size_of_printf 0012  
                                      _initLED 0658                                        _ir_code 00D8  
                                   _lowBattery 0FB4                          _OSCILLATOR_Initialize 0DAD  
                                    _T2CONbits 001C                               ___aldiv@dividend 002C  
                                    _T4CONbits 0417                       ??_PIN_MANAGER_Initialize 0073  
            __size_of_TMR4_SetInterruptHandler 0006                        _INT_SetInterruptHandler 0D89  
                    ?_TMR4_SetInterruptHandler 0073                              ?_selectResetValue 0070  
                              _selectFrequency 0F8A                                        _startUp 06DC  
                   __size_of_SYSTEM_Initialize 0022                                        clrloop0 0DA2  
                           ??_selectResetValue 003B                           end_of_initialization 0062  
               ??_TMR4_DefaultInterruptHandler 0071                                     _setCurrent 01D5  
        __end_of_EUSART_SetOverrunErrorHandler 0D89         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0D83                   __end_of_writePersistentState 05FD  
                                    _LED_green 00D4                                        fputc@fp 0077  
                                      init_ram 0DA7                                        initloop 0DA8  
                         __end_of_INT_CallBack 0DE0               __size_of_TMR4_LoadPeriodRegister 0005  
                            _EUSART_Initialize 0E8A                                 _frequencyIndex 00E8  
                            setCurrent@Vdac_mv 0045                                 ?_DAC_SetOutput 0070  
                             __CFG_CLKOUTEN$ON 0000                                 _frequencyValue 00BB  
                           ?_EUSART_Initialize 0070                              __end_of_vfpfcnvrt 0388  
                             ___aldiv@quotient 0033                                     ??_vfprintf 0030  
                              setLEDColor@blue 0074                            ??_EUSART_Initialize 0075  
                             ??_WDT_Initialize 0073                       _TMR0_SetInterruptHandler 0D8F  
                              _selectSomething 05FD                        writePersistentState@buf 002E  
                      writePersistentState@idx 006F                               __CFG_FOSC$INTOSC 0000  
                        __size_of_EUSART_Write 000A                       __size_of_OPA1_Initialize 0004  
              __size_of_EUSART_SetErrorHandler 0006                         __size_of_selectCurrent 0028  
                    __end_of_EUSART_Initialize 0EAC                                    _CCP1CONbits 0293  
                  __end_of_readPersistentState 0E8A                              FLASH_WriteBlock@i 0029  
                     __size_of_OPA2_Initialize 0004                           __end_of_setFrequency 0541  
                               __end_of___lmul 074C                     _EUSART_DefaultErrorHandler 0000  
                                  vfpfcnvrt@ap 0026                                    vfpfcnvrt@fp 002C  
                              _battery_voltage 074C                                  __pidataCOMMON 0003  
                                 _EUSART_Write 0DBD                              __size_of_TMR0_ISR 0011  
                            __size_of_TMR4_ISR 000F                               _FLASH_WriteBlock 0403  
                       ?_OSCILLATOR_Initialize 0070                        __end_of_selectFrequency 0FB4  
                    ??_INT_SetInterruptHandler 0075                        __size_of_DAC_Initialize 0006  
                                  ?_lowBattery 0070                                 __end_of_printf 0E24  
                 __p_HEF_persistent_state_text 0FE0                            start_initialization 0040  
                     __size_of_TMR0_Initialize 0012                __size_of_PIN_MANAGER_Initialize 0033  
                             ??_selectDecrease 003B                                    putch@txData 0074  
                                  ?_setCurrent 0039                                ??_DAC_SetOutput 0070  
                     __size_of_PIN_MANAGER_IOC 0001                   ?_INT_DefaultInterruptHandler 0070  
                             ??_selectIncrease 003B                 ?_EUSART_SetOverrunErrorHandler 0073  
                                  vfprintf@fmt 002D                     _EUSART_FramingErrorHandler 00E6  
                      __end_of_selectSomething 0658                                       ??___lmul 0073  
                       _EUSART_SetErrorHandler 0D77                                    _CCPTMRSbits 029E  
                                _selectCurrent 0F62                                    __pdataBANK1 00A0  
                  FLASH_EraseBlock@GIEBitValue 0075                     __end_of_EXT_INT_Initialize 0DD3  
                     __end_of_FLASH_EraseBlock 0E6A                                       ??_printf 0037  
                         _writePersistentState 05A1                                  ??_setLEDColor 0075  
                        writePersistentState@i 006E                                    __pbssCOMMON 0078  
                                    ___latbits 0001                       ??_process_remote_command 00EC  
                                     ?_INT_ISR 0070                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00EC                                  __pcstackBANK2 0163  
                     __size_of_TMR2_Initialize 0008                          __size_of_INT_CallBack 000D  
                                    _dac_value 00D6                        _TMR4_LoadPeriodRegister 0D6C  
                   __size_of_EUSART_Initialize 0022                                   _currentIndex 00EA  
                            ??_OPA1_Initialize 0073                                   _currentValue 00A5  
                        _TMR0_InterruptHandler 00E0                                      __pnvBANK1 00DE  
                                    __pnvBANK2 0161                            __size_of_lowBattery 002C  
                       _PIN_MANAGER_Initialize 077F                        __end_of_battery_voltage 077F  
                ??_INT_DefaultInterruptHandler 0070                                       ?___aldiv 0028  
             __end_of_TMR4_SetInterruptHandler 0D9B                                 ?_selectCurrent 0070  
                                     ?___awdiv 0073                                       _DAC1CON0 0118  
                                     _DAC1CON1 0119                   ??_INTERRUPT_InterruptManager 0073  
                          __size_of_setCurrent 00A5                          ?_writePersistentState 0070  
                            ??_OPA2_Initialize 0073                              __size_of_vfprintf 0031  
                             ?_selectFrequency 0070                                   _INT_CallBack 0DD3  
                                     _BAUD1CON 019F                                       ?_initLED 0070  
                     __size_of_TMR4_Initialize 0013                                       ?_startUp 0070  
                          __end_of_setLEDColor 0E4E                                 __size_of_fputc 0040  
                                    _microamps 00D1                                 __size_of_putch 0006  
               FLASH_WriteBlock@blockStartAddr 0026                                ___aldiv@divisor 0028  
                            ??_TMR0_Initialize 0075                                ___aldiv@counter 0031  
       EUSART_SetErrorHandler@interruptHandler 0073                                       _LED_blue 00D3  
                                    clear_ram0 0DA1                                       _PIE2bits 0092  
                            _eusartRxLastError 00D7                   _HEF_persistent_state_absaddr 0FE0  
                        __size_of_setFrequency 0066            __size_of_INTERRUPT_InterruptManager 003A  
                    __size_of_selectResetValue 0026                     ??_TMR0_SetInterruptHandler 0075  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0075  
                                     _PIR2bits 0012                      FLASH_EraseBlock@startAddr 0073  
                             ?_selectSomething 0070                                 setLEDColor@red 0076  
                                     _TMR0_ISR 0DEF              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR4_ISR 0DE0                              ??_PIN_MANAGER_IOC 0070  
                                    _vfpfcnvrt 030A                                     _ADCON0bits 009D  
                               _DAC_Initialize 0D71           __size_of_INT_DefaultInterruptHandler 006C  
              __size_of_process_remote_command 016F                               __size_of_INT_ISR 0005  
                    ??_TMR4_LoadPeriodRegister 0073                              ___lmul@multiplier 0020  
                                 _setFrequency 04DB                              ??_TMR2_Initialize 0073  
                 __end_of_HEF_persistent_state 1000                       __end_of_FLASH_WriteBlock 046F  
                              ??_selectCurrent 003B                               ?_battery_voltage 0037  
                                   vfprintf@ap 002F                                     vfprintf@fp 0032  
                      ??_OSCILLATOR_Initialize 0073                            _EUSART_ErrorHandler 0161  
                             __size_of___aldiv 0090                               __size_of___awdiv 0060  
                       ??_writePersistentState 002A                         __end_of_DAC_Initialize 0D77  
                                   ?_vfpfcnvrt 0025                            setFrequency@PR4_val 003A  
                     _TMR4_SetInterruptHandler 0D95                                   ??_lowBattery 0020  
                                  _currentIsOn 00A4                                    _setLEDColor 0E37  
                           setCurrent@DACValue 0047                               __size_of_initLED 0044  
                                     __ptext10 0718                                       __ptext11 0541  
                                     __ptext20 030A                                       __ptext12 05FD  
                                     __ptext21 069C                                       __ptext13 0F15  
                                     __ptext30 0D5E                                       __ptext22 0D9B  
                                     __ptext14 0EF0                                       __ptext31 0E24  
                                     __ptext23 0DBD                                       __ptext15 0F8A  
                                     __ptext40 0DC7                                       __ptext32 0D95  
                                     __ptext24 074C                                       __ptext16 0ECE  
                                     __ptext41 0D89                                       __ptext33 0DB5  
                                     __ptext25 027A                                       __ptext17 0F62  
                                     __ptext50 0D67                                       __ptext42 0E8A  
                                     __ptext34 0E00                                       __ptext26 0FB4  
                                     __ptext18 0E12                                       __ptext51 0DEF  
                                     __ptext43 0D83                                       __ptext35 0D8F  
                                     __ptext27 0E37                                       __ptext19 07B2  
                                     __ptext52 0002                                       __ptext44 0D7D  
                                     __ptext36 077F                                       __ptext28 0658  
                                     __ptext53 0D55                                       __ptext45 0D77  
                                     __ptext37 0DAD                                       __ptext29 0EAC  
                                     __ptext54 0D62                                       __ptext46 0D71  
                                     __ptext38 0D5A                                       __ptext55 0DD3  
                                     __ptext39 0D56                                       __ptext56 046F  
                                     __ptext48 0DE0                                       __ptext49 07E3  
                             __size_of_startUp 003C                                   ??_setCurrent 003D  
                               _interfaceState 0078                              ??_TMR4_Initialize 0075  
                                __size_of_main 007B           __end_of_TMR0_DefaultInterruptHandler 0003  
        __size_of_TMR0_DefaultInterruptHandler 0001                   _TMR0_DefaultInterruptHandler 0002  
                      ?_EUSART_SetErrorHandler 0073                         _process_remote_command 0066  
                                   _RC1STAbits 019D                             __end_of_lowBattery 0FE0  
EUSART_SetOverrunErrorHandler@interruptHandler 0073                                       int$flags 007E  
                 __size_of_readPersistentState 0020                                       _vfprintf 07B2  
           __end_of_INTERRUPT_InterruptManager 003E                     _INTERRUPT_InterruptManager 0004  
                                    printf@fmt 0035          __end_of_EUSART_SetFramingErrorHandler 0D83  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0D7D  
                              ?_DAC_Initialize 0070                              ?_FLASH_EraseBlock 0073  
                           __end_of_setCurrent 027A                             ??_FLASH_EraseBlock 0075  
                                   _INTCONbits 000B                INT_DefaultInterruptHandler@time 0072  
                                  _PWM3DCLbits 0617                                _OPA1_Initialize 0D56  
                                  _PWM4DCLbits 061A                                     _FVRCONbits 0117  
                         _INT_InterruptHandler 00E2                                    _PWM3CONbits 0619  
                                  _PWM4CONbits 061C                             _EXT_INT_Initialize 0DC7  
                      __size_of_WDT_Initialize 0004                                       intlevel1 0000  
                                   _PMCON1bits 0195                        ?_PIN_MANAGER_Initialize 0070  
                   process_remote_command@code 00EE                 __end_of_EUSART_SetErrorHandler 0D7D  
                          ?_EXT_INT_Initialize 0070                          __end_of_DAC_SetOutput 0D6C  
                              _OPA2_Initialize 0D5A                               _selectResetValue 0F15  
                ?_TMR0_DefaultInterruptHandler 0070                                       printf@ap 003A  
EUSART_SetFramingErrorHandler@interruptHandler 0073                       ?_INT_SetInterruptHandler 0073  
                                  ??_vfpfcnvrt 0027                                       startUp@i 0022  
                                __pstringtext1 0800                                  __pstringtext2 0817  
                                __pstringtext3 082C                                  __pstringtext4 0840  
                                __pstringtext5 0854                                  __pstringtext6 0000  
                         ??_EXT_INT_Initialize 0075                                     _OPTION_REG 0095  
                         _HEF_persistent_state 0FE0                               setLEDColor@green 0073  
                              _TMR0_Initialize 0E00                            setCurrent@microamps 0039  
                                 ___aldiv@sign 0032                                     _TX1STAbits 019E  
                     setFrequency@frequency_hz 0037                             EUSART_Write@txData 0073  
               __end_of_PIN_MANAGER_Initialize 07B2                                _PIN_MANAGER_IOC 0D55  
                      __size_of_selectDecrease 0022               TMR4_LoadPeriodRegister@periodVal 0073  
